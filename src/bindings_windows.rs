#![allow(non_snake_case,non_camel_case_types)]
use winapi::shared::minwindef::HINSTANCE;

/* automatically generated by rust-bindgen */

pub const BI_PNG: i32 = 5;
pub const URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML: i32 = 5643;
pub const IDR_UASTYLE_HTML_CSS: i32 = 25500;
pub const IDR_UASTYLE_QUIRKS_CSS: i32 = 25501;
pub const IDR_UASTYLE_VIEW_SOURCE_CSS: i32 = 25502;
pub const IDR_UASTYLE_THEME_CHROMIUM_ANDROID_CSS: i32 = 25503;
pub const IDR_UASTYLE_FULLSCREEN_ANDROID_CSS: i32 = 25504;
pub const IDR_UASTYLE_THEME_CHROMIUM_LINUX_CSS: i32 = 25505;
pub const IDR_UASTYLE_THEME_INPUT_MULTIPLE_FIELDS_CSS: i32 = 25508;
pub const IDR_UASTYLE_THEME_WIN_CSS: i32 = 25509;
pub const IDR_UASTYLE_THEME_WIN_QUIRKS_CSS: i32 = 25510;
pub const IDR_UASTYLE_THEME_CONTROLS_REFRESH_CSS: i32 = 25511;
pub const IDR_UASTYLE_THEME_FORCED_COLORS_CSS: i32 = 25512;
pub const IDR_UASTYLE_SVG_CSS: i32 = 25513;
pub const IDR_UASTYLE_MATHML_CSS: i32 = 25514;
pub const IDR_UASTYLE_FULLSCREEN_CSS: i32 = 25515;
pub const IDR_UASTYLE_XHTMLMP_CSS: i32 = 25516;
pub const IDR_UASTYLE_VIEWPORT_ANDROID_CSS: i32 = 25517;
pub const IDR_UASTYLE_VIEWPORT_TELEVISION_CSS: i32 = 25518;
pub const IDR_INSPECT_TOOL_COMMON_JS: i32 = 25519;
pub const IDR_INSPECT_TOOL_COMMON_CSS: i32 = 25520;
pub const IDR_INSPECT_TOOL_DISTANCES_HTML: i32 = 25521;
pub const IDR_INSPECT_TOOL_HIGHLIGHT_HTML: i32 = 25522;
pub const IDR_INSPECT_TOOL_PAUSED_HTML: i32 = 25523;
pub const IDR_INSPECT_TOOL_VIEWPORT_SIZE_HTML: i32 = 25524;
pub const IDR_INSPECT_TOOL_SCREENSHOT_HTML: i32 = 25525;
pub const IDR_DOCUMENTXMLTREEVIEWER_CSS: i32 = 25526;
pub const IDR_DOCUMENTXMLTREEVIEWER_JS: i32 = 25527;
pub const IDR_VALIDATION_BUBBLE_ICON: i32 = 25528;
pub const IDR_VALIDATION_BUBBLE_CSS: i32 = 25529;
pub const IDR_PICKER_COMMON_JS: i32 = 25530;
pub const IDR_PICKER_COMMON_CSS: i32 = 25531;
pub const IDR_CALENDAR_PICKER_CSS: i32 = 25532;
pub const IDR_CALENDAR_PICKER_JS: i32 = 25533;
pub const IDR_PICKER_BUTTON_CSS: i32 = 25534;
pub const IDR_SUGGESTION_PICKER_CSS: i32 = 25535;
pub const IDR_SUGGESTION_PICKER_JS: i32 = 25536;
pub const IDR_COLOR_PICKER_COMMON_JS: i32 = 25537;
pub const IDR_COLOR_SUGGESTION_PICKER_CSS: i32 = 25538;
pub const IDR_COLOR_SUGGESTION_PICKER_JS: i32 = 25539;
pub const IDR_COLOR_PICKER_CSS: i32 = 25540;
pub const IDR_COLOR_PICKER_JS: i32 = 25541;
pub const IDR_LIST_PICKER_CSS: i32 = 25542;
pub const IDR_LIST_PICKER_JS: i32 = 25543;
pub const IDR_AUDIO_SPATIALIZATION_COMPOSITE: i32 = 25544;
pub const IDR_LAYERED_API_BLANK_INDEX_MJS: i32 = 25545;
pub const IDR_LAYERED_API_ELEMENTS_INTERNAL_REFLECTION_MJS: i32 = 25546;
pub const IDR_LAYERED_API_ELEMENTS_SWITCH_FACE_UTILS_MJS: i32 = 25547;
pub const IDR_LAYERED_API_ELEMENTS_SWITCH_INDEX_MJS: i32 = 25548;
pub const IDR_LAYERED_API_ELEMENTS_SWITCH_STYLE_MJS: i32 = 25549;
pub const IDR_LAYERED_API_ELEMENTS_SWITCH_TRACK_MJS: i32 = 25550;
pub const IDR_LAYERED_API_ELEMENTS_TOAST_INDEX_MJS: i32 = 25551;
pub const IDR_LAYERED_API_ELEMENTS_VIRTUAL_SCROLLER_FIND_ELEMENT_MJS: i32 = 25552;
pub const IDR_LAYERED_API_ELEMENTS_VIRTUAL_SCROLLER_INDEX_MJS: i32 = 25553;
pub const IDR_LAYERED_API_ELEMENTS_VIRTUAL_SCROLLER_SETS_MJS: i32 = 25554;
pub const IDR_LAYERED_API_ELEMENTS_VIRTUAL_SCROLLER_VISIBILITY_MANAGER_MJS: i32 = 25555;
pub const IDR_LAYERED_API_KV_STORAGE_ASYNC_ITERATOR_MJS: i32 = 25556;
pub const IDR_LAYERED_API_KV_STORAGE_IDB_UTILS_MJS: i32 = 25557;
pub const IDR_LAYERED_API_KV_STORAGE_INDEX_MJS: i32 = 25558;
pub const IDR_SIGNIN_SHARED_CSS_HTML: i32 = 11850;
pub const IDR_INCOGNITO_TAB_HTML: i32 = 11851;
pub const IDR_GUEST_TAB_HTML: i32 = 11852;
pub const IDR_NEW_INCOGNITO_TAB_THEME_CSS: i32 = 11853;
pub const IDR_NEW_TAB_4_HTML: i32 = 11854;
pub const IDR_NEW_TAB_4_THEME_CSS: i32 = 11855;
pub const IDR_BOOKMARKS_VULCANIZED_HTML: i32 = 11856;
pub const IDR_BOOKMARKS_CRISPER_JS: i32 = 11857;
pub const IDR_DISCARDS_MOJO_API_HTML: i32 = 11000;
pub const IDR_DISCARDS_DATABASE_TAB_HTML: i32 = 11001;
pub const IDR_DISCARDS_DATABASE_TAB_JS: i32 = 11002;
pub const IDR_DISCARDS_DISCARDS_MAIN_HTML: i32 = 11003;
pub const IDR_DISCARDS_DISCARDS_MAIN_JS: i32 = 11004;
pub const IDR_DISCARDS_DISCARDS_TAB_HTML: i32 = 11005;
pub const IDR_DISCARDS_DISCARDS_TAB_JS: i32 = 11006;
pub const IDR_DISCARDS_GRAPH_TAB_HTML: i32 = 11007;
pub const IDR_DISCARDS_GRAPH_TAB_JS: i32 = 11008;
pub const IDR_DISCARDS_HTML: i32 = 11009;
pub const IDR_DISCARDS_JS: i32 = 11010;
pub const IDR_DISCARDS_LIFECYCLE_UNIT_STATE_MOJOM_LITE_JS: i32 = 11011;
pub const IDR_DISCARDS_MOJOM_LITE_JS: i32 = 11012;
pub const IDR_DISCARDS_MOJO_PUBLIC_BASE_PROCESS_ID_MOJOM_LITE_JS: i32 = 11013;
pub const IDR_DISCARDS_SORTED_TABLE_BEHAVIOR_HTML: i32 = 11014;
pub const IDR_DISCARDS_SORTED_TABLE_BEHAVIOR_JS: i32 = 11015;
pub const IDR_DISCARDS_WEBUI_GRAPH_DUMP_MOJOM_LITE_JS: i32 = 11016;
pub const IDR_BROWSER_SWITCH_APP_HTML: i32 = 11017;
pub const IDR_BROWSER_SWITCH_APP_JS: i32 = 11018;
pub const IDR_BROWSER_SWITCH_PROXY_HTML: i32 = 11019;
pub const IDR_BROWSER_SWITCH_PROXY_JS: i32 = 11020;
pub const IDR_BROWSER_SWITCH_HTML: i32 = 11021;
pub const IDR_BROWSER_SWITCH_INTERNALS_HTML: i32 = 11022;
pub const IDR_BROWSER_SWITCH_INTERNALS_JS: i32 = 11023;
pub const IDR_ABOUT_CONFLICTS_HTML: i32 = 11024;
pub const IDR_ABOUT_CONFLICTS_JS: i32 = 11025;
pub const IDR_ABOUT_FLASH_HTML: i32 = 11026;
pub const IDR_ABOUT_FLASH_JS: i32 = 11027;
pub const IDR_ABOUT_NACL_HTML: i32 = 11028;
pub const IDR_ABOUT_NACL_CSS: i32 = 11029;
pub const IDR_ABOUT_NACL_JS: i32 = 11030;
pub const IDR_ABOUT_SYS_HTML: i32 = 11031;
pub const IDR_ABOUT_SYS_CSS: i32 = 11032;
pub const IDR_ABOUT_SYS_JS: i32 = 11033;
pub const IDR_ACCESSIBILITY_HTML: i32 = 11034;
pub const IDR_ACCESSIBILITY_CSS: i32 = 11035;
pub const IDR_ACCESSIBILITY_JS: i32 = 11036;
pub const IDR_AD_NETWORK_HASHES: i32 = 11037;
pub const IDR_BLUETOOTH_ADAPTER_MOJO_JS: i32 = 11038;
pub const IDR_BLUETOOTH_DEVICE_MOJO_JS: i32 = 11039;
pub const IDR_BLUETOOTH_UUID_MOJO_JS: i32 = 11040;
pub const IDR_BLUETOOTH_INTERNALS_CSS: i32 = 11041;
pub const IDR_BLUETOOTH_INTERNALS_ADAPTER_BROKER_JS: i32 = 11042;
pub const IDR_BLUETOOTH_INTERNALS_ADAPTER_PAGE_JS: i32 = 11043;
pub const IDR_BLUETOOTH_INTERNALS_CHARACTERISTIC_LIST_JS: i32 = 11044;
pub const IDR_BLUETOOTH_INTERNALS_DESCRIPTOR_LIST_JS: i32 = 11045;
pub const IDR_BLUETOOTH_INTERNALS_DEVICE_BROKER_JS: i32 = 11046;
pub const IDR_BLUETOOTH_INTERNALS_DEVICE_COLLECTION_JS: i32 = 11047;
pub const IDR_BLUETOOTH_INTERNALS_DEVICE_DETAILS_PAGE_JS: i32 = 11048;
pub const IDR_BLUETOOTH_INTERNALS_DEVICE_TABLE_JS: i32 = 11049;
pub const IDR_BLUETOOTH_INTERNALS_DEVICES_PAGE_JS: i32 = 11050;
pub const IDR_BLUETOOTH_INTERNALS_EXPANDABLE_LIST_JS: i32 = 11051;
pub const IDR_BLUETOOTH_INTERNALS_HTML: i32 = 11052;
pub const IDR_BLUETOOTH_INTERNALS_JS: i32 = 11053;
pub const IDR_BLUETOOTH_INTERNALS_MOJO_JS: i32 = 11054;
pub const IDR_BLUETOOTH_INTERNALS_OBJECT_FIELDSET_JS: i32 = 11055;
pub const IDR_BLUETOOTH_INTERNALS_SERVICE_LIST_JS: i32 = 11056;
pub const IDR_BLUETOOTH_INTERNALS_SIDEBAR_JS: i32 = 11057;
pub const IDR_BLUETOOTH_INTERNALS_SNACKBAR_JS: i32 = 11058;
pub const IDR_BLUETOOTH_INTERNALS_VALUE_CONTROL_JS: i32 = 11059;
pub const IDR_CLOUDPRINT_MANIFEST: i32 = 171;
pub const IDR_DEVTOOLS_DISCOVERY_PAGE_HTML: i32 = 11064;
pub const IDR_DOMAIN_RELIABILITY_INTERNALS_HTML: i32 = 11065;
pub const IDR_DOMAIN_RELIABILITY_INTERNALS_CSS: i32 = 11066;
pub const IDR_DOMAIN_RELIABILITY_INTERNALS_JS: i32 = 11067;
pub const IDR_DOWNLOAD_FILE_TYPES_PB: i32 = 120;
pub const IDR_DOWNLOAD_INTERNALS_HTML: i32 = 11068;
pub const IDR_DOWNLOAD_INTERNALS_CSS: i32 = 11069;
pub const IDR_DOWNLOAD_INTERNALS_JS: i32 = 11070;
pub const IDR_DOWNLOAD_INTERNALS_BROWSER_PROXY_JS: i32 = 11071;
pub const IDR_DOWNLOAD_INTERNALS_VISUALS_JS: i32 = 11072;
pub const IDR_NOTIFICATIONS_INTERNALS_HTML: i32 = 11073;
pub const IDR_NOTIFICATIONS_INTERNALS_CSS: i32 = 11074;
pub const IDR_NOTIFICATIONS_INTERNALS_JS: i32 = 11075;
pub const IDR_NOTIFICATIONS_INTERNALS_BROWSER_PROXY_JS: i32 = 11076;
pub const IDR_UKM_INTERNALS_HTML: i32 = 11077;
pub const IDR_UKM_INTERNALS_JS: i32 = 11078;
pub const IDR_UKM_INTERNALS_CSS: i32 = 11079;
pub const IDR_TRANSLATE_INTERNALS_HTML: i32 = 11080;
pub const IDR_TRANSLATE_INTERNALS_JS: i32 = 11081;
pub const IDR_FEEDBACK_MANIFEST: i32 = 11082;
pub const IDR_SUPERVISED_USER_INTERNALS_HTML: i32 = 11099;
pub const IDR_SUPERVISED_USER_INTERNALS_CSS: i32 = 11100;
pub const IDR_SUPERVISED_USER_INTERNALS_JS: i32 = 11101;
pub const IDR_APP_MANAGEMENT_BITMAP_MOJO_LITE_JS: i32 = 11103;
pub const IDR_APP_MANAGEMENT_IMAGE_INFO_MOJO_LITE_JS: i32 = 11104;
pub const IDR_APP_MANAGEMENT_IMAGE_MOJO_LITE_JS: i32 = 11105;
pub const IDR_APP_MANAGEMENT_MOJO_LITE_JS: i32 = 11106;
pub const IDR_APP_MANAGEMENT_TYPES_MOJO_LITE_JS: i32 = 11107;
pub const IDR_APP_MANAGEMENT_ACTIONS_HTML: i32 = 11108;
pub const IDR_APP_MANAGEMENT_ACTIONS_JS: i32 = 11109;
pub const IDR_APP_MANAGEMENT_API_LISTENER_HTML: i32 = 11110;
pub const IDR_APP_MANAGEMENT_API_LISTENER_JS: i32 = 11111;
pub const IDR_APP_MANAGEMENT_APP_HTML: i32 = 11112;
pub const IDR_APP_MANAGEMENT_APP_ITEM_HTML: i32 = 11113;
pub const IDR_APP_MANAGEMENT_APP_ITEM_JS: i32 = 11114;
pub const IDR_APP_MANAGEMENT_APP_JS: i32 = 11115;
pub const IDR_APP_MANAGEMENT_ARC_PERMISSION_VIEW_HTML: i32 = 11116;
pub const IDR_APP_MANAGEMENT_ARC_PERMISSION_VIEW_JS: i32 = 11117;
pub const IDR_APP_MANAGEMENT_BROWSER_PROXY_HTML: i32 = 11118;
pub const IDR_APP_MANAGEMENT_BROWSER_PROXY_JS: i32 = 11119;
pub const IDR_APP_MANAGEMENT_CHROME_APP_PERMISSION_VIEW_HTML: i32 = 11120;
pub const IDR_APP_MANAGEMENT_CHROME_APP_PERMISSION_VIEW_JS: i32 = 11121;
pub const IDR_APP_MANAGEMENT_CONSTANTS_HTML: i32 = 11122;
pub const IDR_APP_MANAGEMENT_CONSTANTS_JS: i32 = 11123;
pub const IDR_APP_MANAGEMENT_DOM_SWITCH_HTML: i32 = 11124;
pub const IDR_APP_MANAGEMENT_DOM_SWITCH_JS: i32 = 11125;
pub const IDR_APP_MANAGEMENT_EXPANDABLE_APP_LIST_HTML: i32 = 11126;
pub const IDR_APP_MANAGEMENT_EXPANDABLE_APP_LIST_JS: i32 = 11127;
pub const IDR_APP_MANAGEMENT_FAKE_PAGE_HANDLER_JS: i32 = 11128;
pub const IDR_APP_MANAGEMENT_ICONS_HTML: i32 = 11129;
pub const IDR_APP_MANAGEMENT_INDEX_HTML: i32 = 11130;
pub const IDR_APP_MANAGEMENT_MAIN_VIEW_HTML: i32 = 11131;
pub const IDR_APP_MANAGEMENT_MAIN_VIEW_JS: i32 = 11132;
pub const IDR_APP_MANAGEMENT_METADATA_VIEW_HTML: i32 = 11133;
pub const IDR_APP_MANAGEMENT_METADATA_VIEW_JS: i32 = 11134;
pub const IDR_APP_MANAGEMENT_NOTIFICATIONS_VIEW_HTML: i32 = 11135;
pub const IDR_APP_MANAGEMENT_NOTIFICATIONS_VIEW_JS: i32 = 11136;
pub const IDR_APP_MANAGEMENT_PERMISSION_ITEM_HTML: i32 = 11137;
pub const IDR_APP_MANAGEMENT_PERMISSION_ITEM_JS: i32 = 11138;
pub const IDR_APP_MANAGEMENT_PERMISSION_TOGGLE_HTML: i32 = 11139;
pub const IDR_APP_MANAGEMENT_PERMISSION_TOGGLE_JS: i32 = 11140;
pub const IDR_APP_MANAGEMENT_PERMISSION_VIEW_HEADER_HTML: i32 = 11141;
pub const IDR_APP_MANAGEMENT_PERMISSION_VIEW_HEADER_JS: i32 = 11142;
pub const IDR_APP_MANAGEMENT_PIN_TO_SHELF_ITEM_HTML: i32 = 11143;
pub const IDR_APP_MANAGEMENT_PIN_TO_SHELF_ITEM_JS: i32 = 11144;
pub const IDR_APP_MANAGEMENT_PWA_PERMISSION_VIEW_HTML: i32 = 11145;
pub const IDR_APP_MANAGEMENT_PWA_PERMISSION_VIEW_JS: i32 = 11146;
pub const IDR_APP_MANAGEMENT_REDUCERS_HTML: i32 = 11147;
pub const IDR_APP_MANAGEMENT_REDUCERS_JS: i32 = 11148;
pub const IDR_APP_MANAGEMENT_ROUTER_HTML: i32 = 11149;
pub const IDR_APP_MANAGEMENT_ROUTER_JS: i32 = 11150;
pub const IDR_APP_MANAGEMENT_SEARCH_VIEW_HTML: i32 = 11151;
pub const IDR_APP_MANAGEMENT_SEARCH_VIEW_JS: i32 = 11152;
pub const IDR_APP_MANAGEMENT_SHARED_STYLE_HTML: i32 = 11153;
pub const IDR_APP_MANAGEMENT_SHARED_VARS_HTML: i32 = 11154;
pub const IDR_APP_MANAGEMENT_STORE_CLIENT_HTML: i32 = 11155;
pub const IDR_APP_MANAGEMENT_STORE_CLIENT_JS: i32 = 11156;
pub const IDR_APP_MANAGEMENT_STORE_HTML: i32 = 11157;
pub const IDR_APP_MANAGEMENT_STORE_JS: i32 = 11158;
pub const IDR_APP_MANAGEMENT_TOGGLE_ROW_HTML: i32 = 11159;
pub const IDR_APP_MANAGEMENT_TOGGLE_ROW_JS: i32 = 11160;
pub const IDR_APP_MANAGEMENT_TYPES_JS: i32 = 11161;
pub const IDR_APP_MANAGEMENT_UTIL_HTML: i32 = 11162;
pub const IDR_APP_MANAGEMENT_UTIL_JS: i32 = 11163;
pub const IDR_HISTORY_CONSTANTS_HTML: i32 = 11164;
pub const IDR_HISTORY_CONSTANTS_JS: i32 = 11165;
pub const IDR_HISTORY_HISTORY_HTML: i32 = 11166;
pub const IDR_HISTORY_HISTORY_JS: i32 = 11167;
pub const IDR_HISTORY_IMAGES_SIGN_IN_PROMO_DARK_SVG: i32 = 11168;
pub const IDR_HISTORY_IMAGES_SIGN_IN_PROMO_SVG: i32 = 11169;
pub const IDR_HISTORY_STRINGS_HTML: i32 = 11170;
pub const IDR_HISTORY_APP_VULCANIZED_HTML: i32 = 11171;
pub const IDR_HISTORY_APP_CRISPER_JS: i32 = 11172;
pub const IDR_HISTORY_LAZY_LOAD_VULCANIZED_HTML: i32 = 11173;
pub const IDR_HISTORY_LAZY_LOAD_CRISPER_JS: i32 = 11174;
pub const IDR_PAGE_NOT_AVAILABLE_FOR_GUEST_APP_HTML: i32 = 11200;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_MANIFEST: i32 = 11201;
pub const IDR_INLINE_LOGIN_HTML: i32 = 11202;
pub const IDR_INLINE_LOGIN_CSS: i32 = 11203;
pub const IDR_INLINE_LOGIN_JS: i32 = 11204;
pub const IDR_GAIA_AUTH_AUTHENTICATOR_JS: i32 = 11205;
pub const IDR_INSPECT_CSS: i32 = 11206;
pub const IDR_INSPECT_HTML: i32 = 11207;
pub const IDR_INSPECT_JS: i32 = 11208;
pub const IDR_INTERVENTIONS_INTERNALS_INDEX_HTML: i32 = 11209;
pub const IDR_INTERVENTIONS_INTERNALS_INDEX_JS: i32 = 11210;
pub const IDR_INTERVENTIONS_INTERNALS_MOJOM_LITE_JS: i32 = 11211;
pub const IDR_INTERVENTIONS_INTERNALS_UNSUPPORTED_PAGE_HTML: i32 = 11212;
pub const IDR_NETWORK_SPEECH_SYNTHESIS_MANIFEST: i32 = 11213;
pub const IDR_PREDICTORS_HTML: i32 = 11214;
pub const IDR_PREDICTORS_JS: i32 = 11215;
pub const IDR_LOCAL_STATE_HTML: i32 = 11219;
pub const IDR_LOCAL_STATE_JS: i32 = 11220;
pub const IDR_DESKTOP_HATS_HTML: i32 = 11221;
pub const IDR_OMNIBOX_HTML: i32 = 11222;
pub const IDR_OMNIBOX_CSS: i32 = 11223;
pub const IDR_OMNIBOX_INPUT_CSS: i32 = 11224;
pub const IDR_OUTPUT_RESULTS_GROUP_CSS: i32 = 11225;
pub const IDR_OMNIBOX_OUTPUT_COLUMN_WIDTHS_CSS: i32 = 11226;
pub const IDR_OMNIBOX_ELEMENT_JS: i32 = 11227;
pub const IDR_OMNIBOX_INPUT_JS: i32 = 11228;
pub const IDR_OMNIBOX_OUTPUT_JS: i32 = 11229;
pub const IDR_OMNIBOX_JS: i32 = 11230;
pub const IDR_OMNIBOX_MOJO_JS: i32 = 11231;
pub const IDR_ORIGIN_MOJO_JS: i32 = 11232;
pub const IDR_COMPONENTS_HTML: i32 = 11233;
pub const IDR_COMPONENTS_JS: i32 = 11234;
pub const IDR_MEMORY_INTERNALS_HTML: i32 = 11235;
pub const IDR_MEMORY_INTERNALS_JS: i32 = 11236;
pub const IDR_PDF_MANIFEST: i32 = 176;
pub const IDR_PLUGIN_DB_JSON: i32 = 121;
pub const IDR_POLICY_CSS: i32 = 11237;
pub const IDR_POLICY_HTML: i32 = 11238;
pub const IDR_POLICY_BASE_JS: i32 = 11239;
pub const IDR_POLICY_JS: i32 = 11240;
pub const IDR_MANAGEMENT_HTML: i32 = 11241;
pub const IDR_MANAGEMENT_UI_HTML: i32 = 11242;
pub const IDR_MANAGEMENT_UI_JS: i32 = 11243;
pub const IDR_MANAGEMENT_BROWSER_PROXY_HTML: i32 = 11244;
pub const IDR_MANAGEMENT_BROWSER_PROXY_JS: i32 = 11245;
pub const IDR_MANAGEMENT_ICONS_HTML: i32 = 11246;
pub const IDR_SITE_ENGAGEMENT_HTML: i32 = 11247;
pub const IDR_SITE_ENGAGEMENT_JS: i32 = 11248;
pub const IDR_SITE_ENGAGEMENT_DETAILS_MOJOM_LITE_JS: i32 = 11249;
pub const IDR_URL_MOJOM_LITE_JS: i32 = 11250;
pub const IDR_SYNC_DISABLED_CONFIRMATION_HTML: i32 = 11251;
pub const IDR_SYNC_DISABLED_CONFIRMATION_JS: i32 = 11252;
pub const IDR_SYNC_CONFIRMATION_HTML: i32 = 11253;
pub const IDR_SYNC_CONFIRMATION_JS: i32 = 11254;
pub const IDR_SYNC_CONFIRMATION_BROWSER_PROXY_HTML: i32 = 11255;
pub const IDR_SYNC_CONFIRMATION_BROWSER_PROXY_JS: i32 = 11256;
pub const IDR_SYNC_CONFIRMATION_APP_HTML: i32 = 11257;
pub const IDR_SYNC_CONFIRMATION_APP_JS: i32 = 11258;
pub const IDR_SIGNIN_EMAIL_CONFIRMATION_HTML: i32 = 11259;
pub const IDR_SIGNIN_EMAIL_CONFIRMATION_JS: i32 = 11260;
pub const IDR_SIGNIN_ERROR_HTML: i32 = 11261;
pub const IDR_SIGNIN_ERROR_JS: i32 = 11262;
pub const IDR_USB_ENUMERATION_OPTIONS_MOJOM_LITE_JS: i32 = 11263;
pub const IDR_USB_DEVICE_MANAGER_CLIENT_MOJOM_LITE_JS: i32 = 11264;
pub const IDR_USB_DEVICE_MANAGER_MOJOM_LITE_JS: i32 = 11265;
pub const IDR_USB_DEVICE_MANAGER_TEST_MOJOM_LITE_JS: i32 = 11266;
pub const IDR_USB_DEVICE_MOJOM_LITE_JS: i32 = 11267;
pub const IDR_USB_INTERNALS_CSS: i32 = 11268;
pub const IDR_USB_INTERNALS_DESCRIPTOR_PANEL_JS: i32 = 11269;
pub const IDR_USB_INTERNALS_DEVICES_PAGE_JS: i32 = 11270;
pub const IDR_USB_INTERNALS_HTML: i32 = 11271;
pub const IDR_USB_INTERNALS_JS: i32 = 11272;
pub const IDR_USB_INTERNALS_MOJOM_LITE_JS: i32 = 11273;
pub const IDR_WEBRTC_LOGS_HTML: i32 = 11274;
pub const IDR_WEBRTC_LOGS_JS: i32 = 11275;
pub const IDR_WEBSTORE_MANIFEST: i32 = 174;
pub const IDR_CRYPTOTOKEN_MANIFEST: i32 = 175;
pub const IDR_SET_AS_DEFAULT_BROWSER_JS: i32 = 11333;
pub const IDR_SET_AS_DEFAULT_BROWSER_HTML: i32 = 11334;
pub const IDR_CONTROL_BAR_HTML: i32 = 11335;
pub const IDR_CONTROL_BAR_JS: i32 = 11336;
pub const IDR_CREATE_PROFILE_HTML: i32 = 11337;
pub const IDR_CREATE_PROFILE_JS: i32 = 11338;
pub const IDR_ERROR_DIALOG_HTML: i32 = 11339;
pub const IDR_ERROR_DIALOG_JS: i32 = 11340;
pub const IDR_PROFILE_BROWSER_PROXY_HTML: i32 = 11341;
pub const IDR_PROFILE_BROWSER_PROXY_JS: i32 = 11342;
pub const IDR_USER_MANAGER_HTML: i32 = 11343;
pub const IDR_USER_MANAGER_JS: i32 = 11344;
pub const IDR_USER_MANAGER_PAGES_HTML: i32 = 11345;
pub const IDR_USER_MANAGER_PAGES_JS: i32 = 11346;
pub const IDR_USER_MANAGER_SHARED_STYLES_HTML: i32 = 11347;
pub const IDR_USER_MANAGER_STRINGS_HTML: i32 = 11348;
pub const IDR_USER_MANAGER_TUTORIAL_HTML: i32 = 11349;
pub const IDR_USER_MANAGER_TUTORIAL_JS: i32 = 11350;
pub const IDR_IDENTITY_INTERNALS_HTML: i32 = 11351;
pub const IDR_IDENTITY_INTERNALS_CSS: i32 = 11352;
pub const IDR_IDENTITY_INTERNALS_JS: i32 = 11353;
pub const IDR_DEVICE_LOG_UI_HTML: i32 = 11354;
pub const IDR_DEVICE_LOG_UI_JS: i32 = 11355;
pub const IDR_DEVICE_LOG_UI_CSS: i32 = 11356;
pub const IDR_MEDIA_ROUTER_INTERNALS_HTML: i32 = 11409;
pub const IDR_MEDIA_ROUTER_INTERNALS_CSS: i32 = 11410;
pub const IDR_MEDIA_ROUTER_INTERNALS_JS: i32 = 11411;
pub const IDR_CAST_HTML: i32 = 11412;
pub const IDR_CAST_CSS: i32 = 11413;
pub const IDR_CAST_JS: i32 = 11414;
pub const IDR_CAST_FAVICON: i32 = 11415;
pub const IDR_IME_WINDOW_CLOSE: i32 = 11416;
pub const IDR_IME_WINDOW_CLOSE_C: i32 = 11417;
pub const IDR_IME_WINDOW_CLOSE_H: i32 = 11418;
pub const IDR_SSL_ERROR_ASSISTANT_PB: i32 = 288;
pub const IDR_MEDIA_ENGAGEMENT_HTML: i32 = 11421;
pub const IDR_MEDIA_ENGAGEMENT_JS: i32 = 11422;
pub const IDR_MEDIA_ENGAGEMENT_SCORE_DETAILS_MOJOM_LITE_JS: i32 = 11423;
pub const IDR_PWA_HTML: i32 = 11424;
pub const IDR_RESET_PASSWORD_HTML: i32 = 11450;
pub const IDR_RESET_PASSWORD_JS: i32 = 11451;
pub const IDR_RESET_PASSWORD_MOJOM_LITE_JS: i32 = 11452;
pub const IDR_TAB_RANKER_EXAMPLE_PREPROCESSOR_CONFIG_PB: i32 = 11453;
pub const IDR_CEF_DEVTOOLS_DISCOVERY_PAGE: i32 = 31500;
pub const IDR_CEF_LICENSE_TXT: i32 = 31501;
pub const IDR_CEF_VERSION_HTML: i32 = 31502;
pub const IDR_CEF_EXTENSION_API_FEATURES: i32 = 31503;
pub const IDR_CHROME_EXTENSION_API_FEATURES: i32 = 14160;
pub const IDR_CHROME_APP_API_FEATURES: i32 = 14161;
pub const IDR_NETWORK_SPEECH_SYNTHESIS_JS: i32 = 12120;
pub const IDR_COMPONENT_BOOKMARKS_BOOKMARKS_HTML: i32 = 12123;
pub const IDR_FEEDBACK_BLUETOOTHLOGSINFO_HTML: i32 = 12126;
pub const IDR_FEEDBACK_ASSISTANTLOGSINFO_HTML: i32 = 12127;
pub const IDR_FEEDBACK_DEFAULT_HTML: i32 = 12128;
pub const IDR_FEEDBACK_SYSINFO_HTML: i32 = 12129;
pub const IDR_FEEDBACK_ASSISTANT_LOGS_INFO_JS: i32 = 12130;
pub const IDR_FEEDBACK_FEEDBACK_UTIL_JS: i32 = 12131;
pub const IDR_FEEDBACK_EVENT_HANDLER_JS: i32 = 12132;
pub const IDR_FEEDBACK_FEEDBACK_JS: i32 = 12133;
pub const IDR_FEEDBACK_SYSINFO_JS: i32 = 12134;
pub const IDR_FEEDBACK_TAKE_SCREENSHOT_JS: i32 = 12135;
pub const IDR_FEEDBACK_TOPBAR_HANDLER_JS: i32 = 12136;
pub const IDR_FEEDBACK_ASSISTANT_LOGS_INFO_CSS: i32 = 12137;
pub const IDR_FEEDBACK_FEEDBACK_CSS: i32 = 12138;
pub const IDR_FEEDBACK_SYSINFO_CSS: i32 = 12139;
pub const IDR_FEEDBACK_ICON_48: i32 = 12140;
pub const IDR_FEEDBACK_ICON_192: i32 = 12141;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_BACKGROUND_JS: i32 = 12142;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_DIALOG_CSS: i32 = 12143;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_DIALOG: i32 = 12144;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_DIALOG_JS: i32 = 12145;
pub const IDR_PDF_INDEX_HTML: i32 = 12177;
pub const IDR_PDF_INDEX_CSS: i32 = 12178;
pub const IDR_PDF_MAIN_JS: i32 = 12179;
pub const IDR_PDF_PDF_VIEWER_JS: i32 = 12180;
pub const IDR_PDF_TOOLBAR_MANAGER_JS: i32 = 12181;
pub const IDR_PDF_PDF_FITTING_TYPE_JS: i32 = 12182;
pub const IDR_PDF_VIEWPORT_JS: i32 = 12183;
pub const IDR_PDF_VIEWPORT_INTERFACE_JS: i32 = 12184;
pub const IDR_PDF_OPEN_PDF_PARAMS_PARSER_JS: i32 = 12185;
pub const IDR_PDF_NAVIGATOR_JS: i32 = 12186;
pub const IDR_PDF_VIEWPORT_SCROLLER_JS: i32 = 12187;
pub const IDR_PDF_PDF_SCRIPTING_API_JS: i32 = 12188;
pub const IDR_PDF_ZOOM_MANAGER_JS: i32 = 12189;
pub const IDR_PDF_GESTURE_DETECTOR_JS: i32 = 12190;
pub const IDR_PDF_BROWSER_API_JS: i32 = 12191;
pub const IDR_PDF_METRICS_JS: i32 = 12192;
pub const IDR_PDF_SHARED_VARS_HTML: i32 = 12193;
pub const IDR_PDF_ICONS_HTML: i32 = 12194;
pub const IDR_PDF_VIEWER_BOOKMARK_HTML: i32 = 12195;
pub const IDR_PDF_VIEWER_BOOKMARK_JS: i32 = 12196;
pub const IDR_PDF_VIEWER_BOOKMARKS_CONTENT_HTML: i32 = 12197;
pub const IDR_PDF_VIEWER_BOOKMARKS_CONTENT_JS: i32 = 12198;
pub const IDR_PDF_VIEWER_ERROR_SCREEN_HTML: i32 = 12199;
pub const IDR_PDF_VIEWER_ERROR_SCREEN_JS: i32 = 12200;
pub const IDR_PDF_VIEWER_PAGE_INDICATOR_HTML: i32 = 12209;
pub const IDR_PDF_VIEWER_PAGE_INDICATOR_JS: i32 = 12210;
pub const IDR_PDF_VIEWER_PAGE_SELECTOR_HTML: i32 = 12211;
pub const IDR_PDF_VIEWER_PAGE_SELECTOR_JS: i32 = 12212;
pub const IDR_PDF_VIEWER_PASSWORD_SCREEN_HTML: i32 = 12213;
pub const IDR_PDF_VIEWER_PASSWORD_SCREEN_JS: i32 = 12214;
pub const IDR_PDF_VIEWER_PDF_TOOLBAR_HTML: i32 = 12215;
pub const IDR_PDF_VIEWER_PDF_TOOLBAR_JS: i32 = 12216;
pub const IDR_PDF_VIEWER_TOOLBAR_DROPDOWN_HTML: i32 = 12217;
pub const IDR_PDF_VIEWER_TOOLBAR_DROPDOWN_JS: i32 = 12218;
pub const IDR_PDF_VIEWER_ZOOM_BUTTON_HTML: i32 = 12219;
pub const IDR_PDF_VIEWER_ZOOM_BUTTON_JS: i32 = 12220;
pub const IDR_PDF_VIEWER_ZOOM_SELECTOR_HTML: i32 = 12221;
pub const IDR_PDF_VIEWER_ZOOM_SELECTOR_JS: i32 = 12222;
pub const IDR_CRYPTOTOKEN_UTIL_JS: i32 = 12223;
pub const IDR_CRYPTOTOKEN_B64_JS: i32 = 12224;
pub const IDR_CRYPTOTOKEN_COUNTDOWN_JS: i32 = 12225;
pub const IDR_CRYPTOTOKEN_COUNTDOWNTIMER_JS: i32 = 12226;
pub const IDR_CRYPTOTOKEN_SHA256_JS: i32 = 12227;
pub const IDR_CRYPTOTOKEN_TIMER_JS: i32 = 12228;
pub const IDR_CRYPTOTOKEN_DEVICESTATUSCODES_JS: i32 = 12229;
pub const IDR_CRYPTOTOKEN_ASN1_JS: i32 = 12230;
pub const IDR_CRYPTOTOKEN_CBOR_JS: i32 = 12231;
pub const IDR_CRYPTOTOKEN_ENROLLER_JS: i32 = 12232;
pub const IDR_CRYPTOTOKEN_REQUESTQUEUE_JS: i32 = 12233;
pub const IDR_CRYPTOTOKEN_SIGNER_JS: i32 = 12234;
pub const IDR_CRYPTOTOKEN_WEBREQUEST_JS: i32 = 12235;
pub const IDR_CRYPTOTOKEN_APPID_JS: i32 = 12236;
pub const IDR_CRYPTOTOKEN_TEXTFETCHER_JS: i32 = 12237;
pub const IDR_CRYPTOTOKEN_REQUESTHELPER_JS: i32 = 12238;
pub const IDR_CRYPTOTOKEN_MESSAGETYPES_JS: i32 = 12239;
pub const IDR_CRYPTOTOKEN_INHERITS_JS: i32 = 12240;
pub const IDR_CRYPTOTOKEN_FACTORYREGISTRY_JS: i32 = 12241;
pub const IDR_CRYPTOTOKEN_ERRORCODES_JS: i32 = 12242;
pub const IDR_CRYPTOTOKEN_ORIGINCHECK_JS: i32 = 12243;
pub const IDR_CRYPTOTOKEN_INDIVIDUALATTEST_JS: i32 = 12244;
pub const IDR_CRYPTOTOKEN_GOOGLECORPINDIVIDUALATTEST_JS: i32 = 12245;
pub const IDR_CRYPTOTOKEN_APPROVEDORIGINS_JS: i32 = 12246;
pub const IDR_CRYPTOTOKEN_WEBREQUESTSENDER_JS: i32 = 12247;
pub const IDR_CRYPTOTOKEN_WINDOW_TIMER_JS: i32 = 12248;
pub const IDR_CRYPTOTOKEN_WATCHDOG_JS: i32 = 12249;
pub const IDR_CRYPTOTOKEN_LOGGING_JS: i32 = 12250;
pub const IDR_CRYPTOTOKEN_CRYPTOTOKENAPPROVEDORIGIN_JS: i32 = 12251;
pub const IDR_CRYPTOTOKEN_CRYPTOTOKENORIGINCHECK_JS: i32 = 12252;
pub const IDR_CRYPTOTOKEN_CRYPTOTOKENBACKGROUND_JS: i32 = 12253;
pub const IDR_AUTOFILL_AND_PASSWORD_MANAGER_INTERNALS_HTML: i32 = 17210;
pub const IDR_AUTOFILL_AND_PASSWORD_MANAGER_INTERNALS_JS: i32 = 17211;
pub const IDR_AUTOFILL_AND_PASSWORD_MANAGER_INTERNALS_CSS: i32 = 17212;
pub const IDR_ABOUT_UI_CREDITS_HTML: i32 = 17213;
pub const IDR_ABOUT_UI_CREDITS_JS: i32 = 17214;
pub const IDR_CRASH_CRASHES_HTML: i32 = 17215;
pub const IDR_CRASH_CRASHES_JS: i32 = 17216;
pub const IDR_ABOUT_DOM_DISTILLER_HTML: i32 = 17217;
pub const IDR_ABOUT_DOM_DISTILLER_CSS: i32 = 17218;
pub const IDR_ABOUT_DOM_DISTILLER_JS: i32 = 17219;
pub const IDR_DOM_DISTILLER_VIEWER_HTML: i32 = 17220;
pub const IDR_DOM_DISTILLER_VIEWER_JS: i32 = 17221;
pub const IDR_DISTILLER_JS: i32 = 17222;
pub const IDR_DISTILLER_CSS: i32 = 17223;
pub const IDR_DISTILLER_DESKTOP_CSS: i32 = 17224;
pub const IDR_DISTILLER_IOS_CSS: i32 = 17225;
pub const IDR_DISTILLER_MOBILE_CSS: i32 = 17226;
pub const IDR_DISTILLER_LOADING_IMAGE: i32 = 17227;
pub const IDR_EXTRACT_PAGE_FEATURES_JS: i32 = 17228;
pub const IDR_DISTILLABLE_PAGE_SERIALIZED_MODEL_NEW: i32 = 17229;
pub const IDR_LONG_PAGE_SERIALIZED_MODEL: i32 = 17230;
pub const IDR_FLAGS_UI_FLAGS_HTML: i32 = 17231;
pub const IDR_FLAGS_UI_FLAGS_JS: i32 = 17232;
pub const IDR_GCM_DRIVER_GCM_INTERNALS_HTML: i32 = 17233;
pub const IDR_GCM_DRIVER_GCM_INTERNALS_CSS: i32 = 17234;
pub const IDR_GCM_DRIVER_GCM_INTERNALS_JS: i32 = 17235;
pub const IDR_NET_LOG_NET_EXPORT_HTML: i32 = 17236;
pub const IDR_NET_LOG_NET_EXPORT_JS: i32 = 17237;
pub const IDR_NET_ERROR_HTML: i32 = 17238;
pub const IDR_NTP_TILES_INTERNALS_HTML: i32 = 17248;
pub const IDR_NTP_TILES_INTERNALS_JS: i32 = 17249;
pub const IDR_NTP_TILES_INTERNALS_CSS: i32 = 17250;
pub const IDR_OFFLINE_PAGES_RENOVATIONS_JS: i32 = 17251;
pub const IDR_PRINT_HEADER_FOOTER_TEMPLATE_PAGE: i32 = 17252;
pub const IDR_SAFE_BROWSING_HTML: i32 = 17253;
pub const IDR_SAFE_BROWSING_CSS: i32 = 17254;
pub const IDR_SAFE_BROWSING_JS: i32 = 17255;
pub const IDR_SECURITY_INTERSTITIAL_COMMON_CSS: i32 = 17256;
pub const IDR_SECURITY_INTERSTITIAL_CORE_CSS: i32 = 17257;
pub const IDR_SECURITY_INTERSTITIAL_UI_HTML: i32 = 17258;
pub const IDR_SECURITY_INTERSTITIAL_HTML: i32 = 17259;
pub const IDR_SECURITY_INTERSTITIAL_QUIET_HTML: i32 = 17260;
pub const IDR_SECURITY_INTERSTITIAL_CONNECTION_HELP_HTML: i32 = 17261;
pub const IDR_SECURITY_INTERSTITIAL_CONNECTION_HELP_CSS: i32 = 17262;
pub const IDR_SECURITY_INTERSTITIAL_CONNECTION_HELP_JS: i32 = 17263;
pub const IDR_SIGNIN_INTERNALS_INDEX_HTML: i32 = 17264;
pub const IDR_SIGNIN_INTERNALS_INDEX_JS: i32 = 17265;
pub const IDR_SUPERVISED_USER_BLOCK_INTERSTITIAL_HTML: i32 = 17266;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_INDEX_HTML: i32 = 17267;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_INDEX_JS: i32 = 17268;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_CHROME_SYNC_JS: i32 = 17269;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_TYPES_JS: i32 = 17270;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_SYNC_LOG_JS: i32 = 17271;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_SYNC_NODE_BROWSER_JS: i32 = 17272;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_SYNC_SEARCH_JS: i32 = 17273;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_ABOUT_JS: i32 = 17274;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_DATA_JS: i32 = 17275;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_EVENTS_JS: i32 = 17276;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_SEARCH_JS: i32 = 17277;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_USER_EVENTS_JS: i32 = 17278;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_TRAFFIC_LOG_JS: i32 = 17279;
pub const IDR_TRANSLATE_JS: i32 = 17280;
pub const IDR_USER_ACTIONS_CSS: i32 = 17281;
pub const IDR_USER_ACTIONS_HTML: i32 = 17282;
pub const IDR_USER_ACTIONS_JS: i32 = 17283;
pub const IDR_VERSION_UI_CSS: i32 = 17284;
pub const IDR_VERSION_UI_HTML: i32 = 17285;
pub const IDR_VERSION_UI_JS: i32 = 17286;
pub const IDR_APPCACHE_INTERNALS_HTML: i32 = 20400;
pub const IDR_APPCACHE_INTERNALS_JS: i32 = 20401;
pub const IDR_APPCACHE_INTERNALS_CSS: i32 = 20402;
pub const IDR_DEVTOOLS_PINCH_CURSOR_ICON: i32 = 20403;
pub const IDR_DEVTOOLS_PINCH_CURSOR_ICON_2X: i32 = 20404;
pub const IDR_DEVTOOLS_TOUCH_CURSOR_ICON: i32 = 20405;
pub const IDR_DEVTOOLS_TOUCH_CURSOR_ICON_2X: i32 = 20406;
pub const IDR_GPU_INTERNALS_HTML: i32 = 20407;
pub const IDR_GPU_INTERNALS_JS: i32 = 20408;
pub const IDR_HISTOGRAMS_INTERNALS_HTML: i32 = 20409;
pub const IDR_HISTOGRAMS_INTERNALS_JS: i32 = 20410;
pub const IDR_INDEXED_DB_INTERNALS_HTML: i32 = 20411;
pub const IDR_INDEXED_DB_INTERNALS_JS: i32 = 20412;
pub const IDR_INDEXED_DB_INTERNALS_CSS: i32 = 20413;
pub const IDR_MEDIA_INTERNALS_HTML: i32 = 20414;
pub const IDR_MEDIA_INTERNALS_JS: i32 = 20415;
pub const IDR_NETWORK_ERROR_LISTING_HTML: i32 = 20416;
pub const IDR_NETWORK_ERROR_LISTING_JS: i32 = 20417;
pub const IDR_NETWORK_ERROR_LISTING_CSS: i32 = 20418;
pub const IDR_ORIGIN_MOJO_HTML: i32 = 20419;
pub const IDR_ORIGIN_MOJO_JS_2: i32 = 20420;
pub const IDR_PROCESS_INTERNALS_HTML: i32 = 20421;
pub const IDR_PROCESS_INTERNALS_MOJO_JS: i32 = 20422;
pub const IDR_PROCESS_INTERNALS_CSS: i32 = 20423;
pub const IDR_PROCESS_INTERNALS_JS: i32 = 20424;
pub const IDR_SERVICE_WORKER_INTERNALS_HTML: i32 = 20425;
pub const IDR_SERVICE_WORKER_INTERNALS_JS: i32 = 20426;
pub const IDR_SERVICE_WORKER_INTERNALS_CSS: i32 = 20427;
pub const IDR_UNGUESSABLE_TOKEN_MOJO_HTML: i32 = 20428;
pub const IDR_UNGUESSABLE_TOKEN_MOJO_JS: i32 = 20429;
pub const IDR_URL_MOJO_HTML: i32 = 20430;
pub const IDR_URL_MOJO_JS: i32 = 20431;
pub const IDR_WEBRTC_INTERNALS_HTML: i32 = 20432;
pub const IDR_WEBRTC_INTERNALS_JS: i32 = 20433;
pub const COMPRESSED_PROTOCOL_JSON: i32 = 28880;
pub const AUDITS_WORKER_JS: i32 = 28881;
pub const DEVTOOLS_APP_HTML: i32 = 28882;
pub const DEVTOOLS_APP_JS: i32 = 28883;
pub const FORMATTER_WORKER_JS: i32 = 28884;
pub const HEAP_SNAPSHOT_WORKER_JS: i32 = 28885;
pub const INSPECTOR_HTML: i32 = 28886;
pub const INSPECTOR_JS: i32 = 28887;
pub const JS_APP_HTML: i32 = 28888;
pub const JS_APP_JS: i32 = 28889;
pub const NODE_APP_HTML: i32 = 28890;
pub const NODE_APP_JS: i32 = 28891;
pub const SHELL_JS: i32 = 28892;
pub const TOOLBOX_HTML: i32 = 28893;
pub const TOOLBOX_JS: i32 = 28894;
pub const WORKER_APP_HTML: i32 = 28895;
pub const WORKER_APP_JS: i32 = 28896;
pub const ANIMATION_ANIMATION_MODULE_JS: i32 = 28897;
pub const AUDITS_AUDITS_MODULE_JS: i32 = 28898;
pub const BROWSER_DEBUGGER_BROWSER_DEBUGGER_MODULE_JS: i32 = 28899;
pub const CHANGES_CHANGES_MODULE_JS: i32 = 28900;
pub const PROTOCOL_MONITOR_PROTOCOL_MONITOR_MODULE_JS: i32 = 28901;
pub const CM_CM_MODULE_JS: i32 = 28902;
pub const COLOR_PICKER_COLOR_PICKER_MODULE_JS: i32 = 28903;
pub const CONSOLE_CONSOLE_MODULE_JS: i32 = 28904;
pub const COOKIE_TABLE_COOKIE_TABLE_MODULE_JS: i32 = 28905;
pub const COVERAGE_COVERAGE_MODULE_JS: i32 = 28906;
pub const DATA_GRID_DATA_GRID_MODULE_JS: i32 = 28907;
pub const DEVICES_DEVICES_MODULE_JS: i32 = 28908;
pub const DIFF_DIFF_MODULE_JS: i32 = 28909;
pub const ELEMENTS_ELEMENTS_MODULE_JS: i32 = 28910;
pub const EVENT_LISTENERS_EVENT_LISTENERS_MODULE_JS: i32 = 28911;
pub const FORMATTER_FORMATTER_MODULE_JS: i32 = 28912;
pub const HAR_IMPORTER_HAR_IMPORTER_MODULE_JS: i32 = 28913;
pub const HEAP_SNAPSHOT_MODEL_HEAP_SNAPSHOT_MODEL_MODULE_JS: i32 = 28914;
pub const HELP_HELP_MODULE_JS: i32 = 28915;
pub const INLINE_EDITOR_INLINE_EDITOR_MODULE_JS: i32 = 28916;
pub const JAVASCRIPT_METADATA_JAVASCRIPT_METADATA_MODULE_JS: i32 = 28917;
pub const JS_PROFILER_JS_PROFILER_MODULE_JS: i32 = 28918;
pub const LAYER_VIEWER_LAYER_VIEWER_MODULE_JS: i32 = 28919;
pub const LAYERS_LAYERS_MODULE_JS: i32 = 28920;
pub const NETWORK_NETWORK_MODULE_JS: i32 = 28921;
pub const NODE_DEBUGGER_NODE_DEBUGGER_MODULE_JS: i32 = 28922;
pub const OBJECT_UI_OBJECT_UI_MODULE_JS: i32 = 28923;
pub const PERF_UI_PERF_UI_MODULE_JS: i32 = 28924;
pub const PERFORMANCE_MONITOR_PERFORMANCE_MONITOR_MODULE_JS: i32 = 28925;
pub const PROFILER_PROFILER_MODULE_JS: i32 = 28926;
pub const QUICK_OPEN_QUICK_OPEN_MODULE_JS: i32 = 28927;
pub const RESOURCES_RESOURCES_MODULE_JS: i32 = 28928;
pub const SEARCH_SEARCH_MODULE_JS: i32 = 28929;
pub const SECURITY_SECURITY_MODULE_JS: i32 = 28930;
pub const SETTINGS_SETTINGS_MODULE_JS: i32 = 28931;
pub const SNIPPETS_SNIPPETS_MODULE_JS: i32 = 28932;
pub const SOURCE_FRAME_SOURCE_FRAME_MODULE_JS: i32 = 28933;
pub const SOURCES_SOURCES_MODULE_JS: i32 = 28934;
pub const TEXT_EDITOR_TEXT_EDITOR_MODULE_JS: i32 = 28935;
pub const TIMELINE_MODEL_TIMELINE_MODEL_MODULE_JS: i32 = 28936;
pub const TIMELINE_TIMELINE_MODULE_JS: i32 = 28937;
pub const WEB_AUDIO_WEB_AUDIO_MODULE_JS: i32 = 28938;
pub const WORKSPACE_DIFF_WORKSPACE_DIFF_MODULE_JS: i32 = 28939;
pub const DEVTOOLS_COMPATIBILITY_JS: i32 = 28940;
pub const TESTS_JS: i32 = 28941;
pub const DEVTOOLS_EXTENSION_API_JS: i32 = 28942;
pub const IMAGES_ACCELEROMETER_BACK_SVG: i32 = 28943;
pub const IMAGES_ACCELEROMETER_BOTTOM_PNG: i32 = 28944;
pub const IMAGES_ACCELEROMETER_FRONT_SVG: i32 = 28945;
pub const IMAGES_ACCELEROMETER_LEFT_PNG: i32 = 28946;
pub const IMAGES_ACCELEROMETER_RIGHT_PNG: i32 = 28947;
pub const IMAGES_ACCELEROMETER_TOP_PNG: i32 = 28948;
pub const IMAGES_AUDITS_LOGO_SVG: i32 = 28949;
pub const IMAGES_BREAKPOINT_SVG: i32 = 28950;
pub const IMAGES_BREAKPOINTCONDITIONAL_SVG: i32 = 28951;
pub const IMAGES_CHECKBOXCHECKMARK_SVG: i32 = 28952;
pub const IMAGES_CHECKER_PNG: i32 = 28953;
pub const IMAGES_CHEVRONS_SVG: i32 = 28954;
pub const IMAGES_CHROMEDISABLEDSELECT_PNG: i32 = 28955;
pub const IMAGES_CHROMEDISABLEDSELECT_2X_PNG: i32 = 28956;
pub const IMAGES_CHROMELEFT_PNG: i32 = 28957;
pub const IMAGES_CHROMEMIDDLE_PNG: i32 = 28958;
pub const IMAGES_CHROMERIGHT_PNG: i32 = 28959;
pub const IMAGES_CHROMESELECT_PNG: i32 = 28960;
pub const IMAGES_CHROMESELECT_2X_PNG: i32 = 28961;
pub const IMAGES_ERRORWAVE_SVG: i32 = 28962;
pub const IMAGES_IC_INFO_BLACK_18DP_SVG: i32 = 28963;
pub const IMAGES_IC_WARNING_BLACK_18DP_SVG: i32 = 28964;
pub const IMAGES_LARGEICONS_SVG: i32 = 28965;
pub const IMAGES_MEDIUMICONS_SVG: i32 = 28966;
pub const IMAGES_NAVIGATIONCONTROLS_PNG: i32 = 28967;
pub const IMAGES_NAVIGATIONCONTROLS_2X_PNG: i32 = 28968;
pub const IMAGES_NODEICON_PNG: i32 = 28969;
pub const IMAGES_POPOVERARROWS_PNG: i32 = 28970;
pub const IMAGES_PROFILEGROUPICON_PNG: i32 = 28971;
pub const IMAGES_PROFILEICON_PNG: i32 = 28972;
pub const IMAGES_PROFILESMALLICON_PNG: i32 = 28973;
pub const IMAGES_RADIODOT_PNG: i32 = 28974;
pub const IMAGES_RESIZEDIAGONAL_PNG: i32 = 28975;
pub const IMAGES_RESIZEDIAGONAL_2X_PNG: i32 = 28976;
pub const IMAGES_RESIZEHORIZONTAL_PNG: i32 = 28977;
pub const IMAGES_RESIZEHORIZONTAL_2X_PNG: i32 = 28978;
pub const IMAGES_RESIZEVERTICAL_PNG: i32 = 28979;
pub const IMAGES_RESIZEVERTICAL_2X_PNG: i32 = 28980;
pub const IMAGES_RESOURCECSSICON_PNG: i32 = 28981;
pub const IMAGES_RESOURCEDOCUMENTICON_PNG: i32 = 28982;
pub const IMAGES_RESOURCEDOCUMENTICONSMALL_PNG: i32 = 28983;
pub const IMAGES_RESOURCEJSICON_PNG: i32 = 28984;
pub const IMAGES_RESOURCEPLAINICON_PNG: i32 = 28985;
pub const IMAGES_RESOURCEPLAINICONSMALL_PNG: i32 = 28986;
pub const IMAGES_RESOURCESTIMEGRAPHICON_PNG: i32 = 28987;
pub const IMAGES_SEARCHNEXT_PNG: i32 = 28988;
pub const IMAGES_SEARCHPREV_PNG: i32 = 28989;
pub const IMAGES_SECURITYICONS_SVG: i32 = 28990;
pub const IMAGES_SMALLICONS_SVG: i32 = 28991;
pub const IMAGES_SPEECH_PNG: i32 = 28992;
pub const IMAGES_TOOLBARRESIZERVERTICAL_PNG: i32 = 28993;
pub const IMAGES_TOUCHCURSOR_PNG: i32 = 28994;
pub const IMAGES_TOUCHCURSOR_2X_PNG: i32 = 28995;
pub const IMAGES_TREEOUTLINETRIANGLES_SVG: i32 = 28996;
pub const IMAGES_WHATSNEW_PNG: i32 = 28997;
pub const IDR_APP_DEFAULT_ICON: i32 = 24550;
pub const IDR_EXTENSION_DEFAULT_ICON: i32 = 24551;
pub const IDR_EXTENSION_ACTION_PLAIN_BACKGROUND: i32 = 24552;
pub const IDR_EXTENSION_ICON_PLAIN_BACKGROUND: i32 = 24553;
pub const IDR_APP_VIEW_JS: i32 = 24570;
pub const IDR_APP_VIEW_ELEMENT_JS: i32 = 24571;
pub const IDR_BROWSER_TEST_ENVIRONMENT_SPECIFIC_BINDINGS_JS: i32 = 24572;
pub const IDR_ENTRY_ID_MANAGER: i32 = 24573;
pub const IDR_EXTENSIONS_WEB_VIEW_ELEMENT_JS: i32 = 24574;
pub const IDR_EXTENSION_OPTIONS_JS: i32 = 24575;
pub const IDR_EXTENSION_OPTIONS_ELEMENT_JS: i32 = 24576;
pub const IDR_EXTENSION_OPTIONS_ATTRIBUTES_JS: i32 = 24577;
pub const IDR_EXTENSION_OPTIONS_CONSTANTS_JS: i32 = 24578;
pub const IDR_EXTENSION_OPTIONS_EVENTS_JS: i32 = 24579;
pub const IDR_EXTENSION_VIEW_JS: i32 = 24580;
pub const IDR_EXTENSION_VIEW_ELEMENT_JS: i32 = 24581;
pub const IDR_EXTENSION_VIEW_API_METHODS_JS: i32 = 24582;
pub const IDR_EXTENSION_VIEW_ATTRIBUTES_JS: i32 = 24583;
pub const IDR_EXTENSION_VIEW_CONSTANTS_JS: i32 = 24584;
pub const IDR_EXTENSION_VIEW_EVENTS_JS: i32 = 24585;
pub const IDR_EXTENSION_VIEW_INTERNAL_CUSTOM_BINDINGS_JS: i32 = 24586;
pub const IDR_FEEDBACK_PRIVATE_CUSTOM_BINDINGS_JS: i32 = 24587;
pub const IDR_GUEST_VIEW_ATTRIBUTES_JS: i32 = 24588;
pub const IDR_GUEST_VIEW_CONTAINER_JS: i32 = 24589;
pub const IDR_GUEST_VIEW_CONTAINER_ELEMENT_JS: i32 = 24590;
pub const IDR_GUEST_VIEW_DENY_JS: i32 = 24591;
pub const IDR_GUEST_VIEW_EVENTS_JS: i32 = 24592;
pub const IDR_GUEST_VIEW_IFRAME_CONTAINER_JS: i32 = 24593;
pub const IDR_GUEST_VIEW_IFRAME_JS: i32 = 24594;
pub const IDR_GUEST_VIEW_JS: i32 = 24595;
pub const IDR_IMAGE_UTIL_JS: i32 = 24596;
pub const IDR_KEEP_ALIVE_JS: i32 = 24597;
pub const IDR_KEEP_ALIVE_MOJOM_JS: i32 = 24598;
pub const IDR_MIME_HANDLER_PRIVATE_CUSTOM_BINDINGS_JS: i32 = 24599;
pub const IDR_MIME_HANDLER_MOJOM_JS: i32 = 24600;
pub const IDR_SAFE_METHODS_JS: i32 = 24601;
pub const IDR_SET_ICON_JS: i32 = 24602;
pub const IDR_TEST_CUSTOM_BINDINGS_JS: i32 = 24603;
pub const IDR_UNCAUGHT_EXCEPTION_HANDLER_JS: i32 = 24604;
pub const IDR_UTILS_JS: i32 = 24605;
pub const IDR_WEB_VIEW_ACTION_REQUESTS_JS: i32 = 24606;
pub const IDR_WEB_VIEW_API_METHODS_JS: i32 = 24607;
pub const IDR_WEB_VIEW_ATTRIBUTES_JS: i32 = 24608;
pub const IDR_WEB_VIEW_CONSTANTS_JS: i32 = 24609;
pub const IDR_WEB_VIEW_EVENTS_JS: i32 = 24610;
pub const IDR_WEB_VIEW_INTERNAL_CUSTOM_BINDINGS_JS: i32 = 24611;
pub const IDR_WEB_VIEW_JS: i32 = 24612;
pub const IDR_WEB_VIEW_ELEMENT_JS: i32 = 24613;
pub const IDR_AUTOMATION_CUSTOM_BINDINGS_JS: i32 = 24614;
pub const IDR_AUTOMATION_EVENT_JS: i32 = 24615;
pub const IDR_AUTOMATION_NODE_JS: i32 = 24616;
pub const IDR_APP_RUNTIME_CUSTOM_BINDINGS_JS: i32 = 24617;
pub const IDR_APP_WINDOW_CUSTOM_BINDINGS_JS: i32 = 24618;
pub const IDR_CONTEXT_MENUS_CUSTOM_BINDINGS_JS: i32 = 24619;
pub const IDR_CONTEXT_MENUS_HANDLERS_JS: i32 = 24620;
pub const IDR_DECLARATIVE_WEBREQUEST_CUSTOM_BINDINGS_JS: i32 = 24621;
pub const IDR_DISPLAY_SOURCE_CUSTOM_BINDINGS_JS: i32 = 24622;
pub const IDR_FILE_ENTRY_BINDING_UTIL_JS: i32 = 24623;
pub const IDR_FILE_SYSTEM_CUSTOM_BINDINGS_JS: i32 = 24624;
pub const IDR_GREASEMONKEY_API_JS: i32 = 24625;
pub const IDR_MOJO_PRIVATE_CUSTOM_BINDINGS_JS: i32 = 24626;
pub const IDR_PERMISSIONS_CUSTOM_BINDINGS_JS: i32 = 24627;
pub const IDR_PRINTER_PROVIDER_CUSTOM_BINDINGS_JS: i32 = 24628;
pub const IDR_SERVICE_WORKER_BINDINGS_JS: i32 = 24629;
pub const IDR_WEB_REQUEST_CUSTOM_BINDINGS_JS: i32 = 24630;
pub const IDR_WEB_REQUEST_EVENT_JS: i32 = 24631;
pub const IDR_WEB_VIEW_REQUEST_CUSTOM_BINDINGS_JS: i32 = 24632;
pub const IDR_PLATFORM_APP_JS: i32 = 24633;
pub const IDR_EXTENSION_FONTS_CSS: i32 = 24634;
pub const IDR_PLATFORM_APP_CSS: i32 = 24700;
pub const IDR_EXTENSION_CSS: i32 = 24701;
pub const IDR_EXTENSION_API_FEATURES: i32 = 24560;
pub const IDR_NET_INTERNALS_INDEX_HTML: i32 = 12600;
pub const IDR_NET_INTERNALS_INDEX_JS: i32 = 12601;
pub const IDR_DIR_HEADER_HTML: i32 = 24890;
pub const IDR_SAD_WEBVIEW: i32 = 14340;
pub const IDR_SAD_PLUGIN: i32 = 14341;
pub const IDR_BLOCKED_PLUGIN_HTML: i32 = 14230;
pub const IDR_DISABLED_PLUGIN_HTML: i32 = 14231;
pub const IDR_PDF_PLUGIN_HTML: i32 = 14232;
pub const IDR_PREFER_HTML_PLUGIN_HTML: i32 = 14233;
pub const IDR_PLUGIN_POSTER_HTML: i32 = 14234;
pub const IDR_ACTION_CUSTOM_BINDINGS_JS: i32 = 14235;
pub const IDR_BROWSER_ACTION_CUSTOM_BINDINGS_JS: i32 = 14236;
pub const IDR_CAST_STREAMING_RTP_STREAM_CUSTOM_BINDINGS_JS: i32 = 14237;
pub const IDR_CAST_STREAMING_SESSION_CUSTOM_BINDINGS_JS: i32 = 14238;
pub const IDR_CAST_STREAMING_UDP_TRANSPORT_CUSTOM_BINDINGS_JS: i32 = 14239;
pub const IDR_CAST_STREAMING_RECEIVER_SESSION_CUSTOM_BINDINGS_JS: i32 = 14240;
pub const IDR_CHROME_WEB_VIEW_INTERNAL_CUSTOM_BINDINGS_JS: i32 = 14241;
pub const IDR_CHROME_WEB_VIEW_JS: i32 = 14242;
pub const IDR_DECLARATIVE_CONTENT_CUSTOM_BINDINGS_JS: i32 = 14243;
pub const IDR_DESKTOP_CAPTURE_CUSTOM_BINDINGS_JS: i32 = 14244;
pub const IDR_DEVELOPER_PRIVATE_CUSTOM_BINDINGS_JS: i32 = 14245;
pub const IDR_DOWNLOADS_CUSTOM_BINDINGS_JS: i32 = 14246;
pub const IDR_GCM_CUSTOM_BINDINGS_JS: i32 = 14247;
pub const IDR_IDENTITY_CUSTOM_BINDINGS_JS: i32 = 14248;
pub const IDR_IMAGE_WRITER_PRIVATE_CUSTOM_BINDINGS_JS: i32 = 14249;
pub const IDR_INPUT_IME_CUSTOM_BINDINGS_JS: i32 = 14250;
pub const IDR_MEDIA_GALLERIES_CUSTOM_BINDINGS_JS: i32 = 14251;
pub const IDR_NOTIFICATIONS_CUSTOM_BINDINGS_JS: i32 = 14252;
pub const IDR_OMNIBOX_CUSTOM_BINDINGS_JS: i32 = 14253;
pub const IDR_PAGE_ACTION_CUSTOM_BINDINGS_JS: i32 = 14254;
pub const IDR_PAGE_CAPTURE_CUSTOM_BINDINGS_JS: i32 = 14255;
pub const IDR_SYNC_FILE_SYSTEM_CUSTOM_BINDINGS_JS: i32 = 14256;
pub const IDR_SYSTEM_INDICATOR_CUSTOM_BINDINGS_JS: i32 = 14257;
pub const IDR_TAB_CAPTURE_CUSTOM_BINDINGS_JS: i32 = 14258;
pub const IDR_TTS_CUSTOM_BINDINGS_JS: i32 = 14259;
pub const IDR_TTS_ENGINE_CUSTOM_BINDINGS_JS: i32 = 14260;
pub const IDR_WEBRTC_DESKTOP_CAPTURE_PRIVATE_CUSTOM_BINDINGS_JS: i32 = 14261;
pub const IDR_WEBRTC_LOGGING_PRIVATE_CUSTOM_BINDINGS_JS: i32 = 14262;
pub const IDR_MEDIA_CONTROLLER_MOJOM_JS: i32 = 14281;
pub const IDR_MEDIA_ROUTER_MOJOM_JS: i32 = 14282;
pub const IDR_MEDIA_ROUTER_BINDINGS_JS: i32 = 14283;
pub const IDR_MEDIA_STATUS_MOJOM_JS: i32 = 14284;
pub const IDR_MIRRORING_SERVICE_HOST_MOJOM_JS: i32 = 14285;
pub const IDR_MIRRORING_CAST_MESSAGE_CHANNEL_MOJOM_JS: i32 = 14286;
pub const IDR_MIRRORING_SESSION_OBSERVER_MOJOM_JS: i32 = 14287;
pub const IDR_MIRRORING_SESSION_PARAMETERS_JS: i32 = 14288;
pub const IDR_MOJO_TIME_MOJOM_JS: i32 = 14289;
pub const IDR_MOJO_UNGUESSABLE_TOKEN_MOJOM_JS: i32 = 14290;
pub const IDR_MOJO_IP_ADDRESS_MOJOM_JS: i32 = 14291;
pub const IDR_MOJO_IP_ENDPOINT_MOJOM_JS: i32 = 14292;
pub const IDR_ORIGIN_MOJOM_JS: i32 = 14293;
pub const IDR_MOJO_URL_MOJOM_JS: i32 = 14294;
pub const IDR_MEDIA_REMOTING_JS: i32 = 14295;
pub const IDR_REMOTING_COMMON_JS: i32 = 14296;
pub const IDR_TRACING_HTML: i32 = 20550;
pub const IDR_TRACING_JS: i32 = 20551;
pub const IDR_AURA_CURSOR_ALIAS: i32 = 27000;
pub const IDR_AURA_CURSOR_BIG_ALIAS: i32 = 27001;
pub const IDR_AURA_CURSOR_BIG_CELL: i32 = 27002;
pub const IDR_AURA_CURSOR_BIG_COL_RESIZE: i32 = 27003;
pub const IDR_AURA_CURSOR_BIG_CONTEXT_MENU: i32 = 27004;
pub const IDR_AURA_CURSOR_BIG_COPY: i32 = 27005;
pub const IDR_AURA_CURSOR_BIG_CROSSHAIR: i32 = 27006;
pub const IDR_AURA_CURSOR_BIG_EAST_RESIZE: i32 = 27007;
pub const IDR_AURA_CURSOR_BIG_EAST_WEST_RESIZE: i32 = 27008;
pub const IDR_AURA_CURSOR_BIG_GRAB: i32 = 27009;
pub const IDR_AURA_CURSOR_BIG_GRABBING: i32 = 27010;
pub const IDR_AURA_CURSOR_BIG_HAND: i32 = 27011;
pub const IDR_AURA_CURSOR_BIG_HELP: i32 = 27012;
pub const IDR_AURA_CURSOR_BIG_IBEAM: i32 = 27013;
pub const IDR_AURA_CURSOR_BIG_MOVE: i32 = 27014;
pub const IDR_AURA_CURSOR_BIG_NORTH_EAST_RESIZE: i32 = 27015;
pub const IDR_AURA_CURSOR_BIG_NORTH_EAST_SOUTH_WEST_RESIZE: i32 = 27016;
pub const IDR_AURA_CURSOR_BIG_NORTH_RESIZE: i32 = 27017;
pub const IDR_AURA_CURSOR_BIG_NORTH_SOUTH_RESIZE: i32 = 27018;
pub const IDR_AURA_CURSOR_BIG_NORTH_WEST_RESIZE: i32 = 27019;
pub const IDR_AURA_CURSOR_BIG_NORTH_WEST_SOUTH_EAST_RESIZE: i32 = 27020;
pub const IDR_AURA_CURSOR_BIG_NO_DROP: i32 = 27021;
pub const IDR_AURA_CURSOR_BIG_PTR: i32 = 27022;
pub const IDR_AURA_CURSOR_BIG_ROW_RESIZE: i32 = 27023;
pub const IDR_AURA_CURSOR_BIG_SOUTH_EAST_RESIZE: i32 = 27024;
pub const IDR_AURA_CURSOR_BIG_SOUTH_RESIZE: i32 = 27025;
pub const IDR_AURA_CURSOR_BIG_SOUTH_WEST_RESIZE: i32 = 27026;
pub const IDR_AURA_CURSOR_BIG_WEST_RESIZE: i32 = 27027;
pub const IDR_AURA_CURSOR_BIG_XTERM_HORIZ: i32 = 27028;
pub const IDR_AURA_CURSOR_BIG_ZOOM_IN: i32 = 27029;
pub const IDR_AURA_CURSOR_BIG_ZOOM_OUT: i32 = 27030;
pub const IDR_AURA_CURSOR_CELL: i32 = 27031;
pub const IDR_AURA_CURSOR_COL_RESIZE: i32 = 27032;
pub const IDR_AURA_CURSOR_CONTEXT_MENU: i32 = 27033;
pub const IDR_AURA_CURSOR_COPY: i32 = 27034;
pub const IDR_AURA_CURSOR_CROSSHAIR: i32 = 27035;
pub const IDR_AURA_CURSOR_EAST_RESIZE: i32 = 27036;
pub const IDR_AURA_CURSOR_EAST_WEST_RESIZE: i32 = 27037;
pub const IDR_AURA_CURSOR_GRAB: i32 = 27038;
pub const IDR_AURA_CURSOR_GRABBING: i32 = 27039;
pub const IDR_AURA_CURSOR_HAND: i32 = 27040;
pub const IDR_AURA_CURSOR_HELP: i32 = 27041;
pub const IDR_AURA_CURSOR_IBEAM: i32 = 27042;
pub const IDR_AURA_CURSOR_MOVE: i32 = 27043;
pub const IDR_AURA_CURSOR_NORTH_EAST_RESIZE: i32 = 27044;
pub const IDR_AURA_CURSOR_NORTH_EAST_SOUTH_WEST_RESIZE: i32 = 27045;
pub const IDR_AURA_CURSOR_NORTH_RESIZE: i32 = 27046;
pub const IDR_AURA_CURSOR_NORTH_SOUTH_RESIZE: i32 = 27047;
pub const IDR_AURA_CURSOR_NORTH_WEST_RESIZE: i32 = 27048;
pub const IDR_AURA_CURSOR_NORTH_WEST_SOUTH_EAST_RESIZE: i32 = 27049;
pub const IDR_AURA_CURSOR_NO_DROP: i32 = 27050;
pub const IDR_AURA_CURSOR_PTR: i32 = 27051;
pub const IDR_AURA_CURSOR_ROW_RESIZE: i32 = 27052;
pub const IDR_AURA_CURSOR_SOUTH_EAST_RESIZE: i32 = 27053;
pub const IDR_AURA_CURSOR_SOUTH_RESIZE: i32 = 27054;
pub const IDR_AURA_CURSOR_SOUTH_WEST_RESIZE: i32 = 27055;
pub const IDR_AURA_CURSOR_THROBBER: i32 = 27056;
pub const IDR_AURA_CURSOR_WEST_RESIZE: i32 = 27057;
pub const IDR_AURA_CURSOR_XTERM_HORIZ: i32 = 27058;
pub const IDR_AURA_CURSOR_ZOOM_IN: i32 = 27059;
pub const IDR_AURA_CURSOR_ZOOM_OUT: i32 = 27060;
pub const IDR_CLOSE_2: i32 = 27061;
pub const IDR_CLOSE_2_H: i32 = 27062;
pub const IDR_CLOSE_2_MASK: i32 = 27063;
pub const IDR_CLOSE_2_P: i32 = 27064;
pub const IDR_CLOSE_3_MASK: i32 = 27065;
pub const IDR_CLOSE_DIALOG: i32 = 27066;
pub const IDR_CLOSE_DIALOG_H: i32 = 27067;
pub const IDR_CLOSE_DIALOG_P: i32 = 27068;
pub const IDR_DISABLE: i32 = 27069;
pub const IDR_DISABLE_H: i32 = 27070;
pub const IDR_DISABLE_P: i32 = 27071;
pub const IDR_DEFAULT_FAVICON: i32 = 280;
pub const IDR_DEFAULT_FAVICON_DARK: i32 = 27072;
pub const IDR_DEFAULT_FAVICON_32: i32 = 27073;
pub const IDR_DEFAULT_FAVICON_DARK_32: i32 = 27074;
pub const IDR_DEFAULT_FAVICON_64: i32 = 27075;
pub const IDR_DEFAULT_FAVICON_DARK_64: i32 = 27076;
pub const IDR_EASY_UNLOCK_HARDLOCKED: i32 = 27077;
pub const IDR_EASY_UNLOCK_HARDLOCKED_HOVER: i32 = 27078;
pub const IDR_EASY_UNLOCK_HARDLOCKED_PRESSED: i32 = 27079;
pub const IDR_EASY_UNLOCK_LOCKED: i32 = 27080;
pub const IDR_EASY_UNLOCK_LOCKED_HOVER: i32 = 27081;
pub const IDR_EASY_UNLOCK_LOCKED_PRESSED: i32 = 27082;
pub const IDR_EASY_UNLOCK_LOCKED_TO_BE_ACTIVATED: i32 = 27083;
pub const IDR_EASY_UNLOCK_LOCKED_TO_BE_ACTIVATED_HOVER: i32 = 27084;
pub const IDR_EASY_UNLOCK_LOCKED_TO_BE_ACTIVATED_PRESSED: i32 = 27085;
pub const IDR_EASY_UNLOCK_LOCKED_WITH_PROXIMITY_HINT: i32 = 27086;
pub const IDR_EASY_UNLOCK_LOCKED_WITH_PROXIMITY_HINT_HOVER: i32 = 27087;
pub const IDR_EASY_UNLOCK_LOCKED_WITH_PROXIMITY_HINT_PRESSED: i32 = 27088;
pub const IDR_EASY_UNLOCK_SPINNER: i32 = 27089;
pub const IDR_EASY_UNLOCK_UNLOCKED: i32 = 27090;
pub const IDR_EASY_UNLOCK_UNLOCKED_HOVER: i32 = 27091;
pub const IDR_EASY_UNLOCK_UNLOCKED_PRESSED: i32 = 27092;
pub const IDR_FOLDER_CLOSED: i32 = 27093;
pub const IDR_FOLDER_OPEN: i32 = 27095;
pub const IDR_SEND_TAB_TO_SELF_ICON_LIGHT: i32 = 27096;
pub const IDR_SEND_TAB_TO_SELF_ICON_DARK: i32 = 27097;
pub const IDR_NOTIFICATION_SETTINGS: i32 = 27098;
pub const IDR_NTP_DEFAULT_FAVICON: i32 = 27099;
pub const IDR_OOBE_ACTION_BOX_BUTTON_HOVER: i32 = 27100;
pub const IDR_OOBE_ACTION_BOX_BUTTON_NORMAL: i32 = 27101;
pub const IDR_OOBE_ACTION_BOX_BUTTON_PRESSED: i32 = 27102;
pub const IDR_SIGNAL_0_BAR: i32 = 27103;
pub const IDR_SIGNAL_1_BAR: i32 = 27104;
pub const IDR_SIGNAL_2_BAR: i32 = 27105;
pub const IDR_SIGNAL_3_BAR: i32 = 27106;
pub const IDR_SIGNAL_4_BAR: i32 = 27107;
pub const IDR_SIGNAL_0_BAR_SELECTED: i32 = 27108;
pub const IDR_SIGNAL_1_BAR_SELECTED: i32 = 27109;
pub const IDR_SIGNAL_2_BAR_SELECTED: i32 = 27110;
pub const IDR_SIGNAL_3_BAR_SELECTED: i32 = 27111;
pub const IDR_SIGNAL_4_BAR_SELECTED: i32 = 27112;
pub const IDR_TEXT_SELECTION_HANDLE_CENTER: i32 = 27113;
pub const IDR_TEXT_SELECTION_HANDLE_LEFT: i32 = 27114;
pub const IDR_TEXT_SELECTION_HANDLE_RIGHT: i32 = 27115;
pub const IDR_TOUCH_DRAG_TIP_COPY: i32 = 27116;
pub const IDR_TOUCH_DRAG_TIP_MOVE: i32 = 27117;
pub const IDR_TOUCH_DRAG_TIP_LINK: i32 = 27118;
pub const IDR_TOUCH_DRAG_TIP_NODROP: i32 = 27119;
pub const IDR_APP_TOP_CENTER: i32 = 27600;
pub const IDR_APP_TOP_LEFT: i32 = 27601;
pub const IDR_APP_TOP_RIGHT: i32 = 27602;
pub const IDR_CLOSE: i32 = 27603;
pub const IDR_CLOSE_H: i32 = 27604;
pub const IDR_CLOSE_P: i32 = 27605;
pub const IDR_CONTENT_BOTTOM_CENTER: i32 = 27606;
pub const IDR_CONTENT_BOTTOM_LEFT_CORNER: i32 = 27607;
pub const IDR_CONTENT_BOTTOM_RIGHT_CORNER: i32 = 27608;
pub const IDR_CONTENT_LEFT_SIDE: i32 = 27609;
pub const IDR_CONTENT_RIGHT_SIDE: i32 = 27610;
pub const IDR_FRAME: i32 = 27611;
pub const IDR_FRAME_INACTIVE: i32 = 27612;
pub const IDR_MAXIMIZE: i32 = 27613;
pub const IDR_MAXIMIZE_H: i32 = 27614;
pub const IDR_MAXIMIZE_P: i32 = 27615;
pub const IDR_MINIMIZE: i32 = 27616;
pub const IDR_MINIMIZE_H: i32 = 27617;
pub const IDR_MINIMIZE_P: i32 = 27618;
pub const IDR_RESTORE: i32 = 27619;
pub const IDR_RESTORE_H: i32 = 27620;
pub const IDR_RESTORE_P: i32 = 27621;
pub const IDR_TEXTBUTTON_HOVER_BOTTOM: i32 = 27622;
pub const IDR_TEXTBUTTON_HOVER_BOTTOM_LEFT: i32 = 27623;
pub const IDR_TEXTBUTTON_HOVER_BOTTOM_RIGHT: i32 = 27624;
pub const IDR_TEXTBUTTON_HOVER_CENTER: i32 = 27625;
pub const IDR_TEXTBUTTON_HOVER_LEFT: i32 = 27626;
pub const IDR_TEXTBUTTON_HOVER_RIGHT: i32 = 27627;
pub const IDR_TEXTBUTTON_HOVER_TOP: i32 = 27628;
pub const IDR_TEXTBUTTON_HOVER_TOP_LEFT: i32 = 27629;
pub const IDR_TEXTBUTTON_HOVER_TOP_RIGHT: i32 = 27630;
pub const IDR_TEXTBUTTON_PRESSED_BOTTOM: i32 = 27631;
pub const IDR_TEXTBUTTON_PRESSED_BOTTOM_LEFT: i32 = 27632;
pub const IDR_TEXTBUTTON_PRESSED_BOTTOM_RIGHT: i32 = 27633;
pub const IDR_TEXTBUTTON_PRESSED_CENTER: i32 = 27634;
pub const IDR_TEXTBUTTON_PRESSED_LEFT: i32 = 27635;
pub const IDR_TEXTBUTTON_PRESSED_RIGHT: i32 = 27636;
pub const IDR_TEXTBUTTON_PRESSED_TOP: i32 = 27637;
pub const IDR_TEXTBUTTON_PRESSED_TOP_LEFT: i32 = 27638;
pub const IDR_TEXTBUTTON_PRESSED_TOP_RIGHT: i32 = 27639;
pub const IDR_WINDOW_BOTTOM_CENTER: i32 = 27640;
pub const IDR_WINDOW_BOTTOM_LEFT_CORNER: i32 = 27641;
pub const IDR_WINDOW_BOTTOM_RIGHT_CORNER: i32 = 27642;
pub const IDR_WINDOW_LEFT_SIDE: i32 = 27643;
pub const IDR_WINDOW_RIGHT_SIDE: i32 = 27644;
pub const IDR_WINDOW_TOP_CENTER: i32 = 27645;
pub const IDR_WINDOW_TOP_LEFT_CORNER: i32 = 27646;
pub const IDR_WINDOW_TOP_RIGHT_CORNER: i32 = 27647;
pub const IDR_WEBUI_JSTEMPLATE_JS: i32 = 27881;
pub const IDR_WEBUI_ROBOTO_ROBOTO_REGULAR_WOFF2: i32 = 27882;
pub const IDR_WEBUI_ROBOTO_ROBOTO_MEDIUM_WOFF2: i32 = 27883;
pub const IDR_WEBUI_ROBOTO_ROBOTO_BOLD_WOFF2: i32 = 27884;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_CLOSE: i32 = 27885;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_MAXIMIZE: i32 = 27886;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_MINIMIZE: i32 = 27887;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE: i32 = 27888;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_HOVER: i32 = 27889;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_PRESSED: i32 = 27890;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_2X_CLOSE: i32 = 27891;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_2X_MAXIMIZE: i32 = 27892;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_2X_MINIMIZE: i32 = 27893;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_2X: i32 = 27894;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_HOVER_2X: i32 = 27895;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_PRESSED_2X: i32 = 27896;
pub const IDR_WEBUI_IMAGES_ADD: i32 = 27897;
pub const IDR_WEBUI_IMAGES_CHECK: i32 = 27898;
pub const IDR_WEBUI_IMAGES_CHECKBOX_BLACK: i32 = 27899;
pub const IDR_WEBUI_IMAGES_CHECKBOX_WHITE: i32 = 27900;
pub const IDR_WEBUI_IMAGES_DISABLED_SELECT: i32 = 27901;
pub const IDR_WEBUI_IMAGES_ERROR: i32 = 27902;
pub const IDR_WEBUI_IMAGES_ERROR_BADGE: i32 = 27903;
pub const IDR_WEBUI_IMAGES_GOOGLE_LOGO: i32 = 27904;
pub const IDR_WEBUI_IMAGES_SELECT: i32 = 27905;
pub const IDR_WEBUI_IMAGES_THROBBER_MEDIUM: i32 = 27906;
pub const IDR_WEBUI_IMAGES_THROBBER_SMALL: i32 = 27907;
pub const IDR_WEBUI_IMAGES_ARROW_DOWN: i32 = 27922;
pub const IDR_WEBUI_IMAGES_ARROW_RIGHT: i32 = 27923;
pub const IDR_WEBUI_IMAGES_DARK_ARROW_DOWN: i32 = 27924;
pub const IDR_WEBUI_IMAGES_DARK_ARROW_RIGHT: i32 = 27925;
pub const IDR_WEBUI_IMAGES_DARK_ICON_ARROW_BACK: i32 = 27926;
pub const IDR_WEBUI_IMAGES_DARK_ICON_ARROW_DROPDOWN: i32 = 27927;
pub const IDR_WEBUI_IMAGES_DARK_ICON_CANCEL: i32 = 27928;
pub const IDR_WEBUI_IMAGES_DARK_ICON_CLEAR: i32 = 27929;
pub const IDR_WEBUI_IMAGES_DARK_ICON_DELETE_GRAY: i32 = 27930;
pub const IDR_WEBUI_IMAGES_DARK_ICON_EXPAND_LESS: i32 = 27931;
pub const IDR_WEBUI_IMAGES_DARK_ICON_EXPAND_MORE: i32 = 27932;
pub const IDR_WEBUI_IMAGES_DARK_ICON_MORE_VERT: i32 = 27933;
pub const IDR_WEBUI_IMAGES_DARK_ICON_PICTURE_DELETE: i32 = 27934;
pub const IDR_WEBUI_IMAGES_DARK_ICON_REFRESH: i32 = 27935;
pub const IDR_WEBUI_IMAGES_DARK_ICON_SETTINGS: i32 = 27936;
pub const IDR_WEBUI_IMAGES_DARK_ICON_SEARCH: i32 = 27937;
pub const IDR_WEBUI_IMAGES_DARK_ICON_VISIBILITY: i32 = 27938;
pub const IDR_WEBUI_IMAGES_DARK_ICON_VISIBILITY_OFF: i32 = 27939;
pub const IDR_WEBUI_IMAGES_ICON_ARROW_BACK: i32 = 27940;
pub const IDR_WEBUI_IMAGES_ICON_ARROW_DROPDOWN: i32 = 27941;
pub const IDR_WEBUI_IMAGES_ICON_CANCEL: i32 = 27942;
pub const IDR_WEBUI_IMAGES_ICON_CLEAR: i32 = 27943;
pub const IDR_WEBUI_IMAGES_ICON_DELETE_GRAY: i32 = 27944;
pub const IDR_WEBUI_IMAGES_ICON_EXPAND_LESS: i32 = 27945;
pub const IDR_WEBUI_IMAGES_ICON_EXPAND_MORE: i32 = 27946;
pub const IDR_WEBUI_IMAGES_ICON_EXTERNAL: i32 = 27947;
pub const IDR_WEBUI_IMAGES_ICON_MORE_VERT: i32 = 27948;
pub const IDR_WEBUI_IMAGES_ICON_PICTURE_DELETE: i32 = 27949;
pub const IDR_WEBUI_IMAGES_ICON_REFRESH: i32 = 27950;
pub const IDR_WEBUI_IMAGES_ICON_SEARCH: i32 = 27951;
pub const IDR_WEBUI_IMAGES_ICON_SETTINGS: i32 = 27952;
pub const IDR_WEBUI_IMAGES_ICON_VISIBILITY: i32 = 27953;
pub const IDR_WEBUI_IMAGES_ICON_VISIBILITY_OFF: i32 = 27954;
pub const IDR_WEBUI_IMAGES_OPEN_IN_NEW: i32 = 27955;
pub const IDR_WEBUI_CSS_ACTION_LINK: i32 = 28080;
pub const IDR_WEBUI_CSS_APPS_COMMON: i32 = 28081;
pub const IDR_WEBUI_CSS_APPS_TOPBUTTON_BAR: i32 = 28082;
pub const IDR_WEBUI_CSS_BUBBLE: i32 = 28083;
pub const IDR_WEBUI_CSS_BUBBLE_BUTTON: i32 = 28084;
pub const IDR_WEBUI_CSS_BUTTER_BAR: i32 = 28085;
pub const IDR_WEBUI_CSS_CHROME: i32 = 28086;
pub const IDR_WEBUI_CSS_CONTROLLED_INDICATOR: i32 = 28087;
pub const IDR_WEBUI_CSS_DIALOGS: i32 = 28088;
pub const IDR_WEBUI_CSS_I18N_PROCESS: i32 = 28089;
pub const IDR_WEBUI_CSS_LIST: i32 = 28090;
pub const IDR_WEBUI_CSS_MENU: i32 = 28091;
pub const IDR_WEBUI_CSS_MENU_BUTTON: i32 = 28092;
pub const IDR_WEBUI_CSS_TEXT_DEFAULTS: i32 = 28093;
pub const IDR_WEBUI_CSS_TEXT_DEFAULTS_MD: i32 = 28094;
pub const IDR_WEBUI_CSS_OVERLAY: i32 = 28095;
pub const IDR_WEBUI_CSS_ROBOTO: i32 = 28096;
pub const IDR_WEBUI_CSS_SPINNER: i32 = 28097;
pub const IDR_WEBUI_CSS_TABLE: i32 = 28098;
pub const IDR_WEBUI_CSS_TABS: i32 = 28099;
pub const IDR_WEBUI_CSS_THROBBER: i32 = 28100;
pub const IDR_WEBUI_CSS_TREE: i32 = 28101;
pub const IDR_WEBUI_CSS_WIDGETS: i32 = 28102;
pub const IDR_WEBUI_HTML_ACTION_LINK: i32 = 28103;
pub const IDR_WEBUI_HTML_ASSERT: i32 = 28104;
pub const IDR_WEBUI_HTML_PROMISE_RESOLVER: i32 = 28105;
pub const IDR_WEBUI_HTML_CR: i32 = 28107;
pub const IDR_WEBUI_HTML_CR_EVENT_TARGET: i32 = 28108;
pub const IDR_WEBUI_HTML_CR_UI: i32 = 28109;
pub const IDR_WEBUI_HTML_CR_UI_ARRAY_DATA_MODEL: i32 = 28110;
pub const IDR_WEBUI_HTML_CR_UI_COMMAND: i32 = 28111;
pub const IDR_WEBUI_HTML_CR_UI_CONTEXT_MENU_HANDLER: i32 = 28112;
pub const IDR_WEBUI_HTML_CR_UI_DRAG_WRAPPER: i32 = 28113;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_GRID: i32 = 28114;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_MANAGER: i32 = 28115;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_OUTLINE_MANAGER: i32 = 28116;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_ROW: i32 = 28117;
pub const IDR_WEBUI_HTML_CR_UI_LIST: i32 = 28118;
pub const IDR_WEBUI_HTML_CR_UI_LIST_ITEM: i32 = 28119;
pub const IDR_WEBUI_HTML_CR_UI_LIST_SELECTION_CONTROLLER: i32 = 28120;
pub const IDR_WEBUI_HTML_CR_UI_LIST_SELECTION_MODEL: i32 = 28121;
pub const IDR_WEBUI_HTML_CR_UI_MENU: i32 = 28122;
pub const IDR_WEBUI_HTML_CR_UI_MENU_BUTTON: i32 = 28123;
pub const IDR_WEBUI_HTML_CR_UI_MENU_ITEM: i32 = 28124;
pub const IDR_WEBUI_HTML_CR_UI_OVERLAY: i32 = 28125;
pub const IDR_WEBUI_HTML_CR_UI_PAGE_MANAGER_PAGE: i32 = 28126;
pub const IDR_WEBUI_HTML_CR_UI_PAGE_MANAGER_PAGE_MANAGER: i32 = 28127;
pub const IDR_WEBUI_HTML_CR_UI_POSITION_UTIL: i32 = 28128;
pub const IDR_WEBUI_HTML_CR_UI_SPLITTER: i32 = 28129;
pub const IDR_WEBUI_HTML_CR_UI_STORE: i32 = 28130;
pub const IDR_WEBUI_HTML_CR_UI_STORE_CLIENT: i32 = 28131;
pub const IDR_WEBUI_HTML_EVENT_TRACKER: i32 = 28132;
pub const IDR_WEBUI_HTML_ICON: i32 = 28133;
pub const IDR_WEBUI_HTML_LOAD_TIME_DATA: i32 = 28134;
pub const IDR_WEBUI_HTML_PARSE_HTML_SUBSET: i32 = 28135;
pub const IDR_WEBUI_HTML_UTIL: i32 = 28136;
pub const IDR_WEBUI_JS_ACTION_LINK: i32 = 28137;
pub const IDR_WEBUI_JS_ASSERT: i32 = 28138;
pub const IDR_WEBUI_JS_PROMISE_RESOLVER: i32 = 28139;
pub const IDR_WEBUI_JS_CR: i32 = 28141;
pub const IDR_WEBUI_JS_CR_EVENT_TARGET: i32 = 28143;
pub const IDR_WEBUI_JS_CR_UI: i32 = 28144;
pub const IDR_WEBUI_JS_CR_UI_ARRAY_DATA_MODEL: i32 = 28145;
pub const IDR_WEBUI_JS_CR_UI_BUBBLE: i32 = 28146;
pub const IDR_WEBUI_JS_CR_UI_BUBBLE_BUTTON: i32 = 28147;
pub const IDR_WEBUI_JS_CR_UI_CARD_SLIDER: i32 = 28148;
pub const IDR_WEBUI_JS_CR_UI_COMMAND: i32 = 28149;
pub const IDR_WEBUI_JS_CR_UI_CONTEXT_MENU_HANDLER: i32 = 28150;
pub const IDR_WEBUI_JS_CR_UI_CONTROLLED_INDICATOR: i32 = 28151;
pub const IDR_WEBUI_JS_CR_UI_DIALOGS: i32 = 28152;
pub const IDR_WEBUI_JS_CR_UI_DRAG_WRAPPER: i32 = 28153;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_GRID: i32 = 28154;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_MANAGER: i32 = 28155;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_OUTLINE_MANAGER: i32 = 28156;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_ROW: i32 = 28157;
pub const IDR_WEBUI_JS_CR_UI_LIST: i32 = 28158;
pub const IDR_WEBUI_JS_CR_UI_LIST_ITEM: i32 = 28159;
pub const IDR_WEBUI_JS_CR_UI_LIST_SELECTION_CONTROLLER: i32 = 28160;
pub const IDR_WEBUI_JS_CR_UI_LIST_SELECTION_MODEL: i32 = 28161;
pub const IDR_WEBUI_JS_CR_UI_LIST_SINGLE_SELECTION_MODEL: i32 = 28162;
pub const IDR_WEBUI_JS_CR_UI_MENU: i32 = 28163;
pub const IDR_WEBUI_JS_CR_UI_MENU_BUTTON: i32 = 28164;
pub const IDR_WEBUI_JS_CR_UI_MENU_ITEM: i32 = 28165;
pub const IDR_WEBUI_JS_CR_UI_NODE_UTILS: i32 = 28166;
pub const IDR_WEBUI_JS_CR_UI_OVERLAY: i32 = 28167;
pub const IDR_WEBUI_JS_CR_UI_PAGE_MANAGER_PAGE: i32 = 28168;
pub const IDR_WEBUI_JS_CR_UI_PAGE_MANAGER_PAGE_MANAGER: i32 = 28169;
pub const IDR_WEBUI_JS_CR_UI_POSITION_UTIL: i32 = 28170;
pub const IDR_WEBUI_JS_CR_UI_SPLITTER: i32 = 28171;
pub const IDR_WEBUI_JS_CR_UI_STORE: i32 = 28172;
pub const IDR_WEBUI_JS_CR_UI_STORE_CLENT: i32 = 28173;
pub const IDR_WEBUI_JS_CR_UI_TABS: i32 = 28175;
pub const IDR_WEBUI_JS_CR_UI_TREE: i32 = 28176;
pub const IDR_WEBUI_JS_CR_UI_TOUCH_HANDLER: i32 = 28177;
pub const IDR_WEBUI_JS_EVENT_TRACKER: i32 = 28178;
pub const IDR_WEBUI_JS_ICON: i32 = 28179;
pub const IDR_WEBUI_JS_I18N_TEMPLATE_NO_PROCESS: i32 = 28180;
pub const IDR_WEBUI_JS_LOAD_TIME_DATA: i32 = 28181;
pub const IDR_WEBUI_JS_PARSE_HTML_SUBSET: i32 = 28182;
pub const IDR_WEBUI_JS_UTIL: i32 = 28183;
pub const IDR_WEBUI_JS_WEBUI_RESOURCE_TEST: i32 = 28184;
pub const IDR_WEBUI_MANAGED_FOOTNOTE_HTML: i32 = 28293;
pub const IDR_WEBUI_MANAGED_FOOTNOTE_JS: i32 = 28294;
pub const IDR_CR_ELEMENTS_ACTION_LINK_CSS_HTML: i32 = 28295;
pub const IDR_CR_ELEMENTS_CR_ACTION_MENU_HTML: i32 = 28296;
pub const IDR_CR_ELEMENTS_CR_ACTION_MENU_JS: i32 = 28297;
pub const IDR_CR_ELEMENTS_CR_BUTTON_HTML: i32 = 28298;
pub const IDR_CR_ELEMENTS_CR_BUTTON_JS: i32 = 28299;
pub const IDR_CR_ELEMENTS_CR_CHECKBOX_HTML: i32 = 28300;
pub const IDR_CR_ELEMENTS_CR_CHECKBOX_JS: i32 = 28301;
pub const IDR_CR_ELEMENTS_CR_CONTAINER_SHADOW_BEHAVIOR_HTML: i32 = 28302;
pub const IDR_CR_ELEMENTS_CR_CONTAINER_SHADOW_BEHAVIOR_JS: i32 = 28303;
pub const IDR_CR_ELEMENTS_CR_INPUT_HTML: i32 = 28304;
pub const IDR_CR_ELEMENTS_CR_INPUT_JS: i32 = 28305;
pub const IDR_CR_ELEMENTS_CR_INPUT_STYLE_CSS_HTML: i32 = 28306;
pub const IDR_CR_ELEMENTS_CR_SCROLLABLE_BEHAVIOR_HTML: i32 = 28307;
pub const IDR_CR_ELEMENTS_CR_SCROLLABLE_BEHAVIOR_JS: i32 = 28308;
pub const IDR_CR_ELEMENTS_CR_DIALOG_HTML: i32 = 28309;
pub const IDR_CR_ELEMENTS_CR_DIALOG_JS: i32 = 28310;
pub const IDR_CR_ELEMENTS_CR_DRAWER_HTML: i32 = 28311;
pub const IDR_CR_ELEMENTS_CR_DRAWER_JS: i32 = 28312;
pub const IDR_CR_ELEMENTS_CR_EXPAND_BUTTON_HTML: i32 = 28313;
pub const IDR_CR_ELEMENTS_CR_EXPAND_BUTTON_JS: i32 = 28314;
pub const IDR_CR_ELEMENTS_CR_ICON_BUTTON_HTML: i32 = 28315;
pub const IDR_CR_ELEMENTS_CR_ICON_BUTTON_JS: i32 = 28316;
pub const IDR_CR_ELEMENTS_ICONS_HTML: i32 = 28317;
pub const IDR_CR_ELEMENTS_CR_LAZY_RENDER_HTML: i32 = 28318;
pub const IDR_CR_ELEMENTS_CR_LAZY_RENDER_JS: i32 = 28319;
pub const IDR_CR_ELEMENTS_CR_LINK_ROW_HTML: i32 = 28320;
pub const IDR_CR_ELEMENTS_CR_LINK_ROW_JS: i32 = 28321;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_HTML: i32 = 28322;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_JS: i32 = 28323;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_BEHAVIOR_HTML: i32 = 28324;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_BEHAVIOR_JS: i32 = 28325;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_STYLE_CSS_HTML: i32 = 28326;
pub const IDR_CR_ELEMENTS_CR_RADIO_GROUP_HTML: i32 = 28327;
pub const IDR_CR_ELEMENTS_CR_RADIO_GROUP_JS: i32 = 28328;
pub const IDR_CR_ELEMENTS_CR_SLIDER_HTML: i32 = 28329;
pub const IDR_CR_ELEMENTS_CR_SLIDER_JS: i32 = 28330;
pub const IDR_CR_ELEMENTS_CR_VIEW_MANAGER_HTML: i32 = 28333;
pub const IDR_CR_ELEMENTS_CR_VIEW_MANAGER_JS: i32 = 28334;
pub const IDR_CR_ELEMENTS_CR_POLICY_INDICATOR_HTML: i32 = 28362;
pub const IDR_CR_ELEMENTS_CR_POLICY_INDICATOR_JS: i32 = 28363;
pub const IDR_CR_ELEMENTS_CR_POLICY_INDICATOR_BEHAVIOR_HTML: i32 = 28364;
pub const IDR_CR_ELEMENTS_CR_POLICY_INDICATOR_BEHAVIOR_JS: i32 = 28365;
pub const IDR_CR_ELEMENTS_CR_POLICY_PREF_BEHAVIOR_HTML: i32 = 28370;
pub const IDR_CR_ELEMENTS_CR_POLICY_PREF_BEHAVIOR_JS: i32 = 28371;
pub const IDR_CR_ELEMENTS_CR_POLICY_PREF_INDICATOR_JS: i32 = 28372;
pub const IDR_CR_ELEMENTS_CR_POLICY_PREF_INDICATOR_HTML: i32 = 28373;
pub const IDR_CR_ELEMENTS_CR_TOGGLE_HTML: i32 = 28374;
pub const IDR_CR_ELEMENTS_CR_TOGGLE_JS: i32 = 28375;
pub const IDR_CR_ELEMENTS_CR_TOOLTIP_ICON_HTML: i32 = 28376;
pub const IDR_CR_ELEMENTS_CR_TOOLTIP_ICON_JS: i32 = 28377;
pub const IDR_CR_ELEMENTS_CR_PROFILE_AVATAR_SELECTOR_HTML: i32 = 28378;
pub const IDR_CR_ELEMENTS_CR_PROFILE_AVATAR_SELECTOR_JS: i32 = 28379;
pub const IDR_CR_ELEMENTS_CR_PROFILE_AVATAR_ICON_SELECTOR_GRID_HTML: i32 = 28380;
pub const IDR_CR_ELEMENTS_CR_PROFILE_AVATAR_SELECTOR_GRID_JS: i32 = 28381;
pub const IDR_CR_ELEMENTS_CR_SEARCH_FIELD_HTML: i32 = 28382;
pub const IDR_CR_ELEMENTS_CR_SEARCH_FIELD_JS: i32 = 28383;
pub const IDR_CR_ELEMENTS_CR_SEARCH_FIELD_BEHAVIOR_HTML: i32 = 28384;
pub const IDR_CR_ELEMENTS_CR_SEARCH_FIELD_BEHAVIOR_JS: i32 = 28385;
pub const IDR_CR_ELEMENTS_CR_SHARED_STYLE_CSS_HTML: i32 = 28386;
pub const IDR_CR_ELEMENTS_CR_HIDDEN_STYLE_CSS_HTML: i32 = 28387;
pub const IDR_CR_ELEMENTS_CR_ICONS_CSS_HTML: i32 = 28388;
pub const IDR_CR_ELEMENTS_CR_PAGE_HOST_STYLE_CSS_HTML: i32 = 28389;
pub const IDR_CR_ELEMENTS_MD_SELECT_CSS_HTML: i32 = 28390;
pub const IDR_CR_ELEMENTS_SEARCH_HIGHLIGHT_STYLE_CSS_HTML: i32 = 28391;
pub const IDR_CR_ELEMENTS_CR_SHARED_VARS_CSS_HTML: i32 = 28392;
pub const IDR_CR_ELEMENTS_CR_TABS_HTML: i32 = 28393;
pub const IDR_CR_ELEMENTS_CR_TABS_JS: i32 = 28394;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_HTML: i32 = 28395;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_JS: i32 = 28396;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_SEARCH_FIELD_HTML: i32 = 28397;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_SEARCH_FIELD_JS: i32 = 28398;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_SELECTION_OVERLAY_HTML: i32 = 28399;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_SELECTION_OVERLAY_JS: i32 = 28400;
pub const IDR_CR_ELEMENTS_CR_TOAST_HTML: i32 = 28401;
pub const IDR_CR_ELEMENTS_CR_TOAST_JS: i32 = 28402;
pub const IDR_CR_ELEMENTS_CR_TOAST_MANAGER_HTML: i32 = 28403;
pub const IDR_CR_ELEMENTS_CR_TOAST_MANAGER_JS: i32 = 28404;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_ROW_BEHAVIOR: i32 = 28405;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_WITHOUT_INK: i32 = 28406;
pub const IDR_WEBUI_HTML_FIND_SHORTCUT_BEHAVIOR: i32 = 28407;
pub const IDR_WEBUI_HTML_I18N_BEHAVIOR: i32 = 28408;
pub const IDR_WEBUI_HTML_LIST_PROPERTY_UPDATE_BEHAVIOR: i32 = 28409;
pub const IDR_WEBUI_HTML_POLYMER: i32 = 28410;
pub const IDR_WEBUI_HTML_WEBUI_LISTENER_BEHAVIOR: i32 = 28411;
pub const IDR_WEBUI_HTML_SEARCH_HIGHLIGHT_UTILS: i32 = 28412;
pub const IDR_WEBUI_HTML_SUBPAGE_LOADER: i32 = 28413;
pub const IDR_WEBUI_CSS_MD_COLORS: i32 = 28414;
pub const IDR_WEBUI_JS_I18N_BEHAVIOR: i32 = 28415;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_ROW_BEHAVIOR: i32 = 28416;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_WITHOUT_INK: i32 = 28417;
pub const IDR_WEBUI_JS_CRISPER_LOADER: i32 = 28418;
pub const IDR_WEBUI_JS_FIND_SHORTCUT_BEHAVIOR: i32 = 28419;
pub const IDR_WEBUI_JS_LIST_PROPERTY_UPDATE_BEHAVIOR: i32 = 28420;
pub const IDR_WEBUI_JS_POLYMER_CONFIG: i32 = 28421;
pub const IDR_WEBUI_JS_WEBUI_LISTENER_BEHAVIOR: i32 = 28422;
pub const IDR_WEBUI_JS_SEARCH_HIGHLIGHT_UTILS: i32 = 28423;
pub const IDR_WEBUI_JS_SUBPAGE_LOADER: i32 = 28424;
pub const IDR_POLYMER_1_0_FONT_ROBOTO_ROBOTO_HTML: i32 = 28425;
pub const IDR_POLYMER_1_0_HTML_IMPORTS_HTML_IMPORTS_MIN_JS: i32 = 28426;
pub const IDR_POLYMER_1_0_IRON_A11Y_ANNOUNCER_IRON_A11Y_ANNOUNCER_EXTRACTED_JS: i32 = 28428;
pub const IDR_POLYMER_1_0_IRON_A11Y_ANNOUNCER_IRON_A11Y_ANNOUNCER_HTML: i32 = 28429;
pub const IDR_POLYMER_1_0_IRON_A11Y_KEYS_BEHAVIOR_IRON_A11Y_KEYS_BEHAVIOR_EXTRACTED_JS: i32 = 28430;
pub const IDR_POLYMER_1_0_IRON_A11Y_KEYS_BEHAVIOR_IRON_A11Y_KEYS_BEHAVIOR_HTML: i32 = 28431;
pub const IDR_POLYMER_1_0_IRON_A11Y_KEYS_IRON_A11Y_KEYS_EXTRACTED_JS: i32 = 28432;
pub const IDR_POLYMER_1_0_IRON_A11Y_KEYS_IRON_A11Y_KEYS_HTML: i32 = 28433;
pub const IDR_POLYMER_1_0_IRON_BEHAVIORS_IRON_BUTTON_STATE_EXTRACTED_JS: i32 = 28434;
pub const IDR_POLYMER_1_0_IRON_BEHAVIORS_IRON_BUTTON_STATE_HTML: i32 = 28435;
pub const IDR_POLYMER_1_0_IRON_BEHAVIORS_IRON_CONTROL_STATE_EXTRACTED_JS: i32 = 28436;
pub const IDR_POLYMER_1_0_IRON_BEHAVIORS_IRON_CONTROL_STATE_HTML: i32 = 28437;
pub const IDR_POLYMER_1_0_IRON_COLLAPSE_IRON_COLLAPSE_EXTRACTED_JS: i32 = 28438;
pub const IDR_POLYMER_1_0_IRON_COLLAPSE_IRON_COLLAPSE_HTML: i32 = 28439;
pub const IDR_POLYMER_1_0_IRON_FIT_BEHAVIOR_IRON_FIT_BEHAVIOR_EXTRACTED_JS: i32 = 28444;
pub const IDR_POLYMER_1_0_IRON_FIT_BEHAVIOR_IRON_FIT_BEHAVIOR_HTML: i32 = 28445;
pub const IDR_POLYMER_1_0_IRON_FLEX_LAYOUT_IRON_FLEX_LAYOUT_CLASSES_HTML: i32 = 28446;
pub const IDR_POLYMER_1_0_IRON_FLEX_LAYOUT_IRON_FLEX_LAYOUT_HTML: i32 = 28447;
pub const IDR_POLYMER_1_0_IRON_ICON_IRON_ICON_EXTRACTED_JS: i32 = 28448;
pub const IDR_POLYMER_1_0_IRON_ICON_IRON_ICON_HTML: i32 = 28449;
pub const IDR_POLYMER_1_0_IRON_ICONSET_SVG_IRON_ICONSET_SVG_EXTRACTED_JS: i32 = 28450;
pub const IDR_POLYMER_1_0_IRON_ICONSET_SVG_IRON_ICONSET_SVG_HTML: i32 = 28451;
pub const IDR_POLYMER_1_0_IRON_LIST_IRON_LIST_EXTRACTED_JS: i32 = 28454;
pub const IDR_POLYMER_1_0_IRON_LIST_IRON_LIST_HTML: i32 = 28455;
pub const IDR_POLYMER_1_0_IRON_LOCATION_IRON_LOCATION_EXTRACTED_JS: i32 = 28456;
pub const IDR_POLYMER_1_0_IRON_LOCATION_IRON_LOCATION_HTML: i32 = 28457;
pub const IDR_POLYMER_1_0_IRON_LOCATION_IRON_QUERY_PARAMS_EXTRACTED_JS: i32 = 28458;
pub const IDR_POLYMER_1_0_IRON_LOCATION_IRON_QUERY_PARAMS_HTML: i32 = 28459;
pub const IDR_POLYMER_1_0_IRON_MEDIA_QUERY_IRON_MEDIA_QUERY_EXTRACTED_JS: i32 = 28460;
pub const IDR_POLYMER_1_0_IRON_MEDIA_QUERY_IRON_MEDIA_QUERY_HTML: i32 = 28461;
pub const IDR_POLYMER_1_0_IRON_META_IRON_META_EXTRACTED_JS: i32 = 28462;
pub const IDR_POLYMER_1_0_IRON_META_IRON_META_HTML: i32 = 28463;
pub const IDR_POLYMER_1_0_IRON_PAGES_IRON_PAGES_EXTRACTED_JS: i32 = 28474;
pub const IDR_POLYMER_1_0_IRON_PAGES_IRON_PAGES_HTML: i32 = 28475;
pub const IDR_POLYMER_1_0_IRON_RANGE_BEHAVIOR_IRON_RANGE_BEHAVIOR_EXTRACTED_JS: i32 = 28476;
pub const IDR_POLYMER_1_0_IRON_RANGE_BEHAVIOR_IRON_RANGE_BEHAVIOR_HTML: i32 = 28477;
pub const IDR_POLYMER_1_0_IRON_RESIZABLE_BEHAVIOR_IRON_RESIZABLE_BEHAVIOR_EXTRACTED_JS: i32 = 28478;
pub const IDR_POLYMER_1_0_IRON_RESIZABLE_BEHAVIOR_IRON_RESIZABLE_BEHAVIOR_HTML: i32 = 28479;
pub const IDR_POLYMER_1_0_IRON_SCROLL_TARGET_BEHAVIOR_IRON_SCROLL_TARGET_BEHAVIOR_EXTRACTED_JS:
    i32 = 28480;
pub const IDR_POLYMER_1_0_IRON_SCROLL_TARGET_BEHAVIOR_IRON_SCROLL_TARGET_BEHAVIOR_HTML: i32 = 28481;
pub const IDR_POLYMER_1_0_IRON_SCROLL_THRESHOLD_IRON_SCROLL_THRESHOLD_EXTRACTED_JS: i32 = 28482;
pub const IDR_POLYMER_1_0_IRON_SCROLL_THRESHOLD_IRON_SCROLL_THRESHOLD_HTML: i32 = 28483;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_MULTI_SELECTABLE_EXTRACTED_JS: i32 = 28484;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_MULTI_SELECTABLE_HTML: i32 = 28485;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTABLE_EXTRACTED_JS: i32 = 28486;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTABLE_HTML: i32 = 28487;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTION_EXTRACTED_JS: i32 = 28488;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTION_HTML: i32 = 28489;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTOR_EXTRACTED_JS: i32 = 28490;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTOR_HTML: i32 = 28491;
pub const IDR_POLYMER_1_0_NEON_ANIMATION_WEB_ANIMATIONS_HTML: i32 = 28508;
pub const IDR_POLYMER_1_0_PAPER_BEHAVIORS_PAPER_RIPPLE_BEHAVIOR_EXTRACTED_JS: i32 = 28509;
pub const IDR_POLYMER_1_0_PAPER_BEHAVIORS_PAPER_RIPPLE_BEHAVIOR_HTML: i32 = 28510;
pub const IDR_POLYMER_1_0_PAPER_PROGRESS_PAPER_PROGRESS_EXTRACTED_JS: i32 = 28517;
pub const IDR_POLYMER_1_0_PAPER_PROGRESS_PAPER_PROGRESS_HTML: i32 = 28518;
pub const IDR_POLYMER_1_0_PAPER_RIPPLE_PAPER_RIPPLE_EXTRACTED_JS: i32 = 28519;
pub const IDR_POLYMER_1_0_PAPER_RIPPLE_PAPER_RIPPLE_HTML: i32 = 28520;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_BEHAVIOR_EXTRACTED_JS: i32 = 28521;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_BEHAVIOR_HTML: i32 = 28522;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_LITE_EXTRACTED_JS: i32 = 28523;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_LITE_HTML: i32 = 28524;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_STYLES_HTML: i32 = 28525;
pub const IDR_POLYMER_1_0_PAPER_STYLES_CLASSES_SHADOW_HTML: i32 = 28526;
pub const IDR_POLYMER_1_0_PAPER_STYLES_CLASSES_TYPOGRAPHY_HTML: i32 = 28527;
pub const IDR_POLYMER_1_0_PAPER_STYLES_COLOR_HTML: i32 = 28528;
pub const IDR_POLYMER_1_0_PAPER_STYLES_DEFAULT_THEME_HTML: i32 = 28529;
pub const IDR_POLYMER_1_0_PAPER_STYLES_ELEMENT_STYLES_PAPER_MATERIAL_STYLES_HTML: i32 = 28530;
pub const IDR_POLYMER_1_0_PAPER_STYLES_SHADOW_HTML: i32 = 28531;
pub const IDR_POLYMER_1_0_PAPER_STYLES_TYPOGRAPHY_HTML: i32 = 28532;
pub const IDR_POLYMER_1_0_PAPER_TOOLTIP_PAPER_TOOLTIP_EXTRACTED_JS: i32 = 28533;
pub const IDR_POLYMER_1_0_PAPER_TOOLTIP_PAPER_TOOLTIP_HTML: i32 = 28534;
pub const IDR_POLYMER_1_0_POLYMER2_POLYMER_EXTRACTED_JS: i32 = 28541;
pub const IDR_POLYMER_1_0_POLYMER2_POLYMER_HTML: i32 = 28542;
pub const IDR_POLYMER_1_0_WEB_ANIMATIONS_JS_WEB_ANIMATIONS_NEXT_LITE_MIN_JS: i32 = 28543;
pub const IDS_TEXT_FILES: i32 = 32000;
pub const IDS_CONTENT_CONTEXT_NO_SPELLING_SUGGESTIONS: i32 = 32001;
pub const IDS_SETTINGS_ABOUT_PROGRAM: i32 = 400;
pub const IDS_SETTINGS_GET_HELP_USING_CHROME: i32 = 401;
pub const IDS_SETTINGS_UPGRADE_UPDATING: i32 = 402;
pub const IDS_SETTINGS_UPGRADE_UPDATING_PERCENT: i32 = 403;
pub const IDS_SETTINGS_UPGRADE_SUCCESSFUL_RELAUNCH: i32 = 404;
pub const IDS_SETTINGS_UPGRADE_UP_TO_DATE: i32 = 405;
pub const IDS_SETTINGS_SITE_SETTINGS_DELETE_DATA_POST_SESSION: i32 = 408;
pub const IDS_SETTINGS_GOOGLE_PAYMENTS_CACHED: i32 = 409;
pub const IDS_SETTINGS_DEFAULT_BROWSER_DEFAULT: i32 = 410;
pub const IDS_SETTINGS_DEFAULT_BROWSER_MAKE_DEFAULT: i32 = 411;
pub const IDS_SETTINGS_DEFAULT_BROWSER_ERROR: i32 = 412;
pub const IDS_SETTINGS_DEFAULT_BROWSER_SECONDARY: i32 = 413;
pub const IDS_SETTINGS_IMPROVE_BROWSING_EXPERIENCE: i32 = 414;
pub const IDS_SETTINGS_SPELLING_DESCRIPTION_UNIFIED_CONSENT: i32 = 415;
pub const IDS_SETTINGS_RESTART_TO_APPLY_CHANGES: i32 = 416;
pub const IDS_SETTINGS_SIGNIN_ALLOWED: i32 = 417;
pub const IDS_SETTINGS_SIGNIN_ALLOWED_DESC: i32 = 418;
pub const IDS_SETTINGS_SYNC_DISCONNECT_DELETE_PROFILE_WARNING_WITH_COUNTS_SINGULAR: i32 = 419;
pub const IDS_SETTINGS_SYNC_DISCONNECT_DELETE_PROFILE_WARNING_WITH_COUNTS_PLURAL: i32 = 420;
pub const IDS_SETTINGS_SYNC_DISCONNECT_DELETE_PROFILE_WARNING_WITHOUT_COUNTS: i32 = 421;
pub const IDS_SETTINGS_PROFILE_NAME_AND_PICTURE: i32 = 422;
pub const IDS_SETTINGS_PEOPLE_SIGN_IN_PROMPT_SECONDARY_WITH_ACCOUNT: i32 = 423;
pub const IDS_SETTINGS_SYNC_SIGNIN: i32 = 424;
pub const IDS_SETTINGS_SYNC_DATA_ENCRYPTED_TEXT: i32 = 425;
pub const IDS_SETTINGS_SYNC_DISCONNECT_TITLE: i32 = 426;
pub const IDS_DRIVE_SUGGEST_PREF_DESC: i32 = 427;
pub const IDS_SETTINGS_SYNC_SIGN_IN_PROMPT_WITH_NO_ACCOUNT: i32 = 428;
pub const IDS_SETTINGS_SYNC_SIGN_IN_PROMPT_WITH_ACCOUNT: i32 = 429;
pub const IDS_SETTINGS_LANGUAGES_IS_DISPLAYED_IN_THIS_LANGUAGE: i32 = 430;
pub const IDS_SETTINGS_LANGUAGES_DISPLAY_IN_THIS_LANGUAGE: i32 = 431;
pub const IDS_SETTINGS_SYSTEM_BACKGROUND_APPS_LABEL: i32 = 432;
pub const IDS_SETTINGS_RESET_PROFILE_FEEDBACK: i32 = 433;
pub const IDS_PROFILES_DISCONNECT_MANAGED_PROFILE_TEXT: i32 = 434;
pub const IDS_PRODUCT_NAME: i32 = 169;
pub const IDS_SHORT_PRODUCT_NAME: i32 = 435;
pub const IDS_SXS_SHORTCUT_NAME: i32 = 436;
pub const IDS_SHORTCUT_NAME_BETA: i32 = 437;
pub const IDS_SHORTCUT_NAME_DEV: i32 = 438;
pub const IDS_PRODUCT_DESCRIPTION: i32 = 439;
pub const IDS_SHORT_PRODUCT_LOGO_ALT_TEXT: i32 = 442;
pub const IDS_PRODUCT_LOGO_ENTERPRISE_ALT_TEXT: i32 = 443;
pub const IDS_SHORTCUT_NEW_WINDOW: i32 = 444;
pub const IDS_BOOKMARK_SYNC_PROMO_LINK: i32 = 445;
pub const IDS_TASK_MANAGER_TITLE: i32 = 446;
pub const IDS_SESSION_CRASHED_VIEW_UMA_OPTIN: i32 = 447;
pub const IDS_BROWSER_WINDOW_TITLE_FORMAT: i32 = 222;
pub const IDS_ACCESSIBLE_BROWSER_WINDOW_TITLE_FORMAT: i32 = 448;
pub const IDS_ACCESSIBLE_BETA_BROWSER_WINDOW_TITLE_FORMAT: i32 = 449;
pub const IDS_ACCESSIBLE_DEV_BROWSER_WINDOW_TITLE_FORMAT: i32 = 450;
pub const IDS_ACCESSIBLE_CANARY_BROWSER_WINDOW_TITLE_FORMAT: i32 = 451;
pub const IDS_GET_HELP_USING_CHROME: i32 = 452;
pub const IDS_ABOUT_VERSION_COMPANY_NAME: i32 = 453;
pub const IDS_ABOUT_VERSION_COPYRIGHT: i32 = 454;
pub const IDS_ABOUT_TERMS_OF_SERVICE: i32 = 458;
pub const IDS_WIN_XP_VISTA_OBSOLETE: i32 = 460;
pub const IDS_ACCNAME_APP: i32 = 214;
pub const IDS_BROWSER_HUNGBROWSER_MESSAGE: i32 = 461;
pub const IDS_UNINSTALL_CLOSE_APP: i32 = 462;
pub const IDS_UNINSTALL_VERIFY: i32 = 463;
pub const IDS_UNINSTALL_CHROME: i32 = 464;
pub const IDS_FR_CUSTOMIZE_DEFAULT_BROWSER: i32 = 465;
pub const IDS_STATUS_TRAY_KEEP_CHROME_RUNNING_IN_BACKGROUND: i32 = 467;
pub const IDS_CANT_WRITE_USER_DIRECTORY_SUMMARY: i32 = 468;
pub const IDS_PROFILE_TOO_NEW_ERROR: i32 = 470;
pub const IDS_PREFERENCES_UNREADABLE_ERROR: i32 = 471;
pub const IDS_PREFERENCES_CORRUPT_ERROR: i32 = 472;
pub const IDS_CRASH_RECOVERY_TITLE: i32 = 178;
pub const IDS_CRASH_RECOVERY_CONTENT: i32 = 179;
pub const IDS_PASSWORD_GENERATION_PROMPT: i32 = 473;
pub const IDS_PASSWORD_MANAGER_TITLE_BRAND: i32 = 474;
pub const IDS_PASSWORDS_PAGE_AUTHENTICATION_PROMPT: i32 = 475;
pub const IDS_PASSWORDS_PAGE_EXPORT_AUTHENTICATION_PROMPT: i32 = 476;
pub const IDS_INSTALL_HIGHER_VERSION: i32 = 477;
pub const IDS_INSTALL_FAILED: i32 = 478;
pub const IDS_SAME_VERSION_REPAIR_FAILED: i32 = 479;
pub const IDS_SETUP_PATCH_FAILED: i32 = 480;
pub const IDS_INSTALL_OS_NOT_SUPPORTED: i32 = 481;
pub const IDS_INSTALL_OS_ERROR: i32 = 482;
pub const IDS_INSTALL_SINGLETON_ACQUISITION_FAILED: i32 = 483;
pub const IDS_INSTALL_TEMP_DIR_FAILED: i32 = 484;
pub const IDS_INSTALL_UNCOMPRESSION_FAILED: i32 = 485;
pub const IDS_INSTALL_INVALID_ARCHIVE: i32 = 486;
pub const IDS_INSTALL_INSUFFICIENT_RIGHTS: i32 = 487;
pub const IDS_INSTALL_EXISTING_VERSION_LAUNCHED: i32 = 488;
pub const IDS_SHORTCUT_TOOLTIP: i32 = 489;
pub const IDS_UNINSTALL_DELETE_PROFILE: i32 = 490;
pub const IDS_UNINSTALL_SET_DEFAULT_BROWSER: i32 = 491;
pub const IDS_UNINSTALL_BUTTON_TEXT: i32 = 492;
pub const IDS_DEFAULT_BROWSER_INFOBAR_TEXT: i32 = 493;
pub const IDS_TRY_TOAST_HEADING: i32 = 495;
pub const IDS_TRY_TOAST_HEADING2: i32 = 496;
pub const IDS_TRY_TOAST_HEADING3: i32 = 497;
pub const IDS_TRY_TOAST_HEADING4: i32 = 498;
pub const IDS_TRY_TOAST_HEADING_SKYPE: i32 = 499;
pub const IDS_PRINT_PREVIEW_NO_PLUGIN: i32 = 500;
pub const IDS_DOWNLOAD_STATUS_CRX_INSTALL_RUNNING: i32 = 501;
pub const IDS_PROMPT_DOWNLOAD_CHANGES_SETTINGS: i32 = 502;
pub const IDS_PROMPT_MALICIOUS_DOWNLOAD_URL: i32 = 503;
pub const IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT: i32 = 504;
pub const IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD: i32 = 505;
pub const IDS_BLOCK_REASON_UNWANTED_DOWNLOAD: i32 = 506;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_BROWSER_MESSAGE: i32 = 507;
pub const IDS_MISSING_GOOGLE_API_KEYS: i32 = 509;
pub const IDS_UPGRADE_SUCCESSFUL_RELAUNCH: i32 = 510;
pub const IDS_UPGRADE_UP_TO_DATE: i32 = 512;
pub const IDS_UPGRADE_UPDATING: i32 = 513;
pub const IDS_EXTENSION_INSTALLED_HEADING: i32 = 515;
pub const IDS_EXTENSION_INSTALLED_SYNC_PROMO_LINK_NEW: i32 = 516;
pub const IDS_EXTENSION_UNINSTALL_PROMPT_REMOVE_DATA_CHECKBOX: i32 = 517;
pub const IDS_EXTENSIONS_HIDE_BUTTON_IN_MENU: i32 = 518;
pub const IDS_REPORT_BUBBLE_TEXT: i32 = 519;
pub const IDS_EXTENSIONS_INCOGNITO_WARNING: i32 = 520;
pub const IDS_EXTENSIONS_UNINSTALL: i32 = 521;
pub const IDS_EXTENSIONS_SHORTCUT_SCOPE_IN_CHROME: i32 = 522;
pub const IDS_EXTENSIONS_MULTIPLE_UNSUPPORTED_DISABLED_BODY: i32 = 523;
pub const IDS_EXTENSIONS_SINGLE_UNSUPPORTED_DISABLED_BODY: i32 = 524;
pub const IDS_APPMENU_TOOLTIP: i32 = 215;
pub const IDS_APPMENU_TOOLTIP_UPDATE_AVAILABLE: i32 = 525;
pub const IDS_APPMENU_TOOLTIP_ALERT: i32 = 526;
pub const IDS_OPEN_IN_CHROME: i32 = 527;
pub const IDS_ABOUT: i32 = 528;
pub const IDS_UPDATE_NOW: i32 = 529;
pub const IDS_CHROME_SIGNIN_TITLE: i32 = 534;
pub const IDS_PROFILES_DICE_SYNC_PROMO: i32 = 535;
pub const IDS_PROFILES_CONFIRM_SIGNIN_TUTORIAL_TITLE: i32 = 536;
pub const IDS_PROFILES_WELCOME_UPGRADE_TUTORIAL_TITLE: i32 = 537;
pub const IDS_PROFILES_WELCOME_UPGRADE_TUTORIAL_CONTENT_TEXT: i32 = 538;
pub const IDS_PROFILES_ACCOUNT_REMOVAL_TEXT: i32 = 539;
pub const IDS_PROFILES_PRIMARY_ACCOUNT_REMOVAL_TEXT: i32 = 540;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_TITLE_NEW: i32 = 541;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_MESSAGE_NEW: i32 = 542;
pub const IDS_ONE_CLICK_SIGNIN_BUBBLE_SYNC_DISABLED_MESSAGE: i32 = 543;
pub const IDS_SYNC_WRONG_EMAIL: i32 = 544;
pub const IDS_ONE_CLICK_SIGNIN_CONFIRM_EMAIL_DIALOG_MESSAGE: i32 = 545;
pub const IDS_SYNC_USED_PROFILE_ERROR: i32 = 546;
pub const IDS_ENTERPRISE_SIGNIN_TITLE: i32 = 547;
pub const IDS_ENTERPRISE_SIGNIN_EXPLANATION_WITHOUT_PROFILE_CREATION: i32 = 548;
pub const IDS_ENTERPRISE_SIGNIN_EXPLANATION_WITH_PROFILE_CREATION: i32 = 549;
pub const IDS_ABOUT_BROWSER_SWITCH_DESCRIPTION_UNKNOWN_BROWSER: i32 = 550;
pub const IDS_ABOUT_BROWSER_SWITCH_DESCRIPTION_KNOWN_BROWSER: i32 = 551;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_TITLE: i32 = 552;
pub const IDS_CHROME_CLEANUP_PROMPT_EXPLANATION: i32 = 553;
pub const IDS_SYNC_PASSPHRASE_ERROR_BUBBLE_VIEW_MESSAGE: i32 = 554;
pub const IDS_SYNC_SIGN_IN_ERROR_BUBBLE_VIEW_MESSAGE: i32 = 555;
pub const IDS_SYNC_UNAVAILABLE_ERROR_BUBBLE_VIEW_MESSAGE: i32 = 556;
pub const IDS_SYNC_OTHER_SIGN_IN_ERROR_BUBBLE_VIEW_MESSAGE: i32 = 557;
pub const IDS_SYNC_PAUSED_REASON_CLEAR_COOKIES_ON_EXIT: i32 = 559;
pub const IDS_SYNC_PAUSED_REASON_CLEAR_COOKIES_ON_EXIT_LINK_TEXT: i32 = 560;
pub const IDS_APP_SHORTCUTS_SUBDIR_NAME: i32 = 567;
pub const IDS_APP_SHORTCUTS_SUBDIR_NAME_CANARY: i32 = 568;
pub const IDS_APP_SHORTCUTS_SUBDIR_NAME_BETA: i32 = 569;
pub const IDS_APP_SHORTCUTS_SUBDIR_NAME_DEV: i32 = 570;
pub const IDS_MEDIA_STREAM_STATUS_TRAY_TEXT_AUDIO_AND_VIDEO: i32 = 572;
pub const IDS_MEDIA_STREAM_STATUS_TRAY_TEXT_AUDIO_ONLY: i32 = 573;
pub const IDS_MEDIA_STREAM_STATUS_TRAY_TEXT_VIDEO_ONLY: i32 = 574;
pub const IDS_SUPERVISED_USER_CREATED_TEXT: i32 = 577;
pub const IDS_SUPERVISED_USERS_DEPRECATED_MESSAGE: i32 = 578;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_SYNC: i32 = 579;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_INTRO_TITLE: i32 = 580;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_INTRO_TEXT: i32 = 581;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_YOUR_CHROME_TITLE: i32 = 582;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_YOUR_CHROME_TEXT: i32 = 583;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_GUEST_TEXT: i32 = 584;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_FRIENDS_TEXT: i32 = 585;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_TEXT: i32 = 586;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_ADD_USER: i32 = 587;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_START_PAGES_SPECIFIC: i32 = 588;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_START_PAGES: i32 = 589;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_START_PAGES: i32 = 590;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_START_AND_HOME: i32 = 591;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_START_AND_SEARCH: i32 = 592;
pub const IDS_WEBSTORE_APP_DESCRIPTION: i32 = 172;
pub const IDS_INBOUND_MDNS_RULE_NAME: i32 = 593;
pub const IDS_INBOUND_MDNS_RULE_NAME_BETA: i32 = 594;
pub const IDS_INBOUND_MDNS_RULE_NAME_CANARY: i32 = 595;
pub const IDS_INBOUND_MDNS_RULE_NAME_DEV: i32 = 596;
pub const IDS_INBOUND_MDNS_RULE_DESCRIPTION: i32 = 597;
pub const IDS_INBOUND_MDNS_RULE_DESCRIPTION_BETA: i32 = 598;
pub const IDS_INBOUND_MDNS_RULE_DESCRIPTION_CANARY: i32 = 599;
pub const IDS_INBOUND_MDNS_RULE_DESCRIPTION_DEV: i32 = 600;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_BUBBLE_TEXT: i32 = 601;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_BUBBLE_TEXT_ONCE: i32 = 602;
pub const IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_TEXT: i32 = 603;
pub const IDS_CONTENT_CONTEXT_OPENLINKNEWTAB_INAPP: i32 = 604;
pub const IDS_CONTENT_CONTEXT_OPENLINKOFFTHERECORD_INAPP: i32 = 605;
pub const IDS_RESET_PROFILE_SETTINGS_FEEDBACK: i32 = 606;
pub const IDS_UPDATE_RECOMMENDED_DIALOG_TITLE: i32 = 607;
pub const IDS_UPDATE_RECOMMENDED: i32 = 608;
pub const IDS_RELAUNCH_AND_UPDATE: i32 = 609;
pub const IDS_UPDATE_OTHER_INSTANCES_SAME_USER_DIALOG_TITLE: i32 = 610;
pub const IDS_UPDATE_OTHER_INSTANCES_SAME_USER_DIALOG_MESSAGE: i32 = 611;
pub const IDS_UPDATE_OTHER_INSTANCES_OTHER_USER_AUTHENTICATION_PROMPT: i32 = 612;
pub const IDS_REINSTALL_APP: i32 = 613;
pub const IDS_UPGRADE_BUBBLE_MENU_ITEM: i32 = 614;
pub const IDS_UPGRADE_BUBBLE_TITLE: i32 = 615;
pub const IDS_UPGRADE_BUBBLE_TEXT: i32 = 616;
pub const IDS_SYNC_ERROR_USER_MENU_UPGRADE_MESSAGE: i32 = 617;
pub const IDS_SYNC_ERROR_USER_MENU_UPGRADE_BUTTON: i32 = 618;
pub const IDS_SYNC_UPGRADE_CLIENT: i32 = 619;
pub const IDS_SYNC_UPGRADE_CLIENT_LINK_LABEL: i32 = 620;
pub const IDS_RECOVERY_BUBBLE_TITLE: i32 = 621;
pub const IDS_RUN_RECOVERY: i32 = 622;
pub const IDS_RECOVERY_BUBBLE_TEXT: i32 = 623;
pub const IDS_CRITICAL_NOTIFICATION_TITLE: i32 = 624;
pub const IDS_CRITICAL_NOTIFICATION_TITLE_ALTERNATE: i32 = 625;
pub const IDS_CRITICAL_NOTIFICATION_TEXT: i32 = 626;
pub const IDS_FEEDBACK_SERVICE_DIALOG_TITLE: i32 = 627;
pub const IDS_FEEDBACK_SERVICE_DIALOG_EXPLANATION: i32 = 628;
pub const IDS_DESKTOP_MEDIA_PICKER_SOURCE_TYPE_TAB: i32 = 629;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TEXT: i32 = 631;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TEXT_WITH_PHONE_NUMBER: i32 = 632;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TEXT_V2: i32 = 633;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TEXT_WITH_PHONE_NUMBER_V2: i32 = 634;
pub const IDS_FOOTNOTE_DESKTOP_TO_IOS_PROMO_LINK: i32 = 635;
pub const IDS_METRO_FLOW_TAB_TITLE: i32 = 648;
pub const IDS_METRO_FLOW_TITLE_SHORT: i32 = 649;
pub const IDS_WELCOME_HEADER: i32 = 650;
pub const IDS_WIN_NOTIFICATION_SETTINGS_CONTEXT_MENU_ITEM_NAME: i32 = 651;
pub const IDS_RELAUNCH_RECOMMENDED_TITLE: i32 = 652;
pub const IDS_RELAUNCH_RECOMMENDED_BODY: i32 = 653;
pub const IDS_RELAUNCH_REQUIRED_TITLE_DAYS: i32 = 654;
pub const IDS_RELAUNCH_REQUIRED_TITLE_HOURS: i32 = 655;
pub const IDS_RELAUNCH_REQUIRED_TITLE_MINUTES: i32 = 656;
pub const IDS_RELAUNCH_REQUIRED_TITLE_SECONDS: i32 = 657;
pub const IDS_RELAUNCH_REQUIRED_BODY: i32 = 658;
pub const IDS_ENTERPRISE_STARTUP_CLOUD_POLICY_ENROLLMENT_TOOLTIP: i32 = 659;
pub const IDS_ENTERPRISE_STARTUP_CLOUD_POLICY_ENROLLMENT_ERROR: i32 = 660;
pub const IDS_ENTERPRISE_STARTUP_RELAUNCH_BUTTON: i32 = 661;
pub const IDS_ENTERPRISE_STARTUP_CANCEL_BUTTON: i32 = 662;
pub const IDS_DESKTOP_MEDIA_PICKER_TITLE_WEB_CONTENTS_ONLY: i32 = 663;
pub const IDS_HATS_BUBBLE_TITLE: i32 = 664;
pub const IDS_JAVASCRIPT_MESSAGEBOX_TITLE: i32 = 15100;
pub const IDS_JAVASCRIPT_MESSAGEBOX_TITLE_IFRAME: i32 = 15101;
pub const IDS_JAVASCRIPT_MESSAGEBOX_TITLE_NONSTANDARD_URL: i32 = 15102;
pub const IDS_JAVASCRIPT_MESSAGEBOX_TITLE_NONSTANDARD_URL_IFRAME: i32 = 15103;
pub const IDS_JAVASCRIPT_MESSAGEBOX_SUPPRESS_OPTION: i32 = 15104;
pub const IDS_BEFOREUNLOAD_MESSAGEBOX_TITLE: i32 = 15105;
pub const IDS_BEFOREUNLOAD_APP_MESSAGEBOX_TITLE: i32 = 15106;
pub const IDS_BEFOREUNLOAD_MESSAGEBOX_OK_BUTTON_LABEL: i32 = 15107;
pub const IDS_BEFOREUNLOAD_MESSAGEBOX_MESSAGE: i32 = 15108;
pub const IDS_BEFORERELOAD_MESSAGEBOX_TITLE: i32 = 15109;
pub const IDS_BEFORERELOAD_APP_MESSAGEBOX_TITLE: i32 = 15110;
pub const IDS_BEFORERELOAD_MESSAGEBOX_OK_BUTTON_LABEL: i32 = 15111;
pub const IDS_AUTOFILL_SIGNIN_PROMO_MESSAGE: i32 = 15121;
pub const IDS_AUTOFILL_SYNC_PROMO_MESSAGE: i32 = 15122;
pub const IDS_AUTOFILL_SIGNIN_PROMO_MESSAGE_DICE_DISABLED: i32 = 15123;
pub const IDS_AUTOFILL_SIGNIN_PROMO_LINK_DICE_DISABLED: i32 = 15124;
pub const IDS_AUTOFILL_NO_THANKS_DESKTOP_LOCAL_SAVE: i32 = 15125;
pub const IDS_AUTOFILL_NO_THANKS_DESKTOP_UPLOAD_SAVE: i32 = 15126;
pub const IDS_AUTOFILL_FIELD_LABEL_PHONE: i32 = 15133;
pub const IDS_AUTOFILL_FIELD_LABEL_BILLING_ADDRESS: i32 = 15134;
pub const IDS_AUTOFILL_SAVE_CARD_BUBBLE_LOCAL_SAVE_ACCEPT: i32 = 15136;
pub const IDS_AUTOFILL_SAVE_CARD_BUBBLE_UPLOAD_SAVE_ACCEPT: i32 = 15137;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_CONTINUE: i32 = 15139;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_LOCAL: i32 = 15140;
pub const IDS_AUTOFILL_FIX_FLOW_PROMPT_SAVE_CARD_LABEL: i32 = 15141;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD: i32 = 15142;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_V3: i32 = 15143;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_V4: i32 = 15144;
pub const IDS_AUTOFILL_CARD_SAVED: i32 = 15145;
pub const IDS_AUTOFILL_MANAGE_CARDS: i32 = 15146;
pub const IDS_AUTOFILL_DONE: i32 = 15147;
pub const IDS_AUTOFILL_FAILURE_BUBBLE_TITLE: i32 = 15148;
pub const IDS_AUTOFILL_FAILURE_BUBBLE_EXPLANATION: i32 = 15149;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION: i32 = 15150;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_V3: i32 = 15151;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_V3_WITH_DEVICE: i32 = 15152;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_V3_WITH_NAME: i32 = 15153;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_V3_WITH_NAME_AND_DEVICE: i32 = 15154;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_CARDHOLDER_NAME: i32 = 15155;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_CARDHOLDER_NAME_TOOLTIP: i32 = 15156;
pub const IDS_AUTOFILL_SAVE_CARD_CARDHOLDER_NAME_FIX_FLOW_HEADER: i32 = 15157;
pub const IDS_AUTOFILL_SAVE_CARD_UPDATE_EXPIRATION_DATE_TITLE: i32 = 15158;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_TOOLTIP: i32 = 15159;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_AND_CARDHOLDER_NAME_TOOLTIP: i32 = 15160;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_COPY_TEST_STORE_CARD: i32 = 15161;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_COPY_TEST_STORE_BILLING_DETAILS: i32 = 15162;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_COPY_TEST_ADD_CARD: i32 = 15163;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_COPY_TEST_CONFIRM_AND_SAVE_CARD: i32 = 15164;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_STORE_WITH_DEVICE: i32 = 15165;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_ADD_CARD_WITH_DEVICE: i32 =
    15166;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_CONFIRM_AND_SAVE_CARD_WITH_DEVICE : i32 = 15167 ;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_STORE: i32 = 15168;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_ADD_CARD: i32 = 15169;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_CONFIRM_AND_SAVE_CARD: i32 =
    15170;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_ACCEPT_COPY_TEST_STORE: i32 = 15171;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_DECLINE_COPY_TEST_STORE: i32 = 15172;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_ACCEPT_COPY_TEST_ADD: i32 = 15173;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_DECLINE_COPY_TEST_ADD: i32 = 15174;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_ACCEPT_COPY_TEST_CONFIRM_AND_SAVE: i32 = 15175;
pub const IDS_AUTOFILL_GOOGLE_PAY_LOGO_ACCESSIBLE_NAME: i32 = 15176;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_ANIMATION_LABEL: i32 = 15177;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_BUBBLE_TITLE: i32 = 15178;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_BUBBLE_BUTTON_LABEL: i32 = 15179;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_BUBBLE_BODY_TEXT: i32 = 15180;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TITLE_OFFER: i32 = 15181;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TITLE_DONE: i32 = 15182;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TITLE_FIX: i32 = 15183;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_CHECKBOX_UNCHECK_WARNING: i32 = 15184;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_OFFER: i32 = 15185;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_DONE: i32 = 15186;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_ERROR: i32 = 15187;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_FIX: i32 = 15188;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_INVALID_CARD_REMOVED: i32 = 15189;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_SAVE: i32 = 15190;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_CANCEL: i32 = 15191;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_DONE: i32 = 15192;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_VIEW_CARDS: i32 = 15193;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_LABEL_INVALID_CARDS: i32 = 15194;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TRASH_CAN_BUTTON_TOOLTIP: i32 = 15195;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_ERROR_TRY_AGAIN_CVC: i32 = 15196;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_ERROR_PERMANENT: i32 = 15201;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_ERROR_NETWORK: i32 = 15202;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_TITLE: i32 = 15203;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_EXPIRED_TITLE: i32 = 15204;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_INSTRUCTIONS: i32 = 15205;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_INSTRUCTIONS_LOCAL_CARD: i32 = 15206;
pub const IDS_AUTOFILL_CARD_UNMASK_CVC_IMAGE_DESCRIPTION: i32 = 15207;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_STORAGE_CHECKBOX: i32 = 15210;
pub const IDS_AUTOFILL_CARD_UNMASK_CONFIRM_BUTTON: i32 = 15212;
pub const IDS_AUTOFILL_CARD_UNMASK_EXPIRATION_MONTH: i32 = 15213;
pub const IDS_AUTOFILL_CARD_UNMASK_EXPIRATION_YEAR: i32 = 15214;
pub const IDS_AUTOFILL_CARD_UNMASK_VERIFICATION_IN_PROGRESS: i32 = 15215;
pub const IDS_AUTOFILL_CARD_UNMASK_VERIFICATION_SUCCESS: i32 = 15216;
pub const IDS_AUTOFILL_CARD_UNMASK_INVALID_EXPIRATION_DATE: i32 = 15217;
pub const IDS_AUTOFILL_EXPIRATION_DATE_SEPARATOR: i32 = 15218;
pub const IDS_AUTOFILL_CARD_UNMASK_NEW_CARD_LINK: i32 = 15219;
pub const IDS_AUTOFILL_DIALOG_PLACEHOLDER_CVC: i32 = 15220;
pub const IDS_AUTOFILL_WALLET_MANAGEMENT_LINK_TEXT: i32 = 15221;
pub const IDS_AUTOFILL_FROM_GOOGLE_ACCOUNT_LONG: i32 = 15222;
pub const IDS_AUTOFILL_CLEAR_FORM_MENU_ITEM: i32 = 15223;
pub const IDS_AUTOFILL_WARNING_INSECURE_CONNECTION: i32 = 15225;
pub const IDS_AUTOFILL_CREDIT_CARD_SIGNIN_PROMO: i32 = 15226;
pub const IDS_AUTOFILL_DELETE_AUTOCOMPLETE_SUGGESTION_CONFIRMATION_BODY: i32 = 15227;
pub const IDS_AUTOFILL_DELETE_CREDIT_CARD_SUGGESTION_CONFIRMATION_BODY: i32 = 15228;
pub const IDS_AUTOFILL_DELETE_PROFILE_SUGGESTION_CONFIRMATION_BODY: i32 = 15229;
pub const IDS_AUTOFILL_CC_AMEX: i32 = 15230;
pub const IDS_AUTOFILL_CC_AMEX_SHORT: i32 = 15231;
pub const IDS_AUTOFILL_CC_DINERS: i32 = 15232;
pub const IDS_AUTOFILL_CC_DISCOVER: i32 = 15233;
pub const IDS_AUTOFILL_CC_ELO: i32 = 15234;
pub const IDS_AUTOFILL_CC_GOOGLE_PAY: i32 = 15235;
pub const IDS_AUTOFILL_CC_JCB: i32 = 15236;
pub const IDS_AUTOFILL_CC_MASTERCARD: i32 = 15237;
pub const IDS_AUTOFILL_CC_MIR: i32 = 15238;
pub const IDS_AUTOFILL_CC_UNION_PAY: i32 = 15239;
pub const IDS_AUTOFILL_CC_VISA: i32 = 15240;
pub const IDS_AUTOFILL_CC_GENERIC: i32 = 15241;
pub const IDS_AUTOFILL_ADDRESS_SUMMARY_SEPARATOR: i32 = 15242;
pub const IDS_AUTOFILL_FIELD_LABEL_STATE: i32 = 15243;
pub const IDS_AUTOFILL_FIELD_LABEL_AREA: i32 = 15244;
pub const IDS_AUTOFILL_FIELD_LABEL_COUNTY: i32 = 15245;
pub const IDS_AUTOFILL_FIELD_LABEL_DEPARTMENT: i32 = 15246;
pub const IDS_AUTOFILL_FIELD_LABEL_DISTRICT: i32 = 15247;
pub const IDS_AUTOFILL_FIELD_LABEL_EMIRATE: i32 = 15248;
pub const IDS_AUTOFILL_FIELD_LABEL_ISLAND: i32 = 15249;
pub const IDS_AUTOFILL_FIELD_LABEL_PARISH: i32 = 15250;
pub const IDS_AUTOFILL_FIELD_LABEL_PREFECTURE: i32 = 15251;
pub const IDS_AUTOFILL_FIELD_LABEL_PROVINCE: i32 = 15252;
pub const IDS_AUTOFILL_FIELD_LABEL_ZIP_CODE: i32 = 15253;
pub const IDS_AUTOFILL_FIELD_LABEL_POSTAL_CODE: i32 = 15254;
pub const IDS_AUTOFILL_MANAGE: i32 = 15255;
pub const IDS_AUTOFILL_MANAGE_ADDRESSES: i32 = 15256;
pub const IDS_AUTOFILL_MANAGE_PAYMENT_METHODS: i32 = 15257;
pub const IDS_AUTOFILL_MANAGE_PASSWORDS: i32 = 15258;
pub const IDS_AUTOFILL_SCAN_CREDIT_CARD: i32 = 15259;
pub const IDS_AUTOFILL_SHOW_ALL_SAVED_FALLBACK: i32 = 15260;
pub const IDS_AUTOFILL_SHOW_ACCOUNT_CARDS: i32 = 15261;
pub const IDS_AUTOFILL_POPUP_ACCESSIBLE_NODE_DATA: i32 = 15262;
pub const IDS_AUTOFILL_SUGGESTION_LABEL_SEPARATOR: i32 = 15263;
pub const IDS_AUTOFILL_CREDIT_CARD_EXPIRATION_DATE_ABBR: i32 = 15264;
pub const IDS_AUTOFILL_CREDIT_CARD_EXPIRATION_DATE_ABBR_V2: i32 = 15265;
pub const IDS_AUTOFILL_CREDIT_CARD_TWO_LINE_LABEL_FROM_NAME: i32 = 15266;
pub const IDS_AUTOFILL_CREDIT_CARD_TWO_LINE_LABEL_FROM_CARD_NUMBER: i32 = 15267;
pub const IDS_AUTOFILL_LOADING_REGIONS: i32 = 15268;
pub const IDS_AUTOFILL_SELECT: i32 = 15269;
pub const IDS_AUTOFILL_NO_SAVED_ADDRESS: i32 = 15270;
pub const IDS_AUTOFILL_ADDRESSES: i32 = 15271;
pub const IDS_AUTOFILL_ENABLE_PROFILES_TOGGLE_SUBLABEL: i32 = 15272;
pub const IDS_AUTOFILL_ENABLE_CREDIT_CARDS_TOGGLE_SUBLABEL: i32 = 15273;
pub const IDS_AUTOFILL_ADDRESSES_SETTINGS_TITLE: i32 = 15274;
pub const IDS_AUTOFILL_PAYMENT_METHODS: i32 = 15275;
pub const IDS_AUTOFILL_ENABLE_PROFILES_TOGGLE_LABEL: i32 = 15276;
pub const IDS_AUTOFILL_ENABLE_CREDIT_CARDS_TOGGLE_LABEL: i32 = 15277;
pub const IDS_AUTOFILL_ENABLE_PAYMENTS_INTEGRATION_CHECKBOX_LABEL: i32 = 15278;
pub const IDS_BOOKMARK_BAR_FOLDER_NAME: i32 = 166;
pub const IDS_BOOKMARK_BAR_MOBILE_FOLDER_NAME: i32 = 168;
pub const IDS_BOOKMARK_BAR_OTHER_FOLDER_NAME: i32 = 167;
pub const IDS_BOOKMARK_BAR_MANAGED_FOLDER_DOMAIN_NAME: i32 = 15284;
pub const IDS_BOOKMARK_BAR_MANAGED_FOLDER_DEFAULT_NAME: i32 = 180;
pub const IDS_BOOKMARK_EDITOR_TITLE: i32 = 15285;
pub const IDS_BOOKMARK_EDITOR_NEW_FOLDER_NAME: i32 = 15286;
pub const IDS_BOOKMARK_BUBBLE_REMOVE_BOOKMARK: i32 = 15287;
pub const IDS_BOOKMARK_MANAGER_NAME_INPUT_PLACE_HOLDER: i32 = 15288;
pub const IDS_BOOKMARK_MANAGER_URL_INPUT_PLACE_HOLDER: i32 = 15289;
pub const IDS_TOOLTIP_STAR: i32 = 15291;
pub const IDS_CLEAR_BROWSING_DATA_CALCULATING: i32 = 15292;
pub const IDS_DEL_BROWSING_HISTORY_COUNTER: i32 = 15293;
pub const IDS_DEL_BROWSING_HISTORY_COUNTER_SYNCED: i32 = 15294;
pub const IDS_DEL_CACHE_COUNTER_UPPER_ESTIMATE: i32 = 15295;
pub const IDS_DEL_CACHE_COUNTER_ALMOST_EMPTY: i32 = 15296;
pub const IDS_DEL_CACHE_COUNTER_BASIC: i32 = 15297;
pub const IDS_DEL_CACHE_COUNTER_UPPER_ESTIMATE_BASIC: i32 = 15298;
pub const IDS_DEL_CACHE_COUNTER_ALMOST_EMPTY_BASIC: i32 = 15299;
pub const IDS_DEL_PASSWORDS_COUNTER: i32 = 15300;
pub const IDS_DEL_PASSWORDS_COUNTER_SYNCED: i32 = 15301;
pub const IDS_DEL_PASSWORDS_DOMAINS_DISPLAY: i32 = 15302;
pub const IDS_DEL_PASSWORDS_COUNTER_AND_X_MORE: i32 = 15303;
pub const IDS_DEL_SIGNIN_DATA_COUNTER: i32 = 15304;
pub const IDS_DEL_PASSWORDS_AND_SIGNIN_DATA_COUNTER_NONE: i32 = 15305;
pub const IDS_DEL_PASSWORDS_AND_SIGNIN_DATA_COUNTER_COMBINATION: i32 = 15306;
pub const IDS_DEL_SITE_SETTINGS_COUNTER: i32 = 15307;
pub const IDS_DEL_AUTOFILL_COUNTER_EMPTY: i32 = 15308;
pub const IDS_DEL_AUTOFILL_COUNTER_CREDIT_CARDS: i32 = 15309;
pub const IDS_DEL_AUTOFILL_COUNTER_ADDRESSES: i32 = 15310;
pub const IDS_DEL_AUTOFILL_COUNTER_SUGGESTIONS: i32 = 15311;
pub const IDS_DEL_AUTOFILL_COUNTER_SUGGESTIONS_LONG: i32 = 15312;
pub const IDS_DEL_AUTOFILL_COUNTER_SUGGESTIONS_SHORT: i32 = 15313;
pub const IDS_DEL_AUTOFILL_COUNTER_ONE_TYPE_SYNCED: i32 = 15314;
pub const IDS_DEL_AUTOFILL_COUNTER_TWO_TYPES: i32 = 15315;
pub const IDS_DEL_AUTOFILL_COUNTER_TWO_TYPES_SYNCED: i32 = 15316;
pub const IDS_DEL_AUTOFILL_COUNTER_THREE_TYPES: i32 = 15317;
pub const IDS_DEL_AUTOFILL_COUNTER_THREE_TYPES_SYNCED: i32 = 15318;
pub const IDS_DEL_COOKIES_COUNTER: i32 = 15319;
pub const IDS_DEL_COOKIES_COUNTER_ADVANCED: i32 = 15320;
pub const IDS_DEL_COOKIES_COUNTER_ADVANCED_WITH_EXCEPTION: i32 = 15321;
pub const IDS_DEL_DOWNLOADS_COUNTER: i32 = 15322;
pub const IDS_DEL_HOSTED_APPS_COUNTER: i32 = 15323;
pub const IDS_DEL_HOSTED_APPS_COUNTER_AND_X_MORE: i32 = 15324;
pub const IDS_SETTINGS_TITLE: i32 = 15325;
pub const IDS_SETTINGS_HIDE_ADVANCED_SETTINGS: i32 = 15326;
pub const IDS_SETTINGS_SHOW_ADVANCED_SETTINGS: i32 = 15327;
pub const IDS_NETWORK_PREDICTION_ENABLED_DESCRIPTION: i32 = 15328;
pub const IDS_OPTIONS_PROXIES_CONFIGURE_BUTTON: i32 = 15329;
pub const IDS_CRASH_TITLE: i32 = 15330;
pub const IDS_CRASH_CRASH_COUNT_BANNER_FORMAT: i32 = 15331;
pub const IDS_CRASH_CRASH_HEADER_FORMAT: i32 = 15332;
pub const IDS_CRASH_CRASH_HEADER_FORMAT_LOCAL_ONLY: i32 = 15333;
pub const IDS_CRASH_UPLOAD_TIME_FORMAT: i32 = 15334;
pub const IDS_CRASH_CAPTURE_AND_UPLOAD_TIME_FORMAT: i32 = 15335;
pub const IDS_CRASH_CRASH_NOT_UPLOADED: i32 = 15336;
pub const IDS_CRASH_CRASH_PENDING: i32 = 15337;
pub const IDS_CRASH_CRASH_USER_REQUESTED: i32 = 15338;
pub const IDS_CRASH_BUG_LINK_LABEL: i32 = 15339;
pub const IDS_CRASH_NO_CRASHES_MESSAGE: i32 = 15340;
pub const IDS_CRASH_DISABLED_HEADER: i32 = 15341;
pub const IDS_CRASH_UPLOAD_MESSAGE: i32 = 15342;
pub const IDS_CRASH_UPLOAD_NOW_LINK_TEXT: i32 = 15343;
pub const IDS_CRASH_SIZE_MESSAGE: i32 = 15344;
pub const IDS_HTTP_POST_WARNING_TITLE: i32 = 15345;
pub const IDS_HTTP_POST_WARNING: i32 = 15346;
pub const IDS_HTTP_POST_WARNING_RESEND: i32 = 15347;
pub const IDS_DOM_DISTILLER_JAVASCRIPT_DISABLED_CONTENT: i32 = 15348;
pub const IDS_DOM_DISTILLER_WEBUI_ENTRY_URL: i32 = 15349;
pub const IDS_DOM_DISTILLER_WEBUI_ENTRY_ADD: i32 = 15350;
pub const IDS_DOM_DISTILLER_WEBUI_ENTRY_ADD_FAILED: i32 = 15351;
pub const IDS_DOM_DISTILLER_WEBUI_VIEW_URL: i32 = 15352;
pub const IDS_DOM_DISTILLER_WEBUI_VIEW_URL_FAILED: i32 = 15353;
pub const IDS_DOM_DISTILLER_WEBUI_REFRESH: i32 = 15354;
pub const IDS_DOM_DISTILLER_WEBUI_FETCHING_ENTRIES: i32 = 15355;
pub const IDS_DOM_DISTILLER_VIEWER_CLOSE_READER_VIEW: i32 = 15356;
pub const IDS_DOM_DISTILLER_VIEWER_FAILED_TO_FIND_ARTICLE_TITLE: i32 = 15357;
pub const IDS_DOM_DISTILLER_VIEWER_FAILED_TO_FIND_ARTICLE_CONTENT: i32 = 15358;
pub const IDS_DOM_DISTILLER_VIEWER_LOADING_TITLE: i32 = 15359;
pub const IDS_DOM_DISTILLER_VIEWER_NO_DATA_CONTENT: i32 = 15360;
pub const IDS_DOM_DISTILLER_QUALITY_QUESTION: i32 = 15361;
pub const IDS_DOM_DISTILLER_QUALITY_ANSWER_YES: i32 = 15362;
pub const IDS_DOM_DISTILLER_QUALITY_ANSWER_NO: i32 = 15363;
pub const IDS_DOM_DISTILLER_WEBUI_TITLE: i32 = 15364;
pub const IDS_ERRORPAGE_NET_BUTTON_DETAILS: i32 = 15365;
pub const IDS_ERRORPAGE_NET_BUTTON_HIDE_DETAILS: i32 = 15366;
pub const IDS_ERRORPAGES_BUTTON_RELOAD: i32 = 15367;
pub const IDS_ERRORPAGES_BUTTON_SHOW_SAVED_COPY: i32 = 15368;
pub const IDS_ERRORPAGE_FUN_DISABLED: i32 = 15369;
pub const IDS_ERRORPAGES_SUGGESTION_VISIT_GOOGLE_CACHE: i32 = 15379;
pub const IDS_ERRORPAGES_SUGGESTION_CORRECTED_URL: i32 = 15380;
pub const IDS_ERRORPAGES_SUGGESTION_ALTERNATE_URL: i32 = 15381;
pub const IDS_ERRORPAGES_SUGGESTION_RELOAD_REPOST_SUMMARY: i32 = 15382;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_CONNECTION_HEADER: i32 = 15383;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_CONNECTION_BODY: i32 = 15384;
pub const IDS_ERRORPAGES_SUGGESTION_DNS_CONFIG_HEADER: i32 = 15385;
pub const IDS_ERRORPAGES_SUGGESTION_DNS_CONFIG_BODY: i32 = 15386;
pub const IDS_ERRORPAGES_SUGGESTION_NETWORK_PREDICTION_HEADER: i32 = 15387;
pub const IDS_ERRORPAGES_SUGGESTION_FIREWALL_CONFIG_BODY: i32 = 15388;
pub const IDS_ERRORPAGES_SUGGESTION_PROXY_CONFIG_HEADER: i32 = 15389;
pub const IDS_ERRORPAGES_SUGGESTION_PROXY_CONFIG_BODY: i32 = 15390;
pub const IDS_ERRORPAGES_SUGGESTION_VIEW_POLICIES_HEADER: i32 = 15392;
pub const IDS_ERRORPAGES_SUGGESTION_VIEW_POLICIES_BODY: i32 = 15393;
pub const IDS_ERRORPAGES_SUGGESTION_UNSUPPORTED_CIPHER_HEADER: i32 = 15394;
pub const IDS_ERRORPAGES_SUGGESTION_UNSUPPORTED_CIPHER_BODY: i32 = 15395;
pub const IDS_ERRORPAGES_SUGGESTION_NAVIGATE_TO_ORIGIN: i32 = 15396;
pub const IDS_ERRORPAGES_HEADING_NOT_AVAILABLE: i32 = 15397;
pub const IDS_ERRORPAGES_HEADING_NETWORK_ACCESS_DENIED: i32 = 15398;
pub const IDS_ERRORPAGES_HEADING_INTERNET_DISCONNECTED: i32 = 15399;
pub const IDS_ERRORPAGES_HEADING_CACHE_READ_FAILURE: i32 = 15400;
pub const IDS_ERRORPAGES_HEADING_CONNECTION_INTERRUPTED: i32 = 15401;
pub const IDS_ERRORPAGES_HEADING_NOT_FOUND: i32 = 15402;
pub const IDS_ERRORPAGES_HEADING_FILE_NOT_FOUND: i32 = 15403;
pub const IDS_ERRORPAGES_HEADING_BLOCKED: i32 = 15404;
pub const IDS_ERRORPAGES_SUMMARY_NOT_AVAILABLE: i32 = 15405;
pub const IDS_ERRORPAGES_SUMMARY_TIMED_OUT: i32 = 15406;
pub const IDS_ERRORPAGES_SUMMARY_CONNECTION_RESET: i32 = 15407;
pub const IDS_ERRORPAGES_SUMMARY_CONNECTION_CLOSED: i32 = 15408;
pub const IDS_ERRORPAGES_SUMMARY_CONNECTION_FAILED: i32 = 15409;
pub const IDS_ERRORPAGES_SUMMARY_NETWORK_CHANGED: i32 = 15410;
pub const IDS_ERRORPAGES_SUMMARY_CONNECTION_REFUSED: i32 = 15411;
pub const IDS_ERRORPAGES_SUMMARY_NAME_NOT_RESOLVED: i32 = 15412;
pub const IDS_ERRORPAGES_SUMMARY_ICANN_NAME_COLLISION: i32 = 15413;
pub const IDS_ERRORPAGES_SUMMARY_ADDRESS_UNREACHABLE: i32 = 15414;
pub const IDS_ERRORPAGES_SUMMARY_FILE_ACCESS_DENIED: i32 = 15415;
pub const IDS_ERRORPAGES_SUMMARY_NETWORK_ACCESS_DENIED: i32 = 15416;
pub const IDS_ERRORPAGES_SUMMARY_PROXY_CONNECTION_FAILED: i32 = 15417;
pub const IDS_ERRORPAGES_SUMMARY_CACHE_READ_FAILURE: i32 = 15418;
pub const IDS_ERRORPAGES_SUMMARY_NETWORK_IO_SUSPENDED: i32 = 15419;
pub const IDS_ERRORPAGES_SUMMARY_NOT_FOUND: i32 = 15420;
pub const IDS_ERRORPAGES_SUMMARY_FILE_NOT_FOUND: i32 = 15421;
pub const IDS_ERRORPAGES_SUMMARY_TOO_MANY_REDIRECTS: i32 = 15422;
pub const IDS_ERRORPAGES_SUMMARY_EMPTY_RESPONSE: i32 = 15423;
pub const IDS_ERRORPAGES_SUMMARY_INVALID_RESPONSE: i32 = 15424;
pub const IDS_ERRORPAGES_SUMMARY_DNS_PROBE_RUNNING: i32 = 15425;
pub const IDS_ERRORPAGES_HEADING_ACCESS_DENIED: i32 = 15426;
pub const IDS_ERRORPAGES_HEADING_FILE_ACCESS_DENIED: i32 = 15427;
pub const IDS_ERRORPAGES_SUMMARY_FORBIDDEN: i32 = 15428;
pub const IDS_ERRORPAGES_SUMMARY_GONE: i32 = 15429;
pub const IDS_ERRORPAGES_HEADING_PAGE_NOT_WORKING: i32 = 15430;
pub const IDS_ERRORPAGES_SUMMARY_CONTACT_SITE_OWNER: i32 = 15431;
pub const IDS_ERRORPAGES_SUMMARY_WEBSITE_CANNOT_HANDLE_REQUEST: i32 = 15432;
pub const IDS_ERRORPAGES_SUMMARY_GATEWAY_TIMEOUT: i32 = 15433;
pub const IDS_ERRORPAGES_SUMMARY_SSL_SECURITY_ERROR: i32 = 15434;
pub const IDS_ERRORPAGES_SUMMARY_SSL_VERSION_OR_CIPHER_MISMATCH: i32 = 15435;
pub const IDS_ERRORPAGES_HEADING_INSECURE_CONNECTION: i32 = 15436;
pub const IDS_ERRORPAGES_SUMMARY_BAD_SSL_CLIENT_AUTH_CERT: i32 = 15437;
pub const IDS_ERRORPAGES_SUMMARY_BLOCKED_BY_EXTENSION: i32 = 15438;
pub const IDS_ERRORPAGES_SUMMARY_BLOCKED_BY_XSS_AUDITOR: i32 = 15439;
pub const IDS_ERRORPAGES_SUMMARY_BLOCKED_BY_ADMINISTRATOR: i32 = 15440;
pub const IDS_ERRORPAGES_HTTP_POST_WARNING: i32 = 15441;
pub const IDS_ERRORPAGES_SUGGESTION_LIST_HEADER: i32 = 15442;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_CONNECTION_SUMMARY: i32 = 15443;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_PROXY_FIREWALL_DNS_SUMMARY: i32 = 15444;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_FIREWALL_ANTIVIRUS_SUMMARY: i32 = 15445;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_PROXY_FIREWALL_SUMMARY: i32 = 15446;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_PROXY_ADDRESS_SUMMARY: i32 = 15447;
pub const IDS_ERRORPAGES_SUGGESTION_CONTACT_ADMIN_SUMMARY: i32 = 15448;
pub const IDS_ERRORPAGES_SUGGESTION_CONTACT_ADMIN_SUMMARY_STANDALONE: i32 = 15449;
pub const IDS_ERRORPAGES_SUGGESTION_LEARNMORE_SUMMARY: i32 = 15450;
pub const IDS_ERRORPAGES_SUGGESTION_LEARNMORE_SUMMARY_STANDALONE: i32 = 15451;
pub const IDS_ERRORPAGES_SUGGESTION_CLEAR_COOKIES_SUMMARY: i32 = 15452;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_HARDWARE_SUMMARY: i32 = 15456;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_WIFI_SUMMARY: i32 = 15457;
pub const IDS_ERRORPAGES_SUGGESTION_DIAGNOSE_CONNECTION_SUMMARY: i32 = 15458;
pub const IDS_ERRORPAGES_SUGGESTION_COMPLETE_SETUP_SUMMARY: i32 = 15459;
pub const IDS_ERRORPAGES_SUGGESTION_DISABLE_EXTENSION_SUMMARY: i32 = 15460;
pub const IDS_ERRORPAGES_SUGGESTION_GOOGLE_SEARCH_SUMMARY: i32 = 15461;
pub const IDS_ERRORPAGES_SUGGESTION_DIAGNOSE: i32 = 15462;
pub const IDS_ERRORPAGES_SUGGESTION_DIAGNOSE_STANDALONE: i32 = 15463;
pub const IDS_FIND_IN_PAGE_ACCESSIBLE_TITLE: i32 = 15464;
pub const IDS_FIND_IN_PAGE_COUNT: i32 = 15465;
pub const IDS_ACCESSIBLE_FIND_IN_PAGE_COUNT: i32 = 15466;
pub const IDS_ACCESSIBLE_FIND_IN_PAGE_NO_RESULTS: i32 = 15467;
pub const IDS_FIND_IN_PAGE_PREVIOUS_TOOLTIP: i32 = 15468;
pub const IDS_FIND_IN_PAGE_NEXT_TOOLTIP: i32 = 15469;
pub const IDS_FIND_IN_PAGE_CLOSE_TOOLTIP: i32 = 15470;
pub const IDS_HISTORY_ACTION_MENU_DESCRIPTION: i32 = 15471;
pub const IDS_HISTORY_CANCEL_EDITING_BUTTON: i32 = 15472;
pub const IDS_HISTORY_DATE_WITH_RELATIVE_TIME: i32 = 15473;
pub const IDS_HISTORY_DELETE_PRIOR_VISITS_CONFIRM_BUTTON: i32 = 15474;
pub const IDS_HISTORY_DELETE_PRIOR_VISITS_WARNING: i32 = 15475;
pub const IDS_HISTORY_DELETE_SELECTED_ENTRIES_BUTTON: i32 = 15476;
pub const IDS_HISTORY_ENTRY_ACCESSIBILITY_DELETE: i32 = 15477;
pub const IDS_HISTORY_ENTRY_ACCESSIBILITY_LABEL: i32 = 15478;
pub const IDS_HISTORY_ENTRY_BOOKMARKED: i32 = 15479;
pub const IDS_HISTORY_ENTRY_SUMMARY: i32 = 15480;
pub const IDS_HISTORY_FOUND_SEARCH_RESULTS: i32 = 15481;
pub const IDS_HISTORY_OTHER_FORMS_OF_HISTORY: i32 = 15482;
pub const IDS_HISTORY_LOADING: i32 = 15483;
pub const IDS_HISTORY_MORE_FROM_SITE: i32 = 15484;
pub const IDS_HISTORY_NO_RESULTS: i32 = 15485;
pub const IDS_HISTORY_NO_SEARCH_RESULTS: i32 = 15486;
pub const IDS_HISTORY_OPEN_CLEAR_BROWSING_DATA_DIALOG: i32 = 15487;
pub const IDS_HISTORY_OTHER_SESSIONS_COLLAPSE_SESSION: i32 = 15488;
pub const IDS_HISTORY_OTHER_SESSIONS_EXPAND_SESSION: i32 = 15489;
pub const IDS_HISTORY_OTHER_SESSIONS_HIDE_FOR_NOW: i32 = 15490;
pub const IDS_HISTORY_OTHER_SESSIONS_OPEN_ALL: i32 = 15491;
pub const IDS_HISTORY_REMOVE_BOOKMARK: i32 = 15492;
pub const IDS_HISTORY_REMOVE_PAGE: i32 = 15493;
pub const IDS_HISTORY_REMOVE_SELECTED_ITEMS: i32 = 15494;
pub const IDS_HISTORY_SEARCH_BUTTON: i32 = 15495;
pub const IDS_HISTORY_SEARCH_RESULT: i32 = 15496;
pub const IDS_HISTORY_SEARCH_RESULTS: i32 = 15497;
pub const IDS_HISTORY_SHOW_HISTORY: i32 = 15498;
pub const IDS_HISTORY_SHOWFULLHISTORY_LINK: i32 = 15499;
pub const IDS_HISTORY_START_EDITING_BUTTON: i32 = 15500;
pub const IDS_HISTORY_TITLE: i32 = 15501;
pub const IDS_HISTORY_UNKNOWN_DEVICE: i32 = 15502;
pub const IDS_LOGIN_DIALOG_TITLE: i32 = 15503;
pub const IDS_LOGIN_DIALOG_OK_BUTTON_LABEL: i32 = 15504;
pub const IDS_LOGIN_DIALOG_AUTHORITY: i32 = 15505;
pub const IDS_LOGIN_DIALOG_PROXY_AUTHORITY: i32 = 15506;
pub const IDS_LOGIN_DIALOG_NOT_PRIVATE: i32 = 15507;
pub const IDS_LOGIN_DIALOG_USERNAME_FIELD: i32 = 15508;
pub const IDS_LOGIN_DIALOG_PASSWORD_FIELD: i32 = 15509;
pub const IDS_MEDIA_MESSAGE_CENTER_MEDIA_NOTIFICATION_ACTION_PREVIOUS_TRACK: i32 = 15510;
pub const IDS_MEDIA_MESSAGE_CENTER_MEDIA_NOTIFICATION_ACTION_SEEK_BACKWARD: i32 = 15511;
pub const IDS_MEDIA_MESSAGE_CENTER_MEDIA_NOTIFICATION_ACTION_PLAY: i32 = 15512;
pub const IDS_MEDIA_MESSAGE_CENTER_MEDIA_NOTIFICATION_ACTION_PAUSE: i32 = 15513;
pub const IDS_MEDIA_MESSAGE_CENTER_MEDIA_NOTIFICATION_ACTION_SEEK_FORWARD: i32 = 15514;
pub const IDS_MEDIA_MESSAGE_CENTER_MEDIA_NOTIFICATION_ACTION_NEXT_TRACK: i32 = 15515;
pub const IDS_MEDIA_MESSAGE_CENTER_MEDIA_NOTIFICATION_ACCESSIBLE_NAME: i32 = 15516;
pub const IDS_DEFAULT_TAB_TITLE: i32 = 221;
pub const IDS_DOWNLOAD_TAB_TITLE: i32 = 15517;
pub const IDS_SAD_TAB_TITLE: i32 = 15518;
pub const IDS_SAD_TAB_MESSAGE: i32 = 15519;
pub const IDS_SAD_TAB_HELP_MESSAGE: i32 = 15520;
pub const IDS_SAD_TAB_HELP_LINK: i32 = 15521;
pub const IDS_SAD_TAB_RELOAD_LABEL: i32 = 15522;
pub const IDS_SAD_TAB_OOM_TITLE: i32 = 15524;
pub const IDS_SAD_TAB_RELOAD_TITLE: i32 = 15525;
pub const IDS_SAD_TAB_OOM_MESSAGE_TABS: i32 = 15526;
pub const IDS_SAD_TAB_OOM_MESSAGE_NOTABS: i32 = 15527;
pub const IDS_SAD_TAB_RELOAD_TRY: i32 = 15528;
pub const IDS_SAD_TAB_RELOAD_INCOGNITO: i32 = 15529;
pub const IDS_SAD_TAB_RELOAD_RESTART_BROWSER: i32 = 15532;
pub const IDS_SAD_TAB_RELOAD_RESTART_DEVICE: i32 = 15533;
pub const IDS_NEW_TAB_TITLE: i32 = 230;
pub const IDS_NEW_TAB_OTR_HEADING: i32 = 15535;
pub const IDS_NEW_TAB_OTR_DESCRIPTION: i32 = 15536;
pub const IDS_NEW_TAB_OTR_LEARN_MORE_LINK: i32 = 15537;
pub const IDS_NEW_TAB_OTR_MESSAGE_WARNING: i32 = 15538;
pub const IDS_NEW_TAB_UNDO_THUMBNAIL_REMOVE: i32 = 227;
pub const IDS_NEW_TAB_OTR_TITLE: i32 = 15539;
pub const IDS_NEW_TAB_OTR_SUBTITLE: i32 = 15540;
pub const IDS_NEW_TAB_OTR_NOT_SAVED: i32 = 15541;
pub const IDS_NEW_TAB_OTR_VISIBLE: i32 = 15542;
pub const IDS_NTP_ARTICLE_SUGGESTIONS_NOT_AVAILABLE: i32 = 15544;
pub const IDS_NTP_ARTICLE_SUGGESTIONS_SECTION_HEADER: i32 = 15545;
pub const IDS_NTP_ARTICLE_SUGGESTIONS_SECTION_EMPTY: i32 = 15546;
pub const IDS_NTP_PHYSICAL_WEB_PAGE_SUGGESTIONS_SECTION_HEADER: i32 = 15547;
pub const IDS_NTP_PHYSICAL_WEB_PAGE_SUGGESTIONS_SECTION_EMPTY: i32 = 15548;
pub const IDS_NTP_READING_LIST_SUGGESTIONS_SECTION_HEADER: i32 = 15549;
pub const IDS_NTP_READING_LIST_SUGGESTIONS_SECTION_EMPTY: i32 = 15550;
pub const IDS_NTP_RECENT_TAB_SUGGESTIONS_SECTION_HEADER: i32 = 15551;
pub const IDS_NTP_RECENT_TAB_SUGGESTIONS_SECTION_EMPTY: i32 = 15552;
pub const IDS_NTP_NOTIFICATIONS_READ_THIS_STORY_AND_MORE: i32 = 15553;
pub const IDS_NTP_DEFAULT_SEARCH_TITLE: i32 = 15554;
pub const IDS_NTP_DEFAULT_SEARCH_URL: i32 = 15555;
pub const IDS_AUTOCOMPLETE_SEARCH_DESCRIPTION: i32 = 15556;
pub const IDS_EMPTY_KEYWORD_VALUE: i32 = 220;
pub const IDS_LINK_FROM_CLIPBOARD: i32 = 15557;
pub const IDS_TEXT_FROM_CLIPBOARD: i32 = 15558;
pub const IDS_IMAGE_FROM_CLIPBOARD: i32 = 15559;
pub const IDS_COPIED_TEXT_FROM_CLIPBOARD: i32 = 15560;
pub const IDS_SECURE_CONNECTION_EV: i32 = 15561;
pub const IDS_SECURE_VERBOSE_STATE: i32 = 15562;
pub const IDS_NOT_SECURE_VERBOSE_STATE: i32 = 15563;
pub const IDS_DANGEROUS_VERBOSE_STATE: i32 = 15564;
pub const IDS_OFFLINE_VERBOSE_STATE: i32 = 15565;
pub const IDS_OMNIBOX_TAB_SUGGEST_HINT: i32 = 15567;
pub const IDS_OMNIBOX_TAB_SUGGEST_SHORT_HINT: i32 = 15568;
pub const IDS_PHYSICAL_WEB_OVERFLOW_DESCRIPTION: i32 = 15569;
pub const IDS_PHYSICAL_WEB_OVERFLOW: i32 = 15570;
pub const IDS_PHYSICAL_WEB_OVERFLOW_EMPTY_TITLE: i32 = 15571;
pub const IDS_OMNIBOX_FILE: i32 = 15572;
pub const IDS_DRIVE_SUGGESTION_DOCUMENT: i32 = 15573;
pub const IDS_DRIVE_SUGGESTION_FORM: i32 = 15574;
pub const IDS_DRIVE_SUGGESTION_SPREADSHEET: i32 = 15575;
pub const IDS_DRIVE_SUGGESTION_PRESENTATION: i32 = 15576;
pub const IDS_DRIVE_SUGGESTION_GENERAL: i32 = 15577;
pub const IDS_DRIVE_SUGGESTION_DESCRIPTION_TEMPLATE: i32 = 15578;
pub const IDS_OMNIBOX_PEDAL_CLEAR_BROWSING_DATA_HINT: i32 = 15579;
pub const IDS_OMNIBOX_PEDAL_CLEAR_BROWSING_DATA_HINT_SHORT: i32 = 15580;
pub const IDS_OMNIBOX_PEDAL_CLEAR_BROWSING_DATA_SUGGESTION_CONTENTS: i32 = 15581;
pub const IDS_OMNIBOX_PEDAL_CHANGE_SEARCH_ENGINE_HINT: i32 = 15582;
pub const IDS_OMNIBOX_PEDAL_CHANGE_SEARCH_ENGINE_HINT_SHORT: i32 = 15583;
pub const IDS_OMNIBOX_PEDAL_CHANGE_SEARCH_ENGINE_SUGGESTION_CONTENTS: i32 = 15584;
pub const IDS_OMNIBOX_PEDAL_MANAGE_PASSWORDS_HINT: i32 = 15585;
pub const IDS_OMNIBOX_PEDAL_MANAGE_PASSWORDS_HINT_SHORT: i32 = 15586;
pub const IDS_OMNIBOX_PEDAL_MANAGE_PASSWORDS_SUGGESTION_CONTENTS: i32 = 15587;
pub const IDS_OMNIBOX_PEDAL_CHANGE_HOME_PAGE_HINT: i32 = 15588;
pub const IDS_OMNIBOX_PEDAL_CHANGE_HOME_PAGE_HINT_SHORT: i32 = 15589;
pub const IDS_OMNIBOX_PEDAL_CHANGE_HOME_PAGE_SUGGESTION_CONTENTS: i32 = 15590;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CREDIT_CARD_HINT: i32 = 15591;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CREDIT_CARD_HINT_SHORT: i32 = 15592;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CREDIT_CARD_SUGGESTION_CONTENTS: i32 = 15593;
pub const IDS_OMNIBOX_PEDAL_LAUNCH_INCOGNITO_HINT: i32 = 15594;
pub const IDS_OMNIBOX_PEDAL_LAUNCH_INCOGNITO_HINT_SHORT: i32 = 15595;
pub const IDS_OMNIBOX_PEDAL_LAUNCH_INCOGNITO_SUGGESTION_CONTENTS: i32 = 15596;
pub const IDS_OMNIBOX_PEDAL_TRANSLATE_HINT: i32 = 15597;
pub const IDS_OMNIBOX_PEDAL_TRANSLATE_HINT_SHORT: i32 = 15598;
pub const IDS_OMNIBOX_PEDAL_TRANSLATE_SUGGESTION_CONTENTS: i32 = 15599;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CHROME_HINT: i32 = 15600;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CHROME_HINT_SHORT: i32 = 15601;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CHROME_SUGGESTION_CONTENTS: i32 = 15602;
pub const IDS_ACC_AUTOCOMPLETE_HISTORY: i32 = 15603;
pub const IDS_ACC_AUTOCOMPLETE_SEARCH_HISTORY: i32 = 15604;
pub const IDS_ACC_AUTOCOMPLETE_SEARCH: i32 = 15605;
pub const IDS_ACC_AUTOCOMPLETE_SUGGESTED_SEARCH: i32 = 15606;
pub const IDS_ACC_AUTOCOMPLETE_SUGGESTED_SEARCH_ENTITY: i32 = 15607;
pub const IDS_ACC_AUTOCOMPLETE_QUICK_ANSWER: i32 = 15608;
pub const IDS_ACC_AUTOCOMPLETE_BOOKMARK: i32 = 15609;
pub const IDS_ACC_AUTOCOMPLETE_CLIPBOARD_IMAGE: i32 = 15610;
pub const IDS_ACC_AUTOCOMPLETE_CLIPBOARD_TEXT: i32 = 15611;
pub const IDS_ACC_AUTOCOMPLETE_CLIPBOARD_URL: i32 = 15612;
pub const IDS_ACC_SEARCH_ICON: i32 = 15613;
pub const IDS_ACC_AUTOCOMPLETE_N_OF_M: i32 = 15614;
pub const IDS_ACC_TAB_SWITCH_SUFFIX: i32 = 15615;
pub const IDS_ACC_TAB_SWITCH_BUTTON_FOCUSED_PREFIX: i32 = 15616;
pub const IDS_ACC_TAB_SWITCH_BUTTON: i32 = 15617;
pub const IDS_PAGE_INFO_SECURE_SUMMARY: i32 = 15618;
pub const IDS_PAGE_INFO_MIXED_CONTENT_SUMMARY: i32 = 15619;
pub const IDS_PAGE_INFO_NOT_SECURE_SUMMARY: i32 = 15620;
pub const IDS_PAGE_INFO_MALWARE_SUMMARY: i32 = 15621;
pub const IDS_PAGE_INFO_SOCIAL_ENGINEERING_SUMMARY: i32 = 15622;
pub const IDS_PAGE_INFO_UNWANTED_SOFTWARE_SUMMARY: i32 = 15623;
pub const IDS_PAGE_INFO_EXTENSION_PAGE: i32 = 15624;
pub const IDS_PAGE_INFO_VIEW_SOURCE_PAGE: i32 = 15625;
pub const IDS_PAGE_INFO_SAFETY_TIP_NAME: i32 = 15626;
pub const IDS_PAGE_INFO_SAFETY_TIP_BAD_REPUTATION_TITLE: i32 = 15627;
pub const IDS_PAGE_INFO_SAFETY_TIP_BAD_REPUTATION_DESCRIPTION: i32 = 15628;
pub const IDS_PAGE_INFO_SAFETY_TIP_LEAVE_BUTTON: i32 = 15629;
pub const IDS_PAGE_INFO_FILE_PAGE: i32 = 15630;
pub const IDS_PAGE_INFO_SECURE_DETAILS: i32 = 15631;
pub const IDS_PAGE_INFO_MIXED_CONTENT_DETAILS: i32 = 15632;
pub const IDS_PAGE_INFO_NOT_SECURE_DETAILS: i32 = 15633;
pub const IDS_PAGE_INFO_MALWARE_DETAILS: i32 = 15634;
pub const IDS_PAGE_INFO_SOCIAL_ENGINEERING_DETAILS: i32 = 15635;
pub const IDS_PAGE_INFO_UNWANTED_SOFTWARE_DETAILS: i32 = 15636;
pub const IDS_PAGE_INFO_SECURITY_TAB_INSECURE_IDENTITY: i32 = 15637;
pub const IDS_PAGE_INFO_INVALID_CERTIFICATE_DESCRIPTION: i32 = 15639;
pub const IDS_PAGE_INFO_RESET_INVALID_CERTIFICATE_DECISIONS_BUTTON: i32 = 15640;
pub const IDS_PAGE_INFO_HELP_CENTER_LINK: i32 = 15641;
pub const IDS_PAGE_INFO_SECURITY_TAB_DEPRECATED_SIGNATURE_ALGORITHM: i32 = 15642;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_CONNECTION_TEXT: i32 = 15643;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_INSECURE_CONTENT_ERROR: i32 = 15644;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_INSECURE_CONTENT_WARNING: i32 = 15645;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_INSECURE_FORM_WARNING: i32 = 15646;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_SENTENCE_LINK: i32 = 15647;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTION_DETAILS: i32 = 15648;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTION_DETAILS_AEAD: i32 = 15649;
pub const IDS_PAGE_INFO_SECURITY_TAB_NON_UNIQUE_NAME: i32 = 15650;
pub const IDS_PAGE_INFO_SECURITY_TAB_NOT_ENCRYPTED_CONNECTION_TEXT: i32 = 15651;
pub const IDS_PAGE_INFO_SECURITY_TAB_NO_REVOCATION_MECHANISM: i32 = 15652;
pub const IDS_PAGE_INFO_SECURITY_TAB_SSL_VERSION: i32 = 15653;
pub const IDS_PAGE_INFO_SECURITY_TAB_UNABLE_TO_CHECK_REVOCATION: i32 = 15654;
pub const IDS_PAGE_INFO_SECURITY_TAB_UNKNOWN_PARTY: i32 = 15655;
pub const IDS_PAGE_INFO_SECURITY_TAB_WEAK_ENCRYPTION_CONNECTION_TEXT: i32 = 15656;
pub const IDS_PAGE_INFO_CERT_INFO_BUTTON: i32 = 15657;
pub const IDS_PAGE_INFO_ADDRESS: i32 = 15658;
pub const IDS_PAGE_INFO_PARTIAL_ADDRESS: i32 = 15659;
pub const IDS_PAGE_INFO_SECURITY_TAB_SECURE_IDENTITY_EV_VERIFIED: i32 = 15660;
pub const IDS_PAGE_INFO_CERTIFICATE: i32 = 15661;
pub const IDS_PAGE_INFO_CERTIFICATE_VALID_LINK: i32 = 15662;
pub const IDS_PAGE_INFO_CERTIFICATE_INVALID_LINK: i32 = 15663;
pub const IDS_PAGE_INFO_CERTIFICATE_BUTTON_TEXT: i32 = 15664;
pub const IDS_PAGE_INFO_CERTIFICATE_VALID_PARENTHESIZED: i32 = 15665;
pub const IDS_PAGE_INFO_CERTIFICATE_INVALID_PARENTHESIZED: i32 = 15666;
pub const IDS_PAGE_INFO_CERTIFICATE_VALID_LINK_TOOLTIP: i32 = 15667;
pub const IDS_PAGE_INFO_CERTIFICATE_INVALID_LINK_TOOLTIP: i32 = 15668;
pub const IDS_PAGE_INFO_COOKIES: i32 = 15669;
pub const IDS_PAGE_INFO_COOKIES_BUTTON_TEXT: i32 = 15670;
pub const IDS_PAGE_INFO_NUM_COOKIES_PARENTHESIZED: i32 = 15671;
pub const IDS_PAGE_INFO_COOKIES_TOOLTIP: i32 = 15672;
pub const IDS_PAGE_INFO_TYPE_ADS: i32 = 15673;
pub const IDS_PAGE_INFO_TYPE_AUTOPLAY: i32 = 15674;
pub const IDS_PAGE_INFO_TYPE_BACKGROUND_SYNC: i32 = 15675;
pub const IDS_PAGE_INFO_TYPE_IMAGES: i32 = 15676;
pub const IDS_PAGE_INFO_TYPE_JAVASCRIPT: i32 = 15677;
pub const IDS_PAGE_INFO_TYPE_POPUPS_REDIRECTS: i32 = 15678;
pub const IDS_PAGE_INFO_TYPE_FLASH: i32 = 15679;
pub const IDS_PAGE_INFO_TYPE_LOCATION: i32 = 15680;
pub const IDS_PAGE_INFO_TYPE_NOTIFICATIONS: i32 = 15681;
pub const IDS_PAGE_INFO_TYPE_MIC: i32 = 15682;
pub const IDS_PAGE_INFO_TYPE_CAMERA: i32 = 15683;
pub const IDS_PAGE_INFO_TYPE_MIDI_SYSEX: i32 = 15684;
pub const IDS_PAGE_INFO_TYPE_SOUND: i32 = 15685;
pub const IDS_PAGE_INFO_TYPE_CLIPBOARD: i32 = 15686;
pub const IDS_PAGE_INFO_TYPE_SENSORS: i32 = 15687;
pub const IDS_PAGE_INFO_TYPE_MOTION_SENSORS: i32 = 15688;
pub const IDS_PAGE_INFO_TYPE_USB: i32 = 15689;
pub const IDS_PAGE_INFO_TYPE_SERIAL: i32 = 15690;
pub const IDS_PAGE_INFO_TYPE_BLUETOOTH_SCANNING: i32 = 15691;
pub const IDS_PAGE_INFO_BUTTON_TEXT_ALLOWED_BY_USER: i32 = 15692;
pub const IDS_PAGE_INFO_BUTTON_TEXT_BLOCKED_BY_USER: i32 = 15693;
pub const IDS_PAGE_INFO_BUTTON_TEXT_MUTED_BY_USER: i32 = 15694;
pub const IDS_PAGE_INFO_BUTTON_TEXT_ASK_BY_USER: i32 = 15695;
pub const IDS_PAGE_INFO_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_USER: i32 = 15696;
pub const IDS_PAGE_INFO_BUTTON_TEXT_ALLOWED_BY_DEFAULT: i32 = 15697;
pub const IDS_PAGE_INFO_BUTTON_TEXT_AUTOMATIC_BY_DEFAULT: i32 = 15698;
pub const IDS_PAGE_INFO_BUTTON_TEXT_BLOCKED_BY_DEFAULT: i32 = 15699;
pub const IDS_PAGE_INFO_BUTTON_TEXT_MUTED_BY_DEFAULT: i32 = 15700;
pub const IDS_PAGE_INFO_BUTTON_TEXT_ASK_BY_DEFAULT: i32 = 15701;
pub const IDS_PAGE_INFO_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_DEFAULT: i32 = 15702;
pub const IDS_PAGE_INFO_MENU_ITEM_DEFAULT_ALLOW: i32 = 15703;
pub const IDS_PAGE_INFO_MENU_ITEM_DEFAULT_BLOCK: i32 = 15704;
pub const IDS_PAGE_INFO_MENU_ITEM_DEFAULT_ASK: i32 = 15705;
pub const IDS_PAGE_INFO_MENU_ITEM_DEFAULT_DETECT_IMPORTANT_CONTENT: i32 = 15706;
pub const IDS_PAGE_INFO_MENU_ITEM_ALLOW: i32 = 15707;
pub const IDS_PAGE_INFO_MENU_ITEM_BLOCK: i32 = 15708;
pub const IDS_PAGE_INFO_MENU_ITEM_ASK: i32 = 15709;
pub const IDS_PAGE_INFO_MENU_ITEM_DETECT_IMPORTANT_CONTENT: i32 = 15710;
pub const IDS_PAGE_INFO_MENU_ITEM_ADS_BLOCK: i32 = 15711;
pub const IDS_PAGE_INFO_SELECTOR_TOOLTIP: i32 = 15712;
pub const IDS_PAGE_INFO_USB_DEVICE_SECONDARY_LABEL: i32 = 15713;
pub const IDS_PAGE_INFO_USB_DEVICE_ALLOWED_BY_POLICY_LABEL: i32 = 15714;
pub const IDS_PAGE_INFO_DELETE_USB_DEVICE: i32 = 15715;
pub const IDS_PAGE_INFO_SERIAL_PORT_SECONDARY_LABEL: i32 = 15716;
pub const IDS_PAGE_INFO_DELETE_SERIAL_PORT: i32 = 15717;
pub const IDS_PAGE_INFO_SITE_SETTINGS_LINK: i32 = 15718;
pub const IDS_PAGE_INFO_SITE_SETTINGS_TOOLTIP: i32 = 15719;
pub const IDS_PAGE_INFO_PERMISSION_ALLOWED_BY_POLICY: i32 = 15720;
pub const IDS_PAGE_INFO_PERMISSION_BLOCKED_BY_POLICY: i32 = 15721;
pub const IDS_PAGE_INFO_PERMISSION_ASK_BY_POLICY: i32 = 15722;
pub const IDS_PAGE_INFO_PERMISSION_ALLOWED_BY_EXTENSION: i32 = 15723;
pub const IDS_PAGE_INFO_PERMISSION_BLOCKED_BY_EXTENSION: i32 = 15724;
pub const IDS_PAGE_INFO_PERMISSION_ASK_BY_EXTENSION: i32 = 15725;
pub const IDS_PAGE_INFO_PERMISSION_AUTOMATICALLY_BLOCKED: i32 = 15726;
pub const IDS_PAGE_INFO_PERMISSION_ADS_SUBTITLE: i32 = 15727;
pub const IDS_PAGE_INFO_INFOBAR_TEXT: i32 = 15728;
pub const IDS_PAGE_INFO_INFOBAR_BUTTON: i32 = 15729;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_SUMMARY: i32 = 15730;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS: i32 = 15731;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS_SYNC: i32 = 15732;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS_SIGNED_IN_NON_SYNC: i32 = 15733;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS_ENTERPRISE: i32 = 15734;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS_ENTERPRISE_WITH_ORG_NAME: i32 = 15735;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_BUTTON: i32 = 15736;
pub const IDS_PAGE_INFO_PROTECT_ACCOUNT_BUTTON: i32 = 15737;
pub const IDS_PAGE_INFO_IGNORE_PASSWORD_WARNING_BUTTON: i32 = 15738;
pub const IDS_PAGE_INFO_WHITELIST_PASSWORD_REUSE_BUTTON: i32 = 15739;
pub const IDS_PAGE_INFO_BILLING_SUMMARY: i32 = 15740;
pub const IDS_PAGE_INFO_BILLING_DETAILS: i32 = 15741;
pub const IDS_PAGE_INFO_VR_PRESENTING_TEXT: i32 = 15742;
pub const IDS_PAGE_INFO_VR_TURN_OFF_BUTTON_TEXT: i32 = 15743;
pub const IDS_MANAGE_PASSWORDS_AUTO_SIGNIN_TITLE: i32 = 15744;
pub const IDS_PASSWORD_MANAGER_EMPTY_LOGIN: i32 = 15745;
pub const IDS_PASSWORD_MANAGER_MANAGE_PASSWORDS: i32 = 15746;
pub const IDS_PASSWORD_MANAGER_GENERATE_PASSWORD: i32 = 15747;
pub const IDS_PASSWORD_MANAGER_EXCEPTIONS_TAB_TITLE: i32 = 15748;
pub const IDS_PASSWORD_MANAGER_SHOW_PASSWORDS_TAB_TITLE: i32 = 15749;
pub const IDS_PASSWORD_MANAGER_SMART_LOCK: i32 = 15750;
pub const IDS_PASSWORD_MANAGER_DEFAULT_EXPORT_FILENAME: i32 = 15751;
pub const IDS_PAYMENTS_TITLE: i32 = 15752;
pub const IDS_PAYMENTS_ERROR_MESSAGE_DIALOG_TITLE: i32 = 15753;
pub const IDS_PAYMENTS_METHOD_OF_PAYMENT_LABEL: i32 = 15754;
pub const IDS_PAYMENTS_CONTACT_DETAILS_LABEL: i32 = 15755;
pub const IDS_PAYMENTS_ADD_CONTACT_DETAILS_LABEL: i32 = 15756;
pub const IDS_PAYMENTS_EDIT_CONTACT_DETAILS_LABEL: i32 = 15757;
pub const IDS_PAYMENTS_ADD_CARD_LABEL: i32 = 15758;
pub const IDS_PAYMENTS_ADD_BILLING_ADDRESS: i32 = 15759;
pub const IDS_PAYMENTS_ADD_NAME_ON_CARD: i32 = 15760;
pub const IDS_PAYMENTS_ADD_VALID_CARD_NUMBER: i32 = 15761;
pub const IDS_PAYMENTS_ADD_MORE_INFORMATION: i32 = 15762;
pub const IDS_PAYMENTS_EDIT_CARD: i32 = 15763;
pub const IDS_PAYMENTS_ADD_PHONE_NUMBER: i32 = 15764;
pub const IDS_PAYMENTS_ADD_RECIPIENT: i32 = 15765;
pub const IDS_PAYMENTS_ADD_VALID_ADDRESS: i32 = 15766;
pub const IDS_PAYMENTS_ADD_EMAIL: i32 = 15767;
pub const IDS_PAYMENTS_ADD_NAME: i32 = 15768;
pub const IDS_PAYMENTS_ORDER_SUMMARY_LABEL: i32 = 15769;
pub const IDS_PAYMENT_REQUEST_PAYMENT_METHOD_SECTION_NAME: i32 = 15770;
pub const IDS_PAYMENT_REQUEST_CONTACT_INFO_SECTION_NAME: i32 = 15771;
pub const IDS_PAYMENTS_SHIPPING_SUMMARY_LABEL: i32 = 15772;
pub const IDS_PAYMENTS_SHIPPING_ADDRESS_LABEL: i32 = 15773;
pub const IDS_PAYMENTS_SHIPPING_OPTION_LABEL: i32 = 15774;
pub const IDS_PAYMENTS_DELIVERY_SUMMARY_LABEL: i32 = 15775;
pub const IDS_PAYMENTS_DELIVERY_ADDRESS_LABEL: i32 = 15776;
pub const IDS_PAYMENTS_DELIVERY_OPTION_LABEL: i32 = 15777;
pub const IDS_PAYMENTS_PICKUP_SUMMARY_LABEL: i32 = 15778;
pub const IDS_PAYMENTS_PICKUP_ADDRESS_LABEL: i32 = 15779;
pub const IDS_PAYMENTS_PICKUP_OPTION_LABEL: i32 = 15780;
pub const IDS_PAYMENTS_EDIT_BUTTON: i32 = 15781;
pub const IDS_PAYMENTS_PAY_BUTTON: i32 = 15782;
pub const IDS_PAYMENTS_ADD_CONTACT: i32 = 15783;
pub const IDS_PAYMENTS_ADD_CARD: i32 = 15784;
pub const IDS_PAYMENTS_ADD_ADDRESS: i32 = 15785;
pub const IDS_PAYMENTS_EDIT_ADDRESS: i32 = 15786;
pub const IDS_PAYMENTS_CANCEL_PAYMENT: i32 = 15787;
pub const IDS_PAYMENTS_NAME_FIELD_IN_CONTACT_DETAILS: i32 = 15788;
pub const IDS_PAYMENTS_PHONE_FIELD_IN_CONTACT_DETAILS: i32 = 15789;
pub const IDS_PAYMENTS_EMAIL_FIELD_IN_CONTACT_DETAILS: i32 = 15790;
pub const IDS_PAYMENTS_SAVE_CARD_TO_DEVICE_CHECKBOX: i32 = 15791;
pub const IDS_PAYMENTS_ACCEPTED_CARDS_LABEL: i32 = 15792;
pub const IDS_PAYMENTS_ACCEPTED_CREDIT_CARDS_LABEL: i32 = 15793;
pub const IDS_PAYMENTS_ACCEPTED_DEBIT_CARDS_LABEL: i32 = 15794;
pub const IDS_PAYMENTS_ACCEPTED_PREPAID_CARDS_LABEL: i32 = 15795;
pub const IDS_PAYMENTS_ACCEPTED_CREDIT_DEBIT_CARDS_LABEL: i32 = 15796;
pub const IDS_PAYMENTS_ACCEPTED_CREDIT_PREPAID_CARDS_LABEL: i32 = 15797;
pub const IDS_PAYMENTS_ACCEPTED_DEBIT_PREPAID_CARDS_LABEL: i32 = 15798;
pub const IDS_PAYMENTS_CREDIT_CARD_EXPIRATION_DATE_ABBR: i32 = 15799;
pub const IDS_PAYMENTS_LOADING_MESSAGE: i32 = 15800;
pub const IDS_PAYMENTS_PROCESSING_MESSAGE: i32 = 15801;
pub const IDS_PAYMENTS_CHECKING_OPTION: i32 = 15802;
pub const IDS_PAYMENTS_UPDATED_LABEL: i32 = 15803;
pub const IDS_PAYMENTS_CREDIT_CARDS_ARE_ACCEPTED_LABEL: i32 = 15804;
pub const IDS_PAYMENTS_DEBIT_CARDS_ARE_ACCEPTED_LABEL: i32 = 15805;
pub const IDS_PAYMENTS_PREPAID_CARDS_ARE_ACCEPTED_LABEL: i32 = 15806;
pub const IDS_PAYMENTS_CREDIT_DEBIT_CARDS_ARE_ACCEPTED_LABEL: i32 = 15807;
pub const IDS_PAYMENTS_CREDIT_PREPAID_CARDS_ARE_ACCEPTED_LABEL: i32 = 15808;
pub const IDS_PAYMENTS_DEBIT_PREPAID_CARDS_ARE_ACCEPTED_LABEL: i32 = 15809;
pub const IDS_PAYMENTS_ERROR_MESSAGE: i32 = 15810;
pub const IDS_PAYMENTS_CARD_AND_ADDRESS_SETTINGS: i32 = 15811;
pub const IDS_PAYMENTS_CARD_AND_ADDRESS_SETTINGS_SIGNED_IN: i32 = 15812;
pub const IDS_PAYMENTS_CARD_AND_ADDRESS_SETTINGS_SIGNED_OUT: i32 = 15813;
pub const IDS_SETTINGS_CAN_MAKE_PAYMENT_TOGGLE_LABEL: i32 = 15814;
pub const IDS_PAYMENTS_REQUIRED_FIELD_MESSAGE: i32 = 15833;
pub const IDS_PAYMENTS_VALIDATION_INVALID_NAME: i32 = 15834;
pub const IDS_PAYMENTS_VALIDATION_INVALID_CREDIT_CARD_EXPIRATION_YEAR: i32 = 15835;
pub const IDS_PAYMENTS_VALIDATION_INVALID_CREDIT_CARD_EXPIRATION_MONTH: i32 = 15836;
pub const IDS_PAYMENTS_VALIDATION_INVALID_CREDIT_CARD_EXPIRED: i32 = 15837;
pub const IDS_PAYMENTS_VALIDATION_UNSUPPORTED_CREDIT_CARD_TYPE: i32 = 15838;
pub const IDS_PAYMENTS_PHONE_INVALID_VALIDATION_MESSAGE: i32 = 15839;
pub const IDS_PAYMENTS_EMAIL_INVALID_VALIDATION_MESSAGE: i32 = 15840;
pub const IDS_PAYMENTS_CARD_NUMBER_INVALID_VALIDATION_MESSAGE: i32 = 15841;
pub const IDS_PAYMENTS_CARD_EXPIRATION_INVALID_VALIDATION_MESSAGE: i32 = 15842;
pub const IDS_PAYMENTS_INVALID_ADDRESS: i32 = 15843;
pub const IDS_PAYMENTS_BILLING_ADDRESS_REQUIRED: i32 = 15844;
pub const IDS_PAYMENTS_NAME_ON_CARD_REQUIRED: i32 = 15845;
pub const IDS_PAYMENTS_CARD_BILLING_ADDRESS_REQUIRED: i32 = 15846;
pub const IDS_PAYMENTS_MORE_INFORMATION_REQUIRED: i32 = 15847;
pub const IDS_PAYMENTS_PHONE_NUMBER_REQUIRED: i32 = 15848;
pub const IDS_PAYMENTS_RECIPIENT_REQUIRED: i32 = 15849;
pub const IDS_PAYMENTS_EMAIL_REQUIRED: i32 = 15850;
pub const IDS_PAYMENTS_NAME_REQUIRED: i32 = 15851;
pub const IDS_PREF_EDIT_DIALOG_FIELD_REQUIRED_VALIDATION_MESSAGE: i32 = 15852;
pub const IDS_PAYMENT_REQUEST_ORDER_SUMMARY_SECTION_TOTAL_FORMAT: i32 = 15853;
pub const IDS_PAYMENT_REQUEST_ORDER_SUMMARY_SHEET_TOTAL_FORMAT: i32 = 15854;
pub const IDS_PAYMENT_REQUEST_ORDER_SUMMARY_MORE_ITEMS: i32 = 15855;
pub const IDS_PAYMENT_REQUEST_ORDER_SUMMARY_MULTIPLE_CURRENCY_INDICATOR: i32 = 15856;
pub const IDS_PAYMENTS_SELECT_SHIPPING_ADDRESS_FOR_SHIPPING_METHODS: i32 = 15857;
pub const IDS_PAYMENTS_UNSUPPORTED_SHIPPING_ADDRESS: i32 = 15858;
pub const IDS_PAYMENTS_UNSUPPORTED_SHIPPING_OPTION: i32 = 15859;
pub const IDS_PAYMENTS_SELECT_DELIVERY_ADDRESS_FOR_DELIVERY_METHODS: i32 = 15860;
pub const IDS_PAYMENTS_UNSUPPORTED_DELIVERY_ADDRESS: i32 = 15861;
pub const IDS_PAYMENTS_UNSUPPORTED_DELIVERY_OPTION: i32 = 15862;
pub const IDS_PAYMENTS_SELECT_PICKUP_ADDRESS_FOR_PICKUP_METHODS: i32 = 15863;
pub const IDS_PAYMENTS_UNSUPPORTED_PICKUP_ADDRESS: i32 = 15864;
pub const IDS_PAYMENTS_UNSUPPORTED_PICKUP_OPTION: i32 = 15865;
pub const IDS_PAYMENTS_ANDROID_APP_ERROR: i32 = 15866;
pub const IDS_UTILITY_PROCESS_PAYMENT_MANIFEST_PARSER_NAME: i32 = 15867;
pub const IDS_PAYMENT_REQUEST_PAYMENT_METHODS_PREVIEW: i32 = 15869;
pub const IDS_PAYMENT_REQUEST_SHIPPING_ADDRESSES_PREVIEW: i32 = 15870;
pub const IDS_PAYMENT_REQUEST_SHIPPING_OPTIONS_PREVIEW: i32 = 15871;
pub const IDS_PAYMENT_REQUEST_CONTACTS_PREVIEW: i32 = 15872;
pub const IDS_PAYMENTS_BACK: i32 = 15873;
pub const IDS_PAYMENTS_EDIT: i32 = 15874;
pub const IDS_PAYMENTS_ROW_ACCESSIBLE_NAME_FORMAT: i32 = 15875;
pub const IDS_PAYMENTS_ROW_ACCESSIBLE_NAME_SELECTED_FORMAT: i32 = 15876;
pub const IDS_PAYMENTS_PROFILE_LABELS_ACCESSIBLE_FORMAT: i32 = 15877;
pub const IDS_PAYMENTS_ACCESSIBLE_LABEL_WITH_ERROR: i32 = 15878;
pub const IDS_PAYMENTS_ORDER_SUMMARY_ACCESSIBLE_LABEL: i32 = 15879;
pub const IDS_PDF_NEED_PASSWORD: i32 = 15880;
pub const IDS_PDF_PASSWORD_DIALOG_TITLE: i32 = 15881;
pub const IDS_PDF_PASSWORD_SUBMIT: i32 = 15882;
pub const IDS_PDF_PASSWORD_INVALID: i32 = 15883;
pub const IDS_PDF_PAGE_LOADING: i32 = 15884;
pub const IDS_PDF_ERROR_DIALOG_TITLE: i32 = 15885;
pub const IDS_PDF_PAGE_LOAD_FAILED: i32 = 15886;
pub const IDS_PDF_PAGE_RELOAD_BUTTON: i32 = 15887;
pub const IDS_PDF_BOOKMARKS: i32 = 15888;
pub const IDS_PDF_TOOLTIP_ROTATE_CW: i32 = 15889;
pub const IDS_PDF_TOOLTIP_DOWNLOAD: i32 = 15890;
pub const IDS_PDF_TOOLTIP_PRINT: i32 = 15891;
pub const IDS_PDF_TOOLTIP_FIT_PAGE: i32 = 15892;
pub const IDS_PDF_TOOLTIP_FIT_WIDTH: i32 = 15893;
pub const IDS_PDF_TOOLTIP_ZOOM_IN: i32 = 15894;
pub const IDS_PDF_TOOLTIP_ZOOM_OUT: i32 = 15895;
pub const IDS_PDF_LABEL_PAGE_NUMBER: i32 = 15896;
pub const IDS_PDF_PAGE_INDEX: i32 = 15897;
pub const IDS_POLICY_DM_STATUS_SUCCESS: i32 = 15949;
pub const IDS_POLICY_DM_STATUS_REQUEST_INVALID: i32 = 15950;
pub const IDS_POLICY_DM_STATUS_REQUEST_FAILED: i32 = 15951;
pub const IDS_POLICY_DM_STATUS_TEMPORARY_UNAVAILABLE: i32 = 15952;
pub const IDS_POLICY_DM_STATUS_HTTP_STATUS_ERROR: i32 = 15953;
pub const IDS_POLICY_DM_STATUS_RESPONSE_DECODING_ERROR: i32 = 15954;
pub const IDS_POLICY_DM_STATUS_SERVICE_MANAGEMENT_NOT_SUPPORTED: i32 = 15955;
pub const IDS_POLICY_DM_STATUS_SERVICE_DEVICE_NOT_FOUND: i32 = 15956;
pub const IDS_POLICY_DM_STATUS_SERVICE_MANAGEMENT_TOKEN_INVALID: i32 = 15957;
pub const IDS_POLICY_DM_STATUS_SERVICE_ACTIVATION_PENDING: i32 = 15958;
pub const IDS_POLICY_DM_STATUS_SERVICE_INVALID_SERIAL_NUMBER: i32 = 15959;
pub const IDS_POLICY_DM_STATUS_SERVICE_DEVICE_ID_CONFLICT: i32 = 15960;
pub const IDS_POLICY_DM_STATUS_SERVICE_MISSING_LICENSES: i32 = 15961;
pub const IDS_POLICY_DM_STATUS_SERVICE_DEPROVISIONED: i32 = 15962;
pub const IDS_POLICY_DM_STATUS_SERVICE_POLICY_NOT_FOUND: i32 = 15963;
pub const IDS_POLICY_DM_STATUS_UNKNOWN_ERROR: i32 = 15964;
pub const IDS_POLICY_DM_STATUS_SERVICE_DOMAIN_MISMATCH: i32 = 15965;
pub const IDS_POLICY_DM_STATUS_CANNOT_SIGN_REQUEST: i32 = 15966;
pub const IDS_POLICY_DM_STATUS_REQUEST_TOO_LARGE: i32 = 15967;
pub const IDS_POLICY_DM_STATUS_CONSUMER_ACCOUNT_WITH_PACKAGED_LICENSE: i32 = 15968;
pub const IDS_POLICY_VALIDATION_OK: i32 = 15969;
pub const IDS_POLICY_VALIDATION_BAD_INITIAL_SIGNATURE: i32 = 15970;
pub const IDS_POLICY_VALIDATION_BAD_SIGNATURE: i32 = 15971;
pub const IDS_POLICY_VALIDATION_ERROR_CODE_PRESENT: i32 = 15972;
pub const IDS_POLICY_VALIDATION_PAYLOAD_PARSE_ERROR: i32 = 15973;
pub const IDS_POLICY_VALIDATION_WRONG_POLICY_TYPE: i32 = 15974;
pub const IDS_POLICY_VALIDATION_WRONG_SETTINGS_ENTITY_ID: i32 = 15975;
pub const IDS_POLICY_VALIDATION_BAD_TIMESTAMP: i32 = 15976;
pub const IDS_POLICY_VALIDATION_BAD_DM_TOKEN: i32 = 15977;
pub const IDS_POLICY_VALIDATION_BAD_DEVICE_ID: i32 = 15978;
pub const IDS_POLICY_VALIDATION_BAD_USER: i32 = 15979;
pub const IDS_POLICY_VALIDATION_POLICY_PARSE_ERROR: i32 = 15980;
pub const IDS_POLICY_VALIDATION_BAD_KEY_VERIFICATION_SIGNATURE: i32 = 15981;
pub const IDS_POLICY_VALIDATION_VALUE_WARNING: i32 = 15982;
pub const IDS_POLICY_VALIDATION_VALUE_ERROR: i32 = 15983;
pub const IDS_POLICY_VALIDATION_UNKNOWN_ERROR: i32 = 15984;
pub const IDS_POLICY_STORE_STATUS_OK: i32 = 15985;
pub const IDS_POLICY_STORE_STATUS_LOAD_ERROR: i32 = 15986;
pub const IDS_POLICY_STORE_STATUS_STORE_ERROR: i32 = 15987;
pub const IDS_POLICY_STORE_STATUS_PARSE_ERROR: i32 = 15988;
pub const IDS_POLICY_STORE_STATUS_SERIALIZE_ERROR: i32 = 15989;
pub const IDS_POLICY_STORE_STATUS_VALIDATION_ERROR: i32 = 15990;
pub const IDS_POLICY_STORE_STATUS_BAD_STATE: i32 = 15991;
pub const IDS_POLICY_STORE_STATUS_UNKNOWN_ERROR: i32 = 15992;
pub const IDS_POLICY_ASSOCIATION_STATE_ACTIVE: i32 = 15993;
pub const IDS_POLICY_ASSOCIATION_STATE_UNMANAGED: i32 = 15994;
pub const IDS_POLICY_ASSOCIATION_STATE_DEPROVISIONED: i32 = 15995;
pub const IDS_POLICY_TYPE_ERROR: i32 = 15996;
pub const IDS_POLICY_OUT_OF_RANGE_ERROR: i32 = 15997;
pub const IDS_POLICY_VALUE_FORMAT_ERROR: i32 = 15998;
pub const IDS_POLICY_DEFAULT_SEARCH_DISABLED: i32 = 15999;
pub const IDS_POLICY_NOT_SPECIFIED_ERROR: i32 = 16000;
pub const IDS_POLICY_SUBKEY_ERROR: i32 = 16001;
pub const IDS_POLICY_LIST_ENTRY_ERROR: i32 = 16002;
pub const IDS_POLICY_SCHEMA_VALIDATION_ERROR: i32 = 16003;
pub const IDS_POLICY_INVALID_JSON_ERROR: i32 = 16004;
pub const IDS_POLICY_INVALID_SEARCH_URL_ERROR: i32 = 16005;
pub const IDS_POLICY_INVALID_PROXY_MODE_ERROR: i32 = 16006;
pub const IDS_POLICY_INVALID_UPDATE_URL_ERROR: i32 = 16007;
pub const IDS_POLICY_OFF_CWS_URL_ERROR: i32 = 16008;
pub const IDS_POLICY_HOMEPAGE_LOCATION_ERROR: i32 = 16009;
pub const IDS_POLICY_PROXY_MODE_DISABLED_ERROR: i32 = 16010;
pub const IDS_POLICY_PROXY_MODE_AUTO_DETECT_ERROR: i32 = 16011;
pub const IDS_POLICY_PROXY_MODE_PAC_URL_ERROR: i32 = 16012;
pub const IDS_POLICY_PROXY_MODE_FIXED_SERVERS_ERROR: i32 = 16013;
pub const IDS_POLICY_PROXY_MODE_SYSTEM_ERROR: i32 = 16014;
pub const IDS_POLICY_PROXY_BOTH_SPECIFIED_ERROR: i32 = 16015;
pub const IDS_POLICY_PROXY_NEITHER_SPECIFIED_ERROR: i32 = 16016;
pub const IDS_POLICY_OVERRIDDEN: i32 = 16017;
pub const IDS_POLICY_DEPRECATED: i32 = 16018;
pub const IDS_POLICY_VALUE_DEPRECATED: i32 = 16019;
pub const IDS_POLICY_LEVEL_ERROR: i32 = 16024;
pub const IDS_POLICY_OK: i32 = 16025;
pub const IDS_POLICY_UNSET: i32 = 16026;
pub const IDS_POLICY_UNKNOWN: i32 = 16027;
pub const IDS_POLICY_TITLE: i32 = 16028;
pub const IDS_POLICY_FILTER_PLACEHOLDER: i32 = 16029;
pub const IDS_POLICY_RELOAD_POLICIES: i32 = 16030;
pub const IDS_EXPORT_POLICIES_JSON: i32 = 16031;
pub const IDS_POLICY_STATUS: i32 = 16032;
pub const IDS_POLICY_STATUS_DEVICE: i32 = 16033;
pub const IDS_POLICY_STATUS_USER: i32 = 16034;
pub const IDS_POLICY_STATUS_MACHINE: i32 = 16035;
pub const IDS_POLICY_LABEL_ENTERPRISE_ENROLLMENT_DOMAIN: i32 = 16036;
pub const IDS_POLICY_LABEL_ENTERPRISE_DISPLAY_DOMAIN: i32 = 16037;
pub const IDS_POLICY_LABEL_MACHINE_ENROLLMENT_DOMAIN: i32 = 16038;
pub const IDS_POLICY_LABEL_MACHINE_ENROLLMENT_TOKEN: i32 = 16039;
pub const IDS_POLICY_LABEL_MACHINE_ENROLLMENT_DEVICE_ID: i32 = 16040;
pub const IDS_POLICY_LABEL_MACHINE_ENROLLMENT_MACHINE_NAME: i32 = 16041;
pub const IDS_POLICY_LABEL_USERNAME: i32 = 16042;
pub const IDS_POLICY_LABEL_GAIA_ID: i32 = 16043;
pub const IDS_POLICY_LABEL_CLIENT_ID: i32 = 16044;
pub const IDS_POLICY_LABEL_ASSET_ID: i32 = 16045;
pub const IDS_POLICY_LABEL_LOCATION: i32 = 16046;
pub const IDS_POLICY_LABEL_DIRECTORY_API_ID: i32 = 16047;
pub const IDS_POLICY_LABEL_TIME_SINCE_LAST_REFRESH: i32 = 16048;
pub const IDS_POLICY_NOT_SPECIFIED: i32 = 16049;
pub const IDS_POLICY_LABEL_PUSH_POLICIES: i32 = 16050;
pub const IDS_POLICY_PUSH_POLICIES_ON: i32 = 16051;
pub const IDS_POLICY_PUSH_POLICIES_OFF: i32 = 16052;
pub const IDS_POLICY_NEVER_FETCHED: i32 = 16053;
pub const IDS_POLICY_LABEL_REFRESH_INTERVAL: i32 = 16054;
pub const IDS_POLICY_LABEL_CONFLICT: i32 = 16055;
pub const IDS_POLICY_LABEL_ERROR: i32 = 16056;
pub const IDS_POLICY_LABEL_IGNORED: i32 = 16057;
pub const IDS_POLICY_LABEL_VALUE: i32 = 16058;
pub const IDS_POLICY_LABEL_STATUS: i32 = 16059;
pub const IDS_POLICY_SHOW_UNSET: i32 = 16060;
pub const IDS_POLICY_NO_POLICIES_SET: i32 = 16061;
pub const IDS_POLICY_HEADER_SCOPE: i32 = 16062;
pub const IDS_POLICY_HEADER_LEVEL: i32 = 16063;
pub const IDS_POLICY_HEADER_NAME: i32 = 16064;
pub const IDS_POLICY_HEADER_VALUE: i32 = 16065;
pub const IDS_POLICY_HEADER_STATUS: i32 = 16066;
pub const IDS_POLICY_HEADER_SOURCE: i32 = 16067;
pub const IDS_POLICY_HEADER_WARNING: i32 = 16068;
pub const IDS_POLICY_SHOW_MORE: i32 = 16069;
pub const IDS_POLICY_SHOW_LESS: i32 = 16070;
pub const IDS_POLICY_LEARN_MORE: i32 = 16071;
pub const IDS_POLICY_SCOPE_USER: i32 = 16072;
pub const IDS_POLICY_SCOPE_DEVICE: i32 = 16073;
pub const IDS_POLICY_LEVEL_RECOMMENDED: i32 = 16074;
pub const IDS_POLICY_LEVEL_MANDATORY: i32 = 16075;
pub const IDS_POLICY_SOURCE_ENTERPRISE_DEFAULT: i32 = 16076;
pub const IDS_POLICY_SOURCE_CLOUD: i32 = 16077;
pub const IDS_POLICY_SOURCE_MERGED: i32 = 16078;
pub const IDS_POLICY_SOURCE_ACTIVE_DIRECTORY: i32 = 16079;
pub const IDS_POLICY_SOURCE_PLATFORM: i32 = 16080;
pub const IDS_POLICY_SOURCE_DEVICE_LOCAL_ACCOUNT_OVERRIDE: i32 = 16081;
pub const IDS_POLICY_RISK_TAG_FULL_ADMIN_ACCESS: i32 = 16082;
pub const IDS_POLICY_RISK_TAG_SYSTEM_SECURITY: i32 = 16083;
pub const IDS_POLICY_RISK_TAG_WEBSITE_SHARING: i32 = 16084;
pub const IDS_POLICY_RISK_TAG_ADMIN_SHARING: i32 = 16085;
pub const IDS_POLICY_RISK_TAG_FILTERING: i32 = 16086;
pub const IDS_POLICY_RISK_TAG_LOCAL_DATA_ACCESS: i32 = 16087;
pub const IDS_POLICY_RISK_TAG_GOOGLE_SHARING: i32 = 16088;
pub const IDS_POLICY_SHOW_EXPANDED_STATUS: i32 = 16089;
pub const IDS_POLICY_HIDE_EXPANDED_STATUS: i32 = 16090;
pub const IDS_POLICY_LIST_MERGING_WRONG_POLICY_TYPE_SPECIFIED: i32 = 16091;
pub const IDS_POLICY_DICTIONARY_MERGING_WRONG_POLICY_TYPE_SPECIFIED: i32 = 16092;
pub const IDS_POLICY_DICTIONARY_MERGING_POLICY_NOT_ALLOWED: i32 = 16093;
pub const IDS_POLICY_CONFLICT_SAME_VALUE: i32 = 16094;
pub const IDS_POLICY_CONFLICT_DIFF_VALUE: i32 = 16095;
pub const IDS_POLICY_MIGRATED_OLD_POLICY: i32 = 16096;
pub const IDS_POLICY_MIGRATED_NEW_POLICY: i32 = 16097;
pub const IDS_POLICY_BLOCKED: i32 = 16098;
pub const IDS_POLICY_IGNORED_BY_GROUP_MERGING: i32 = 16099;
pub const IDS_POLICY_INVALID_VALUE: i32 = 16100;
pub const IDS_POLICY_SPELLCHECK_UNKNOWN_LANGUAGE: i32 = 16101;
pub const IDS_POLICY_SPELLCHECK_BLACKLIST_IGNORE: i32 = 16102;
pub const IDS_POLICY_LABEL_IS_AFFILIATED: i32 = 16103;
pub const IDS_POLICY_IS_AFFILIATED_YES: i32 = 16104;
pub const IDS_POLICY_IS_AFFILIATED_NO: i32 = 16105;
pub const IDS_POLICY_LABEL_IS_OFFHOURS_ACTIVE: i32 = 16106;
pub const IDS_POLICY_OFFHOURS_ACTIVE: i32 = 16107;
pub const IDS_POLICY_OFFHOURS_NOT_ACTIVE: i32 = 16108;
pub const IDS_PRINT_PREVIEW_FRIENDLY_WIN_NETWORK_PRINTER_NAME: i32 = 16232;
pub const IDS_PDF_COMPOSITOR_SERVICE_DISPLAY_NAME: i32 = 16233;
pub const IDS_RESET_PASSWORD_TITLE: i32 = 16234;
pub const IDS_RESET_PASSWORD_WARNING_HEADING: i32 = 16235;
pub const IDS_RESET_PASSWORD_HEADING: i32 = 16236;
pub const IDS_RESET_PASSWORD_WARNING_EXPLANATION_PARAGRAPH: i32 = 16237;
pub const IDS_RESET_PASSWORD_WARNING_EXPLANATION_PARAGRAPH_WITH_ORG_NAME: i32 = 16238;
pub const IDS_RESET_PASSWORD_BUTTON: i32 = 16239;
pub const IDS_RESET_PASSWORD_EXPLANATION_PARAGRAPH: i32 = 16240;
pub const IDS_RESET_PASSWORD_EXPLANATION_PARAGRAPH_WITH_ORG_NAME: i32 = 16241;
pub const IDS_SB_UNDER_CONSTRUCTION: i32 = 16242;
pub const IDS_SSL_OPEN_DETAILS_BUTTON: i32 = 16243;
pub const IDS_SSL_CLOSE_DETAILS_BUTTON: i32 = 16244;
pub const IDS_CAPTIVE_PORTAL_AUTHORIZATION_DIALOG_NAME: i32 = 16245;
pub const IDS_CAPTIVE_PORTAL_HEADING_WIRED: i32 = 16246;
pub const IDS_CAPTIVE_PORTAL_HEADING_WIFI: i32 = 16247;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_WIRED: i32 = 16248;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_WIFI: i32 = 16249;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_WIFI_SSID: i32 = 16250;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_NO_LOGIN_URL_WIRED: i32 = 16251;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_NO_LOGIN_URL_WIFI: i32 = 16252;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_NO_LOGIN_URL_WIFI_SSID: i32 = 16253;
pub const IDS_CAPTIVE_PORTAL_BUTTON_OPEN_LOGIN_PAGE: i32 = 16254;
pub const IDS_MITM_SOFTWARE_HEADING: i32 = 16255;
pub const IDS_MITM_SOFTWARE_PRIMARY_PARAGRAPH_ENTERPRISE: i32 = 16256;
pub const IDS_MITM_SOFTWARE_PRIMARY_PARAGRAPH_NONENTERPRISE: i32 = 16257;
pub const IDS_MITM_SOFTWARE_EXPLANATION_ENTERPRISE: i32 = 16258;
pub const IDS_MITM_SOFTWARE_EXPLANATION_NONENTERPRISE: i32 = 16259;
pub const IDS_MITM_SOFTWARE_EXPLANATION: i32 = 16260;
pub const IDS_LOOKALIKE_URL_TITLE: i32 = 16261;
pub const IDS_LOOKALIKE_URL_HEADING: i32 = 16262;
pub const IDS_LOOKALIKE_URL_IGNORE: i32 = 16263;
pub const IDS_LOOKALIKE_URL_CONTINUE: i32 = 16264;
pub const IDS_LOOKALIKE_URL_PRIMARY_PARAGRAPH: i32 = 16265;
pub const IDS_CLOCK_ERROR_TITLE: i32 = 16266;
pub const IDS_CLOCK_ERROR_AHEAD_HEADING: i32 = 16267;
pub const IDS_CLOCK_ERROR_BEHIND_HEADING: i32 = 16268;
pub const IDS_CLOCK_ERROR_UPDATE_DATE_AND_TIME: i32 = 16269;
pub const IDS_CLOCK_ERROR_PRIMARY_PARAGRAPH: i32 = 16270;
pub const IDS_CLOCK_ERROR_EXPLANATION: i32 = 16271;
pub const IDS_SSL_V2_TITLE: i32 = 16272;
pub const IDS_SSL_V2_HEADING: i32 = 16273;
pub const IDS_SSL_V2_PRIMARY_PARAGRAPH: i32 = 16274;
pub const IDS_SSL_V2_RECURRENT_ERROR_PARAGRAPH: i32 = 16275;
pub const IDS_SSL_OVERRIDABLE_SAFETY_BUTTON: i32 = 16276;
pub const IDS_SSL_OVERRIDABLE_PROCEED_PARAGRAPH: i32 = 16277;
pub const IDS_SSL_RELOAD: i32 = 16278;
pub const IDS_SSL_NONOVERRIDABLE_PINNED: i32 = 16279;
pub const IDS_SSL_NONOVERRIDABLE_HSTS: i32 = 16280;
pub const IDS_SSL_NONOVERRIDABLE_REVOKED: i32 = 16281;
pub const IDS_SSL_NONOVERRIDABLE_MORE: i32 = 16282;
pub const IDS_SSL_NONOVERRIDABLE_INVALID: i32 = 16283;
pub const IDS_SAFEBROWSING_V3_TITLE: i32 = 16284;
pub const IDS_SAFEBROWSING_V3_OPEN_DETAILS_BUTTON: i32 = 16285;
pub const IDS_SAFEBROWSING_V3_CLOSE_DETAILS_BUTTON: i32 = 16286;
pub const IDS_SAFEBROWSING_OVERRIDABLE_SAFETY_BUTTON: i32 = 16287;
pub const IDS_MALWARE_V3_HEADING: i32 = 16288;
pub const IDS_MALWARE_V3_PRIMARY_PARAGRAPH: i32 = 16289;
pub const IDS_MALWARE_V3_EXPLANATION_PARAGRAPH: i32 = 16290;
pub const IDS_MALWARE_V3_EXPLANATION_PARAGRAPH_SUBRESOURCE: i32 = 16291;
pub const IDS_MALWARE_V3_PROCEED_PARAGRAPH: i32 = 16292;
pub const IDS_SAFE_BROWSING_PRIVACY_POLICY_PAGE: i32 = 16293;
pub const IDS_SAFE_BROWSING_SCOUT_REPORTING_AGREE: i32 = 16294;
pub const IDS_HARMFUL_V3_HEADING: i32 = 16295;
pub const IDS_HARMFUL_V3_PRIMARY_PARAGRAPH: i32 = 16296;
pub const IDS_HARMFUL_V3_EXPLANATION_PARAGRAPH: i32 = 16297;
pub const IDS_HARMFUL_V3_PROCEED_PARAGRAPH: i32 = 16298;
pub const IDS_PHISHING_V4_HEADING: i32 = 16299;
pub const IDS_PHISHING_V4_PRIMARY_PARAGRAPH: i32 = 16300;
pub const IDS_PHISHING_V4_EXPLANATION_PARAGRAPH: i32 = 16301;
pub const IDS_PHISHING_V4_PROCEED_AND_REPORT_PARAGRAPH: i32 = 16302;
pub const IDS_MALWARE_WEBVIEW_HEADING: i32 = 16303;
pub const IDS_MALWARE_WEBVIEW_EXPLANATION_PARAGRAPH: i32 = 16304;
pub const IDS_PHISHING_WEBVIEW_HEADING: i32 = 16305;
pub const IDS_PHISHING_WEBVIEW_EXPLANATION_PARAGRAPH: i32 = 16306;
pub const IDS_HARMFUL_WEBVIEW_HEADING: i32 = 16307;
pub const IDS_HARMFUL_WEBVIEW_EXPLANATION_PARAGRAPH: i32 = 16308;
pub const IDS_BILLING_WEBVIEW_HEADING: i32 = 16309;
pub const IDS_BILLING_WEBVIEW_EXPLANATION_PARAGRAPH: i32 = 16310;
pub const IDS_CONNECTION_HELP_SHOW_MORE: i32 = 16311;
pub const IDS_CONNECTION_HELP_SHOW_LESS: i32 = 16312;
pub const IDS_CONNECTION_HELP_TITLE: i32 = 16313;
pub const IDS_CONNECTION_HELP_HEADING: i32 = 16314;
pub const IDS_CONNECTION_HELP_GENERAL_HELP: i32 = 16315;
pub const IDS_CONNECTION_HELP_SPECIFIC_ERROR_HEADING: i32 = 16316;
pub const IDS_CONNECTION_HELP_CONNECTION_NOT_PRIVATE_TITLE: i32 = 16317;
pub const IDS_CONNECTION_HELP_CONNECT_TO_NETWORK_TITLE: i32 = 16318;
pub const IDS_CONNECTION_HELP_INCORRECT_CLOCK_TITLE: i32 = 16319;
pub const IDS_CONNECTION_HELP_CONNECTION_NOT_PRIVATE_DETAILS: i32 = 16320;
pub const IDS_CONNECTION_HELP_CONNECT_TO_NETWORK_DETAILS: i32 = 16321;
pub const IDS_CONNECTION_HELP_INCORRECT_CLOCK_DETAILS: i32 = 16322;
pub const IDS_CONNECTION_HELP_MITM_SOFTWARE_TITLE: i32 = 16323;
pub const IDS_CONNECTION_HELP_MITM_SOFTWARE_DETAILS: i32 = 16324;
pub const IDS_BILLING_HEADING: i32 = 16325;
pub const IDS_BILLING_PRIMARY_PARAGRAPH: i32 = 16326;
pub const IDS_BILLING_PRIMARY_BUTTON: i32 = 16327;
pub const IDS_BILLING_PROCEED_BUTTON: i32 = 16328;
pub const IDS_ORIGIN_POLICY_TITLE: i32 = 16329;
pub const IDS_ORIGIN_POLICY_HEADING: i32 = 16330;
pub const IDS_ORIGIN_POLICY_INFO: i32 = 16331;
pub const IDS_ORIGIN_POLICY_INFO2: i32 = 16332;
pub const IDS_ORIGIN_POLICY_BUTTON: i32 = 16333;
pub const IDS_ORIGIN_POLICY_DETAILS: i32 = 16334;
pub const IDS_ORIGIN_POLICY_EXPLANATION_CANNOT_LOAD: i32 = 16335;
pub const IDS_ORIGIN_POLICY_EXPLANATION_SHOULD_NOT_REDIRECT: i32 = 16336;
pub const IDS_ORIGIN_POLICY_EXPLANATION_OTHER: i32 = 16337;
pub const IDS_ORIGIN_POLICY_FINAL_PARAGRAPH: i32 = 16338;
pub const IDS_ORIGIN_POLICY_CLOSE: i32 = 16339;
pub const IDS_ERROR_PAGE_SUMMARY: i32 = 16340;
pub const IDS_NON_CRYPTO_SECURE_SUMMARY: i32 = 16341;
pub const IDS_HTTP_NONSECURE_SUMMARY: i32 = 16342;
pub const IDS_EDITED_NONSECURE: i32 = 16343;
pub const IDS_EDITED_NONSECURE_DESCRIPTION: i32 = 16344;
pub const IDS_SAFEBROWSING_WARNING: i32 = 16345;
pub const IDS_SAFEBROWSING_WARNING_SUMMARY: i32 = 16346;
pub const IDS_SAFEBROWSING_WARNING_DESCRIPTION: i32 = 16347;
pub const IDS_SHA1: i32 = 16348;
pub const IDS_SHA1_DESCRIPTION: i32 = 16349;
pub const IDS_SUBJECT_ALT_NAME_MISSING: i32 = 16350;
pub const IDS_SUBJECT_ALT_NAME_MISSING_DESCRIPTION: i32 = 16351;
pub const IDS_CERTIFICATE_TITLE: i32 = 16352;
pub const IDS_CERTIFICATE_CHAIN_ERROR: i32 = 16353;
pub const IDS_CERTIFICATE_CHAIN_ERROR_DESCRIPTION_FORMAT: i32 = 16354;
pub const IDS_VALID_SERVER_CERTIFICATE: i32 = 16355;
pub const IDS_VALID_SERVER_CERTIFICATE_DESCRIPTION: i32 = 16356;
pub const IDS_CERTIFICATE_EXPIRING_SOON: i32 = 16357;
pub const IDS_CERTIFICATE_EXPIRING_SOON_DESCRIPTION: i32 = 16358;
pub const IDS_SSL_CONNECTION_TITLE: i32 = 16359;
pub const IDS_SECURE_SSL_SUMMARY: i32 = 16360;
pub const IDS_PRIVATE_KEY_PINNING_BYPASSED: i32 = 16361;
pub const IDS_PRIVATE_KEY_PINNING_BYPASSED_DESCRIPTION: i32 = 16362;
pub const IDS_SSL_DESCRIPTION: i32 = 16363;
pub const IDS_OBSOLETE_SSL_SUMMARY: i32 = 16364;
pub const IDS_CIPHER_WITH_MAC: i32 = 16365;
pub const IDS_SSL_KEY_EXCHANGE_WITH_GROUP: i32 = 16366;
pub const IDS_SSL_RECOMMEND_PROTOCOL: i32 = 16367;
pub const IDS_SSL_RECOMMEND_KEY_EXCHANGE: i32 = 16368;
pub const IDS_SSL_RECOMMEND_CIPHER: i32 = 16369;
pub const IDS_SSL_RECOMMEND_SIGNATURE: i32 = 16370;
pub const IDS_RESOURCE_SECURITY_TITLE: i32 = 16371;
pub const IDS_SECURE_RESOURCES_SUMMARY: i32 = 16372;
pub const IDS_SECURE_RESOURCES_DESCRIPTION: i32 = 16373;
pub const IDS_MIXED_PASSIVE_CONTENT_SUMMARY: i32 = 16374;
pub const IDS_MIXED_PASSIVE_CONTENT_DESCRIPTION: i32 = 16375;
pub const IDS_MIXED_ACTIVE_CONTENT_SUMMARY: i32 = 16376;
pub const IDS_MIXED_ACTIVE_CONTENT_DESCRIPTION: i32 = 16377;
pub const IDS_CERT_ERROR_PASSIVE_CONTENT_SUMMARY: i32 = 16378;
pub const IDS_CERT_ERROR_PASSIVE_CONTENT_DESCRIPTION: i32 = 16379;
pub const IDS_CERT_ERROR_ACTIVE_CONTENT_SUMMARY: i32 = 16380;
pub const IDS_CERT_ERROR_ACTIVE_CONTENT_DESCRIPTION: i32 = 16381;
pub const IDS_NON_SECURE_FORM_SUMMARY: i32 = 16382;
pub const IDS_NON_SECURE_FORM_DESCRIPTION: i32 = 16383;
pub const IDS_CERT_ERROR_NO_SUBJECT_ALTERNATIVE_NAMES_DETAILS: i32 = 16384;
pub const IDS_CERT_ERROR_COMMON_NAME_INVALID_DETAILS: i32 = 16385;
pub const IDS_CERT_ERROR_COMMON_NAME_INVALID_DESCRIPTION: i32 = 16386;
pub const IDS_CERT_ERROR_EXPIRED_DETAILS: i32 = 16387;
pub const IDS_CERT_ERROR_EXPIRED_DESCRIPTION: i32 = 16388;
pub const IDS_CERT_ERROR_NOT_YET_VALID_DETAILS: i32 = 16389;
pub const IDS_CERT_ERROR_NOT_YET_VALID_DESCRIPTION: i32 = 16390;
pub const IDS_CERT_ERROR_NOT_VALID_AT_THIS_TIME_DETAILS: i32 = 16391;
pub const IDS_CERT_ERROR_NOT_VALID_AT_THIS_TIME_DESCRIPTION: i32 = 16392;
pub const IDS_CERT_ERROR_AUTHORITY_INVALID_DESCRIPTION: i32 = 16393;
pub const IDS_CERT_ERROR_CONTAINS_ERRORS_DETAILS: i32 = 16394;
pub const IDS_CERT_ERROR_CONTAINS_ERRORS_DESCRIPTION: i32 = 16395;
pub const IDS_CERT_ERROR_UNABLE_TO_CHECK_REVOCATION_DETAILS: i32 = 16396;
pub const IDS_CERT_ERROR_UNABLE_TO_CHECK_REVOCATION_DESCRIPTION: i32 = 16397;
pub const IDS_CERT_ERROR_NO_REVOCATION_MECHANISM_DETAILS: i32 = 16398;
pub const IDS_CERT_ERROR_NO_REVOCATION_MECHANISM_DESCRIPTION: i32 = 16399;
pub const IDS_CERT_ERROR_REVOKED_CERT_DETAILS: i32 = 16400;
pub const IDS_CERT_ERROR_REVOKED_CERT_DESCRIPTION: i32 = 16401;
pub const IDS_CERT_ERROR_INVALID_CERT_DETAILS: i32 = 16402;
pub const IDS_CERT_ERROR_INVALID_CERT_DESCRIPTION: i32 = 16403;
pub const IDS_CERT_ERROR_WEAK_SIGNATURE_ALGORITHM_DETAILS: i32 = 16404;
pub const IDS_CERT_ERROR_WEAK_SIGNATURE_ALGORITHM_DESCRIPTION: i32 = 16405;
pub const IDS_CERT_ERROR_WEAK_KEY_DETAILS: i32 = 16406;
pub const IDS_CERT_ERROR_WEAK_KEY_DESCRIPTION: i32 = 16407;
pub const IDS_CERT_ERROR_NAME_CONSTRAINT_VIOLATION_DETAILS: i32 = 16408;
pub const IDS_CERT_ERROR_NAME_CONSTRAINT_VIOLATION_DESCRIPTION: i32 = 16409;
pub const IDS_CERT_ERROR_VALIDITY_TOO_LONG_DETAILS: i32 = 16410;
pub const IDS_CERT_ERROR_VALIDITY_TOO_LONG_DESCRIPTION: i32 = 16411;
pub const IDS_CERT_ERROR_UNKNOWN_ERROR_DETAILS: i32 = 16412;
pub const IDS_CERT_ERROR_UNKNOWN_ERROR_DESCRIPTION: i32 = 16413;
pub const IDS_CERT_ERROR_SUMMARY_PINNING_FAILURE_DETAILS: i32 = 16414;
pub const IDS_CERT_ERROR_SUMMARY_PINNING_FAILURE_DESCRIPTION: i32 = 16415;
pub const IDS_CERT_ERROR_CERTIFICATE_TRANSPARENCY_REQUIRED_DETAILS: i32 = 16416;
pub const IDS_CERT_ERROR_CERTIFICATE_TRANSPARENCY_REQUIRED_DESCRIPTION: i32 = 16417;
pub const IDS_CERT_ERROR_AUTHORITY_INVALID_DETAILS: i32 = 16418;
pub const IDS_BLOCK_INTERSTITIAL_TITLE: i32 = 16419;
pub const IDS_BLOCK_INTERSTITIAL_HEADER: i32 = 16420;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_HEADER: i32 = 16421;
pub const IDS_BLOCK_INTERSTITIAL_HEADER_ACCESS_REQUESTS_DISABLED: i32 = 16422;
pub const IDS_BLOCK_INTERSTITIAL_HEADER_NOT_SIGNED_IN: i32 = 16423;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_MESSAGE: i32 = 16424;
pub const IDS_BLOCK_INTERSTITIAL_MESSAGE_SUPERVISED_USERS_DEPRECATED: i32 = 16425;
pub const IDS_BACK_BUTTON: i32 = 16426;
pub const IDS_BLOCK_INTERSTITIAL_REQUEST_ACCESS_BUTTON: i32 = 16427;
pub const IDS_BLOCK_INTERSTITIAL_REQUEST_SENT_MESSAGE: i32 = 16428;
pub const IDS_BLOCK_INTERSTITIAL_REQUEST_FAILED_MESSAGE: i32 = 16429;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_REQUEST_SENT_MESSAGE_SINGLE_PARENT: i32 = 16430;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_REQUEST_SENT_MESSAGE_MULTI_PARENT: i32 = 16431;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_REQUEST_FAILED_MESSAGE_SINGLE_PARENT: i32 = 16432;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_REQUEST_FAILED_MESSAGE_MULTI_PARENT: i32 = 16433;
pub const IDS_BLOCK_INTERSTITIAL_SEND_FEEDBACK: i32 = 16434;
pub const IDS_BLOCK_INTERSTITIAL_SHOW_DETAILS: i32 = 16435;
pub const IDS_BLOCK_INTERSTITIAL_HIDE_DETAILS: i32 = 16436;
pub const IDS_SUPERVISED_USER_BLOCK_HEADER: i32 = 16437;
pub const IDS_CHILD_BLOCK_MESSAGE_DEFAULT_SINGLE_PARENT: i32 = 16438;
pub const IDS_CHILD_BLOCK_MESSAGE_DEFAULT_MULTI_PARENT: i32 = 16439;
pub const IDS_SUPERVISED_USER_BLOCK_MESSAGE_DEFAULT: i32 = 16440;
pub const IDS_SUPERVISED_USER_BLOCK_MESSAGE_SAFE_SITES: i32 = 16441;
pub const IDS_CHILD_BLOCK_MESSAGE_MANUAL_SINGLE_PARENT: i32 = 16442;
pub const IDS_CHILD_BLOCK_MESSAGE_MANUAL_MULTI_PARENT: i32 = 16443;
pub const IDS_SUPERVISED_USER_BLOCK_MESSAGE_MANUAL: i32 = 16444;
pub const IDS_SUPERVISED_USER_NOT_SIGNED_IN: i32 = 16445;
pub const IDS_SYNC_BASIC_ENCRYPTION_DATA: i32 = 16446;
pub const IDS_SYNC_CONFIGURE_ENCRYPTION: i32 = 16447;
pub const IDS_SYNC_DATATYPE_AUTOFILL: i32 = 16448;
pub const IDS_SYNC_DATATYPE_BOOKMARKS: i32 = 16449;
pub const IDS_SYNC_DATATYPE_PASSWORDS: i32 = 16450;
pub const IDS_SYNC_DATATYPE_PREFERENCES: i32 = 16451;
pub const IDS_SYNC_DATATYPE_TABS: i32 = 16452;
pub const IDS_SYNC_DATATYPE_TYPED_URLS: i32 = 16453;
pub const IDS_SYNC_DATATYPE_READING_LIST: i32 = 16454;
pub const IDS_SYNC_EMPTY_PASSPHRASE_ERROR: i32 = 16455;
pub const IDS_SYNC_ENCRYPTION_SECTION_TITLE: i32 = 16456;
pub const IDS_SYNC_ENTER_GOOGLE_PASSPHRASE_BODY: i32 = 16457;
pub const IDS_SYNC_FULL_ENCRYPTION_DATA: i32 = 16458;
pub const IDS_SYNC_LOGIN_SETTING_UP: i32 = 16459;
pub const IDS_SYNC_PASSPHRASE_LABEL: i32 = 16460;
pub const IDS_SYNC_PASSPHRASE_MISMATCH_ERROR: i32 = 16461;
pub const IDS_SYNC_SERVICE_UNAVAILABLE: i32 = 16462;
pub const IDS_SYNC_ENTER_PASSPHRASE_BODY_WITH_DATE: i32 = 16463;
pub const IDS_SYNC_ENTER_GOOGLE_PASSPHRASE_BODY_WITH_DATE: i32 = 16464;
pub const IDS_SYNC_ENTER_PASSPHRASE_BODY: i32 = 16467;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_MORE_LANGUAGE: i32 = 16468;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_NOT_SOURCE_LANGUAGE: i32 = 16469;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_NEVER_TRANSLATE_LANG: i32 = 16470;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_NEVER_TRANSLATE_SITE: i32 = 16471;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_ALWAYS: i32 = 16472;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_REPORT_ERROR: i32 = 16473;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_ABOUT: i32 = 16474;
pub const IDS_TRANSLATE_INFOBAR_ACCEPT: i32 = 16476;
pub const IDS_TRANSLATE_INFOBAR_DENY: i32 = 16477;
pub const IDS_TRANSLATE_INFOBAR_NEVER_TRANSLATE: i32 = 16478;
pub const IDS_TRANSLATE_INFOBAR_ALWAYS_TRANSLATE: i32 = 16479;
pub const IDS_TRANSLATE_INFOBAR_TRANSLATING_TO: i32 = 16480;
pub const IDS_TRANSLATE_INFOBAR_AFTER_MESSAGE: i32 = 16481;
pub const IDS_TRANSLATE_INFOBAR_AFTER_MESSAGE_AUTODETERMINED_SOURCE_LANGUAGE: i32 = 16482;
pub const IDS_TRANSLATE_INFOBAR_REVERT: i32 = 16483;
pub const IDS_TRANSLATE_INFOBAR_RETRY: i32 = 16484;
pub const IDS_TRANSLATE_INFOBAR_ERROR_CANT_CONNECT: i32 = 16485;
pub const IDS_TRANSLATE_INFOBAR_ERROR_CANT_TRANSLATE: i32 = 16486;
pub const IDS_TRANSLATE_INFOBAR_UNKNOWN_PAGE_LANGUAGE: i32 = 16487;
pub const IDS_TRANSLATE_INFOBAR_ERROR_SAME_LANGUAGE: i32 = 16488;
pub const IDS_TRANSLATE_INFOBAR_UNSUPPORTED_PAGE_LANGUAGE: i32 = 16489;
pub const IDS_TRANSLATE_NOTIFICATION_ERROR: i32 = 16490;
pub const IDS_TRANSLATE_NOTIFICATION_ALWAYS_TRANSLATE: i32 = 16491;
pub const IDS_TRANSLATE_NOTIFICATION_LANGUAGE_NEVER: i32 = 16492;
pub const IDS_TRANSLATE_NOTIFICATION_SITE_NEVER: i32 = 16493;
pub const IDS_TRANSLATE_NOTIFICATION_UNDO: i32 = 16494;
pub const IDS_TRANSLATE_UNKNOWN_SOURCE_LANGUAGE: i32 = 16495;
pub const IDS_BOOKMARK_BAR_UNDO_DESCRIPTION: i32 = 16496;
pub const IDS_BOOKMARK_BAR_UNDO: i32 = 16497;
pub const IDS_BOOKMARK_BAR_REDO: i32 = 16498;
pub const IDS_BOOKMARK_BAR_UNDO_ADD: i32 = 16499;
pub const IDS_BOOKMARK_BAR_REDO_ADD: i32 = 16500;
pub const IDS_BOOKMARK_BAR_UNDO_DELETE: i32 = 16501;
pub const IDS_BOOKMARK_BAR_REDO_DELETE: i32 = 16502;
pub const IDS_BOOKMARK_BAR_UNDO_EDIT: i32 = 16503;
pub const IDS_BOOKMARK_BAR_REDO_EDIT: i32 = 16504;
pub const IDS_BOOKMARK_BAR_UNDO_MOVE: i32 = 16505;
pub const IDS_BOOKMARK_BAR_REDO_MOVE: i32 = 16506;
pub const IDS_BOOKMARK_BAR_UNDO_REORDER: i32 = 16507;
pub const IDS_BOOKMARK_BAR_REDO_REORDER: i32 = 16508;
pub const IDS_VERSION_UI_TITLE: i32 = 16509;
pub const IDS_VERSION_UI_OFFICIAL: i32 = 16510;
pub const IDS_VERSION_UI_UNOFFICIAL: i32 = 177;
pub const IDS_VERSION_UI_32BIT: i32 = 16511;
pub const IDS_VERSION_UI_64BIT: i32 = 16512;
pub const IDS_VERSION_UI_REVISION: i32 = 16513;
pub const IDS_VERSION_UI_OS: i32 = 16514;
pub const IDS_VERSION_UI_USER_AGENT: i32 = 16516;
pub const IDS_VERSION_UI_COMMAND_LINE: i32 = 16517;
pub const IDS_VERSION_UI_EXECUTABLE_PATH: i32 = 16521;
pub const IDS_VERSION_UI_PROFILE_PATH: i32 = 16522;
pub const IDS_VERSION_UI_PATH_NOTFOUND: i32 = 16523;
pub const IDS_VERSION_UI_VARIATIONS: i32 = 16524;
pub const IDS_VERSION_UI_VARIATIONS_CMD: i32 = 16525;
pub const IDS_VERSION_UI_COHORT_NAME: i32 = 16526;
pub const IDS_MANAGEMENT_TITLE: i32 = 16527;
pub const IDS_MANAGEMENT_TOOLBAR_TITLE: i32 = 16528;
pub const IDS_MANAGEMENT_SUBTITLE: i32 = 16532;
pub const IDS_MANAGEMENT_SUBTITLE_MANAGED_BY: i32 = 16530;
pub const IDS_MANAGEMENT_NOT_MANAGED_SUBTITLE: i32 = 16531;
pub const IDS_MANAGEMENT_BROWSER_NOTICE: i32 = 16533;
pub const IDS_MANAGEMENT_NOT_MANAGED_NOTICE: i32 = 16534;
pub const IDS_MANAGEMENT_EXTENSION_REPORTING: i32 = 16550;
pub const IDS_MANAGEMENT_EXTENSIONS_INSTALLED: i32 = 16551;
pub const IDS_MANAGEMENT_EXTENSIONS_INSTALLED_BY: i32 = 16552;
pub const IDS_MANAGEMENT_EXTENSIONS_NAME: i32 = 16553;
pub const IDS_MANAGEMENT_EXTENSIONS_PERMISSIONS: i32 = 16554;
pub const IDS_MANAGEMENT_BROWSER_REPORTING: i32 = 16555;
pub const IDS_MANAGEMENT_BROWSER_REPORTING_EXPLANATION: i32 = 16556;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_MACHINE_NAME: i32 = 16557;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_MACHINE_NAME_ADDRESS: i32 = 16558;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_USERNAME: i32 = 16559;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_VERSION: i32 = 16560;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_EXTENSIONS_PLUGINS: i32 = 16561;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_SAFE_BROWSING_WARNINGS: i32 = 16562;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_USER_BROWSING_DATA: i32 = 16563;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_PERF_CRASH: i32 = 16564;
pub const IDS_CANCEL: i32 = 16565;
pub const IDS_CLOSE: i32 = 16566;
pub const IDS_CLEAR: i32 = 16567;
pub const IDS_DONE: i32 = 16568;
pub const IDS_LEARN_MORE: i32 = 206;
pub const IDS_OK: i32 = 16569;
pub const IDS_ADD: i32 = 16570;
pub const IDS_REMOVE: i32 = 16571;
pub const IDS_SAVE: i32 = 16572;
pub const IDS_NO_THANKS: i32 = 16575;
pub const IDS_NOT_NOW: i32 = 16576;
pub const IDS_TURN_OFF: i32 = 16577;
pub const IDS_PLUGIN_NOT_SUPPORTED: i32 = 16578;
pub const IDS_PRINT: i32 = 16579;
pub const IDS_RECENTLY_CLOSED: i32 = 16580;
pub const IDS_CHOOSE: i32 = 16581;
pub const IDS_ACCNAME_BACK: i32 = 194;
pub const IDS_ACCNAME_FORWARD: i32 = 197;
pub const IDS_ACCNAME_OK: i32 = 16582;
pub const IDS_ACCNAME_CANCEL: i32 = 16583;
pub const IDS_ACCNAME_DONE: i32 = 16584;
pub const IDS_ACCNAME_SAVE: i32 = 16585;
pub const IDS_ACCNAME_CLOSE: i32 = 281;
pub const IDS_ACCNAME_OPEN: i32 = 16586;
pub const IDS_ACCNAME_PREVIOUS: i32 = 16587;
pub const IDS_ACCNAME_NEXT: i32 = 16588;
pub const IDS_ACCNAME_LOCATION: i32 = 16589;
pub const IDS_ACCNAME_PARTICLE_DISC: i32 = 16590;
pub const IDS_UTILITY_PROCESS_JSON_PARSER_NAME: i32 = 16591;
pub const IDS_SESSION_CRASHED_VIEW_RESTORE_BUTTON: i32 = 16592;
pub const IDS_SESSION_CRASHED_VIEW_STARTUP_PAGES_BUTTON: i32 = 16593;
pub const IDS_OPTIONS_ADVANCED_SECTION_TITLE_PRIVACY: i32 = 16594;
pub const IDS_PATCH_SERVICE_DISPLAY_NAME: i32 = 16595;
pub const IDS_UNZIP_SERVICE_DISPLAY_NAME: i32 = 16596;
pub const IDS_DETAILS_WITHOUT_SUMMARY_LABEL: i32 = 20100;
pub const IDS_FORM_CALENDAR_CLEAR: i32 = 20101;
pub const IDS_FORM_CALENDAR_TODAY: i32 = 20102;
pub const IDS_FORM_SUBMIT_LABEL: i32 = 20103;
pub const IDS_FORM_INPUT_ALT: i32 = 20104;
pub const IDS_FORM_RESET_LABEL: i32 = 20105;
pub const IDS_FORM_FILE_BUTTON_LABEL: i32 = 20106;
pub const IDS_FORM_MULTIPLE_FILES_BUTTON_LABEL: i32 = 20107;
pub const IDS_FORM_FILE_NO_FILE_LABEL: i32 = 20108;
pub const IDS_FORM_FILE_MULTIPLE_UPLOAD: i32 = 20109;
pub const IDS_FORM_OTHER_COLOR_LABEL: i32 = 20110;
pub const IDS_FORM_OTHER_DATE_LABEL: i32 = 20111;
pub const IDS_FORM_OTHER_MONTH_LABEL: i32 = 20112;
pub const IDS_FORM_OTHER_WEEK_LABEL: i32 = 20113;
pub const IDS_FORM_PLACEHOLDER_FOR_DAY_OF_MONTH_FIELD: i32 = 20114;
pub const IDS_FORM_PLACEHOLDER_FOR_MONTH_FIELD: i32 = 20115;
pub const IDS_FORM_PLACEHOLDER_FOR_YEAR_FIELD: i32 = 20116;
pub const IDS_FORM_SELECT_MENU_LIST_TEXT: i32 = 20117;
pub const IDS_FORM_THIS_MONTH_LABEL: i32 = 20118;
pub const IDS_FORM_THIS_WEEK_LABEL: i32 = 20119;
pub const IDS_FORM_WEEK_NUMBER_LABEL: i32 = 20120;
pub const IDS_AX_CALENDAR_SHOW_DATE_PICKER: i32 = 20121;
pub const IDS_AX_CALENDAR_SHOW_MONTH_SELECTOR: i32 = 20122;
pub const IDS_AX_CALENDAR_SHOW_NEXT_MONTH: i32 = 20123;
pub const IDS_AX_CALENDAR_SHOW_PREVIOUS_MONTH: i32 = 20124;
pub const IDS_AX_CALENDAR_WEEK_DESCRIPTION: i32 = 20125;
pub const IDS_AX_ROLE_ARTICLE: i32 = 20126;
pub const IDS_AX_ROLE_BANNER: i32 = 20127;
pub const IDS_AX_ROLE_COMPLEMENTARY: i32 = 20128;
pub const IDS_AX_ROLE_CONTENT_DELETION: i32 = 20129;
pub const IDS_AX_ROLE_CONTENT_INSERTION: i32 = 20130;
pub const IDS_AX_ROLE_CHECK_BOX: i32 = 20131;
pub const IDS_AX_ROLE_CONTENT_INFO: i32 = 20132;
pub const IDS_AX_ROLE_DEFINITION: i32 = 20133;
pub const IDS_AX_ROLE_DESCRIPTION_LIST: i32 = 20134;
pub const IDS_AX_ROLE_DESCRIPTION_TERM: i32 = 20135;
pub const IDS_AX_ROLE_DISCLOSURE_TRIANGLE: i32 = 20136;
pub const IDS_AX_ROLE_DOC_ABSTRACT: i32 = 20137;
pub const IDS_AX_ROLE_DOC_ACKNOWLEDGMENTS: i32 = 20138;
pub const IDS_AX_ROLE_DOC_AFTERWORD: i32 = 20139;
pub const IDS_AX_ROLE_DOC_APPENDIX: i32 = 20140;
pub const IDS_AX_ROLE_DOC_BACKLINK: i32 = 20141;
pub const IDS_AX_ROLE_DOC_BIBLIO_ENTRY: i32 = 20142;
pub const IDS_AX_ROLE_DOC_BIBLIOGRAPHY: i32 = 20143;
pub const IDS_AX_ROLE_DOC_BIBLIO_REF: i32 = 20144;
pub const IDS_AX_ROLE_DOC_CHAPTER: i32 = 20145;
pub const IDS_AX_ROLE_DOC_COLOPHON: i32 = 20146;
pub const IDS_AX_ROLE_DOC_CONCLUSION: i32 = 20147;
pub const IDS_AX_ROLE_DOC_COVER: i32 = 20148;
pub const IDS_AX_ROLE_DOC_CREDIT: i32 = 20149;
pub const IDS_AX_ROLE_DOC_CREDITS: i32 = 20150;
pub const IDS_AX_ROLE_DOC_DEDICATION: i32 = 20151;
pub const IDS_AX_ROLE_DOC_ENDNOTE: i32 = 20152;
pub const IDS_AX_ROLE_DOC_ENDNOTES: i32 = 20153;
pub const IDS_AX_ROLE_DOC_EPIGRAPH: i32 = 20154;
pub const IDS_AX_ROLE_DOC_EPILOGUE: i32 = 20155;
pub const IDS_AX_ROLE_DOC_ERRATA: i32 = 20156;
pub const IDS_AX_ROLE_DOC_EXAMPLE: i32 = 20157;
pub const IDS_AX_ROLE_DOC_FOOTNOTE: i32 = 20158;
pub const IDS_AX_ROLE_DOC_FOREWORD: i32 = 20159;
pub const IDS_AX_ROLE_DOC_GLOSSARY: i32 = 20160;
pub const IDS_AX_ROLE_DOC_GLOSS_REF: i32 = 20161;
pub const IDS_AX_ROLE_DOC_INDEX: i32 = 20162;
pub const IDS_AX_ROLE_DOC_INTRODUCTION: i32 = 20163;
pub const IDS_AX_ROLE_DOC_NOTE_REF: i32 = 20164;
pub const IDS_AX_ROLE_DOC_NOTICE: i32 = 20165;
pub const IDS_AX_ROLE_DOC_PAGE_BREAK: i32 = 20166;
pub const IDS_AX_ROLE_DOC_PAGE_LIST: i32 = 20167;
pub const IDS_AX_ROLE_DOC_PART: i32 = 20168;
pub const IDS_AX_ROLE_DOC_PREFACE: i32 = 20169;
pub const IDS_AX_ROLE_DOC_PROLOGUE: i32 = 20170;
pub const IDS_AX_ROLE_DOC_PULLQUOTE: i32 = 20171;
pub const IDS_AX_ROLE_DOC_QNA: i32 = 20172;
pub const IDS_AX_ROLE_DOC_SUBTITLE: i32 = 20173;
pub const IDS_AX_ROLE_DOC_TIP: i32 = 20174;
pub const IDS_AX_ROLE_DOC_TOC: i32 = 20175;
pub const IDS_AX_ROLE_FEED: i32 = 20176;
pub const IDS_AX_ROLE_FIGURE: i32 = 20177;
pub const IDS_AX_ROLE_FORM: i32 = 20178;
pub const IDS_AX_ROLE_FOOTER: i32 = 20179;
pub const IDS_AX_ROLE_GRAPHICS_DOCUMENT: i32 = 20180;
pub const IDS_AX_ROLE_GRAPHICS_OBJECT: i32 = 20181;
pub const IDS_AX_ROLE_GRAPHICS_SYMBOL: i32 = 20182;
pub const IDS_AX_AUTOFILL_POPUP_ACCESSIBLE_NODE_DATA: i32 = 20183;
pub const IDS_AX_ROLE_TOGGLE_BUTTON: i32 = 20185;
pub const IDS_AX_ROLE_HEADING: i32 = 20186;
pub const IDS_AX_ROLE_LINK: i32 = 20187;
pub const IDS_AX_ROLE_MAIN_CONTENT: i32 = 20188;
pub const IDS_AX_ROLE_MARK: i32 = 20189;
pub const IDS_AX_ROLE_MATH: i32 = 20190;
pub const IDS_AX_ROLE_NAVIGATIONAL_LINK: i32 = 20191;
pub const IDS_AX_ROLE_REGION: i32 = 20192;
pub const IDS_AX_ROLE_SEARCH_BOX: i32 = 20193;
pub const IDS_AX_ROLE_STATUS: i32 = 20194;
pub const IDS_AX_ROLE_SWITCH: i32 = 20195;
pub const IDS_AX_ROLE_WEB_AREA: i32 = 20196;
pub const IDS_AX_UNLABELED_IMAGE_ROLE_DESCRIPTION: i32 = 20244;
pub const IDS_AX_IMAGE_ELIGIBLE_FOR_ANNOTATION: i32 = 20245;
pub const IDS_AX_IMAGE_ANNOTATION_PENDING: i32 = 20246;
pub const IDS_AX_IMAGE_ANNOTATION_ADULT: i32 = 20247;
pub const IDS_AX_IMAGE_ANNOTATION_NO_DESCRIPTION: i32 = 20248;
pub const IDS_AX_IMAGE_ANNOTATION_OCR_CONTEXT: i32 = 20249;
pub const IDS_AX_IMAGE_ANNOTATION_DESCRIPTION_CONTEXT: i32 = 20250;
pub const IDS_AX_AM_PM_FIELD_TEXT: i32 = 20251;
pub const IDS_AX_DAY_OF_MONTH_FIELD_TEXT: i32 = 20252;
pub const IDS_AX_HOUR_FIELD_TEXT: i32 = 20253;
pub const IDS_AX_MEDIA_DEFAULT: i32 = 20254;
pub const IDS_AX_MEDIA_AUDIO_ELEMENT: i32 = 20255;
pub const IDS_AX_MEDIA_VIDEO_ELEMENT: i32 = 20256;
pub const IDS_AX_MEDIA_MUTE_BUTTON: i32 = 20257;
pub const IDS_AX_MEDIA_UNMUTE_BUTTON: i32 = 20258;
pub const IDS_AX_MEDIA_PLAY_BUTTON: i32 = 20259;
pub const IDS_AX_MEDIA_PAUSE_BUTTON: i32 = 20260;
pub const IDS_AX_MEDIA_CURRENT_TIME_DISPLAY: i32 = 20261;
pub const IDS_AX_MEDIA_TIME_REMAINING_DISPLAY: i32 = 20262;
pub const IDS_AX_MEDIA_ENTER_FULL_SCREEN_BUTTON: i32 = 20263;
pub const IDS_AX_MEDIA_EXIT_FULL_SCREEN_BUTTON: i32 = 20264;
pub const IDS_AX_MEDIA_DISPLAY_CUT_OUT_FULL_SCREEN_BUTTON: i32 = 20265;
pub const IDS_AX_MEDIA_ENTER_PICTURE_IN_PICTURE_BUTTON: i32 = 20266;
pub const IDS_AX_MEDIA_EXIT_PICTURE_IN_PICTURE_BUTTON: i32 = 20267;
pub const IDS_AX_MEDIA_LOADING_PANEL: i32 = 20268;
pub const IDS_AX_MEDIA_SHOW_CLOSED_CAPTIONS_MENU_BUTTON: i32 = 20269;
pub const IDS_AX_MEDIA_HIDE_CLOSED_CAPTIONS_MENU_BUTTON: i32 = 20270;
pub const IDS_AX_MEDIA_CAST_OFF_BUTTON: i32 = 20271;
pub const IDS_AX_MEDIA_CAST_ON_BUTTON: i32 = 20272;
pub const IDS_AX_MEDIA_DOWNLOAD_BUTTON: i32 = 20273;
pub const IDS_AX_MEDIA_OVERFLOW_BUTTON: i32 = 20274;
pub const IDS_AX_MEDIA_AUDIO_ELEMENT_HELP: i32 = 20275;
pub const IDS_AX_MEDIA_VIDEO_ELEMENT_HELP: i32 = 20276;
pub const IDS_AX_MEDIA_AUDIO_SLIDER_HELP: i32 = 20277;
pub const IDS_AX_MEDIA_VIDEO_SLIDER_HELP: i32 = 20278;
pub const IDS_AX_MEDIA_VOLUME_SLIDER_HELP: i32 = 20279;
pub const IDS_AX_MEDIA_CURRENT_TIME_DISPLAY_HELP: i32 = 20280;
pub const IDS_AX_MEDIA_TIME_REMAINING_DISPLAY_HELP: i32 = 20281;
pub const IDS_AX_MEDIA_OVERFLOW_BUTTON_HELP: i32 = 20282;
pub const IDS_AX_MEDIA_TOUCHLESS_PLAY_PAUSE_ACTION: i32 = 20283;
pub const IDS_AX_MEDIA_TOUCHLESS_SEEK_ACTION: i32 = 20284;
pub const IDS_AX_MEDIA_TOUCHLESS_VOLUME_ACTION: i32 = 20285;
pub const IDS_AX_MILLISECOND_FIELD_TEXT: i32 = 20286;
pub const IDS_AX_MINUTE_FIELD_TEXT: i32 = 20287;
pub const IDS_AX_MONTH_FIELD_TEXT: i32 = 20288;
pub const IDS_AX_SECOND_FIELD_TEXT: i32 = 20289;
pub const IDS_AX_WEEK_OF_YEAR_FIELD_TEXT: i32 = 20290;
pub const IDS_AX_YEAR_FIELD_TEXT: i32 = 20291;
pub const IDS_FORM_INPUT_WEEK_TEMPLATE: i32 = 20292;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_MULTIPLE_FILE: i32 = 20293;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH: i32 = 20294;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_EMPTY: i32 = 20295;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_EMPTY_DOMAIN: i32 = 20296;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_EMPTY_LOCAL: i32 = 20297;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_INVALID_DOMAIN: i32 = 20298;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_INVALID_DOTS: i32 = 20299;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_INVALID_LOCAL: i32 = 20300;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_NO_AT_SIGN: i32 = 20301;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_MULTIPLE_EMAIL: i32 = 20302;
pub const IDS_FORM_VALIDATION_RANGE_UNDERFLOW: i32 = 20303;
pub const IDS_FORM_VALIDATION_RANGE_UNDERFLOW_DATETIME: i32 = 20304;
pub const IDS_FORM_VALIDATION_RANGE_OVERFLOW: i32 = 20305;
pub const IDS_FORM_VALIDATION_RANGE_OVERFLOW_DATETIME: i32 = 20306;
pub const IDS_FORM_VALIDATION_BAD_INPUT_DATETIME: i32 = 20307;
pub const IDS_FORM_VALIDATION_BAD_INPUT_NUMBER: i32 = 20308;
pub const IDS_FORM_VALIDATION_VALUE_MISSING: i32 = 20309;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_CHECKBOX: i32 = 20310;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_FILE: i32 = 20311;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_RADIO: i32 = 20312;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_SELECT: i32 = 20313;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL: i32 = 20314;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_URL: i32 = 20315;
pub const IDS_FORM_VALIDATION_PATTERN_MISMATCH: i32 = 20316;
pub const IDS_FORM_VALIDATION_STEP_MISMATCH: i32 = 20317;
pub const IDS_FORM_VALIDATION_STEP_MISMATCH_CLOSE_TO_LIMIT: i32 = 20318;
pub const IDS_FORM_VALIDATION_TOO_LONG: i32 = 20319;
pub const IDS_FORM_VALIDATION_TOO_SHORT: i32 = 20320;
pub const IDS_FORM_VALIDATION_TOO_SHORT_PLURAL: i32 = 20321;
pub const IDS_MEDIA_SESSION_FILE_SOURCE: i32 = 20322;
pub const IDS_MEDIA_OVERFLOW_MENU_CLOSED_CAPTIONS: i32 = 20323;
pub const IDS_MEDIA_OVERFLOW_MENU_CLOSED_CAPTIONS_SUBMENU_TITLE: i32 = 20324;
pub const IDS_MEDIA_OVERFLOW_MENU_CAST: i32 = 20325;
pub const IDS_MEDIA_OVERFLOW_MENU_ENTER_FULLSCREEN: i32 = 20326;
pub const IDS_MEDIA_OVERFLOW_MENU_EXIT_FULLSCREEN: i32 = 20327;
pub const IDS_MEDIA_OVERFLOW_MENU_MUTE: i32 = 20328;
pub const IDS_MEDIA_OVERFLOW_MENU_UNMUTE: i32 = 20329;
pub const IDS_MEDIA_OVERFLOW_MENU_PLAY: i32 = 20330;
pub const IDS_MEDIA_OVERFLOW_MENU_PAUSE: i32 = 20331;
pub const IDS_MEDIA_OVERFLOW_MENU_DOWNLOAD: i32 = 20332;
pub const IDS_MEDIA_OVERFLOW_MENU_ENTER_PICTURE_IN_PICTURE: i32 = 20333;
pub const IDS_MEDIA_OVERFLOW_MENU_EXIT_PICTURE_IN_PICTURE: i32 = 20334;
pub const IDS_MEDIA_PICTURE_IN_PICTURE_INTERSTITIAL_TEXT: i32 = 20335;
pub const IDS_MEDIA_REMOTING_CAST_TEXT: i32 = 20336;
pub const IDS_MEDIA_REMOTING_CAST_TO_UNKNOWN_DEVICE_TEXT: i32 = 20337;
pub const IDS_MEDIA_REMOTING_STOP_TEXT: i32 = 20338;
pub const IDS_MEDIA_REMOTING_STOP_BY_PLAYBACK_QUALITY_TEXT: i32 = 20339;
pub const IDS_MEDIA_REMOTING_STOP_BY_ERROR_TEXT: i32 = 20340;
pub const IDS_MEDIA_SCRUBBING_MESSAGE_TEXT: i32 = 20341;
pub const IDS_MEDIA_TRACKS_NO_LABEL: i32 = 20342;
pub const IDS_MEDIA_TRACKS_OFF: i32 = 20343;
pub const IDS_PLUGIN_INITIALIZATION_ERROR: i32 = 20344;
pub const IDS_MEDIA_PLAYBACK_ERROR: i32 = 20345;
pub const IDS_UNITS_KIBIBYTES: i32 = 20346;
pub const IDS_UNITS_MEBIBYTES: i32 = 20347;
pub const IDS_UNITS_GIBIBYTES: i32 = 20348;
pub const IDS_UNITS_TEBIBYTES: i32 = 20349;
pub const IDS_UNITS_PEBIBYTES: i32 = 20350;
pub const CONTENT_INVALID_TRUE: i32 = 20351;
pub const CONTENT_INVALID_SPELLING: i32 = 20352;
pub const CONTENT_INVALID_GRAMMAR: i32 = 20353;
pub const IDS_EXTENSION_BAD_FILE_ENCODING: i32 = 24720;
pub const IDS_EXTENSION_CANT_GET_ABSOLUTE_PATH: i32 = 24721;
pub const IDS_EXTENSION_CONTAINS_PRIVATE_KEY: i32 = 24722;
pub const IDS_EXTENSION_CRX_EXISTS: i32 = 24723;
pub const IDS_EXTENSION_DIRECTORY_NO_EXISTS: i32 = 24724;
pub const IDS_EXTENSION_ERROR_WHILE_SIGNING: i32 = 24725;
pub const IDS_EXTENSION_FAILED_DURING_PACKAGING: i32 = 24726;
pub const IDS_EXTENSION_LOAD_ABOUT_PAGE_FAILED: i32 = 24727;
pub const IDS_EXTENSION_LOAD_BACKGROUND_SCRIPT_FAILED: i32 = 24728;
pub const IDS_EXTENSION_LOAD_BACKGROUND_PAGE_FAILED: i32 = 24729;
pub const IDS_EXTENSION_LOAD_CSS_FAILED: i32 = 24730;
pub const IDS_EXTENSION_LOAD_ICON_FAILED: i32 = 24731;
pub const IDS_EXTENSION_LOAD_ICON_NOT_SUFFICIENTLY_VISIBLE: i32 = 24732;
pub const IDS_EXTENSION_LOAD_JAVASCRIPT_FAILED: i32 = 24733;
pub const IDS_EXTENSION_LOAD_OPTIONS_PAGE_FAILED: i32 = 24734;
pub const IDS_EXTENSION_LOCALES_NO_DEFAULT_LOCALE_SPECIFIED: i32 = 24735;
pub const IDS_EXTENSION_MANIFEST_UNREADABLE: i32 = 24736;
pub const IDS_EXTENSION_MANIFEST_INVALID: i32 = 24737;
pub const IDS_EXTENSION_PACKAGE_DIRECTORY_ERROR: i32 = 24738;
pub const IDS_EXTENSION_PACKAGE_IMAGE_PATH_ERROR: i32 = 24739;
pub const IDS_EXTENSION_PACKAGE_IMAGE_ERROR: i32 = 24740;
pub const IDS_EXTENSION_PACKAGE_UNZIP_ERROR: i32 = 24741;
pub const IDS_EXTENSION_PRIVATE_KEY_EXISTS: i32 = 24742;
pub const IDS_EXTENSION_PRIVATE_KEY_FAILED_TO_READ: i32 = 24743;
pub const IDS_EXTENSION_PRIVATE_KEY_FAILED_TO_EXPORT: i32 = 24744;
pub const IDS_EXTENSION_PRIVATE_KEY_FAILED_TO_GENERATE: i32 = 24745;
pub const IDS_EXTENSION_PRIVATE_KEY_FAILED_TO_OUTPUT: i32 = 24746;
pub const IDS_EXTENSION_PRIVATE_KEY_INVALID: i32 = 24747;
pub const IDS_EXTENSION_PRIVATE_KEY_NO_EXISTS: i32 = 24748;
pub const IDS_EXTENSION_PRIVATE_KEY_INVALID_PATH: i32 = 24749;
pub const IDS_EXTENSION_PRIVATE_KEY_INVALID_FORMAT: i32 = 24750;
pub const IDS_EXTENSION_PUBLIC_KEY_FAILED_TO_EXPORT: i32 = 24751;
pub const IDS_LOAD_STATE_PARAMETER_EXTENSION: i32 = 24752;
pub const IDS_EXTENSION_SHARING_VIOLATION: i32 = 24753;
pub const IDS_EXTENSION_CANT_INSTALL_POLICY_BLOCKED: i32 = 24754;
pub const IDS_EXTENSION_CANT_MODIFY_POLICY_REQUIRED: i32 = 24755;
pub const IDS_EXTENSION_CANT_UNINSTALL_POLICY_REQUIRED: i32 = 24756;
pub const IDS_EXTENSION_DISABLED_UPDATE_REQUIRED_BY_POLICY: i32 = 24757;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_SERIAL: i32 = 24758;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_UNKNOWN_VENDOR: i32 = 24759;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_UNKNOWN_VENDOR_SERIAL: i32 = 24760;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_VENDOR: i32 = 24761;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_VENDOR_SERIAL: i32 = 24762;
pub const IDS_DEVICE_NAME_WITH_UNKNOWN_PRODUCT_UNKNOWN_VENDOR: i32 = 24763;
pub const IDS_DEVICE_NAME_WITH_UNKNOWN_PRODUCT_UNKNOWN_VENDOR_SERIAL: i32 = 24764;
pub const IDS_DEVICE_NAME_WITH_UNKNOWN_PRODUCT_VENDOR: i32 = 24765;
pub const IDS_DEVICE_NAME_WITH_UNKNOWN_PRODUCT_VENDOR_SERIAL: i32 = 24766;
pub const IDS_DEVICE_PERMISSIONS_PROMPT_SINGLE_SELECTION: i32 = 24767;
pub const IDS_DEVICE_PERMISSIONS_PROMPT_MULTIPLE_SELECTION: i32 = 24768;
pub const IDS_CAMERA_FACING_USER: i32 = 24769;
pub const IDS_CAMERA_FACING_ENVIRONMENT: i32 = 24770;
pub const IDS_EXTENSION_USB_DEVICE_PRODUCT_NAME_AND_VENDOR: i32 = 24771;
pub const IDS_EXTENSION_TASK_MANAGER_APPVIEW_TAG_PREFIX: i32 = 24772;
pub const IDS_EXTENSION_TASK_MANAGER_EXTENSIONOPTIONS_TAG_PREFIX: i32 = 24773;
pub const IDS_EXTENSION_TASK_MANAGER_EXTENSIONVIEW_TAG_PREFIX: i32 = 24774;
pub const IDS_EXTENSION_TASK_MANAGER_MIMEHANDLERVIEW_TAG_PREFIX: i32 = 24775;
pub const IDS_EXTENSION_TASK_MANAGER_WEBVIEW_TAG_PREFIX: i32 = 24776;
pub const IDS_EXTENSION_WARNINGS_NETWORK_DELAY: i32 = 24777;
pub const IDS_EXTENSION_WARNINGS_DOWNLOAD_FILENAME_CONFLICT: i32 = 24778;
pub const IDS_EXTENSION_WARNING_RELOAD_TOO_FREQUENT: i32 = 24779;
pub const IDS_EXTENSION_WARNING_RULESET_FAILED_TO_LOAD: i32 = 24780;
pub const IDS_EXTENSION_INSTALL_PROCESS_CRASHED: i32 = 24781;
pub const IDS_EXTENSION_PACKAGE_ERROR_CODE: i32 = 24782;
pub const IDS_EXTENSION_PACKAGE_ERROR_MESSAGE: i32 = 24783;
pub const IDS_EXTENSION_PACKAGE_INSTALL_ERROR: i32 = 24784;
pub const IDS_EXTENSION_UNPACK_FAILED: i32 = 24785;
pub const IDS_EXTENSION_WEBGL_NOT_SUPPORTED: i32 = 24786;
pub const IDS_BOOKMARK_GROUP_FROM_IE: i32 = 800;
pub const IDS_BOOKMARK_GROUP_FROM_EDGE: i32 = 801;
pub const IDS_BOOKMARK_GROUP_FROM_FIREFOX: i32 = 802;
pub const IDS_BOOKMARK_GROUP_FROM_SAFARI: i32 = 803;
pub const IDS_BOOKMARK_GROUP: i32 = 804;
pub const IDS_BOOKMARK_BAR_SHOW_APPS_SHORTCUT: i32 = 805;
pub const IDS_BOOKMARK_BAR_SHOW_MANAGED_BOOKMARKS_DEFAULT_NAME: i32 = 806;
pub const IDS_BOOKMARK_BAR_SHOW_MANAGED_BOOKMARKS: i32 = 807;
pub const IDS_BOOKMARK_BAR_APPS_SHORTCUT_NAME: i32 = 282;
pub const IDS_BOOKMARK_BAR_APPS_SHORTCUT_TOOLTIP: i32 = 283;
pub const IDS_BOOKMARK_BAR_OPEN_ALL: i32 = 808;
pub const IDS_BOOKMARK_BAR_OPEN_ALL_COUNT: i32 = 809;
pub const IDS_BOOKMARK_BAR_OPEN_ALL_COUNT_NEW_WINDOW: i32 = 810;
pub const IDS_BOOKMARK_BAR_OPEN_ALL_COUNT_INCOGNITO: i32 = 811;
pub const IDS_BOOKMARK_BAR_OPEN_IN_NEW_TAB: i32 = 812;
pub const IDS_BOOKMARK_BAR_OPEN_IN_NEW_WINDOW: i32 = 813;
pub const IDS_BOOKMARK_BAR_OPEN_INCOGNITO: i32 = 814;
pub const IDS_BOOKMARK_BAR_EDIT: i32 = 815;
pub const IDS_BOOKMARK_BAR_RENAME_FOLDER: i32 = 816;
pub const IDS_BOOKMARK_BAR_REMOVE: i32 = 817;
pub const IDS_BOOKMARK_BAR_ADD_NEW_BOOKMARK: i32 = 818;
pub const IDS_BOOKMARK_BAR_NEW_FOLDER: i32 = 819;
pub const IDS_SHOW_BOOKMARK_BAR: i32 = 820;
pub const IDS_BOOKMARK_BAR_SHOULD_OPEN_ALL: i32 = 821;
pub const IDS_BOOKMARK_BUBBLE_PAGE_BOOKMARKED: i32 = 822;
pub const IDS_BOOKMARK_BUBBLE_PAGE_BOOKMARK: i32 = 823;
pub const IDS_BOOKMARK_BUBBLE_NAME_LABEL: i32 = 824;
pub const IDS_BOOKMARK_AX_BUBBLE_NAME_LABEL: i32 = 825;
pub const IDS_BOOKMARK_BUBBLE_FOLDER_LABEL: i32 = 826;
pub const IDS_BOOKMARK_AX_BUBBLE_FOLDER_LABEL: i32 = 827;
pub const IDS_BOOKMARK_BUBBLE_OPTIONS: i32 = 828;
pub const IDS_BOOKMARK_BUBBLE_CHOOSER_ANOTHER_FOLDER: i32 = 829;
pub const IDS_BOOKMARK_SYNC_PROMO_MESSAGE: i32 = 830;
pub const IDS_BOOKMARK_DICE_PROMO_SIGNIN_MESSAGE: i32 = 831;
pub const IDS_BOOKMARK_DICE_PROMO_SYNC_MESSAGE: i32 = 832;
pub const IDS_BOOKMARK_BUBBLE_DESKTOP_TO_IOS_PROMO_TITLE: i32 = 833;
pub const IDS_BOOKMARK_BUBBLE_DESKTOP_TO_IOS_PROMO_TITLE_V2: i32 = 834;
pub const IDS_BOOKMARK_BUBBLE_DESKTOP_TO_IOS_PROMO_TITLE_V3: i32 = 835;
pub const IDS_BOOKMARK_FOOTNOTE_DESKTOP_TO_IOS_PROMO_MESSAGE: i32 = 836;
pub const IDS_BOOKMARK_EDITOR_NAME_LABEL: i32 = 837;
pub const IDS_BOOKMARK_AX_EDITOR_NAME_LABEL: i32 = 838;
pub const IDS_BOOKMARK_AX_EDITOR_URL_LABEL: i32 = 840;
pub const IDS_BOOKMARK_EDITOR_URL_LABEL: i32 = 841;
pub const IDS_BOOKMARK_EDITOR_CONFIRM_DELETE: i32 = 842;
pub const IDS_BOOKMARK_EDITOR_NEW_FOLDER_BUTTON: i32 = 843;
pub const IDS_BOOKMARK_EDITOR_NEW_FOLDER_MENU_ITEM: i32 = 844;
pub const IDS_BOOKMARK_FOLDER_EDITOR_WINDOW_TITLE: i32 = 845;
pub const IDS_BOOKMARK_FOLDER_EDITOR_WINDOW_TITLE_NEW: i32 = 846;
pub const IDS_BOOKMARK_ALL_TABS_DIALOG_TITLE: i32 = 847;
pub const IDS_BOOKMARK_MANAGER_TITLE: i32 = 848;
pub const IDS_BOOKMARK_MANAGER_SEARCH_BUTTON: i32 = 849;
pub const IDS_BOOKMARK_MANAGER: i32 = 850;
pub const IDS_BOOKMARK_MANAGER_ORGANIZE_MENU: i32 = 851;
pub const IDS_BOOKMARK_MANAGER_INVALID_URL: i32 = 852;
pub const IDS_EXPORT_BOOKMARKS_DEFAULT_FILENAME: i32 = 853;
pub const IDS_BOOKMARK_MANAGER_ADD_BOOKMARK_TITLE: i32 = 854;
pub const IDS_BOOKMARK_MANAGER_ADD_FOLDER_TITLE: i32 = 855;
pub const IDS_BOOKMARK_MANAGER_CLEAR_SEARCH: i32 = 856;
pub const IDS_BOOKMARK_MANAGER_EMPTY_LIST: i32 = 857;
pub const IDS_BOOKMARK_MANAGER_EMPTY_UNMODIFIABLE_LIST: i32 = 858;
pub const IDS_BOOKMARK_MANAGER_FOLDER_LABEL: i32 = 859;
pub const IDS_BOOKMARK_MANAGER_FOLDER_RENAME_TITLE: i32 = 860;
pub const IDS_BOOKMARK_MANAGER_FOLDER_LIST_CHANGED: i32 = 861;
pub const IDS_BOOKMARK_MANAGER_LIST_AX_LABEL: i32 = 862;
pub const IDS_BOOKMARK_MANAGER_MENU_ADD_BOOKMARK: i32 = 863;
pub const IDS_BOOKMARK_MANAGER_MENU_ADD_FOLDER: i32 = 864;
pub const IDS_BOOKMARK_MANAGER_MENU_COPY_URL: i32 = 865;
pub const IDS_BOOKMARK_MANAGER_MENU_EXPORT: i32 = 866;
pub const IDS_BOOKMARK_MANAGER_MENU_HELP_CENTER: i32 = 867;
pub const IDS_BOOKMARK_MANAGER_MENU_IMPORT: i32 = 868;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_ALL: i32 = 869;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_ALL_NEW_WINDOW: i32 = 870;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_ALL_INCOGNITO: i32 = 871;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_IN_NEW_TAB: i32 = 872;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_IN_NEW_WINDOW: i32 = 873;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_INCOGNITO: i32 = 874;
pub const IDS_BOOKMARK_MANAGER_MENU_RENAME: i32 = 875;
pub const IDS_BOOKMARK_MANAGER_MENU_SHOW_IN_FOLDER: i32 = 876;
pub const IDS_BOOKMARK_MANAGER_MENU_SORT: i32 = 877;
pub const IDS_BOOKMARK_MANAGER_MORE_ACTIONS: i32 = 878;
pub const IDS_BOOKMARK_MANAGER_MORE_ACTIONS_AX_LABEL: i32 = 879;
pub const IDS_BOOKMARK_MANAGER_OPEN_DIALOG_TITLE: i32 = 880;
pub const IDS_BOOKMARK_MANAGER_OPEN_DIALOG_CONFIRM: i32 = 881;
pub const IDS_BOOKMARK_MANAGER_ITEMS_SELECTED: i32 = 882;
pub const IDS_BOOKMARK_MANAGER_SIDEBAR_AX_LABEL: i32 = 883;
pub const IDS_BOOKMARK_MANAGER_TOAST_FOLDER_SORTED: i32 = 884;
pub const IDS_BOOKMARK_MANAGER_TOAST_ITEM_DELETED: i32 = 885;
pub const IDS_BOOKMARK_MANAGER_TOAST_ITEMS_DELETED: i32 = 886;
pub const IDS_BOOKMARK_MANAGER_TOAST_URL_COPIED: i32 = 887;
pub const IDS_BOOKMARK_MANAGER_TOAST_ITEM_COPIED: i32 = 888;
pub const IDS_BOOKMARK_MANAGER_TOAST_ITEMS_COPIED: i32 = 889;
pub const IDS_BOOKMARKS_MENU: i32 = 890;
pub const IDS_BOOKMARK_THIS_PAGE: i32 = 891;
pub const IDS_BOOKMARK_OPEN_PAGES: i32 = 892;
pub const IDS_TOOLTIP_STARRED: i32 = 310;
pub const IDS_APP_MANAGEMENT_ANDROID_SETTINGS: i32 = 893;
pub const IDS_APP_MANAGEMENT_APP_LIST_PREVIEW: i32 = 894;
pub const IDS_APP_MANAGEMENT_APP_LIST_TITLE: i32 = 895;
pub const IDS_APP_MANAGEMENT_BACK: i32 = 896;
pub const IDS_APP_MANAGEMENT_CAMERA: i32 = 897;
pub const IDS_APP_MANAGEMENT_EXTENSIONS_SETTINGS: i32 = 898;
pub const IDS_APP_MANAGEMENT_LESS_APPS: i32 = 899;
pub const IDS_APP_MANAGEMENT_LOCATION: i32 = 900;
pub const IDS_APP_MANAGEMENT_MICROPHONE: i32 = 901;
pub const IDS_APP_MANAGEMENT_MORE_APPS: i32 = 902;
pub const IDS_APP_MANAGEMENT_NO_RESULTS: i32 = 903;
pub const IDS_APP_MANAGEMENT_NOTIFICATIONS: i32 = 904;
pub const IDS_APP_MANAGEMENT_NOTIFICATIONS_SUBLABEL: i32 = 905;
pub const IDS_APP_MANAGEMENT_PERMISSIONS: i32 = 906;
pub const IDS_APP_MANAGEMENT_MORE_SETTINGS: i32 = 907;
pub const IDS_APP_MANAGEMENT_THIS_APP_CAN: i32 = 908;
pub const IDS_APP_MANAGEMENT_PIN_TO_SHELF: i32 = 909;
pub const IDS_APP_MANAGEMENT_SEARCH_PROMPT: i32 = 910;
pub const IDS_APP_MANAGEMENT_SITE_SETTING: i32 = 911;
pub const IDS_APP_MANAGEMENT_TITLE: i32 = 912;
pub const IDS_APP_MANAGEMENT_SIZE: i32 = 913;
pub const IDS_APP_MANAGEMENT_UNINSTALL: i32 = 914;
pub const IDS_APP_MANAGEMENT_VERSION: i32 = 915;
pub const IDS_APP_MANAGEMENT_PIN_ENFORCED_BY_POLICY: i32 = 916;
pub const IDS_APP_MANAGEMENT_CONTACTS: i32 = 917;
pub const IDS_APP_MANAGEMENT_STORAGE: i32 = 918;
pub const IDS_MEDIA_ROUTER_ICON_TOOLTIP_TEXT: i32 = 212;
pub const IDS_MEDIA_ROUTER_MENU_ITEM_TITLE: i32 = 919;
pub const IDS_MEDIA_ROUTER_PRESENTATION_CAST_MODE: i32 = 920;
pub const IDS_MEDIA_ROUTER_DESKTOP_MIRROR_CAST_MODE: i32 = 921;
pub const IDS_MEDIA_ROUTER_TAB_MIRROR_CAST_MODE: i32 = 922;
pub const IDS_MEDIA_ROUTER_LOCAL_FILE_CAST_MODE: i32 = 923;
pub const IDS_MEDIA_ROUTER_CAST_LOCAL_MEDIA_TITLE: i32 = 924;
pub const IDS_MEDIA_ROUTER_ALTERNATIVE_SOURCES_BUTTON: i32 = 925;
pub const IDS_MEDIA_ROUTER_ABOUT: i32 = 205;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_TOGGLE: i32 = 210;
pub const IDS_MEDIA_ROUTER_HELP: i32 = 207;
pub const IDS_MEDIA_ROUTER_ALWAYS_SHOW_TOOLBAR_ACTION: i32 = 208;
pub const IDS_MEDIA_ROUTER_REPORT_ISSUE: i32 = 211;
pub const IDS_MEDIA_ROUTER_SHOWN_BY_POLICY: i32 = 926;
pub const IDS_MEDIA_ROUTER_TOGGLE_MEDIA_REMOTING: i32 = 209;
pub const IDS_MEDIA_ROUTER_ISSUE_CREATE_ROUTE_TIMEOUT: i32 = 927;
pub const IDS_MEDIA_ROUTER_ISSUE_CREATE_ROUTE_TIMEOUT_FOR_DESKTOP: i32 = 928;
pub const IDS_MEDIA_ROUTER_ISSUE_CREATE_ROUTE_TIMEOUT_FOR_TAB: i32 = 929;
pub const IDS_MEDIA_ROUTER_ISSUE_UNABLE_TO_CAST_DESKTOP: i32 = 930;
pub const IDS_MEDIA_ROUTER_ISSUE_FILE_CAST_GENERIC_ERROR: i32 = 931;
pub const IDS_MEDIA_ROUTER_ISSUE_FILE_CAST_ERROR: i32 = 932;
pub const IDS_MEDIA_ROUTER_STATUS_LOOKING_FOR_DEVICES: i32 = 933;
pub const IDS_MEDIA_ROUTER_STATUS_NO_DEVICES_FOUND: i32 = 934;
pub const IDS_MEDIA_ROUTER_NO_DEVICES_FOUND_BUTTON: i32 = 935;
pub const IDS_MEDIA_ROUTER_DESTINATION_MISSING: i32 = 936;
pub const IDS_MEDIA_ROUTER_SINK_AVAILABLE: i32 = 937;
pub const IDS_MEDIA_ROUTER_SINK_CONNECTING: i32 = 938;
pub const IDS_MEDIA_ROUTER_SINK_DISCONNECTING: i32 = 939;
pub const IDS_MEDIA_ROUTER_STOP_CASTING: i32 = 940;
pub const IDS_MEDIA_ROUTER_SOURCE_NOT_SUPPORTED: i32 = 941;
pub const IDS_MEDIA_ROUTER_FILE_DIALOG_AUDIO_VIDEO_FILTER: i32 = 942;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_TITLE: i32 = 943;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_BODY_TEXT: i32 = 944;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_CHECKBOX: i32 = 945;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_OPTIMIZE_BUTTON: i32 = 946;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_CANCEL_BUTTON: i32 = 947;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_CANCEL_BUTTON_MACOS: i32 = 948;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_DIALOG_TITLE: i32 = 949;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_DIALOG_BODY: i32 = 950;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_DIALOG_ENABLE: i32 = 951;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_DIALOG_CANCEL: i32 = 952;
pub const IDS_MEDIA_ROUTER_WIRED_DISPLAY_ROUTE_DESCRIPTION: i32 = 953;
pub const IDS_MEDIA_ROUTER_WIRED_DISPLAY_SINK_NAME: i32 = 954;
pub const IDS_LEGACY_SUPERVISED_USER_INFO: i32 = 955;
pub const IDS_CHILD_INFO_ONE_CUSTODIAN: i32 = 956;
pub const IDS_CHILD_INFO_TWO_CUSTODIANS: i32 = 957;
pub const IDS_LEGACY_SUPERVISED_USER_AVATAR_LABEL: i32 = 958;
pub const IDS_GENERIC_USER_AVATAR_LABEL: i32 = 213;
pub const IDS_INCOGNITO_BUBBLE_ACCESSIBLE_TITLE: i32 = 959;
pub const IDS_AVATAR_BUTTON_INCOGNITO: i32 = 960;
pub const IDS_AVATAR_BUTTON_INCOGNITO_TOOLTIP: i32 = 961;
pub const IDS_AVATAR_BUTTON_SYNC_ERROR: i32 = 962;
pub const IDS_AVATAR_BUTTON_SYNC_ERROR_TOOLTIP: i32 = 963;
pub const IDS_AVATAR_BUTTON_SYNC_PAUSED: i32 = 964;
pub const IDS_AVATAR_BUTTON_SYNC_PAUSED_TOOLTIP: i32 = 965;
pub const IDS_LEGACY_SUPERVISED_USER_NEW_AVATAR_LABEL: i32 = 966;
pub const IDS_CHILD_AVATAR_LABEL: i32 = 967;
pub const IDS_BLOCK_INTERSTITIAL_DEFAULT_FEEDBACK_TEXT: i32 = 968;
pub const IDS_PROFILES_OPTIONS_GROUP_NAME: i32 = 969;
pub const IDS_PROFILES_PROFILE_BUBBLE_ACCESSIBLE_TITLE: i32 = 971;
pub const IDS_PROFILES_PROFILE_SIGNOUT_BUTTON: i32 = 972;
pub const IDS_PROFILES_EXIT_PROFILE_BUTTON: i32 = 973;
pub const IDS_PROFILES_GAIA_SIGNIN_TITLE: i32 = 974;
pub const IDS_PROFILES_ACCOUNT_REMOVAL_TITLE: i32 = 975;
pub const IDS_PROFILES_SYNC_COMPLETE_TITLE: i32 = 976;
pub const IDS_PROFILES_DICE_SIGNIN_BUTTON: i32 = 977;
pub const IDS_PROFILES_DICE_NOT_SYNCING_TITLE: i32 = 978;
pub const IDS_PROFILES_DICE_SIGNIN_FIRST_ACCOUNT_BUTTON: i32 = 979;
pub const IDS_PROFILES_DICE_SIGNIN_FIRST_ACCOUNT_BUTTON_NO_NAME: i32 = 980;
pub const IDS_PROFILES_DICE_SYNC_DISABLED_TITLE: i32 = 981;
pub const IDS_PROFILES_DICE_SYNC_PAUSED_TITLE: i32 = 982;
pub const IDS_PROFILES_EXIT_GUEST: i32 = 983;
pub const IDS_PROFILES_SIGNIN_PROMO: i32 = 984;
pub const IDS_PROFILES_PASSWORDS_LINK: i32 = 985;
pub const IDS_PROFILES_CREDIT_CARDS_LINK: i32 = 986;
pub const IDS_PROFILES_ADDRESSES_LINK: i32 = 987;
pub const IDS_PROFILES_DICE_SIGNIN_WITH_ANOTHER_ACCOUNT_BUTTON: i32 = 988;
pub const IDS_PROFILES_DICE_USE_ANOTHER_ACCOUNT_BUTTON: i32 = 989;
pub const IDS_PROFILES_PROFILE_MANAGE_ACCOUNTS_BUTTON: i32 = 990;
pub const IDS_PROFILES_PROFILE_HIDE_MANAGE_ACCOUNTS_BUTTON: i32 = 991;
pub const IDS_PROFILES_MANAGE_USERS_BUTTON: i32 = 992;
pub const IDS_PROFILES_OPEN_GUEST_PROFILE_BUTTON: i32 = 993;
pub const IDS_PROFILES_CLOSE_ALL_WINDOWS_BUTTON: i32 = 994;
pub const IDS_PROFILES_EDIT_PROFILE_ACCESSIBLE_NAME: i32 = 995;
pub const IDS_PROFILES_EDIT_SIGNED_IN_PROFILE_ACCESSIBLE_NAME: i32 = 996;
pub const IDS_PROFILES_GUEST_PROFILE_NAME: i32 = 997;
pub const IDS_DEFAULT_PROFILE_NAME: i32 = 101;
pub const IDS_LEGACY_DEFAULT_PROFILE_NAME: i32 = 102;
pub const IDS_NUMBERED_PROFILE_NAME: i32 = 998;
pub const IDS_NEW_NUMBERED_PROFILE_NAME: i32 = 999;
pub const IDS_SINGLE_PROFILE_DISPLAY_NAME: i32 = 1000;
pub const IDS_GUEST_PROFILE_NAME: i32 = 1001;
pub const IDS_DEFAULT_AVATAR_NAME_8: i32 = 1002;
pub const IDS_DEFAULT_AVATAR_NAME_9: i32 = 1003;
pub const IDS_DEFAULT_AVATAR_NAME_10: i32 = 1004;
pub const IDS_DEFAULT_AVATAR_NAME_11: i32 = 1005;
pub const IDS_DEFAULT_AVATAR_NAME_12: i32 = 1006;
pub const IDS_DEFAULT_AVATAR_NAME_13: i32 = 1007;
pub const IDS_DEFAULT_AVATAR_NAME_14: i32 = 1008;
pub const IDS_DEFAULT_AVATAR_NAME_15: i32 = 1009;
pub const IDS_DEFAULT_AVATAR_NAME_16: i32 = 1010;
pub const IDS_DEFAULT_AVATAR_NAME_17: i32 = 1011;
pub const IDS_DEFAULT_AVATAR_NAME_18: i32 = 1012;
pub const IDS_DEFAULT_AVATAR_NAME_19: i32 = 1013;
pub const IDS_DEFAULT_AVATAR_NAME_20: i32 = 1014;
pub const IDS_DEFAULT_AVATAR_NAME_21: i32 = 1015;
pub const IDS_DEFAULT_AVATAR_NAME_22: i32 = 1016;
pub const IDS_DEFAULT_AVATAR_NAME_23: i32 = 1017;
pub const IDS_DEFAULT_AVATAR_NAME_24: i32 = 1018;
pub const IDS_DEFAULT_AVATAR_NAME_25: i32 = 1019;
pub const IDS_DEFAULT_AVATAR_NAME_26: i32 = 1020;
pub const IDS_DEFAULT_AVATAR_LABEL_0: i32 = 1021;
pub const IDS_DEFAULT_AVATAR_LABEL_1: i32 = 1022;
pub const IDS_DEFAULT_AVATAR_LABEL_2: i32 = 1023;
pub const IDS_DEFAULT_AVATAR_LABEL_3: i32 = 1024;
pub const IDS_DEFAULT_AVATAR_LABEL_4: i32 = 1025;
pub const IDS_DEFAULT_AVATAR_LABEL_5: i32 = 1026;
pub const IDS_DEFAULT_AVATAR_LABEL_6: i32 = 1027;
pub const IDS_DEFAULT_AVATAR_LABEL_7: i32 = 1028;
pub const IDS_DEFAULT_AVATAR_LABEL_8: i32 = 1029;
pub const IDS_DEFAULT_AVATAR_LABEL_9: i32 = 1030;
pub const IDS_DEFAULT_AVATAR_LABEL_10: i32 = 1031;
pub const IDS_DEFAULT_AVATAR_LABEL_11: i32 = 1032;
pub const IDS_DEFAULT_AVATAR_LABEL_12: i32 = 1033;
pub const IDS_DEFAULT_AVATAR_LABEL_13: i32 = 1034;
pub const IDS_DEFAULT_AVATAR_LABEL_14: i32 = 1035;
pub const IDS_DEFAULT_AVATAR_LABEL_15: i32 = 1036;
pub const IDS_DEFAULT_AVATAR_LABEL_16: i32 = 1037;
pub const IDS_DEFAULT_AVATAR_LABEL_17: i32 = 1038;
pub const IDS_DEFAULT_AVATAR_LABEL_18: i32 = 1039;
pub const IDS_DEFAULT_AVATAR_LABEL_19: i32 = 1040;
pub const IDS_DEFAULT_AVATAR_LABEL_20: i32 = 1041;
pub const IDS_DEFAULT_AVATAR_LABEL_21: i32 = 1042;
pub const IDS_DEFAULT_AVATAR_LABEL_22: i32 = 1043;
pub const IDS_DEFAULT_AVATAR_LABEL_23: i32 = 1044;
pub const IDS_DEFAULT_AVATAR_LABEL_24: i32 = 1045;
pub const IDS_DEFAULT_AVATAR_LABEL_25: i32 = 1046;
pub const IDS_DEFAULT_AVATAR_LABEL_27: i32 = 1047;
pub const IDS_DEFAULT_AVATAR_LABEL_28: i32 = 1048;
pub const IDS_DEFAULT_AVATAR_LABEL_29: i32 = 1049;
pub const IDS_DEFAULT_AVATAR_LABEL_30: i32 = 1050;
pub const IDS_DEFAULT_AVATAR_LABEL_31: i32 = 1051;
pub const IDS_DEFAULT_AVATAR_LABEL_32: i32 = 1052;
pub const IDS_DEFAULT_AVATAR_LABEL_33: i32 = 1053;
pub const IDS_DEFAULT_AVATAR_LABEL_34: i32 = 1054;
pub const IDS_DEFAULT_AVATAR_LABEL_35: i32 = 1055;
pub const IDS_DEFAULT_AVATAR_LABEL_36: i32 = 1056;
pub const IDS_DEFAULT_AVATAR_LABEL_37: i32 = 1057;
pub const IDS_DEFAULT_AVATAR_LABEL_38: i32 = 1058;
pub const IDS_DEFAULT_AVATAR_LABEL_39: i32 = 1059;
pub const IDS_DEFAULT_AVATAR_LABEL_40: i32 = 1060;
pub const IDS_DEFAULT_AVATAR_LABEL_41: i32 = 1061;
pub const IDS_DEFAULT_AVATAR_LABEL_42: i32 = 1062;
pub const IDS_DEFAULT_AVATAR_LABEL_43: i32 = 1063;
pub const IDS_DEFAULT_AVATAR_LABEL_44: i32 = 1064;
pub const IDS_DEFAULT_AVATAR_LABEL_45: i32 = 1065;
pub const IDS_DEFAULT_AVATAR_LABEL_46: i32 = 1066;
pub const IDS_DEFAULT_AVATAR_LABEL_47: i32 = 1067;
pub const IDS_DEFAULT_AVATAR_LABEL_48: i32 = 1068;
pub const IDS_DEFAULT_AVATAR_LABEL_49: i32 = 1069;
pub const IDS_DEFAULT_AVATAR_LABEL_50: i32 = 1070;
pub const IDS_DEFAULT_AVATAR_LABEL_51: i32 = 1071;
pub const IDS_DEFAULT_AVATAR_LABEL_52: i32 = 1072;
pub const IDS_DEFAULT_AVATAR_LABEL_53: i32 = 1073;
pub const IDS_DEFAULT_AVATAR_LABEL_54: i32 = 1074;
pub const IDS_DEFAULT_AVATAR_LABEL_55: i32 = 1075;
pub const IDS_PROFILES_LOCAL_PROFILE_STATE: i32 = 1076;
pub const IDS_PROFILES_CREATE_BUTTON_LABEL: i32 = 1077;
pub const IDS_PROFILES_MANAGE_BUTTON_LABEL: i32 = 1078;
pub const IDS_PROFILES_DEFAULT_NAME: i32 = 170;
pub const IDS_SYNC_LOGIN_NAME_PROHIBITED: i32 = 1079;
pub const IDS_SUPERVISED_USER_NOT_ALLOWED_BY_POLICY: i32 = 1080;
pub const IDS_OLD_PROFILES_DISABLED_TITLE: i32 = 1081;
pub const IDS_OLD_PROFILES_DISABLED_MESSAGE: i32 = 1082;
pub const IDS_OLD_PROFILES_DISABLED_ADD_PERSON_SUGGESTION: i32 = 1083;
pub const IDS_OLD_PROFILES_DISABLED_ADD_PERSON_SUGGESTION_WITH_DOMAIN: i32 = 1084;
pub const IDS_OLD_PROFILES_DISABLED_REMOVED_OLD_PROFILE: i32 = 1085;
pub const IDS_SYNC_USER_NAME_IN_USE_ERROR: i32 = 1086;
pub const IDS_SYNC_USER_NAME_IN_USE_BY_ERROR: i32 = 1087;
pub const IDS_PROFILES_CREATE_TITLE: i32 = 1088;
pub const IDS_PROFILES_CREATE_NAME_PLACEHOLDER: i32 = 1089;
pub const IDS_PROFILES_CREATE_LOCAL_ERROR: i32 = 1090;
pub const IDS_PROFILES_CREATE_DESKTOP_SHORTCUT_LABEL: i32 = 1091;
pub const IDS_PROFILES_CREATE_SUPERVISED_JUST_SIGNED_IN: i32 = 1092;
pub const IDS_IMPORT_EXISTING_LEGACY_SUPERVISED_USER_TITLE: i32 = 1093;
pub const IDS_IMPORT_EXISTING_LEGACY_SUPERVISED_USER_TEXT: i32 = 1094;
pub const IDS_CREATE_NEW_LEGACY_SUPERVISED_USER_LINK: i32 = 1095;
pub const IDS_IMPORT_EXISTING_LEGACY_SUPERVISED_USER_OK: i32 = 1096;
pub const IDS_ADD_USER_BUTTON: i32 = 1097;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_BUTTON: i32 = 1098;
pub const IDS_CREATE_LEGACY_SUPERVISED_USER_MENU_LABEL: i32 = 1099;
pub const IDS_SCREEN_LOCK_SIGN_OUT: i32 = 1100;
pub const IDS_BROWSE_AS_GUEST_BUTTON: i32 = 1102;
pub const IDS_MORE_OPTIONS_BUTTON: i32 = 1103;
pub const IDS_SCREEN_LOCK_ACTIVE_USER: i32 = 1104;
pub const IDS_LOGIN_ERROR_AUTHENTICATING: i32 = 1113;
pub const IDS_LOGIN_ERROR_AUTHENTICATING_OFFLINE: i32 = 1114;
pub const IDS_LOGIN_POD_EMPTY_PASSWORD_TEXT: i32 = 1115;
pub const IDS_LOGIN_POD_SIGNING_IN: i32 = 1116;
pub const IDS_LOGIN_POD_PASSWORD_FIELD_ACCESSIBLE_NAME: i32 = 1117;
pub const IDS_LOGIN_POD_SUBMIT_BUTTON_ACCESSIBLE_NAME: i32 = 1118;
pub const IDS_LOGIN_POD_MENU_BUTTON_ACCESSIBLE_NAME: i32 = 1119;
pub const IDS_LOGIN_POD_MENU_REMOVE_ITEM_ACCESSIBLE_NAME: i32 = 1120;
pub const IDS_LOGIN_POD_LEGACY_SUPERVISED_USER_REMOVE_WARNING: i32 = 1121;
pub const IDS_LOGIN_POD_NON_OWNER_USER_REMOVE_WARNING: i32 = 1122;
pub const IDS_USER_MANAGER_GO_GUEST_PROFILES_LOCKED_ERROR: i32 = 1123;
pub const IDS_USER_MANAGER_REMOVE_PROFILE_PROFILES_LOCKED_ERROR: i32 = 1124;
pub const IDS_USER_MANAGER_ADD_PROFILE_PROFILES_LOCKED_ERROR: i32 = 1125;
pub const IDS_USER_MANAGER_PROMPT_MESSAGE: i32 = 1126;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_NONSYNC: i32 = 1127;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_HISTORY: i32 = 1128;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_PASSWORDS: i32 = 1129;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_BOOKMARKS: i32 = 1130;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_AUTOFILL: i32 = 1131;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_CALCULATING: i32 = 1132;
pub const IDS_USER_MANAGER_TUTORIAL_NEXT: i32 = 1133;
pub const IDS_USER_MANAGER_TUTORIAL_DONE: i32 = 1134;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_GUEST_TITLE: i32 = 1135;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_FRIENDS_TITLE: i32 = 1136;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_TITLE: i32 = 1137;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_USER_NOT_FOUND: i32 = 1138;
pub const IDS_SETTINGS_EMPTY_STRING: i32 = 2451;
pub const IDS_SETTINGS_CONTINUE: i32 = 2453;
pub const IDS_SETTINGS_MORE_ACTIONS: i32 = 2454;
pub const IDS_SETTINGS_TURN_ON: i32 = 2455;
pub const IDS_SETTINGS_ABOUT_PAGE_BROWSER_VERSION: i32 = 2456;
pub const IDS_SETTINGS_ABOUT_PAGE_RELAUNCH: i32 = 2468;
pub const IDS_SETTINGS_ABOUT_PAGE_RELEASE_NOTES: i32 = 2494;
pub const IDS_SETTINGS_ABOUT_PAGE_SHOW_RELEASE_NOTES: i32 = 2495;
pub const IDS_SETTINGS_ABOUT_UPGRADE_CHECK_STARTED: i32 = 2496;
pub const IDS_SETTINGS_CAPTIONS: i32 = 2499;
pub const IDS_SETTINGS_CAPTIONS_TEXT_SIZE: i32 = 2500;
pub const IDS_SETTINGS_CAPTIONS_TEXT_FONT: i32 = 2501;
pub const IDS_SETTINGS_CAPTIONS_TEXT_COLOR: i32 = 2502;
pub const IDS_SETTINGS_CAPTIONS_TEXT_OPACITY: i32 = 2503;
pub const IDS_SETTINGS_CAPTIONS_BACKGROUND_OPACITY: i32 = 2504;
pub const IDS_SETTINGS_CAPTIONS_OPACITY_MIN: i32 = 2505;
pub const IDS_SETTINGS_CAPTIONS_OPACITY_MAX: i32 = 2506;
pub const IDS_SETTINGS_CAPTIONS_TEXT_SHADOW: i32 = 2507;
pub const IDS_SETTINGS_CAPTIONS_TEXT_SHADOW_NONE: i32 = 2508;
pub const IDS_SETTINGS_CAPTIONS_TEXT_SHADOW_RAISED: i32 = 2509;
pub const IDS_SETTINGS_CAPTIONS_TEXT_SHADOW_DEPRESSED: i32 = 2510;
pub const IDS_SETTINGS_CAPTIONS_TEXT_SHADOW_UNIFORM: i32 = 2511;
pub const IDS_SETTINGS_CAPTIONS_TEXT_SHADOW_DROP_SHADOW: i32 = 2512;
pub const IDS_SETTINGS_CAPTIONS_BACKGROUND_COLOR: i32 = 2513;
pub const IDS_SETTINGS_CAPTIONS_COLOR_BLACK: i32 = 2514;
pub const IDS_SETTINGS_CAPTIONS_COLOR_WHITE: i32 = 2515;
pub const IDS_SETTINGS_CAPTIONS_COLOR_RED: i32 = 2516;
pub const IDS_SETTINGS_CAPTIONS_COLOR_GREEN: i32 = 2517;
pub const IDS_SETTINGS_CAPTIONS_COLOR_BLUE: i32 = 2518;
pub const IDS_SETTINGS_CAPTIONS_COLOR_YELLOW: i32 = 2519;
pub const IDS_SETTINGS_CAPTIONS_COLOR_CYAN: i32 = 2520;
pub const IDS_SETTINGS_CAPTIONS_COLOR_MAGENTA: i32 = 2521;
pub const IDS_SETTINGS_CAPTIONS_DEFAULT_SETTING: i32 = 2522;
pub const IDS_SETTINGS_ACCESSIBILITY: i32 = 2523;
pub const IDS_SETTINGS_ACCESSIBILITY_WEB_STORE: i32 = 2524;
pub const IDS_SETTINGS_MORE_FEATURES_LINK: i32 = 2525;
pub const IDS_SETTINGS_MORE_FEATURES_LINK_DESCRIPTION: i32 = 2526;
pub const IDS_SETTINGS_ACCESSIBLE_IMAGE_LABELS_TITLE: i32 = 2527;
pub const IDS_SETTINGS_ACCESSIBLE_IMAGE_LABELS_SUBTITLE: i32 = 2528;
pub const IDS_SETTINGS_APPEARANCE: i32 = 2678;
pub const IDS_SETTINGS_CUSTOM_WEB_ADDRESS: i32 = 2679;
pub const IDS_SETTINGS_ENTER_CUSTOM_WEB_ADDRESS: i32 = 2680;
pub const IDS_SETTINGS_HOME_BUTTON_DISABLED: i32 = 2681;
pub const IDS_SETTINGS_THEMES: i32 = 2682;
pub const IDS_SETTINGS_RESET_TO_DEFAULT_THEME: i32 = 2687;
pub const IDS_SETTINGS_CHROME_COLORS: i32 = 2688;
pub const IDS_SETTINGS_SHOW_HOME_BUTTON: i32 = 2689;
pub const IDS_SETTINGS_SHOW_BOOKMARKS_BAR: i32 = 2690;
pub const IDS_SETTINGS_HOME_PAGE_NTP: i32 = 2691;
pub const IDS_SETTINGS_CHANGE_HOME_PAGE: i32 = 2692;
pub const IDS_SETTINGS_WEB_STORE: i32 = 2693;
pub const IDS_SETTINGS_ADVANCED: i32 = 2696;
pub const IDS_SETTINGS_BASIC: i32 = 2697;
pub const IDS_SETTINGS_MENU_BUTTON_LABEL: i32 = 2698;
pub const IDS_SETTINGS_MENU_EXTENSIONS_LINK_TOOLTIP: i32 = 2699;
pub const IDS_SETTINGS_SEARCH_PROMPT: i32 = 2700;
pub const IDS_SETTINGS_SEARCH_NO_RESULTS_HELP: i32 = 2701;
pub const IDS_SETTINGS_SETTINGS: i32 = 2702;
pub const IDS_SETTINGS_ALT_PAGE_TITLE: i32 = 2703;
pub const IDS_SETTINGS_RESTART: i32 = 2704;
pub const IDS_SETTINGS_CONTROLLED_BY_EXTENSION: i32 = 2707;
pub const IDS_SETTINGS_CLEAR: i32 = 2708;
pub const IDS_SETTINGS_EDIT: i32 = 2709;
pub const IDS_SETTINGS_TOGGLE_ON: i32 = 2710;
pub const IDS_SETTINGS_TOGGLE_OFF: i32 = 2711;
pub const IDS_SETTINGS_NOT_VALID: i32 = 2712;
pub const IDS_SETTINGS_NOT_VALID_WEB_ADDRESS: i32 = 2713;
pub const IDS_SETTINGS_NOT_VALID_WEB_ADDRESS_FOR_CONTENT_TYPE: i32 = 2714;
pub const IDS_SETTINGS_RETRY: i32 = 2715;
pub const IDS_SETTINGS_AUTOFILL: i32 = 2716;
pub const IDS_SETTINGS_GOOGLE_PAYMENTS: i32 = 2717;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_ADD_TITLE: i32 = 2718;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_EDIT_TITLE: i32 = 2719;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_COUNTRY: i32 = 2720;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_PHONE: i32 = 2721;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_EMAIL: i32 = 2722;
pub const IDS_SETTINGS_AUTOFILL_CREDIT_CARD_TYPE_COLUMN_LABEL: i32 = 2723;
pub const IDS_SETTINGS_AUTOFILL_DETAIL: i32 = 2724;
pub const IDS_SETTINGS_ADDRESS_REMOVE: i32 = 2725;
pub const IDS_SETTINGS_CREDIT_CARD_REMOVE: i32 = 2726;
pub const IDS_SETTINGS_CREDIT_CARD_CLEAR: i32 = 2727;
pub const IDS_SETTINGS_EDIT_CREDIT_CARD_TITLE: i32 = 2728;
pub const IDS_SETTINGS_PAYMENTS_MANAGE_CREDIT_CARDS: i32 = 2729;
pub const IDS_SETTINGS_PAYMENTS_SAVED_TO_THIS_DEVICE_ONLY: i32 = 2730;
pub const IDS_SETTINGS_ADD_CREDIT_CARD_TITLE: i32 = 2731;
pub const IDS_SETTINGS_MIGRATABLE_CARDS_LABEL: i32 = 2732;
pub const IDS_SETTINGS_SINGLE_MIGRATABLE_CARD_INFO: i32 = 2733;
pub const IDS_SETTINGS_MULTIPLE_MIGRATABLE_CARDS_INFO: i32 = 2734;
pub const IDS_SETTINGS_NAME_ON_CREDIT_CARD: i32 = 2735;
pub const IDS_SETTINGS_CREDIT_CARD_NUMBER: i32 = 2736;
pub const IDS_SETTINGS_CREDIT_CARD_EXPIRATION_DATE: i32 = 2737;
pub const IDS_SETTINGS_CREDIT_CARD_EXPIRATION_MONTH: i32 = 2738;
pub const IDS_SETTINGS_CREDIT_CARD_EXPIRATION_YEAR: i32 = 2739;
pub const IDS_SETTINGS_CREDIT_CARD_EXPIRED: i32 = 2740;
pub const IDS_SETTINGS_PASSWORDS: i32 = 2741;
pub const IDS_SETTINGS_PASSWORDS_SAVE_PASSWORDS_TOGGLE_LABEL: i32 = 2742;
pub const IDS_SETTINGS_PASSWORDS_AUTOSIGNIN_CHECKBOX_LABEL: i32 = 2743;
pub const IDS_SETTINGS_PASSWORDS_AUTOSIGNIN_CHECKBOX_DESC: i32 = 2744;
pub const IDS_SETTINGS_PASSWORDS_SAVED_HEADING: i32 = 2745;
pub const IDS_SETTINGS_PASSWORDS_EXCEPTIONS_HEADING: i32 = 2746;
pub const IDS_SETTINGS_PASSWORDS_DELETE_EXCEPTION: i32 = 2747;
pub const IDS_SETTINGS_PASSWORD_REMOVE: i32 = 2748;
pub const IDS_SETTINGS_PASSWORD_SEARCH: i32 = 2749;
pub const IDS_SETTINGS_PASSWORD_SHOW: i32 = 2750;
pub const IDS_SETTINGS_PASSWORD_HIDE: i32 = 2751;
pub const IDS_SETTINGS_PASSWORDS_VIEW_DETAILS_TITLE: i32 = 2752;
pub const IDS_SETTINGS_PASSWORD_DETAILS: i32 = 2753;
pub const IDS_SETTINGS_PASSWORDS_WEBSITE: i32 = 2754;
pub const IDS_SETTINGS_PASSWORDS_USERNAME: i32 = 2755;
pub const IDS_SETTINGS_PASSWORDS_PASSWORD: i32 = 2756;
pub const IDS_SETTINGS_ADDRESS_NONE: i32 = 2757;
pub const IDS_SETTINGS_PAYMENT_METHODS_NONE: i32 = 2758;
pub const IDS_SETTINGS_PASSWORDS_NONE: i32 = 2759;
pub const IDS_SETTINGS_PASSWORDS_EXCEPTIONS_NONE: i32 = 2760;
pub const IDS_SETTINGS_PASSWORD_UNDO: i32 = 2761;
pub const IDS_SETTINGS_PASSWORD_DELETED_PASSWORD: i32 = 2762;
pub const IDS_SETTINGS_PASSWORDS_MANAGE_PASSWORDS: i32 = 2763;
pub const IDS_SETTINGS_PASSWORDS_EXPORT_MENU_ITEM: i32 = 2764;
pub const IDS_SETTINGS_PASSWORDS_EXPORT_TITLE: i32 = 2765;
pub const IDS_SETTINGS_PASSWORDS_EXPORT_DESCRIPTION: i32 = 2766;
pub const IDS_SETTINGS_PASSWORDS_EXPORT: i32 = 2767;
pub const IDS_SETTINGS_PASSWORDS_EXPORT_TRY_AGAIN: i32 = 2768;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_TITLE: i32 = 2769;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_FAILURE_TITLE: i32 = 2770;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_FAILURE_TIPS: i32 = 2771;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_FAILURE_TIP_ENOUGH_SPACE: i32 = 2772;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_FAILURE_TIP_ANOTHER_FOLDER: i32 = 2773;
pub const IDS_SETTINGS_PASSWORD_ROW_MORE_ACTIONS: i32 = 2774;
pub const IDS_SETTINGS_PASSWORD_ROW_FEDERATED_MORE_ACTIONS: i32 = 2775;
pub const IDS_SETTINGS_DEFAULT_BROWSER: i32 = 2776;
pub const IDS_SETTINGS_DEFAULT_BROWSER_MAKE_DEFAULT_BUTTON: i32 = 2777;
pub const IDS_SETTINGS_CLEAR_PERIOD_TITLE: i32 = 2875;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA_WITH_SYNC: i32 = 2876;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA_WITH_SYNC_ERROR: i32 = 2877;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA_WITH_SYNC_PASSPHRASE_ERROR: i32 = 2878;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA_WITH_SYNC_PAUSED: i32 = 2879;
pub const IDS_SETTINGS_CLEAR_BROWSING_HISTORY: i32 = 2880;
pub const IDS_SETTINGS_CLEAR_COOKIES_AND_SITE_DATA_SUMMARY_BASIC: i32 = 2881;
pub const IDS_SETTINGS_CLEAR_COOKIES_AND_SITE_DATA_SUMMARY_BASIC_WITH_EXCEPTION: i32 = 2882;
pub const IDS_SETTINGS_CLEAR_BROWSING_HISTORY_SUMMARY: i32 = 2883;
pub const IDS_SETTINGS_CLEAR_BROWSING_HISTORY_SUMMARY_SIGNED_IN: i32 = 2884;
pub const IDS_SETTINGS_CLEAR_BROWSING_HISTORY_SUMMARY_SYNCED: i32 = 2885;
pub const IDS_SETTINGS_CLEAR_DOWNLOAD_HISTORY: i32 = 2886;
pub const IDS_SETTINGS_CLEAR_CACHE: i32 = 2887;
pub const IDS_SETTINGS_CLEAR_COOKIES: i32 = 2888;
pub const IDS_SETTINGS_CLEAR_COOKIES_FLASH: i32 = 2889;
pub const IDS_SETTINGS_CLEAR_PASSWORDS: i32 = 2890;
pub const IDS_SETTINGS_CLEAR_FORM_DATA: i32 = 2891;
pub const IDS_SETTINGS_CLEAR_HOSTED_APP_DATA: i32 = 2892;
pub const IDS_SETTINGS_CLEAR_PERIOD_HOUR: i32 = 2893;
pub const IDS_SETTINGS_CLEAR_PERIOD_24_HOURS: i32 = 2894;
pub const IDS_SETTINGS_CLEAR_PERIOD_7_DAYS: i32 = 2895;
pub const IDS_SETTINGS_CLEAR_PERIOD_FOUR_WEEKS: i32 = 2896;
pub const IDS_SETTINGS_CLEAR_PERIOD_EVERYTHING: i32 = 2897;
pub const IDS_SETTINGS_NOTIFICATION_WARNING: i32 = 2898;
pub const IDS_SETTINGS_PRINTING: i32 = 2899;
pub const IDS_SETTINGS_PRINTING_CLOUD_PRINT_LEARN_MORE_LABEL: i32 = 2900;
pub const IDS_SETTINGS_PRINTING_NOTIFICATIONS_LABEL: i32 = 2901;
pub const IDS_SETTINGS_PRINTING_MANAGE_CLOUD_PRINT_DEVICES: i32 = 2902;
pub const IDS_SETTINGS_PRINTING_LOCAL_PRINTERS_TITLE: i32 = 2962;
pub const IDS_SETTINGS_PRINTING_CLOUD_PRINTERS: i32 = 2963;
pub const IDS_SETTINGS_DOWNLOADS: i32 = 2964;
pub const IDS_SETTINGS_DOWNLOAD_LOCATION: i32 = 2965;
pub const IDS_SETTINGS_CHANGE_DOWNLOAD_LOCATION: i32 = 2966;
pub const IDS_SETTINGS_PROMPT_FOR_DOWNLOAD: i32 = 2967;
pub const IDS_SETTINGS_DISCONNECT_GOOGLE_DRIVE: i32 = 2968;
pub const IDS_SETTINGS_OPEN_FILE_TYPES_AUTOMATICALLY: i32 = 2969;
pub const IDS_SETTINGS_ON_STARTUP: i32 = 3296;
pub const IDS_SETTINGS_ON_STARTUP_OPEN_NEW_TAB: i32 = 3297;
pub const IDS_SETTINGS_ON_STARTUP_CONTINUE: i32 = 3298;
pub const IDS_SETTINGS_ON_STARTUP_OPEN_SPECIFIC: i32 = 3299;
pub const IDS_SETTINGS_ON_STARTUP_USE_CURRENT: i32 = 3300;
pub const IDS_SETTINGS_ON_STARTUP_ADD_NEW_PAGE: i32 = 3301;
pub const IDS_SETTINGS_ON_STARTUP_EDIT_PAGE: i32 = 3302;
pub const IDS_SETTINGS_ON_STARTUP_SITE_URL: i32 = 3303;
pub const IDS_SETTINGS_ON_STARTUP_REMOVE: i32 = 3304;
pub const IDS_SETTINGS_ON_STARTUP_PAGE_TOOLTIP: i32 = 3305;
pub const IDS_SETTINGS_INVALID_URL: i32 = 3306;
pub const IDS_SETTINGS_URL_TOOL_LONG: i32 = 3307;
pub const IDS_SETTINGS_LANGUAGES_PAGE_TITLE: i32 = 3308;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_TITLE: i32 = 3309;
pub const IDS_SETTINGS_LANGUAGE_SEARCH: i32 = 3310;
pub const IDS_SETTINGS_LANGUAGES_EXPAND_ACCESSIBILITY_LABEL: i32 = 3311;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_ORDERING_INSTRUCTIONS: i32 = 3312;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_MOVE_TO_TOP: i32 = 3313;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_MOVE_UP: i32 = 3314;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_MOVE_DOWN: i32 = 3315;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_REMOVE: i32 = 3316;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_ADD: i32 = 3317;
pub const IDS_SETTINGS_LANGUAGES_OFFER_TO_TRANSLATE_IN_THIS_LANGUAGE: i32 = 3318;
pub const IDS_SETTINGS_LANGUAGES_OFFER_TO_ENABLE_TRANSLATE: i32 = 3319;
pub const IDS_SETTINGS_LANGUAGES_TRANSLATE_TARGET: i32 = 3320;
pub const IDS_SETTINGS_LANGUAGES_MANAGE_LANGUAGES_TITLE: i32 = 3329;
pub const IDS_SETTINGS_LANGUAGES_ALL_LANGUAGES: i32 = 3330;
pub const IDS_SETTINGS_LANGUAGES_ENABLED_LANGUAGES: i32 = 3331;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_TITLE: i32 = 3332;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_BASIC_LABEL: i32 = 3333;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_ENHANCED_LABEL: i32 = 3334;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_ENHANCED_DESCRIPTION: i32 = 3335;
pub const IDS_SETTING_LANGUAGES_SPELL_CHECK_DISABLED_REASON: i32 = 3336;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_LANGUAGES_LIST_TITLE: i32 = 3337;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_MANAGE: i32 = 3338;
pub const IDS_SETTINGS_LANGUAGES_EDIT_DICTIONARY_TITLE: i32 = 3339;
pub const IDS_SETTINGS_LANGUAGES_ADD_DICTIONARY_WORD: i32 = 3340;
pub const IDS_SETTINGS_LANGUAGES_ADD_DICTIONARY_WORD_BUTTON: i32 = 3341;
pub const IDS_SETTINGS_LANGUAGES_ADD_DICTIONARY_WORD_DUPLICATE_ERROR: i32 = 3342;
pub const IDS_SETTINGS_LANGUAGES_ADD_DICTIONARY_WORD_LENGTH_ERROR: i32 = 3343;
pub const IDS_SETTINGS_LANGUAGES_DICTIONARY_WORDS: i32 = 3344;
pub const IDS_SETTINGS_LANGUAGES_DICTIONARY_WORDS_NONE: i32 = 3345;
pub const IDS_SETTINGS_LANGUAGES_DICTIONARY_DOWNLOAD_FAILED: i32 = 3346;
pub const IDS_SETTINGS_LANGUAGES_DICTIONARY_DOWNLOAD_FAILED_HELP: i32 = 3347;
pub const IDS_SETTINGS_PRIVACY: i32 = 3348;
pub const IDS_SETTINGS_LINKDOCTOR_PREF: i32 = 3349;
pub const IDS_SETTINGS_LINKDOCTOR_PREF_UNIFIED_CONSENT: i32 = 3350;
pub const IDS_SETTINGS_LINKDOCTOR_PREF_DESC_UNIFIED_CONSENT: i32 = 3351;
pub const IDS_SETTINGS_SUGGEST_PREF: i32 = 3352;
pub const IDS_SETTINGS_SUGGEST_PREF_UNIFIED_CONSENT: i32 = 3353;
pub const IDS_SETTINGS_SUGGEST_PREF_DESC_UNIFIED_CONSENT: i32 = 3354;
pub const IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_LABEL: i32 = 3355;
pub const IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_LABEL_UNIFIED_CONSENT: i32 = 3356;
pub const IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_DESC_UNIFIED_CONSENT: i32 = 3357;
pub const IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION: i32 = 3358;
pub const IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC: i32 = 3359;
pub const IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING: i32 = 3360;
pub const IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING_DESC: i32 = 3361;
pub const IDS_SETTINGS_SPELLING_PREF: i32 = 3362;
pub const IDS_SETTINGS_SPELLING_DESCRIPTION: i32 = 3363;
pub const IDS_SETTINGS_SPELLING_PREF_UNIFIED_CONSENT: i32 = 3364;
pub const IDS_SETTINGS_ENABLE_LOGGING: i32 = 3365;
pub const IDS_SETTINGS_ENABLE_LOGGING_DIAGNOSTIC_AND_USAGE_DATA: i32 = 3366;
pub const IDS_SETTINGS_ENABLE_LOGGING_UNIFIED_CONSENT: i32 = 3367;
pub const IDS_SETTINGS_ENABLE_LOGGING_DESC_UNIFIED_CONSENT: i32 = 3368;
pub const IDS_SETTINGS_ENABLE_URL_KEYED_ANONYMIZED_DATA_COLLECTION: i32 = 3369;
pub const IDS_SETTINGS_ENABLE_URL_KEYED_ANONYMIZED_DATA_COLLECTION_DESC: i32 = 3370;
pub const IDS_SETTINGS_ENABLE_DO_NOT_TRACK: i32 = 3371;
pub const IDS_SETTINGS_ENABLE_DO_NOT_TRACK_DIALOG_TITLE: i32 = 3372;
pub const IDS_SETTINGS_ENABLE_DO_NOT_TRACK_DIALOG_TEXT: i32 = 3373;
pub const IDS_SETTINGS_ENABLE_CONTENT_PROTECTION_ATTESTATION: i32 = 3374;
pub const IDS_SETTINGS_WAKE_ON_WIFI_DESCRIPTION: i32 = 3375;
pub const IDS_SETTINGS_MANAGE_CERTIFICATES: i32 = 3376;
pub const IDS_SETTINGS_MANAGE_CERTIFICATES_DESCRIPTION: i32 = 3377;
pub const IDS_SETTINGS_CONTENT_SETTINGS: i32 = 3378;
pub const IDS_SETTINGS_SITE_SETTINGS: i32 = 3379;
pub const IDS_SETTINGS_SITE_SETTINGS_DESCRIPTION: i32 = 3380;
pub const IDS_SETTINGS_CLEAR_DATA: i32 = 3381;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA: i32 = 3382;
pub const IDS_SETTINGS_CLEAR_DATA_DESCRIPTION: i32 = 3383;
pub const IDS_SETTINGS_TITLE_AND_COUNT: i32 = 3384;
pub const IDS_SETTINGS_SYNC_AND_GOOGLE_SERVICES_PRIVACY_DESC_UNIFIED_CONSENT: i32 = 3385;
pub const IDS_SETTINGS_RESET: i32 = 3386;
pub const IDS_SETTINGS_RESET_SETTINGS_TRIGGER: i32 = 3387;
pub const IDS_SETTINGS_RESET_AUTOMATED_DIALOG_TITLE: i32 = 3388;
pub const IDS_SETTINGS_RESET_BANNER_TEXT: i32 = 3389;
pub const IDS_SETTINGS_RESET_BANNER_RESET_BUTTON_TEXT: i32 = 3390;
pub const IDS_SETTINGS_SEARCH: i32 = 3397;
pub const IDS_SETTINGS_SEARCH_EXPLANATION: i32 = 3399;
pub const IDS_SETTINGS_SEARCH_MANAGE_SEARCH_ENGINES: i32 = 3400;
pub const IDS_SETTINGS_SEARCH_ENGINES: i32 = 3404;
pub const IDS_SETTINGS_SEARCH_ENGINES_SEARCH: i32 = 3405;
pub const IDS_SETTINGS_SEARCH_ENGINES_ADD_SEARCH_ENGINE: i32 = 3406;
pub const IDS_SETTINGS_SEARCH_ENGINES_EDIT_SEARCH_ENGINE: i32 = 3407;
pub const IDS_SETTINGS_SEARCH_ENGINES_DEFAULT_ENGINES: i32 = 3408;
pub const IDS_SETTINGS_SEARCH_ENGINES_OTHER_ENGINES: i32 = 3409;
pub const IDS_SETTINGS_SEARCH_ENGINES_NO_OTHER_ENGINES: i32 = 3410;
pub const IDS_SETTINGS_SEARCH_ENGINES_EXTENSION_ENGINES: i32 = 3411;
pub const IDS_SETTINGS_SEARCH_ENGINES_SEARCH_ENGINE: i32 = 3412;
pub const IDS_SETTINGS_SEARCH_ENGINES_KEYWORD: i32 = 3413;
pub const IDS_SETTINGS_SEARCH_ENGINES_QUERY_URL: i32 = 3414;
pub const IDS_SETTINGS_SEARCH_ENGINES_QUERY_URL_EXPLANATION: i32 = 3415;
pub const IDS_SETTINGS_SEARCH_ENGINES_MAKE_DEFAULT: i32 = 3416;
pub const IDS_SETTINGS_SEARCH_ENGINES_REMOVE_FROM_LIST: i32 = 3417;
pub const IDS_SETTINGS_SEARCH_ENGINES_MANAGE_EXTENSION: i32 = 3418;
pub const IDS_SETTINGS_EXCEPTIONS_EMBEDDED_ON_HOST: i32 = 3433;
pub const IDS_SETTINGS_EXCEPTIONS_EMBEDDED_ON_ANY_HOST: i32 = 3434;
pub const IDS_SETTINGS_SITE_SETTINGS_CATEGORY: i32 = 3435;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES: i32 = 3436;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_DESCRIPTION: i32 = 3437;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SEARCH: i32 = 3438;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SORT: i32 = 3439;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SORT_METHOD_MOST_VISITED: i32 = 3440;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SORT_METHOD_STORAGE: i32 = 3441;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SORT_METHOD_NAME: i32 = 3442;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_REPRESENTATION_SEPARATOR: i32 = 3443;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS: i32 = 3444;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DOWNLOADS: i32 = 3445;
pub const IDS_SETTINGS_SITE_SETTINGS_BACKGROUND_SYNC: i32 = 3446;
pub const IDS_SETTINGS_SITE_SETTINGS_CAMERA: i32 = 3447;
pub const IDS_SETTINGS_SITE_SETTINGS_CAMERA_LABEL: i32 = 3448;
pub const IDS_SETTINGS_SITE_SETTINGS_CLIPBOARD: i32 = 3449;
pub const IDS_SETTINGS_SITE_SETTINGS_CLIPBOARD_ASK: i32 = 3450;
pub const IDS_SETTINGS_SITE_SETTINGS_CLIPBOARD_ASK_RECOMMENDED: i32 = 3451;
pub const IDS_SETTINGS_SITE_SETTINGS_CLIPBOARD_BLOCK: i32 = 3452;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIES: i32 = 3453;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLERS: i32 = 3454;
pub const IDS_SETTINGS_SITE_SETTINGS_LOCATION: i32 = 3455;
pub const IDS_SETTINGS_SITE_SETTINGS_MIC: i32 = 3456;
pub const IDS_SETTINGS_SITE_SETTINGS_MIC_LABEL: i32 = 3457;
pub const IDS_SETTINGS_SITE_SETTINGS_NOTIFICATIONS: i32 = 3458;
pub const IDS_SETTINGS_SITE_SETTINGS_IMAGES: i32 = 3459;
pub const IDS_SETTINGS_SITE_SETTINGS_JAVASCRIPT: i32 = 3460;
pub const IDS_SETTINGS_SITE_SETTINGS_FLASH: i32 = 3461;
pub const IDS_SETTINGS_SITE_SETTINGS_PAYMENT_HANDLER: i32 = 3462;
pub const IDS_SETTINGS_SITE_SETTINGS_PAYMENT_HANDLER_ALLOW: i32 = 3463;
pub const IDS_SETTINGS_SITE_SETTINGS_PAYMENT_HANDLER_ALLOW_RECOMMENDED: i32 = 3464;
pub const IDS_SETTINGS_SITE_SETTINGS_PAYMENT_HANDLER_BLOCK: i32 = 3465;
pub const IDS_SETTINGS_SITE_SETTINGS_PDF_DOCUMENTS: i32 = 3466;
pub const IDS_SETTINGS_SITE_SETTINGS_PDF_DOWNLOAD_PDFS: i32 = 3467;
pub const IDS_SETTINGS_SITE_SETTINGS_POPUPS: i32 = 3468;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT: i32 = 3469;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT_IDENTIFIERS: i32 = 3470;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT_ENABLE: i32 = 3471;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT_IDENTIFIERS_EXPLANATION: i32 = 3472;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT_ENABLE_IDENTIFIERS: i32 = 3473;
pub const IDS_SETTINGS_SITE_SETTINGS_UNSANDBOXED_PLUGINS: i32 = 3474;
pub const IDS_SETTINGS_SITE_SETTINGS_MIDI_DEVICES: i32 = 3475;
pub const IDS_SETTINGS_SITE_SETTINGS_MIDI_DEVICES_ASK: i32 = 3476;
pub const IDS_SETTINGS_SITE_SETTINGS_MIDI_DEVICES_ASK_RECOMMENDED: i32 = 3477;
pub const IDS_SETTINGS_SITE_SETTINGS_MIDI_DEVICES_BLOCK: i32 = 3478;
pub const IDS_SETTINGS_SITE_SETTINGS_SOUND: i32 = 3479;
pub const IDS_SETTINGS_SITE_SETTINGS_SENSORS: i32 = 3480;
pub const IDS_SETTINGS_SITE_SETTINGS_MOTION_SENSORS: i32 = 3481;
pub const IDS_SETTINGS_SITE_SETTINGS_USB_DEVICES: i32 = 3482;
pub const IDS_SETTINGS_SITE_SETTINGS_USB_DEVICES_ASK: i32 = 3483;
pub const IDS_SETTINGS_SITE_SETTINGS_USB_DEVICES_ASK_RECOMMENDED: i32 = 3484;
pub const IDS_SETTINGS_SITE_SETTINGS_USB_DEVICES_BLOCK: i32 = 3485;
pub const IDS_SETTINGS_SITE_SETTINGS_SERIAL_PORTS: i32 = 3486;
pub const IDS_SETTINGS_SITE_SETTINGS_SERIAL_PORTS_ASK: i32 = 3487;
pub const IDS_SETTINGS_SITE_SETTINGS_SERIAL_PORTS_ASK_RECOMMENDED: i32 = 3488;
pub const IDS_SETTINGS_SITE_SETTINGS_SERIAL_PORTS_BLOCK: i32 = 3489;
pub const IDS_SETTINGS_SITE_SETTINGS_REMOVE_ZOOM_LEVEL: i32 = 3490;
pub const IDS_SETTINGS_SITE_SETTINGS_ZOOM_LEVELS: i32 = 3491;
pub const IDS_SETTINGS_SITE_SETTINGS_MAY_SAVE_COOKIES: i32 = 3492;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_FIRST: i32 = 3493;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_FIRST_RECOMMENDED: i32 = 3494;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_BEFORE_ACCESSING: i32 = 3495;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_BEFORE_ACCESSING_RECOMMENDED: i32 = 3496;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_BEFORE_SENDING: i32 = 3497;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_BEFORE_SENDING_RECOMMENDED: i32 = 3498;
pub const IDS_SETTINGS_SITE_SETTINGS_DONT_SHOW_IMAGES: i32 = 3499;
pub const IDS_SETTINGS_SITE_SETTINGS_SHOW_ALL: i32 = 3500;
pub const IDS_SETTINGS_SITE_SETTINGS_SHOW_ALL_RECOMMENDED: i32 = 3501;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIES_ALLOW_SITES: i32 = 3502;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIES_ALLOW_SITES_RECOMMENDED: i32 = 3503;
pub const IDS_SETTINGS_SITE_SETTINGS_FLASH_BLOCK: i32 = 3504;
pub const IDS_SETTINGS_SITE_SETTINGS_FLASH_BLOCK_RECOMMENDED: i32 = 3505;
pub const IDS_SETTINGS_SITE_SETTINGS_FLASH_PERMISSIONS_ARE_EPHEMERAL: i32 = 3506;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW_RECENTLY_CLOSED_SITES: i32 = 3507;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW_RECENTLY_CLOSED_SITES_RECOMMENDED: i32 = 3508;
pub const IDS_SETTINGS_SITE_SETTINGS_BACKGROUND_SYNC_BLOCKED: i32 = 3509;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLERS_ASK: i32 = 3510;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLERS_ASK_RECOMMENDED: i32 = 3511;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLERS_BLOCKED: i32 = 3512;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS_BLOCK: i32 = 3513;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS_BLOCK_RECOMMENDED: i32 = 3514;
pub const IDS_SETTINGS_SITE_SETTINGS_SOUND_ALLOW: i32 = 3515;
pub const IDS_SETTINGS_SITE_SETTINGS_SOUND_ALLOW_RECOMMENDED: i32 = 3516;
pub const IDS_SETTINGS_SITE_SETTINGS_SOUND_BLOCK: i32 = 3517;
pub const IDS_SETTINGS_SITE_SETTINGS_SENSORS_ALLOW: i32 = 3518;
pub const IDS_SETTINGS_SITE_SETTINGS_MOTION_SENSORS_ALLOW: i32 = 3519;
pub const IDS_SETTINGS_SITE_SETTINGS_SENSORS_BLOCK: i32 = 3520;
pub const IDS_SETTINGS_SITE_SETTINGS_MOTION_SENSORS_BLOCK: i32 = 3521;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DOWNLOAD_ASK: i32 = 3522;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DOWNLOAD_ASK_RECOMMENDED: i32 = 3523;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DOWNLOAD_BLOCK: i32 = 3524;
pub const IDS_SETTINGS_SITE_SETTINGS_UNSANDBOXED_PLUGINS_ASK: i32 = 3525;
pub const IDS_SETTINGS_SITE_SETTINGS_UNSANDBOXED_PLUGINS_ASK_RECOMMENDED: i32 = 3526;
pub const IDS_SETTINGS_SITE_SETTINGS_UNSANDBOXED_PLUGINS_BLOCK: i32 = 3527;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOWED: i32 = 3528;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOWED_RECOMMENDED: i32 = 3529;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCKED: i32 = 3530;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCKED_RECOMMENDED: i32 = 3531;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW: i32 = 3532;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK: i32 = 3533;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK_SOUND: i32 = 3534;
pub const IDS_SETTINGS_SITE_SETTINGS_SESSION_ONLY: i32 = 3535;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_URL: i32 = 3536;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_DEFAULT_MENU: i32 = 3537;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW_DEFAULT_MENU: i32 = 3538;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DEFAULT_MENU: i32 = 3539;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK_DEFAULT_MENU: i32 = 3540;
pub const IDS_SETTINGS_SITE_SETTINGS_MUTE_DEFAULT_MENU: i32 = 3541;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW_MENU: i32 = 3542;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK_MENU: i32 = 3543;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_MENU: i32 = 3544;
pub const IDS_SETTINGS_SITE_SETTINGS_MUTE_MENU: i32 = 3545;
pub const IDS_SETTINGS_SITE_SETTINGS_RESET_MENU: i32 = 3546;
pub const IDS_SETTINGS_SITE_SETTINGS_SESSION_ONLY_MENU: i32 = 3547;
pub const IDS_SETTINGS_SITE_SETTINGS_USAGE: i32 = 3548;
pub const IDS_SETTINGS_SITE_SETTINGS_USAGE_NONE: i32 = 3549;
pub const IDS_SETTINGS_SITE_SETTINGS_PERMISSIONS: i32 = 3550;
pub const IDS_SETTINGS_SITE_SETTINGS_SOURCE_DRM_DISABLED: i32 = 3551;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS_BLOCK_BLACKLISTED_SINGULAR: i32 = 3552;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS_BLOCK_NOT_BLACKLISTED_SINGULAR: i32 = 3553;
pub const IDS_SETTINGS_SITE_SETTINGS_SOURCE_KILL_SWITCH: i32 = 3554;
pub const IDS_SETTINGS_SITE_SETTINGS_SOURCE_INSECURE_ORIGIN: i32 = 3555;
pub const IDS_SETTINGS_SITE_SETTINGS_RESET_BUTTON: i32 = 3556;
pub const IDS_SETTINGS_SITE_SETTINGS_DELETE: i32 = 3557;
pub const IDS_SETTINGS_SITE_SETTINGS_GROUP_RESET: i32 = 3558;
pub const IDS_SETTINGS_SITE_SETTINGS_GROUP_DELETE: i32 = 3559;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_HEADER: i32 = 3560;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_LINK: i32 = 3561;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE: i32 = 3562;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_ALL: i32 = 3563;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_ALL_SHOWN: i32 = 3564;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_DIALOG_TITLE: i32 = 3565;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_SUBPAGE: i32 = 3566;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_RESET_CONFIRMATION: i32 = 3567;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_CLEAR_STORAGE_DIALOG_TITLE: i32 = 3568;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_CLEAR_STORAGE_CONFIRMATION: i32 = 3569;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_GROUP_RESET_DIALOG_TITLE: i32 = 3570;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_GROUP_RESET_CONFIRMATION: i32 = 3571;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_GROUP_DELETE_DIALOG_TITLE: i32 = 3572;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_GROUP_DELETE_CONFIRMATION: i32 = 3573;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_MULTIPLE: i32 = 3574;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_SITE: i32 = 3575;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIES_CLEAR_ALL: i32 = 3576;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_RESET_ALL: i32 = 3577;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_CLEAR_STORAGE: i32 = 3578;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_SEARCH: i32 = 3579;
pub const IDS_SETTINGS_SITE_SETTINGS_THIRD_PARTY_COOKIE: i32 = 3580;
pub const IDS_SETTINGS_SITE_SETTINGS_THIRD_PARTY_COOKIE_SUBLABEL: i32 = 3581;
pub const IDS_SETTINGS_SITE_SETTINGS_ADOBE_FLASH_SETTINGS: i32 = 3582;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLER_IS_DEFAULT: i32 = 3583;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLER_SET_DEFAULT: i32 = 3584;
pub const IDS_SETTINGS_SITE_SETTINGS_REMOVE: i32 = 3585;
pub const IDS_SETTINGS_SITE_SETTINGS_INCOGNITO_ONLY: i32 = 3586;
pub const IDS_SETTINGS_SITE_SETTINGS_INCOGNITO: i32 = 3587;
pub const IDS_SETTINGS_SITE_SETTINGS_INCOGNITO_EMBEDDED: i32 = 3588;
pub const IDS_SETTINGS_SITE_SETTINGS_NO_ZOOMED_SITES: i32 = 3589;
pub const IDS_SETTINGS_SITE_NO_SITES_ADDED: i32 = 3590;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK_AUTOPLAY: i32 = 3591;
pub const IDS_SETTINGS_SITE_SETTINGS_EMPTY_ALL_SITES_PAGE: i32 = 3592;
pub const IDS_SETTINGS_SITE_SETTINGS_NO_SITES_FOUND: i32 = 3593;
pub const IDS_SETTINGS_SITE_SETTINGS_BLUETOOTH_SCANNING: i32 = 3594;
pub const IDS_SETTINGS_SITE_SETTINGS_BLUETOOTH_SCANNING_ASK: i32 = 3595;
pub const IDS_SETTINGS_SITE_SETTINGS_BLUETOOTH_SCANNING_ASK_RECOMMENDED: i32 = 3596;
pub const IDS_SETTINGS_SITE_SETTINGS_BLUETOOTH_SCANNING_BLOCK: i32 = 3597;
pub const IDS_SETTINGS_NO_USB_DEVICES_FOUND: i32 = 3598;
pub const IDS_SETTINGS_NO_SERIAL_PORTS_FOUND: i32 = 3599;
pub const IDS_SETTINGS_ADD_SITE_EXCEPTION_PLACEHOLDER: i32 = 3600;
pub const IDS_SETTINGS_ADD_SITE_TITLE: i32 = 3601;
pub const IDS_SETTINGS_EDIT_SITE_TITLE: i32 = 3602;
pub const IDS_SETTINGS_ADD_SITE: i32 = 3603;
pub const IDS_SETTINGS_COOKIES_COOKIE_NAME_LABEL: i32 = 3605;
pub const IDS_SETTINGS_COOKIES_COOKIE_CONTENT_LABEL: i32 = 3606;
pub const IDS_SETTINGS_COOKIES_COOKIE_DOMAIN_LABEL: i32 = 3607;
pub const IDS_SETTINGS_COOKIES_COOKIE_PATH_LABEL: i32 = 3608;
pub const IDS_SETTINGS_COOKIES_COOKIE_SENDFOR_LABEL: i32 = 3609;
pub const IDS_SETTINGS_COOKIES_COOKIE_ACCESSIBLE_TO_SCRIPT_LABEL: i32 = 3610;
pub const IDS_SETTINGS_COOKIES_COOKIE_CREATED_LABEL: i32 = 3611;
pub const IDS_SETTINGS_COOKIES_COOKIE_EXPIRES_LABEL: i32 = 3612;
pub const IDS_SETTINGS_COOKIES_APPLICATION_CACHE: i32 = 3613;
pub const IDS_SETTINGS_COOKIES_FLASH_LSO: i32 = 3614;
pub const IDS_SETTINGS_COOKIES_APPLICATION_CACHE_MANIFEST_LABEL: i32 = 3615;
pub const IDS_SETTINGS_SITE_SETTINGS_NUM_COOKIES: i32 = 3616;
pub const IDS_SETTINGS_COOKIES_LOCAL_STORAGE_ORIGIN_LABEL: i32 = 3617;
pub const IDS_SETTINGS_COOKIES_LOCAL_STORAGE_SIZE_ON_DISK_LABEL: i32 = 3618;
pub const IDS_SETTINGS_COOKIES_LOCAL_STORAGE_LAST_MODIFIED_LABEL: i32 = 3619;
pub const IDS_SETTINGS_COOKIES_DATABASE_STORAGE: i32 = 3620;
pub const IDS_SETTINGS_COOKIES_LOCAL_STORAGE: i32 = 3621;
pub const IDS_SETTINGS_COOKIES_MEDIA_LICENSE: i32 = 3622;
pub const IDS_SETTINGS_COOKIES_FILE_SYSTEM: i32 = 3623;
pub const IDS_SETTINGS_COOKIES_FILE_SYSTEM_TEMPORARY_USAGE_LABEL: i32 = 3624;
pub const IDS_SETTINGS_COOKIES_FILE_SYSTEM_PERSISTENT_USAGE_LABEL: i32 = 3625;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID: i32 = 3626;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID_ORIGIN_LABEL: i32 = 3627;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID_TYPE_LABEL: i32 = 3628;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID_CREATED_LABEL: i32 = 3629;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID_EXPIRES_LABEL: i32 = 3630;
pub const IDS_SETTINGS_COOKIES_SERVICE_WORKER: i32 = 3631;
pub const IDS_SETTINGS_COOKIES_SHARED_WORKER: i32 = 3632;
pub const IDS_SETTINGS_COOKIES_SHARED_WORKER_WORKER_LABEL: i32 = 3633;
pub const IDS_SETTINGS_COOKIES_CACHE_STORAGE: i32 = 3634;
pub const IDS_SETTINGS_PEOPLE: i32 = 3635;
pub const IDS_SETTINGS_PEOPLE_MANAGE_OTHER_PEOPLE: i32 = 3636;
pub const IDS_SETTINGS_CHANGE_PICTURE_PROFILE_PHOTO: i32 = 3637;
pub const IDS_SETTINGS_PEOPLE_SIGN_OUT: i32 = 3638;
pub const IDS_SETTINGS_PEOPLE_DOMAIN_MANAGED_PROFILE: i32 = 3713;
pub const IDS_SETTINGS_PEOPLE_SIGN_IN: i32 = 3714;
pub const IDS_SETTINGS_PEOPLE_SIGN_IN_PROMPT: i32 = 3715;
pub const IDS_SETTINGS_PEOPLE_SYNC_ANOTHER_ACCOUNT: i32 = 3716;
pub const IDS_SETTINGS_PEOPLE_SYNCING_TO_ACCOUNT: i32 = 3717;
pub const IDS_SETTINGS_PEOPLE_SYNC_TURN_OFF: i32 = 3718;
pub const IDS_SETTINGS_PEOPLE_SYNC_NOT_WORKING: i32 = 3719;
pub const IDS_SETTINGS_PEOPLE_SYNC_PAUSED: i32 = 3720;
pub const IDS_SETTINGS_SYNC_DISCONNECT_MANAGED_PROFILE_EXPLANATION: i32 = 3721;
pub const IDS_SETTINGS_EDIT_PERSON: i32 = 3722;
pub const IDS_SETTINGS_PROFILE_SHORTCUT_TOGGLE_LABEL: i32 = 3723;
pub const IDS_SETTINGS_TURN_OFF_SYNC_AND_SIGN_OUT_DIALOG_TITLE: i32 = 3724;
pub const IDS_SETTINGS_TURN_OFF_SYNC_AND_SIGN_OUT_DIALOG_TITLE_UNIFIED_CONSENT: i32 = 3725;
pub const IDS_SETTINGS_TURN_OFF_SYNC_DIALOG_MANAGED_CONFIRM: i32 = 3726;
pub const IDS_SETTINGS_TURN_OFF_SYNC_DIALOG_CHECKBOX: i32 = 3727;
pub const IDS_SETTINGS_SYNC_SETTINGS_SAVED_TOAST_LABEL: i32 = 3728;
pub const IDS_SETTINGS_SYNC_OVERVIEW: i32 = 3729;
pub const IDS_SETTINGS_SYNC_DISCONNECT_EXPLANATION: i32 = 3730;
pub const IDS_SETTINGS_SYNC_DISCONNECT_AND_SIGN_OUT_EXPLANATION: i32 = 3731;
pub const IDS_SETTINGS_SYNC_DISCONNECT_AND_SIGN_OUT_EXPLANATION_UNIFIED_CONSENT: i32 = 3732;
pub const IDS_SETTINGS_SYNC_DISCONNECT_EXPAND_ACCESSIBILITY_LABEL: i32 = 3733;
pub const IDS_SETTINGS_SYNC_DISCONNECT_DELETE_PROFILE: i32 = 3734;
pub const IDS_SETTINGS_SYNC_DISCONNECT_CONFIRM: i32 = 3735;
pub const IDS_SETTINGS_SYNC: i32 = 3736;
pub const IDS_SETTINGS_NON_PERSONALIZED_SERVICES_SECTION_LABEL: i32 = 3737;
pub const IDS_SETTINGS_SYNC_SYNC_AND_NON_PERSONALIZED_SERVICES: i32 = 3738;
pub const IDS_SETTINGS_SYNC_PAGE_TITLE: i32 = 3739;
pub const IDS_SETTINGS_SYNC_ADVANCED_PAGE_TITLE: i32 = 3740;
pub const IDS_SETTINGS_SYNC_LOADING: i32 = 3741;
pub const IDS_SETTINGS_SYNC_WILL_START: i32 = 3742;
pub const IDS_SETTINGS_SYNC_WILL_START_UNITY: i32 = 3743;
pub const IDS_SETTINGS_SYNC_SETTINGS_CANCEL_SYNC: i32 = 3744;
pub const IDS_SETTINGS_SYNC_SETUP_CANCEL_DIALOG_TITLE: i32 = 3745;
pub const IDS_SETTINGS_SYNC_SETUP_CANCEL_DIALOG_BODY: i32 = 3746;
pub const IDS_SETTINGS_SYNC_TIMEOUT: i32 = 3747;
pub const IDS_SETTINGS_SYNC_EVERYTHING_CHECKBOX_LABEL: i32 = 3748;
pub const IDS_SETTINGS_MANAGE_GOOGLE_ACCOUNT: i32 = 3749;
pub const IDS_SETTINGS_APPS_CHECKBOX_LABEL: i32 = 3750;
pub const IDS_SETTINGS_EXTENSIONS_CHECKBOX_LABEL: i32 = 3751;
pub const IDS_SETTINGS_SETTINGS_CHECKBOX_LABEL: i32 = 3752;
pub const IDS_SETTINGS_AUTOFILL_CHECKBOX_LABEL: i32 = 3753;
pub const IDS_SETTINGS_HISTORY_CHECKBOX_LABEL: i32 = 3754;
pub const IDS_SETTINGS_THEMES_AND_WALLPAPERS_CHECKBOX_LABEL: i32 = 3755;
pub const IDS_SETTINGS_BOOKMARKS_CHECKBOX_LABEL: i32 = 3756;
pub const IDS_SETTINGS_PASSWORDS_CHECKBOX_LABEL: i32 = 3757;
pub const IDS_SETTINGS_OPEN_TABS_CHECKBOX_LABEL: i32 = 3758;
pub const IDS_DRIVE_SUGGEST_PREF: i32 = 3759;
pub const IDS_SETTINGS_USER_EVENTS_CHECKBOX_LABEL: i32 = 3760;
pub const IDS_SETTINGS_USER_EVENTS_CHECKBOX_TEXT: i32 = 3761;
pub const IDS_SETTINGS_MANAGE_SYNCED_DATA_TITLE: i32 = 3762;
pub const IDS_SETTINGS_MANAGE_SYNCED_DATA_TITLE_UNIFIED_CONSENT: i32 = 3763;
pub const IDS_SETTINGS_EXISTING_PASSPHRASE_TITLE: i32 = 3764;
pub const IDS_SETTINGS_ENCRYPTION_OPTIONS: i32 = 3765;
pub const IDS_SETTINGS_ENCRYPT_WITH_GOOGLE_CREDENTIALS_LABEL: i32 = 3766;
pub const IDS_SETTINGS_ENCRYPT_WITH_SYNC_PASSPHRASE_LABEL: i32 = 3767;
pub const IDS_SETTINGS_PASSPHRASE_EXPLANATION_TEXT: i32 = 3768;
pub const IDS_SETTINGS_PASSPHRASE_RESET_HINT_ENCRYPTION: i32 = 3769;
pub const IDS_SETTINGS_PASSPHRASE_RESET_HINT_TOGGLE: i32 = 3770;
pub const IDS_SETTINGS_EMPTY_PASSPHRASE_ERROR: i32 = 3771;
pub const IDS_SETTINGS_MISMATCHED_PASSPHRASE_ERROR: i32 = 3772;
pub const IDS_SETTINGS_INCORRECT_PASSPHRASE_ERROR: i32 = 3773;
pub const IDS_SETTINGS_PASSPHRASE_RECOVER: i32 = 3774;
pub const IDS_SETTINGS_PASSPHRASE_PLACEHOLDER: i32 = 3775;
pub const IDS_SETTINGS_PASSPHRASE_CONFIRMATION_PLACEHOLDER: i32 = 3776;
pub const IDS_SETTINGS_SUBMIT_PASSPHRASE: i32 = 3777;
pub const IDS_SETTINGS_USE_DEFAULT_SETTINGS: i32 = 3778;
pub const IDS_SETTINGS_PERSONALIZE_GOOGLE_SERVICES_TITLE: i32 = 3779;
pub const IDS_SETTINGS_IMPORT_SETTINGS_TITLE: i32 = 3780;
pub const IDS_SETTINGS_IMPORT_FROM_LABEL: i32 = 3781;
pub const IDS_SETTINGS_IMPORT_ITEMS_LABEL: i32 = 3782;
pub const IDS_SETTINGS_IMPORT_LOADING_PROFILES: i32 = 3783;
pub const IDS_SETTINGS_IMPORT_HISTORY_CHECKBOX: i32 = 3784;
pub const IDS_SETTINGS_IMPORT_FAVORITES_CHECKBOX: i32 = 3785;
pub const IDS_SETTINGS_IMPORT_PASSWORDS_CHECKBOX: i32 = 3786;
pub const IDS_SETTINGS_IMPORT_SEARCH_ENGINES_CHECKBOX: i32 = 3787;
pub const IDS_SETTINGS_IMPORT_AUTOFILL_FORM_DATA_CHECKBOX: i32 = 3788;
pub const IDS_SETTINGS_IMPORT_CHOOSE_FILE: i32 = 3789;
pub const IDS_SETTINGS_IMPORT_COMMIT: i32 = 3790;
pub const IDS_SETTINGS_IMPORT_SUCCESS: i32 = 3791;
pub const IDS_SETTINGS_IMPORT_NO_PROFILE_FOUND: i32 = 3792;
pub const IDS_SETTINGS_WEB_CONTENT: i32 = 3811;
pub const IDS_SETTINGS_PAGE_ZOOM_LABEL: i32 = 3812;
pub const IDS_SETTINGS_FONT_SIZE_LABEL: i32 = 3813;
pub const IDS_SETTINGS_VERY_SMALL_FONT: i32 = 3814;
pub const IDS_SETTINGS_SMALL_FONT: i32 = 3815;
pub const IDS_SETTINGS_MEDIUM_FONT: i32 = 3816;
pub const IDS_SETTINGS_LARGE_FONT: i32 = 3817;
pub const IDS_SETTINGS_VERY_LARGE_FONT: i32 = 3818;
pub const IDS_SETTINGS_CUSTOM: i32 = 3819;
pub const IDS_SETTINGS_CUSTOMIZE_FONTS: i32 = 3820;
pub const IDS_SETTINGS_FONTS: i32 = 3821;
pub const IDS_SETTINGS_STANDARD_FONT_LABEL: i32 = 3822;
pub const IDS_SETTINGS_SERIF_FONT_LABEL: i32 = 3823;
pub const IDS_SETTINGS_SANS_SERIF_FONT_LABEL: i32 = 3824;
pub const IDS_SETTINGS_FIXED_WIDTH_FONT_LABEL: i32 = 3825;
pub const IDS_SETTINGS_MINIMUM_FONT_SIZE_LABEL: i32 = 3826;
pub const IDS_SETTINGS_TINY_FONT_SIZE: i32 = 3827;
pub const IDS_SETTINGS_HUGE_FONT_SIZE: i32 = 3828;
pub const IDS_SETTINGS_LOREM_IPSUM: i32 = 3829;
pub const IDS_SETTINGS_LOADING: i32 = 3830;
pub const IDS_SETTINGS_ADVANCED_FONT_SETTINGS: i32 = 3831;
pub const IDS_SETTINGS_OPEN_ADVANCED_FONT_SETTINGS: i32 = 3832;
pub const IDS_SETTINGS_QUICK_BROWN_FOX: i32 = 3833;
pub const IDS_SETTINGS_REQUIRES_WEB_STORE_EXTENSION: i32 = 3834;
pub const IDS_SETTINGS_SYSTEM: i32 = 3975;
pub const IDS_SETTINGS_SYSTEM_HARDWARE_ACCELERATION_LABEL: i32 = 3976;
pub const IDS_SETTINGS_SYSTEM_PROXY_SETTINGS_LABEL: i32 = 3977;
pub const IDS_SETTINGS_SYSTEM_PROXY_SETTINGS_EXTENSION_LABEL: i32 = 3978;
pub const IDS_SETTINGS_SYSTEM_PROXY_SETTINGS_POLICY_LABEL: i32 = 3979;
pub const IDS_SETTINGS_CHANGE_PASSWORD_TITLE: i32 = 3997;
pub const IDS_SETTINGS_CHANGE_PASSWORD_BUTTON: i32 = 3998;
pub const IDS_PAGE_NOT_AVAILABLE_FOR_GUEST_HEADING: i32 = 4042;
pub const IDS_SETTINGS_SECURITY_KEYS_TITLE: i32 = 4047;
pub const IDS_SETTINGS_SECURITY_KEYS_DESC: i32 = 4048;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN: i32 = 4049;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_DESC: i32 = 4050;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_INITIAL_TITLE: i32 = 4051;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_CREATE_TITLE: i32 = 4052;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_CHANGE_TITLE: i32 = 4053;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET: i32 = 4054;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_DESC: i32 = 4055;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_TITLE: i32 = 4056;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_CONFIRM_TITLE: i32 = 4057;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_STEP1: i32 = 4058;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_STEP2: i32 = 4059;
pub const IDS_SETTINGS_SECURITY_KEYS_NO_RESET: i32 = 4060;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_ERROR: i32 = 4061;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_SUCCESS: i32 = 4062;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_NOTALLOWED: i32 = 4063;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_TOUCH: i32 = 4064;
pub const IDS_SETTINGS_SECURITY_KEYS_NO_PIN: i32 = 4065;
pub const IDS_SETTINGS_SECURITY_KEYS_CURRENT_PIN_INTRO: i32 = 4066;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_INCORRECT: i32 = 4067;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_INCORRECT_RETRIES_SIN: i32 = 4068;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_INCORRECT_RETRIES_PL: i32 = 4069;
pub const IDS_SETTINGS_SECURITY_KEYS_NEW_PIN: i32 = 4070;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_CONFIRM: i32 = 4071;
pub const IDS_SETTINGS_SECURITY_KEYS_CURRENT_PIN: i32 = 4072;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN: i32 = 4073;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_TOO_SHORT: i32 = 4074;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_TOO_SHORT_SMALL: i32 = 4075;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_TOO_LONG: i32 = 4076;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_INVALID: i32 = 4077;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_MISMATCH: i32 = 4078;
pub const IDS_SETTINGS_SECURITY_KEYS_CONFIRM_PIN: i32 = 4079;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_SUCCESS: i32 = 4080;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR: i32 = 4081;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_HARD_LOCK: i32 = 4082;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_SOFT_LOCK: i32 = 4083;
pub const IDS_SETTINGS_SECURITY_KEYS_SHOW_PINS: i32 = 4084;
pub const IDS_SETTINGS_SECURITY_KEYS_HIDE_PINS: i32 = 4085;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_LABEL: i32 = 4086;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_DESC: i32 = 4087;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_DIALOG_TITLE: i32 = 4088;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_WEBSITE: i32 = 4089;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_USERNAME: i32 = 4090;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_TOUCH: i32 = 4091;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_PIN_PROMPT: i32 = 4092;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_NO_CREDENTIALS: i32 = 4093;
pub const IDS_SETTINGS_SECURITY_KEYS_NO_CREDENTIAL_MANAGEMENT: i32 = 4094;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_REMOVED: i32 = 4095;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_NO_PIN: i32 = 4096;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_ERROR: i32 = 4097;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_SUCCESS: i32 = 4098;
pub const IDS_SETTINGS_SECURITY_KEYS_CREDENTIAL_MANAGEMENT_FAILED: i32 = 4099;
pub const IDS_EXTENSIONS_ALLOW_FILE_ACCESS: i32 = 4100;
pub const IDS_EXTENSIONS_ALLOW_ON_ALL_URLS: i32 = 4101;
pub const IDS_EXTENSIONS_ALLOW_ON_FOLLOWING_SITES: i32 = 4102;
pub const IDS_EXTENSIONS_VIEW_ACTIVITY_LOG: i32 = 4103;
pub const IDS_EXTENSIONS_BACKGROUND_PAGE: i32 = 4104;
pub const IDS_EXTENSIONS_CORRUPTED_EXTENSION: i32 = 4105;
pub const IDS_EXTENSIONS_ENABLE_ERROR_COLLECTION: i32 = 4106;
pub const IDS_EXTENSIONS_ERROR_NO_ERRORS_CODE_MESSAGE: i32 = 4107;
pub const IDS_EXTENSIONS_INSTALL_DROP_TARGET: i32 = 4108;
pub const IDS_EXTENSIONS_INSTALL_WARNINGS: i32 = 4109;
pub const IDS_EXTENSIONS_LOG_LEVEL_ERROR: i32 = 4110;
pub const IDS_EXTENSIONS_LOG_LEVEL_INFO: i32 = 4111;
pub const IDS_EXTENSIONS_LOG_LEVEL_WARN: i32 = 4112;
pub const IDS_EXTENSIONS_PATH: i32 = 4113;
pub const IDS_EXTENSIONS_RELOAD_TERMINATED: i32 = 4114;
pub const IDS_EXTENSIONS_REPAIR_CORRUPTED: i32 = 4115;
pub const IDS_EXTENSIONS_VIEW_IFRAME: i32 = 4116;
pub const IDS_EXTENSIONS_VIEW_INACTIVE: i32 = 4117;
pub const IDS_EXTENSIONS_VIEW_INCOGNITO: i32 = 4118;
pub const IDS_EXTENSIONS_DEVELOPER_MODE: i32 = 4119;
pub const IDS_EXTENSIONS_DISABLED_UPDATE_REQUIRED_BY_POLICY: i32 = 4120;
pub const IDS_EXTENSIONS_MENU_BUTTON_LABEL: i32 = 4121;
pub const IDS_EXTENSIONS_ERROR_PAGE_HEADING: i32 = 4122;
pub const IDS_EXTENSIONS_ERROR_ANONYMOUS_FUNCTION: i32 = 4123;
pub const IDS_EXTENSIONS_ERROR_CONTEXT: i32 = 4124;
pub const IDS_EXTENSIONS_ERROR_CONTEXT_UNKNOWN: i32 = 4125;
pub const IDS_EXTENSIONS_CLEAR_ACTIVITIES: i32 = 4126;
pub const IDS_EXTENSIONS_ERROR_CLEAR_ALL: i32 = 4127;
pub const IDS_EXTENSIONS_A11Y_CLEAR_ENTRY: i32 = 4128;
pub const IDS_EXTENSIONS_ERROR_STACK_TRACE: i32 = 4129;
pub const IDS_EXTENSIONS_ERROR_LINES_NOT_SHOWN: i32 = 4130;
pub const IDS_EXTENSIONS_HOST_PERMISSIONS_DESCRIPTION: i32 = 4131;
pub const IDS_EXTENSIONS_HOST_PERMISSIONS_EDIT: i32 = 4132;
pub const IDS_EXTENSIONS_ITEM_ERRORS: i32 = 4133;
pub const IDS_EXTENSIONS_ITEM_HOST_PERMISSIONS_HEADING: i32 = 4134;
pub const IDS_EXTENSIONS_HOST_ACCESS_ON_CLICK: i32 = 4135;
pub const IDS_EXTENSIONS_HOST_ACCESS_ON_SPECIFIC_SITES: i32 = 4136;
pub const IDS_EXTENSIONS_HOST_ACCESS_ON_ALL_SITES: i32 = 4137;
pub const IDS_EXTENSIONS_ITEM_ALLOWED_HOSTS: i32 = 4138;
pub const IDS_EXTENSIONS_ACCESSIBILITY_ERROR_LINE: i32 = 4139;
pub const IDS_EXTENSIONS_ACCESSIBILITY_ERROR_MULTI_LINE: i32 = 4140;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_PAGE_HEADING: i32 = 4141;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_SEARCH_LABEL: i32 = 4142;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_TYPE_COLUMN: i32 = 4143;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_NAME_COLUMN: i32 = 4144;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_COUNT_COLUMN: i32 = 4145;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_TIME_COLUMN: i32 = 4146;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_HISTORY_TAB_HEADING: i32 = 4147;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_STREAM_TAB_HEADING: i32 = 4148;
pub const IDS_EXTENSIONS_START_ACTIVITY_STREAM: i32 = 4149;
pub const IDS_EXTENSIONS_STOP_ACTIVITY_STREAM: i32 = 4150;
pub const IDS_EXTENSIONS_EMPTY_STREAM_STARTED: i32 = 4151;
pub const IDS_EXTENSIONS_EMPTY_STREAM_STOPPED: i32 = 4152;
pub const IDS_EXTENSIONS_ACTIVITY_ARGUMENTS_HEADING: i32 = 4153;
pub const IDS_EXTENSIONS_WEB_REQUEST_INFO_HEADING: i32 = 4154;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_MORE_ACTIONS_LABEL: i32 = 4155;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_EXPAND_ALL: i32 = 4156;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_COLLAPSE_ALL: i32 = 4157;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_EXPORT_HISTORY: i32 = 4158;
pub const IDS_EXTENSIONS_ITEM_ID: i32 = 4159;
pub const IDS_EXTENSIONS_ITEM_INSPECT_VIEWS: i32 = 4160;
pub const IDS_EXTENSIONS_ITEM_INSPECT_VIEWS_EXTRA: i32 = 4161;
pub const IDS_EXTENSIONS_ITEM_NO_ACTIVE_VIEWS: i32 = 4162;
pub const IDS_EXTENSIONS_ITEM_ALLOW_INCOGNITO: i32 = 4163;
pub const IDS_EXTENSIONS_ITEM_DEPENDENCIES: i32 = 4164;
pub const IDS_EXTENSIONS_DEPENDENT_ENTRY: i32 = 4165;
pub const IDS_EXTENSIONS_ITEM_DESCRIPTION: i32 = 4166;
pub const IDS_EXTENSIONS_ITEM_DETAILS: i32 = 4167;
pub const IDS_EXTENSIONS_EXTENSION_A11Y_ASSOCIATION: i32 = 4168;
pub const IDS_EXTENSIONS_APP_ICON: i32 = 4169;
pub const IDS_EXTENSIONS_EXTENSION_ICON: i32 = 4170;
pub const IDS_EXTENSIONS_ITEM_ID_HEADING: i32 = 4171;
pub const IDS_EXTENSIONS_EXTENSION_ENABLED: i32 = 4172;
pub const IDS_EXTENSIONS_APP_ENABLED: i32 = 4173;
pub const IDS_EXTENSIONS_ITEM_OFF: i32 = 4174;
pub const IDS_EXTENSIONS_ITEM_ON: i32 = 4175;
pub const IDS_EXTENSIONS_ITEM_EXTENSION_WEBSITE: i32 = 4176;
pub const IDS_EXTENSIONS_ITEM_CHROME_WEB_STORE: i32 = 4177;
pub const IDS_EXTENSIONS_ITEM_OPTIONS: i32 = 4178;
pub const IDS_EXTENSIONS_ITEM_PERMISSIONS: i32 = 4179;
pub const IDS_EXTENSIONS_ITEM_PERMISSIONS_EMPTY: i32 = 4180;
pub const IDS_EXTENSIONS_ITEM_REMOVE_EXTENSION: i32 = 4181;
pub const IDS_EXTENSIONS_ITEM_SITE_ACCESS: i32 = 4182;
pub const IDS_EXTENSIONS_ITEM_SITE_ACCESS_ADD_HOST: i32 = 4183;
pub const IDS_EXTENSIONS_ITEM_SITE_ACCESS_EMPTY: i32 = 4184;
pub const IDS_EXTENSIONS_ITEM_SOURCE: i32 = 4185;
pub const IDS_EXTENSIONS_ITEM_SOURCE_POLICY: i32 = 4186;
pub const IDS_EXTENSIONS_ITEM_SOURCE_SIDELOADED: i32 = 4187;
pub const IDS_EXTENSIONS_ITEM_SOURCE_UNPACKED: i32 = 4188;
pub const IDS_EXTENSIONS_ITEM_SOURCE_WEBSTORE: i32 = 4189;
pub const IDS_EXTENSIONS_ITEM_VERSION: i32 = 4190;
pub const IDS_EXTENSIONS_LOAD_ERROR_HEADING: i32 = 4191;
pub const IDS_EXTENSIONS_LOAD_ERROR_ERROR_LABEL: i32 = 4192;
pub const IDS_EXTENSIONS_LOAD_ERROR_FILE_LABEL: i32 = 4193;
pub const IDS_EXTENSIONS_LOAD_ERROR_COULD_NOT_LOAD_MANIFEST: i32 = 4194;
pub const IDS_EXTENSIONS_LOAD_ERROR_RETRY: i32 = 4195;
pub const IDS_EXTENSIONS_LOADING_ACTIVITIES: i32 = 4196;
pub const IDS_MISSING_OR_UNINSTALLED_EXTENSION: i32 = 4197;
pub const IDS_EXTENSIONS_NO_ACTIVITIES: i32 = 4198;
pub const IDS_EXTENSIONS_NO_INSTALLED_ITEMS: i32 = 4199;
pub const IDS_EXTENSIONS_NO_DESCRIPTION: i32 = 4200;
pub const IDS_EXTENSIONS_PACK_DIALOG_TITLE: i32 = 4201;
pub const IDS_EXTENSIONS_PACK_DIALOG_WARNING_TITLE: i32 = 4202;
pub const IDS_EXTENSIONS_PACK_DIALOG_ERROR_TITLE: i32 = 4203;
pub const IDS_EXTENSIONS_PACK_DIALOG_PROCEED_ANYWAY: i32 = 4204;
pub const IDS_EXTENSIONS_PACK_DIALOG_BROWSE_BUTTON: i32 = 4205;
pub const IDS_EXTENSIONS_PACK_DIALOG_EXTENSION_ROOT_LABEL: i32 = 4206;
pub const IDS_EXTENSIONS_PACK_DIALOG_KEY_FILE_LABEL: i32 = 4207;
pub const IDS_EXTENSIONS_PACK_DIALOG_CONFIRM_BUTTON: i32 = 4208;
pub const IDS_EXTENSIONS_TOOLBAR_TITLE: i32 = 4209;
pub const IDS_EXTENSIONS_SEARCH: i32 = 4210;
pub const IDS_EXTENSIONS_SHORTCUT_NOT_SET: i32 = 4211;
pub const IDS_EXTENSIONS_SHORTCUT_SCOPE_LABEL: i32 = 4212;
pub const IDS_EXTENSIONS_SHORTCUT_SCOPE_GLOBAL: i32 = 4213;
pub const IDS_EXTENSIONS_APPS_TITLE: i32 = 4214;
pub const IDS_EXTENSIONS_REMOVE: i32 = 4215;
pub const IDS_EXTENSIONS_RUNTIME_HOSTS_DIALOG_TITLE: i32 = 4216;
pub const IDS_EXTENSIONS_RUNTIME_HOSTS_DIALOG_INPUT_ERROR: i32 = 4217;
pub const IDS_EXTENSIONS_RUNTIME_HOSTS_DIALOG_INPUT_LABEL: i32 = 4218;
pub const IDS_EXTENSIONS_SIDEBAR_EXTENSIONS: i32 = 4219;
pub const IDS_EXTENSIONS_SIDEBAR_OPEN_CHROME_WEB_STORE: i32 = 4220;
pub const IDS_EXTENSIONS_SIDEBAR_KEYBOARD_SHORTCUTS: i32 = 4221;
pub const IDS_EXTENSIONS_TOOLBAR_LOAD_UNPACKED: i32 = 4222;
pub const IDS_EXTENSIONS_TOOLBAR_PACK: i32 = 4223;
pub const IDS_EXTENSIONS_TOOLBAR_UPDATE_NOW: i32 = 4224;
pub const IDS_EXTENSIONS_TOOLBAR_UPDATE_NOW_TOOLTIP: i32 = 4225;
pub const IDS_EXTENSIONS_TOOLBAR_UPDATE_DONE: i32 = 4226;
pub const IDS_EXTENSIONS_TOOLBAR_UPDATING_TOAST: i32 = 4227;
pub const IDS_EXTENSIONS_TYPE_A_SHORTCUT: i32 = 4228;
pub const IDS_EXTENSIONS_INCLUDE_START_MODIFIER: i32 = 4229;
pub const IDS_EXTENSIONS_TOO_MANY_MODIFIERS: i32 = 4230;
pub const IDS_EXTENSIONS_NEED_CHARACTER: i32 = 4231;
pub const IDS_ONBOARDING_WELCOME_NEXT: i32 = 4242;
pub const IDS_ONBOARDING_WELCOME_SKIP: i32 = 4243;
pub const IDS_ONBOARDING_WELCOME_BOOKMARK_ADDED: i32 = 4244;
pub const IDS_ONBOARDING_WELCOME_BOOKMARKS_ADDED: i32 = 4245;
pub const IDS_ONBOARDING_WELCOME_BOOKMARK_REMOVED: i32 = 4246;
pub const IDS_ONBOARDING_WELCOME_BOOKMARKS_REMOVED: i32 = 4247;
pub const IDS_ONBOARDING_DEFAULT_BROWSER_CHANGED: i32 = 4248;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_DESCRIPTION: i32 = 4249;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_GMAIL: i32 = 4251;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_MAPS: i32 = 4252;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_NEWS: i32 = 4253;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_TRANSLATE: i32 = 4254;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_YOUTUBE: i32 = 4255;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_DESCRIPTION: i32 = 4256;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_DEFAULT_TITLE: i32 = 4257;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_ART_TITLE: i32 = 4258;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_LANDSCAPE_TITLE: i32 = 4259;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_CITYSCAPE_TITLE: i32 = 4260;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_EARTH_TITLE: i32 = 4261;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_GEOMETRIC_SHAPES_TITLE: i32 = 4262;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_PHOTO_BY_LABEL: i32 = 4263;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_PREVIEW_UPDATED: i32 = 4264;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_RESET: i32 = 4265;
pub const IDS_ONBOARDING_WELCOME_NUX_SET_AS_DEFAULT_HEADER: i32 = 4266;
pub const IDS_ONBOARDING_WELCOME_NUX_SET_AS_DEFAULT_SUB_HEADER: i32 = 4267;
pub const IDS_ONBOARDING_WELCOME_NUX_SET_AS_DEFAULT_SET_AS_DEFAULT: i32 = 4268;
pub const IDS_ONBOARDING_WELCOME_LANDING_TITLE: i32 = 4269;
pub const IDS_ONBOARDING_WELCOME_LANDING_DESCRIPTION: i32 = 4270;
pub const IDS_ONBOARDING_WELCOME_LANDING_NEW_USER: i32 = 4271;
pub const IDS_ONBOARDING_WELCOME_LANDING_EXISTING_USER: i32 = 4272;
pub const IDS_ONBOARDING_WELCOME_SIGNIN_VIEW_HEADER: i32 = 4273;
pub const IDS_ONBOARDING_WELCOME_SIGNIN_VIEW_SUB_HEADER: i32 = 4274;
pub const IDS_ONBOARDING_WELCOME_SIGNIN_VIEW_SIGNIN: i32 = 4275;
pub const IDS_UTILITY_PROCESS_PRINTING_SERVICE_NAME: i32 = 4276;
pub const IDS_PRINT_INVALID_PRINTER_SETTINGS: i32 = 4277;
pub const IDS_PRINT_PREVIEW_TITLE: i32 = 4278;
pub const IDS_PRINT_PREVIEW_LOADING: i32 = 4279;
pub const IDS_PRINT_PREVIEW_FAILED: i32 = 4280;
pub const IDS_PRINT_PREVIEW_INVALID_PRINTER_SETTINGS: i32 = 4281;
pub const IDS_PRINT_PREVIEW_UNSUPPORTED_CLOUD_PRINTER: i32 = 4282;
pub const IDS_PRINT_PREVIEW_PRINT_BUTTON: i32 = 4283;
pub const IDS_PRINT_PREVIEW_SAVE_BUTTON: i32 = 4284;
pub const IDS_PRINT_PREVIEW_PRINTING: i32 = 4285;
pub const IDS_PRINT_PREVIEW_SAVING: i32 = 4286;
pub const IDS_PRINT_PREVIEW_OPTION_ALL_PAGES: i32 = 4287;
pub const IDS_PRINT_PREVIEW_OPTION_CUSTOM_PAGES: i32 = 4288;
pub const IDS_PRINT_PREVIEW_DESTINATION_LABEL: i32 = 4289;
pub const IDS_PRINT_PREVIEW_OPTION_BW: i32 = 4290;
pub const IDS_PRINT_PREVIEW_OPTION_COLLATE: i32 = 4291;
pub const IDS_PRINT_PREVIEW_OPTION_COLOR: i32 = 4292;
pub const IDS_PRINT_PREVIEW_OPTION_LANDSCAPE: i32 = 4293;
pub const IDS_PRINT_PREVIEW_OPTION_PORTRAIT: i32 = 4294;
pub const IDS_PRINT_PREVIEW_OPTION_TWO_SIDED: i32 = 4295;
pub const IDS_PRINT_PREVIEW_PRINT_ON_BOTH_SIDES_LABEL: i32 = 4296;
pub const IDS_PRINT_PREVIEW_OPTION_LONG_EDGE: i32 = 4297;
pub const IDS_PRINT_PREVIEW_OPTION_SHORT_EDGE: i32 = 4298;
pub const IDS_PRINT_PREVIEW_PAGES_LABEL: i32 = 4299;
pub const IDS_PRINT_PREVIEW_LAYOUT_LABEL: i32 = 4300;
pub const IDS_PRINT_PREVIEW_COPIES_LABEL: i32 = 4301;
pub const IDS_PRINT_PREVIEW_SCALING_LABEL: i32 = 4302;
pub const IDS_PRINT_PREVIEW_OPTION_DEFAULT_SCALING: i32 = 4303;
pub const IDS_PRINT_PREVIEW_OPTION_CUSTOM_SCALING: i32 = 4304;
pub const IDS_PRINT_PREVIEW_PAGES_PER_SHEET_LABEL: i32 = 4305;
pub const IDS_PRINT_PREVIEW_EXAMPLE_PAGE_RANGE_TEXT: i32 = 4306;
pub const IDS_PRINT_PREVIEW_PRINT_TO_PDF: i32 = 4307;
pub const IDS_PRINT_PREVIEW_PRINT_TO_GOOGLE_DRIVE: i32 = 4308;
pub const IDS_PRINT_PREVIEW_SUMMARY_FORMAT_SHORT: i32 = 4309;
pub const IDS_PRINT_PREVIEW_NEW_SUMMARY_FORMAT_SHORT: i32 = 4310;
pub const IDS_PRINT_PREVIEW_SHEETS_LABEL_PLURAL: i32 = 4311;
pub const IDS_PRINT_PREVIEW_SHEETS_LABEL_SINGULAR: i32 = 4312;
pub const IDS_PRINT_PREVIEW_PAGE_LABEL_SINGULAR: i32 = 4313;
pub const IDS_PRINT_PREVIEW_PAGE_LABEL_PLURAL: i32 = 4314;
pub const IDS_PRINT_PREVIEW_PAGE_RANGE_SYNTAX_INSTRUCTION: i32 = 4315;
pub const IDS_PRINT_PREVIEW_PAGE_RANGE_LIMIT_INSTRUCTION_WITH_VALUE: i32 = 4316;
pub const IDS_PRINT_PREVIEW_COPIES_INSTRUCTION: i32 = 4317;
pub const IDS_PRINT_PREVIEW_SCALING_INSTRUCTION: i32 = 4318;
pub const IDS_PRINT_PREVIEW_PRINT_PAGES_LABEL: i32 = 4319;
pub const IDS_PRINT_PREVIEW_OPTIONS_LABEL: i32 = 4320;
pub const IDS_PRINT_PREVIEW_OPTION_HEADER_FOOTER: i32 = 4321;
pub const IDS_PRINT_PREVIEW_OPTION_FIT_TO_PAGE: i32 = 4322;
pub const IDS_PRINT_PREVIEW_OPTION_BACKGROUND_COLORS_AND_IMAGES: i32 = 4323;
pub const IDS_PRINT_PREVIEW_OPTION_SELECTION_ONLY: i32 = 4324;
pub const IDS_PRINT_PREVIEW_OPTION_RASTERIZE: i32 = 4325;
pub const IDS_PRINT_PREVIEW_MARGINS_LABEL: i32 = 4326;
pub const IDS_PRINT_PREVIEW_DEFAULT_MARGINS: i32 = 4327;
pub const IDS_PRINT_PREVIEW_NO_MARGINS: i32 = 4328;
pub const IDS_PRINT_PREVIEW_CUSTOM_MARGINS: i32 = 4329;
pub const IDS_PRINT_PREVIEW_MINIMUM_MARGINS: i32 = 4330;
pub const IDS_PRINT_PREVIEW_TOP_MARGIN_LABEL: i32 = 4331;
pub const IDS_PRINT_PREVIEW_BOTTOM_MARGIN_LABEL: i32 = 4332;
pub const IDS_PRINT_PREVIEW_LEFT_MARGIN_LABEL: i32 = 4333;
pub const IDS_PRINT_PREVIEW_RIGHT_MARGIN_LABEL: i32 = 4334;
pub const IDS_PRINT_PREVIEW_MEDIA_SIZE_LABEL: i32 = 4335;
pub const IDS_PRINT_PREVIEW_DPI_LABEL: i32 = 4336;
pub const IDS_PRINT_PREVIEW_NON_ISOTROPIC_DPI_ITEM_LABEL: i32 = 4337;
pub const IDS_PRINT_PREVIEW_DPI_ITEM_LABEL: i32 = 4338;
pub const IDS_PRINT_PREVIEW_DESTINATION_SEARCH_TITLE: i32 = 4339;
pub const IDS_PRINT_PREVIEW_ACCOUNT_SELECT_TITLE: i32 = 4340;
pub const IDS_PRINT_PREVIEW_ADD_ACCOUNT_TITLE: i32 = 4341;
pub const IDS_PRINT_PREVIEW_CLOUD_PRINT_PROMOTION: i32 = 4342;
pub const IDS_PRINT_PREVIEW_SEARCH_BOX_PLACEHOLDER: i32 = 4343;
pub const IDS_PRINT_PREVIEW_NO_DESTINATIONS_MESSAGE: i32 = 4344;
pub const IDS_PRINT_PREVIEW_RECENT_DESTINATIONS_TITLE: i32 = 4345;
pub const IDS_PRINT_PREVIEW_PRINT_DESTINATIONS_TITLE: i32 = 4346;
pub const IDS_PRINT_PREVIEW_MANAGE: i32 = 4347;
pub const IDS_PRINT_PREVIEW_SEE_MORE: i32 = 4348;
pub const IDS_PRINT_PREVIEW_SEE_MORE_DESTINATIONS_LABEL: i32 = 4349;
pub const IDS_PRINT_PREVIEW_OFFLINE_FOR_YEAR: i32 = 4350;
pub const IDS_PRINT_PREVIEW_OFFLINE_FOR_MONTH: i32 = 4351;
pub const IDS_PRINT_PREVIEW_OFFLINE_FOR_WEEK: i32 = 4352;
pub const IDS_PRINT_PREVIEW_OFFLINE: i32 = 4353;
pub const IDS_PRINT_PREVIEW_NO_LONGER_SUPPORTED_FRAGMENT: i32 = 4354;
pub const IDS_PRINT_PREVIEW_NO_LONGER_SUPPORTED: i32 = 4355;
pub const IDS_PRINT_PREVIEW_EXTENSION_DESTINATION_ICON_TOOLTIP: i32 = 4356;
pub const IDS_MORE_OPTIONS_LABEL: i32 = 4357;
pub const IDS_PRINT_PREVIEW_COULD_NOT_PRINT: i32 = 4358;
pub const IDS_PRINT_PREVIEW_ADVANCED_SETTINGS_SEARCH_BOX_PLACEHOLDER: i32 = 4359;
pub const IDS_PRINT_PREVIEW_ADVANCED_SETTINGS_DIALOG_TITLE: i32 = 4360;
pub const IDS_PRINT_PREVIEW_NO_ADVANCED_SETTINGS_MATCH_SEARCH_HINT: i32 = 4361;
pub const IDS_PRINT_PREVIEW_ADVANCED_SETTINGS_DIALOG_CONFIRM: i32 = 4362;
pub const IDS_PRINT_PREVIEW_NEW_SHOW_ADVANCED_OPTIONS: i32 = 4363;
pub const IDS_PRINT_PREVIEW_ACCEPT_INVITE: i32 = 4364;
pub const IDS_PRINT_PREVIEW_ACCEPT_GROUP_INVITE: i32 = 4365;
pub const IDS_PRINT_PREVIEW_REJECT_INVITE: i32 = 4366;
pub const IDS_PRINT_PREVIEW_GROUP_INVITE_TEXT: i32 = 4367;
pub const IDS_PRINT_PREVIEW_INVITE_TEXT: i32 = 4368;
pub const IDS_PRINT_PREVIEW_BUTTON_SELECT: i32 = 4369;
pub const IDS_PRINT_PREVIEW_BUTTON_GO_BACK: i32 = 4370;
pub const IDS_PRINT_PREVIEW_RESOLVE_EXTENSION_USB_DIALOG_TITLE: i32 = 4371;
pub const IDS_PRINT_PREVIEW_RESOLVE_EXTENSION_USB_PERMISSION_MESSAGE: i32 = 4372;
pub const IDS_PRINT_PREVIEW_RESOLVE_EXTENSION_USB_ERROR_MESSAGE: i32 = 4373;
pub const IDS_PRINT_PREVIEW_MANAGED_SETTINGS_TEXT: i32 = 4374;
pub const IDS_PRINT_PREVIEW_SYSTEM_DIALOG_OPTION: i32 = 4380;
pub const IDS_DEFAULT_PRINT_DOCUMENT_TITLE: i32 = 4383;
pub const IDS_PRINT_SPOOL_FAILED_TITLE_TEXT: i32 = 4384;
pub const IDS_PRINT_SPOOL_FAILED_ERROR_TEXT: i32 = 4385;
pub const IDS_CLOUD_PRINT_REGISTER_PRINTER_FAILED: i32 = 4386;
pub const IDS_CLOUD_PRINT_ZOMBIE_PRINTER: i32 = 4387;
pub const IDS_CLOUD_PRINT_ENUM_FAILED: i32 = 4388;
pub const IDS_SERVICE_CRASH_RECOVERY_CONTENT: i32 = 4389;
pub const IDS_PRESS_APP_TO_EXIT: i32 = 4390;
pub const IDS_VR_SHELL_SITE_IS_TRACKING_LOCATION: i32 = 4391;
pub const IDS_VR_SHELL_SITE_IS_USING_MICROPHONE: i32 = 4392;
pub const IDS_VR_SHELL_SITE_IS_USING_CAMERA: i32 = 4393;
pub const IDS_VR_SHELL_SITE_IS_SHARING_SCREEN: i32 = 4394;
pub const IDS_VR_SHELL_BG_IS_USING_MICROPHONE: i32 = 4395;
pub const IDS_VR_SHELL_BG_IS_USING_CAMERA: i32 = 4396;
pub const IDS_VR_SHELL_BG_IS_SHARING_SCREEN: i32 = 4397;
pub const IDS_VR_SHELL_SITE_CAN_TRACK_LOCATION: i32 = 4398;
pub const IDS_VR_SHELL_SITE_CAN_USE_MICROPHONE: i32 = 4399;
pub const IDS_VR_SHELL_SITE_CAN_USE_CAMERA: i32 = 4400;
pub const IDS_VR_SHELL_SITE_CAN_SHARE_SCREEN: i32 = 4401;
pub const IDS_VR_SHELL_SITE_IS_USING_BLUETOOTH: i32 = 4402;
pub const IDS_VR_SHELL_SITE_CAN_USE_BLUETOOTH: i32 = 4404;
pub const IDS_DESKTOP_PROMPT_DOFF_HEADSET: i32 = 4405;
pub const IDS_VR_DESKTOP_GENERIC_PERMISSION_PROMPT: i32 = 4406;
pub const IDS_VR_SHELL_SITE_IS_USING_USB: i32 = 4407;
pub const IDS_VR_SHELL_SITE_IS_USING_MIDI: i32 = 4408;
pub const IDS_VR_SHELL_SITE_CAN_USE_MIDI: i32 = 4409;
pub const IDS_VR_UPDATE_KEYBOARD_PROMPT: i32 = 4410;
pub const IDS_VR_SHELL_EXIT_PROMPT_DESCRIPTION: i32 = 4411;
pub const IDS_VR_SHELL_EXIT_PROMPT_DESCRIPTION_SITE_INFO: i32 = 4412;
pub const IDS_VR_SHELL_AUDIO_PERMISSION_PROMPT_DESCRIPTION: i32 = 4413;
pub const IDS_VR_SHELL_AUDIO_PERMISSION_PROMPT_ABORT_BUTTON: i32 = 4414;
pub const IDS_VR_SHELL_AUDIO_PERMISSION_PROMPT_CONTINUE_BUTTON: i32 = 4415;
pub const IDS_VR_SHELL_EXIT_PROMPT_EXIT_VR_BUTTON: i32 = 4416;
pub const IDS_VR_BROWSER_UNSUPPORTED_PAGE: i32 = 4417;
pub const IDS_VR_WEB_VR_TIMEOUT_MESSAGE: i32 = 4418;
pub const IDS_VR_WEB_VR_EXIT_BUTTON_LABEL: i32 = 4419;
pub const IDS_VR_NO_SPEECH_RECOGNITION_RESULT: i32 = 4420;
pub const IDS_VR_BUTTON_TRACKPAD: i32 = 4421;
pub const IDS_VR_BUTTON_EXIT: i32 = 4422;
pub const IDS_VR_BUTTON_BACK: i32 = 4423;
pub const IDS_VR_BUTTON_TRACKPAD_REPOSITION: i32 = 4424;
pub const IDS_VR_BUTTON_APP_REPOSITION: i32 = 4425;
pub const IDS_VR_MENU_NEW_INCOGNITO_TAB: i32 = 4426;
pub const IDS_VR_MENU_PREFERENCES: i32 = 4427;
pub const IDS_VR_MENU_CLOSE_INCOGNITO_TABS: i32 = 4428;
pub const IDS_VR_TABS_BUTTON_REGULAR: i32 = 4429;
pub const IDS_VR_TABS_BUTTON_INCOGNITO: i32 = 4430;
pub const IDS_XR_CONSENT_DIALOG_TITLE: i32 = 4431;
pub const IDS_XR_CONSENT_DIALOG_DESCRIPTION: i32 = 4432;
pub const IDS_XR_CONSENT_DIALOG_BUTTON_DENY_VR: i32 = 4433;
pub const IDS_XR_CONSENT_DIALOG_BUTTON_ALLOW_AND_ENTER_VR: i32 = 4434;
pub const IDS_BACKGROUND_APP_INSTALLED_BALLOON_TITLE: i32 = 4435;
pub const IDS_BACKGROUND_APP_INSTALLED_BALLOON_BODY: i32 = 4436;
pub const IDS_BACKGROUND_CRASHED_APP_BALLOON_MESSAGE: i32 = 4437;
pub const IDS_BACKGROUND_CRASHED_EXTENSION_BALLOON_MESSAGE: i32 = 4438;
pub const IDS_BACKGROUND_APP_NOT_INSTALLED: i32 = 4439;
pub const IDS_PERMISSIONS_BUBBLE_PROMPT: i32 = 4440;
pub const IDS_PERMISSION_ALLOW: i32 = 4441;
pub const IDS_PERMISSION_DENY: i32 = 4442;
pub const IDS_PERMISSION_CUSTOMIZE: i32 = 4443;
pub const IDS_ALTERNATE_NAV_URL_VIEW_LABEL: i32 = 4445;
pub const IDS_DOWNLOAD_TITLE: i32 = 4446;
pub const IDS_TAB_LOADING_TITLE: i32 = 4447;
pub const IDS_HISTORY_SEARCH_PROMPT: i32 = 4448;
pub const IDS_HISTORY_CLEAR_SEARCH: i32 = 4449;
pub const IDS_HISTORY_DELETE: i32 = 4450;
pub const IDS_HISTORY_ITEMS_SELECTED: i32 = 4451;
pub const IDS_HISTORY_HISTORY_MENU_DESCRIPTION: i32 = 4452;
pub const IDS_HISTORY_HISTORY_MENU_ITEM: i32 = 4453;
pub const IDS_HISTORY_NO_SYNCED_RESULTS: i32 = 4454;
pub const IDS_HISTORY_OPEN_TABS_MENU_ITEM: i32 = 4455;
pub const IDS_HISTORY_SIGN_IN_BUTTON: i32 = 4456;
pub const IDS_HISTORY_SIGN_IN_PROMO: i32 = 4457;
pub const IDS_HISTORY_SIGN_IN_PROMO_DESC: i32 = 4458;
pub const IDS_HISTORY_MENU_PROMO: i32 = 4459;
pub const IDS_HISTORY_CLOSE_MENU_PROMO: i32 = 4460;
pub const IDS_EDIT: i32 = 4461;
pub const IDS_CONFIRM: i32 = 4462;
pub const IDS_DISABLE: i32 = 4463;
pub const IDS_SEARCH_CLEARED: i32 = 4464;
pub const IDS_SEARCH_RESULTS: i32 = 4465;
pub const IDS_SEARCH_RESULTS_SINGULAR: i32 = 4466;
pub const IDS_SEARCH_RESULTS_PLURAL: i32 = 4467;
pub const IDS_SEARCH_NO_RESULTS: i32 = 4468;
pub const IDS_SHOW_BUBBLE_INACTIVE_DESCRIPTION: i32 = 4469;
pub const IDS_CONTENT_CONTEXT_INSPECTELEMENT: i32 = 4470;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_DIALOG_TITLE: i32 = 4471;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_BUBBLE_ENABLE: i32 = 4472;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_BUBBLE_DISABLE: i32 = 4473;
pub const IDS_CONTENT_CONTEXT_BACK: i32 = 4474;
pub const IDS_CONTENT_CONTEXT_FORWARD: i32 = 4475;
pub const IDS_CONTENT_CONTEXT_SAVEPAGEAS: i32 = 4476;
pub const IDS_CONTENT_CONTEXT_PRINT: i32 = 4477;
pub const IDS_CONTENT_CONTEXT_VIEWPAGESOURCE: i32 = 4478;
pub const IDS_CONTENT_CONTEXT_OPENLINKWITH: i32 = 4479;
pub const IDS_CONTENT_CONTEXT_OPENLINKWITH_CONFIGURE: i32 = 4480;
pub const IDS_CONTENT_CONTEXT_INSPECTBACKGROUNDPAGE: i32 = 4481;
pub const IDS_CONTENT_CONTEXT_RELOAD: i32 = 4482;
pub const IDS_CONTENT_CONTEXT_RESTART_APP: i32 = 4483;
pub const IDS_CONTENT_CONTEXT_RELOAD_PACKAGED_APP: i32 = 4484;
pub const IDS_CONTENT_CONTEXT_TRANSLATE: i32 = 4485;
pub const IDS_CONTENT_CONTEXT_EXIT_FULLSCREEN: i32 = 4486;
pub const IDS_CONTENT_CONTEXT_RELOADFRAME: i32 = 4487;
pub const IDS_CONTENT_CONTEXT_VIEWFRAMESOURCE: i32 = 4488;
pub const IDS_CONTENT_CONTEXT_OPENLINKNEWTAB: i32 = 4489;
pub const IDS_CONTENT_CONTEXT_OPENLINKNEWWINDOW: i32 = 4490;
pub const IDS_CONTENT_CONTEXT_OPENLINKOFFTHERECORD: i32 = 4491;
pub const IDS_CONTENT_CONTEXT_OPENLINKINPROFILES: i32 = 4492;
pub const IDS_CONTENT_CONTEXT_OPENLINKINPROFILE: i32 = 4493;
pub const IDS_CONTENT_CONTEXT_OPENLINKBOOKMARKAPP: i32 = 4494;
pub const IDS_CONTENT_CONTEXT_OPENLINKBOOKMARKAPP_SAMEAPP: i32 = 4495;
pub const IDS_CONTENT_CONTEXT_SAVELINKAS: i32 = 4496;
pub const IDS_CONTENT_CONTEXT_COPYLINKLOCATION: i32 = 4497;
pub const IDS_CONTENT_CONTEXT_COPYEMAILADDRESS: i32 = 4498;
pub const IDS_CONTENT_CONTEXT_COPYLINKTEXT: i32 = 4499;
pub const IDS_CONTENT_CONTEXT_SAVEIMAGEAS: i32 = 4500;
pub const IDS_CONTENT_CONTEXT_COPYIMAGELOCATION: i32 = 4501;
pub const IDS_CONTENT_CONTEXT_COPYIMAGE: i32 = 4502;
pub const IDS_CONTENT_CONTEXT_OPENIMAGENEWTAB: i32 = 4503;
pub const IDS_CONTENT_CONTEXT_OPEN_ORIGINAL_IMAGE_NEW_TAB: i32 = 4504;
pub const IDS_CONTENT_CONTEXT_LOAD_IMAGE: i32 = 4505;
pub const IDS_CONTENT_CONTEXT_LOOP: i32 = 4506;
pub const IDS_CONTENT_CONTEXT_CONTROLS: i32 = 4507;
pub const IDS_CONTENT_CONTEXT_ROTATECW: i32 = 4508;
pub const IDS_CONTENT_CONTEXT_ROTATECCW: i32 = 4509;
pub const IDS_CONTENT_CONTEXT_SAVEVIDEOAS: i32 = 4510;
pub const IDS_CONTENT_CONTEXT_COPYVIDEOLOCATION: i32 = 4511;
pub const IDS_CONTENT_CONTEXT_OPENVIDEONEWTAB: i32 = 4512;
pub const IDS_CONTENT_CONTEXT_SAVEAUDIOAS: i32 = 4513;
pub const IDS_CONTENT_CONTEXT_COPYAUDIOLOCATION: i32 = 4514;
pub const IDS_CONTENT_CONTEXT_OPENAUDIONEWTAB: i32 = 4515;
pub const IDS_CONTENT_CONTEXT_PICTUREINPICTURE: i32 = 4516;
pub const IDS_CONTENT_CONTEXT_UNDO: i32 = 4517;
pub const IDS_CONTENT_CONTEXT_REDO: i32 = 4518;
pub const IDS_CONTENT_CONTEXT_CUT: i32 = 4519;
pub const IDS_CONTENT_CONTEXT_COPY: i32 = 4520;
pub const IDS_CONTENT_CONTEXT_PASTE: i32 = 4521;
pub const IDS_CONTENT_CONTEXT_PASTE_AND_MATCH_STYLE: i32 = 4522;
pub const IDS_CONTENT_CONTEXT_ADD_TO_DICTIONARY: i32 = 4523;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_MENU_OPTION: i32 = 4524;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_SEND: i32 = 4525;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_SEND_ONCE: i32 = 4526;
pub const IDS_CONTENT_CONTEXT_SPELLING_ASK_GOOGLE: i32 = 4527;
pub const IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_TITLE: i32 = 4528;
pub const IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_ENABLE: i32 = 4529;
pub const IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_DISABLE: i32 = 4530;
pub const IDS_CONTENT_CONTEXT_SPELLING_CHECKING: i32 = 4531;
pub const IDS_CONTENT_CONTEXT_SPELLING_NO_SUGGESTIONS_FROM_GOOGLE: i32 = 4532;
pub const IDS_CONTENT_CONTEXT_SELECTALL: i32 = 4533;
pub const IDS_CONTENT_CONTEXT_SEARCHWEBFOR: i32 = 4534;
pub const IDS_CONTENT_CONTEXT_SEARCHWEBFORIMAGE: i32 = 4535;
pub const IDS_CONTENT_CONTEXT_GOTOURL: i32 = 4536;
pub const IDS_CONTENT_CONTEXT_GENERATEPASSWORD: i32 = 4537;
pub const IDS_CONTENT_CONTEXT_MORE_APPS: i32 = 4538;
pub const IDS_CONTENT_CONTEXT_OPEN_WITH_APP: i32 = 4539;
pub const IDS_CONTENT_CONTEXT_PLUGIN_RUN: i32 = 4540;
pub const IDS_CONTENT_CONTEXT_PLUGIN_HIDE: i32 = 4541;
pub const IDS_CONTENT_CONTEXT_ENABLE_FLASH: i32 = 4542;
pub const IDS_CONTENT_CONTEXT_SPELLCHECK_MENU: i32 = 4544;
pub const IDS_CONTENT_CONTEXT_LANGUAGE_SETTINGS: i32 = 4543;
pub const IDS_CONTENT_CONTEXT_SPELLCHECK_MULTI_LINGUAL: i32 = 4545;
pub const IDS_CONTENT_CONTEXT_CHECK_SPELLING_WHILE_TYPING: i32 = 4546;
pub const IDS_NEW_TAB: i32 = 4547;
pub const IDS_SHOW_AS_TAB: i32 = 4548;
pub const IDS_NEW_WINDOW: i32 = 4549;
pub const IDS_NEW_INCOGNITO_WINDOW: i32 = 4550;
pub const IDS_PIN_TO_START_SCREEN: i32 = 4551;
pub const IDS_EDIT2: i32 = 4552;
pub const IDS_CUT: i32 = 4553;
pub const IDS_COPY: i32 = 4554;
pub const IDS_PASTE: i32 = 4555;
pub const IDS_DELETE: i32 = 4556;
pub const IDS_FIND: i32 = 4557;
pub const IDS_SAVE_PAGE: i32 = 4558;
pub const IDS_DISTILL_PAGE: i32 = 4559;
pub const IDS_MORE_TOOLS_MENU: i32 = 4560;
pub const IDS_ZOOM_MENU: i32 = 4561;
pub const IDS_ZOOM_MENU2: i32 = 4562;
pub const IDS_ZOOM_PLUS: i32 = 4563;
pub const IDS_ZOOM_PLUS2: i32 = 4564;
pub const IDS_ZOOM_NORMAL: i32 = 4565;
pub const IDS_ZOOM_MINUS: i32 = 4566;
pub const IDS_ZOOM_MINUS2: i32 = 4567;
pub const IDS_COPY_URL: i32 = 4568;
pub const IDS_OPEN_IN_APP_WINDOW: i32 = 4569;
pub const IDS_ACCNAME_ZOOM_PLUS2: i32 = 4571;
pub const IDS_ACCNAME_ZOOM_MINUS2: i32 = 4572;
pub const IDS_VIEW_SOURCE: i32 = 4573;
pub const IDS_FEEDBACK: i32 = 4574;
pub const IDS_DEV_TOOLS: i32 = 4575;
pub const IDS_DEV_TOOLS_ELEMENTS: i32 = 4576;
pub const IDS_DEV_TOOLS_CONSOLE: i32 = 4577;
pub const IDS_DEV_TOOLS_DEVICES: i32 = 4578;
pub const IDS_TASK_MANAGER: i32 = 4579;
pub const IDS_TAKE_SCREENSHOT: i32 = 4580;
pub const IDS_RESTORE_TAB: i32 = 4581;
pub const IDS_RESTORE_WINDOW: i32 = 4582;
pub const IDS_HELP_MENU: i32 = 4585;
pub const IDS_MANAGED: i32 = 4586;
pub const IDS_MANAGED_BY: i32 = 4587;
pub const IDS_IMPORT_SETTINGS_MENU_LABEL: i32 = 4588;
pub const IDS_PROFILING_ENABLED: i32 = 4589;
pub const IDS_FULLSCREEN: i32 = 4590;
pub const IDS_CLEAR_BROWSING_DATA: i32 = 4591;
pub const IDS_SHOW_DOWNLOADS: i32 = 4592;
pub const IDS_SHOW_EXTENSIONS: i32 = 4593;
pub const IDS_SETTINGS: i32 = 4594;
pub const IDS_OPTIONS: i32 = 4595;
pub const IDS_HELP_PAGE: i32 = 4596;
pub const IDS_BETA_FORUM: i32 = 4597;
pub const IDS_GET_HELP: i32 = 4598;
pub const IDS_EXIT: i32 = 4599;
pub const IDS_AUTOCOMPLETE_MATCH_DESCRIPTION_SEPARATOR: i32 = 217;
pub const IDS_AUTOCOMPLETE_MATCH_DESCRIPTION_SEPARATOR_ALTERNATE: i32 = 4600;
pub const IDS_EDIT_SEARCH_ENGINES: i32 = 4601;
pub const IDS_SEARCH_ENGINES_EDITOR_KEYWORD_COLUMN: i32 = 4602;
pub const IDS_SEARCH_ENGINES_EDITOR_DESCRIPTION_COLUMN: i32 = 4603;
pub const IDS_SEARCH_ENGINES_EDITOR_DEFAULT_ENGINE: i32 = 4604;
pub const IDS_ACCNAME_DOWNLOADS_BAR: i32 = 4605;
pub const IDS_HIDE_DOWNLOADS: i32 = 4606;
pub const IDS_SHOW_ALL_DOWNLOADS: i32 = 4607;
pub const IDS_DOWNLOAD_STARTED: i32 = 4608;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS: i32 = 4609;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_ACCESS_DENIED: i32 = 4610;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_ACCESS_DENIED: i32 = 4611;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_PATH_TOO_LONG: i32 = 4612;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_PATH_TOO_LONG: i32 = 4613;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_DISK_FULL: i32 = 4614;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_DISK_FULL: i32 = 4615;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_FILE_TOO_LARGE: i32 = 4616;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_FILE_TOO_LARGE: i32 = 4617;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_TEMPORARY_PROBLEM: i32 = 4618;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_TEMPORARY_PROBLEM: i32 = 4619;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_VIRUS: i32 = 4620;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_VIRUS: i32 = 4621;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_BLOCKED: i32 = 4622;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_BLOCKED: i32 = 4623;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_CONTENT_LENGTH_MISMATCH: i32 = 4624;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_CONTENT_LENGTH_MISMATCH: i32 = 4625;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SECURITY_CHECK_FAILED: i32 = 4626;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SECURITY_CHECK_FAILED: i32 = 4627;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_FILE_TOO_SHORT: i32 = 4628;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_FILE_TOO_SHORT: i32 = 4629;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_FILE_SAME_AS_SOURCE: i32 = 4630;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_FILE_SAME_AS_SOURCE: i32 = 4631;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_NETWORK_TIMEOUT: i32 = 4632;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_NETWORK_TIMEOUT: i32 = 4633;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_NETWORK_DISCONNECTED: i32 = 4634;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_NETWORK_DISCONNECTED: i32 = 4635;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SERVER_DOWN: i32 = 4636;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SERVER_DOWN: i32 = 4637;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_NETWORK_ERROR: i32 = 4638;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_NETWORK_ERROR: i32 = 4639;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_NO_FILE: i32 = 4640;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_NO_FILE: i32 = 4641;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SERVER_PROBLEM: i32 = 4642;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SERVER_PROBLEM: i32 = 4643;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SHUTDOWN: i32 = 4644;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SHUTDOWN: i32 = 4645;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_CRASH: i32 = 4646;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_CRASH: i32 = 4647;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_UNAUTHORIZED: i32 = 4648;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_UNAUTHORIZED: i32 = 4649;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SERVER_CERT_PROBLEM: i32 = 4650;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SERVER_CERT_PROBLEM: i32 = 4651;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_FORBIDDEN: i32 = 4652;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_FORBIDDEN: i32 = 4653;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_UNREACHABLE: i32 = 4654;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_UNREACHABLE: i32 = 4655;
pub const IDS_DOWNLOAD_NOTIFICATION_LABEL_OPEN_WHEN_COMPLETE: i32 = 4656;
pub const IDS_DOWNLOAD_NOTIFICATION_LABEL_OPEN: i32 = 4657;
pub const IDS_DOWNLOAD_STATUS_STARTING: i32 = 4658;
pub const IDS_DOWNLOAD_STATUS_IN_PROGRESS: i32 = 4667;
pub const IDS_DOWNLOAD_STATUS_SIZES: i32 = 4668;
pub const IDS_DOWNLOAD_STATUS_OPEN_IN: i32 = 4669;
pub const IDS_DOWNLOAD_STATUS_OPEN_WHEN_COMPLETE: i32 = 4670;
pub const IDS_DOWNLOAD_STATUS_OPENING: i32 = 4671;
pub const IDS_DOWNLOAD_STATUS_IN_PROGRESS_SHORT: i32 = 4672;
pub const IDS_DOWNLOAD_STATUS_CANCELLED: i32 = 4673;
pub const IDS_DOWNLOAD_STATUS_REMOVED: i32 = 4674;
pub const IDS_DOWNLOAD_STATUS_INTERRUPTED: i32 = 4675;
pub const IDS_DOWNLOAD_UNCONFIRMED_PREFIX: i32 = 4676;
pub const IDS_PROMPT_DANGEROUS_DOWNLOAD: i32 = 4677;
pub const IDS_PROMPT_DANGEROUS_DOWNLOAD_EXTENSION: i32 = 4678;
pub const IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT: i32 = 4679;
pub const IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION: i32 = 4680;
pub const IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD: i32 = 4681;
pub const IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD_IN_ADVANCED_PROTECTION: i32 = 4682;
pub const IDS_BLOCK_REASON_GENERIC_DOWNLOAD: i32 = 4683;
pub const IDS_CONFIRM_KEEP_DANGEROUS_DOWNLOAD_TITLE: i32 = 4685;
pub const IDS_KEEP_DANGEROUS_DOWNLOAD_TITLE: i32 = 4686;
pub const IDS_KEEP_UNCOMMON_DOWNLOAD_TITLE: i32 = 4687;
pub const IDS_PROMPT_CONFIRM_KEEP_DANGEROUS_DOWNLOAD: i32 = 4688;
pub const IDS_PROMPT_CONFIRM_KEEP_MALICIOUS_DOWNLOAD_BODY: i32 = 4689;
pub const IDS_CONFIRM_DOWNLOAD_AGAIN: i32 = 4690;
pub const IDS_CONFIRM_DOWNLOAD: i32 = 4691;
pub const IDS_CONFIRM_DOWNLOAD_RESTORE: i32 = 4692;
pub const IDS_CONTINUE_EXTENSION_DOWNLOAD: i32 = 4693;
pub const IDS_DISCARD_DOWNLOAD: i32 = 4694;
pub const IDS_DOWNLOAD_LINK_PAUSE: i32 = 4695;
pub const IDS_DOWNLOAD_SEARCH: i32 = 4696;
pub const IDS_DOWNLOAD_CLEAR_SEARCH: i32 = 4697;
pub const IDS_DOWNLOAD_NO_DOWNLOADS: i32 = 4698;
pub const IDS_DOWNLOAD_ITEM_DROPDOWN_BUTTON_ACCESSIBLE_TEXT: i32 = 4699;
pub const IDS_DOWNLOAD_LINK_RESUME: i32 = 4700;
pub const IDS_DOWNLOAD_LINK_REMOVE: i32 = 4701;
pub const IDS_DOWNLOAD_LINK_REMOVE_ARIA_LABEL: i32 = 4702;
pub const IDS_DOWNLOAD_LINK_CANCEL: i32 = 4703;
pub const IDS_DOWNLOAD_LINK_RETRY: i32 = 4704;
pub const IDS_DOWNLOAD_LINK_SHOW: i32 = 4705;
pub const IDS_DOWNLOAD_TAB_CANCELLED: i32 = 4706;
pub const IDS_DOWNLOAD_FILE_REMOVED: i32 = 4707;
pub const IDS_DOWNLOAD_TAB_PROGRESS_STATUS_TIME_UNKNOWN: i32 = 4708;
pub const IDS_DOWNLOAD_TAB_PROGRESS_STATUS: i32 = 4709;
pub const IDS_DOWNLOAD_TAB_PROGRESS_SIZE: i32 = 4710;
pub const IDS_DOWNLOAD_PROGRESS_PAUSED: i32 = 4711;
pub const IDS_DOWNLOAD_LINK_CLEAR_ALL: i32 = 4712;
pub const IDS_DOWNLOAD_LINK_OPEN_DOWNLOADS_FOLDER: i32 = 4713;
pub const IDS_DOWNLOAD_MORE_ACTIONS: i32 = 4714;
pub const IDS_DOWNLOAD_ACTION_MENU_DESCRIPTION: i32 = 4715;
pub const IDS_DOWNLOAD_BY_EXTENSION_URL: i32 = 4716;
pub const IDS_DOWNLOAD_IN_INCOGNITO: i32 = 4717;
pub const IDS_DOWNLOAD_UNDO_DESCRIPTION: i32 = 4718;
pub const IDS_DOWNLOAD_UNDO: i32 = 4719;
pub const IDS_DOWNLOAD_TOAST_REMOVED_FROM_LIST: i32 = 4720;
pub const IDS_DOWNLOAD_TOAST_CLEARED_ALL: i32 = 4721;
pub const IDS_DOWNLOAD_STATUS_IN_PROGRESS_ACCESSIBLE_ALERT: i32 = 4722;
pub const IDS_DOWNLOAD_STATUS_PERCENT_COMPLETE_ACCESSIBLE_ALERT: i32 = 4723;
pub const IDS_DOWNLOAD_STATUS_TIME_REMAINING_ACCESSIBLE_ALERT: i32 = 4724;
pub const IDS_DOWNLOAD_FAILED_ACCESSIBLE_ALERT: i32 = 4725;
pub const IDS_DOWNLOAD_CANCELLED_ACCESSIBLE_ALERT: i32 = 4726;
pub const IDS_DOWNLOAD_COMPLETE_ACCESSIBLE_ALERT: i32 = 4727;
pub const IDS_DOWNLOAD_NOTIFICATION_COPY_TO_CLIPBOARD: i32 = 4728;
pub const IDS_DOWNLOAD_NOTIFICATION_ANNOTATE: i32 = 4729;
pub const IDS_DOWNLOAD_MENU_SHOW: i32 = 4730;
pub const IDS_DOWNLOAD_MENU_OPEN_WHEN_COMPLETE: i32 = 4731;
pub const IDS_DOWNLOAD_MENU_OPEN: i32 = 4732;
pub const IDS_DOWNLOAD_MENU_ALWAYS_OPEN_TYPE: i32 = 4733;
pub const IDS_DOWNLOAD_MENU_PLATFORM_OPEN: i32 = 4734;
pub const IDS_DOWNLOAD_MENU_PLATFORM_OPEN_ALWAYS: i32 = 4735;
pub const IDS_DOWNLOAD_MENU_CANCEL: i32 = 4736;
pub const IDS_DOWNLOAD_MENU_PAUSE_ITEM: i32 = 4737;
pub const IDS_DOWNLOAD_MENU_RESUME_ITEM: i32 = 4738;
pub const IDS_DOWNLOAD_MENU_DISCARD: i32 = 4739;
pub const IDS_DOWNLOAD_MENU_KEEP: i32 = 4740;
pub const IDS_DOWNLOAD_MENU_LEARN_MORE_SCANNING: i32 = 4741;
pub const IDS_DOWNLOAD_MENU_LEARN_MORE_INTERRUPTED: i32 = 4742;
pub const IDS_DOWNLOAD_MENU_ALWAYS_OPEN_PDF_IN_READER: i32 = 4743;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_TITLE: i32 = 4752;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_CONTINUE_BUTTON: i32 = 4753;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_INCOGNITO_MESSAGE: i32 = 4754;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_EXIT_BUTTON: i32 = 4755;
pub const IDS_FEEDBACK_SERVICE_DIALOG_EXPLANATION_SCOUT: i32 = 4756;
pub const IDS_FEEDBACK_SERVICE_DIALOG_OK_BUTTON_LABEL: i32 = 4757;
pub const IDS_FEEDBACK_SERVICE_DIALOG_CANCEL_BUTTON_LABEL: i32 = 4758;
pub const IDS_OMNIBOX_PWA_INSTALL_ICON_LABEL: i32 = 4762;
pub const IDS_OMNIBOX_PWA_INSTALL_ICON_TOOLTIP: i32 = 4763;
pub const IDS_ADD_TO_OS_LAUNCH_SURFACE_BUBBLE_TITLE: i32 = 4764;
pub const IDS_CREATE_SHORTCUTS_BUTTON_LABEL: i32 = 4765;
pub const IDS_INSTALL_TO_OS_LAUNCH_SURFACE_BUBBLE_TITLE: i32 = 4766;
pub const IDS_INSTALL_PWA_BUTTON_LABEL: i32 = 4767;
pub const IDS_BOOKMARK_APP_AX_BUBBLE_NAME_LABEL: i32 = 4768;
pub const IDS_BOOKMARK_APP_BUBBLE_OPEN_AS_WINDOW: i32 = 4769;
pub const IDS_FINISH_POLICY_WEB_APP_INSTALLATION: i32 = 4770;
pub const IDS_FINISH_POLICY_WEB_APP_INSTALATION_RESTART: i32 = 4771;
pub const IDS_FINISH_POLICY_WEB_APP_INSTALLATION_NOT_NOW: i32 = 4772;
pub const IDS_ADD_TO_OS_LAUNCH_SURFACE: i32 = 4777;
pub const IDS_INSTALL_TO_OS_LAUNCH_SURFACE: i32 = 4778;
pub const IDS_UNINSTALL_FROM_OS_LAUNCH_SURFACE: i32 = 4779;
pub const IDS_APPLICATION_INFO_WEB_STORE_LINK: i32 = 4780;
pub const IDS_APPLICATION_INFO_HOMEPAGE_LINK: i32 = 4781;
pub const IDS_ARC_APPLICATION_INFO_MANAGE_LINK: i32 = 4782;
pub const IDS_APPLICATION_INFO_APP_OVERVIEW_TITLE: i32 = 4783;
pub const IDS_APPLICATION_INFO_APP_PERMISSIONS_TITLE: i32 = 4784;
pub const IDS_APPLICATION_INFO_UNINSTALL_BUTTON_TEXT: i32 = 4785;
pub const IDS_APPLICATION_INFO_LICENSES_BUTTON_TEXT: i32 = 4786;
pub const IDS_APPLICATION_INFO_SIZE_LABEL: i32 = 4787;
pub const IDS_APPLICATION_INFO_VERSION_LABEL: i32 = 4788;
pub const IDS_APPLICATION_INFO_CREATE_SHORTCUTS_BUTTON_TEXT: i32 = 4789;
pub const IDS_APPLICATION_INFO_LAUNCH_OPTIONS_ACCNAME: i32 = 4790;
pub const IDS_APPLICATION_INFO_SIZE_LOADING_LABEL: i32 = 4791;
pub const IDS_APPLICATION_INFO_SIZE_SMALL_LABEL: i32 = 4792;
pub const IDS_APPLICATION_INFO_REVOKE_PERMISSION_ALT_TEXT: i32 = 4793;
pub const IDS_APPLICATION_INFO_APP_NO_PERMISSIONS_TEXT: i32 = 4794;
pub const IDS_APPLICATION_INFO_EXTENSION_NO_PERMISSIONS_TEXT: i32 = 4795;
pub const IDS_APPLICATION_INFO_RETAINED_FILES: i32 = 4796;
pub const IDS_APPLICATION_INFO_RETAINED_DEVICES: i32 = 4797;
pub const IDS_CREATE_SHORTCUTS_TITLE: i32 = 4798;
pub const IDS_CREATE_SHORTCUTS_LABEL: i32 = 4799;
pub const IDS_CREATE_SHORTCUTS_DESKTOP_CHKBOX: i32 = 4800;
pub const IDS_CREATE_SHORTCUTS_MENU_CHKBOX: i32 = 4801;
pub const IDS_CREATE_SHORTCUTS_COMMIT: i32 = 4802;
pub const IDS_CREATE_SHORTCUTS_START_MENU_CHKBOX: i32 = 4803;
pub const IDS_CREATE_SHORTCUTS_QUICK_LAUNCH_BAR_CHKBOX: i32 = 4804;
pub const IDS_PIN_TO_TASKBAR_CHKBOX: i32 = 4805;
pub const IDS_WEBSHARE_TARGET_PICKER_TITLE: i32 = 4806;
pub const IDS_WEBSHARE_TARGET_PICKER_LABEL: i32 = 4807;
pub const IDS_WEBSHARE_TARGET_PICKER_COMMIT: i32 = 4808;
pub const IDS_WEBSHARE_TARGET_DIALOG_ITEM_TEXT: i32 = 4809;
pub const IDS_MANAGE: i32 = 4810;
pub const IDS_LIST_BULLET: i32 = 4811;
pub const IDS_AUTOMATIC_DOWNLOADS_TAB_LABEL: i32 = 4812;
pub const IDS_BLOCKED_DOWNLOAD_NO_ACTION: i32 = 4813;
pub const IDS_BLOCKED_DOWNLOAD_UNBLOCK: i32 = 4814;
pub const IDS_BLOCKED_DOWNLOADS_LINK: i32 = 4815;
pub const IDS_ALLOWED_DOWNLOAD_TITLE: i32 = 4816;
pub const IDS_BLOCKED_DOWNLOAD_TITLE: i32 = 4817;
pub const IDS_BLOCKED_DOWNLOADS_EXPLANATION: i32 = 4818;
pub const IDS_ALLOWED_DOWNLOAD_NO_ACTION: i32 = 4819;
pub const IDS_ALLOWED_DOWNLOAD_BLOCK: i32 = 4820;
pub const IDS_BLOCKED_COOKIES_TITLE: i32 = 4821;
pub const IDS_ACCESSED_COOKIES_TITLE: i32 = 4822;
pub const IDS_BLOCKED_COOKIES_MESSAGE: i32 = 4823;
pub const IDS_ACCESSED_COOKIES_MESSAGE: i32 = 4824;
pub const IDS_BLOCKED_COOKIES_LINK: i32 = 4825;
pub const IDS_BLOCKED_COOKIES_INFO: i32 = 4826;
pub const IDS_BLOCKED_IMAGES_TITLE: i32 = 4827;
pub const IDS_BLOCKED_IMAGES_MESSAGE: i32 = 4828;
pub const IDS_BLOCKED_COOKIES_UNBLOCK: i32 = 4829;
pub const IDS_BLOCKED_IMAGES_UNBLOCK: i32 = 4830;
pub const IDS_BLOCKED_COOKIES_NO_ACTION: i32 = 4831;
pub const IDS_ALLOWED_COOKIES_NO_ACTION: i32 = 4832;
pub const IDS_ALLOWED_COOKIES_BLOCK: i32 = 4833;
pub const IDS_BLOCKED_IMAGES_NO_ACTION: i32 = 4834;
pub const IDS_BLOCKED_POPUPS_TOOLTIP: i32 = 4835;
pub const IDS_BLOCKED_POPUPS_TITLE: i32 = 4836;
pub const IDS_BLOCKED_POPUPS_REDIRECTS_UNBLOCK: i32 = 4837;
pub const IDS_BLOCKED_POPUPS_REDIRECTS_NO_ACTION: i32 = 4838;
pub const IDS_BLOCKED_POPUPS_LINK: i32 = 4839;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_AND_CAMERA_ALLOW: i32 = 4840;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_ALLOW: i32 = 4841;
pub const IDS_BLOCKED_MEDIASTREAM_CAMERA_ALLOW: i32 = 4842;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_AND_CAMERA_ASK: i32 = 4843;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_ASK: i32 = 4844;
pub const IDS_BLOCKED_MEDIASTREAM_CAMERA_ASK: i32 = 4845;
pub const IDS_ALLOWED_MEDIASTREAM_MIC_AND_CAMERA_BLOCK: i32 = 4846;
pub const IDS_ALLOWED_MEDIASTREAM_MIC_BLOCK: i32 = 4847;
pub const IDS_ALLOWED_MEDIASTREAM_CAMERA_BLOCK: i32 = 4848;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_AND_CAMERA_NO_ACTION: i32 = 4849;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_NO_ACTION: i32 = 4850;
pub const IDS_BLOCKED_MEDIASTREAM_CAMERA_NO_ACTION: i32 = 4851;
pub const IDS_ALLOWED_MEDIASTREAM_MIC_AND_CAMERA_NO_ACTION: i32 = 4852;
pub const IDS_ALLOWED_MEDIASTREAM_MIC_NO_ACTION: i32 = 4853;
pub const IDS_ALLOWED_MEDIASTREAM_CAMERA_NO_ACTION: i32 = 4854;
pub const IDS_BLOCKED_POPUPS_EXPLANATORY_TEXT: i32 = 4855;
pub const IDS_BLOCKED_PLUGIN_EXPLANATORY_TEXT: i32 = 4856;
pub const IDS_BLOCKED_JAVASCRIPT_TITLE: i32 = 4857;
pub const IDS_BLOCKED_JAVASCRIPT_MESSAGE: i32 = 4858;
pub const IDS_BLOCKED_JAVASCRIPT_UNBLOCK: i32 = 4859;
pub const IDS_BLOCKED_JAVASCRIPT_NO_ACTION: i32 = 4860;
pub const IDS_BLOCKED_PLUGINS_TITLE: i32 = 4861;
pub const IDS_BLOCKED_PLUGINS_MESSAGE: i32 = 4862;
pub const IDS_BLOCKED_PLUGINS_LOAD_ALL: i32 = 4863;
pub const IDS_BLOCKED_SOUND_TITLE: i32 = 4864;
pub const IDS_BLOCKED_SOUND_UNBLOCK: i32 = 4865;
pub const IDS_BLOCKED_SOUND_NO_ACTION: i32 = 4866;
pub const IDS_CERT_SELECTOR_SUBJECT_COLUMN: i32 = 4867;
pub const IDS_CERT_SELECTOR_ISSUER_COLUMN: i32 = 4868;
pub const IDS_CERT_SELECTOR_PROVIDER_COLUMN: i32 = 4869;
pub const IDS_CERT_SELECTOR_SERIAL_COLUMN: i32 = 4870;
pub const IDS_CERT_INFO_SUBJECT_GROUP: i32 = 4871;
pub const IDS_CERT_INFO_ISSUER_GROUP: i32 = 4872;
pub const IDS_CERT_INFO_COMMON_NAME_LABEL: i32 = 4873;
pub const IDS_CERT_INFO_ORGANIZATION_LABEL: i32 = 4874;
pub const IDS_CERT_INFO_ORGANIZATIONAL_UNIT_LABEL: i32 = 4875;
pub const IDS_CERT_INFO_SERIAL_NUMBER_LABEL: i32 = 4876;
pub const IDS_CERT_INFO_VALIDITY_GROUP: i32 = 4877;
pub const IDS_CERT_INFO_ISSUED_ON_LABEL: i32 = 4878;
pub const IDS_CERT_INFO_EXPIRES_ON_LABEL: i32 = 4879;
pub const IDS_CERT_INFO_FINGERPRINTS_GROUP: i32 = 4880;
pub const IDS_CERT_INFO_SHA256_FINGERPRINT_LABEL: i32 = 4881;
pub const IDS_CERT_INFO_SHA1_FINGERPRINT_LABEL: i32 = 4882;
pub const IDS_CERT_DETAILS_EXTENSIONS: i32 = 4883;
pub const IDS_CERT_X509_SUBJECT_ALT_NAME: i32 = 4884;
pub const IDS_CERT_EXPORT_TYPE_BASE64: i32 = 4885;
pub const IDS_CERT_EXPORT_TYPE_BASE64_CHAIN: i32 = 4886;
pub const IDS_CERT_EXPORT_TYPE_DER: i32 = 4887;
pub const IDS_CERT_EXPORT_TYPE_PKCS7: i32 = 4888;
pub const IDS_CERT_EXPORT_TYPE_PKCS7_CHAIN: i32 = 4889;
pub const IDS_CERT_INFO_DIALOG_TITLE: i32 = 4890;
pub const IDS_CERT_INFO_GENERAL_TAB_LABEL: i32 = 4891;
pub const IDS_CERT_INFO_DETAILS_TAB_LABEL: i32 = 4892;
pub const IDS_CERT_INFO_VERIFIED_USAGES_GROUP: i32 = 4893;
pub const IDS_CERT_USAGE_SSL_CLIENT: i32 = 4894;
pub const IDS_CERT_USAGE_SSL_SERVER: i32 = 4895;
pub const IDS_CERT_USAGE_SSL_SERVER_WITH_STEPUP: i32 = 4896;
pub const IDS_CERT_USAGE_EMAIL_SIGNER: i32 = 4897;
pub const IDS_CERT_USAGE_EMAIL_RECEIVER: i32 = 4898;
pub const IDS_CERT_USAGE_OBJECT_SIGNER: i32 = 4899;
pub const IDS_CERT_USAGE_SSL_CA: i32 = 4900;
pub const IDS_CERT_USAGE_STATUS_RESPONDER: i32 = 4901;
pub const IDS_CERT_INFO_IDN_VALUE_FORMAT: i32 = 4902;
pub const IDS_CERT_INFO_FIELD_NOT_PRESENT: i32 = 4903;
pub const IDS_CERT_DETAILS_CERTIFICATE_HIERARCHY_LABEL: i32 = 4904;
pub const IDS_CERT_DETAILS_CERTIFICATE_FIELDS_LABEL: i32 = 4905;
pub const IDS_CERT_DETAILS_CERTIFICATE_FIELD_VALUE_LABEL: i32 = 4906;
pub const IDS_CERT_DETAILS_CERTIFICATE: i32 = 4907;
pub const IDS_CERT_DETAILS_VERSION: i32 = 4908;
pub const IDS_CERT_DETAILS_VERSION_FORMAT: i32 = 4909;
pub const IDS_CERT_DETAILS_SERIAL_NUMBER: i32 = 4910;
pub const IDS_CERT_DETAILS_CERTIFICATE_SIG_ALG: i32 = 4911;
pub const IDS_CERT_DETAILS_ISSUER: i32 = 4912;
pub const IDS_CERT_DETAILS_VALIDITY: i32 = 4913;
pub const IDS_CERT_DETAILS_NOT_BEFORE: i32 = 4914;
pub const IDS_CERT_DETAILS_NOT_AFTER: i32 = 4915;
pub const IDS_CERT_DETAILS_SUBJECT: i32 = 4916;
pub const IDS_CERT_DETAILS_SUBJECT_KEY_INFO: i32 = 4917;
pub const IDS_CERT_DETAILS_SUBJECT_KEY_ALG: i32 = 4918;
pub const IDS_CERT_DETAILS_SUBJECT_KEY: i32 = 4919;
pub const IDS_CERT_RSA_PUBLIC_KEY_DUMP_FORMAT: i32 = 4920;
pub const IDS_CERT_DETAILS_CERTIFICATE_SIG_VALUE: i32 = 4921;
pub const IDS_CERT_DETAILS_EXPORT_CERTIFICATE: i32 = 4922;
pub const IDS_CERT_OID_AVA_COMMON_NAME: i32 = 4923;
pub const IDS_CERT_OID_AVA_STATE_OR_PROVINCE: i32 = 4924;
pub const IDS_CERT_OID_AVA_ORGANIZATION_NAME: i32 = 4925;
pub const IDS_CERT_OID_AVA_ORGANIZATIONAL_UNIT_NAME: i32 = 4926;
pub const IDS_CERT_OID_AVA_DN_QUALIFIER: i32 = 4927;
pub const IDS_CERT_OID_AVA_COUNTRY_NAME: i32 = 4928;
pub const IDS_CERT_OID_AVA_SERIAL_NUMBER: i32 = 4929;
pub const IDS_CERT_OID_AVA_LOCALITY: i32 = 4930;
pub const IDS_CERT_OID_AVA_DC: i32 = 4931;
pub const IDS_CERT_OID_RFC1274_MAIL: i32 = 4932;
pub const IDS_CERT_OID_RFC1274_UID: i32 = 4933;
pub const IDS_CERT_OID_PKCS9_EMAIL_ADDRESS: i32 = 4934;
pub const IDS_CERT_OID_BUSINESS_CATEGORY: i32 = 4935;
pub const IDS_CERT_OID_EV_INCORPORATION_LOCALITY: i32 = 4936;
pub const IDS_CERT_OID_EV_INCORPORATION_STATE: i32 = 4937;
pub const IDS_CERT_OID_EV_INCORPORATION_COUNTRY: i32 = 4938;
pub const IDS_CERT_OID_AVA_STREET_ADDRESS: i32 = 4939;
pub const IDS_CERT_OID_AVA_POSTAL_CODE: i32 = 4940;
pub const IDS_CERT_OID_PKCS1_RSA_ENCRYPTION: i32 = 4941;
pub const IDS_CERT_OID_PKCS1_MD2_WITH_RSA_ENCRYPTION: i32 = 4942;
pub const IDS_CERT_OID_PKCS1_MD4_WITH_RSA_ENCRYPTION: i32 = 4943;
pub const IDS_CERT_OID_PKCS1_MD5_WITH_RSA_ENCRYPTION: i32 = 4944;
pub const IDS_CERT_OID_PKCS1_SHA1_WITH_RSA_ENCRYPTION: i32 = 4945;
pub const IDS_CERT_OID_PKCS1_SHA256_WITH_RSA_ENCRYPTION: i32 = 4946;
pub const IDS_CERT_OID_PKCS1_SHA384_WITH_RSA_ENCRYPTION: i32 = 4947;
pub const IDS_CERT_OID_PKCS1_SHA512_WITH_RSA_ENCRYPTION: i32 = 4948;
pub const IDS_CERT_OID_ANSIX962_ECDSA_SHA1_SIGNATURE: i32 = 4949;
pub const IDS_CERT_OID_ANSIX962_ECDSA_SHA256_SIGNATURE: i32 = 4950;
pub const IDS_CERT_OID_ANSIX962_ECDSA_SHA384_SIGNATURE: i32 = 4951;
pub const IDS_CERT_OID_ANSIX962_ECDSA_SHA512_SIGNATURE: i32 = 4952;
pub const IDS_CERT_OID_ANSIX962_EC_PUBLIC_KEY: i32 = 4953;
pub const IDS_CERT_OID_SECG_EC_SECP256R1: i32 = 4954;
pub const IDS_CERT_OID_SECG_EC_SECP384R1: i32 = 4955;
pub const IDS_CERT_OID_SECG_EC_SECP521R1: i32 = 4956;
pub const IDS_CERT_EXT_NS_CERT_TYPE: i32 = 4957;
pub const IDS_CERT_EXT_NS_CERT_TYPE_EMAIL: i32 = 4958;
pub const IDS_CERT_EXT_NS_CERT_TYPE_EMAIL_CA: i32 = 4959;
pub const IDS_CERT_EXT_NS_CERT_BASE_URL: i32 = 4960;
pub const IDS_CERT_EXT_NS_CERT_REVOCATION_URL: i32 = 4961;
pub const IDS_CERT_EXT_NS_CA_REVOCATION_URL: i32 = 4962;
pub const IDS_CERT_EXT_NS_CERT_RENEWAL_URL: i32 = 4963;
pub const IDS_CERT_EXT_NS_CA_POLICY_URL: i32 = 4964;
pub const IDS_CERT_EXT_NS_SSL_SERVER_NAME: i32 = 4965;
pub const IDS_CERT_EXT_NS_COMMENT: i32 = 4966;
pub const IDS_CERT_EXT_NS_LOST_PASSWORD_URL: i32 = 4967;
pub const IDS_CERT_EXT_NS_CERT_RENEWAL_TIME: i32 = 4968;
pub const IDS_CERT_X509_SUBJECT_DIRECTORY_ATTR: i32 = 4969;
pub const IDS_CERT_X509_SUBJECT_KEYID: i32 = 4970;
pub const IDS_CERT_KEYID_FORMAT: i32 = 4971;
pub const IDS_CERT_ISSUER_FORMAT: i32 = 4972;
pub const IDS_CERT_SERIAL_NUMBER_FORMAT: i32 = 4973;
pub const IDS_CERT_X509_KEY_USAGE: i32 = 4974;
pub const IDS_CERT_X509_ISSUER_ALT_NAME: i32 = 4975;
pub const IDS_CERT_X509_BASIC_CONSTRAINTS: i32 = 4976;
pub const IDS_CERT_X509_NAME_CONSTRAINTS: i32 = 4977;
pub const IDS_CERT_X509_CRL_DIST_POINTS: i32 = 4978;
pub const IDS_CERT_X509_CERT_POLICIES: i32 = 4979;
pub const IDS_CERT_X509_POLICY_MAPPINGS: i32 = 4980;
pub const IDS_CERT_X509_POLICY_CONSTRAINTS: i32 = 4981;
pub const IDS_CERT_X509_AUTH_KEYID: i32 = 4982;
pub const IDS_CERT_X509_EXT_KEY_USAGE: i32 = 4983;
pub const IDS_CERT_X509_AUTH_INFO_ACCESS: i32 = 4984;
pub const IDS_CERT_X509_KEY_USAGE_SIGNING: i32 = 4985;
pub const IDS_CERT_X509_KEY_USAGE_NONREP: i32 = 4986;
pub const IDS_CERT_X509_KEY_USAGE_ENCIPHERMENT: i32 = 4987;
pub const IDS_CERT_X509_KEY_USAGE_DATA_ENCIPHERMENT: i32 = 4988;
pub const IDS_CERT_X509_KEY_USAGE_KEY_AGREEMENT: i32 = 4989;
pub const IDS_CERT_X509_KEY_USAGE_CERT_SIGNER: i32 = 4990;
pub const IDS_CERT_X509_KEY_USAGE_CRL_SIGNER: i32 = 4991;
pub const IDS_CERT_X509_KEY_USAGE_ENCIPHER_ONLY: i32 = 4992;
pub const IDS_CERT_X509_BASIC_CONSTRAINT_IS_CA: i32 = 4993;
pub const IDS_CERT_X509_BASIC_CONSTRAINT_IS_NOT_CA: i32 = 4994;
pub const IDS_CERT_X509_BASIC_CONSTRAINT_PATH_LEN: i32 = 4995;
pub const IDS_CERT_X509_BASIC_CONSTRAINT_PATH_LEN_UNLIMITED: i32 = 4996;
pub const IDS_CERT_PKIX_CPS_POINTER_QUALIFIER: i32 = 4997;
pub const IDS_CERT_PKIX_USER_NOTICE_QUALIFIER: i32 = 4998;
pub const IDS_CERT_REVOCATION_REASON_UNUSED: i32 = 4999;
pub const IDS_CERT_REVOCATION_REASON_KEY_COMPROMISE: i32 = 5000;
pub const IDS_CERT_REVOCATION_REASON_CA_COMPROMISE: i32 = 5001;
pub const IDS_CERT_REVOCATION_REASON_AFFILIATION_CHANGED: i32 = 5002;
pub const IDS_CERT_REVOCATION_REASON_SUPERSEDED: i32 = 5003;
pub const IDS_CERT_REVOCATION_REASON_CESSATION_OF_OPERATION: i32 = 5004;
pub const IDS_CERT_REVOCATION_REASON_CERTIFICATE_HOLD: i32 = 5005;
pub const IDS_CERT_OCSP_RESPONDER_FORMAT: i32 = 5006;
pub const IDS_CERT_CA_ISSUERS_FORMAT: i32 = 5007;
pub const IDS_CERT_UNKNOWN_OID_INFO_FORMAT: i32 = 5008;
pub const IDS_CERT_EXT_KEY_USAGE_FORMAT: i32 = 5009;
pub const IDS_CERT_MULTILINE_INFO_START_FORMAT: i32 = 5010;
pub const IDS_CERT_GENERAL_NAME_RFC822_NAME: i32 = 5011;
pub const IDS_CERT_GENERAL_NAME_DNS_NAME: i32 = 5012;
pub const IDS_CERT_GENERAL_NAME_X400_ADDRESS: i32 = 5013;
pub const IDS_CERT_GENERAL_NAME_DIRECTORY_NAME: i32 = 5014;
pub const IDS_CERT_GENERAL_NAME_EDI_PARTY_NAME: i32 = 5015;
pub const IDS_CERT_GENERAL_NAME_URI: i32 = 5016;
pub const IDS_CERT_GENERAL_NAME_IP_ADDRESS: i32 = 5017;
pub const IDS_CERT_GENERAL_NAME_REGISTERED_ID: i32 = 5018;
pub const IDS_CERT_EXT_MS_CERT_TYPE: i32 = 5019;
pub const IDS_CERT_EXT_MS_CA_VERSION: i32 = 5020;
pub const IDS_CERT_EXT_MS_NT_PRINCIPAL_NAME: i32 = 5021;
pub const IDS_CERT_EXT_MS_NTDS_REPLICATION: i32 = 5022;
pub const IDS_CERT_EKU_TLS_WEB_SERVER_AUTHENTICATION: i32 = 5023;
pub const IDS_CERT_EKU_TLS_WEB_CLIENT_AUTHENTICATION: i32 = 5024;
pub const IDS_CERT_EKU_CODE_SIGNING: i32 = 5025;
pub const IDS_CERT_EKU_EMAIL_PROTECTION: i32 = 5026;
pub const IDS_CERT_EKU_TIME_STAMPING: i32 = 5027;
pub const IDS_CERT_EKU_OCSP_SIGNING: i32 = 5028;
pub const IDS_CERT_EKU_MS_INDIVIDUAL_CODE_SIGNING: i32 = 5029;
pub const IDS_CERT_EKU_MS_COMMERCIAL_CODE_SIGNING: i32 = 5030;
pub const IDS_CERT_EKU_MS_TRUST_LIST_SIGNING: i32 = 5031;
pub const IDS_CERT_EKU_MS_TIME_STAMPING: i32 = 5032;
pub const IDS_CERT_EKU_MS_SERVER_GATED_CRYPTO: i32 = 5033;
pub const IDS_CERT_EKU_MS_ENCRYPTING_FILE_SYSTEM: i32 = 5034;
pub const IDS_CERT_EKU_MS_FILE_RECOVERY: i32 = 5035;
pub const IDS_CERT_EKU_MS_WINDOWS_HARDWARE_DRIVER_VERIFICATION: i32 = 5036;
pub const IDS_CERT_EKU_MS_QUALIFIED_SUBORDINATION: i32 = 5037;
pub const IDS_CERT_EKU_MS_KEY_RECOVERY: i32 = 5038;
pub const IDS_CERT_EKU_MS_DOCUMENT_SIGNING: i32 = 5039;
pub const IDS_CERT_EKU_MS_LIFETIME_SIGNING: i32 = 5040;
pub const IDS_CERT_EKU_MS_SMART_CARD_LOGON: i32 = 5041;
pub const IDS_CERT_EKU_MS_KEY_RECOVERY_AGENT: i32 = 5042;
pub const IDS_CERT_EKU_NETSCAPE_INTERNATIONAL_STEP_UP: i32 = 5043;
pub const IDS_CERT_EXTENSION_CRITICAL: i32 = 5044;
pub const IDS_CERT_EXTENSION_NON_CRITICAL: i32 = 5045;
pub const IDS_CERT_EXTENSION_DUMP_ERROR: i32 = 5046;
pub const IDS_CERTIFICATE_MANAGER_TITLE: i32 = 5047;
pub const IDS_CERT_MANAGER_HARDWARE_BACKED_KEY_FORMAT: i32 = 5048;
pub const IDS_CERT_MANAGER_HARDWARE_BACKED: i32 = 5049;
pub const IDS_CERT_MANAGER_EXTENSION_PROVIDED_FORMAT: i32 = 5050;
pub const IDS_DEV_TOOLS_INFOBAR_LABEL: i32 = 5051;
pub const IDS_DEV_TOOLS_CONFIRM_ADD_FILE_SYSTEM_MESSAGE: i32 = 5052;
pub const IDS_DEV_TOOLS_CONFIRM_ALLOW_BUTTON: i32 = 5053;
pub const IDS_DEV_TOOLS_CONFIRM_DENY_BUTTON: i32 = 5054;
pub const IDS_RELOAD_MENU_NORMAL_RELOAD_ITEM: i32 = 199;
pub const IDS_RELOAD_MENU_HARD_RELOAD_ITEM: i32 = 200;
pub const IDS_RELOAD_MENU_EMPTY_AND_HARD_RELOAD_ITEM: i32 = 201;
pub const IDS_EXIT_FULLSCREEN_MODE: i32 = 5055;
pub const IDS_TAB_SHARING_INFOBAR_SHARING_CURRENT_TAB_LABEL: i32 = 5056;
pub const IDS_TAB_SHARING_INFOBAR_SHARING_ANOTHER_TAB_LABEL: i32 = 5057;
pub const IDS_TAB_SHARING_INFOBAR_SHARE_BUTTON: i32 = 5058;
pub const IDS_TAB_SHARING_INFOBAR_STOP_BUTTON: i32 = 5059;
pub const IDS_TASK_MANAGER_KILL: i32 = 5060;
pub const IDS_TASK_MANAGER_PROCESS_ID_COLUMN: i32 = 5061;
pub const IDS_TASK_MANAGER_GDI_HANDLES_COLUMN: i32 = 5062;
pub const IDS_TASK_MANAGER_USER_HANDLES_COLUMN: i32 = 5063;
pub const IDS_TASK_MANAGER_TASK_COLUMN: i32 = 5064;
pub const IDS_TASK_MANAGER_NACL_DEBUG_STUB_PORT_COLUMN: i32 = 5065;
pub const IDS_TASK_MANAGER_NET_COLUMN: i32 = 5066;
pub const IDS_TASK_MANAGER_CPU_COLUMN: i32 = 5067;
pub const IDS_TASK_MANAGER_START_TIME_COLUMN: i32 = 5068;
pub const IDS_TASK_MANAGER_CPU_TIME_COLUMN: i32 = 5069;
pub const IDS_TASK_MANAGER_MEM_FOOTPRINT_COLUMN: i32 = 5070;
pub const IDS_TASK_MANAGER_SWAPPED_MEM_COLUMN: i32 = 5071;
pub const IDS_TASK_MANAGER_PROFILE_NAME_COLUMN: i32 = 5072;
pub const IDS_TASK_MANAGER_IDLE_WAKEUPS_COLUMN: i32 = 5073;
pub const IDS_TASK_MANAGER_HARD_FAULTS_COLUMN: i32 = 5074;
pub const IDS_TASK_MANAGER_OPEN_FD_COUNT_COLUMN: i32 = 5075;
pub const IDS_TASK_MANAGER_PROCESS_PRIORITY_COLUMN: i32 = 5076;
pub const IDS_TASK_MANAGER_WEBCORE_IMAGE_CACHE_COLUMN: i32 = 5077;
pub const IDS_TASK_MANAGER_WEBCORE_SCRIPTS_CACHE_COLUMN: i32 = 5078;
pub const IDS_TASK_MANAGER_WEBCORE_CSS_CACHE_COLUMN: i32 = 5079;
pub const IDS_TASK_MANAGER_VIDEO_MEMORY_COLUMN: i32 = 5080;
pub const IDS_TASK_MANAGER_SQLITE_MEMORY_USED_COLUMN: i32 = 5081;
pub const IDS_TASK_MANAGER_JAVASCRIPT_MEMORY_ALLOCATED_COLUMN: i32 = 5082;
pub const IDS_TASK_MANAGER_KEEPALIVE_COUNT_COLUMN: i32 = 5083;
pub const IDS_TASK_MANAGER_MEM_CELL_TEXT: i32 = 5084;
pub const IDS_TASK_MANAGER_CACHE_SIZE_CELL_TEXT: i32 = 5085;
pub const IDS_TASK_MANAGER_NA_CELL_TEXT: i32 = 5086;
pub const IDS_TASK_MANAGER_BACKGROUNDED_TEXT: i32 = 5087;
pub const IDS_TASK_MANAGER_FOREGROUNDED_TEXT: i32 = 5088;
pub const IDS_TASK_MANAGER_UNKNOWN_VALUE_TEXT: i32 = 5089;
pub const IDS_TASK_MANAGER_DISABLED_NACL_DBG_TEXT: i32 = 5090;
pub const IDS_TASK_MANAGER_HANDLES_CELL_TEXT: i32 = 5091;
pub const IDS_TASK_MANAGER_WEB_BROWSER_CELL_TEXT: i32 = 5092;
pub const IDS_TASK_MANAGER_EXTENSION_PREFIX: i32 = 5093;
pub const IDS_TASK_MANAGER_EXTENSION_INCOGNITO_PREFIX: i32 = 5094;
pub const IDS_TASK_MANAGER_APP_PREFIX: i32 = 5095;
pub const IDS_TASK_MANAGER_APP_INCOGNITO_PREFIX: i32 = 5096;
pub const IDS_TASK_MANAGER_TAB_PREFIX: i32 = 5097;
pub const IDS_TASK_MANAGER_TAB_INCOGNITO_PREFIX: i32 = 5098;
pub const IDS_TASK_MANAGER_BACKGROUND_APP_PREFIX: i32 = 5099;
pub const IDS_TASK_MANAGER_BACKGROUND_PREFIX: i32 = 5100;
pub const IDS_TASK_MANAGER_PLUGIN_PREFIX: i32 = 5101;
pub const IDS_TASK_MANAGER_PLUGIN_BROKER_PREFIX: i32 = 5102;
pub const IDS_TASK_MANAGER_PRERENDER_PREFIX: i32 = 5103;
pub const IDS_TASK_MANAGER_RENDERER_PREFIX: i32 = 5104;
pub const IDS_TASK_MANAGER_SERVICE_WORKER_PREFIX: i32 = 5105;
pub const IDS_TASK_MANAGER_UNKNOWN_PLUGIN_NAME: i32 = 5106;
pub const IDS_TASK_MANAGER_UTILITY_PREFIX: i32 = 5107;
pub const IDS_TASK_MANAGER_NACL_PREFIX: i32 = 5108;
pub const IDS_TASK_MANAGER_NACL_BROKER_PREFIX: i32 = 5109;
pub const IDS_TASK_MANAGER_GPU_PREFIX: i32 = 5110;
pub const IDS_TASK_MANAGER_PRINT_PREFIX: i32 = 5111;
pub const IDS_TASK_MANAGER_SUBFRAME_PREFIX: i32 = 5112;
pub const IDS_TASK_MANAGER_SUBFRAME_INCOGNITO_PREFIX: i32 = 5113;
pub const IDS_TASK_MANAGER_ARC_PREFIX: i32 = 5114;
pub const IDS_TASK_MANAGER_ARC_PREFIX_BACKGROUND_SERVICE: i32 = 5115;
pub const IDS_TASK_MANAGER_ARC_PREFIX_RECEIVER: i32 = 5116;
pub const IDS_TASK_MANAGER_ARC_SYSTEM: i32 = 5117;
pub const IDS_TASK_MANAGER_LINUX_VM_PREFIX: i32 = 5118;
pub const IDS_UTILITY_PROCESS_FILE_UTILITY_NAME: i32 = 5120;
pub const IDS_UTILITY_PROCESS_PROFILE_IMPORTER_NAME: i32 = 5121;
pub const IDS_UTILITY_PROCESS_WIFI_CREDENTIALS_GETTER_NAME: i32 = 5122;
pub const IDS_UTILITY_PROCESS_IMAGE_WRITER_NAME: i32 = 5123;
pub const IDS_UTILITY_PROCESS_MEDIA_GALLERY_UTILITY_NAME: i32 = 5124;
pub const IDS_UTILITY_PROCESS_NOOP_SERVICE_NAME: i32 = 5125;
pub const IDS_THEME_INSTALL_INFOBAR_LABEL: i32 = 5126;
pub const IDS_THEME_INSTALL_INFOBAR_UNDO_BUTTON: i32 = 5127;
pub const IDS_CRITICAL_NOTIFICATION_RESTART: i32 = 5128;
pub const IDS_EXTENSION_DISABLED_ERROR_LABEL: i32 = 5129;
pub const IDS_EXTENSION_IS_BLACKLISTED: i32 = 5130;
pub const IDS_EXTENSION_DISABLED_REMOTE_INSTALL_ERROR_TITLE: i32 = 5131;
pub const IDS_EXTENSION_DISABLED_ERROR_TITLE: i32 = 5132;
pub const IDS_EXTENSION_BLOCKED_ACTION_BUBBLE_HEADING: i32 = 5133;
pub const IDS_EXTENSION_BLOCKED_ACTION_BUBBLE_OK_BUTTON: i32 = 5134;
pub const IDS_APP_UNINSTALL_PROMPT_TITLE: i32 = 5135;
pub const IDS_NON_PLATFORM_APP_UNINSTALL_PROMPT_HEADING: i32 = 5136;
pub const IDS_ARC_APP_UNINSTALL_PROMPT_DATA_REMOVAL_WARNING: i32 = 5137;
pub const IDS_EXTENSION_UNINSTALL_PROMPT_TITLE: i32 = 5138;
pub const IDS_EXTENSION_CONFIRM_PERMISSIONS: i32 = 5139;
pub const IDS_EXTENSION_DELEGATED_INSTALL_PROMPT_TITLE: i32 = 5140;
pub const IDS_EXTENSION_INSTALL_PROMPT_TITLE: i32 = 5141;
pub const IDS_EXTENSION_UNINSTALL_PROMPT_HEADING: i32 = 5142;
pub const IDS_EXTENSION_PROGRAMMATIC_UNINSTALL_PROMPT_HEADING: i32 = 5143;
pub const IDS_EXTENSION_RE_ENABLE_PROMPT_TITLE: i32 = 5144;
pub const IDS_EXTENSION_PERMISSIONS_PROMPT_TITLE: i32 = 5145;
pub const IDS_EXTENSION_POST_INSTALL_PERMISSIONS_PROMPT_TITLE: i32 = 5146;
pub const IDS_EXTENSION_REMOTE_INSTALL_PROMPT_TITLE: i32 = 5147;
pub const IDS_EXTENSION_REPAIR_PROMPT_TITLE: i32 = 5148;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_TITLE_APP: i32 = 5149;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_TITLE_EXTENSION: i32 = 5150;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_TITLE_THEME: i32 = 5151;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_ACCEPT_BUTTON_EXTENSION: i32 = 5152;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_ACCEPT_BUTTON_APP: i32 = 5153;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_ACCEPT_BUTTON_THEME: i32 = 5154;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_ABORT_BUTTON: i32 = 5155;
pub const IDS_EXTENSION_ALERT_TITLE: i32 = 5156;
pub const IDS_EXTENSION_ALERT_ITEM_EXTERNAL: i32 = 5157;
pub const IDS_EXTENSION_ALERT_ITEM_BLACKLISTED: i32 = 5158;
pub const IDS_APP_ALERT_ITEM_EXTERNAL: i32 = 5159;
pub const IDS_APP_ALERT_ITEM_BLACKLISTED: i32 = 5160;
pub const IDS_EXTENSION_ALERT_ITEM_OK: i32 = 5161;
pub const IDS_EXTENSION_ALERT_ITEM_DETAILS: i32 = 5162;
pub const IDS_EXTENSION_PROMPT_APP_CONNECT_FROM_INCOGNITO: i32 = 5163;
pub const IDS_EXTENSION_PROMPT_EXTENSION_CONNECT_FROM_INCOGNITO: i32 = 5164;
pub const IDS_EXTENSION_PROMPT_WILL_HAVE_ACCESS_TO: i32 = 5165;
pub const IDS_EXTENSION_PROMPT_WILL_NOW_HAVE_ACCESS_TO: i32 = 5166;
pub const IDS_EXTENSION_PROMPT_WANTS_ACCESS_TO: i32 = 5167;
pub const IDS_EXTENSION_PROMPT_CAN_ACCESS: i32 = 5168;
pub const IDS_EXTENSION_NO_SPECIAL_PERMISSIONS: i32 = 5169;
pub const IDS_EXTENSION_PERMISSION_LINE: i32 = 5170;
pub const IDS_EXTENSION_RATING_COUNT: i32 = 5171;
pub const IDS_EXTENSION_PROMPT_RATING_ACCESSIBLE_TEXT: i32 = 5172;
pub const IDS_EXTENSION_PROMPT_NO_RATINGS_ACCESSIBLE_TEXT: i32 = 5173;
pub const IDS_EXTENSION_USER_COUNT: i32 = 5174;
pub const IDS_EXTENSION_PROMPT_STORE_LINK: i32 = 5175;
pub const IDS_EXTENSION_PROMPT_RETAINED_FILES: i32 = 5176;
pub const IDS_EXTENSION_PROMPT_RETAINED_DEVICES: i32 = 5177;
pub const IDS_EXTENSION_PROMPT_WARNING_FULL_ACCESS: i32 = 5178;
pub const IDS_EXTENSION_PROMPT_WARNING_ALL_HOSTS: i32 = 5179;
pub const IDS_EXTENSION_PROMPT_WARNING_CURRENT_HOST: i32 = 5180;
pub const IDS_EXTENSION_PROMPT_WARNING_ALL_HOSTS_READ_ONLY: i32 = 5181;
pub const IDS_EXTENSION_PROMPT_WARNING_AUDIO_CAPTURE: i32 = 5182;
pub const IDS_EXTENSION_PROMPT_WARNING_VIDEO_CAPTURE: i32 = 5183;
pub const IDS_EXTENSION_PROMPT_WARNING_AUDIO_AND_VIDEO_CAPTURE: i32 = 5184;
pub const IDS_EXTENSION_PROMPT_WARNING_BLUETOOTH: i32 = 5185;
pub const IDS_EXTENSION_PROMPT_WARNING_BLUETOOTH_DEVICES: i32 = 5186;
pub const IDS_EXTENSION_PROMPT_WARNING_BLUETOOTH_PRIVATE: i32 = 5187;
pub const IDS_EXTENSION_PROMPT_WARNING_BLUETOOTH_SERIAL: i32 = 5188;
pub const IDS_EXTENSION_PROMPT_WARNING_BOOKMARKS: i32 = 5189;
pub const IDS_EXTENSION_PROMPT_WARNING_CLIPBOARD: i32 = 5190;
pub const IDS_EXTENSION_PROMPT_WARNING_CLIPBOARD_READWRITE: i32 = 5191;
pub const IDS_EXTENSION_PROMPT_WARNING_CLIPBOARD_WRITE: i32 = 5192;
pub const IDS_EXTENSION_PROMPT_WARNING_DEBUGGER: i32 = 5193;
pub const IDS_EXTENSION_PROMPT_WARNING_DECLARATIVE_WEB_REQUEST: i32 = 5194;
pub const IDS_EXTENSION_PROMPT_WARNING_DECLARATIVE_NET_REQUEST: i32 = 5195;
pub const IDS_EXTENSION_PROMPT_WARNING_DOCUMENT_SCAN: i32 = 5196;
pub const IDS_EXTENSION_PROMPT_WARNING_ENTERPRISE_HARDWARE_PLATFORM: i32 = 5197;
pub const IDS_EXTENSION_PROMPT_WARNING_FAVICON: i32 = 5198;
pub const IDS_EXTENSION_PROMPT_WARNING_GEOLOCATION: i32 = 5199;
pub const IDS_EXTENSION_PROMPT_WARNING_HISTORY_READ: i32 = 5200;
pub const IDS_EXTENSION_PROMPT_WARNING_HISTORY_READ_AND_SESSIONS: i32 = 5201;
pub const IDS_EXTENSION_PROMPT_WARNING_HISTORY_WRITE: i32 = 5202;
pub const IDS_EXTENSION_PROMPT_WARNING_HISTORY_WRITE_AND_SESSIONS: i32 = 5203;
pub const IDS_EXTENSION_PROMPT_WARNING_HOME_PAGE_SETTING_OVERRIDE: i32 = 5204;
pub const IDS_EXTENSION_PROMPT_WARNING_1_HOST: i32 = 5205;
pub const IDS_EXTENSION_PROMPT_WARNING_1_HOST_READ_ONLY: i32 = 5206;
pub const IDS_EXTENSION_PROMPT_WARNING_2_HOSTS: i32 = 5207;
pub const IDS_EXTENSION_PROMPT_WARNING_2_HOSTS_READ_ONLY: i32 = 5208;
pub const IDS_EXTENSION_PROMPT_WARNING_3_HOSTS: i32 = 5209;
pub const IDS_EXTENSION_PROMPT_WARNING_3_HOSTS_READ_ONLY: i32 = 5210;
pub const IDS_EXTENSION_PROMPT_WARNING_HOSTS_LIST: i32 = 5211;
pub const IDS_EXTENSION_PROMPT_WARNING_HOSTS_LIST_READ_ONLY: i32 = 5212;
pub const IDS_EXTENSION_PROMPT_WARNING_HOST_AND_SUBDOMAIN: i32 = 5213;
pub const IDS_EXTENSION_PROMPT_WARNING_HOST_AND_SUBDOMAIN_LIST: i32 = 5214;
pub const IDS_EXTENSION_PROMPT_WARNING_INPUT: i32 = 5215;
pub const IDS_EXTENSION_PROMPT_WARNING_LOGIN: i32 = 5216;
pub const IDS_EXTENSION_PROMPT_WARNING_LOGIN_SCREEN_UI: i32 = 5217;
pub const IDS_EXTENSION_PROMPT_WARNING_MANAGEMENT: i32 = 5218;
pub const IDS_EXTENSION_PROMPT_WARNING_MDNS: i32 = 5219;
pub const IDS_EXTENSION_PROMPT_WARNING_NETWORK_STATE: i32 = 5220;
pub const IDS_EXTENSION_PROMPT_WARNING_NETWORKING_CONFIG: i32 = 5221;
pub const IDS_EXTENSION_PROMPT_WARNING_NETWORKING_PRIVATE: i32 = 5222;
pub const IDS_EXTENSION_PROMPT_WARNING_SEARCH_SETTINGS_OVERRIDE: i32 = 5223;
pub const IDS_EXTENSION_PROMPT_WARNING_SERIAL: i32 = 5224;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_ANY_HOST: i32 = 5225;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_HOSTS_IN_DOMAIN: i32 = 5226;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_HOSTS_IN_DOMAINS: i32 = 5227;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_SPECIFIC_HOST: i32 = 5228;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_SPECIFIC_HOSTS: i32 = 5229;
pub const IDS_EXTENSION_PROMPT_WARNING_START_PAGE_SETTING_OVERRIDE: i32 = 5230;
pub const IDS_EXTENSION_PROMPT_WARNING_SYSTEM_STORAGE: i32 = 5231;
pub const IDS_EXTENSION_PROMPT_WARNING_TOPSITES: i32 = 5232;
pub const IDS_EXTENSION_PROMPT_WARNING_TTS_ENGINE: i32 = 5233;
pub const IDS_EXTENSION_PROMPT_WARNING_U2F_DEVICES: i32 = 5234;
pub const IDS_EXTENSION_PROMPT_WARNING_NOTIFICATIONS: i32 = 5235;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE: i32 = 5236;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_LIST: i32 = 5237;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_LIST_ITEM_UNKNOWN_PRODUCT: i32 = 5238;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_LIST_ITEM_UNKNOWN_VENDOR: i32 = 5239;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_UNKNOWN_PRODUCT: i32 = 5240;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_UNKNOWN_VENDOR: i32 = 5241;
pub const IDS_EXTENSION_PROMPT_WARNING_VPN: i32 = 5242;
pub const IDS_EXTENSION_PROMPT_WARNING_WEB_CONNECTABLE: i32 = 5243;
pub const IDS_EXTENSION_PROMPT_WARNING_CONTENT_SETTINGS: i32 = 5244;
pub const IDS_EXTENSION_PROMPT_WARNING_PRIVACY: i32 = 5245;
pub const IDS_EXTENSION_PROMPT_WARNING_SIGNED_IN_DEVICES: i32 = 5246;
pub const IDS_EXTENSION_PROMPT_WARNING_DOWNLOADS: i32 = 5247;
pub const IDS_EXTENSION_PROMPT_WARNING_DOWNLOADS_OPEN: i32 = 5248;
pub const IDS_EXTENSION_PROMPT_WARNING_IDENTITY_EMAIL: i32 = 5249;
pub const IDS_EXTENSION_PROMPT_WARNING_WALLPAPER: i32 = 5250;
pub const IDS_EXTENSION_PROMPT_WARNING_FILE_SYSTEM_DIRECTORY: i32 = 5251;
pub const IDS_EXTENSION_PROMPT_WARNING_FILE_SYSTEM_WRITE_DIRECTORY: i32 = 5252;
pub const IDS_EXTENSION_PROMPT_WARNING_MEDIA_GALLERIES_READ: i32 = 5253;
pub const IDS_EXTENSION_PROMPT_WARNING_MEDIA_GALLERIES_READ_WRITE: i32 = 5254;
pub const IDS_EXTENSION_PROMPT_WARNING_MEDIA_GALLERIES_READ_DELETE: i32 = 5255;
pub const IDS_EXTENSION_PROMPT_WARNING_MEDIA_GALLERIES_READ_WRITE_DELETE: i32 = 5256;
pub const IDS_EXTENSION_PROMPT_WARNING_SYNCFILESYSTEM: i32 = 5257;
pub const IDS_EXTENSION_PROMPT_WARNING_MUSIC_MANAGER_PRIVATE: i32 = 5258;
pub const IDS_EXTENSION_PROMPT_WARNING_NATIVE_MESSAGING: i32 = 5259;
pub const IDS_EXTENSION_PROMPT_WARNING_SCREENLOCK_PRIVATE: i32 = 5260;
pub const IDS_EXTENSION_PROMPT_WARNING_OVERRIDE_BOOKMARKS_UI: i32 = 5261;
pub const IDS_EXTENSION_PROMPT_WARNING_ACTIVITY_LOG_PRIVATE: i32 = 5262;
pub const IDS_EXTENSION_PROMPT_WARNING_DESKTOP_CAPTURE: i32 = 5263;
pub const IDS_EXTENSION_PROMPT_WARNING_ACCESSIBILITY_FEATURES_MODIFY: i32 = 5264;
pub const IDS_EXTENSION_PROMPT_WARNING_ACCESSIBILITY_FEATURES_READ: i32 = 5265;
pub const IDS_EXTENSION_PROMPT_WARNING_ACCESSIBILITY_FEATURES_READ_MODIFY: i32 = 5266;
pub const IDS_EXTENSION_PROMPT_WARNING_PLATFORMKEYS: i32 = 5267;
pub const IDS_EXTENSION_PROMPT_WARNING_CERTIFICATEPROVIDER: i32 = 5268;
pub const IDS_EXTENSION_PROMPT_WARNING_SETTINGS_PRIVATE: i32 = 5269;
pub const IDS_EXTENSION_PROMPT_WARNING_AUTOFILL_PRIVATE: i32 = 5270;
pub const IDS_EXTENSION_PROMPT_WARNING_PASSWORDS_PRIVATE: i32 = 5271;
pub const IDS_EXTENSION_PROMPT_WARNING_USERS_PRIVATE: i32 = 5272;
pub const IDS_EXTENSION_PROMPT_WARNING_DISPLAY_SOURCE: i32 = 5273;
pub const IDS_EXTENSION_PROMPT_WARNING_NEW_TAB_PAGE_OVERRIDE: i32 = 5274;
pub const IDS_EXTENSION_PROMPT_WARNING_TRANSIENT_BACKGROUND: i32 = 5275;
pub const IDS_EXTENSION_CANT_DOWNGRADE_VERSION: i32 = 5276;
pub const IDS_APP_CANT_DOWNGRADE_VERSION: i32 = 5277;
pub const IDS_EXTENSION_MOVE_DIRECTORY_TO_PROFILE_FAILED: i32 = 5280;
pub const IDS_EXTENSION_INSTALL_NOT_ENABLED: i32 = 5281;
pub const IDS_EXTENSION_INSTALL_INCORRECT_APP_CONTENT_TYPE: i32 = 5282;
pub const IDS_EXTENSION_INSTALL_INCORRECT_INSTALL_HOST: i32 = 5283;
pub const IDS_EXTENSION_INSTALL_UNEXPECTED_ID: i32 = 5284;
pub const IDS_EXTENSION_INSTALL_DISALLOWED_ON_SITE: i32 = 5285;
pub const IDS_EXTENSION_INSTALL_UNEXPECTED_VERSION: i32 = 5286;
pub const IDS_EXTENSION_INSTALL_DEPENDENCY_OLD_VERSION: i32 = 5287;
pub const IDS_EXTENSION_INSTALL_DEPENDENCY_NOT_SHARED_MODULE: i32 = 5288;
pub const IDS_EXTENSION_INSTALL_DEPENDENCY_NOT_WHITELISTED: i32 = 5289;
pub const IDS_EXTENSION_INSTALL_GALLERY_ONLY: i32 = 5290;
pub const IDS_EXTENSION_INSTALL_KIOSK_MODE_ONLY: i32 = 5291;
pub const IDS_EXTENSION_OVERLAPPING_WEB_EXTENT: i32 = 5292;
pub const IDS_EXTENSION_INVALID_IMAGE_PATH: i32 = 5293;
pub const IDS_EXTENSION_LOAD_ICON_FOR_PAGE_ACTION_FAILED: i32 = 5294;
pub const IDS_EXTENSION_LOAD_ICON_FOR_BROWSER_ACTION_FAILED: i32 = 5295;
pub const IDS_EXTENSION_INSTALLED_PAGE_ACTION_INFO: i32 = 5299;
pub const IDS_EXTENSION_INSTALLED_PAGE_ACTION_INFO_WITH_SHORTCUT: i32 = 5300;
pub const IDS_EXTENSION_INSTALLED_BROWSER_ACTION_INFO: i32 = 5301;
pub const IDS_EXTENSION_INSTALLED_BROWSER_ACTION_INFO_WITH_SHORTCUT: i32 = 5302;
pub const IDS_EXTENSION_INSTALLED_OMNIBOX_KEYWORD_INFO: i32 = 5303;
pub const IDS_EXTENSION_INSTALLED_MANAGE_INFO: i32 = 5304;
pub const IDS_EXTENSION_INSTALLED_MANAGE_SHORTCUTS: i32 = 5305;
pub const IDS_EXTENSION_INSTALLED_SYNC_PROMO_NEW: i32 = 5306;
pub const IDS_EXTENSION_INSTALLED_DICE_PROMO_SIGNIN_MESSAGE: i32 = 5307;
pub const IDS_EXTENSION_INSTALLED_DICE_PROMO_SYNC_MESSAGE: i32 = 5308;
pub const IDS_EXTENSIONS_DIRECTORY_CONFIRMATION_DIALOG_TITLE: i32 = 5309;
pub const IDS_EXTENSIONS_DIRECTORY_CONFIRMATION_DIALOG_MESSAGE_READ_ONLY: i32 = 5310;
pub const IDS_EXTENSIONS_DIRECTORY_CONFIRMATION_DIALOG_MESSAGE_WRITABLE: i32 = 5311;
pub const IDS_EXTENSIONS_LOAD_ERROR_ALERT_HEADING: i32 = 5312;
pub const IDS_EXTENSIONS_LOAD_ERROR_MESSAGE: i32 = 5313;
pub const IDS_EXTENSIONS_WANTS_ACCESS_TO_SITE: i32 = 5314;
pub const IDS_EXTENSIONS_HAS_ACCESS_TO_SITE: i32 = 5315;
pub const IDS_EXTENSIONS_CONTEXT_MENU_CANT_ACCESS_PAGE: i32 = 5316;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS: i32 = 5317;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS_RUN_ON_CLICK: i32 = 5318;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS_RUN_ON_SITE: i32 = 5319;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS_RUN_ON_ALL_SITES: i32 = 5320;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS_LEARN_MORE: i32 = 5321;
pub const IDS_EXTENSIONS_OPTIONS_MENU_ITEM: i32 = 5322;
pub const IDS_EXTENSIONS_INSTALLED_BY_ADMIN: i32 = 5323;
pub const IDS_EXTENSIONS_DISABLE: i32 = 5324;
pub const IDS_EXTENSIONS_HIDE_BUTTON: i32 = 5325;
pub const IDS_EXTENSIONS_KEEP_BUTTON_IN_TOOLBAR: i32 = 5326;
pub const IDS_EXTENSIONS_SHOW_BUTTON_IN_TOOLBAR: i32 = 5327;
pub const IDS_EXTENSIONS_PIN_TO_TOOLBAR: i32 = 5328;
pub const IDS_EXTENSIONS_UNPIN_FROM_TOOLBAR: i32 = 5329;
pub const IDS_MANAGE_EXTENSION: i32 = 5330;
pub const IDS_EXTENSION_ACTION_INSPECT_POPUP: i32 = 5331;
pub const IDS_EXTENSIONS_LOCKED_SUPERVISED_USER: i32 = 5332;
pub const IDS_EXTENSIONS_INSTALLED_BY_CHILD_CUSTODIAN: i32 = 5333;
pub const IDS_EXTENSIONS_INSTALLED_BY_SUPERVISED_USER_CUSTODIAN: i32 = 5334;
pub const IDS_EXTENSION_LOAD_FROM_DIRECTORY: i32 = 5335;
pub const IDS_EXTENSION_COMMANDS_GENERIC_ACTIVATE: i32 = 5336;
pub const IDS_EXTENSION_PACK_DIALOG_HEADING: i32 = 5337;
pub const IDS_EXTENSION_PACK_DIALOG_SELECT_KEY: i32 = 5338;
pub const IDS_EXTENSION_PACK_DIALOG_KEY_FILE_TYPE_DESCRIPTION: i32 = 5339;
pub const IDS_EXTENSION_PACK_DIALOG_ERROR_ROOT_REQUIRED: i32 = 5340;
pub const IDS_EXTENSION_PACK_DIALOG_ERROR_ROOT_INVALID: i32 = 5341;
pub const IDS_EXTENSION_PACK_DIALOG_ERROR_KEY_INVALID: i32 = 5342;
pub const IDS_EXTENSION_PACK_DIALOG_SUCCESS_BODY_NEW: i32 = 5343;
pub const IDS_EXTENSION_PACK_DIALOG_SUCCESS_BODY_UPDATE: i32 = 5344;
pub const IDS_EXTENSION_PROMPT_INSTALL_BUTTON: i32 = 5345;
pub const IDS_EXTENSION_INSTALL_PROMPT_ACCEPT_BUTTON_EXTENSION: i32 = 5346;
pub const IDS_EXTENSION_INSTALL_PROMPT_ACCEPT_BUTTON_APP: i32 = 5347;
pub const IDS_EXTENSION_INSTALL_PROMPT_ACCEPT_BUTTON_THEME: i32 = 5348;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_BUTTON: i32 = 5349;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_REPORT_ABUSE: i32 = 5350;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_REPORT_ABUSE_FROM_EXTENSION: i32 = 5351;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_TITLE: i32 = 5352;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_APP_BUTTON: i32 = 5353;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_TRIGGERED_BY_EXTENSION: i32 = 5354;
pub const IDS_EXTENSION_PROMPT_RE_ENABLE_BUTTON: i32 = 5355;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_BUTTON: i32 = 5356;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_ACCEPT_BUTTON: i32 = 5357;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_ABORT_BUTTON: i32 = 5358;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_CLEAR_RETAINED_FILES_BUTTON: i32 = 5359;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_CLEAR_RETAINED_DEVICES_BUTTON: i32 = 5360;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_CLEAR_RETAINED_FILES_AND_DEVICES_BUTTON: i32 = 5361;
pub const IDS_EXTENSION_PROMPT_REMOTE_INSTALL_BUTTON_EXTENSION: i32 = 5362;
pub const IDS_EXTENSION_PROMPT_REMOTE_INSTALL_BUTTON_APP: i32 = 5363;
pub const IDS_EXTENSION_PROMPT_REPAIR_BUTTON_EXTENSION: i32 = 5364;
pub const IDS_EXTENSION_PROMPT_REPAIR_BUTTON_APP: i32 = 5365;
pub const IDS_EXTENSION_WEB_STORE_TITLE: i32 = 5366;
pub const IDS_EXTENSION_WEB_STORE_TITLE_SHORT: i32 = 223;
pub const IDS_EXTENSIONS_SHOW_DETAILS: i32 = 5367;
pub const IDS_EXTENSIONS_HIDE_DETAILS: i32 = 5368;
pub const IDS_WEBSTORE_DOWNLOAD_ACCESS_DENIED: i32 = 5369;
pub const IDS_EXTENSION_WARNINGS_WRENCH_MENU_ITEM: i32 = 5370;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_EXTENSION: i32 = 5371;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_APP: i32 = 5372;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_THEME: i32 = 5373;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_BUBBLE_TITLE: i32 = 5374;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_BUBBLE_HEADING_APP: i32 = 5375;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_BUBBLE_HEADING_EXTENSION: i32 = 5376;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_BUBBLE_HEADING_THEME: i32 = 5377;
pub const IDS_EXTENSIONS_UNSUPPORTED_DISABLED_TITLE: i32 = 5378;
pub const IDS_EXTENSIONS_DISABLED_AND_N_MORE: i32 = 5379;
pub const IDS_EXTENSIONS_UNSUPPORTED_DISABLED_BUTTON: i32 = 5380;
pub const IDS_EXTENSIONS_ADDED_WITHOUT_KNOWLEDGE: i32 = 5381;
pub const IDS_EXTENSIONS_DISABLE_DEVELOPER_MODE_TITLE: i32 = 5382;
pub const IDS_EXTENSIONS_DISABLE_DEVELOPER_MODE_BODY: i32 = 5383;
pub const IDS_EXTENSIONS_MENU_TITLE: i32 = 5384;
pub const IDS_EXTENSIONS_MENU_CONTEXT_MENU_TOOLTIP: i32 = 5385;
pub const IDS_EXTENSIONS_MENU_ACCESSING_SITE_DATA: i32 = 5386;
pub const IDS_EXTENSIONS_MENU_WANTS_TO_ACCESS_SITE_DATA: i32 = 5387;
pub const IDS_EXTENSIONS_MENU_CANT_ACCESS_SITE_DATA: i32 = 5388;
pub const IDS_EXTENSIONS_SETTINGS_API_TITLE_HOME_PAGE_BUBBLE: i32 = 5389;
pub const IDS_EXTENSIONS_SETTINGS_API_TITLE_STARTUP_PAGES_BUBBLE: i32 = 5390;
pub const IDS_EXTENSIONS_SETTINGS_API_TITLE_SEARCH_ENGINE_BUBBLE: i32 = 5391;
pub const IDS_EXTENSIONS_NTP_CONTROLLED_TITLE_HOME_PAGE_BUBBLE: i32 = 5392;
pub const IDS_EXTENSIONS_PROXY_CONTROLLED_TITLE_HOME_PAGE_BUBBLE: i32 = 5393;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_SEARCH_ENGINE_SPECIFIC: i32 = 5394;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_SEARCH_ENGINE: i32 = 5395;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_HOME_PAGE_SPECIFIC: i32 = 5396;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_HOME_PAGE: i32 = 5397;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_SEARCH_ENGINE: i32 = 5398;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_HOME_PAGE: i32 = 5399;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_HOME_AND_SEARCH: i32 = 5400;
pub const IDS_EXTENSIONS_NTP_CONTROLLED_FIRST_LINE: i32 = 5401;
pub const IDS_EXTENSIONS_PROXY_CONTROLLED_FIRST_LINE: i32 = 5402;
pub const IDS_EXTENSIONS_PROXY_CONTROLLED_FIRST_LINE_EXTENSION_SPECIFIC: i32 = 5403;
pub const IDS_EXTENSIONS_SETTINGS_API_THIRD_LINE_CONFIRMATION: i32 = 5404;
pub const IDS_EXTENSION_CONTROLLED_RESTORE_SETTINGS: i32 = 5405;
pub const IDS_EXTENSION_CONTROLLED_KEEP_CHANGES: i32 = 5406;
pub const IDS_HOSTED_APPMENU_TOOLTIP: i32 = 5407;
pub const IDS_COMPONENTS_TITLE: i32 = 5408;
pub const IDS_COMPONENTS_VERSION: i32 = 5409;
pub const IDS_COMPONENTS_NONE_INSTALLED: i32 = 5410;
pub const IDS_COMPONENTS_NO_COMPONENTS: i32 = 5411;
pub const IDS_COMPONENTS_CHECK_FOR_UPDATE: i32 = 5412;
pub const IDS_COMPONENTS_STATUS_LABEL: i32 = 5413;
pub const IDS_COMPONENTS_CHECKING_LABEL: i32 = 5414;
pub const IDS_COMPONENTS_SVC_STATUS_NEW: i32 = 5415;
pub const IDS_COMPONENTS_SVC_STATUS_CHECKING: i32 = 5416;
pub const IDS_COMPONENTS_SVC_STATUS_UPDATE: i32 = 5417;
pub const IDS_COMPONENTS_SVC_STATUS_DNL_DIFF: i32 = 5418;
pub const IDS_COMPONENTS_SVC_STATUS_DNL: i32 = 5419;
pub const IDS_COMPONENTS_SVC_STATUS_DOWNLOADED: i32 = 5420;
pub const IDS_COMPONENTS_SVC_STATUS_UPDT_DIFF: i32 = 5421;
pub const IDS_COMPONENTS_SVC_STATUS_UPDATING: i32 = 5422;
pub const IDS_COMPONENTS_SVC_STATUS_UPDATED: i32 = 5423;
pub const IDS_COMPONENTS_SVC_STATUS_UPTODATE: i32 = 5424;
pub const IDS_COMPONENTS_SVC_STATUS_UPDATE_ERROR: i32 = 5425;
pub const IDS_COMPONENTS_UNKNOWN: i32 = 5426;
pub const IDS_COMPONENTS_EVT_STATUS_STARTED: i32 = 5427;
pub const IDS_COMPONENTS_EVT_STATUS_SLEEPING: i32 = 5428;
pub const IDS_COMPONENTS_EVT_STATUS_FOUND: i32 = 5429;
pub const IDS_COMPONENTS_EVT_STATUS_READY: i32 = 5430;
pub const IDS_COMPONENTS_EVT_STATUS_UPDATED: i32 = 5431;
pub const IDS_COMPONENTS_EVT_STATUS_NOTUPDATED: i32 = 5432;
pub const IDS_COMPONENTS_EVT_STATUS_UPDATE_ERROR: i32 = 5433;
pub const IDS_COMPONENTS_EVT_STATUS_DOWNLOADING: i32 = 5434;
pub const IDS_PLUGINS_DISABLED_PLUGIN: i32 = 5435;
pub const IDS_PASSWORD_MANAGER_ACCOUNT_CHOOSER_TITLE: i32 = 5436;
pub const IDS_PASSWORD_MANAGER_CONFIRM_SAVED_TITLE: i32 = 5437;
pub const IDS_PASSWORD_GENERATION_SUGGESTION: i32 = 5438;
pub const IDS_PASSWORD_GENERATION_EDITING_SUGGESTION: i32 = 5439;
pub const IDS_SAVE_PASSWORD: i32 = 5440;
pub const IDS_SAVE_ACCOUNT: i32 = 5441;
pub const IDS_UPDATE_PASSWORD: i32 = 5442;
pub const IDS_SAVE_PASSWORD_DIFFERENT_DOMAINS_TITLE: i32 = 5443;
pub const IDS_UPDATE_PASSWORD_DIFFERENT_DOMAINS_TITLE: i32 = 5444;
pub const IDS_SAVE_PASSWORD_FOOTER: i32 = 5445;
pub const IDS_PASSWORD_MANAGER_ACCOUNT_CHOOSER_SIGN_IN: i32 = 5446;
pub const IDS_PASSWORD_MANAGER_MANAGE_PASSWORDS_BUTTON: i32 = 5447;
pub const IDS_PASSWORD_MANAGER_SIGNIN_PROMO_SIGN_IN: i32 = 5448;
pub const IDS_PASSWORD_MANAGER_SIGNIN_PROMO_LABEL: i32 = 5449;
pub const IDS_PASSWORD_MANAGER_DICE_PROMO_SIGNIN_MESSAGE: i32 = 5450;
pub const IDS_PASSWORD_MANAGER_DICE_PROMO_SYNC_MESSAGE: i32 = 5451;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TITLE: i32 = 5452;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TITLE_V2: i32 = 5453;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TITLE_V3: i32 = 5454;
pub const IDS_DESKTOP_TO_IOS_PROMO_SEND_TO_PHONE: i32 = 5455;
pub const IDS_DESKTOP_TO_IOS_PROMO_NO_THANKS: i32 = 5456;
pub const IDS_PREVIEWS_INFOBAR_TIMESTAMP_MINUTES: i32 = 5457;
pub const IDS_PREVIEWS_INFOBAR_TIMESTAMP_ONE_HOUR: i32 = 5458;
pub const IDS_PREVIEWS_INFOBAR_TIMESTAMP_HOURS: i32 = 5459;
pub const IDS_PREVIEWS_INFOBAR_TIMESTAMP_UPDATED_NOW: i32 = 5460;
pub const IDS_LITE_PAGE_PREVIEWS_MESSAGE: i32 = 5461;
pub const IDS_LITE_PAGE_PREVIEWS_SETTINGS_LINK: i32 = 5462;
pub const IDS_WEBRTC_LOGS_TITLE: i32 = 5463;
pub const IDS_WEBRTC_TEXT_LOGS_LOG_COUNT_BANNER_FORMAT: i32 = 5464;
pub const IDS_WEBRTC_EVENT_LOGS_LOG_COUNT_BANNER_FORMAT: i32 = 5465;
pub const IDS_WEBRTC_LOGS_LOG_HEADER_FORMAT: i32 = 5466;
pub const IDS_WEBRTC_LOGS_LOG_LOCAL_FILE_LABEL_FORMAT: i32 = 5467;
pub const IDS_WEBRTC_LOGS_NO_LOCAL_LOG_FILE_MESSAGE: i32 = 5468;
pub const IDS_WEBRTC_LOGS_LOG_UPLOAD_TIME_FORMAT: i32 = 5469;
pub const IDS_WEBRTC_LOGS_LOG_FAILED_UPLOAD_TIME_FORMAT: i32 = 5470;
pub const IDS_WEBRTC_LOGS_LOG_REPORT_ID_FORMAT: i32 = 5471;
pub const IDS_WEBRTC_LOGS_BUG_LINK_LABEL: i32 = 5472;
pub const IDS_WEBRTC_LOGS_LOG_PENDING_MESSAGE: i32 = 5473;
pub const IDS_WEBRTC_LOGS_LOG_ACTIVELY_UPLOADED_MESSAGE: i32 = 5474;
pub const IDS_WEBRTC_LOGS_LOG_NOT_UPLOADED_MESSAGE: i32 = 5475;
pub const IDS_WEBRTC_LOGS_EVENT_LOG_LOCAL_LOG_ID: i32 = 5476;
pub const IDS_WEBRTC_LOGS_NO_TEXT_LOGS_MESSAGE: i32 = 5477;
pub const IDS_WEBRTC_LOGS_NO_EVENT_LOGS_MESSAGE: i32 = 5478;
pub const IDS_PLUGIN_HIDE: i32 = 5479;
pub const IDS_PLUGIN_UPDATE: i32 = 5480;
pub const IDS_PLUGIN_BLOCKED: i32 = 5481;
pub const IDS_PLUGIN_BLOCKED_BY_POLICY: i32 = 5482;
pub const IDS_PLUGIN_BLOCKED_NO_LOADING: i32 = 5483;
pub const IDS_PLUGIN_OUTDATED: i32 = 5485;
pub const IDS_PLUGIN_NOT_AUTHORIZED: i32 = 5486;
pub const IDS_PLUGIN_DOWNLOADING: i32 = 5487;
pub const IDS_PLUGIN_DOWNLOAD_ERROR: i32 = 5488;
pub const IDS_PLUGIN_DOWNLOAD_ERROR_SHORT: i32 = 5489;
pub const IDS_PLUGIN_UPDATING: i32 = 5490;
pub const IDS_PLUGIN_DISABLED: i32 = 5491;
pub const IDS_PLUGIN_PREFER_HTML_BY_DEFAULT: i32 = 5492;
pub const IDS_SESSION_CRASHED_BUBBLE_TITLE: i32 = 5493;
pub const IDS_SESSION_CRASHED_BUBBLE_UMA_LINK_TEXT: i32 = 5494;
pub const IDS_BAD_FLAGS_WARNING_MESSAGE: i32 = 5495;
pub const IDS_BAD_FEATURES_WARNING_MESSAGE: i32 = 5496;
pub const IDS_PEPPER_BROKER_MESSAGE: i32 = 5497;
pub const IDS_PEPPER_BROKER_ALLOW_BUTTON: i32 = 5498;
pub const IDS_PEPPER_BROKER_DENY_BUTTON: i32 = 5499;
pub const IDS_BLOCKED_PPAPI_BROKER_TITLE: i32 = 5500;
pub const IDS_ALLOWED_PPAPI_BROKER_TITLE: i32 = 5501;
pub const IDS_BLOCKED_PPAPI_BROKER_MESSAGE: i32 = 5502;
pub const IDS_ALLOWED_PPAPI_BROKER_MESSAGE: i32 = 5503;
pub const IDS_BLOCKED_PPAPI_BROKER_UNBLOCK: i32 = 5504;
pub const IDS_BLOCKED_PPAPI_BROKER_NO_ACTION: i32 = 5505;
pub const IDS_ALLOWED_PPAPI_BROKER_NO_ACTION: i32 = 5506;
pub const IDS_ALLOWED_PPAPI_BROKER_BLOCK: i32 = 5507;
pub const IDS_BLOCKED_DISPLAYING_INSECURE_CONTENT_TITLE: i32 = 5508;
pub const IDS_BLOCKED_DISPLAYING_INSECURE_CONTENT: i32 = 5509;
pub const IDS_ALLOW_INSECURE_CONTENT_BUTTON: i32 = 5510;
pub const IDS_ADD_TO_SHELF_INFOBAR_TITLE: i32 = 5511;
pub const IDS_ADD_TO_SHELF_INFOBAR_ADD_BUTTON: i32 = 5512;
pub const IDS_ABOUT_SYS_TITLE: i32 = 5513;
pub const IDS_ABOUT_SYS_DESC: i32 = 5514;
pub const IDS_ABOUT_SYS_TABLE_TITLE: i32 = 5515;
pub const IDS_ABOUT_SYS_LOG_FILE_TABLE_TITLE: i32 = 5516;
pub const IDS_ABOUT_SYS_EXPAND_ALL: i32 = 5517;
pub const IDS_ABOUT_SYS_COLLAPSE_ALL: i32 = 5518;
pub const IDS_ABOUT_SYS_EXPAND: i32 = 5519;
pub const IDS_ABOUT_SYS_COLLAPSE: i32 = 5520;
pub const IDS_ABOUT_SYS_PARSE_ERROR: i32 = 5521;
pub const IDS_ABOUT_BROWSER_SWITCH_TITLE: i32 = 5522;
pub const IDS_ABOUT_BROWSER_SWITCH_OPENING_TITLE_UNKNOWN_BROWSER: i32 = 5523;
pub const IDS_ABOUT_BROWSER_SWITCH_OPENING_TITLE_KNOWN_BROWSER: i32 = 5524;
pub const IDS_ABOUT_BROWSER_SWITCH_ERROR_TITLE_UNKNOWN_BROWSER: i32 = 5525;
pub const IDS_ABOUT_BROWSER_SWITCH_ERROR_TITLE_KNOWN_BROWSER: i32 = 5526;
pub const IDS_ABOUT_BROWSER_SWITCH_COUNTDOWN_TITLE_UNKNOWN_BROWSER: i32 = 5527;
pub const IDS_ABOUT_BROWSER_SWITCH_COUNTDOWN_TITLE_KNOWN_BROWSER: i32 = 5528;
pub const IDS_ABOUT_BROWSER_SWITCH_GENERIC_ERROR_UNKNOWN_BROWSER: i32 = 5529;
pub const IDS_ABOUT_BROWSER_SWITCH_GENERIC_ERROR_KNOWN_BROWSER: i32 = 5530;
pub const IDS_ABOUT_BROWSER_SWITCH_PROTOCOL_ERROR: i32 = 5531;
pub const IDS_NACL_APP_MISSING_ARCH_MESSAGE: i32 = 5532;
pub const IDS_ABOUT_BOX_ERROR_DURING_UPDATE_CHECK: i32 = 5533;
pub const IDS_ABOUT_BOX_ERROR_UPDATE_CHECK_FAILED: i32 = 5534;
pub const IDS_ABOUT_BOX_EXTERNAL_UPDATE_IS_RUNNING: i32 = 5535;
pub const IDS_ABOUT_BOX_GOOGLE_UPDATE_ERROR: i32 = 5536;
pub const IDS_OMNIBOX_PLACEHOLDER_TEXT: i32 = 216;
pub const IDS_PASTE_AND_GO: i32 = 5537;
pub const IDS_PASTE_AND_SEARCH: i32 = 5538;
pub const IDS_SHOW_URL: i32 = 5539;
pub const IDS_OMNIBOX_KEYWORD_HINT: i32 = 5540;
pub const IDS_OMNIBOX_EXTENSION_KEYWORD_HINT: i32 = 5541;
pub const IDS_OMNIBOX_KEYWORD_HINT_KEY_ACCNAME: i32 = 5542;
pub const IDS_OMNIBOX_KEYWORD_HINT_TOUCH: i32 = 5543;
pub const IDS_OMNIBOX_EXTENSION_KEYWORD_HINT_TOUCH: i32 = 5544;
pub const IDS_OMNIBOX_KEYWORD_TEXT: i32 = 5545;
pub const IDS_OMNIBOX_KEYWORD_TEXT_MD: i32 = 5546;
pub const IDS_CLICK_TO_VIEW_DOODLE: i32 = 268;
pub const IDS_OMNIBOX_CLEAR_ALL: i32 = 219;
pub const IDS_SEARCH_OR_TYPE_WEB_ADDRESS: i32 = 5547;
pub const IDS_OMNIBOX_WHY_THIS_SUGGESTION: i32 = 5548;
pub const IDS_OMNIBOX_REMOVE_SUGGESTION: i32 = 5549;
pub const IDS_OMNIBOX_REMOVE_SUGGESTION_BUBBLE_TITLE: i32 = 5550;
pub const IDS_OMNIBOX_REMOVE_SUGGESTION_BUBBLE_DESCRIPTION: i32 = 5551;
pub const IDS_GOOGLE_SEARCH_BOX_EMPTY_HINT: i32 = 5552;
pub const IDS_GOOGLE_SEARCH_BOX_EMPTY_HINT_MD: i32 = 232;
pub const IDS_GOOGLE_SEARCH_BOX_EMPTY_HINT_SHORT: i32 = 5553;
pub const IDS_NTP_CUSTOM_LINKS_ADD_SHORTCUT_TOOLTIP: i32 = 252;
pub const IDS_NTP_CUSTOM_LINKS_ADD_SHORTCUT_TITLE: i32 = 251;
pub const IDS_NTP_CUSTOM_LINKS_EDIT_SHORTCUT_TOOLTIP: i32 = 254;
pub const IDS_NTP_CUSTOM_LINKS_EDIT_SHORTCUT: i32 = 253;
pub const IDS_UPLOAD_IMAGE_FORMAT: i32 = 5554;
pub const IDS_NTP_CUSTOM_LINKS_NAME: i32 = 255;
pub const IDS_NTP_CUSTOM_LINKS_URL: i32 = 256;
pub const IDS_NTP_CUSTOM_LINKS_REMOVE: i32 = 257;
pub const IDS_NTP_CUSTOM_LINKS_CANCEL: i32 = 258;
pub const IDS_NTP_CUSTOM_LINKS_DONE: i32 = 240;
pub const IDS_NTP_CUSTOM_LINKS_INVALID_URL: i32 = 259;
pub const IDS_NTP_CUSTOM_LINKS_SHORTCUT_EXISTS: i32 = 5555;
pub const IDS_NTP_CUSTOM_LINKS_CANT_CREATE: i32 = 263;
pub const IDS_NTP_CUSTOM_LINKS_CANT_EDIT: i32 = 264;
pub const IDS_NTP_CUSTOM_LINKS_CANT_REMOVE: i32 = 265;
pub const IDS_NTP_CONFIRM_MSG_SHORTCUT_REMOVED: i32 = 225;
pub const IDS_NTP_CONFIRM_MSG_SHORTCUT_EDITED: i32 = 260;
pub const IDS_NTP_CONFIRM_MSG_SHORTCUT_ADDED: i32 = 261;
pub const IDS_NTP_CONFIRM_MSG_RESTORE_DEFAULTS: i32 = 262;
pub const IDS_NTP_CUSTOM_BG_CHROME_WALLPAPERS: i32 = 235;
pub const IDS_NTP_CUSTOM_BG_UPLOAD_AN_IMAGE: i32 = 236;
pub const IDS_NTP_CUSTOM_BG_SELECT_A_COLLECTION: i32 = 238;
pub const IDS_NTP_CUSTOM_BG_DAILY_REFRESH: i32 = 239;
pub const IDS_NTP_CUSTOM_BG_SURPRISE_ME: i32 = 5556;
pub const IDS_NTP_CUSTOM_BG_RESTORE_DEFAULT: i32 = 237;
pub const IDS_NTP_CUSTOM_BG_CANCEL: i32 = 241;
pub const IDS_NTP_CONNECTION_ERROR_NO_PERIOD: i32 = 243;
pub const IDS_NTP_CONNECTION_ERROR: i32 = 244;
pub const IDS_NTP_ERROR_MORE_INFO: i32 = 245;
pub const IDS_NTP_CUSTOM_BG_BACKGROUNDS_UNAVAILABLE: i32 = 246;
pub const IDS_NTP_CUSTOM_BG_IMAGE_UNAVAILABLE: i32 = 5557;
pub const IDS_NTP_CUSTOM_BG_IMAGE_NOT_USABLE: i32 = 5558;
pub const IDS_NTP_CUSTOM_BG_BACK_LABEL: i32 = 248;
pub const IDS_NTP_CUSTOM_BG_IMAGE_SELECTED: i32 = 5559;
pub const IDS_NTP_CUSTOM_BG_CUSTOMIZE_NTP_LABEL: i32 = 247;
pub const IDS_NTP_DOODLE_SHARE_LABEL: i32 = 5560;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_CLOSE_LABEL: i32 = 5561;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_FACEBOOK_LABEL: i32 = 5562;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_TWITTER_LABEL: i32 = 5563;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_MAIL_LABEL: i32 = 5564;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_COPY_LABEL: i32 = 5565;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_LINK_LABEL: i32 = 5566;
pub const IDS_NTP_CUSTOMIZE_BUTTON_LABEL: i32 = 5567;
pub const IDS_NTP_CUSTOMIZE_MENU_BACKGROUND_LABEL: i32 = 5568;
pub const IDS_NTP_CUSTOMIZE_MENU_SHORTCUTS_LABEL: i32 = 5569;
pub const IDS_NTP_CUSTOMIZE_MENU_COLOR_LABEL: i32 = 5570;
pub const IDS_NTP_CUSTOMIZE_NO_BACKGROUND_LABEL: i32 = 5571;
pub const IDS_NTP_CUSTOMIZE_UPLOAD_FROM_DEVICE_LABEL: i32 = 5572;
pub const IDS_NTP_CUSTOMIZE_HIDE_SHORTCUTS_LABEL: i32 = 5573;
pub const IDS_NTP_CUSTOMIZE_HIDE_SHORTCUTS_DESC: i32 = 5574;
pub const IDS_NTP_CUSTOMIZE_MY_SHORTCUTS_LABEL: i32 = 5575;
pub const IDS_NTP_CUSTOMIZE_MOST_VISITED_LABEL: i32 = 5576;
pub const IDS_NTP_CUSTOMIZE_MOST_VISITED_DESC: i32 = 5577;
pub const IDS_NTP_CUSTOMIZE_MY_SHORTCUTS_DESC: i32 = 5578;
pub const IDS_NTP_CUSTOMIZE_3PT_THEME_DESC: i32 = 5579;
pub const IDS_NTP_CUSTOMIZE_3PT_THEME_UNINSTALL: i32 = 5580;
pub const IDS_NTP_CUSTOMIZE_COLOR_PICKER_LABEL: i32 = 5581;
pub const IDS_NTP_CUSTOMIZE_DEFAULT_LABEL: i32 = 5582;
pub const IDS_NTP_CUSTOMIZE_COLOR_LABEL_PREFIX: i32 = 5583;
pub const IDS_TOOLTIP_BACK: i32 = 193;
pub const IDS_ACCDESCRIPTION_BACK: i32 = 195;
pub const IDS_TOOLTIP_FORWARD: i32 = 196;
pub const IDS_ACCDESCRIPTION_FORWARD: i32 = 198;
pub const IDS_TOOLTIP_HOME: i32 = 203;
pub const IDS_TOOLTIP_RELOAD: i32 = 5585;
pub const IDS_TOOLTIP_RELOAD_WITH_MENU: i32 = 5586;
pub const IDS_TOOLTIP_STOP: i32 = 5587;
pub const IDS_TOOLTIP_EXTENSIONS_BUTTON: i32 = 5588;
pub const IDS_TOOLTIP_LOCATION_ICON: i32 = 5590;
pub const IDS_TOOLTIP_NEW_TAB: i32 = 185;
pub const IDS_TOOLTIP_MIC_SEARCH: i32 = 269;
pub const IDS_TOOLTIP_SAVE_CREDIT_CARD: i32 = 5591;
pub const IDS_TOOLTIP_MIGRATE_LOCAL_CARD: i32 = 5592;
pub const IDS_TOOLTIP_TRANSLATE: i32 = 5593;
pub const IDS_TOOLTIP_ZOOM: i32 = 5594;
pub const IDS_TOOLTIP_ZOOM_EXTENSION_ICON: i32 = 5595;
pub const IDS_ZOOM_SET_DEFAULT: i32 = 5596;
pub const IDS_TOOLTIP_FIND: i32 = 5597;
pub const IDS_TOOLTIP_INTENT_PICKER_ICON: i32 = 5598;
pub const IDS_INTENT_PICKER_BUBBLE_VIEW_OPEN_WITH: i32 = 5599;
pub const IDS_INTENT_PICKER_BUBBLE_VIEW_REMEMBER_SELECTION: i32 = 5600;
pub const IDS_INTENT_PICKER_BUBBLE_VIEW_OPEN: i32 = 5601;
pub const IDS_INTENT_PICKER_BUBBLE_VIEW_STAY_IN_CHROME: i32 = 5602;
pub const IDS_ACCESSIBLE_INCOGNITO_WINDOW_TITLE_FORMAT: i32 = 5603;
pub const IDS_ACCESSIBLE_GUEST_WINDOW_TITLE_FORMAT: i32 = 5604;
pub const IDS_ACCESSIBLE_WINDOW_TITLE_WITH_PROFILE_FORMAT: i32 = 5605;
pub const IDS_ACCNAME_APP_UPGRADE_RECOMMENDED: i32 = 5606;
pub const IDS_ACCNAME_FULLSCREEN: i32 = 5607;
pub const IDS_ACCNAME_HOME: i32 = 204;
pub const IDS_ACCNAME_RELOAD: i32 = 202;
pub const IDS_ACCNAME_FIND: i32 = 5608;
pub const IDS_ACCNAME_BOOKMARKS: i32 = 5609;
pub const IDS_ACCNAME_BOOKMARKS_CHEVRON: i32 = 285;
pub const IDS_ACCNAME_BOOKMARKS_MENU: i32 = 5610;
pub const IDS_ACCNAME_SEPARATOR: i32 = 5611;
pub const IDS_ACCNAME_EXTENSIONS: i32 = 5612;
pub const IDS_ACCNAME_NEWTAB: i32 = 186;
pub const IDS_ACCNAME_MINIMIZE: i32 = 5613;
pub const IDS_ACCNAME_MAXIMIZE: i32 = 5614;
pub const IDS_ACCNAME_RESTORE: i32 = 5615;
pub const IDS_ACCNAME_CLOSE_TAB: i32 = 5616;
pub const IDS_ACCNAME_ZOOM_SET_DEFAULT: i32 = 5617;
pub const IDS_ACCESSIBILITY_EVENTS_PERMISSION_FRAGMENT: i32 = 5618;
pub const IDS_CLIPBOARD_PERMISSION_FRAGMENT: i32 = 5621;
pub const IDS_ALLOWED_CLIPBOARD_TITLE: i32 = 5624;
pub const IDS_BLOCKED_CLIPBOARD_TITLE: i32 = 5625;
pub const IDS_ALLOWED_CLIPBOARD_MESSAGE: i32 = 5626;
pub const IDS_ALLOWED_CLIPBOARD_BLOCK: i32 = 5627;
pub const IDS_ALLOWED_CLIPBOARD_NO_ACTION: i32 = 5628;
pub const IDS_BLOCKED_CLIPBOARD_MESSAGE: i32 = 5629;
pub const IDS_BLOCKED_CLIPBOARD_UNBLOCK: i32 = 5630;
pub const IDS_BLOCKED_CLIPBOARD_NO_ACTION: i32 = 5631;
pub const IDS_BOOKMARK_PROMO_0: i32 = 5632;
pub const IDS_BOOKMARK_PROMO_1: i32 = 5633;
pub const IDS_BOOKMARK_PROMO_2: i32 = 5634;
pub const IDS_INCOGNITOWINDOW_PROMO_0: i32 = 5635;
pub const IDS_INCOGNITOWINDOW_PROMO_1: i32 = 5636;
pub const IDS_INCOGNITOWINDOW_PROMO_2: i32 = 5637;
pub const IDS_INCOGNITOWINDOW_PROMO_3: i32 = 5638;
pub const IDS_NEWTAB_PROMO_0: i32 = 5639;
pub const IDS_NEWTAB_PROMO_1: i32 = 5640;
pub const IDS_NEWTAB_PROMO_2: i32 = 5641;
pub const IDS_REOPEN_TAB_PROMO: i32 = 5642;
pub const IDS_REOPEN_TAB_PROMO_SCREENREADER: i32 = 5643;
pub const IDS_BROWSER_HANGMONITOR: i32 = 5644;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_TITLE: i32 = 5645;
pub const IDS_BROWSER_HANGMONITOR_RENDERER: i32 = 5646;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_INFOBAR: i32 = 5647;
pub const IDS_BROWSER_HANGMONITOR_IFRAME_TITLE: i32 = 5648;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_INFOBAR_END: i32 = 5649;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_WAIT: i32 = 5650;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_END: i32 = 5651;
pub const IDS_BROWSER_HANGMONITOR_PLUGIN_INFOBAR: i32 = 5652;
pub const IDS_BROWSER_HANGMONITOR_PLUGIN_INFOBAR_KILLBUTTON: i32 = 5653;
pub const IDS_PASSWORDS_AUTO_SIGNIN_TITLE: i32 = 5654;
pub const IDS_PASSWORDS_AUTO_SIGNIN_DESCRIPTION: i32 = 5655;
pub const IDS_PASSWORDS_VIA_FEDERATION: i32 = 5656;
pub const IDS_PASSWORDS_PAGE_VIEW_HIDE_BUTTON: i32 = 5657;
pub const IDS_CONFIRM_MESSAGEBOX_YES_BUTTON_LABEL: i32 = 5658;
pub const IDS_CONFIRM_MESSAGEBOX_NO_BUTTON_LABEL: i32 = 5659;
pub const IDS_PASSWORD_MANAGER_CANCEL_BUTTON: i32 = 5660;
pub const IDS_PASSWORD_MANAGER_SAVE_BUTTON: i32 = 5661;
pub const IDS_PASSWORD_MANAGER_UPDATE_BUTTON: i32 = 5662;
pub const IDS_PASSWORD_MANAGER_BUBBLE_BLACKLIST_BUTTON: i32 = 5663;
pub const IDS_PASSWORD_MANAGER_TOOLTIP_SAVE: i32 = 5664;
pub const IDS_PASSWORD_MANAGER_TOOLTIP_MANAGE: i32 = 5665;
pub const IDS_PASSWORD_MANAGER_IMPORT_BUTTON: i32 = 5666;
pub const IDS_PASSWORD_MANAGER_IMPORT_DIALOG_TITLE: i32 = 5667;
pub const IDS_PASSWORD_MANAGER_EXPORT_DIALOG_TITLE: i32 = 5668;
pub const IDS_PASSWORD_MANAGER_USERNAME_LABEL: i32 = 5669;
pub const IDS_PASSWORD_MANAGER_PASSWORD_LABEL: i32 = 5670;
pub const IDS_IMPORT_FROM_IE: i32 = 5677;
pub const IDS_IMPORT_FROM_EDGE: i32 = 5678;
pub const IDS_IMPORT_FROM_FIREFOX: i32 = 5679;
pub const IDS_IMPORT_FROM_ICEWEASEL: i32 = 5680;
pub const IDS_IMPORT_FROM_SAFARI: i32 = 5681;
pub const IDS_IMPORT_FROM_BOOKMARKS_HTML_FILE: i32 = 5682;
pub const IDS_IMPORTER_LOCK_TITLE: i32 = 5686;
pub const IDS_IMPORTER_LOCK_TEXT: i32 = 5687;
pub const IDS_IMPORTER_LOCK_OK: i32 = 5688;
pub const IDS_FEEDBACK_REPORT_PAGE_TITLE: i32 = 5689;
pub const IDS_FEEDBACK_REPORT_PAGE_TITLE_SAD_TAB_FLOW: i32 = 5690;
pub const IDS_FEEDBACK_MINIMIZE_BUTTON_LABEL: i32 = 5691;
pub const IDS_FEEDBACK_CLOSE_BUTTON_LABEL: i32 = 5692;
pub const IDS_FEEDBACK_REPORT_URL_LABEL: i32 = 5693;
pub const IDS_FEEDBACK_USER_EMAIL_LABEL: i32 = 5694;
pub const IDS_FEEDBACK_ANONYMOUS_EMAIL_OPTION: i32 = 5695;
pub const IDS_FEEDBACK_SCREENSHOT_LABEL: i32 = 5696;
pub const IDS_FEEDBACK_INCLUDE_PERFORMANCE_TRACE_CHECKBOX: i32 = 5697;
pub const IDS_FEEDBACK_BLUETOOTH_LOGS_CHECKBOX: i32 = 5698;
pub const IDS_FEEDBACK_ASSISTANT_LOGS_MESSAGE: i32 = 5699;
pub const IDS_FEEDBACK_BLUETOOTH_LOGS_MESSAGE: i32 = 5700;
pub const IDS_FEEDBACK_OFFLINE_DIALOG_TITLE: i32 = 5701;
pub const IDS_FEEDBACK_OFFLINE_DIALOG_TEXT: i32 = 5702;
pub const IDS_FEEDBACK_INCLUDE_SYSTEM_INFORMATION_CHKBOX: i32 = 5703;
pub const IDS_FEEDBACK_INCLUDE_ASSISTANT_INFORMATION_CHKBOX: i32 = 5706;
pub const IDS_FEEDBACK_ATTACH_FILE_NOTE: i32 = 5707;
pub const IDS_FEEDBACK_ATTACH_FILE_LABEL: i32 = 5708;
pub const IDS_FEEDBACK_READING_FILE: i32 = 5709;
pub const IDS_FEEDBACK_ATTACH_FILE_TO_BIG: i32 = 5710;
pub const IDS_FEEDBACK_IWLWIFI_DEBUG_DUMP_EXPLAINER: i32 = 5711;
pub const IDS_FEEDBACK_PRIVACY_NOTE: i32 = 5712;
pub const IDS_FEEDBACK_NO_DESCRIPTION: i32 = 5713;
pub const IDS_FEEDBACK_SEND_REPORT: i32 = 5714;
pub const IDS_FEEDBACK_SYSINFO_PAGE_TITLE: i32 = 5715;
pub const IDS_FEEDBACK_SYSINFO_PAGE_LOADING: i32 = 5716;
pub const IDS_FEEDBACK_ADDITIONAL_INFO_LABEL: i32 = 5717;
pub const IDS_CLEAR_BROWSING_DATA_TITLE: i32 = 5718;
pub const IDS_FLASH_PERMISSION_FRAGMENT: i32 = 5719;
pub const IDS_CLEAR_BROWSING_DATA_HISTORY_NOTICE: i32 = 5720;
pub const IDS_CLEAR_BROWSING_DATA_HISTORY_NOTICE_TITLE: i32 = 5721;
pub const IDS_CLEAR_BROWSING_DATA_HISTORY_NOTICE_OK: i32 = 5722;
pub const IDS_MEDIA_SELECTED_MIC_LABEL: i32 = 5723;
pub const IDS_MEDIA_SELECTED_CAMERA_LABEL: i32 = 5724;
pub const IDS_MEDIA_MENU_NO_DEVICE_TITLE: i32 = 5725;
pub const IDS_HANDLERS_BUBBLE_MANAGE_LINK: i32 = 5728;
pub const IDS_ZOOMLEVELS_CHROME_ERROR_PAGES_LABEL: i32 = 5729;
pub const IDS_UPGRADE_ERROR: i32 = 5736;
pub const IDS_UPGRADE_ERROR_DETAILS: i32 = 5737;
pub const IDS_UPGRADE_DISABLED_BY_POLICY: i32 = 5738;
pub const IDS_UPGRADE_DISABLED_BY_POLICY_MANUAL: i32 = 5739;
pub const IDS_REPORT_AN_ISSUE: i32 = 5740;
pub const IDS_CHROME_CLEANUP_PROMPT_DETAILS_BUTTON_LABEL: i32 = 5741;
pub const IDS_CHROME_CLEANUP_PROMPT_REMOVE_BUTTON_LABEL: i32 = 5742;
pub const IDS_CHROME_CLEANUP_PROMPT_TITLE: i32 = 5743;
pub const IDS_CHROME_CLEANUP_REBOOT_PROMPT_TITLE: i32 = 5744;
pub const IDS_CHROME_CLEANUP_REBOOT_PROMPT_RESTART_BUTTON_LABEL: i32 = 5745;
pub const IDS_CHROME_CLEANUP_LOGS_PERMISSION: i32 = 5746;
pub const IDS_SETTINGS_RESET_PROMPT_TITLE_SEARCH_ENGINE: i32 = 5747;
pub const IDS_SETTINGS_RESET_PROMPT_TITLE_STARTUP_PAGE: i32 = 5748;
pub const IDS_SETTINGS_RESET_PROMPT_TITLE_HOMEPAGE: i32 = 5749;
pub const IDS_SETTINGS_RESET_PROMPT_ACCEPT_BUTTON_LABEL: i32 = 5750;
pub const IDS_SETTINGS_RESET_PROMPT_EXPLANATION_FOR_SEARCH_ENGINE_NO_EXTENSIONS: i32 = 5751;
pub const IDS_SETTINGS_RESET_PROMPT_EXPLANATION_FOR_STARTUP_PAGE_SINGLE_NO_EXTENSIONS: i32 = 5752;
pub const IDS_SETTINGS_RESET_PROMPT_EXPLANATION_FOR_STARTUP_PAGE_MULTIPLE_NO_EXTENSIONS: i32 = 5753;
pub const IDS_SETTINGS_RESET_PROMPT_EXPLANATION_FOR_HOMEPAGE_NO_EXTENSIONS: i32 = 5754;
pub const IDS_REENABLE_UPDATES: i32 = 5755;
pub const IDS_PICTURE_IN_PICTURE_TITLE_TEXT: i32 = 5756;
pub const IDS_PICTURE_IN_PICTURE_PAUSE_CONTROL_TEXT: i32 = 5757;
pub const IDS_PICTURE_IN_PICTURE_PLAY_CONTROL_TEXT: i32 = 5758;
pub const IDS_PICTURE_IN_PICTURE_REPLAY_CONTROL_TEXT: i32 = 5759;
pub const IDS_PICTURE_IN_PICTURE_BACK_TO_TAB_CONTROL_TEXT: i32 = 5760;
pub const IDS_PICTURE_IN_PICTURE_MUTE_CONTROL_TEXT: i32 = 5761;
pub const IDS_PICTURE_IN_PICTURE_UNMUTE_CONTROL_TEXT: i32 = 5762;
pub const IDS_PICTURE_IN_PICTURE_SKIP_AD_CONTROL_TEXT: i32 = 5763;
pub const IDS_PICTURE_IN_PICTURE_CLOSE_CONTROL_TEXT: i32 = 5764;
pub const IDS_PICTURE_IN_PICTURE_RESIZE_HANDLE_TEXT: i32 = 5765;
pub const IDS_PICTURE_IN_PICTURE_PLAY_PAUSE_CONTROL_ACCESSIBLE_TEXT: i32 = 5766;
pub const IDS_PICTURE_IN_PICTURE_MUTE_CONTROL_ACCESSIBLE_TEXT: i32 = 5767;
pub const IDS_PICTURE_IN_PICTURE_NEXT_TRACK_CONTROL_ACCESSIBLE_TEXT: i32 = 5768;
pub const IDS_PICTURE_IN_PICTURE_PREVIOUS_TRACK_CONTROL_ACCESSIBLE_TEXT: i32 = 5769;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_CLOSE_TITLE: i32 = 5770;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_LEAVE_TITLE: i32 = 5771;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_DESCRIPTION: i32 = 5772;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_CLOSE_TEXT: i32 = 5773;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_LEAVE_TEXT: i32 = 5774;
pub const IDS_PICTURE_IN_PICTURE_CANCEL_TEXT: i32 = 5775;
pub const IDS_LOAD_STATE_WAITING_FOR_SOCKET_SLOT: i32 = 5776;
pub const IDS_LOAD_STATE_WAITING_FOR_DELEGATE: i32 = 5777;
pub const IDS_LOAD_STATE_WAITING_FOR_DELEGATE_GENERIC: i32 = 292;
pub const IDS_LOAD_STATE_WAITING_FOR_CACHE: i32 = 5778;
pub const IDS_LOAD_STATE_WAITING_FOR_APPCACHE: i32 = 5779;
pub const IDS_LOAD_STATE_ESTABLISHING_PROXY_TUNNEL: i32 = 5780;
pub const IDS_LOAD_STATE_RESOLVING_PROXY_FOR_URL: i32 = 5781;
pub const IDS_LOAD_STATE_RESOLVING_HOST_IN_PAC_FILE: i32 = 5782;
pub const IDS_LOAD_STATE_DOWNLOADING_PAC_FILE: i32 = 5783;
pub const IDS_LOAD_STATE_RESOLVING_HOST: i32 = 5784;
pub const IDS_LOAD_STATE_CONNECTING: i32 = 5785;
pub const IDS_LOAD_STATE_SSL_HANDSHAKE: i32 = 5786;
pub const IDS_LOAD_STATE_SENDING_REQUEST: i32 = 5787;
pub const IDS_LOAD_STATE_SENDING_REQUEST_WITH_PROGRESS: i32 = 5788;
pub const IDS_LOAD_STATE_WAITING_FOR_RESPONSE: i32 = 5789;
pub const IDS_TAB_CXMENU_NEWTAB: i32 = 5790;
pub const IDS_TAB_CXMENU_RELOAD: i32 = 5791;
pub const IDS_TAB_CXMENU_DUPLICATE: i32 = 5792;
pub const IDS_TAB_CXMENU_CLOSETAB: i32 = 5793;
pub const IDS_TAB_CXMENU_CLOSEOTHERTABS: i32 = 5794;
pub const IDS_TAB_CXMENU_CLOSETABSTORIGHT: i32 = 5795;
pub const IDS_TAB_CXMENU_FOCUS_THIS_TAB: i32 = 5796;
pub const IDS_TAB_CXMENU_PIN_TAB: i32 = 5797;
pub const IDS_TAB_CXMENU_UNPIN_TAB: i32 = 5798;
pub const IDS_TAB_CXMENU_AUDIO_MUTE_TAB: i32 = 5799;
pub const IDS_TAB_CXMENU_AUDIO_UNMUTE_TAB: i32 = 5800;
pub const IDS_TAB_CXMENU_SOUND_MUTE_SITE: i32 = 5801;
pub const IDS_TAB_CXMENU_SOUND_UNMUTE_SITE: i32 = 5802;
pub const IDS_TAB_CXMENU_BOOKMARK_ALL_TABS: i32 = 5803;
pub const IDS_TAB_CXMENU_ADD_TAB_TO_NEW_GROUP: i32 = 5804;
pub const IDS_TAB_CXMENU_ADD_TAB_TO_EXISTING_GROUP: i32 = 5805;
pub const IDS_TAB_CXMENU_REMOVE_TAB_FROM_GROUP: i32 = 5806;
pub const IDS_APP_MENU_RELOAD: i32 = 5807;
pub const IDS_APP_MENU_NEW_WEB_PAGE: i32 = 5808;
pub const IDS_MEDIA_SCREEN_CAPTURE_CONFIRMATION_TITLE: i32 = 5809;
pub const IDS_MEDIA_SCREEN_CAPTURE_CONFIRMATION_TEXT: i32 = 5810;
pub const IDS_MEDIA_SCREEN_AND_AUDIO_CAPTURE_CONFIRMATION_TEXT: i32 = 5811;
pub const IDS_MEDIA_SCREEN_CAPTURE_NOTIFICATION_TEXT: i32 = 5812;
pub const IDS_MEDIA_SCREEN_CAPTURE_NOTIFICATION_TEXT_DELEGATED: i32 = 5813;
pub const IDS_MEDIA_SCREEN_CAPTURE_WITH_AUDIO_NOTIFICATION_TEXT: i32 = 5814;
pub const IDS_MEDIA_SCREEN_CAPTURE_WITH_AUDIO_NOTIFICATION_TEXT_DELEGATED: i32 = 5815;
pub const IDS_MEDIA_WINDOW_CAPTURE_NOTIFICATION_TEXT: i32 = 5816;
pub const IDS_MEDIA_WINDOW_CAPTURE_NOTIFICATION_TEXT_DELEGATED: i32 = 5817;
pub const IDS_MEDIA_TAB_CAPTURE_NOTIFICATION_TEXT: i32 = 5818;
pub const IDS_MEDIA_TAB_CAPTURE_NOTIFICATION_TEXT_DELEGATED: i32 = 5819;
pub const IDS_MEDIA_TAB_CAPTURE_WITH_AUDIO_NOTIFICATION_TEXT: i32 = 5820;
pub const IDS_MEDIA_TAB_CAPTURE_WITH_AUDIO_NOTIFICATION_TEXT_DELEGATED: i32 = 5821;
pub const IDS_MEDIA_SCREEN_CAPTURE_NOTIFICATION_SOURCE: i32 = 5822;
pub const IDS_MEDIA_SCREEN_CAPTURE_NOTIFICATION_STOP: i32 = 5823;
pub const IDS_PLATFORM_KEYS_SELECT_CERT_DIALOG_TEXT: i32 = 5824;
pub const IDS_UNSAFE_FRAME_MESSAGE: i32 = 5825;
pub const IDS_CLIENT_CERT_DIALOG_TITLE: i32 = 5826;
pub const IDS_CLIENT_CERT_DIALOG_TEXT: i32 = 5827;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TITLE: i32 = 5828;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_CERT_ENROLLMENT: i32 = 5829;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_CLIENT_AUTH: i32 = 5830;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_LIST_CERTS: i32 = 5831;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_CERT_IMPORT: i32 = 5832;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_CERT_EXPORT: i32 = 5833;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_PASSWORD_FIELD: i32 = 5834;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_OK_BUTTON_LABEL: i32 = 5835;
pub const IDS_CRASHED_TAB_FEEDBACK_MESSAGE: i32 = 5841;
pub const IDS_CRASHED_TAB_FEEDBACK_LINK: i32 = 5842;
pub const IDS_KILLED_TAB_FEEDBACK_MESSAGE: i32 = 5844;
pub const IDS_HIDE_ICONS_NOT_SUPPORTED: i32 = 5845;
pub const IDS_RELAUNCH_BUTTON: i32 = 5846;
pub const IDS_TOOLBAR_INFORM_SET_HOME_PAGE: i32 = 5849;
pub const IDS_MANAGE_EXTENSIONS_SETTING_WINDOWS_TITLE: i32 = 5850;
pub const IDS_GOOGLE_CLOUD_PRINT: i32 = 5851;
pub const IDS_CLOUD_PRINT_CONNECTOR_DISABLED_BUTTON: i32 = 5852;
pub const IDS_CLOUD_PRINT_CONNECTOR_ENABLED_LABEL: i32 = 5853;
pub const IDS_CLOUD_PRINT_CONNECTOR_ENABLED_BUTTON: i32 = 5854;
pub const IDS_CLOUD_PRINT_CONNECTOR_ENABLING_BUTTON: i32 = 5855;
pub const IDS_CONTROLLED_SETTING_POLICY: i32 = 5856;
pub const IDS_CONTROLLED_SETTING_EXTENSION: i32 = 5857;
pub const IDS_CONTROLLED_SETTING_EXTENSION_WITHOUT_NAME: i32 = 5858;
pub const IDS_CONTROLLED_SETTING_RECOMMENDED: i32 = 5859;
pub const IDS_CONTROLLED_SETTING_HAS_RECOMMENDATION: i32 = 5860;
pub const IDS_EXTENSIONS_INSTALL_LOCATION_UNKNOWN: i32 = 5861;
pub const IDS_EXTENSIONS_INSTALL_LOCATION_3RD_PARTY: i32 = 5862;
pub const IDS_EXTENSIONS_INSTALL_LOCATION_ENTERPRISE: i32 = 5863;
pub const IDS_EXTENSIONS_INSTALL_LOCATION_SHARED_MODULE: i32 = 5864;
pub const IDS_EXTENSIONS_BLACKLISTED_MALWARE: i32 = 5865;
pub const IDS_EXTENSIONS_BLACKLISTED_SECURITY_VULNERABILITY: i32 = 5866;
pub const IDS_EXTENSIONS_BLACKLISTED_CWS_POLICY_VIOLATION: i32 = 5867;
pub const IDS_EXTENSIONS_BLACKLISTED_POTENTIALLY_UNWANTED: i32 = 5868;
pub const IDS_RESET_PROFILE_SETTINGS_EXPLANATION: i32 = 5869;
pub const IDS_TRIGGERED_RESET_PROFILE_SETTINGS_TITLE: i32 = 5870;
pub const IDS_TRIGGERED_RESET_PROFILE_SETTINGS_EXPLANATION: i32 = 5871;
pub const IDS_TRIGGERED_RESET_PROFILE_SETTINGS_DEFAULT_TOOL_NAME: i32 = 5872;
pub const IDS_RESET_PROFILE_SETTINGS_LOCALE: i32 = 5873;
pub const IDS_RESET_PROFILE_SETTINGS_STARTUP_URLS: i32 = 5874;
pub const IDS_RESET_PROFILE_SETTINGS_STARTUP_TYPE: i32 = 5875;
pub const IDS_RESET_PROFILE_SETTINGS_HOMEPAGE: i32 = 5876;
pub const IDS_RESET_PROFILE_SETTINGS_HOMEPAGE_IS_NTP: i32 = 5877;
pub const IDS_RESET_PROFILE_SETTINGS_YES: i32 = 5878;
pub const IDS_RESET_PROFILE_SETTINGS_NO: i32 = 5879;
pub const IDS_RESET_PROFILE_SETTINGS_SHOW_HOME_BUTTON: i32 = 5880;
pub const IDS_RESET_PROFILE_SETTINGS_DSE: i32 = 5881;
pub const IDS_RESET_PROFILE_SETTINGS_EXTENSIONS: i32 = 5882;
pub const IDS_RESET_PROFILE_SETTINGS_SHORTCUTS: i32 = 5883;
pub const IDS_RESET_PROFILE_SETTINGS_PROCESSING_SHORTCUTS: i32 = 5884;
pub const IDS_AUTOFILL_DIALOG_PLACEHOLDER_EXPIRY_MONTH: i32 = 5886;
pub const IDS_AUTOFILL_DIALOG_PLACEHOLDER_EXPIRY_YEAR: i32 = 5887;
pub const IDS_AUTOFILL_FROM_GOOGLE_ACCOUNT: i32 = 5888;
pub const IDS_OMNIBOX_ICON_SEND_TAB_TO_SELF: i32 = 5890;
pub const IDS_OMNIBOX_TOOLTIP_SEND_TAB_TO_SELF: i32 = 5891;
pub const IDS_OMNIBOX_BUBBLE_ITEM_SUBTITLE_TODAY_SEND_TAB_TO_SELF: i32 = 5892;
pub const IDS_OMNIBOX_BUBBLE_ITEM_SUBTITLE_DAY_SEND_TAB_TO_SELF: i32 = 5893;
pub const IDS_OMNIBOX_BUBBLE_ITEM_SUBTITLE_DAYS_SEND_TAB_TO_SELF: i32 = 5894;
pub const IDS_CONTEXT_MENU_SEND_TAB_TO_SELF_SINGLE_TARGET: i32 = 5895;
pub const IDS_CONTEXT_MENU_SEND_TAB_TO_SELF: i32 = 5896;
pub const IDS_LINK_MENU_SEND_TAB_TO_SELF: i32 = 5897;
pub const IDS_LINK_MENU_SEND_TAB_TO_SELF_SINGLE_TARGET: i32 = 5898;
pub const IDS_CONTENT_CONTEXT_SHARING_CLICK_TO_CALL_MULTIPLE_DEVICES: i32 = 5899;
pub const IDS_CONTENT_CONTEXT_SHARING_CLICK_TO_CALL_SINGLE_DEVICE: i32 = 5900;
pub const IDS_COLLECTED_COOKIES_DIALOG_TITLE: i32 = 5901;
pub const IDS_COLLECTED_COOKIES_ALLOWED_COOKIES_LABEL: i32 = 5902;
pub const IDS_COLLECTED_COOKIES_BLOCKED_COOKIES_LABEL: i32 = 5903;
pub const IDS_COLLECTED_COOKIES_BLOCKED_THIRD_PARTY_BLOCKING_ENABLED: i32 = 5904;
pub const IDS_COLLECTED_COOKIES_ALLOW_BUTTON: i32 = 5905;
pub const IDS_COLLECTED_COOKIES_SESSION_ONLY_BUTTON: i32 = 5906;
pub const IDS_COLLECTED_COOKIES_BLOCK_BUTTON: i32 = 5907;
pub const IDS_COLLECTED_COOKIES_ALLOW_RULE_CREATED: i32 = 5908;
pub const IDS_COLLECTED_COOKIES_BLOCK_RULE_CREATED: i32 = 5909;
pub const IDS_COLLECTED_COOKIES_SESSION_RULE_CREATED: i32 = 5910;
pub const IDS_COLLECTED_COOKIES_ALLOWED_COOKIES_TAB_LABEL: i32 = 5914;
pub const IDS_COLLECTED_COOKIES_BLOCKED_COOKIES_TAB_LABEL: i32 = 5915;
pub const IDS_COLLECTED_COOKIES_ALLOWED_AUX_TEXT: i32 = 5916;
pub const IDS_COLLECTED_COOKIES_BLOCKED_AUX_TEXT: i32 = 5917;
pub const IDS_COLLECTED_COOKIES_CLEAR_ON_EXIT_AUX_TEXT: i32 = 5918;
pub const IDS_COLLECTED_COOKIES_INFOBAR_MESSAGE: i32 = 5919;
pub const IDS_COLLECTED_COOKIES_INFOBAR_BUTTON: i32 = 5920;
pub const IDS_ACCNAME_INFOBAR_CONTAINER: i32 = 5921;
pub const IDS_ACCNAME_INFOBAR: i32 = 5922;
pub const IDS_ONE_CLICK_BUBBLE_UNDO: i32 = 5923;
pub const IDS_ONE_CLICK_SIGNIN_BUBBLE_MESSAGE: i32 = 5924;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_OK_BUTTON: i32 = 5925;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_UNDO_BUTTON: i32 = 5926;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_ADVANCED: i32 = 5927;
pub const IDS_ENTERPRISE_SIGNIN_CANCEL: i32 = 5928;
pub const IDS_ENTERPRISE_SIGNIN_CREATE_NEW_PROFILE: i32 = 5929;
pub const IDS_ENTERPRISE_SIGNIN_CONTINUE: i32 = 5930;
pub const IDS_ENTERPRISE_SIGNIN_ALERT: i32 = 5931;
pub const IDS_PROFILE_WILL_BE_DELETED_DIALOG_TITLE: i32 = 5932;
pub const IDS_PROFILE_WILL_BE_DELETED_DIALOG_DESCRIPTION: i32 = 5933;
pub const IDS_MANAGED_WITH_HYPERLINK: i32 = 5934;
pub const IDS_MANAGED_BY_WITH_HYPERLINK: i32 = 5935;
pub const IDS_COOKIES_REMOVE_LABEL: i32 = 5936;
pub const IDS_COOKIES_COOKIE_NAME_LABEL: i32 = 5937;
pub const IDS_COOKIES_COOKIE_CONTENT_LABEL: i32 = 5938;
pub const IDS_COOKIES_COOKIE_DOMAIN_LABEL: i32 = 5939;
pub const IDS_COOKIES_COOKIE_PATH_LABEL: i32 = 5940;
pub const IDS_COOKIES_COOKIE_SENDFOR_LABEL: i32 = 5941;
pub const IDS_COOKIES_COOKIE_CREATED_LABEL: i32 = 5942;
pub const IDS_COOKIES_COOKIE_EXPIRES_LABEL: i32 = 5943;
pub const IDS_COOKIES_COOKIE_EXPIRES_SESSION: i32 = 5944;
pub const IDS_COOKIES_COOKIE_SENDFOR_ANY: i32 = 5945;
pub const IDS_COOKIES_COOKIE_SENDFOR_SECURE: i32 = 5946;
pub const IDS_COOKIES_COOKIE_SENDFOR_SAME_SITE: i32 = 5947;
pub const IDS_COOKIES_COOKIE_SENDFOR_SECURE_SAME_SITE: i32 = 5948;
pub const IDS_COOKIES_COOKIE_ACCESSIBLE_TO_SCRIPT_YES: i32 = 5949;
pub const IDS_COOKIES_COOKIE_ACCESSIBLE_TO_SCRIPT_NO: i32 = 5950;
pub const IDS_COOKIES_COOKIE_NONESELECTED: i32 = 5951;
pub const IDS_COOKIES_LOCAL_STORAGE_ORIGIN_LABEL: i32 = 5954;
pub const IDS_COOKIES_LOCAL_STORAGE_SIZE_ON_DISK_LABEL: i32 = 5955;
pub const IDS_COOKIES_LOCAL_STORAGE_LAST_MODIFIED_LABEL: i32 = 5956;
pub const IDS_COOKIES_COOKIES: i32 = 5957;
pub const IDS_COOKIES_APPLICATION_CACHES: i32 = 5958;
pub const IDS_COOKIES_APPLICATION_CACHE: i32 = 5959;
pub const IDS_COOKIES_APPLICATION_CACHE_MANIFEST_LABEL: i32 = 5960;
pub const IDS_COOKIES_WEB_DATABASES: i32 = 5962;
pub const IDS_COOKIES_LOCAL_STORAGE: i32 = 5963;
pub const IDS_COOKIES_SESSION_STORAGE: i32 = 5964;
pub const IDS_COOKIES_INDEXED_DBS: i32 = 5965;
pub const IDS_COOKIES_MEDIA_LICENSE: i32 = 5966;
pub const IDS_COOKIES_MEDIA_LICENSES: i32 = 5967;
pub const IDS_COOKIES_FILE_SYSTEM: i32 = 5968;
pub const IDS_COOKIES_FILE_SYSTEMS: i32 = 5969;
pub const IDS_COOKIES_FILE_SYSTEM_USAGE_NONE: i32 = 5970;
pub const IDS_COOKIES_LAST_ACCESSED_LABEL: i32 = 5971;
pub const IDS_COOKIES_CHANNEL_ID: i32 = 5972;
pub const IDS_COOKIES_CHANNEL_IDS: i32 = 5973;
pub const IDS_COOKIES_SERVICE_WORKER: i32 = 5974;
pub const IDS_COOKIES_SERVICE_WORKERS: i32 = 5975;
pub const IDS_COOKIES_SHARED_WORKERS: i32 = 5976;
pub const IDS_COOKIES_CACHE_STORAGE: i32 = 5977;
pub const IDS_CLIENT_CERT_ECDSA_SIGN: i32 = 5978;
pub const IDS_APP_DEFAULT_PAGE_NAME: i32 = 5979;
pub const IDS_APP_LAUNCHER_TAB_TITLE: i32 = 5980;
pub const IDS_NEW_TAB_GUEST_SESSION_HEADING: i32 = 5981;
pub const IDS_NEW_TAB_GUEST_SESSION_DESCRIPTION: i32 = 5982;
pub const IDS_NEW_TAB_TILE_GRID_ACCESSIBLE_DESCRIPTION: i32 = 5983;
pub const IDS_NEW_TAB_APP_INSTALL_HINT_LABEL: i32 = 5984;
pub const IDS_NEW_TAB_MOST_VISITED: i32 = 231;
pub const IDS_NEW_TAB_RESTORE_THUMBNAILS_SHORT_LINK: i32 = 228;
pub const IDS_NEW_TAB_ATTRIBUTION_INTRO: i32 = 229;
pub const IDS_NEW_TAB_THUMBNAIL_REMOVED_NOTIFICATION: i32 = 5985;
pub const IDS_NEW_TAB_REMOVE_THUMBNAIL_TOOLTIP: i32 = 226;
pub const IDS_NEW_TAB_PAGE_SWITCHER_CHANGE_TITLE: i32 = 5986;
pub const IDS_NEW_TAB_PAGE_SWITCHER_SAME_TITLE: i32 = 5987;
pub const IDS_NEW_TAB_VOICE_AUDIO_ERROR: i32 = 266;
pub const IDS_NEW_TAB_VOICE_CLOSE_TOOLTIP: i32 = 5988;
pub const IDS_NEW_TAB_VOICE_DETAILS: i32 = 267;
pub const IDS_NEW_TAB_VOICE_LANGUAGE_ERROR: i32 = 270;
pub const IDS_NEW_TAB_VOICE_LISTENING: i32 = 271;
pub const IDS_NEW_TAB_VOICE_NETWORK_ERROR: i32 = 272;
pub const IDS_NEW_TAB_VOICE_NO_TRANSLATION: i32 = 273;
pub const IDS_NEW_TAB_VOICE_NO_VOICE: i32 = 274;
pub const IDS_NEW_TAB_VOICE_OTHER_ERROR: i32 = 279;
pub const IDS_NEW_TAB_VOICE_PERMISSION_ERROR: i32 = 275;
pub const IDS_NEW_TAB_VOICE_READY: i32 = 276;
pub const IDS_NEW_TAB_VOICE_TRY_AGAIN: i32 = 277;
pub const IDS_NEW_TAB_VOICE_WAITING: i32 = 278;
pub const IDS_NEW_TAB_APP_OPTIONS: i32 = 5989;
pub const IDS_NEW_TAB_APP_DETAILS: i32 = 5990;
pub const IDS_NEW_TAB_APP_CREATE_SHORTCUT: i32 = 5991;
pub const IDS_NEW_TAB_APP_INSTALL_LOCALLY: i32 = 5992;
pub const IDS_APP_CONTEXT_MENU_SHOW_INFO: i32 = 5993;
pub const IDS_APP_CONTEXT_MENU_OPEN_PINNED: i32 = 5994;
pub const IDS_APP_CONTEXT_MENU_OPEN_REGULAR: i32 = 5995;
pub const IDS_APP_CONTEXT_MENU_OPEN_WINDOW: i32 = 5996;
pub const IDS_APP_CONTEXT_MENU_OPEN_FULLSCREEN: i32 = 5997;
pub const IDS_APP_CONTEXT_MENU_OPEN_MAXIMIZED: i32 = 5998;
pub const IDS_APP_CONTEXT_MENU_OPEN_TAB: i32 = 5999;
pub const IDS_SYNC_CONFIRMATION_TITLE: i32 = 6002;
pub const IDS_SYNC_CONFIRMATION_SYNC_INFO_TITLE: i32 = 6003;
pub const IDS_SYNC_CONFIRMATION_SYNC_INFO_DESC: i32 = 6004;
pub const IDS_SYNC_CONFIRMATION_SETTINGS_INFO: i32 = 6005;
pub const IDS_SYNC_CONFIRMATION_CONFIRM_BUTTON_LABEL: i32 = 6006;
pub const IDS_SYNC_CONFIRMATION_SETTINGS_BUTTON_LABEL: i32 = 6007;
pub const IDS_SYNC_DISABLED_CONFIRMATION_CHROME_SYNC_TITLE: i32 = 6008;
pub const IDS_SYNC_DISABLED_CONFIRMATION_DETAILS: i32 = 6009;
pub const IDS_SYNC_DISABLED_CONFIRMATION_CONFIRM_BUTTON_LABEL: i32 = 6010;
pub const IDS_SYNC_DISABLED_CONFIRMATION_UNDO_BUTTON_LABEL: i32 = 6011;
pub const IDS_SIGNIN_ERROR_TITLE: i32 = 6012;
pub const IDS_SIGNIN_ERROR_EMAIL_TITLE: i32 = 6013;
pub const IDS_SIGNIN_ERROR_DICE_EMAIL_TITLE: i32 = 6014;
pub const IDS_SIGNIN_ERROR_CLOSE_BUTTON_LABEL: i32 = 6015;
pub const IDS_SIGNIN_ERROR_OK_BUTTON_LABEL: i32 = 6016;
pub const IDS_SIGNIN_ERROR_SWITCH_BUTTON_LABEL: i32 = 6017;
pub const IDS_SIGNIN_ACCESSIBLE_CLOSE_BUTTON: i32 = 6018;
pub const IDS_SIGNIN_ACCESSIBLE_BACK_BUTTON: i32 = 6019;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_CREATE_PROFILE_RADIO_BUTTON_TITLE: i32 = 6020;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_CREATE_PROFILE_RADIO_BUTTON_SUBTITLE: i32 = 6021;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_START_SYNC_RADIO_BUTTON_TITLE: i32 = 6022;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_START_SYNC_RADIO_BUTTON_SUBTITLE: i32 = 6023;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_CLOSE_BUTTON_LABEL: i32 = 6024;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_CONFIRM_BUTTON_LABEL: i32 = 6025;
pub const IDS_PLUGIN_OUTDATED_PROMPT: i32 = 6026;
pub const IDS_PLUGIN_DEPRECATED_PROMPT: i32 = 6027;
pub const IDS_PLUGIN_ENABLE_TEMPORARILY: i32 = 6028;
pub const IDS_PLUGIN_CRASHED_PROMPT: i32 = 6029;
pub const IDS_PLUGIN_DISCONNECTED_PROMPT: i32 = 6030;
pub const IDS_RELOAD_PAGE_WITH_PLUGIN: i32 = 6031;
pub const IDS_PLUGIN_INITIALIZATION_ERROR_PROMPT: i32 = 6032;
pub const IDS_PLUGIN_FLASH_DEPRECATION_PROMPT: i32 = 6033;
pub const IDS_EXTERNAL_PROTOCOL_TITLE: i32 = 6034;
pub const IDS_EXTERNAL_PROTOCOL_OK_BUTTON_TEXT: i32 = 6035;
pub const IDS_EXTERNAL_PROTOCOL_CANCEL_BUTTON_TEXT: i32 = 6036;
pub const IDS_EXTERNAL_PROTOCOL_CHECKBOX_TEXT: i32 = 6037;
pub const IDS_DIRECTORY_LISTING_HEADER: i32 = 6038;
pub const IDS_DIRECTORY_LISTING_PARENT: i32 = 6039;
pub const IDS_DIRECTORY_LISTING_NAME: i32 = 6040;
pub const IDS_DIRECTORY_LISTING_SIZE: i32 = 6041;
pub const IDS_DIRECTORY_LISTING_DATE_MODIFIED: i32 = 6042;
pub const IDS_DIRECTORY_LISTING_PARSING_ERROR_BOX_TEXT: i32 = 6043;
pub const IDS_SAVE_PAGE_DESC_HTML_ONLY: i32 = 6044;
pub const IDS_SAVE_PAGE_DESC_SINGLE_FILE: i32 = 6045;
pub const IDS_SAVE_PAGE_DESC_COMPLETE: i32 = 6046;
pub const IDS_PROFILE_ERROR_DIALOG_TITLE: i32 = 6047;
pub const IDS_COULDNT_OPEN_PROFILE_ERROR: i32 = 6048;
pub const IDS_OPEN_PROFILE_DATA_LOSS: i32 = 6049;
pub const IDS_PROFILE_ERROR_DIALOG_CHECKBOX: i32 = 6050;
pub const IDS_PROFILE_ERROR_FEEDBACK_DESCRIPTION: i32 = 6051;
pub const IDS_COULDNT_STARTUP_PROFILE_ERROR: i32 = 6052;
pub const IDS_REFUSE_TO_RUN_AS_ROOT: i32 = 6053;
pub const IDS_REFUSE_TO_RUN_AS_ROOT_2: i32 = 6054;
pub const IDS_PROFILE_ON_NETWORK_WARNING: i32 = 6055;
pub const IDS_CANT_WRITE_USER_DIRECTORY_TITLE: i32 = 6056;
pub const IDS_MULTI_DOWNLOAD_WARNING: i32 = 6057;
pub const IDS_MULTI_DOWNLOAD_PERMISSION_FRAGMENT: i32 = 6059;
pub const IDS_RECENT_TABS_MENU: i32 = 6060;
pub const IDS_RECENTLY_CLOSED_WINDOW: i32 = 6061;
pub const IDS_RECENT_TABS_NO_DEVICE_TABS: i32 = 6062;
pub const IDS_HISTORY_MENU: i32 = 6063;
pub const IDS_DEFAULT_DOWNLOAD_FILENAME: i32 = 6064;
pub const IDS_DEFAULT_BROWSER_INFOBAR_OK_BUTTON_LABEL: i32 = 6066;
pub const IDS_USED_EXISTING_BROWSER: i32 = 6072;
pub const IDS_DECLINE_RECOVERY: i32 = 6073;
pub const IDS_SYNC_ACCOUNT_INFO: i32 = 6074;
pub const IDS_SYNC_ACCOUNT_SYNCING: i32 = 6075;
pub const IDS_SYNC_ACCOUNT_SYNCING_CUSTOM_DATA_TYPES: i32 = 6076;
pub const IDS_SIGNIN_ERROR_DISPLAY_SOURCE: i32 = 6077;
pub const IDS_SIGNIN_ERROR_BUBBLE_VIEW_TITLE: i32 = 6078;
pub const IDS_SYNC_ERROR_BUBBLE_VIEW_TITLE: i32 = 6079;
pub const IDS_SYNC_ERROR_USER_MENU_TITLE: i32 = 6080;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNIN_MESSAGE: i32 = 6081;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNIN_BUTTON: i32 = 6082;
pub const IDS_SYNC_ERROR_USER_MENU_PASSPHRASE_MESSAGE: i32 = 6083;
pub const IDS_SYNC_ERROR_USER_MENU_PASSPHRASE_BUTTON: i32 = 6084;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNIN_AGAIN_MESSAGE: i32 = 6085;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNIN_AGAIN_BUTTON: i32 = 6086;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNOUT_MESSAGE: i32 = 6087;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNOUT_BUTTON: i32 = 6088;
pub const IDS_SYNC_ERROR_USER_MENU_CONFIRM_SYNC_SETTINGS_BUTTON: i32 = 6089;
pub const IDS_SYNC_UNAVAILABLE_ERROR_BUBBLE_VIEW_ACCEPT: i32 = 6090;
pub const IDS_SYNC_SIGN_IN_ERROR_BUBBLE_VIEW_ACCEPT: i32 = 6091;
pub const IDS_SYNC_SIGN_IN_ERROR_WRENCH_MENU_ITEM: i32 = 6092;
pub const IDS_SYNC_OVERVIEW: i32 = 6093;
pub const IDS_SYNC_START_SYNC_BUTTON_LABEL: i32 = 6094;
pub const IDS_SIGNED_IN_WITH_SYNC_DISABLED_BY_POLICY: i32 = 6095;
pub const IDS_SIGNED_IN_WITH_SYNC_STOPPED_VIA_DASHBOARD: i32 = 6096;
pub const IDS_SYNC_SETTINGS_NOT_CONFIRMED: i32 = 6097;
pub const IDS_SYNC_SETUP_IN_PROGRESS: i32 = 6098;
pub const IDS_SYNC_STATUS_UNRECOVERABLE_ERROR: i32 = 6099;
pub const IDS_SYNC_STATUS_UNRECOVERABLE_ERROR_NEEDS_SIGNOUT: i32 = 6100;
pub const IDS_SYNC_STATUS_NEEDS_PASSWORD: i32 = 6101;
pub const IDS_SYNC_STATUS_NEEDS_PASSWORD_LINK_LABEL: i32 = 6102;
pub const IDS_SYNC_SERVER_IS_UNREACHABLE: i32 = 6103;
pub const IDS_SYNC_RELOGIN_ERROR: i32 = 6104;
pub const IDS_SYNC_RELOGIN_LINK_LABEL: i32 = 6105;
pub const IDS_SYNC_ADVANCED_OPTIONS: i32 = 6109;
pub const IDS_SYNC_FULL_ENCRYPTION_BODY_CUSTOM: i32 = 6111;
pub const IDS_SYNC_FULL_ENCRYPTION_BODY_CUSTOM_WITH_DATE: i32 = 6112;
pub const IDS_SYNC_FULL_ENCRYPTION_BODY_GOOGLE_WITH_DATE: i32 = 6113;
pub const IDS_SYNC_PROMO_NOT_SIGNED_IN_STATUS_HEADER: i32 = 6114;
pub const IDS_SYNC_PROMO_NOT_SIGNED_IN_STATUS_SUB_HEADER: i32 = 6115;
pub const IDS_SYNC_PROMO_NOT_SIGNED_IN_STATUS_LINK: i32 = 6116;
pub const IDS_TRANSLATE_BUBBLE_BEFORE_TRANSLATE_TITLE: i32 = 6117;
pub const IDS_TRANSLATE_BUBBLE_BEFORE_TRANSLATE_NEW: i32 = 6118;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_TITLE: i32 = 6119;
pub const IDS_TRANSLATE_BUBBLE_TRANSLATED_TITLE: i32 = 6120;
pub const IDS_TRANSLATE_BUBBLE_COULD_NOT_TRANSLATE_TITLE: i32 = 6121;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_LINK: i32 = 6122;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_BUTTON: i32 = 6123;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_MENU_BUTTON: i32 = 6124;
pub const IDS_TRANSLATE_BUBBLE_CHANGE_TARGET_LANGUAGE: i32 = 6125;
pub const IDS_TRANSLATE_BUBBLE_CHANGE_SOURCE_LANGUAGE: i32 = 6126;
pub const IDS_TRANSLATE_BUBBLE_ACCEPT: i32 = 6127;
pub const IDS_TRANSLATE_BUBBLE_DENY: i32 = 6128;
pub const IDS_TRANSLATE_BUBBLE_ALWAYS_TRANSLATE_LANG: i32 = 6129;
pub const IDS_TRANSLATE_BUBBLE_NEVER_TRANSLATE_LANG: i32 = 6130;
pub const IDS_TRANSLATE_BUBBLE_NEVER_TRANSLATE_SITE: i32 = 6131;
pub const IDS_TRANSLATE_BUBBLE_TRANSLATING: i32 = 6132;
pub const IDS_TRANSLATE_BUBBLE_TRANSLATED: i32 = 6133;
pub const IDS_TRANSLATE_BUBBLE_REVERT: i32 = 6134;
pub const IDS_TRANSLATE_BUBBLE_TRY_AGAIN: i32 = 6135;
pub const IDS_TRANSLATE_BUBBLE_ALWAYS: i32 = 6136;
pub const IDS_TRANSLATE_BUBBLE_ALWAYS_DO_THIS: i32 = 6137;
pub const IDS_TRANSLATE_BUBBLE_OPTIONS_MENU_BUTTON: i32 = 6138;
pub const IDS_TRANSLATE_BUBBLE_COULD_NOT_TRANSLATE: i32 = 6139;
pub const IDS_TRANSLATE_BUBBLE_PAGE_LANGUAGE: i32 = 6140;
pub const IDS_TRANSLATE_BUBBLE_TRANSLATION_LANGUAGE: i32 = 6141;
pub const IDS_TRANSLATE_BUBBLE_LANGUAGE_SETTINGS: i32 = 6142;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_TARGET: i32 = 6143;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_SOURCE: i32 = 6144;
pub const IDS_TRANSLATE_BUBBLE_UNKNOWN_LANGUAGE: i32 = 6145;
pub const IDS_TRANSLATE_BUBBLE_RESET: i32 = 6146;
pub const IDS_NOTIFICATIONS_INFOBAR_TEXT: i32 = 6147;
pub const IDS_NOTIFICATION_PERMISSIONS_FRAGMENT: i32 = 6149;
pub const IDS_NOTIFICATION_BUTTON_SETTINGS: i32 = 6150;
pub const IDS_NOTIFICATION_BUTTON_CLOSE: i32 = 6151;
pub const IDS_NOTIFICATION_BUTTON_MORE: i32 = 6152;
pub const IDS_NOTIFICATION_REPLY_PLACEHOLDER: i32 = 6153;
pub const IDS_GEOLOCATION_INFOBAR_TEXT: i32 = 6278;
pub const IDS_GEOLOCATION_INFOBAR_PERMISSION_FRAGMENT: i32 = 6280;
pub const IDS_GEOLOCATION_BUBBLE_SECTION_ALLOWED: i32 = 6281;
pub const IDS_GEOLOCATION_BUBBLE_SECTION_DENIED: i32 = 6282;
pub const IDS_GEOLOCATION_BUBBLE_REQUIRE_RELOAD_TO_CLEAR: i32 = 6283;
pub const IDS_GEOLOCATION_BUBBLE_CLEAR_LINK: i32 = 6284;
pub const IDS_GEOLOCATION_BUBBLE_MANAGE_LINK: i32 = 6285;
pub const IDS_GEOLOCATION_ALLOWED_TOOLTIP: i32 = 6286;
pub const IDS_GEOLOCATION_BLOCKED_TOOLTIP: i32 = 6287;
pub const IDS_MIDI_SYSEX_INFOBAR_TEXT: i32 = 6288;
pub const IDS_MIDI_SYSEX_PERMISSION_FRAGMENT: i32 = 6290;
pub const IDS_MIDI_SYSEX_ALLOWED_TOOLTIP: i32 = 6291;
pub const IDS_MIDI_SYSEX_BLOCKED_TOOLTIP: i32 = 6292;
pub const IDS_MIDI_SYSEX_BUBBLE_ALLOWED: i32 = 6293;
pub const IDS_MIDI_SYSEX_BUBBLE_DENIED: i32 = 6294;
pub const IDS_MIDI_SYSEX_BUBBLE_REQUIRE_RELOAD_TO_CLEAR: i32 = 6295;
pub const IDS_MIDI_SYSEX_BUBBLE_CLEAR_LINK: i32 = 6296;
pub const IDS_MIDI_SYSEX_BUBBLE_MANAGE_LINK: i32 = 6297;
pub const IDS_REGISTER_PROTOCOL_HANDLER_TOOLTIP: i32 = 218;
pub const IDS_MEDIASTREAM_BUBBLE_MANAGE_LINK: i32 = 6298;
pub const IDS_MICROPHONE_CAMERA_ALLOWED: i32 = 6299;
pub const IDS_MICROPHONE_CAMERA_BLOCKED: i32 = 6300;
pub const IDS_MICROPHONE_ACCESSED: i32 = 6301;
pub const IDS_CAMERA_ACCESSED: i32 = 6302;
pub const IDS_MICROPHONE_BLOCKED: i32 = 6303;
pub const IDS_CAMERA_BLOCKED: i32 = 6304;
pub const IDS_MICROPHONE_CAMERA_ALLOWED_TITLE: i32 = 6305;
pub const IDS_MICROPHONE_CAMERA_BLOCKED_TITLE: i32 = 6306;
pub const IDS_MICROPHONE_ACCESSED_TITLE: i32 = 6307;
pub const IDS_CAMERA_ACCESSED_TITLE: i32 = 6308;
pub const IDS_MICROPHONE_BLOCKED_TITLE: i32 = 6309;
pub const IDS_CAMERA_BLOCKED_TITLE: i32 = 6310;
pub const IDS_MEDIASTREAM_SETTING_CHANGED_MESSAGE: i32 = 6311;
pub const IDS_MANAGE_PASSWORDS_CONFIRM_GENERATED_TEXT: i32 = 6325;
pub const IDS_PASSWORDS_WEB_LINK: i32 = 6326;
pub const IDS_MANAGE_PASSWORDS_LINK: i32 = 6328;
pub const IDS_MANAGE_PASSWORDS_TITLE: i32 = 6329;
pub const IDS_MANAGE_PASSWORDS_NO_PASSWORDS_TITLE: i32 = 6330;
pub const IDS_MANAGE_PASSWORDS_DIFFERENT_DOMAIN_TITLE: i32 = 6331;
pub const IDS_MANAGE_PASSWORDS_DIFFERENT_DOMAIN_NO_PASSWORDS_TITLE: i32 = 6332;
pub const IDS_MANAGE_PASSWORDS_DELETED: i32 = 6333;
pub const IDS_MANAGE_PASSWORDS_UNDO: i32 = 6334;
pub const IDS_MANAGE_PASSWORDS_UNDO_TOOLTIP: i32 = 6335;
pub const IDS_MANAGE_PASSWORDS_DELETE: i32 = 6336;
pub const IDS_MANAGE_PASSWORDS_SHOW_PASSWORD: i32 = 6337;
pub const IDS_MANAGE_PASSWORDS_HIDE_PASSWORD: i32 = 6338;
pub const IDS_MANAGE_PASSWORDS_AUTO_SIGNIN_TITLE_MD: i32 = 6339;
pub const IDS_AUTO_SIGNIN_FIRST_RUN_TITLE_MANY_DEVICES: i32 = 6340;
pub const IDS_AUTO_SIGNIN_FIRST_RUN_TITLE_LOCAL_DEVICE: i32 = 6341;
pub const IDS_AUTO_SIGNIN_FIRST_RUN_TEXT: i32 = 6342;
pub const IDS_AUTO_SIGNIN_FIRST_RUN_OK: i32 = 6343;
pub const IDS_FILE_SELECTION_DIALOG_INFOBAR: i32 = 6352;
pub const IDS_IMAGE_FILES: i32 = 6355;
pub const IDS_AUDIO_FILES: i32 = 6356;
pub const IDS_VIDEO_FILES: i32 = 6357;
pub const IDS_CUSTOM_FILES: i32 = 6358;
pub const IDS_FULLSCREEN_USER_ENTERED_FULLSCREEN: i32 = 6359;
pub const IDS_FULLSCREEN_EXTENSION_TRIGGERED_FULLSCREEN: i32 = 6360;
pub const IDS_FULLSCREEN_UNKNOWN_EXTENSION_TRIGGERED_FULLSCREEN: i32 = 6361;
pub const IDS_FULLSCREEN_SITE_ENTERED_FULLSCREEN: i32 = 6362;
pub const IDS_FULLSCREEN_ENTERED_FULLSCREEN: i32 = 6363;
pub const IDS_FULLSCREEN_SITE_ENTERED_FULLSCREEN_MOUSELOCK: i32 = 6364;
pub const IDS_FULLSCREEN_ENTERED_FULLSCREEN_MOUSELOCK: i32 = 6365;
pub const IDS_FULLSCREEN_SITE_ENTERED_MOUSELOCK: i32 = 6366;
pub const IDS_FULLSCREEN_ENTERED_MOUSELOCK: i32 = 6367;
pub const IDS_FULLSCREEN_PRESS_ESC_TO_EXIT_FULLSCREEN: i32 = 6368;
pub const IDS_FULLSCREEN_PRESS_ESC_TO_EXIT_MOUSELOCK: i32 = 6369;
pub const IDS_FULLSCREEN_HOLD_ESC_TO_EXIT_FULLSCREEN: i32 = 6370;
pub const IDS_REGISTER_PROTOCOL_HANDLER_MAILTO_NAME: i32 = 6371;
pub const IDS_REGISTER_PROTOCOL_HANDLER_WEBCAL_NAME: i32 = 6372;
pub const IDS_REGISTER_PROTOCOL_HANDLER_CONFIRM: i32 = 6373;
pub const IDS_REGISTER_PROTOCOL_HANDLER_CONFIRM_REPLACE: i32 = 6374;
pub const IDS_REGISTER_PROTOCOL_HANDLER_CONFIRM_FRAGMENT: i32 = 6375;
pub const IDS_REGISTER_PROTOCOL_HANDLER_CONFIRM_REPLACE_FRAGMENT: i32 = 6376;
pub const IDS_REGISTER_PROTOCOL_HANDLER_ACCEPT: i32 = 6377;
pub const IDS_REGISTER_PROTOCOL_HANDLER_DENY: i32 = 6378;
pub const IDS_REGISTER_PROTOCOL_HANDLER_IGNORE: i32 = 6379;
pub const IDS_MEDIA_CAPTURE_AUDIO_AND_VIDEO_INFOBAR_TEXT: i32 = 6380;
pub const IDS_MEDIA_CAPTURE_AUDIO_ONLY_INFOBAR_TEXT: i32 = 6381;
pub const IDS_MEDIA_CAPTURE_VIDEO_ONLY_INFOBAR_TEXT: i32 = 6382;
pub const IDS_MEDIA_CAPTURE_SCREEN_INFOBAR_TEXT: i32 = 6383;
pub const IDS_MEDIA_CAPTURE_AUDIO_ONLY_PERMISSION_FRAGMENT: i32 = 6384;
pub const IDS_MEDIA_CAPTURE_VIDEO_ONLY_PERMISSION_FRAGMENT: i32 = 6385;
pub const IDS_SENSORS_ALLOWED_TOOLTIP: i32 = 6389;
pub const IDS_MOTION_SENSORS_ALLOWED_TOOLTIP: i32 = 6390;
pub const IDS_SENSORS_BLOCKED_TOOLTIP: i32 = 6391;
pub const IDS_MOTION_SENSORS_BLOCKED_TOOLTIP: i32 = 6392;
pub const IDS_BLOCKED_SENSORS_UNBLOCK: i32 = 6393;
pub const IDS_BLOCKED_SENSORS_NO_ACTION: i32 = 6394;
pub const IDS_ALLOWED_SENSORS_TITLE: i32 = 6395;
pub const IDS_BLOCKED_SENSORS_TITLE: i32 = 6396;
pub const IDS_ALLOWED_SENSORS_MESSAGE: i32 = 6397;
pub const IDS_ALLOWED_MOTION_SENSORS_MESSAGE: i32 = 6398;
pub const IDS_BLOCKED_SENSORS_MESSAGE: i32 = 6399;
pub const IDS_BLOCKED_MOTION_SENSORS_MESSAGE: i32 = 6400;
pub const IDS_ALLOWED_SENSORS_NO_ACTION: i32 = 6401;
pub const IDS_ALLOWED_SENSORS_BLOCK: i32 = 6402;
pub const IDS_REQUEST_QUOTA_INFOBAR_TEXT: i32 = 6403;
pub const IDS_REQUEST_LARGE_QUOTA_INFOBAR_TEXT: i32 = 6404;
pub const IDS_REQUEST_QUOTA_PERMISSION_FRAGMENT: i32 = 6406;
pub const IDS_HIGH_CONTRAST_TITLE: i32 = 6411;
pub const IDS_HIGH_CONTRAST_HEADER: i32 = 6412;
pub const IDS_HIGH_CONTRAST_EXT: i32 = 6413;
pub const IDS_DARK_THEME: i32 = 6414;
pub const IDS_METRO_FLOW_DESCRIPTION: i32 = 6415;
pub const IDS_METRO_FLOW_SET_DEFAULT: i32 = 6416;
pub const IDS_MEDIA_GALLERIES_DIALOG_HEADER: i32 = 6417;
pub const IDS_MEDIA_GALLERIES_DIALOG_SUBTEXT_READ_WRITE: i32 = 6418;
pub const IDS_MEDIA_GALLERIES_DIALOG_SUBTEXT_READ_DELETE: i32 = 6419;
pub const IDS_MEDIA_GALLERIES_DIALOG_SUBTEXT_READ_ONLY: i32 = 6420;
pub const IDS_MEDIA_GALLERIES_PERMISSION_SUGGESTIONS: i32 = 6421;
pub const IDS_MEDIA_GALLERIES_LAST_ATTACHED: i32 = 6422;
pub const IDS_MEDIA_GALLERIES_DIALOG_ADD_GALLERY: i32 = 6423;
pub const IDS_MEDIA_GALLERIES_DIALOG_CANCEL: i32 = 6424;
pub const IDS_MEDIA_GALLERIES_DIALOG_CONFIRM: i32 = 6425;
pub const IDS_MEDIA_GALLERIES_DIALOG_ADD_GALLERY_TITLE: i32 = 6426;
pub const IDS_MEDIA_GALLERIES_DIALOG_DEVICE_ATTACHED: i32 = 6427;
pub const IDS_MEDIA_GALLERIES_DIALOG_DEVICE_NOT_ATTACHED: i32 = 6428;
pub const IDS_MEDIA_GALLERIES_DIALOG_DELETE: i32 = 6429;
pub const IDS_CHROME_SHORTCUT_DESCRIPTION: i32 = 6447;
pub const IDS_WEBSTORE_NAME_STORE: i32 = 173;
pub const IDS_DESKTOP_MEDIA_PICKER_TITLE: i32 = 6448;
pub const IDS_DESKTOP_MEDIA_PICKER_TITLE_SCREEN_ONLY: i32 = 6449;
pub const IDS_DESKTOP_MEDIA_PICKER_TITLE_WINDOW_ONLY: i32 = 6450;
pub const IDS_DESKTOP_MEDIA_PICKER_TEXT: i32 = 6451;
pub const IDS_DESKTOP_MEDIA_PICKER_TEXT_DELEGATED: i32 = 6452;
pub const IDS_DESKTOP_MEDIA_PICKER_AUDIO_SHARE: i32 = 6453;
pub const IDS_DESKTOP_MEDIA_PICKER_SOURCE_TYPE_SCREEN: i32 = 6454;
pub const IDS_DESKTOP_MEDIA_PICKER_SOURCE_TYPE_WINDOW: i32 = 6455;
pub const IDS_DESKTOP_MEDIA_PICKER_SINGLE_SCREEN_NAME: i32 = 6456;
pub const IDS_DESKTOP_MEDIA_PICKER_MULTIPLE_SCREEN_NAME: i32 = 6457;
pub const IDS_LOCAL_DISCOVERY_REGISTER_CANCELED_ON_PRINTER: i32 = 6490;
pub const IDS_LOCAL_DISCOVERY_REGISTER_TIMEOUT_ON_PRINTER: i32 = 6491;
pub const IDS_CLOUD_PRINT_REGISTER_PRINTER_INFORMATION: i32 = 6492;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_MEDIA_RECORDING: i32 = 6493;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_TAB_CAPTURING: i32 = 6494;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_AUDIO_PLAYING: i32 = 6495;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_AUDIO_MUTING: i32 = 6496;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_BLUETOOTH_CONNECTED: i32 = 6497;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_USB_CONNECTED: i32 = 6498;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_SERIAL_CONNECTED: i32 = 6499;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_PIP_PLAYING: i32 = 6500;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_DESKTOP_CAPTURING: i32 = 6501;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_VR_PRESENTING: i32 = 6502;
pub const IDS_TAB_AX_LABEL_MEDIA_RECORDING_FORMAT: i32 = 6503;
pub const IDS_TAB_AX_LABEL_TAB_CAPTURING_FORMAT: i32 = 6504;
pub const IDS_TAB_AX_LABEL_PIP_PLAYING_FORMAT: i32 = 6505;
pub const IDS_TAB_AX_LABEL_AUDIO_PLAYING_FORMAT: i32 = 6506;
pub const IDS_TAB_AX_LABEL_AUDIO_MUTING_FORMAT: i32 = 6507;
pub const IDS_TAB_AX_LABEL_BLUETOOTH_CONNECTED_FORMAT: i32 = 6508;
pub const IDS_TAB_AX_LABEL_USB_CONNECTED_FORMAT: i32 = 6509;
pub const IDS_TAB_AX_LABEL_SERIAL_CONNECTED_FORMAT: i32 = 6510;
pub const IDS_TAB_AX_LABEL_NETWORK_ERROR_FORMAT: i32 = 6511;
pub const IDS_TAB_AX_LABEL_CRASHED_FORMAT: i32 = 6512;
pub const IDS_TAB_AX_LABEL_DESKTOP_CAPTURING_FORMAT: i32 = 6513;
pub const IDS_TAB_AX_LABEL_VR_PRESENTING: i32 = 6514;
pub const IDS_PROFILE_IN_USE_LINUX_QUIT: i32 = 6515;
pub const IDS_PROFILE_IN_USE_LINUX_RELAUNCH: i32 = 6516;
pub const IDS_DESKTOP_MEDIA_PICKER_SHARE: i32 = 6526;
pub const IDS_PUSH_MESSAGING_GENERIC_NOTIFICATION_BODY: i32 = 6527;
pub const IDS_DEVICE_PERMISSIONS_DIALOG_SELECT: i32 = 6528;
pub const IDS_DEVICE_LOG_TITLE: i32 = 6529;
pub const IDS_DEVICE_AUTO_REFRESH: i32 = 6530;
pub const IDS_DEVICE_LOG_REFRESH: i32 = 6531;
pub const IDS_DEVICE_LOG_CLEAR: i32 = 6532;
pub const IDS_DEVICE_LOG_NO_ENTRIES: i32 = 6533;
pub const IDS_DEVICE_LOG_LEVEL_SHOW: i32 = 6534;
pub const IDS_DEVICE_LOG_LEVEL_ERROR: i32 = 6535;
pub const IDS_DEVICE_LOG_LEVEL_USER: i32 = 6536;
pub const IDS_DEVICE_LOG_LEVEL_EVENT: i32 = 6537;
pub const IDS_DEVICE_LOG_LEVEL_DEBUG: i32 = 6538;
pub const IDS_DEVICE_LOG_TYPE_LOGIN: i32 = 6539;
pub const IDS_DEVICE_LOG_TYPE_NETWORK: i32 = 6540;
pub const IDS_DEVICE_LOG_TYPE_POWER: i32 = 6541;
pub const IDS_DEVICE_LOG_TYPE_BLUETOOTH: i32 = 6542;
pub const IDS_DEVICE_LOG_TYPE_USB: i32 = 6543;
pub const IDS_DEVICE_LOG_TYPE_HID: i32 = 6544;
pub const IDS_DEVICE_LOG_TYPE_PRINTER: i32 = 6545;
pub const IDS_DEVICE_LOG_TYPE_FIDO: i32 = 6546;
pub const IDS_DEVICE_LOG_FILEINFO: i32 = 6547;
pub const IDS_DEVICE_LOG_TIME_DETAIL: i32 = 6548;
pub const IDS_DEVICE_LOG_ENTRY: i32 = 6549;
pub const IDS_WEBUSB_DEVICE_DETECTED_NOTIFICATION: i32 = 6555;
pub const IDS_WEBUSB_DEVICE_DETECTED_NOTIFICATION_TITLE: i32 = 6556;
pub const IDS_DEFAULT_AUDIO_DEVICE_NAME: i32 = 6562;
pub const IDS_COMMUNICATIONS_AUDIO_DEVICE_NAME: i32 = 6563;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_PROMPT_ORIGIN: i32 = 6564;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_PROMPT_EXTENSION_NAME: i32 = 6565;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_NO_DEVICES_FOUND_PROMPT: i32 = 6566;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_TURN_ADAPTER_OFF: i32 = 6567;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_TURN_ON_BLUETOOTH_LINK_TEXT: i32 = 6568;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_SCANNING: i32 = 6569;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_RE_SCAN: i32 = 6570;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_RE_SCAN_TOOLTIP: i32 = 6571;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_SCANNING_LABEL: i32 = 6572;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_SCANNING_LABEL_TOOLTIP: i32 = 6573;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_PAIR_BUTTON_TEXT: i32 = 6574;
pub const IDS_DEVICE_CHOOSER_GET_HELP_LINK_WITH_SCANNING_STATUS: i32 = 6575;
pub const IDS_DEVICE_CHOOSER_GET_HELP_LINK_WITH_RE_SCAN_LINK: i32 = 6576;
pub const IDS_DEVICE_CHOOSER_PAIRED_STATUS_TEXT: i32 = 6577;
pub const IDS_DEVICE_CHOOSER_DEVICE_NAME_AND_PAIRED_STATUS_TEXT: i32 = 6578;
pub const IDS_USB_DEVICE_CHOOSER_PROMPT_ORIGIN: i32 = 6579;
pub const IDS_USB_DEVICE_CHOOSER_PROMPT_EXTENSION_NAME: i32 = 6580;
pub const IDS_DEVICE_CHOOSER_DEVICE_NAME_WITH_ID: i32 = 6581;
pub const IDS_DEVICE_CHOOSER_NO_DEVICES_FOUND_PROMPT: i32 = 6582;
pub const IDS_USB_DEVICE_CHOOSER_CONNECT_BUTTON_TEXT: i32 = 6583;
pub const IDS_DEVICE_CHOOSER_CANCEL_BUTTON_TEXT: i32 = 6584;
pub const IDS_DEVICE_CHOOSER_DEVICE_NAME_UNKNOWN_DEVICE_WITH_VENDOR_NAME: i32 = 6585;
pub const IDS_DEVICE_CHOOSER_DEVICE_NAME_UNKNOWN_DEVICE_WITH_VENDOR_ID_AND_PRODUCT_ID: i32 = 6586;
pub const IDS_BLUETOOTH_SCANNING_PROMPT_NO_DEVICES_FOUND_PROMPT: i32 = 6587;
pub const IDS_BLUETOOTH_SCANNING_PROMPT_ORIGIN: i32 = 6588;
pub const IDS_BLUETOOTH_SCANNING_PROMPT_ALLOW_BUTTON_TEXT: i32 = 6589;
pub const IDS_BLUETOOTH_SCANNING_PROMPT_BLOCK_BUTTON_TEXT: i32 = 6590;
pub const IDS_BLUETOOTH_SCANNING_DEVICE_UNKNOWN: i32 = 6591;
pub const IDS_DEVICE_DESCRIPTION_FOR_PRODUCT_ID_AND_VENDOR_NAME: i32 = 6592;
pub const IDS_DEVICE_DESCRIPTION_FOR_PRODUCT_ID_AND_VENDOR_ID: i32 = 6593;
pub const IDS_DEVICE_DESCRIPTION_FOR_VENDOR_ID: i32 = 6594;
pub const IDS_DEVICE_DESCRIPTION_FOR_VENDOR_NAME: i32 = 6595;
pub const IDS_DEVICE_DESCRIPTION_FOR_ANY_VENDOR: i32 = 6596;
pub const IDS_SERIAL_PORT_CHOOSER_PROMPT_ORIGIN: i32 = 6597;
pub const IDS_SERIAL_PORT_CHOOSER_PROMPT_EXTENSION_NAME: i32 = 6598;
pub const IDS_SERIAL_PORT_CHOOSER_NAME_WITH_PATH: i32 = 6599;
pub const IDS_SERIAL_PORT_CHOOSER_PATH_ONLY: i32 = 6600;
pub const IDS_SERIAL_PORT_CHOOSER_CONNECT_BUTTON_TEXT: i32 = 6601;
pub const IDS_HID_CHOOSER_PROMPT_ORIGIN: i32 = 6602;
pub const IDS_HID_CHOOSER_PROMPT_EXTENSION_NAME: i32 = 6603;
pub const IDS_HID_CHOOSER_ITEM_WITHOUT_NAME: i32 = 6604;
pub const IDS_HID_CHOOSER_ITEM_WITH_NAME: i32 = 6605;
pub const IDS_IME_API_ACTIVATED_WARNING: i32 = 6606;
pub const IDS_IME_API_NEVER_SHOW: i32 = 6607;
pub const IDS_ALWAYS_ALLOW_ADS: i32 = 6608;
pub const IDS_BLOCKED_ADS_INFOBAR_MESSAGE: i32 = 6609;
pub const IDS_BLOCKED_ADS_PROMPT_TITLE: i32 = 6610;
pub const IDS_BLOCKED_ADS_PROMPT_EXPLANATION: i32 = 6611;
pub const IDS_BLOCKED_ADS_PROMPT_TOOLTIP: i32 = 6612;
pub const IDS_HEAVY_AD_INTERVENTION_BUTTON_DETAILS: i32 = 6613;
pub const IDS_HEAVY_AD_INTERVENTION_HEADING: i32 = 6614;
pub const IDS_HEAVY_AD_INTERVENTION_SUMMARY: i32 = 6615;
pub const IDS_UTILITY_PROCESS_UTILITY_WIN_NAME: i32 = 6616;
pub const IDS_UTILITY_PROCESS_QUARANTINE_SERVICE_NAME: i32 = 6617;
pub const IDS_REDIRECT_BLOCKED_MESSAGE: i32 = 6618;
pub const IDS_REDIRECT_BLOCKED_TITLE: i32 = 6619;
pub const IDS_REDIRECT_BLOCKED_TOOLTIP: i32 = 6620;
pub const IDS_WIN10_TOAST_BROWSE_FAST: i32 = 6621;
pub const IDS_WIN10_TOAST_BROWSE_SAFELY: i32 = 6622;
pub const IDS_WIN10_TOAST_BROWSE_SMART: i32 = 6623;
pub const IDS_WIN10_TOAST_SWITCH_FAST: i32 = 6624;
pub const IDS_WIN10_TOAST_SWITCH_SMART: i32 = 6625;
pub const IDS_WIN10_TOAST_SWITCH_SECURE: i32 = 6626;
pub const IDS_WIN10_TOAST_SWITCH_SMART_AND_SECURE: i32 = 6627;
pub const IDS_WIN10_TOAST_RECOMMENDATION: i32 = 6628;
pub const IDS_WIN10_TOAST_OPEN_CHROME: i32 = 6629;
pub const IDS_WIN10_TOAST_NO_THANKS: i32 = 6630;
pub const IDS_NTP_DOWNLOAD_SUGGESTIONS_SECTION_HEADER: i32 = 6633;
pub const IDS_NTP_DOWNLOADS_SUGGESTIONS_SECTION_EMPTY: i32 = 6634;
pub const IDS_CONTROLLED_BY_AUTOMATION: i32 = 6635;
pub const IDS_SECURITY_KEY_ATTESTATION_PERMISSION_FRAGMENT: i32 = 6636;
pub const IDS_VIDEO_CALL_NOTIFICATION_TEXT_2: i32 = 6638;
pub const IDS_AUDIO_CALL_NOTIFICATION_TEXT_2: i32 = 6639;
pub const IDS_VIDEO_AUDIO_CALL_NOTIFICATION_TEXT_2: i32 = 6640;
pub const IDS_VIDEO_CALL_INCOGNITO_NOTIFICATION_TEXT_2: i32 = 6641;
pub const IDS_AUDIO_CALL_INCOGNITO_NOTIFICATION_TEXT_2: i32 = 6642;
pub const IDS_VIDEO_AUDIO_CALL_INCOGNITO_NOTIFICATION_TEXT_2: i32 = 6643;
pub const IDS_DOWNLOAD_OPEN_CONFIRMATION_DIALOG_TITLE: i32 = 6644;
pub const IDS_DOWNLOAD_OPEN_CONFIRMATION_DIALOG_MESSAGE: i32 = 6645;
pub const IDS_CONFIRM_FILE_UPLOAD_TITLE: i32 = 6646;
pub const IDS_CONFIRM_FILE_UPLOAD_TEXT: i32 = 6647;
pub const IDS_CONFIRM_FILE_UPLOAD_OK_BUTTON: i32 = 6648;
pub const IDS_NATIVE_FILE_SYSTEM_WRITE_PERMISSION_FILE_TITLE: i32 = 6649;
pub const IDS_NATIVE_FILE_SYSTEM_WRITE_PERMISSION_DIRECTORY_TITLE: i32 = 6650;
pub const IDS_NATIVE_FILE_SYSTEM_WRITE_PERMISSION_FILE_TEXT: i32 = 6651;
pub const IDS_NATIVE_FILE_SYSTEM_WRITE_PERMISSION_DIRECTORY_TEXT: i32 = 6652;
pub const IDS_NATIVE_FILE_SYSTEM_WRITE_PERMISSION_ALLOW_TEXT: i32 = 6653;
pub const IDS_NATIVE_FILE_SYSTEM_WRITE_USAGE_TOOLTIP: i32 = 6654;
pub const IDS_NATIVE_FILE_SYSTEM_DIRECTORY_USAGE_TOOLTIP: i32 = 6655;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_SINGLE_WRITABLE_FILE_TEXT: i32 = 6656;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_WRITABLE_FILES_TEXT: i32 = 6657;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_SINGLE_WRITABLE_DIRECTORY_TEXT: i32 = 6658;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_WRITABLE_DIRECTORIES_TEXT: i32 = 6659;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_WRITABLE_FILES_AND_DIRECTORIES_TEXT: i32 = 6660;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_SINGLE_READABLE_DIRECTORY_TEXT: i32 = 6661;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_READABLE_DIRECTORIES_TEXT: i32 = 6662;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_READ_AND_WRITE: i32 = 6663;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_SAVE_CHANGES: i32 = 6664;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_VIEW_CHANGES: i32 = 6665;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_BUBBLE_FILES_TEXT: i32 = 6666;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_EXPAND: i32 = 6667;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_COLLAPSE: i32 = 6668;
pub const IDS_NATIVE_FILE_SYSTEM_USAGE_REMOVE_ACCESS: i32 = 6669;
pub const IDS_NATIVE_FILE_SYSTEM_RESTRICTED_DIRECTORY_TITLE: i32 = 6670;
pub const IDS_NATIVE_FILE_SYSTEM_RESTRICTED_DIRECTORY_TEXT: i32 = 6671;
pub const IDS_NATIVE_FILE_SYSTEM_RESTRICTED_DIRECTORY_BUTTON: i32 = 6672;
pub const IDS_NATIVE_FILE_SYSTEM_DIRECTORY_ACCESS_CONFIRMATION_TITLE: i32 = 6673;
pub const IDS_NATIVE_FILE_SYSTEM_DIRECTORY_ACCESS_CONFIRMATION_TEXT: i32 = 6674;
pub const IDS_NATIVE_FILE_SYSTEM_DIRECTORY_ACCESS_ALLOW_BUTTON: i32 = 6675;
pub const IDS_RELAUNCH_ACCEPT_BUTTON: i32 = 6676;
pub const IDS_RELAUNCH_REQUIRED_CANCEL_BUTTON: i32 = 6677;
pub const IDS_WEBAUTHN_GENERIC_TITLE: i32 = 6678;
pub const IDS_WEBAUTHN_WELCOME_SCREEN_TITLE: i32 = 6679;
pub const IDS_WEBAUTHN_WELCOME_SCREEN_DESCRIPTION: i32 = 6680;
pub const IDS_WEBAUTHN_WELCOME_SCREEN_NEXT: i32 = 6681;
pub const IDS_WEBAUTHN_TRANSPORT_SELECTION_TITLE: i32 = 6682;
pub const IDS_WEBAUTHN_TRANSPORT_SELECTION_DESCRIPTION: i32 = 6683;
pub const IDS_WEBAUTHN_TRANSPORT_BLE: i32 = 6684;
pub const IDS_WEBAUTHN_TRANSPORT_USB: i32 = 6685;
pub const IDS_WEBAUTHN_TRANSPORT_NFC: i32 = 6686;
pub const IDS_WEBAUTHN_TRANSPORT_INTERNAL: i32 = 6687;
pub const IDS_WEBAUTHN_TRANSPORT_CABLE: i32 = 6688;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_DIFFERENT_AUTHENTICATOR_WIN: i32 = 6689;
pub const IDS_WEBAUTHN_USB_ACTIVATE_DESCRIPTION: i32 = 6690;
pub const IDS_WEBAUTHN_ERROR_GENERIC_TITLE: i32 = 6691;
pub const IDS_WEBAUTHN_ERROR_WRONG_KEY_TITLE: i32 = 6692;
pub const IDS_WEBAUTHN_ERROR_WRONG_KEY_REGISTER_DESCRIPTION: i32 = 6693;
pub const IDS_WEBAUTHN_ERROR_WRONG_KEY_SIGN_DESCRIPTION: i32 = 6694;
pub const IDS_WEBAUTHN_ERROR_TIMEOUT_DESCRIPTION: i32 = 6695;
pub const IDS_WEBAUTHN_ERROR_INTERNAL_UNRECOGNIZED_TITLE: i32 = 6696;
pub const IDS_WEBAUTHN_ERROR_INTERNAL_UNRECOGNIZED_DESCRIPTION: i32 = 6697;
pub const IDS_WEBAUTHN_ERROR_NO_TRANSPORTS_TITLE: i32 = 6698;
pub const IDS_WEBAUTHN_ERROR_NO_TRANSPORTS_DESCRIPTION: i32 = 6699;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_AUTO_TITLE: i32 = 6700;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_AUTO_DESCRIPTION: i32 = 6701;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_AUTO_NEXT: i32 = 6702;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_MANUAL_TITLE: i32 = 6703;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_MANUAL_DESCRIPTION: i32 = 6704;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_MANUAL_NEXT: i32 = 6705;
pub const IDS_WEBAUTHN_BLE_PAIRING_BEGIN_TITLE: i32 = 6706;
pub const IDS_WEBAUTHN_BLE_PAIRING_BEGIN_DESCRIPTION: i32 = 6707;
pub const IDS_WEBAUTHN_BLE_PAIRING_BEGIN_NEXT: i32 = 6708;
pub const IDS_WEBAUTHN_BLE_ENTER_PAIRING_MODE_TITLE: i32 = 6709;
pub const IDS_WEBAUTHN_BLE_ENTER_PAIRING_MODE_DESCRIPTION: i32 = 6710;
pub const IDS_WEBAUTHN_BLE_DEVICE_SELECTION_TITLE: i32 = 6711;
pub const IDS_WEBAUTHN_BLE_DEVICE_SELECTION_DESCRIPTION: i32 = 6712;
pub const IDS_WEBAUTHN_BLE_DEVICE_SELECTION_SEARCHING_LABEL: i32 = 6713;
pub const IDS_WEBAUTHN_BLE_DEVICE_SELECTION_REMINDER_LABEL: i32 = 6714;
pub const IDS_WEBAUTHN_BLE_PIN_ENTRY_TITLE: i32 = 6715;
pub const IDS_WEBAUTHN_BLE_PIN_ENTRY_DESCRIPTION: i32 = 6716;
pub const IDS_WEBAUTHN_BLE_PIN_ENTRY_PIN_LABEL: i32 = 6717;
pub const IDS_WEBAUTHN_BLE_PIN_ENTRY_NEXT: i32 = 6718;
pub const IDS_WEBAUTHN_BLE_VERIFYING_TITLE: i32 = 6719;
pub const IDS_WEBAUTHN_BLE_ACTIVATE_DESCRIPTION: i32 = 6720;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_LABEL: i32 = 6721;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_USB: i32 = 6722;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_BLE: i32 = 6723;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_ANOTHER_BLE: i32 = 6724;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_NFC: i32 = 6725;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_INTERNAL: i32 = 6726;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_CABLE: i32 = 6727;
pub const IDS_WEBAUTHN_CABLE_ACTIVATE_TITLE: i32 = 6728;
pub const IDS_WEBAUTHN_CABLE_ACTIVATE_DESCRIPTION: i32 = 6729;
pub const IDS_WEBAUTHN_PIN_ENTRY_TITLE: i32 = 6730;
pub const IDS_WEBAUTHN_PIN_ENTRY_DESCRIPTION: i32 = 6731;
pub const IDS_WEBAUTHN_PIN_ENTRY_PIN_LABEL: i32 = 6732;
pub const IDS_WEBAUTHN_PIN_ENTRY_NEXT: i32 = 6733;
pub const IDS_WEBAUTHN_PIN_SETUP_DESCRIPTION: i32 = 6734;
pub const IDS_WEBAUTHN_PIN_SETUP_CONFIRMATION_LABEL: i32 = 6735;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_INVALID_CHARACTERS: i32 = 6736;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_TOO_SHORT: i32 = 6737;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_FAILED_RETRIES: i32 = 6738;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_FAILED: i32 = 6739;
pub const IDS_WEBAUTHN_PIN_SETUP_ERROR_FAILED: i32 = 6740;
pub const IDS_WEBAUTHN_PIN_TAP_AGAIN_DESCRIPTION: i32 = 6741;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_MISMATCH: i32 = 6742;
pub const IDS_WEBAUTHN_CLIENT_PIN_SOFT_BLOCK_DESCRIPTION: i32 = 6743;
pub const IDS_WEBAUTHN_CLIENT_PIN_HARD_BLOCK_DESCRIPTION: i32 = 6744;
pub const IDS_WEBAUTHN_CLIENT_PIN_AUTHENTICATOR_REMOVED_DESCRIPTION: i32 = 6745;
pub const IDS_WEBAUTHN_ACCOUNT_COLUMN: i32 = 6746;
pub const IDS_WEBAUTHN_NAME_COLUMN: i32 = 6747;
pub const IDS_WEBAUTHN_SELECT_ACCOUNT: i32 = 6748;
pub const IDS_WEBAUTHN_UNKNOWN_ACCOUNT: i32 = 6749;
pub const IDS_WEBAUTHN_RESIDENT_KEY_PRIVACY: i32 = 6750;
pub const IDS_WEBAUTHN_ERROR_MISSING_CAPABILITY_TITLE: i32 = 6751;
pub const IDS_WEBAUTHN_ERROR_MISSING_CAPABILITY_DESC: i32 = 6752;
pub const IDS_WEBAUTHN_STORAGE_FULL_DESC: i32 = 6753;
pub const IDS_WEBAUTHN_REQUEST_ATTESTATION_PERMISSION_TITLE: i32 = 6754;
pub const IDS_WEBAUTHN_REQUEST_ATTESTATION_PERMISSION_DESC: i32 = 6755;
pub const IDS_WEBAUTHN_ALLOW_ATTESTATION: i32 = 6756;
pub const IDS_WEBAUTHN_RETRY: i32 = 6757;
pub const IDS_INCOGNITO_PROFILE_MENU_TITLE: i32 = 6761;
pub const IDS_INCOGNITO_WINDOW_COUNT_MESSAGE: i32 = 6762;
pub const IDS_INCOGNITO_PROFILE_MENU_CLOSE_BUTTON: i32 = 6763;
pub const IDS_HATS_BUBBLE_OK_LABEL: i32 = 6764;
pub const IDS_HATS_BUBBLE_TEXT: i32 = 6765;
pub const IDS_SPELLCHECK_DICTIONARY: i32 = 165;
pub const IDS_EXTENSION_WIPEOUT_BUBBLE_WIDTH_CHARS: i32 = 10000;
pub const IDS_EXTENSION_TOOLBAR_REDESIGN_NOTIFICATION_BUBBLE_WIDTH_CHARS: i32 = 10001;
pub const IDS_EDITBOOKMARK_DIALOG_WIDTH_CHARS: i32 = 10002;
pub const IDS_EDITBOOKMARK_DIALOG_HEIGHT_LINES: i32 = 10003;
pub const IDS_DOWNLOAD_BIG_PROGRESS_SIZE: i32 = 10004;
pub const IDS_THEMES_GALLERY_URL: i32 = 10005;
pub const IDS_WEBSTORE_URL: i32 = 224;
pub const IDS_FLASH_STORAGE_URL: i32 = 10006;
pub const IDS_FLASH_GLOBAL_PRIVACY_URL: i32 = 10007;
pub const IDS_FLASH_WEBSITE_PRIVACY_URL: i32 = 10008;
pub const IDS_SYNC_UNRECOVERABLE_ERROR_HELP_URL: i32 = 10009;
pub const IDS_CREATE_SHORTCUTS_DIALOG_WIDTH_CHARS: i32 = 10010;
pub const IDS_METRO_FLOW_WIDTH_CHARS: i32 = 10011;
pub const IDS_METRO_FLOW_HEIGHT_LINES: i32 = 10012;
pub const IDS_MEDIA_GALLERIES_DIALOG_CONTENT_WIDTH_CHARS: i32 = 10013;
pub const IDS_SETTINGS_CLEAR_DATA_MYACTIVITY_URL_IN_DIALOG: i32 = 10017;
pub const IDS_SETTINGS_CLEAR_DATA_MYACTIVITY_URL_IN_HISTORY: i32 = 10018;
pub const IDS_STANDARD_FONT_FAMILY: i32 = 124;
pub const IDS_FIXED_FONT_FAMILY: i32 = 125;
pub const IDS_FIXED_FONT_FAMILY_ALT_WIN: i32 = 126;
pub const IDS_SERIF_FONT_FAMILY: i32 = 127;
pub const IDS_SANS_SERIF_FONT_FAMILY: i32 = 128;
pub const IDS_NTP_FONT_FAMILY: i32 = 307;
pub const IDS_CURSIVE_FONT_FAMILY: i32 = 129;
pub const IDS_FANTASY_FONT_FAMILY: i32 = 130;
pub const IDS_PICTOGRAPH_FONT_FAMILY: i32 = 131;
pub const IDS_STANDARD_FONT_FAMILY_CYRILLIC: i32 = 149;
pub const IDS_FIXED_FONT_FAMILY_ARABIC: i32 = 147;
pub const IDS_FIXED_FONT_FAMILY_CYRILLIC: i32 = 150;
pub const IDS_SANS_SERIF_FONT_FAMILY_ARABIC: i32 = 148;
pub const IDS_SERIF_FONT_FAMILY_CYRILLIC: i32 = 151;
pub const IDS_SANS_SERIF_FONT_FAMILY_CYRILLIC: i32 = 152;
pub const IDS_STANDARD_FONT_FAMILY_GREEK: i32 = 153;
pub const IDS_FIXED_FONT_FAMILY_GREEK: i32 = 154;
pub const IDS_SERIF_FONT_FAMILY_GREEK: i32 = 155;
pub const IDS_SANS_SERIF_FONT_FAMILY_GREEK: i32 = 156;
pub const IDS_STANDARD_FONT_FAMILY_JAPANESE: i32 = 132;
pub const IDS_FIXED_FONT_FAMILY_JAPANESE: i32 = 133;
pub const IDS_SERIF_FONT_FAMILY_JAPANESE: i32 = 134;
pub const IDS_SANS_SERIF_FONT_FAMILY_JAPANESE: i32 = 135;
pub const IDS_STANDARD_FONT_FAMILY_KOREAN: i32 = 136;
pub const IDS_FIXED_FONT_FAMILY_KOREAN: i32 = 157;
pub const IDS_SERIF_FONT_FAMILY_KOREAN: i32 = 137;
pub const IDS_SANS_SERIF_FONT_FAMILY_KOREAN: i32 = 138;
pub const IDS_CURSIVE_FONT_FAMILY_KOREAN: i32 = 158;
pub const IDS_STANDARD_FONT_FAMILY_SIMPLIFIED_HAN: i32 = 139;
pub const IDS_FIXED_FONT_FAMILY_SIMPLIFIED_HAN: i32 = 159;
pub const IDS_SERIF_FONT_FAMILY_SIMPLIFIED_HAN: i32 = 140;
pub const IDS_SANS_SERIF_FONT_FAMILY_SIMPLIFIED_HAN: i32 = 141;
pub const IDS_CURSIVE_FONT_FAMILY_SIMPLIFIED_HAN: i32 = 145;
pub const IDS_STANDARD_FONT_FAMILY_TRADITIONAL_HAN: i32 = 142;
pub const IDS_FIXED_FONT_FAMILY_TRADITIONAL_HAN: i32 = 160;
pub const IDS_SERIF_FONT_FAMILY_TRADITIONAL_HAN: i32 = 143;
pub const IDS_SANS_SERIF_FONT_FAMILY_TRADITIONAL_HAN: i32 = 144;
pub const IDS_CURSIVE_FONT_FAMILY_TRADITIONAL_HAN: i32 = 146;
pub const IDS_MINIMUM_FONT_SIZE: i32 = 163;
pub const IDS_MINIMUM_LOGICAL_FONT_SIZE: i32 = 164;
pub const IDS_PROXY_RESOLVER_DISPLAY_NAME: i32 = 25300;
pub const IDS_TIME_SECS: i32 = 27350;
pub const IDS_TIME_LONG_SECS: i32 = 27351;
pub const IDS_TIME_LONG_SECS_2ND: i32 = 27352;
pub const IDS_TIME_MINS: i32 = 27353;
pub const IDS_TIME_LONG_MINS: i32 = 27354;
pub const IDS_TIME_LONG_MINS_1ST: i32 = 27355;
pub const IDS_TIME_LONG_MINS_2ND: i32 = 27356;
pub const IDS_TIME_HOURS: i32 = 27357;
pub const IDS_TIME_HOURS_1ST: i32 = 27358;
pub const IDS_TIME_HOURS_2ND: i32 = 27359;
pub const IDS_TIME_DAYS: i32 = 27360;
pub const IDS_TIME_DAYS_1ST: i32 = 27361;
pub const IDS_TIME_MONTHS: i32 = 27362;
pub const IDS_TIME_YEARS: i32 = 27363;
pub const IDS_TIME_REMAINING_SECS: i32 = 27364;
pub const IDS_TIME_REMAINING_LONG_SECS: i32 = 27365;
pub const IDS_TIME_REMAINING_MINS: i32 = 27366;
pub const IDS_TIME_REMAINING_LONG_MINS: i32 = 27367;
pub const IDS_TIME_REMAINING_HOURS: i32 = 27368;
pub const IDS_TIME_REMAINING_DAYS: i32 = 27369;
pub const IDS_TIME_REMAINING_MONTHS: i32 = 27370;
pub const IDS_TIME_REMAINING_YEARS: i32 = 27371;
pub const IDS_TIME_ELAPSED_SECS: i32 = 27372;
pub const IDS_TIME_ELAPSED_LONG_SECS: i32 = 27373;
pub const IDS_TIME_ELAPSED_MINS: i32 = 27374;
pub const IDS_TIME_ELAPSED_LONG_MINS: i32 = 27375;
pub const IDS_TIME_ELAPSED_HOURS: i32 = 27376;
pub const IDS_TIME_ELAPSED_DAYS: i32 = 27377;
pub const IDS_TIME_ELAPSED_MONTHS: i32 = 27378;
pub const IDS_TIME_ELAPSED_YEARS: i32 = 27379;
pub const IDS_PAST_TIME_TODAY: i32 = 27380;
pub const IDS_PAST_TIME_YESTERDAY: i32 = 27381;
pub const IDS_APP_MENU_EMPTY_SUBMENU: i32 = 27382;
pub const IDS_APP_UNTITLED_SHORTCUT_FILE_NAME: i32 = 27383;
pub const IDS_APP_SAVEAS_ALL_FILES: i32 = 27384;
pub const IDS_APP_SAVEAS_EXTENSION_FORMAT: i32 = 27385;
pub const IDS_SELECT_UPLOAD_FOLDER_DIALOG_TITLE: i32 = 27386;
pub const IDS_CONTENT_CONTEXT_WRITING_DIRECTION_MENU: i32 = 27394;
pub const IDS_CONTENT_CONTEXT_WRITING_DIRECTION_DEFAULT: i32 = 27395;
pub const IDS_CONTENT_CONTEXT_WRITING_DIRECTION_LTR: i32 = 27396;
pub const IDS_CONTENT_CONTEXT_WRITING_DIRECTION_RTL: i32 = 27397;
pub const IDS_SELECT_FOLDER_DIALOG_TITLE: i32 = 27398;
pub const IDS_SAVE_AS_DIALOG_TITLE: i32 = 27399;
pub const IDS_OPEN_FILE_DIALOG_TITLE: i32 = 27400;
pub const IDS_OPEN_FILES_DIALOG_TITLE: i32 = 27401;
pub const IDS_SAVEAS_ALL_FILES: i32 = 27402;
pub const IDS_SELECT_UPLOAD_FOLDER_DIALOG_UPLOAD_BUTTON: i32 = 27403;
pub const IDS_AX_ACTIVATE_ACTION_VERB: i32 = 27404;
pub const IDS_AX_CHECK_ACTION_VERB: i32 = 27405;
pub const IDS_AX_CLICK_ACTION_VERB: i32 = 27406;
pub const IDS_AX_CLICK_ANCESTOR_ACTION_VERB: i32 = 27407;
pub const IDS_AX_JUMP_ACTION_VERB: i32 = 27408;
pub const IDS_AX_OPEN_ACTION_VERB: i32 = 27409;
pub const IDS_AX_PRESS_ACTION_VERB: i32 = 27410;
pub const IDS_AX_SELECT_ACTION_VERB: i32 = 27411;
pub const IDS_AX_UNCHECK_ACTION_VERB: i32 = 27412;
pub const IDS_APP_ACCNAME_BACK: i32 = 27417;
pub const IDS_APP_ACCNAME_CLOSE: i32 = 184;
pub const IDS_APP_ACCNAME_MINIMIZE: i32 = 181;
pub const IDS_APP_ACCNAME_MAXIMIZE: i32 = 182;
pub const IDS_APP_ACCNAME_RESTORE: i32 = 183;
pub const IDS_APP_ACCNAME_MENU: i32 = 27418;
pub const IDS_APP_ACCNAME_COLOR_CHOOSER_HEX_INPUT: i32 = 27419;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLHERE: i32 = 27420;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLLEFTEDGE: i32 = 27421;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLRIGHTEDGE: i32 = 27422;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLHOME: i32 = 27423;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLEND: i32 = 27424;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLPAGEUP: i32 = 27425;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLPAGEDOWN: i32 = 27426;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLLEFT: i32 = 27427;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLRIGHT: i32 = 27428;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLUP: i32 = 27429;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLDOWN: i32 = 27430;
pub const IDS_APP_UNDO: i32 = 27431;
pub const IDS_APP_CUT: i32 = 27432;
pub const IDS_APP_COPY: i32 = 191;
pub const IDS_APP_PASTE: i32 = 27433;
pub const IDS_APP_DELETE: i32 = 27434;
pub const IDS_APP_SELECT_ALL: i32 = 192;
pub const IDS_CONTENT_CONTEXT_EMOJI: i32 = 27435;
pub const IDS_APP_OK: i32 = 27436;
pub const IDS_APP_CANCEL: i32 = 27437;
pub const IDS_APP_CLOSE: i32 = 27438;
pub const IDS_APP_ESC_KEY: i32 = 27439;
pub const IDS_APP_TAB_KEY: i32 = 27440;
pub const IDS_APP_INSERT_KEY: i32 = 27441;
pub const IDS_APP_HOME_KEY: i32 = 27442;
pub const IDS_APP_DELETE_KEY: i32 = 27443;
pub const IDS_APP_END_KEY: i32 = 27444;
pub const IDS_APP_PAGEUP_KEY: i32 = 27445;
pub const IDS_APP_PAGEDOWN_KEY: i32 = 27446;
pub const IDS_APP_LEFT_ARROW_KEY: i32 = 27447;
pub const IDS_APP_RIGHT_ARROW_KEY: i32 = 27448;
pub const IDS_APP_UP_ARROW_KEY: i32 = 27449;
pub const IDS_APP_DOWN_ARROW_KEY: i32 = 27450;
pub const IDS_APP_ENTER_KEY: i32 = 27451;
pub const IDS_APP_SPACE_KEY: i32 = 27452;
pub const IDS_APP_F1_KEY: i32 = 27453;
pub const IDS_APP_F11_KEY: i32 = 27454;
pub const IDS_APP_BACKSPACE_KEY: i32 = 27455;
pub const IDS_APP_COMMA_KEY: i32 = 27456;
pub const IDS_APP_PERIOD_KEY: i32 = 27457;
pub const IDS_APP_MEDIA_NEXT_TRACK_KEY: i32 = 27458;
pub const IDS_APP_MEDIA_PLAY_PAUSE_KEY: i32 = 27459;
pub const IDS_APP_MEDIA_PREV_TRACK_KEY: i32 = 27460;
pub const IDS_APP_MEDIA_STOP_KEY: i32 = 27461;
pub const IDS_APP_ALT_KEY: i32 = 27462;
pub const IDS_APP_COMMAND_KEY: i32 = 27463;
pub const IDS_APP_CTRL_KEY: i32 = 27464;
pub const IDS_APP_SEARCH_KEY: i32 = 27465;
pub const IDS_APP_SHIFT_KEY: i32 = 27466;
pub const IDS_APP_WINDOWS_KEY: i32 = 27467;
pub const IDS_APP_ACCELERATOR_WITH_MODIFIER: i32 = 27468;
pub const IDS_APP_BYTES: i32 = 27469;
pub const IDS_APP_KIBIBYTES: i32 = 27470;
pub const IDS_APP_MEBIBYTES: i32 = 27471;
pub const IDS_APP_GIBIBYTES: i32 = 27472;
pub const IDS_APP_TEBIBYTES: i32 = 27473;
pub const IDS_APP_PEBIBYTES: i32 = 27474;
pub const IDS_APP_BYTES_PER_SECOND: i32 = 27475;
pub const IDS_APP_KIBIBYTES_PER_SECOND: i32 = 27476;
pub const IDS_APP_MEBIBYTES_PER_SECOND: i32 = 27477;
pub const IDS_APP_GIBIBYTES_PER_SECOND: i32 = 27478;
pub const IDS_APP_TEBIBYTES_PER_SECOND: i32 = 27479;
pub const IDS_APP_PEBIBYTES_PER_SECOND: i32 = 27480;
pub const IDS_MESSAGE_CENTER_ACCESSIBLE_NAME: i32 = 27481;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_ACCESSIBLE_NAME: i32 = 27482;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_ACCESSIBLE_NAME_PLURAL: i32 = 27483;
pub const IDS_MESSAGE_CENTER_EXPAND_NOTIFICATION: i32 = 27484;
pub const IDS_MESSAGE_CENTER_COLLAPSE_NOTIFICATION: i32 = 27485;
pub const IDS_MESSAGE_CENTER_LIST_NOTIFICATION_MESSAGE_WITH_DIVIDER: i32 = 27486;
pub const IDS_MESSAGE_CENTER_LIST_NOTIFICATION_HEADER_OVERFLOW_INDICATOR: i32 = 27487;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_PROGRESS_PERCENTAGE: i32 = 27488;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_CHROMEOS_SYSTEM: i32 = 27489;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_INLINE_REPLY_PLACEHOLDER: i32 = 27490;
pub const IDS_MESSAGE_NOTIFICATION_NOW_STRING_SHORTEST: i32 = 27491;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_MINUTES_SHORTEST: i32 = 27492;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_HOURS_SHORTEST: i32 = 27493;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_DAYS_SHORTEST: i32 = 27494;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_YEARS_SHORTEST: i32 = 27495;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_MINUTES_SHORTEST_FUTURE: i32 = 27496;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_HOURS_SHORTEST_FUTURE: i32 = 27497;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_DAYS_SHORTEST_FUTURE: i32 = 27498;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_YEARS_SHORTEST_FUTURE: i32 = 27499;
pub const IDS_MESSAGE_CENTER_BLOCK_ALL_NOTIFICATIONS_SITE: i32 = 27500;
pub const IDS_MESSAGE_CENTER_BLOCK_ALL_NOTIFICATIONS_APP: i32 = 27501;
pub const IDS_MESSAGE_CENTER_BLOCK_ALL_NOTIFICATIONS: i32 = 27502;
pub const IDS_MESSAGE_CENTER_DONT_BLOCK_NOTIFICATIONS: i32 = 27503;
pub const IDS_MESSAGE_CENTER_SETTINGS_DONE: i32 = 27504;
pub const IDS_MESSAGE_CENTER_CLOSE_NOTIFICATION_BUTTON_ACCESSIBLE_NAME: i32 = 27505;
pub const IDS_MESSAGE_CENTER_CLOSE_NOTIFICATION_BUTTON_TOOLTIP: i32 = 27506;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_SNOOZE_BUTTON_TOOLTIP: i32 = 27507;
pub const IDS_MESSAGE_NOTIFICATION_SETTINGS_BUTTON_ACCESSIBLE_NAME: i32 = 27508;
pub const IDS_MESSAGE_NOTIFICATION_SEND_TAB_TO_SELF_DEVICE_INFO: i32 = 27509;
pub const IDS_MESSAGE_NOTIFICATION_SEND_TAB_TO_SELF_CONFIRMATION_SUCCESS: i32 = 27510;
pub const IDS_MESSAGE_NOTIFICATION_SEND_TAB_TO_SELF_CONFIRMATION_FAILURE_TITLE: i32 = 27511;
pub const IDS_MESSAGE_NOTIFICATION_SEND_TAB_TO_SELF_CONFIRMATION_FAILURE_MESSAGE: i32 = 27512;
pub const IDS_SUGGESTED_APPS_INDICATOR: i32 = 27517;
pub const IDS_FREQUENTLY_USED_INDICATOR: i32 = 27518;
pub const IDS_RECOMMENDED_APPS_INDICATOR: i32 = 27519;
pub const IDS_MOST_LIKELY_INDICATOR: i32 = 27520;
pub const IDS_APP_SUGGESTIONS_INDICATOR: i32 = 27521;
pub const IDS_ALL_APPS_INDICATOR: i32 = 27522;
pub const IDS_APP_LIST_APP_DRAG_LOCATION_ACCESSIBILE_NAME: i32 = 27523;
pub const IDS_APP_LIST_APP_DRAG_CREATE_FOLDER_ACCESSIBILE_NAME: i32 = 27524;
pub const IDS_APP_LIST_APP_DRAG_MOVE_TO_FOLDER_ACCESSIBILE_NAME: i32 = 27525;
pub const IDS_APP_LIST_BACK: i32 = 27526;
pub const IDS_APP_LIST_FOLDER_NAME_PLACEHOLDER: i32 = 27527;
pub const IDS_APP_LIST_SEARCH_BOX_AUTOCOMPLETE: i32 = 27528;
pub const IDS_APP_LIST_FOLDER_BUTTON_ACCESSIBILE_NAME: i32 = 27529;
pub const IDS_APP_LIST_FOLDER_OPEN_FOLDER_ACCESSIBILE_NAME: i32 = 27530;
pub const IDS_APP_LIST_FOLDER_CLOSE_FOLDER_ACCESSIBILE_NAME: i32 = 27531;
pub const IDS_APP_LIST_EXPAND_BUTTON: i32 = 27532;
pub const IDS_APP_LIST_ALL_APPS_ACCESSIBILITY_ANNOUNCEMENT: i32 = 27533;
pub const IDS_APP_LIST_SUGGESTED_APPS_ACCESSIBILITY_ANNOUNCEMENT: i32 = 27534;
pub const IDS_APP_LIST_CLEAR_SEARCHBOX: i32 = 27535;
pub const IDS_SHELF_ALIGNMENT_BOTTOM: i32 = 27536;
pub const IDS_SHELF_ALIGNMENT_LEFT: i32 = 27537;
pub const IDS_SHELF_ALIGNMENT_RIGHT: i32 = 27538;
pub const IDS_SHELF_STATE_ALWAYS_SHOWN: i32 = 27539;
pub const IDS_SHELF_STATE_ALWAYS_HIDDEN: i32 = 27540;
pub const IDS_SHELF_STATE_AUTO_HIDE: i32 = 27541;
pub const IDS_REMOVE_ZERO_STATE_SUGGESTION_TITLE: i32 = 27542;
pub const IDS_REMOVE_ZERO_STATE_SUGGESTION_DETAILS: i32 = 27543;
pub const IDS_REMOVE_SUGGESTION_BUTTON_LABEL: i32 = 27544;
pub const IDS_APP_LIST_START_ASSISTANT: i32 = 27545;
pub const IDS_APP_LIST_START_ASSISTANT_VOICE_QUERY: i32 = 27546;
pub const IDS_APP_LIST_PAGE_SWITCHER: i32 = 27547;
pub const IDS_APP_LIST_CONTINUE_READING_ACCESSIBILE_NAME: i32 = 27548;
pub const IDS_APP_LIST_LEARN_MORE: i32 = 27549;
pub const IDS_APP_LIST_ASSISTANT_PRIVACY_INFO: i32 = 27550;
pub const IDS_APP_LIST_ASSISTANT_PRIVACY_INFO_CLOSE: i32 = 27551;
pub const IDS_APP_ACCESSIBILITY_STAR_RATING_ARC: i32 = 27552;
pub const IDS_APP_ACCESSIBILITY_APP_RECOMMENDATION_ARC: i32 = 27553;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_EXIT_LABEL: i32 = 27554;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_HINT_LABEL_TEXT: i32 = 27555;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_HINT_SUBLABEL_TEXT: i32 = 27556;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_TAP_HERE_LABEL: i32 = 27557;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_FINISH_LABEL: i32 = 27558;
pub const IDS_DISPLAY_NAME_UNKNOWN: i32 = 27559;
pub const IDS_DISPLAY_NAME_INTERNAL: i32 = 27560;
pub const IDS_CROSTINI_USE_LOW_DENSITY: i32 = 27561;
pub const IDS_CROSTINI_USE_HIGH_DENSITY: i32 = 27562;
pub const IDS_CROSTINI_APP_RESTART_BODY: i32 = 27563;
pub const IDS_CROSTINI_APP_RESTART_BUTTON: i32 = 27564;
pub const IDS_CROSTINI_NOT_NOW_BUTTON: i32 = 27565;
pub const IDS_SATURATED_BADGE_CONTENT: i32 = 27566;
pub const IDS_BADGE_UNREAD_NOTIFICATIONS_SATURATED: i32 = 27567;
pub const IDS_BADGE_UNREAD_NOTIFICATIONS_UNSPECIFIED: i32 = 27568;
pub const IDS_BADGE_UNREAD_NOTIFICATIONS: i32 = 27569;
pub const IDS_SEND_TAB_TO_SELF_INFOBAR_MESSAGE: i32 = 27570;
pub const IDS_SEND_TAB_TO_SELF_INFOBAR_MESSAGE_URL: i32 = 27571;
pub const IDS_BROWSER_SHARING_CLICK_TO_CALL_DIALOG_TITLE_LABEL: i32 = 27572;
pub const IDS_BROWSER_SHARING_CLICK_TO_CALL_DIALOG_TITLE_NO_DEVICES: i32 = 27573;
pub const IDS_BROWSER_SHARING_CLICK_TO_CALL_DIALOG_TITLE_FAILED_TO_SEND: i32 = 27574;
pub const IDS_BROWSER_SHARING_CLICK_TO_CALL_DIALOG_HELP_TEXT_NO_DEVICES: i32 = 27575;
pub const IDS_BROWSER_SHARING_CLICK_TO_CALL_DIALOG_TROUBLESHOOT_LINK: i32 = 27576;
pub const IDS_BROWSER_SHARING_CLICK_TO_CALL_DIALOG_FAILED_MESSAGE: i32 = 27577;
pub const IDS_BROWSER_SHARING_CLICK_TO_CALL_DIALOG_SEND_SUCCESS: i32 = 27578;
pub type int64 = ::std::os::raw::c_longlong;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub type int32 = ::std::os::raw::c_int;
pub type uint32 = ::std::os::raw::c_uint;
pub type char16 = u16;
#[repr(C)]
pub struct _cef_string_utf8_t {
    pub str: *mut ::std::os::raw::c_char,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut ::std::os::raw::c_char)>,
}
#[test]
fn bindgen_test_layout__cef_string_utf8_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_utf8_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_string_utf8_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_utf8_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_string_utf8_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).dtor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(dtor)
        )
    );
}
pub type cef_string_utf8_t = _cef_string_utf8_t;
#[repr(C)]
pub struct _cef_string_utf16_t {
    pub str: *mut char16,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut char16)>,
}
#[test]
fn bindgen_test_layout__cef_string_utf16_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_utf16_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_string_utf16_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_utf16_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_string_utf16_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).dtor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(dtor)
        )
    );
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
extern "C" {
    pub fn cef_string_utf16_set(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_clear(str: *mut cef_string_utf16_t);
}
extern "C" {
    pub fn cef_string_utf16_cmp(
        str1: *const cef_string_utf16_t,
        str2: *const cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_utf16(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_utf8(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
extern "C" {
    pub fn cef_string_userfree_utf16_alloc() -> cef_string_userfree_utf16_t;
}
extern "C" {
    pub fn cef_string_userfree_utf16_free(str: cef_string_userfree_utf16_t);
}
extern "C" {
    pub fn cef_string_utf16_to_lower(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_upper(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
pub type cef_string_list_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn cef_string_list_alloc() -> cef_string_list_t;
}
extern "C" {
    pub fn cef_string_list_size(list: cef_string_list_t) -> usize;
}
extern "C" {
    pub fn cef_string_list_value(
        list: cef_string_list_t,
        index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_list_append(list: cef_string_list_t, value: *const cef_string_t);
}
extern "C" {
    pub fn cef_string_list_clear(list: cef_string_list_t);
}
extern "C" {
    pub fn cef_string_list_free(list: cef_string_list_t);
}
extern "C" {
    pub fn cef_string_list_copy(list: cef_string_list_t) -> cef_string_list_t;
}
pub type cef_string_map_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn cef_string_map_alloc() -> cef_string_map_t;
}
extern "C" {
    pub fn cef_string_map_size(map: cef_string_map_t) -> usize;
}
extern "C" {
    pub fn cef_string_map_find(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_key(
        map: cef_string_map_t,
        index: usize,
        key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_value(
        map: cef_string_map_t,
        index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_append(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_clear(map: cef_string_map_t);
}
extern "C" {
    pub fn cef_string_map_free(map: cef_string_map_t);
}
pub type cef_string_multimap_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn cef_string_multimap_alloc() -> cef_string_multimap_t;
}
extern "C" {
    pub fn cef_string_multimap_size(map: cef_string_multimap_t) -> usize;
}
extern "C" {
    pub fn cef_string_multimap_find_count(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
    ) -> usize;
}
extern "C" {
    pub fn cef_string_multimap_enumerate(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
        value_index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_key(
        map: cef_string_multimap_t,
        index: usize,
        key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_value(
        map: cef_string_multimap_t,
        index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_append(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
        value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_multimap_clear(map: cef_string_multimap_t);
}
extern "C" {
    pub fn cef_string_multimap_free(map: cef_string_multimap_t);
}
#[repr(C)]
pub struct _cef_time_t {
    pub year: ::std::os::raw::c_int,
    pub month: ::std::os::raw::c_int,
    pub day_of_week: ::std::os::raw::c_int,
    pub day_of_month: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub minute: ::std::os::raw::c_int,
    pub second: ::std::os::raw::c_int,
    pub millisecond: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_time_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_time_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_time_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_time_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).month as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).day_of_week as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(day_of_week)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).day_of_month as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(day_of_month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).hour as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).minute as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).second as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).millisecond as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(millisecond)
        )
    );
}
pub type cef_time_t = _cef_time_t;
extern "C" {
    pub fn cef_time_to_doublet(
        cef_time: *const cef_time_t,
        time: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_doublet(time: f64, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_now(cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_delta(
        cef_time1: *const cef_time_t,
        cef_time2: *const cef_time_t,
        delta: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
pub type DWORD = ::std::os::raw::c_ulong;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type LONG = ::std::os::raw::c_long;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
#[repr(C)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HWND__() {
    assert_eq!(
        ::std::mem::size_of::<HWND__>(),
        4usize,
        concat!("Size of: ", stringify!(HWND__))
    );
    assert_eq!(
        ::std::mem::align_of::<HWND__>(),
        4usize,
        concat!("Alignment of ", stringify!(HWND__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HWND__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HWND__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HWND = *mut HWND__;
#[repr(C)]
pub struct HICON__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HICON__() {
    assert_eq!(
        ::std::mem::size_of::<HICON__>(),
        4usize,
        concat!("Size of: ", stringify!(HICON__))
    );
    assert_eq!(
        ::std::mem::align_of::<HICON__>(),
        4usize,
        concat!("Alignment of ", stringify!(HICON__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HICON__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HICON__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HICON = *mut HICON__;
#[repr(C)]
pub struct HMENU__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HMENU__() {
    assert_eq!(
        ::std::mem::size_of::<HMENU__>(),
        4usize,
        concat!("Size of: ", stringify!(HMENU__))
    );
    assert_eq!(
        ::std::mem::align_of::<HMENU__>(),
        4usize,
        concat!("Alignment of ", stringify!(HMENU__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HMENU__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HMENU__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HMENU = *mut HMENU__;
pub type HCURSOR = HICON;
#[repr(C)]
pub struct tagPOINT {
    pub x: LONG,
    pub y: LONG,
}
#[test]
fn bindgen_test_layout_tagPOINT() {
    assert_eq!(
        ::std::mem::size_of::<tagPOINT>(),
        8usize,
        concat!("Size of: ", stringify!(tagPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagPOINT>(),
        4usize,
        concat!("Alignment of ", stringify!(tagPOINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(y)
        )
    );
}
pub type POINT = tagPOINT;
#[repr(C)]
pub struct tagMSG {
    pub hwnd: HWND,
    pub message: UINT,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
    pub time: DWORD,
    pub pt: POINT,
}
#[test]
fn bindgen_test_layout_tagMSG() {
    assert_eq!(
        ::std::mem::size_of::<tagMSG>(),
        48usize,
        concat!("Size of: ", stringify!(tagMSG))
    );
    assert_eq!(
        ::std::mem::align_of::<tagMSG>(),
        8usize,
        concat!("Alignment of ", stringify!(tagMSG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).hwnd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).wParam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(wParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).lParam as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(lParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).time as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).pt as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(pt)
        )
    );
}
pub type MSG = tagMSG;
#[repr(C)]
pub struct _cef_main_args_t {
    pub instance: HINSTANCE,
}
#[test]
fn bindgen_test_layout__cef_main_args_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_main_args_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_main_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_main_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_main_args_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_main_args_t>())).instance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_main_args_t),
            "::",
            stringify!(instance)
        )
    );
}
pub type cef_main_args_t = _cef_main_args_t;
#[repr(C)]
pub struct _cef_window_info_t {
    pub ex_style: DWORD,
    pub window_name: cef_string_t,
    pub style: DWORD,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub parent_window: HWND,
    pub menu: HMENU,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub shared_texture_enabled: ::std::os::raw::c_int,
    pub external_begin_frame_enabled: ::std::os::raw::c_int,
    pub window: HWND,
}
#[test]
fn bindgen_test_layout__cef_window_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_window_info_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_window_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_window_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_window_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).ex_style as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(ex_style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).window_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(window_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).style as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).x as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).y as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).width as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).height as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).parent_window as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(parent_window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).menu as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).windowless_rendering_enabled as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(windowless_rendering_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).shared_texture_enabled as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(shared_texture_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).external_begin_frame_enabled as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(external_begin_frame_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).window as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(window)
        )
    );
}
pub type cef_window_info_t = _cef_window_info_t;
pub type cef_color_t = uint32;
pub mod cef_log_severity_t {
    pub type Type = i32;
    pub const LOGSEVERITY_DEFAULT: Type = 0;
    pub const LOGSEVERITY_VERBOSE: Type = 1;
    pub const LOGSEVERITY_DEBUG: Type = 1;
    pub const LOGSEVERITY_INFO: Type = 2;
    pub const LOGSEVERITY_WARNING: Type = 3;
    pub const LOGSEVERITY_ERROR: Type = 4;
    pub const LOGSEVERITY_FATAL: Type = 5;
    pub const LOGSEVERITY_DISABLE: Type = 99;
}
pub mod cef_state_t {
    pub type Type = i32;
    pub const STATE_DEFAULT: Type = 0;
    pub const STATE_ENABLED: Type = 1;
    pub const STATE_DISABLED: Type = 2;
}
#[repr(C)]
pub struct _cef_settings_t {
    pub size: usize,
    pub no_sandbox: ::std::os::raw::c_int,
    pub browser_subprocess_path: cef_string_t,
    pub framework_dir_path: cef_string_t,
    pub main_bundle_path: cef_string_t,
    pub multi_threaded_message_loop: ::std::os::raw::c_int,
    pub external_message_pump: ::std::os::raw::c_int,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub command_line_args_disabled: ::std::os::raw::c_int,
    pub cache_path: cef_string_t,
    pub root_cache_path: cef_string_t,
    pub user_data_path: cef_string_t,
    pub persist_session_cookies: ::std::os::raw::c_int,
    pub persist_user_preferences: ::std::os::raw::c_int,
    pub user_agent: cef_string_t,
    pub product_version: cef_string_t,
    pub locale: cef_string_t,
    pub log_file: cef_string_t,
    pub log_severity: cef_log_severity_t::Type,
    pub javascript_flags: cef_string_t,
    pub resources_dir_path: cef_string_t,
    pub locales_dir_path: cef_string_t,
    pub pack_loading_disabled: ::std::os::raw::c_int,
    pub remote_debugging_port: ::std::os::raw::c_int,
    pub uncaught_exception_stack_size: ::std::os::raw::c_int,
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    pub enable_net_security_expiration: ::std::os::raw::c_int,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
    pub application_client_id_for_file_scanning: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_settings_t>(),
        432usize,
        concat!("Size of: ", stringify!(_cef_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).no_sandbox as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(no_sandbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).browser_subprocess_path as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(browser_subprocess_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).framework_dir_path as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(framework_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).main_bundle_path as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(main_bundle_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).multi_threaded_message_loop as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(multi_threaded_message_loop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).external_message_pump as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(external_message_pump)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).windowless_rendering_enabled as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(windowless_rendering_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).command_line_args_disabled as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(command_line_args_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).cache_path as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(cache_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).root_cache_path as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(root_cache_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).user_data_path as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(user_data_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).persist_session_cookies as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(persist_session_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).persist_user_preferences as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(persist_user_preferences)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).user_agent as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(user_agent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).product_version as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(product_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).locale as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).log_file as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(log_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).log_severity as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(log_severity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).javascript_flags as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(javascript_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).resources_dir_path as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(resources_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).locales_dir_path as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(locales_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).pack_loading_disabled as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(pack_loading_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).remote_debugging_port as *const _ as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(remote_debugging_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).uncaught_exception_stack_size as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(uncaught_exception_stack_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).ignore_certificate_errors as *const _
                as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(ignore_certificate_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).enable_net_security_expiration as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(enable_net_security_expiration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).background_color as *const _ as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).accept_language_list as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(accept_language_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).application_client_id_for_file_scanning
                as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(application_client_id_for_file_scanning)
        )
    );
}
pub type cef_settings_t = _cef_settings_t;
#[repr(C)]
pub struct _cef_request_context_settings_t {
    pub size: usize,
    pub cache_path: cef_string_t,
    pub persist_session_cookies: ::std::os::raw::c_int,
    pub persist_user_preferences: ::std::os::raw::c_int,
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    pub enable_net_security_expiration: ::std::os::raw::c_int,
    pub accept_language_list: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_request_context_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_context_settings_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_request_context_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_context_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_context_settings_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).cache_path as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(cache_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).persist_session_cookies
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(persist_session_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).persist_user_preferences
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(persist_user_preferences)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).ignore_certificate_errors
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(ignore_certificate_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>()))
                .enable_net_security_expiration as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(enable_net_security_expiration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).accept_language_list
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(accept_language_list)
        )
    );
}
pub type cef_request_context_settings_t = _cef_request_context_settings_t;
#[repr(C)]
pub struct _cef_browser_settings_t {
    pub size: usize,
    pub windowless_frame_rate: ::std::os::raw::c_int,
    pub standard_font_family: cef_string_t,
    pub fixed_font_family: cef_string_t,
    pub serif_font_family: cef_string_t,
    pub sans_serif_font_family: cef_string_t,
    pub cursive_font_family: cef_string_t,
    pub fantasy_font_family: cef_string_t,
    pub default_font_size: ::std::os::raw::c_int,
    pub default_fixed_font_size: ::std::os::raw::c_int,
    pub minimum_font_size: ::std::os::raw::c_int,
    pub minimum_logical_font_size: ::std::os::raw::c_int,
    pub default_encoding: cef_string_t,
    pub remote_fonts: cef_state_t::Type,
    pub javascript: cef_state_t::Type,
    pub javascript_close_windows: cef_state_t::Type,
    pub javascript_access_clipboard: cef_state_t::Type,
    pub javascript_dom_paste: cef_state_t::Type,
    pub plugins: cef_state_t::Type,
    pub universal_access_from_file_urls: cef_state_t::Type,
    pub file_access_from_file_urls: cef_state_t::Type,
    pub web_security: cef_state_t::Type,
    pub image_loading: cef_state_t::Type,
    pub image_shrink_standalone_to_fit: cef_state_t::Type,
    pub text_area_resize: cef_state_t::Type,
    pub tab_to_links: cef_state_t::Type,
    pub local_storage: cef_state_t::Type,
    pub databases: cef_state_t::Type,
    pub application_cache: cef_state_t::Type,
    pub webgl: cef_state_t::Type,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_browser_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_settings_t>(),
        296usize,
        concat!("Size of: ", stringify!(_cef_browser_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_browser_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).windowless_frame_rate as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).standard_font_family as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(standard_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).fixed_font_family as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(fixed_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).serif_font_family as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(serif_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).sans_serif_font_family as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(sans_serif_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).cursive_font_family as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(cursive_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).fantasy_font_family as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(fantasy_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_font_size as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_fixed_font_size as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_fixed_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).minimum_font_size as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(minimum_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).minimum_logical_font_size
                as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(minimum_logical_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_encoding as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_encoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).remote_fonts as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(remote_fonts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_close_windows as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_close_windows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_access_clipboard
                as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_access_clipboard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_dom_paste as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_dom_paste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).plugins as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).universal_access_from_file_urls
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(universal_access_from_file_urls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).file_access_from_file_urls
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(file_access_from_file_urls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).web_security as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(web_security)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).image_loading as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(image_loading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).image_shrink_standalone_to_fit
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(image_shrink_standalone_to_fit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).text_area_resize as *const _
                as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(text_area_resize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).tab_to_links as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(tab_to_links)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).local_storage as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(local_storage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).databases as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(databases)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).application_cache as *const _
                as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(application_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).webgl as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(webgl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).background_color as *const _
                as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).accept_language_list as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(accept_language_list)
        )
    );
}
pub type cef_browser_settings_t = _cef_browser_settings_t;
pub mod cef_return_value_t {
    pub type Type = i32;
    pub const RV_CANCEL: Type = 0;
    pub const RV_CONTINUE: Type = 1;
    pub const RV_CONTINUE_ASYNC: Type = 2;
}
#[repr(C)]
pub struct _cef_cookie_t {
    pub name: cef_string_t,
    pub value: cef_string_t,
    pub domain: cef_string_t,
    pub path: cef_string_t,
    pub secure: ::std::os::raw::c_int,
    pub httponly: ::std::os::raw::c_int,
    pub creation: cef_time_t,
    pub last_access: cef_time_t,
    pub has_expires: ::std::os::raw::c_int,
    pub expires: cef_time_t,
}
#[test]
fn bindgen_test_layout__cef_cookie_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_t>(),
        208usize,
        concat!("Size of: ", stringify!(_cef_cookie_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cookie_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).domain as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).path as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).secure as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(secure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).httponly as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(httponly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).creation as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(creation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).last_access as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(last_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).has_expires as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(has_expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).expires as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(expires)
        )
    );
}
pub type cef_cookie_t = _cef_cookie_t;
pub mod cef_termination_status_t {
    pub type Type = i32;
    pub const TS_ABNORMAL_TERMINATION: Type = 0;
    pub const TS_PROCESS_WAS_KILLED: Type = 1;
    pub const TS_PROCESS_CRASHED: Type = 2;
    pub const TS_PROCESS_OOM: Type = 3;
}
pub mod cef_errorcode_t {
    pub type Type = i32;
    pub const ERR_NONE: Type = 0;
    pub const ERR_IO_PENDING: Type = -1;
    pub const ERR_FAILED: Type = -2;
    pub const ERR_ABORTED: Type = -3;
    pub const ERR_INVALID_ARGUMENT: Type = -4;
    pub const ERR_INVALID_HANDLE: Type = -5;
    pub const ERR_FILE_NOT_FOUND: Type = -6;
    pub const ERR_TIMED_OUT: Type = -7;
    pub const ERR_FILE_TOO_BIG: Type = -8;
    pub const ERR_UNEXPECTED: Type = -9;
    pub const ERR_ACCESS_DENIED: Type = -10;
    pub const ERR_NOT_IMPLEMENTED: Type = -11;
    pub const ERR_INSUFFICIENT_RESOURCES: Type = -12;
    pub const ERR_OUT_OF_MEMORY: Type = -13;
    pub const ERR_UPLOAD_FILE_CHANGED: Type = -14;
    pub const ERR_SOCKET_NOT_CONNECTED: Type = -15;
    pub const ERR_FILE_EXISTS: Type = -16;
    pub const ERR_FILE_PATH_TOO_LONG: Type = -17;
    pub const ERR_FILE_NO_SPACE: Type = -18;
    pub const ERR_FILE_VIRUS_INFECTED: Type = -19;
    pub const ERR_BLOCKED_BY_CLIENT: Type = -20;
    pub const ERR_NETWORK_CHANGED: Type = -21;
    pub const ERR_BLOCKED_BY_ADMINISTRATOR: Type = -22;
    pub const ERR_SOCKET_IS_CONNECTED: Type = -23;
    pub const ERR_BLOCKED_ENROLLMENT_CHECK_PENDING: Type = -24;
    pub const ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED: Type = -25;
    pub const ERR_CONTEXT_SHUT_DOWN: Type = -26;
    pub const ERR_BLOCKED_BY_RESPONSE: Type = -27;
    pub const ERR_BLOCKED_BY_XSS_AUDITOR: Type = -28;
    pub const ERR_CLEARTEXT_NOT_PERMITTED: Type = -29;
    pub const ERR_CONNECTION_CLOSED: Type = -100;
    pub const ERR_CONNECTION_RESET: Type = -101;
    pub const ERR_CONNECTION_REFUSED: Type = -102;
    pub const ERR_CONNECTION_ABORTED: Type = -103;
    pub const ERR_CONNECTION_FAILED: Type = -104;
    pub const ERR_NAME_NOT_RESOLVED: Type = -105;
    pub const ERR_INTERNET_DISCONNECTED: Type = -106;
    pub const ERR_SSL_PROTOCOL_ERROR: Type = -107;
    pub const ERR_ADDRESS_INVALID: Type = -108;
    pub const ERR_ADDRESS_UNREACHABLE: Type = -109;
    pub const ERR_SSL_CLIENT_AUTH_CERT_NEEDED: Type = -110;
    pub const ERR_TUNNEL_CONNECTION_FAILED: Type = -111;
    pub const ERR_NO_SSL_VERSIONS_ENABLED: Type = -112;
    pub const ERR_SSL_VERSION_OR_CIPHER_MISMATCH: Type = -113;
    pub const ERR_SSL_RENEGOTIATION_REQUESTED: Type = -114;
    pub const ERR_PROXY_AUTH_UNSUPPORTED: Type = -115;
    pub const ERR_CERT_ERROR_IN_SSL_RENEGOTIATION: Type = -116;
    pub const ERR_BAD_SSL_CLIENT_AUTH_CERT: Type = -117;
    pub const ERR_CONNECTION_TIMED_OUT: Type = -118;
    pub const ERR_HOST_RESOLVER_QUEUE_TOO_LARGE: Type = -119;
    pub const ERR_SOCKS_CONNECTION_FAILED: Type = -120;
    pub const ERR_SOCKS_CONNECTION_HOST_UNREACHABLE: Type = -121;
    pub const ERR_ALPN_NEGOTIATION_FAILED: Type = -122;
    pub const ERR_SSL_NO_RENEGOTIATION: Type = -123;
    pub const ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES: Type = -124;
    pub const ERR_SSL_DECOMPRESSION_FAILURE_ALERT: Type = -125;
    pub const ERR_SSL_BAD_RECORD_MAC_ALERT: Type = -126;
    pub const ERR_PROXY_AUTH_REQUESTED: Type = -127;
    pub const ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY: Type = -129;
    pub const ERR_PROXY_CONNECTION_FAILED: Type = -130;
    pub const ERR_MANDATORY_PROXY_CONFIGURATION_FAILED: Type = -131;
    pub const ERR_PRECONNECT_MAX_SOCKET_LIMIT: Type = -133;
    pub const ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED: Type = -134;
    pub const ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY: Type = -135;
    pub const ERR_PROXY_CERTIFICATE_INVALID: Type = -136;
    pub const ERR_NAME_RESOLUTION_FAILED: Type = -137;
    pub const ERR_NETWORK_ACCESS_DENIED: Type = -138;
    pub const ERR_TEMPORARILY_THROTTLED: Type = -139;
    pub const ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT: Type = -140;
    pub const ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED: Type = -141;
    pub const ERR_MSG_TOO_BIG: Type = -142;
    pub const ERR_WS_PROTOCOL_ERROR: Type = -145;
    pub const ERR_ADDRESS_IN_USE: Type = -147;
    pub const ERR_SSL_HANDSHAKE_NOT_COMPLETED: Type = -148;
    pub const ERR_SSL_BAD_PEER_PUBLIC_KEY: Type = -149;
    pub const ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN: Type = -150;
    pub const ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED: Type = -151;
    pub const ERR_SSL_DECRYPT_ERROR_ALERT: Type = -153;
    pub const ERR_WS_THROTTLE_QUEUE_TOO_LARGE: Type = -154;
    pub const ERR_SSL_SERVER_CERT_CHANGED: Type = -156;
    pub const ERR_SSL_UNRECOGNIZED_NAME_ALERT: Type = -159;
    pub const ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR: Type = -160;
    pub const ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR: Type = -161;
    pub const ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE: Type = -162;
    pub const ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE: Type = -163;
    pub const ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT: Type = -164;
    pub const ERR_ICANN_NAME_COLLISION: Type = -166;
    pub const ERR_SSL_SERVER_CERT_BAD_FORMAT: Type = -167;
    pub const ERR_CT_STH_PARSING_FAILED: Type = -168;
    pub const ERR_CT_STH_INCOMPLETE: Type = -169;
    pub const ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH: Type = -170;
    pub const ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED: Type = -171;
    pub const ERR_SSL_OBSOLETE_CIPHER: Type = -172;
    pub const ERR_WS_UPGRADE: Type = -173;
    pub const ERR_READ_IF_READY_NOT_IMPLEMENTED: Type = -174;
    pub const ERR_NO_BUFFER_SPACE: Type = -176;
    pub const ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS: Type = -177;
    pub const ERR_EARLY_DATA_REJECTED: Type = -178;
    pub const ERR_WRONG_VERSION_ON_EARLY_DATA: Type = -179;
    pub const ERR_TLS13_DOWNGRADE_DETECTED: Type = -180;
    pub const ERR_SSL_KEY_USAGE_INCOMPATIBLE: Type = -181;
    pub const ERR_CERT_COMMON_NAME_INVALID: Type = -200;
    pub const ERR_CERT_DATE_INVALID: Type = -201;
    pub const ERR_CERT_AUTHORITY_INVALID: Type = -202;
    pub const ERR_CERT_CONTAINS_ERRORS: Type = -203;
    pub const ERR_CERT_NO_REVOCATION_MECHANISM: Type = -204;
    pub const ERR_CERT_UNABLE_TO_CHECK_REVOCATION: Type = -205;
    pub const ERR_CERT_REVOKED: Type = -206;
    pub const ERR_CERT_INVALID: Type = -207;
    pub const ERR_CERT_WEAK_SIGNATURE_ALGORITHM: Type = -208;
    pub const ERR_CERT_NON_UNIQUE_NAME: Type = -210;
    pub const ERR_CERT_WEAK_KEY: Type = -211;
    pub const ERR_CERT_NAME_CONSTRAINT_VIOLATION: Type = -212;
    pub const ERR_CERT_VALIDITY_TOO_LONG: Type = -213;
    pub const ERR_CERTIFICATE_TRANSPARENCY_REQUIRED: Type = -214;
    pub const ERR_CERT_SYMANTEC_LEGACY: Type = -215;
    pub const ERR_CERT_END: Type = -216;
    pub const ERR_INVALID_URL: Type = -300;
    pub const ERR_DISALLOWED_URL_SCHEME: Type = -301;
    pub const ERR_UNKNOWN_URL_SCHEME: Type = -302;
    pub const ERR_INVALID_REDIRECT: Type = -303;
    pub const ERR_TOO_MANY_REDIRECTS: Type = -310;
    pub const ERR_UNSAFE_REDIRECT: Type = -311;
    pub const ERR_UNSAFE_PORT: Type = -312;
    pub const ERR_INVALID_RESPONSE: Type = -320;
    pub const ERR_INVALID_CHUNKED_ENCODING: Type = -321;
    pub const ERR_METHOD_NOT_SUPPORTED: Type = -322;
    pub const ERR_UNEXPECTED_PROXY_AUTH: Type = -323;
    pub const ERR_EMPTY_RESPONSE: Type = -324;
    pub const ERR_RESPONSE_HEADERS_TOO_BIG: Type = -325;
    pub const ERR_PAC_STATUS_NOT_OK: Type = -326;
    pub const ERR_PAC_SCRIPT_FAILED: Type = -327;
    pub const ERR_REQUEST_RANGE_NOT_SATISFIABLE: Type = -328;
    pub const ERR_MALFORMED_IDENTITY: Type = -329;
    pub const ERR_CONTENT_DECODING_FAILED: Type = -330;
    pub const ERR_NETWORK_IO_SUSPENDED: Type = -331;
    pub const ERR_SYN_REPLY_NOT_RECEIVED: Type = -332;
    pub const ERR_ENCODING_CONVERSION_FAILED: Type = -333;
    pub const ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT: Type = -334;
    pub const ERR_NO_SUPPORTED_PROXIES: Type = -336;
    pub const ERR_HTTP2_PROTOCOL_ERROR: Type = -337;
    pub const ERR_INVALID_AUTH_CREDENTIALS: Type = -338;
    pub const ERR_UNSUPPORTED_AUTH_SCHEME: Type = -339;
    pub const ERR_ENCODING_DETECTION_FAILED: Type = -340;
    pub const ERR_MISSING_AUTH_CREDENTIALS: Type = -341;
    pub const ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS: Type = -342;
    pub const ERR_MISCONFIGURED_AUTH_ENVIRONMENT: Type = -343;
    pub const ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS: Type = -344;
    pub const ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN: Type = -345;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH: Type = -346;
    pub const ERR_INCOMPLETE_HTTP2_HEADERS: Type = -347;
    pub const ERR_PAC_NOT_IN_DHCP: Type = -348;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION: Type = -349;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION: Type = -350;
    pub const ERR_HTTP2_SERVER_REFUSED_STREAM: Type = -351;
    pub const ERR_HTTP2_PING_FAILED: Type = -352;
    pub const ERR_CONTENT_LENGTH_MISMATCH: Type = -354;
    pub const ERR_INCOMPLETE_CHUNKED_ENCODING: Type = -355;
    pub const ERR_QUIC_PROTOCOL_ERROR: Type = -356;
    pub const ERR_RESPONSE_HEADERS_TRUNCATED: Type = -357;
    pub const ERR_QUIC_HANDSHAKE_FAILED: Type = -358;
    pub const ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY: Type = -360;
    pub const ERR_HTTP2_FLOW_CONTROL_ERROR: Type = -361;
    pub const ERR_HTTP2_FRAME_SIZE_ERROR: Type = -362;
    pub const ERR_HTTP2_COMPRESSION_ERROR: Type = -363;
    pub const ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION: Type = -364;
    pub const ERR_HTTP_1_1_REQUIRED: Type = -365;
    pub const ERR_PROXY_HTTP_1_1_REQUIRED: Type = -366;
    pub const ERR_PAC_SCRIPT_TERMINATED: Type = -367;
    pub const ERR_INVALID_HTTP_RESPONSE: Type = -370;
    pub const ERR_CONTENT_DECODING_INIT_FAILED: Type = -371;
    pub const ERR_HTTP2_RST_STREAM_NO_ERROR_RECEIVED: Type = -372;
    pub const ERR_HTTP2_PUSHED_STREAM_NOT_AVAILABLE: Type = -373;
    pub const ERR_HTTP2_CLAIMED_PUSHED_STREAM_RESET_BY_SERVER: Type = -374;
    pub const ERR_TOO_MANY_RETRIES: Type = -375;
    pub const ERR_HTTP2_STREAM_CLOSED: Type = -376;
    pub const ERR_HTTP2_CLIENT_REFUSED_STREAM: Type = -377;
    pub const ERR_HTTP2_PUSHED_RESPONSE_DOES_NOT_MATCH: Type = -378;
    pub const ERR_CACHE_MISS: Type = -400;
    pub const ERR_CACHE_READ_FAILURE: Type = -401;
    pub const ERR_CACHE_WRITE_FAILURE: Type = -402;
    pub const ERR_CACHE_OPERATION_NOT_SUPPORTED: Type = -403;
    pub const ERR_CACHE_OPEN_FAILURE: Type = -404;
    pub const ERR_CACHE_CREATE_FAILURE: Type = -405;
    pub const ERR_CACHE_RACE: Type = -406;
    pub const ERR_CACHE_CHECKSUM_READ_FAILURE: Type = -407;
    pub const ERR_CACHE_CHECKSUM_MISMATCH: Type = -408;
    pub const ERR_CACHE_LOCK_TIMEOUT: Type = -409;
    pub const ERR_CACHE_AUTH_FAILURE_AFTER_READ: Type = -410;
    pub const ERR_CACHE_ENTRY_NOT_SUITABLE: Type = -411;
    pub const ERR_CACHE_DOOM_FAILURE: Type = -412;
    pub const ERR_CACHE_OPEN_OR_CREATE_FAILURE: Type = -413;
    pub const ERR_INSECURE_RESPONSE: Type = -501;
    pub const ERR_NO_PRIVATE_KEY_FOR_CERT: Type = -502;
    pub const ERR_ADD_USER_CERT_FAILED: Type = -503;
    pub const ERR_INVALID_SIGNED_EXCHANGE: Type = -504;
    pub const ERR_FTP_FAILED: Type = -601;
    pub const ERR_FTP_SERVICE_UNAVAILABLE: Type = -602;
    pub const ERR_FTP_TRANSFER_ABORTED: Type = -603;
    pub const ERR_FTP_FILE_BUSY: Type = -604;
    pub const ERR_FTP_SYNTAX_ERROR: Type = -605;
    pub const ERR_FTP_COMMAND_NOT_SUPPORTED: Type = -606;
    pub const ERR_FTP_BAD_COMMAND_SEQUENCE: Type = -607;
    pub const ERR_PKCS12_IMPORT_BAD_PASSWORD: Type = -701;
    pub const ERR_PKCS12_IMPORT_FAILED: Type = -702;
    pub const ERR_IMPORT_CA_CERT_NOT_CA: Type = -703;
    pub const ERR_IMPORT_CERT_ALREADY_EXISTS: Type = -704;
    pub const ERR_IMPORT_CA_CERT_FAILED: Type = -705;
    pub const ERR_IMPORT_SERVER_CERT_FAILED: Type = -706;
    pub const ERR_PKCS12_IMPORT_INVALID_MAC: Type = -707;
    pub const ERR_PKCS12_IMPORT_INVALID_FILE: Type = -708;
    pub const ERR_PKCS12_IMPORT_UNSUPPORTED: Type = -709;
    pub const ERR_KEY_GENERATION_FAILED: Type = -710;
    pub const ERR_PRIVATE_KEY_EXPORT_FAILED: Type = -712;
    pub const ERR_SELF_SIGNED_CERT_GENERATION_FAILED: Type = -713;
    pub const ERR_CERT_DATABASE_CHANGED: Type = -714;
    pub const ERR_DNS_MALFORMED_RESPONSE: Type = -800;
    pub const ERR_DNS_SERVER_REQUIRES_TCP: Type = -801;
    pub const ERR_DNS_SERVER_FAILED: Type = -802;
    pub const ERR_DNS_TIMED_OUT: Type = -803;
    pub const ERR_DNS_CACHE_MISS: Type = -804;
    pub const ERR_DNS_SEARCH_EMPTY: Type = -805;
    pub const ERR_DNS_SORT_ERROR: Type = -806;
    pub const ERR_DNS_HTTP_FAILED: Type = -807;
}
impl cef_cert_status_t {
    pub const CERT_STATUS_NONE: cef_cert_status_t = cef_cert_status_t(0);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_COMMON_NAME_INVALID: cef_cert_status_t = cef_cert_status_t(1);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_DATE_INVALID: cef_cert_status_t = cef_cert_status_t(2);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_AUTHORITY_INVALID: cef_cert_status_t = cef_cert_status_t(4);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_NO_REVOCATION_MECHANISM: cef_cert_status_t = cef_cert_status_t(16);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_UNABLE_TO_CHECK_REVOCATION: cef_cert_status_t = cef_cert_status_t(32);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_REVOKED: cef_cert_status_t = cef_cert_status_t(64);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_INVALID: cef_cert_status_t = cef_cert_status_t(128);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_WEAK_SIGNATURE_ALGORITHM: cef_cert_status_t = cef_cert_status_t(256);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_NON_UNIQUE_NAME: cef_cert_status_t = cef_cert_status_t(1024);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_WEAK_KEY: cef_cert_status_t = cef_cert_status_t(2048);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_PINNED_KEY_MISSING: cef_cert_status_t = cef_cert_status_t(8192);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_NAME_CONSTRAINT_VIOLATION: cef_cert_status_t = cef_cert_status_t(16384);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_VALIDITY_TOO_LONG: cef_cert_status_t = cef_cert_status_t(32768);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_IS_EV: cef_cert_status_t = cef_cert_status_t(65536);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_REV_CHECKING_ENABLED: cef_cert_status_t = cef_cert_status_t(131072);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_SHA1_SIGNATURE_PRESENT: cef_cert_status_t = cef_cert_status_t(524288);
}
impl cef_cert_status_t {
    pub const CERT_STATUS_CT_COMPLIANCE_FAILED: cef_cert_status_t = cef_cert_status_t(1048576);
}
impl ::std::ops::BitOr<cef_cert_status_t> for cef_cert_status_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cef_cert_status_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for cef_cert_status_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: cef_cert_status_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<cef_cert_status_t> for cef_cert_status_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cef_cert_status_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for cef_cert_status_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: cef_cert_status_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct cef_cert_status_t(pub i32);
pub mod cef_window_open_disposition_t {
    pub type Type = i32;
    pub const WOD_UNKNOWN: Type = 0;
    pub const WOD_CURRENT_TAB: Type = 1;
    pub const WOD_SINGLETON_TAB: Type = 2;
    pub const WOD_NEW_FOREGROUND_TAB: Type = 3;
    pub const WOD_NEW_BACKGROUND_TAB: Type = 4;
    pub const WOD_NEW_POPUP: Type = 5;
    pub const WOD_NEW_WINDOW: Type = 6;
    pub const WOD_SAVE_TO_DISK: Type = 7;
    pub const WOD_OFF_THE_RECORD: Type = 8;
    pub const WOD_IGNORE_ACTION: Type = 9;
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_NONE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(0);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_COPY: cef_drag_operations_mask_t = cef_drag_operations_mask_t(1);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_LINK: cef_drag_operations_mask_t = cef_drag_operations_mask_t(2);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_GENERIC: cef_drag_operations_mask_t = cef_drag_operations_mask_t(4);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_PRIVATE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(8);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_MOVE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(16);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_DELETE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(32);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_EVERY: cef_drag_operations_mask_t = cef_drag_operations_mask_t(-1);
}
impl ::std::ops::BitOr<cef_drag_operations_mask_t> for cef_drag_operations_mask_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cef_drag_operations_mask_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for cef_drag_operations_mask_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: cef_drag_operations_mask_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<cef_drag_operations_mask_t> for cef_drag_operations_mask_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cef_drag_operations_mask_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for cef_drag_operations_mask_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: cef_drag_operations_mask_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct cef_drag_operations_mask_t(pub i32);
pub mod cef_text_input_mode_t {
    pub type Type = i32;
    pub const CEF_TEXT_INPUT_MODE_DEFAULT: Type = 0;
    pub const CEF_TEXT_INPUT_MODE_NONE: Type = 1;
    pub const CEF_TEXT_INPUT_MODE_TEXT: Type = 2;
    pub const CEF_TEXT_INPUT_MODE_TEL: Type = 3;
    pub const CEF_TEXT_INPUT_MODE_URL: Type = 4;
    pub const CEF_TEXT_INPUT_MODE_EMAIL: Type = 5;
    pub const CEF_TEXT_INPUT_MODE_NUMERIC: Type = 6;
    pub const CEF_TEXT_INPUT_MODE_DECIMAL: Type = 7;
    pub const CEF_TEXT_INPUT_MODE_SEARCH: Type = 8;
    pub const CEF_TEXT_INPUT_MODE_MAX: Type = 8;
}
pub mod cef_v8_accesscontrol_t {
    pub type Type = i32;
    pub const V8_ACCESS_CONTROL_DEFAULT: Type = 0;
    pub const V8_ACCESS_CONTROL_ALL_CAN_READ: Type = 1;
    pub const V8_ACCESS_CONTROL_ALL_CAN_WRITE: Type = 2;
    pub const V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING: Type = 4;
}
pub mod cef_v8_propertyattribute_t {
    pub type Type = i32;
    pub const V8_PROPERTY_ATTRIBUTE_NONE: Type = 0;
    pub const V8_PROPERTY_ATTRIBUTE_READONLY: Type = 1;
    pub const V8_PROPERTY_ATTRIBUTE_DONTENUM: Type = 2;
    pub const V8_PROPERTY_ATTRIBUTE_DONTDELETE: Type = 4;
}
pub mod cef_postdataelement_type_t {
    pub type Type = i32;
    pub const PDE_TYPE_EMPTY: Type = 0;
    pub const PDE_TYPE_BYTES: Type = 1;
    pub const PDE_TYPE_FILE: Type = 2;
}
pub mod cef_resource_type_t {
    pub type Type = i32;
    pub const RT_MAIN_FRAME: Type = 0;
    pub const RT_SUB_FRAME: Type = 1;
    pub const RT_STYLESHEET: Type = 2;
    pub const RT_SCRIPT: Type = 3;
    pub const RT_IMAGE: Type = 4;
    pub const RT_FONT_RESOURCE: Type = 5;
    pub const RT_SUB_RESOURCE: Type = 6;
    pub const RT_OBJECT: Type = 7;
    pub const RT_MEDIA: Type = 8;
    pub const RT_WORKER: Type = 9;
    pub const RT_SHARED_WORKER: Type = 10;
    pub const RT_PREFETCH: Type = 11;
    pub const RT_FAVICON: Type = 12;
    pub const RT_XHR: Type = 13;
    pub const RT_PING: Type = 14;
    pub const RT_SERVICE_WORKER: Type = 15;
    pub const RT_CSP_REPORT: Type = 16;
    pub const RT_PLUGIN_RESOURCE: Type = 17;
}
impl cef_transition_type_t {
    pub const TT_LINK: cef_transition_type_t = cef_transition_type_t(0);
}
impl cef_transition_type_t {
    pub const TT_EXPLICIT: cef_transition_type_t = cef_transition_type_t(1);
}
impl cef_transition_type_t {
    pub const TT_AUTO_SUBFRAME: cef_transition_type_t = cef_transition_type_t(3);
}
impl cef_transition_type_t {
    pub const TT_MANUAL_SUBFRAME: cef_transition_type_t = cef_transition_type_t(4);
}
impl cef_transition_type_t {
    pub const TT_FORM_SUBMIT: cef_transition_type_t = cef_transition_type_t(7);
}
impl cef_transition_type_t {
    pub const TT_RELOAD: cef_transition_type_t = cef_transition_type_t(8);
}
impl cef_transition_type_t {
    pub const TT_SOURCE_MASK: cef_transition_type_t = cef_transition_type_t(255);
}
impl cef_transition_type_t {
    pub const TT_BLOCKED_FLAG: cef_transition_type_t = cef_transition_type_t(8388608);
}
impl cef_transition_type_t {
    pub const TT_FORWARD_BACK_FLAG: cef_transition_type_t = cef_transition_type_t(16777216);
}
impl cef_transition_type_t {
    pub const TT_CHAIN_START_FLAG: cef_transition_type_t = cef_transition_type_t(268435456);
}
impl cef_transition_type_t {
    pub const TT_CHAIN_END_FLAG: cef_transition_type_t = cef_transition_type_t(536870912);
}
impl cef_transition_type_t {
    pub const TT_CLIENT_REDIRECT_FLAG: cef_transition_type_t = cef_transition_type_t(1073741824);
}
impl cef_transition_type_t {
    pub const TT_SERVER_REDIRECT_FLAG: cef_transition_type_t = cef_transition_type_t(-2147483648);
}
impl cef_transition_type_t {
    pub const TT_IS_REDIRECT_MASK: cef_transition_type_t = cef_transition_type_t(-1073741824);
}
impl cef_transition_type_t {
    pub const TT_QUALIFIER_MASK: cef_transition_type_t = cef_transition_type_t(-256);
}
impl ::std::ops::BitOr<cef_transition_type_t> for cef_transition_type_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cef_transition_type_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for cef_transition_type_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: cef_transition_type_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<cef_transition_type_t> for cef_transition_type_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cef_transition_type_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for cef_transition_type_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: cef_transition_type_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct cef_transition_type_t(pub i32);
pub mod cef_urlrequest_status_t {
    pub type Type = i32;
    pub const UR_UNKNOWN: Type = 0;
    pub const UR_SUCCESS: Type = 1;
    pub const UR_IO_PENDING: Type = 2;
    pub const UR_CANCELED: Type = 3;
    pub const UR_FAILED: Type = 4;
}
#[repr(C)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_point_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_point_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_point_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_point_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_point_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_point_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_point_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_point_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_point_t),
            "::",
            stringify!(y)
        )
    );
}
pub type cef_point_t = _cef_point_t;
#[repr(C)]
pub struct _cef_rect_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_rect_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_rect_t>(),
        16usize,
        concat!("Size of: ", stringify!(_cef_rect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_rect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_rect_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(height)
        )
    );
}
pub type cef_rect_t = _cef_rect_t;
#[repr(C)]
pub struct _cef_size_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_size_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_size_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_size_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_size_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_size_t>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_size_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_size_t>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_size_t),
            "::",
            stringify!(height)
        )
    );
}
pub type cef_size_t = _cef_size_t;
#[repr(C)]
pub struct _cef_range_t {
    pub from: ::std::os::raw::c_int,
    pub to: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_range_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_range_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_range_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_range_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_range_t>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_range_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_range_t>())).to as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_range_t),
            "::",
            stringify!(to)
        )
    );
}
pub type cef_range_t = _cef_range_t;
#[repr(C)]
pub struct _cef_insets_t {
    pub top: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_insets_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_insets_t>(),
        16usize,
        concat!("Size of: ", stringify!(_cef_insets_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_insets_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_insets_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).left as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).bottom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).right as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(right)
        )
    );
}
pub type cef_insets_t = _cef_insets_t;
#[repr(C)]
pub struct _cef_draggable_region_t {
    pub bounds: cef_rect_t,
    pub draggable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_draggable_region_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_draggable_region_t>(),
        20usize,
        concat!("Size of: ", stringify!(_cef_draggable_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_draggable_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_draggable_region_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_draggable_region_t>())).bounds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_draggable_region_t),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_draggable_region_t>())).draggable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_draggable_region_t),
            "::",
            stringify!(draggable)
        )
    );
}
pub type cef_draggable_region_t = _cef_draggable_region_t;
pub mod cef_process_id_t {
    pub type Type = i32;
    pub const PID_BROWSER: Type = 0;
    pub const PID_RENDERER: Type = 1;
}
pub mod cef_thread_id_t {
    pub type Type = i32;
    pub const TID_UI: Type = 0;
    pub const TID_FILE_BACKGROUND: Type = 1;
    pub const TID_FILE: Type = 1;
    pub const TID_FILE_USER_VISIBLE: Type = 2;
    pub const TID_FILE_USER_BLOCKING: Type = 3;
    pub const TID_PROCESS_LAUNCHER: Type = 4;
    pub const TID_IO: Type = 5;
    pub const TID_RENDERER: Type = 6;
}
pub mod cef_value_type_t {
    pub type Type = i32;
    pub const VTYPE_INVALID: Type = 0;
    pub const VTYPE_NULL: Type = 1;
    pub const VTYPE_BOOL: Type = 2;
    pub const VTYPE_INT: Type = 3;
    pub const VTYPE_DOUBLE: Type = 4;
    pub const VTYPE_STRING: Type = 5;
    pub const VTYPE_BINARY: Type = 6;
    pub const VTYPE_DICTIONARY: Type = 7;
    pub const VTYPE_LIST: Type = 8;
}
pub mod cef_jsdialog_type_t {
    pub type Type = i32;
    pub const JSDIALOGTYPE_ALERT: Type = 0;
    pub const JSDIALOGTYPE_CONFIRM: Type = 1;
    pub const JSDIALOGTYPE_PROMPT: Type = 2;
}
#[repr(C)]
pub struct _cef_screen_info_t {
    pub device_scale_factor: f32,
    pub depth: ::std::os::raw::c_int,
    pub depth_per_component: ::std::os::raw::c_int,
    pub is_monochrome: ::std::os::raw::c_int,
    pub rect: cef_rect_t,
    pub available_rect: cef_rect_t,
}
#[test]
fn bindgen_test_layout__cef_screen_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_screen_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_screen_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_screen_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_screen_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).device_scale_factor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(device_scale_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_screen_info_t>())).depth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).depth_per_component as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(depth_per_component)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).is_monochrome as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(is_monochrome)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_screen_info_t>())).rect as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).available_rect as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(available_rect)
        )
    );
}
pub type cef_screen_info_t = _cef_screen_info_t;
pub mod cef_mouse_button_type_t {
    pub type Type = i32;
    pub const MBT_LEFT: Type = 0;
    pub const MBT_MIDDLE: Type = 1;
    pub const MBT_RIGHT: Type = 2;
}
#[repr(C)]
pub struct _cef_mouse_event_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub modifiers: uint32,
}
#[test]
fn bindgen_test_layout__cef_mouse_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_mouse_event_t>(),
        12usize,
        concat!("Size of: ", stringify!(_cef_mouse_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_mouse_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_mouse_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).modifiers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(modifiers)
        )
    );
}
pub type cef_mouse_event_t = _cef_mouse_event_t;
pub mod cef_touch_event_type_t {
    pub type Type = i32;
    pub const CEF_TET_RELEASED: Type = 0;
    pub const CEF_TET_PRESSED: Type = 1;
    pub const CEF_TET_MOVED: Type = 2;
    pub const CEF_TET_CANCELLED: Type = 3;
}
pub mod cef_pointer_type_t {
    pub type Type = i32;
    pub const CEF_POINTER_TYPE_TOUCH: Type = 0;
    pub const CEF_POINTER_TYPE_MOUSE: Type = 1;
    pub const CEF_POINTER_TYPE_PEN: Type = 2;
    pub const CEF_POINTER_TYPE_ERASER: Type = 3;
    pub const CEF_POINTER_TYPE_UNKNOWN: Type = 4;
}
#[repr(C)]
pub struct _cef_touch_event_t {
    pub id: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub radius_x: f32,
    pub radius_y: f32,
    pub rotation_angle: f32,
    pub pressure: f32,
    pub type_: cef_touch_event_type_t::Type,
    pub modifiers: uint32,
    pub pointer_type: cef_pointer_type_t::Type,
}
#[test]
fn bindgen_test_layout__cef_touch_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_touch_event_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_touch_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_touch_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_touch_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).radius_x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(radius_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).radius_y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(radius_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_touch_event_t>())).rotation_angle as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(rotation_angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).pressure as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).type_ as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).modifiers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).pointer_type as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(pointer_type)
        )
    );
}
pub type cef_touch_event_t = _cef_touch_event_t;
pub mod cef_paint_element_type_t {
    pub type Type = i32;
    pub const PET_VIEW: Type = 0;
    pub const PET_POPUP: Type = 1;
}
impl cef_event_flags_t {
    pub const EVENTFLAG_NONE: cef_event_flags_t = cef_event_flags_t(0);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_CAPS_LOCK_ON: cef_event_flags_t = cef_event_flags_t(1);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_SHIFT_DOWN: cef_event_flags_t = cef_event_flags_t(2);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_CONTROL_DOWN: cef_event_flags_t = cef_event_flags_t(4);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_ALT_DOWN: cef_event_flags_t = cef_event_flags_t(8);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_LEFT_MOUSE_BUTTON: cef_event_flags_t = cef_event_flags_t(16);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_MIDDLE_MOUSE_BUTTON: cef_event_flags_t = cef_event_flags_t(32);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_RIGHT_MOUSE_BUTTON: cef_event_flags_t = cef_event_flags_t(64);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_COMMAND_DOWN: cef_event_flags_t = cef_event_flags_t(128);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_NUM_LOCK_ON: cef_event_flags_t = cef_event_flags_t(256);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_IS_KEY_PAD: cef_event_flags_t = cef_event_flags_t(512);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_IS_LEFT: cef_event_flags_t = cef_event_flags_t(1024);
}
impl cef_event_flags_t {
    pub const EVENTFLAG_IS_RIGHT: cef_event_flags_t = cef_event_flags_t(2048);
}
impl ::std::ops::BitOr<cef_event_flags_t> for cef_event_flags_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cef_event_flags_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for cef_event_flags_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: cef_event_flags_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<cef_event_flags_t> for cef_event_flags_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cef_event_flags_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for cef_event_flags_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: cef_event_flags_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct cef_event_flags_t(pub i32);
pub mod cef_menu_item_type_t {
    pub type Type = i32;
    pub const MENUITEMTYPE_NONE: Type = 0;
    pub const MENUITEMTYPE_COMMAND: Type = 1;
    pub const MENUITEMTYPE_CHECK: Type = 2;
    pub const MENUITEMTYPE_RADIO: Type = 3;
    pub const MENUITEMTYPE_SEPARATOR: Type = 4;
    pub const MENUITEMTYPE_SUBMENU: Type = 5;
}
pub mod cef_context_menu_type_flags_t {
    pub type Type = i32;
    pub const CM_TYPEFLAG_NONE: Type = 0;
    pub const CM_TYPEFLAG_PAGE: Type = 1;
    pub const CM_TYPEFLAG_FRAME: Type = 2;
    pub const CM_TYPEFLAG_LINK: Type = 4;
    pub const CM_TYPEFLAG_MEDIA: Type = 8;
    pub const CM_TYPEFLAG_SELECTION: Type = 16;
    pub const CM_TYPEFLAG_EDITABLE: Type = 32;
}
pub mod cef_context_menu_media_type_t {
    pub type Type = i32;
    pub const CM_MEDIATYPE_NONE: Type = 0;
    pub const CM_MEDIATYPE_IMAGE: Type = 1;
    pub const CM_MEDIATYPE_VIDEO: Type = 2;
    pub const CM_MEDIATYPE_AUDIO: Type = 3;
    pub const CM_MEDIATYPE_FILE: Type = 4;
    pub const CM_MEDIATYPE_PLUGIN: Type = 5;
}
pub mod cef_context_menu_media_state_flags_t {
    pub type Type = i32;
    pub const CM_MEDIAFLAG_NONE: Type = 0;
    pub const CM_MEDIAFLAG_ERROR: Type = 1;
    pub const CM_MEDIAFLAG_PAUSED: Type = 2;
    pub const CM_MEDIAFLAG_MUTED: Type = 4;
    pub const CM_MEDIAFLAG_LOOP: Type = 8;
    pub const CM_MEDIAFLAG_CAN_SAVE: Type = 16;
    pub const CM_MEDIAFLAG_HAS_AUDIO: Type = 32;
    pub const CM_MEDIAFLAG_HAS_VIDEO: Type = 64;
    pub const CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT: Type = 128;
    pub const CM_MEDIAFLAG_CAN_PRINT: Type = 256;
    pub const CM_MEDIAFLAG_CAN_ROTATE: Type = 512;
}
pub mod cef_context_menu_edit_state_flags_t {
    pub type Type = i32;
    pub const CM_EDITFLAG_NONE: Type = 0;
    pub const CM_EDITFLAG_CAN_UNDO: Type = 1;
    pub const CM_EDITFLAG_CAN_REDO: Type = 2;
    pub const CM_EDITFLAG_CAN_CUT: Type = 4;
    pub const CM_EDITFLAG_CAN_COPY: Type = 8;
    pub const CM_EDITFLAG_CAN_PASTE: Type = 16;
    pub const CM_EDITFLAG_CAN_DELETE: Type = 32;
    pub const CM_EDITFLAG_CAN_SELECT_ALL: Type = 64;
    pub const CM_EDITFLAG_CAN_TRANSLATE: Type = 128;
}
pub mod cef_key_event_type_t {
    pub type Type = i32;
    pub const KEYEVENT_RAWKEYDOWN: Type = 0;
    pub const KEYEVENT_KEYDOWN: Type = 1;
    pub const KEYEVENT_KEYUP: Type = 2;
    pub const KEYEVENT_CHAR: Type = 3;
}
#[repr(C)]
pub struct _cef_key_event_t {
    pub type_: cef_key_event_type_t::Type,
    pub modifiers: uint32,
    pub windows_key_code: ::std::os::raw::c_int,
    pub native_key_code: ::std::os::raw::c_int,
    pub is_system_key: ::std::os::raw::c_int,
    pub character: char16,
    pub unmodified_character: char16,
    pub focus_on_editable_field: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_key_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_key_event_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_key_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_key_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_key_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).modifiers as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).windows_key_code as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(windows_key_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).native_key_code as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(native_key_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).is_system_key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(is_system_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).character as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(character)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).unmodified_character as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(unmodified_character)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).focus_on_editable_field as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(focus_on_editable_field)
        )
    );
}
pub type cef_key_event_t = _cef_key_event_t;
pub mod cef_focus_source_t {
    pub type Type = i32;
    pub const FOCUS_SOURCE_NAVIGATION: Type = 0;
    pub const FOCUS_SOURCE_SYSTEM: Type = 1;
}
#[repr(C)]
pub struct _cef_popup_features_t {
    pub x: ::std::os::raw::c_int,
    pub xSet: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub ySet: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub widthSet: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub heightSet: ::std::os::raw::c_int,
    pub menuBarVisible: ::std::os::raw::c_int,
    pub statusBarVisible: ::std::os::raw::c_int,
    pub toolBarVisible: ::std::os::raw::c_int,
    pub scrollbarsVisible: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_popup_features_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_popup_features_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_popup_features_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_popup_features_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_popup_features_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).xSet as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(xSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).ySet as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(ySet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).widthSet as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(widthSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).height as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).heightSet as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(heightSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).menuBarVisible as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(menuBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).statusBarVisible as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(statusBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).toolBarVisible as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(toolBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).scrollbarsVisible as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(scrollbarsVisible)
        )
    );
}
pub mod cef_dom_document_type_t {
    pub type Type = i32;
    pub const DOM_DOCUMENT_TYPE_UNKNOWN: Type = 0;
    pub const DOM_DOCUMENT_TYPE_HTML: Type = 1;
    pub const DOM_DOCUMENT_TYPE_XHTML: Type = 2;
    pub const DOM_DOCUMENT_TYPE_PLUGIN: Type = 3;
}
pub mod cef_dom_node_type_t {
    pub type Type = i32;
    pub const DOM_NODE_TYPE_UNSUPPORTED: Type = 0;
    pub const DOM_NODE_TYPE_ELEMENT: Type = 1;
    pub const DOM_NODE_TYPE_ATTRIBUTE: Type = 2;
    pub const DOM_NODE_TYPE_TEXT: Type = 3;
    pub const DOM_NODE_TYPE_CDATA_SECTION: Type = 4;
    pub const DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS: Type = 5;
    pub const DOM_NODE_TYPE_COMMENT: Type = 6;
    pub const DOM_NODE_TYPE_DOCUMENT: Type = 7;
    pub const DOM_NODE_TYPE_DOCUMENT_TYPE: Type = 8;
    pub const DOM_NODE_TYPE_DOCUMENT_FRAGMENT: Type = 9;
}
impl cef_file_dialog_mode_t {
    pub const FILE_DIALOG_OPEN: cef_file_dialog_mode_t = cef_file_dialog_mode_t(0);
}
impl cef_file_dialog_mode_t {
    pub const FILE_DIALOG_OPEN_MULTIPLE: cef_file_dialog_mode_t = cef_file_dialog_mode_t(1);
}
impl cef_file_dialog_mode_t {
    pub const FILE_DIALOG_OPEN_FOLDER: cef_file_dialog_mode_t = cef_file_dialog_mode_t(2);
}
impl cef_file_dialog_mode_t {
    pub const FILE_DIALOG_SAVE: cef_file_dialog_mode_t = cef_file_dialog_mode_t(3);
}
impl cef_file_dialog_mode_t {
    pub const FILE_DIALOG_TYPE_MASK: cef_file_dialog_mode_t = cef_file_dialog_mode_t(255);
}
impl cef_file_dialog_mode_t {
    pub const FILE_DIALOG_OVERWRITEPROMPT_FLAG: cef_file_dialog_mode_t =
        cef_file_dialog_mode_t(16777216);
}
impl cef_file_dialog_mode_t {
    pub const FILE_DIALOG_HIDEREADONLY_FLAG: cef_file_dialog_mode_t =
        cef_file_dialog_mode_t(33554432);
}
impl ::std::ops::BitOr<cef_file_dialog_mode_t> for cef_file_dialog_mode_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cef_file_dialog_mode_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for cef_file_dialog_mode_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: cef_file_dialog_mode_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<cef_file_dialog_mode_t> for cef_file_dialog_mode_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cef_file_dialog_mode_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for cef_file_dialog_mode_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: cef_file_dialog_mode_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct cef_file_dialog_mode_t(pub i32);
pub mod cef_color_model_t {
    pub type Type = i32;
    pub const COLOR_MODEL_UNKNOWN: Type = 0;
    pub const COLOR_MODEL_GRAY: Type = 1;
    pub const COLOR_MODEL_COLOR: Type = 2;
    pub const COLOR_MODEL_CMYK: Type = 3;
    pub const COLOR_MODEL_CMY: Type = 4;
    pub const COLOR_MODEL_KCMY: Type = 5;
    pub const COLOR_MODEL_CMY_K: Type = 6;
    pub const COLOR_MODEL_BLACK: Type = 7;
    pub const COLOR_MODEL_GRAYSCALE: Type = 8;
    pub const COLOR_MODEL_RGB: Type = 9;
    pub const COLOR_MODEL_RGB16: Type = 10;
    pub const COLOR_MODEL_RGBA: Type = 11;
    pub const COLOR_MODEL_COLORMODE_COLOR: Type = 12;
    pub const COLOR_MODEL_COLORMODE_MONOCHROME: Type = 13;
    pub const COLOR_MODEL_HP_COLOR_COLOR: Type = 14;
    pub const COLOR_MODEL_HP_COLOR_BLACK: Type = 15;
    pub const COLOR_MODEL_PRINTOUTMODE_NORMAL: Type = 16;
    pub const COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY: Type = 17;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_CMYK: Type = 18;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE: Type = 19;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_RGB: Type = 20;
}
pub mod cef_duplex_mode_t {
    pub type Type = i32;
    pub const DUPLEX_MODE_UNKNOWN: Type = -1;
    pub const DUPLEX_MODE_SIMPLEX: Type = 0;
    pub const DUPLEX_MODE_LONG_EDGE: Type = 1;
    pub const DUPLEX_MODE_SHORT_EDGE: Type = 2;
}
pub mod cef_cursor_type_t {
    pub type Type = i32;
    pub const CT_POINTER: Type = 0;
    pub const CT_CROSS: Type = 1;
    pub const CT_HAND: Type = 2;
    pub const CT_IBEAM: Type = 3;
    pub const CT_WAIT: Type = 4;
    pub const CT_HELP: Type = 5;
    pub const CT_EASTRESIZE: Type = 6;
    pub const CT_NORTHRESIZE: Type = 7;
    pub const CT_NORTHEASTRESIZE: Type = 8;
    pub const CT_NORTHWESTRESIZE: Type = 9;
    pub const CT_SOUTHRESIZE: Type = 10;
    pub const CT_SOUTHEASTRESIZE: Type = 11;
    pub const CT_SOUTHWESTRESIZE: Type = 12;
    pub const CT_WESTRESIZE: Type = 13;
    pub const CT_NORTHSOUTHRESIZE: Type = 14;
    pub const CT_EASTWESTRESIZE: Type = 15;
    pub const CT_NORTHEASTSOUTHWESTRESIZE: Type = 16;
    pub const CT_NORTHWESTSOUTHEASTRESIZE: Type = 17;
    pub const CT_COLUMNRESIZE: Type = 18;
    pub const CT_ROWRESIZE: Type = 19;
    pub const CT_MIDDLEPANNING: Type = 20;
    pub const CT_EASTPANNING: Type = 21;
    pub const CT_NORTHPANNING: Type = 22;
    pub const CT_NORTHEASTPANNING: Type = 23;
    pub const CT_NORTHWESTPANNING: Type = 24;
    pub const CT_SOUTHPANNING: Type = 25;
    pub const CT_SOUTHEASTPANNING: Type = 26;
    pub const CT_SOUTHWESTPANNING: Type = 27;
    pub const CT_WESTPANNING: Type = 28;
    pub const CT_MOVE: Type = 29;
    pub const CT_VERTICALTEXT: Type = 30;
    pub const CT_CELL: Type = 31;
    pub const CT_CONTEXTMENU: Type = 32;
    pub const CT_ALIAS: Type = 33;
    pub const CT_PROGRESS: Type = 34;
    pub const CT_NODROP: Type = 35;
    pub const CT_COPY: Type = 36;
    pub const CT_NONE: Type = 37;
    pub const CT_NOTALLOWED: Type = 38;
    pub const CT_ZOOMIN: Type = 39;
    pub const CT_ZOOMOUT: Type = 40;
    pub const CT_GRAB: Type = 41;
    pub const CT_GRABBING: Type = 42;
    pub const CT_CUSTOM: Type = 43;
}
#[repr(C)]
pub struct _cef_cursor_info_t {
    pub hotspot: cef_point_t,
    pub image_scale_factor: f32,
    pub buffer: *mut ::std::os::raw::c_void,
    pub size: cef_size_t,
}
#[test]
fn bindgen_test_layout__cef_cursor_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cursor_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_cursor_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cursor_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cursor_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).hotspot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(hotspot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cursor_info_t>())).image_scale_factor as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(image_scale_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(size)
        )
    );
}
pub type cef_cursor_info_t = _cef_cursor_info_t;
pub mod cef_pdf_print_margin_type_t {
    pub type Type = i32;
    pub const PDF_PRINT_MARGIN_DEFAULT: Type = 0;
    pub const PDF_PRINT_MARGIN_NONE: Type = 1;
    pub const PDF_PRINT_MARGIN_MINIMUM: Type = 2;
    pub const PDF_PRINT_MARGIN_CUSTOM: Type = 3;
}
#[repr(C)]
pub struct _cef_pdf_print_settings_t {
    pub header_footer_title: cef_string_t,
    pub header_footer_url: cef_string_t,
    pub page_width: ::std::os::raw::c_int,
    pub page_height: ::std::os::raw::c_int,
    pub scale_factor: ::std::os::raw::c_int,
    pub margin_top: f64,
    pub margin_right: f64,
    pub margin_bottom: f64,
    pub margin_left: f64,
    pub margin_type: cef_pdf_print_margin_type_t::Type,
    pub header_footer_enabled: ::std::os::raw::c_int,
    pub selection_only: ::std::os::raw::c_int,
    pub landscape: ::std::os::raw::c_int,
    pub backgrounds_enabled: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_pdf_print_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_pdf_print_settings_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_pdf_print_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_pdf_print_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_pdf_print_settings_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_title as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_url as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).page_width as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(page_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).page_height as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(page_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).scale_factor as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_top as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_right as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_bottom as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_bottom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_left as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_type as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_enabled as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).selection_only as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).landscape as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(landscape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).backgrounds_enabled as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(backgrounds_enabled)
        )
    );
}
pub type cef_pdf_print_settings_t = _cef_pdf_print_settings_t;
pub mod cef_scale_factor_t {
    pub type Type = i32;
    pub const SCALE_FACTOR_NONE: Type = 0;
    pub const SCALE_FACTOR_100P: Type = 1;
    pub const SCALE_FACTOR_125P: Type = 2;
    pub const SCALE_FACTOR_133P: Type = 3;
    pub const SCALE_FACTOR_140P: Type = 4;
    pub const SCALE_FACTOR_150P: Type = 5;
    pub const SCALE_FACTOR_180P: Type = 6;
    pub const SCALE_FACTOR_200P: Type = 7;
    pub const SCALE_FACTOR_250P: Type = 8;
    pub const SCALE_FACTOR_300P: Type = 9;
}
pub mod cef_plugin_policy_t {
    pub type Type = i32;
    pub const PLUGIN_POLICY_ALLOW: Type = 0;
    pub const PLUGIN_POLICY_DETECT_IMPORTANT: Type = 1;
    pub const PLUGIN_POLICY_BLOCK: Type = 2;
    pub const PLUGIN_POLICY_DISABLE: Type = 3;
}
pub mod cef_referrer_policy_t {
    pub type Type = i32;
    pub const REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE: Type = 0;
    pub const REFERRER_POLICY_DEFAULT: Type = 0;
    pub const REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN: Type = 1;
    pub const REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN: Type = 2;
    pub const REFERRER_POLICY_NEVER_CLEAR_REFERRER: Type = 3;
    pub const REFERRER_POLICY_ORIGIN: Type = 4;
    pub const REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN: Type = 5;
    pub const REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE: Type = 6;
    pub const REFERRER_POLICY_NO_REFERRER: Type = 7;
    pub const REFERRER_POLICY_LAST_VALUE: Type = 7;
}
pub mod cef_response_filter_status_t {
    pub type Type = i32;
    pub const RESPONSE_FILTER_NEED_MORE_DATA: Type = 0;
    pub const RESPONSE_FILTER_DONE: Type = 1;
    pub const RESPONSE_FILTER_ERROR: Type = 2;
}
pub mod cef_color_type_t {
    pub type Type = i32;
    pub const CEF_COLOR_TYPE_RGBA_8888: Type = 0;
    pub const CEF_COLOR_TYPE_BGRA_8888: Type = 1;
}
pub mod cef_alpha_type_t {
    pub type Type = i32;
    pub const CEF_ALPHA_TYPE_OPAQUE: Type = 0;
    pub const CEF_ALPHA_TYPE_PREMULTIPLIED: Type = 1;
    pub const CEF_ALPHA_TYPE_POSTMULTIPLIED: Type = 2;
}
pub mod cef_menu_color_type_t {
    pub type Type = i32;
    pub const CEF_MENU_COLOR_TEXT: Type = 0;
    pub const CEF_MENU_COLOR_TEXT_HOVERED: Type = 1;
    pub const CEF_MENU_COLOR_TEXT_ACCELERATOR: Type = 2;
    pub const CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED: Type = 3;
    pub const CEF_MENU_COLOR_BACKGROUND: Type = 4;
    pub const CEF_MENU_COLOR_BACKGROUND_HOVERED: Type = 5;
    pub const CEF_MENU_COLOR_COUNT: Type = 6;
}
pub mod cef_ssl_version_t {
    pub type Type = i32;
    pub const SSL_CONNECTION_VERSION_UNKNOWN: Type = 0;
    pub const SSL_CONNECTION_VERSION_SSL2: Type = 1;
    pub const SSL_CONNECTION_VERSION_SSL3: Type = 2;
    pub const SSL_CONNECTION_VERSION_TLS1: Type = 3;
    pub const SSL_CONNECTION_VERSION_TLS1_1: Type = 4;
    pub const SSL_CONNECTION_VERSION_TLS1_2: Type = 5;
    pub const SSL_CONNECTION_VERSION_TLS1_3: Type = 6;
    pub const SSL_CONNECTION_VERSION_QUIC: Type = 7;
}
pub mod cef_ssl_content_status_t {
    pub type Type = i32;
    pub const SSL_CONTENT_NORMAL_CONTENT: Type = 0;
    pub const SSL_CONTENT_DISPLAYED_INSECURE_CONTENT: Type = 1;
    pub const SSL_CONTENT_RAN_INSECURE_CONTENT: Type = 2;
}
pub mod cef_scheme_options_t {
    pub type Type = i32;
    pub const CEF_SCHEME_OPTION_NONE: Type = 0;
    pub const CEF_SCHEME_OPTION_STANDARD: Type = 1;
    pub const CEF_SCHEME_OPTION_LOCAL: Type = 2;
    pub const CEF_SCHEME_OPTION_DISPLAY_ISOLATED: Type = 4;
    pub const CEF_SCHEME_OPTION_SECURE: Type = 8;
    pub const CEF_SCHEME_OPTION_CORS_ENABLED: Type = 16;
    pub const CEF_SCHEME_OPTION_CSP_BYPASSING: Type = 32;
    pub const CEF_SCHEME_OPTION_FETCH_ENABLED: Type = 64;
}
pub mod cef_cdm_registration_error_t {
    pub type Type = i32;
    pub const CEF_CDM_REGISTRATION_ERROR_NONE: Type = 0;
    pub const CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS: Type = 1;
    pub const CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE: Type = 2;
    pub const CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED: Type = 3;
}
#[repr(C)]
pub struct _cef_composition_underline_t {
    pub range: cef_range_t,
    pub color: cef_color_t,
    pub background_color: cef_color_t,
    pub thick: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_composition_underline_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_composition_underline_t>(),
        20usize,
        concat!("Size of: ", stringify!(_cef_composition_underline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_composition_underline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_composition_underline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).range as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).color as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).background_color as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).thick as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(thick)
        )
    );
}
pub type cef_composition_underline_t = _cef_composition_underline_t;
#[repr(C)]
pub struct _cef_base_ref_counted_t {
    pub size: usize,
    pub add_ref: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t)>,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    pub has_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    pub has_at_least_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_base_ref_counted_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_base_ref_counted_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_base_ref_counted_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_base_ref_counted_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_base_ref_counted_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).add_ref as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(add_ref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).release as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).has_one_ref as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(has_one_ref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).has_at_least_one_ref as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(has_at_least_one_ref)
        )
    );
}
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[repr(C)]
pub struct _cef_base_scoped_t {
    pub size: usize,
    pub del: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_scoped_t)>,
}
#[test]
fn bindgen_test_layout__cef_base_scoped_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_base_scoped_t>(),
        16usize,
        concat!("Size of: ", stringify!(_cef_base_scoped_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_base_scoped_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_base_scoped_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_scoped_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_scoped_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_scoped_t>())).del as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_scoped_t),
            "::",
            stringify!(del)
        )
    );
}
pub type cef_base_scoped_t = _cef_base_scoped_t;
#[repr(C)]
pub struct _cef_command_line_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> *mut _cef_command_line_t,
    >,
    pub init_from_argv: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ),
    >,
    pub init_from_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, command_line: *const cef_string_t),
    >,
    pub reset: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_command_line_t)>,
    pub get_argv: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argv: cef_string_list_t),
    >,
    pub get_command_line_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    pub get_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    pub set_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, program: *const cef_string_t),
    >,
    pub has_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub has_switch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_switch_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, switches: cef_string_map_t),
    >,
    pub append_switch: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, name: *const cef_string_t),
    >,
    pub append_switch_with_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
        ),
    >,
    pub has_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub get_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, arguments: cef_string_list_t),
    >,
    pub append_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argument: *const cef_string_t),
    >,
    pub prepend_wrapper: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, wrapper: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_command_line_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_command_line_t>(),
        200usize,
        concat!("Size of: ", stringify!(_cef_command_line_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_command_line_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_command_line_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).is_read_only as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).copy as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).init_from_argv as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(init_from_argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).init_from_string as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(init_from_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).reset as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).get_argv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_command_line_string as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_command_line_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).get_program as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_program)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).set_program as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(set_program)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).has_switches as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_switches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).has_switch as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_switch_value as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_switch_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_switches as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_switch as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_switch_with_value as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_switch_with_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).has_arguments as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_arguments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_arguments as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_arguments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_argument as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_argument)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).prepend_wrapper as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(prepend_wrapper)
        )
    );
}
pub type cef_command_line_t = _cef_command_line_t;
extern "C" {
    pub fn cef_command_line_create() -> *mut cef_command_line_t;
}
extern "C" {
    pub fn cef_command_line_get_global() -> *mut cef_command_line_t;
}
#[repr(C)]
pub struct _cef_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t>,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_value_type_t::Type,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> f64>,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_value_t>(),
        216usize,
        concat!("Size of: ", stringify!(_cef_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_owned as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_read_only as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_same as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_equal as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).copy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_type as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_bool as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_int as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_double as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_string as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_binary as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_dictionary as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_list as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_null as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_bool as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_int as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_double as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_string as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_binary as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_dictionary as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_list as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
pub type cef_value_t = _cef_value_t;
extern "C" {
    pub fn cef_value_create() -> *mut cef_value_t;
}
#[repr(C)]
pub struct _cef_binary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> usize>,
    pub get_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout__cef_binary_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_binary_value_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_binary_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_binary_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_binary_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_owned as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_same as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_equal as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).copy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).get_size as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).get_data as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(get_data)
        )
    );
}
pub type cef_binary_value_t = _cef_binary_value_t;
extern "C" {
    pub fn cef_binary_value_create(
        data: *const ::std::os::raw::c_void,
        data_size: usize,
    ) -> *mut cef_binary_value_t;
}
#[repr(C)]
pub struct _cef_dictionary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub has_key: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_value_type_t::Type,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_dictionary_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_dictionary_value_t>(),
        272usize,
        concat!("Size of: ", stringify!(_cef_dictionary_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_dictionary_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_dictionary_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_valid as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_owned as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_read_only as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_same as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_equal as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).copy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_size as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).clear as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).has_key as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(has_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_keys as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).remove as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_type as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_value as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_bool as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_int as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_double as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_string as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_binary as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_dictionary as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_list as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_value as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_null as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_bool as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_int as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_double as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_string as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_binary as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_dictionary as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_list as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
pub type cef_dictionary_value_t = _cef_dictionary_value_t;
extern "C" {
    pub fn cef_dictionary_value_create() -> *mut cef_dictionary_value_t;
}
#[repr(C)]
pub struct _cef_list_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t,
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, size: usize) -> ::std::os::raw::c_int,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_value_type_t::Type,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_list_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_list_value_t>(),
        264usize,
        concat!("Size of: ", stringify!(_cef_list_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_list_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_list_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_owned as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_read_only as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_same as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_equal as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).copy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_size as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).clear as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).remove as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_type as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_value as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_bool as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_int as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_double as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_string as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_binary as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_list_value_t>())).get_dictionary as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_list as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_value as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_null as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_bool as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_int as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_double as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_string as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_binary as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_list_value_t>())).set_dictionary as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_list as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
pub type cef_list_value_t = _cef_list_value_t;
extern "C" {
    pub fn cef_list_value_create() -> *mut cef_list_value_t;
}
#[repr(C)]
pub struct _cef_image_t {
    pub base: cef_base_ref_counted_t,
    pub is_empty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            that: *mut _cef_image_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            pixel_width: ::std::os::raw::c_int,
            pixel_height: ::std::os::raw::c_int,
            color_type: cef_color_type_t::Type,
            alpha_type: cef_alpha_type_t::Type,
            pixel_data: *const ::std::os::raw::c_void,
            pixel_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            png_data: *const ::std::os::raw::c_void,
            png_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            jpeg_data: *const ::std::os::raw::c_void,
            jpeg_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_width: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub get_height: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub has_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int,
    >,
    pub remove_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int,
    >,
    pub get_representation_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            actual_scale_factor: *mut f32,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            color_type: cef_color_type_t::Type,
            alpha_type: cef_alpha_type_t::Type,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            with_transparency: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            quality: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_image_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_image_t>(),
        144usize,
        concat!("Size of: ", stringify!(_cef_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_image_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_image_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).is_empty as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(is_empty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).is_same as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_bitmap as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_png as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_png)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_jpeg as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_jpeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_width as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_height as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).has_representation as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(has_representation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_image_t>())).remove_representation as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(remove_representation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_image_t>())).get_representation_info as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_representation_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_bitmap as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_png as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_png)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_jpeg as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_jpeg)
        )
    );
}
pub type cef_image_t = _cef_image_t;
#[repr(C)]
pub struct _cef_stream_reader_t {
    pub base: cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> int64>,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_stream_reader_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_stream_reader_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_stream_reader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_stream_reader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_stream_reader_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).seek as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).tell as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).eof as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).may_block as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(may_block)
        )
    );
}
#[repr(C)]
pub struct _cef_stream_writer_t {
    pub base: cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> int64>,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_stream_writer_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_stream_writer_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_stream_writer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_stream_writer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_stream_writer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).write as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).seek as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).tell as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).flush as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).may_block as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(may_block)
        )
    );
}
#[repr(C)]
pub struct _cef_drag_data_t {
    pub base: cef_base_ref_counted_t,
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_drag_data_t,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_link: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_fragment: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_file_contents: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            writer: *mut _cef_stream_writer_t,
        ) -> usize,
    >,
    pub get_file_names: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            names: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, url: *const cef_string_t),
    >,
    pub set_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, title: *const cef_string_t),
    >,
    pub set_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, data: *const cef_string_t),
    >,
    pub set_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, text: *const cef_string_t),
    >,
    pub set_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, html: *const cef_string_t),
    >,
    pub set_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, base_url: *const cef_string_t),
    >,
    pub reset_file_contents:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    pub add_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            path: *const cef_string_t,
            display_name: *const cef_string_t,
        ),
    >,
    pub get_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_image_t,
    >,
    pub get_image_hotspot:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_point_t>,
    pub has_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_drag_data_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_drag_data_t>(),
        240usize,
        concat!("Size of: ", stringify!(_cef_drag_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_drag_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_drag_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).clone as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_read_only as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_link as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_fragment as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_file as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_url as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_title as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_metadata as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_text as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_html as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_html)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_base_url as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_base_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_contents as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_names as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_url as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_title as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_metadata as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_text as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_html as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_html)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_base_url as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_base_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).reset_file_contents as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(reset_file_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).add_file as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(add_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_image as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_image_hotspot as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_image_hotspot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).has_image as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(has_image)
        )
    );
}
pub type cef_drag_data_t = _cef_drag_data_t;
extern "C" {
    pub fn cef_drag_data_create() -> *mut cef_drag_data_t;
}
#[repr(C)]
pub struct _cef_domvisitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domvisitor_t, document: *mut _cef_domdocument_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_domvisitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domvisitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_domvisitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domvisitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_domvisitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domvisitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domvisitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domvisitor_t>())).visit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domvisitor_t),
            "::",
            stringify!(visit)
        )
    );
}
pub type cef_domvisitor_t = _cef_domvisitor_t;
#[repr(C)]
pub struct _cef_domdocument_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_dom_document_type_t::Type,
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_head: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_element_by_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            id: *const cef_string_t,
        ) -> *mut _cef_domnode_t,
    >,
    pub get_focused_node: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub has_selection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_start_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_end_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_selection_as_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_complete_url: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            partialURL: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_domdocument_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domdocument_t>(),
        152usize,
        concat!("Size of: ", stringify!(_cef_domdocument_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domdocument_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_domdocument_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_type as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_document as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_body as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_head as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_title as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_element_by_id as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_element_by_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_focused_node as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_focused_node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).has_selection as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(has_selection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_start_offset as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_start_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_end_offset as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_end_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_as_markup as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_as_markup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_as_text as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_as_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_base_url as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_base_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_complete_url as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_complete_url)
        )
    );
}
pub type cef_domdocument_t = _cef_domdocument_t;
#[repr(C)]
pub struct _cef_domnode_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_dom_node_type_t::Type,
    >,
    pub is_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_form_control_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_form_control_element_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            that: *mut _cef_domnode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domdocument_t,
    >,
    pub get_parent: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_previous_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_next_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub has_children: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_first_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_last_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_element_tag_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub has_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub has_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, attrMap: cef_string_map_t),
    >,
    pub set_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_inner_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_element_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_rect_t>,
}
#[test]
fn bindgen_test_layout__cef_domnode_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domnode_t>(),
        248usize,
        concat!("Size of: ", stringify!(_cef_domnode_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domnode_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_domnode_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_type as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_text as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_element as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_editable as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_editable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).is_form_control_element as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_form_control_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_form_control_element_type as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_form_control_element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_same as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_name as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_value as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).set_value as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_as_markup as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_as_markup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_document as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_parent as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_previous_sibling as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_previous_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_next_sibling as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_next_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).has_children as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_first_child as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_first_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_last_child as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_last_child)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_tag_name as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_tag_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).has_element_attributes as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_element_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).has_element_attribute as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_attribute as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_attributes as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).set_element_attribute as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(set_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_inner_text as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_inner_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_bounds as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_bounds)
        )
    );
}
pub type cef_domnode_t = _cef_domnode_t;
#[repr(C)]
pub struct _cef_process_message_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_process_message_t,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> cef_string_userfree_t,
    >,
    pub get_argument_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_list_value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_process_message_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_process_message_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_process_message_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_process_message_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_process_message_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_process_message_t>())).is_read_only as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).copy as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).get_name as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_process_message_t>())).get_argument_list as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(get_argument_list)
        )
    );
}
pub type cef_process_message_t = _cef_process_message_t;
#[repr(C)]
pub struct _cef_request_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    pub get_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, method: *const cef_string_t),
    >,
    pub set_referrer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t::Type,
        ),
    >,
    pub get_referrer_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub get_referrer_policy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t::Type,
    >,
    pub get_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t,
    >,
    pub set_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t),
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t,
        ),
    >,
    pub get_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    pub set_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int),
    >,
    pub get_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    pub get_resource_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_resource_type_t::Type,
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_transition_type_t,
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> uint64>,
}
#[test]
fn bindgen_test_layout__cef_request_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_t>(),
        216usize,
        concat!("Size of: ", stringify!(_cef_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).is_read_only as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_url as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_url as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_method as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_method as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_referrer as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_referrer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_referrer_url as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_referrer_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_referrer_policy as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_referrer_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_post_data as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_post_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_post_data as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_post_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_header_map as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_header_map as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_header_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_header_by_name as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_header_by_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).set_header_by_name as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_header_by_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_flags as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_flags as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_first_party_for_cookies as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_first_party_for_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).set_first_party_for_cookies as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_first_party_for_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_resource_type as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_resource_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_transition_type as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_transition_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_identifier as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_identifier)
        )
    );
}
pub type cef_request_t = _cef_request_t;
extern "C" {
    pub fn cef_request_create() -> *mut cef_request_t;
}
#[repr(C)]
pub struct _cef_post_data_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    pub has_excluded_elements: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    pub get_element_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> usize>,
    pub get_elements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t,
        ),
    >,
    pub remove_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_elements: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t)>,
}
#[test]
fn bindgen_test_layout__cef_post_data_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_post_data_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_post_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_post_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_post_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).is_read_only as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).has_excluded_elements as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(has_excluded_elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).get_element_count as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(get_element_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).get_elements as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(get_elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).remove_element as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(remove_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).add_element as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(add_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).remove_elements as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(remove_elements)
        )
    );
}
pub type cef_post_data_t = _cef_post_data_t;
extern "C" {
    pub fn cef_post_data_create() -> *mut cef_post_data_t;
}
#[repr(C)]
pub struct _cef_post_data_element_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int,
    >,
    pub set_to_empty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t)>,
    pub set_to_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, fileName: *const cef_string_t),
    >,
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *const ::std::os::raw::c_void,
        ),
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
        ) -> cef_postdataelement_type_t::Type,
    >,
    pub get_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t,
    >,
    pub get_bytes_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> usize>,
    pub get_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout__cef_post_data_element_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_post_data_element_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_post_data_element_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_post_data_element_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_post_data_element_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_element_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).is_read_only as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_empty as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_empty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_file as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_bytes as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_type as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_file as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_bytes_count as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_bytes_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_bytes as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_bytes)
        )
    );
}
pub type cef_post_data_element_t = _cef_post_data_element_t;
extern "C" {
    pub fn cef_post_data_element_create() -> *mut cef_post_data_element_t;
}
#[repr(C)]
pub struct _cef_string_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_string_visitor_t, string: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_string_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_string_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_string_visitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_visitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_visitor_t>())).visit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
pub type cef_string_visitor_t = _cef_string_visitor_t;
#[repr(C)]
pub struct _cef_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub undo: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub redo: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub cut: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub paste: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub del: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub select_all: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub view_source: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    pub load_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, request: *mut _cef_request_t),
    >,
    pub load_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, url: *const cef_string_t),
    >,
    pub load_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            string_val: *const cef_string_t,
            url: *const cef_string_t,
        ),
    >,
    pub execute_java_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
        ),
    >,
    pub is_main: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_focused: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> int64>,
    pub get_parent:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_frame_t>,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_browser_t,
    >,
    pub get_v8context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_v8context_t,
    >,
    pub visit_dom: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_domvisitor_t),
    >,
    pub create_urlrequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            client: *mut _cef_urlrequest_client_t,
        ) -> *mut _cef_urlrequest_t,
    >,
    pub send_process_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            target_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_frame_t>(),
        248usize,
        concat!("Size of: ", stringify!(_cef_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).undo as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(undo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).redo as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(redo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).cut as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(cut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).copy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).paste as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(paste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).del as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).select_all as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(select_all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).view_source as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(view_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_source as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_text as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).load_request as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(load_request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).load_url as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(load_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).load_string as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(load_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_frame_t>())).execute_java_script as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(execute_java_script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_main as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_focused as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_focused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_name as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_identifier as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_parent as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_url as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_browser as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_v8context as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_v8context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).visit_dom as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(visit_dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).create_urlrequest as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(create_urlrequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_frame_t>())).send_process_message as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(send_process_message)
        )
    );
}
pub type cef_frame_t = _cef_frame_t;
#[repr(C)]
pub struct _cef_x509cert_principal_t {
    pub base: cef_base_ref_counted_t,
    pub get_display_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_common_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_locality_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_state_or_province_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_country_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_street_addresses: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, addresses: cef_string_list_t),
    >,
    pub get_organization_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    pub get_organization_unit_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    pub get_domain_components: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, components: cef_string_list_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_x509cert_principal_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_x509cert_principal_t>(),
        112usize,
        concat!("Size of: ", stringify!(_cef_x509cert_principal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_x509cert_principal_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_x509cert_principal_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_display_name as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_display_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_common_name as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_common_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_locality_name as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_locality_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_state_or_province_name
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_state_or_province_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_country_name as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_country_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_street_addresses as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_street_addresses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_organization_names as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_organization_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_organization_unit_names
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_organization_unit_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_domain_components as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_domain_components)
        )
    );
}
#[repr(C)]
pub struct _cef_x509certificate_t {
    pub base: cef_base_ref_counted_t,
    pub get_subject: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_issuer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_serial_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_valid_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    pub get_valid_expiry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    pub get_derencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_pemencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_issuer_chain_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> usize>,
    pub get_derencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
    pub get_pemencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_x509certificate_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_x509certificate_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_x509certificate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_x509certificate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_x509certificate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_x509certificate_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_subject as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_subject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_issuer as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_issuer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_serial_number as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_serial_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_valid_start as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_valid_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_valid_expiry as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_valid_expiry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_derencoded as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_derencoded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_pemencoded as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_pemencoded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_issuer_chain_size as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_issuer_chain_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_derencoded_issuer_chain
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_derencoded_issuer_chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_pemencoded_issuer_chain
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_pemencoded_issuer_chain)
        )
    );
}
#[repr(C)]
pub struct _cef_sslstatus_t {
    pub base: cef_base_ref_counted_t,
    pub is_secure_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> ::std::os::raw::c_int,
    >,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_cert_status_t,
    >,
    pub get_sslversion: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_version_t::Type,
    >,
    pub get_content_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_content_status_t::Type,
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> *mut _cef_x509certificate_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_sslstatus_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_sslstatus_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_sslstatus_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_sslstatus_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_sslstatus_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslstatus_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).is_secure_connection as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(is_secure_connection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_cert_status as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_cert_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_sslversion as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_sslversion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_content_status as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_content_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_x509certificate as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_x509certificate)
        )
    );
}
#[repr(C)]
pub struct _cef_navigation_entry_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_display_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_transition_type_t,
    >,
    pub has_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_completion_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_time_t,
    >,
    pub get_http_status_code: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_sslstatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> *mut _cef_sslstatus_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_navigation_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_navigation_entry_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_navigation_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_navigation_entry_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_navigation_entry_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_navigation_entry_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).is_valid as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_url as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_display_url as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_display_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_original_url as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_original_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_title as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_transition_type as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_transition_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).has_post_data as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(has_post_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_completion_time as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_completion_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_http_status_code as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_http_status_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_sslstatus as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_sslstatus)
        )
    );
}
pub type cef_navigation_entry_t = _cef_navigation_entry_t;
#[repr(C)]
pub struct _cef_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).cancel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
pub type cef_callback_t = _cef_callback_t;
#[repr(C)]
pub struct _cef_completion_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_completion_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_completion_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_completion_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_completion_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_completion_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_completion_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_completion_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_completion_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_completion_callback_t>())).on_complete as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_completion_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[repr(C)]
pub struct _cef_cookie_manager_t {
    pub base: cef_base_ref_counted_t,
    pub set_supported_schemes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            schemes: cef_string_list_t,
            include_defaults: ::std::os::raw::c_int,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush_store: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_manager_t>(),
        88usize,
        concat!("Size of: ", stringify!(_cef_cookie_manager_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_manager_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cookie_manager_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_manager_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).set_supported_schemes as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(set_supported_schemes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).visit_all_cookies as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(visit_all_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).visit_url_cookies as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(visit_url_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).set_cookie as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(set_cookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).delete_cookies as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(delete_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).flush_store as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(flush_store)
        )
    );
}
#[repr(C)]
pub struct _cef_cookie_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_cookie_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cookie_visitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_visitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_visitor_t>())).visit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[repr(C)]
pub struct _cef_set_cookie_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_set_cookie_callback_t,
            success: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_set_cookie_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_set_cookie_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_set_cookie_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_set_cookie_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_set_cookie_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_set_cookie_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_set_cookie_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_set_cookie_callback_t>())).on_complete as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_set_cookie_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[repr(C)]
pub struct _cef_delete_cookies_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_delete_cookies_callback_t,
            num_deleted: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_delete_cookies_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_delete_cookies_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_delete_cookies_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_delete_cookies_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_delete_cookies_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_delete_cookies_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_delete_cookies_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_delete_cookies_callback_t>())).on_complete as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_delete_cookies_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[repr(C)]
pub struct _cef_extension_t {
    pub base: cef_base_ref_counted_t,
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    pub get_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    pub get_manifest: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_dictionary_value_t,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_t,
            that: *mut _cef_extension_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_extension_handler_t,
    >,
    pub get_loader_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_request_context_t,
    >,
    pub is_loaded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> ::std::os::raw::c_int,
    >,
    pub unload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t)>,
}
#[test]
fn bindgen_test_layout__cef_extension_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_extension_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_extension_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_extension_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_extension_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_identifier as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_path as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_manifest as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_manifest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).is_same as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_handler as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_t>())).get_loader_context as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_loader_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).is_loaded as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(is_loaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).unload as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(unload)
        )
    );
}
pub type cef_extension_t = _cef_extension_t;
#[repr(C)]
pub struct _cef_get_extension_resource_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_get_extension_resource_callback_t,
            stream: *mut _cef_stream_reader_t,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_get_extension_resource_callback_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_get_extension_resource_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_get_extension_resource_callback_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_cef_get_extension_resource_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_get_extension_resource_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_get_extension_resource_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).cont as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).cancel as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
pub struct _cef_extension_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_extension_load_failed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_handler_t, result: cef_errorcode_t::Type),
    >,
    pub on_extension_loaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    pub on_extension_unloaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    pub on_before_background_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            url: *const cef_string_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            active_browser: *mut _cef_browser_t,
            index: ::std::os::raw::c_int,
            url: *const cef_string_t,
            active: ::std::os::raw::c_int,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_active_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
        ) -> *mut _cef_browser_t,
    >,
    pub can_access_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
            target_browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            file: *const cef_string_t,
            callback: *mut _cef_get_extension_resource_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_extension_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_extension_handler_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_extension_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_extension_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_extension_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_load_failed
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_load_failed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_loaded as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_loaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_unloaded as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_unloaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_before_background_browser
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_before_background_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_before_browser as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_before_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).get_active_browser as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(get_active_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).can_access_browser as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(can_access_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).get_extension_resource as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(get_extension_resource)
        )
    );
}
pub type cef_extension_handler_t = _cef_extension_handler_t;
#[repr(C)]
pub struct _cef_resolve_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t::Type,
            resolved_ips: cef_string_list_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resolve_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resolve_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_resolve_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resolve_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resolve_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resolve_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resolve_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resolve_callback_t>())).on_resolve_completed as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resolve_callback_t),
            "::",
            stringify!(on_resolve_completed)
        )
    );
}
#[repr(C)]
pub struct _cef_request_context_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
        ) -> *mut _cef_request_context_handler_t,
    >,
    pub get_cache_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t,
    >,
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_cookie_manager_t,
    >,
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_scheme_handler_factories: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    pub purge_plugin_list_cache: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            reload_pages: ::std::os::raw::c_int,
        ),
    >,
    pub has_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            include_defaults: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub can_set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub close_all_connections: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub resolve_host: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t,
        ),
    >,
    pub load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            root_directory: *const cef_string_t,
            manifest: *mut _cef_dictionary_value_t,
            handler: *mut _cef_extension_handler_t,
        ),
    >,
    pub did_load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extensions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_ids: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> *mut _cef_extension_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_request_context_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_context_t>(),
        224usize,
        concat!("Size of: ", stringify!(_cef_request_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_context_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_context_t>())).is_same as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).is_sharing_with as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_sharing_with)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).is_global as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_global)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_handler as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_cache_path as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_cache_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_cookie_manager as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_cookie_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).register_scheme_handler_factory
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(register_scheme_handler_factory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_scheme_handler_factories
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_scheme_handler_factories)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).purge_plugin_list_cache as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(purge_plugin_list_cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).has_preference as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(has_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_preference as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_all_preferences as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_all_preferences)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).can_set_preference as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(can_set_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).set_preference as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(set_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_certificate_exceptions
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_certificate_exceptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_http_auth_credentials
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_http_auth_credentials)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).close_all_connections as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(close_all_connections)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).resolve_host as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(resolve_host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).load_extension as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(load_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).did_load_extension as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(did_load_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).has_extension as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(has_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_extensions as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_extensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_extension as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_extension)
        )
    );
}
pub type cef_request_context_t = _cef_request_context_t;
extern "C" {
    pub fn cef_request_context_get_global_context() -> *mut cef_request_context_t;
}
extern "C" {
    pub fn cef_request_context_create_context(
        settings: *const _cef_request_context_settings_t,
        handler: *mut _cef_request_context_handler_t,
    ) -> *mut cef_request_context_t;
}
extern "C" {
    pub fn cef_create_context_shared(
        other: *mut cef_request_context_t,
        handler: *mut _cef_request_context_handler_t,
    ) -> *mut cef_request_context_t;
}
#[repr(C)]
pub struct _cef_browser_t {
    pub base: cef_base_ref_counted_t,
    pub get_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_browser_host_t,
    >,
    pub can_go_back: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub go_back: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub can_go_forward: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub go_forward: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub is_loading: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub reload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub reload_ignore_cache:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub stop_load: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            that: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_popup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub has_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub get_main_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    pub get_focused_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    pub get_frame_byident: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, identifier: int64) -> *mut _cef_frame_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            name: *const cef_string_t,
        ) -> *mut _cef_frame_t,
    >,
    pub get_frame_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> usize>,
    pub get_frame_identifiers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            identifiersCount: *mut usize,
            identifiers: *mut int64,
        ),
    >,
    pub get_frame_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, names: cef_string_list_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_t>(),
        200usize,
        concat!("Size of: ", stringify!(_cef_browser_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_browser_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_host as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).can_go_back as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(can_go_back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).go_back as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(go_back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).can_go_forward as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(can_go_forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).go_forward as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(go_forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_loading as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_loading)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).reload as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(reload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).reload_ignore_cache as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(reload_ignore_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).stop_load as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(stop_load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_identifier as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_same as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_popup as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_popup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).has_document as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(has_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_main_frame as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_main_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_focused_frame as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_focused_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_byident as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_byident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_count as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_identifiers as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_identifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_names as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_names)
        )
    );
}
pub type cef_browser_t = _cef_browser_t;
#[repr(C)]
pub struct _cef_run_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_run_file_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_run_file_dialog_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_run_file_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_run_file_dialog_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_run_file_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_file_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_file_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_file_dialog_callback_t>())).on_file_dialog_dismissed
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_file_dialog_callback_t),
            "::",
            stringify!(on_file_dialog_dismissed)
        )
    );
}
pub type cef_run_file_dialog_callback_t = _cef_run_file_dialog_callback_t;
#[repr(C)]
pub struct _cef_navigation_entry_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_navigation_entry_visitor_t,
            entry: *mut _cef_navigation_entry_t,
            current: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_navigation_entry_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_navigation_entry_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_navigation_entry_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_navigation_entry_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_navigation_entry_visitor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_visitor_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_visitor_t>())).visit as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
pub type cef_navigation_entry_visitor_t = _cef_navigation_entry_visitor_t;
#[repr(C)]
pub struct _cef_pdf_print_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_pdf_print_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_pdf_print_callback_t,
            path: *const cef_string_t,
            ok: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_pdf_print_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_pdf_print_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_pdf_print_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_pdf_print_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_pdf_print_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_pdf_print_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_callback_t>())).on_pdf_print_finished as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_callback_t),
            "::",
            stringify!(on_pdf_print_finished)
        )
    );
}
pub type cef_pdf_print_callback_t = _cef_pdf_print_callback_t;
#[repr(C)]
pub struct _cef_download_image_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_download_image_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_image_callback_t,
            image_url: *const cef_string_t,
            http_status_code: ::std::os::raw::c_int,
            image: *mut _cef_image_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_download_image_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_image_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_download_image_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_image_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_download_image_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_image_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_image_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_image_callback_t>())).on_download_image_finished
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_image_callback_t),
            "::",
            stringify!(on_download_image_finished)
        )
    );
}
pub type cef_download_image_callback_t = _cef_download_image_callback_t;
#[repr(C)]
pub struct _cef_browser_host_t {
    pub base: cef_base_ref_counted_t,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_browser_t,
    >,
    pub close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, force_close: ::std::os::raw::c_int),
    >,
    pub try_close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, focus: ::std::os::raw::c_int),
    >,
    pub get_window_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> HWND>,
    pub get_opener_window_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> HWND>,
    pub has_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_client_t,
    >,
    pub get_request_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_request_context_t,
    >,
    pub get_zoom_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> f64>,
    pub set_zoom_level: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, zoomLevel: f64),
    >,
    pub run_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_run_file_dialog_callback_t,
        ),
    >,
    pub start_download: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, url: *const cef_string_t),
    >,
    pub download_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            image_url: *const cef_string_t,
            is_favicon: ::std::os::raw::c_int,
            max_image_size: uint32,
            bypass_cache: ::std::os::raw::c_int,
            callback: *mut _cef_download_image_callback_t,
        ),
    >,
    pub print: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub print_to_pdf: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            path: *const cef_string_t,
            settings: *const _cef_pdf_print_settings_t,
            callback: *mut _cef_pdf_print_callback_t,
        ),
    >,
    pub find: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            identifier: ::std::os::raw::c_int,
            searchText: *const cef_string_t,
            forward: ::std::os::raw::c_int,
            matchCase: ::std::os::raw::c_int,
            findNext: ::std::os::raw::c_int,
        ),
    >,
    pub stop_finding: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            clearSelection: ::std::os::raw::c_int,
        ),
    >,
    pub show_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            windowInfo: *const _cef_window_info_t,
            client: *mut _cef_client_t,
            settings: *const _cef_browser_settings_t,
            inspect_element_at: *const cef_point_t,
        ),
    >,
    pub close_dev_tools:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub has_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub get_navigation_entries: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            visitor: *mut _cef_navigation_entry_visitor_t,
            current_only: ::std::os::raw::c_int,
        ),
    >,
    pub set_mouse_cursor_change_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, disabled: ::std::os::raw::c_int),
    >,
    pub is_mouse_cursor_change_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub replace_misspelling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    pub add_word_to_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    pub is_window_rendering_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub was_resized: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub was_hidden: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, hidden: ::std::os::raw::c_int),
    >,
    pub notify_screen_info_changed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            type_: cef_paint_element_type_t::Type,
        ),
    >,
    pub send_external_begin_frame:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub send_key_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_key_event_t),
    >,
    pub send_mouse_click_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            type_: cef_mouse_button_type_t::Type,
            mouseUp: ::std::os::raw::c_int,
            clickCount: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_move_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            mouseLeave: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_wheel_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            deltaX: ::std::os::raw::c_int,
            deltaY: ::std::os::raw::c_int,
        ),
    >,
    pub send_touch_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_touch_event_t),
    >,
    pub send_focus_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, setFocus: ::std::os::raw::c_int),
    >,
    pub send_capture_lost_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub notify_move_or_resize_started:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, frame_rate: ::std::os::raw::c_int),
    >,
    pub ime_set_composition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            underlinesCount: usize,
            underlines: *const cef_composition_underline_t,
            replacement_range: *const cef_range_t,
            selection_range: *const cef_range_t,
        ),
    >,
    pub ime_commit_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            replacement_range: *const cef_range_t,
            relative_cursor_pos: ::std::os::raw::c_int,
        ),
    >,
    pub ime_finish_composing_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            keep_selection: ::std::os::raw::c_int,
        ),
    >,
    pub ime_cancel_composition:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            drag_data: *mut _cef_drag_data_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_target_drag_over: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_target_drag_leave:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drop: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_mouse_event_t),
    >,
    pub drag_source_ended_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_source_system_drag_ended:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_visible_navigation_entry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_navigation_entry_t,
    >,
    pub set_accessibility_state: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            accessibility_state: cef_state_t::Type,
        ),
    >,
    pub set_auto_resize_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            enabled: ::std::os::raw::c_int,
            min_size: *const cef_size_t,
            max_size: *const cef_size_t,
        ),
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_extension_t,
    >,
    pub is_background_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, mute: ::std::os::raw::c_int),
    >,
    pub is_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_host_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_host_t>(),
        512usize,
        concat!("Size of: ", stringify!(_cef_browser_host_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_host_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_browser_host_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).get_browser as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).close_browser as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(close_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).try_close_browser as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(try_close_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).set_focus as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_window_handle as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_window_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_opener_window_handle as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_opener_window_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).has_view as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(has_view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).get_client as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_client)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_request_context as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_request_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_zoom_level as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_zoom_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_zoom_level as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_zoom_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).run_file_dialog as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(run_file_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).start_download as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(start_download)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).download_image as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(download_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).print as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(print)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).print_to_pdf as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(print_to_pdf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).find as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(find)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).stop_finding as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(stop_finding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).show_dev_tools as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(show_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).close_dev_tools as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(close_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).has_dev_tools as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(has_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_navigation_entries as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_navigation_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_mouse_cursor_change_disabled
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_mouse_cursor_change_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_mouse_cursor_change_disabled
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_mouse_cursor_change_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).replace_misspelling as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(replace_misspelling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).add_word_to_dictionary as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(add_word_to_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_window_rendering_disabled as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_window_rendering_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).was_resized as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(was_resized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).was_hidden as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(was_hidden)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).notify_screen_info_changed as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(notify_screen_info_changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).invalidate as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_external_begin_frame as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_external_begin_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_key_event as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_key_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_click_event as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_click_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_move_event as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_move_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_wheel_event as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_wheel_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_touch_event as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_touch_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_focus_event as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_focus_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_capture_lost_event as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_capture_lost_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).notify_move_or_resize_started
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(notify_move_or_resize_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_windowless_frame_rate as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_windowless_frame_rate as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_set_composition as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_set_composition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_commit_text as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_commit_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_finish_composing_text as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_finish_composing_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_cancel_composition as *const _
                as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_cancel_composition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_enter as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_enter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_over as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_over)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_leave as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_leave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drop as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_source_ended_at as *const _
                as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_source_ended_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_source_system_drag_ended
                as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_source_system_drag_ended)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_visible_navigation_entry as *const _
                as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_visible_navigation_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_accessibility_state as *const _
                as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_accessibility_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_auto_resize_enabled as *const _
                as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_auto_resize_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_extension as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_background_host as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_background_host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_audio_muted as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_audio_muted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_audio_muted as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_audio_muted)
        )
    );
}
pub type cef_browser_host_t = _cef_browser_host_t;
extern "C" {
    pub fn cef_browser_host_create_browser(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_browser_host_create_browser_sync(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_browser_t;
}
#[repr(C)]
pub struct _cef_print_settings_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> *mut _cef_print_settings_t,
    >,
    pub set_orientation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, landscape: ::std::os::raw::c_int),
    >,
    pub is_landscape: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_printer_printable_area: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            physical_size_device_units: *const cef_size_t,
            printable_area_device_units: *const cef_rect_t,
            landscape_needs_flip: ::std::os::raw::c_int,
        ),
    >,
    pub set_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, name: *const cef_string_t),
    >,
    pub get_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_string_userfree_t,
    >,
    pub set_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, dpi: ::std::os::raw::c_int),
    >,
    pub get_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: usize,
            ranges: *const cef_range_t,
        ),
    >,
    pub get_page_ranges_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> usize>,
    pub get_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: *mut usize,
            ranges: *mut cef_range_t,
        ),
    >,
    pub set_selection_only: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            selection_only: ::std::os::raw::c_int,
        ),
    >,
    pub is_selection_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, collate: ::std::os::raw::c_int),
    >,
    pub will_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, model: cef_color_model_t::Type),
    >,
    pub get_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_color_model_t::Type,
    >,
    pub set_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, copies: ::std::os::raw::c_int),
    >,
    pub get_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, mode: cef_duplex_mode_t::Type),
    >,
    pub get_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_duplex_mode_t::Type,
    >,
}
#[test]
fn bindgen_test_layout__cef_print_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_settings_t>(),
        224usize,
        concat!("Size of: ", stringify!(_cef_print_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_print_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_read_only as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).copy as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_orientation as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_landscape as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_landscape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_printer_printable_area as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_printer_printable_area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_device_name as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_device_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_device_name as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_device_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).set_dpi as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_dpi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).get_dpi as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_dpi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_page_ranges as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_page_ranges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_page_ranges_count as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_page_ranges_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_page_ranges as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_page_ranges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_selection_only as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_selection_only as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_collate as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_collate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).will_collate as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(will_collate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_color_model as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_color_model)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_color_model as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_color_model)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_copies as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_copies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_copies as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_copies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_duplex_mode as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_duplex_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_duplex_mode as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_duplex_mode)
        )
    );
}
#[repr(C)]
pub struct _cef_print_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_dialog_callback_t,
            settings: *mut _cef_print_settings_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_dialog_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_print_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_dialog_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_print_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_dialog_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_print_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).cancel as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
pub struct _cef_print_job_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_job_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_print_job_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_job_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_print_job_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_job_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_print_job_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_job_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_job_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_job_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_job_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[repr(C)]
pub struct _cef_print_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_print_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_print_settings: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            settings: *mut _cef_print_settings_t,
            get_defaults: ::std::os::raw::c_int,
        ),
    >,
    pub on_print_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            has_selection: ::std::os::raw::c_int,
            callback: *mut _cef_print_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_print_job: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            document_name: *const cef_string_t,
            pdf_file_path: *const cef_string_t,
            callback: *mut _cef_print_job_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_print_reset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    pub get_pdf_paper_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            device_units_per_inch: ::std::os::raw::c_int,
        ) -> cef_size_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_print_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_handler_t>(),
        88usize,
        concat!("Size of: ", stringify!(_cef_print_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_print_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_start as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_settings as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_settings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_dialog as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_job as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_job)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_reset as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_reset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).get_pdf_paper_size as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(get_pdf_paper_size)
        )
    );
}
pub type cef_print_handler_t = _cef_print_handler_t;
#[repr(C)]
pub struct _cef_browser_process_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_context_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t)>,
    pub on_before_child_process_launch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    pub on_render_process_thread_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            extra_info: *mut _cef_list_value_t,
        ),
    >,
    pub get_print_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
        ) -> *mut _cef_print_handler_t,
    >,
    pub on_schedule_message_pump_work: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t, delay_ms: int64),
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_process_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_process_handler_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_browser_process_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_process_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_browser_process_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).on_context_initialized
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_context_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>()))
                .on_before_child_process_launch as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_before_child_process_launch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>()))
                .on_render_process_thread_created as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_render_process_thread_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).get_print_handler as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(get_print_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).on_schedule_message_pump_work
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_schedule_message_pump_work)
        )
    );
}
pub type cef_browser_process_handler_t = _cef_browser_process_handler_t;
#[repr(C)]
pub struct _cef_load_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_loading_state_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            isLoading: ::std::os::raw::c_int,
            canGoBack: ::std::os::raw::c_int,
            canGoForward: ::std::os::raw::c_int,
        ),
    >,
    pub on_load_start: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            transition_type: cef_transition_type_t,
        ),
    >,
    pub on_load_end: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            httpStatusCode: ::std::os::raw::c_int,
        ),
    >,
    pub on_load_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            errorCode: cef_errorcode_t::Type,
            errorText: *const cef_string_t,
            failedUrl: *const cef_string_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_load_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_load_handler_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_load_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_load_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_load_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_load_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_loading_state_change as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_loading_state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_start as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_end as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_error as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_error)
        )
    );
}
pub type cef_load_handler_t = _cef_load_handler_t;
#[repr(C)]
pub struct _cef_task_t {
    pub base: cef_base_ref_counted_t,
    pub execute: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_task_t)>,
}
#[test]
fn bindgen_test_layout__cef_task_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_task_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_task_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_task_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_task_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_t>())).execute as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_t),
            "::",
            stringify!(execute)
        )
    );
}
#[repr(C)]
pub struct _cef_task_runner_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            that: *mut _cef_task_runner_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub belongs_to_current_thread: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_task_runner_t) -> ::std::os::raw::c_int,
    >,
    pub belongs_to_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            threadId: cef_thread_id_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_delayed_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
            delay_ms: int64,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_task_runner_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_task_runner_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_task_runner_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_task_runner_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_task_runner_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).is_same as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).belongs_to_current_thread as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(belongs_to_current_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).belongs_to_thread as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(belongs_to_thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).post_task as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(post_task)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).post_delayed_task as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(post_delayed_task)
        )
    );
}
#[repr(C)]
pub struct _cef_v8context_t {
    pub base: cef_base_ref_counted_t,
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_task_runner_t,
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_browser_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_frame_t,
    >,
    pub get_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_v8value_t,
    >,
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub exit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            that: *mut _cef_v8context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub eval: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut *mut _cef_v8exception_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8context_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8context_t>(),
        112usize,
        concat!("Size of: ", stringify!(_cef_v8context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8context_t>())).get_task_runner as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_task_runner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).is_valid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_browser as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_frame as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_global as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_global)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).enter as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).exit as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).is_same as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).eval as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(eval)
        )
    );
}
pub type cef_v8context_t = _cef_v8context_t;
#[repr(C)]
pub struct _cef_v8handler_t {
    pub base: cef_base_ref_counted_t,
    pub execute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8handler_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8handler_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_v8handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8handler_t>())).execute as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8handler_t),
            "::",
            stringify!(execute)
        )
    );
}
pub type cef_v8handler_t = _cef_v8handler_t;
#[repr(C)]
pub struct _cef_v8accessor_t {
    pub base: cef_base_ref_counted_t,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8accessor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8accessor_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_v8accessor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8accessor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8accessor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).get as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).set as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(set)
        )
    );
}
pub type cef_v8accessor_t = _cef_v8accessor_t;
#[repr(C)]
pub struct _cef_v8interceptor_t {
    pub base: cef_base_ref_counted_t,
    pub get_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8interceptor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8interceptor_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_v8interceptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8interceptor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8interceptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).get_byname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(get_byname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8interceptor_t>())).get_byindex as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(get_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).set_byname as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(set_byname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8interceptor_t>())).set_byindex as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(set_byindex)
        )
    );
}
pub type cef_v8interceptor_t = _cef_v8interceptor_t;
#[repr(C)]
pub struct _cef_v8exception_t {
    pub base: cef_base_ref_counted_t,
    pub get_message: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_source_line: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_script_resource_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_start_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_end_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_start_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_end_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8exception_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8exception_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_v8exception_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8exception_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8exception_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8exception_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8exception_t>())).get_message as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_source_line as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_source_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_script_resource_name as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_script_resource_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_line_number as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_line_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_start_position as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_start_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_end_position as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_end_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_start_column as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_start_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_end_column as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_end_column)
        )
    );
}
pub type cef_v8exception_t = _cef_v8exception_t;
#[repr(C)]
pub struct _cef_v8array_buffer_release_callback_t {
    pub base: cef_base_ref_counted_t,
    pub release_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8array_buffer_release_callback_t,
            buffer: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_v8array_buffer_release_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8array_buffer_release_callback_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_cef_v8array_buffer_release_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8array_buffer_release_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_v8array_buffer_release_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8array_buffer_release_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8array_buffer_release_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8array_buffer_release_callback_t>())).release_buffer
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8array_buffer_release_callback_t),
            "::",
            stringify!(release_buffer)
        )
    );
}
pub type cef_v8array_buffer_release_callback_t = _cef_v8array_buffer_release_callback_t;
#[repr(C)]
pub struct _cef_v8value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_undefined: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_uint: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_date: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_object: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_function: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            that: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_bool_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_int_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> int32>,
    pub get_uint_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> uint32>,
    pub get_double_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> f64>,
    pub get_date_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_time_t>,
    pub get_string_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    pub is_user_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub has_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8exception_t,
    >,
    pub clear_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub will_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub set_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            rethrow: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_v8value_t,
    >,
    pub get_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8value_t,
    >,
    pub set_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            value: *mut _cef_v8value_t,
            attribute: cef_v8_propertyattribute_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
            value: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_value_byaccessor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            settings: cef_v8_accesscontrol_t::Type,
            attribute: cef_v8_propertyattribute_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_user_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            user_data: *mut _cef_base_ref_counted_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_user_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_base_ref_counted_t,
    >,
    pub get_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub adjust_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            change_in_bytes: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_array_length: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_array_buffer_release_callback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
        ) -> *mut _cef_v8array_buffer_release_callback_t,
    >,
    pub neuter_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    pub get_function_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8handler_t,
    >,
    pub execute_function: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
    pub execute_function_with_context: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            context: *mut _cef_v8context_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8value_t>(),
        416usize,
        concat!("Size of: ", stringify!(_cef_v8value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_undefined as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_undefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_null as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_bool as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_int as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_uint as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_uint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_double as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_date as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_string as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_object as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_array as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_array_buffer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_array_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_function as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_same as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_bool_value as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_bool_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_int_value as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_int_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_uint_value as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_uint_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_double_value as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_double_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_date_value as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_date_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_string_value as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_string_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_user_created as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_user_created)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).has_exception as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_exception as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).clear_exception as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(clear_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).will_rethrow_exceptions as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(will_rethrow_exceptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_rethrow_exceptions as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_rethrow_exceptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).has_value_bykey as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).has_value_byindex as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_value_byindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).delete_value_bykey as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(delete_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).delete_value_byindex as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(delete_value_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_value_bykey as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_value_byindex as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_value_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_bykey as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_byindex as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_byindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_byaccessor as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_byaccessor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_keys as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).set_user_data as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_user_data as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_externally_allocated_memory as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_externally_allocated_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).adjust_externally_allocated_memory
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(adjust_externally_allocated_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_array_length as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_array_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_array_buffer_release_callback as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_array_buffer_release_callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).neuter_array_buffer as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(neuter_array_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_function_name as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_function_handler as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_function_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).execute_function as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(execute_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).execute_function_with_context as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(execute_function_with_context)
        )
    );
}
pub type cef_v8value_t = _cef_v8value_t;
extern "C" {
    pub fn cef_v8value_create_undefined() -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_null() -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_bool(value: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_int(value: int32) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_uint(value: uint32) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_double(value: f64) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_date(date: *const cef_time_t) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_string(value: *const cef_string_t) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_object(
        accessor: *mut cef_v8accessor_t,
        interceptor: *mut cef_v8interceptor_t,
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_array(length: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_array_buffer(
        buffer: *mut ::std::os::raw::c_void,
        length: usize,
        release_callback: *mut cef_v8array_buffer_release_callback_t,
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_function(
        name: *const cef_string_t,
        handler: *mut cef_v8handler_t,
    ) -> *mut cef_v8value_t;
}
#[repr(C)]
pub struct _cef_v8stack_trace_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    pub get_frame_count: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8stack_trace_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8stack_frame_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8stack_trace_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8stack_trace_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_v8stack_trace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8stack_trace_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8stack_trace_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).get_frame_count as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(get_frame_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).get_frame as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(get_frame)
        )
    );
}
pub type cef_v8stack_trace_t = _cef_v8stack_trace_t;
extern "C" {
    pub fn cef_v8stack_trace_get_current(
        frame_limit: ::std::os::raw::c_int,
    ) -> *mut cef_v8stack_trace_t;
}
#[repr(C)]
pub struct _cef_v8stack_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_script_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_script_name_or_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_eval: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_constructor: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8stack_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8stack_frame_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_v8stack_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8stack_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8stack_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_script_name as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_script_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_script_name_or_source_url
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_script_name_or_source_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_function_name as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_line_number as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_line_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_column as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_eval as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_eval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_constructor as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_constructor)
        )
    );
}
pub type cef_v8stack_frame_t = _cef_v8stack_frame_t;
extern "C" {
    pub fn cef_register_extension(
        extension_name: *const cef_string_t,
        javascript_code: *const cef_string_t,
        handler: *mut cef_v8handler_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct _cef_render_process_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_render_thread_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            extra_info: *mut _cef_list_value_t,
        ),
    >,
    pub on_web_kit_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t)>,
    pub on_browser_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            extra_info: *mut _cef_dictionary_value_t,
        ),
    >,
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t) -> *mut _cef_load_handler_t,
    >,
    pub on_context_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    pub on_context_released: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    pub on_uncaught_exception: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
            exception: *mut _cef_v8exception_t,
            stackTrace: *mut _cef_v8stack_trace_t,
        ),
    >,
    pub on_focused_node_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            node: *mut _cef_domnode_t,
        ),
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_render_process_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_render_process_handler_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_render_process_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_render_process_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_render_process_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_render_thread_created
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_render_thread_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_web_kit_initialized
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_web_kit_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_browser_created as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_browser_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_browser_destroyed
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_browser_destroyed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).get_load_handler as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(get_load_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_context_created as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_context_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_context_released
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_context_released)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_uncaught_exception
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_uncaught_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_focused_node_changed
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_focused_node_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_process_message_received
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_process_message_received)
        )
    );
}
pub type cef_render_process_handler_t = _cef_render_process_handler_t;
#[repr(C)]
pub struct _cef_resource_bundle_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_localized_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            string_id: ::std::os::raw::c_int,
            string: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_data_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t::Type,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_bundle_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_bundle_handler_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_resource_bundle_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_bundle_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_bundle_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_localized_string
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_localized_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_data_resource as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_data_resource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_data_resource_for_scale
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_data_resource_for_scale)
        )
    );
}
pub type cef_resource_bundle_handler_t = _cef_resource_bundle_handler_t;
#[repr(C)]
pub struct _cef_response_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    pub get_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_errorcode_t::Type,
    >,
    pub set_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, error: cef_errorcode_t::Type),
    >,
    pub get_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    pub set_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int),
    >,
    pub get_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t),
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t),
    >,
    pub get_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, charset: *const cef_string_t),
    >,
    pub get_header: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, url: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_response_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_response_t>(),
        168usize,
        concat!("Size of: ", stringify!(_cef_response_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_response_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_response_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).is_read_only as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_error as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_error as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_status as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_status as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_status_text as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_status_text as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_mime_type as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_mime_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_mime_type as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_mime_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_charset as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_charset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_charset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_charset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_header as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_header_map as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_header_map as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_url as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_url as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_url)
        )
    );
}
pub type cef_response_t = _cef_response_t;
extern "C" {
    pub fn cef_response_create() -> *mut cef_response_t;
}
#[repr(C)]
pub struct _cef_resource_skip_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_resource_skip_callback_t, bytes_skipped: int64),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_skip_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_skip_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_resource_skip_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_skip_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_skip_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_skip_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_skip_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_skip_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_skip_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
pub type cef_resource_skip_callback_t = _cef_resource_skip_callback_t;
#[repr(C)]
pub struct _cef_resource_read_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_read_callback_t,
            bytes_read: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_read_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_read_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_resource_read_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_read_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_read_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_read_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_read_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_read_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_read_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
pub type cef_resource_read_callback_t = _cef_resource_read_callback_t;
#[repr(C)]
pub struct _cef_resource_handler_t {
    pub base: cef_base_ref_counted_t,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            handle_request: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub process_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_response_headers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            response: *mut _cef_response_t,
            response_length: *mut int64,
            redirectUrl: *mut cef_string_t,
        ),
    >,
    pub skip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            bytes_to_skip: int64,
            bytes_skipped: *mut int64,
            callback: *mut _cef_resource_skip_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_resource_read_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_resource_handler_t)>,
}
#[test]
fn bindgen_test_layout__cef_resource_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_handler_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_resource_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).open as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).process_request as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(process_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).get_response_headers as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(get_response_headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).skip as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).read as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).read_response as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(read_response)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).cancel as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(cancel)
        )
    );
}
pub type cef_resource_handler_t = _cef_resource_handler_t;
#[repr(C)]
pub struct _cef_scheme_registrar_t {
    pub base: cef_base_scoped_t,
    pub add_custom_scheme: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_registrar_t,
            scheme_name: *const cef_string_t,
            options: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_scheme_registrar_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_scheme_registrar_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_scheme_registrar_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_scheme_registrar_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_scheme_registrar_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_scheme_registrar_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_registrar_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_registrar_t>())).add_custom_scheme as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_registrar_t),
            "::",
            stringify!(add_custom_scheme)
        )
    );
}
pub type cef_scheme_registrar_t = _cef_scheme_registrar_t;
#[repr(C)]
pub struct _cef_scheme_handler_factory_t {
    pub base: cef_base_ref_counted_t,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_handler_factory_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            scheme_name: *const cef_string_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_scheme_handler_factory_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_scheme_handler_factory_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_scheme_handler_factory_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_scheme_handler_factory_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_scheme_handler_factory_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_handler_factory_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_handler_factory_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_handler_factory_t>())).create as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_handler_factory_t),
            "::",
            stringify!(create)
        )
    );
}
#[repr(C)]
pub struct _cef_app_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_command_line_processing: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_app_t,
            process_type: *const cef_string_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    pub on_register_custom_schemes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t, registrar: *mut _cef_scheme_registrar_t),
    >,
    pub get_resource_bundle_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_resource_bundle_handler_t,
    >,
    pub get_browser_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_browser_process_handler_t,
    >,
    pub get_render_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_render_process_handler_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_app_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_app_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_app_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_app_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_app_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_app_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).on_before_command_line_processing as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(on_before_command_line_processing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).on_register_custom_schemes as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(on_register_custom_schemes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_resource_bundle_handler as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_resource_bundle_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_browser_process_handler as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_browser_process_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_render_process_handler as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_render_process_handler)
        )
    );
}
pub type cef_app_t = _cef_app_t;
extern "C" {
    pub fn cef_execute_process(
        args: *const _cef_main_args_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_initialize(
        args: *const _cef_main_args_t,
        settings: *const _cef_settings_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_shutdown();
}
extern "C" {
    pub fn cef_do_message_loop_work();
}
extern "C" {
    pub fn cef_run_message_loop();
}
extern "C" {
    pub fn cef_quit_message_loop();
}
extern "C" {
    pub fn cef_set_osmodal_loop(osModalLoop: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cef_enable_highdpi_support();
}
#[repr(C)]
pub struct _cef_menu_model_t {
    pub base: cef_base_ref_counted_t,
    pub is_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub get_count: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub add_separator: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub add_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_check_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_radio_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    pub insert_separator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_check_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_radio_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_index_of: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub get_label_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub set_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_label_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t::Type,
    >,
    pub get_type_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t::Type,
    >,
    pub get_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    pub get_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_visible_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_visible_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_checked_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_checked_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_list_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_menu_model_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_menu_model_t>(),
        488usize,
        concat!("Size of: ", stringify!(_cef_menu_model_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_menu_model_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_menu_model_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_sub_menu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_sub_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).clear as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_separator as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_separator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_item as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).add_check_item as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_check_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).add_radio_item as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_radio_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_sub_menu as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_sub_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_separator_at as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_separator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_item_at as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_check_item_at as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_check_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_radio_item_at as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_radio_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_sub_menu_at as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_sub_menu_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).remove as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_at as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_index_of as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_index_of)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_command_id_at as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_command_id_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_command_id_at as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_command_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_label as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_label_at as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_label_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_label as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_label_at as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_label_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_type as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_type_at as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_type_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_group_id as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_group_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_group_id_at as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_group_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_group_id as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_group_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_group_id_at as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_group_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_sub_menu as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_sub_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_sub_menu_at as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_sub_menu_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_visible as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_visible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_visible_at as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_visible_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_visible as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_visible_at as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_visible_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_enabled as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_enabled_at as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_enabled_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_enabled as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_enabled_at as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_enabled_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_checked as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_checked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_checked_at as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_checked_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_checked as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_checked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_checked_at as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_checked_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).has_accelerator as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(has_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).has_accelerator_at as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(has_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_accelerator as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_accelerator_at as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_accelerator as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_accelerator_at as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_accelerator as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_accelerator_at as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_accelerator_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_color as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_color_at as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_color_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_color as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_color_at as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_color_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_font_list as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_font_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_font_list_at as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_font_list_at)
        )
    );
}
#[repr(C)]
pub struct _cef_run_context_menu_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_context_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_run_context_menu_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_run_context_menu_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_run_context_menu_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_run_context_menu_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_run_context_menu_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_run_context_menu_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).cancel as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
pub struct _cef_context_menu_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
        ),
    >,
    pub run_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
            callback: *mut _cef_run_context_menu_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_context_menu_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_context_menu_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_context_menu_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_context_menu_handler_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_context_menu_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_context_menu_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_context_menu_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_before_context_menu
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_before_context_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).run_context_menu as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(run_context_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_context_menu_command
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_context_menu_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_context_menu_dismissed
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_context_menu_dismissed)
        )
    );
}
pub type cef_context_menu_handler_t = _cef_context_menu_handler_t;
#[repr(C)]
pub struct _cef_context_menu_params_t {
    pub base: cef_base_ref_counted_t,
    pub get_xcoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_ycoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_type_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_type_flags_t::Type,
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_unfiltered_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub has_image_contents: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_title_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_page_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_frame_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_frame_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_media_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_type_t::Type,
    >,
    pub get_media_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_state_flags_t::Type,
    >,
    pub get_selection_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_misspelled_word: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_dictionary_suggestions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
            suggestions: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub is_spell_check_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_edit_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_edit_state_flags_t::Type,
    >,
    pub is_custom_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub is_pepper_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_context_menu_params_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_context_menu_params_t>(),
        208usize,
        concat!("Size of: ", stringify!(_cef_context_menu_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_context_menu_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_context_menu_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_context_menu_params_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_xcoord as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_xcoord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_ycoord as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_ycoord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_type_flags as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_type_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_link_url as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_link_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_unfiltered_link_url
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_unfiltered_link_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_source_url as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_source_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).has_image_contents as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(has_image_contents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_title_text as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_title_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_page_url as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_page_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_frame_url as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_frame_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_frame_charset as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_frame_charset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_media_type as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_media_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_media_state_flags as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_media_state_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_selection_text as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_selection_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_misspelled_word as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_misspelled_word)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_dictionary_suggestions
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_dictionary_suggestions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_editable as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_editable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_spell_check_enabled
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_spell_check_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_edit_state_flags as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_edit_state_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_custom_menu as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_custom_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_pepper_menu as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_pepper_menu)
        )
    );
}
#[repr(C)]
pub struct _cef_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_file_dialog_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_file_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_file_dialog_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_file_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_file_dialog_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_file_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).cancel as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
pub struct _cef_dialog_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dialog_handler_t,
            browser: *mut _cef_browser_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_file_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_dialog_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_dialog_handler_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_dialog_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_dialog_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_dialog_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dialog_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dialog_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dialog_handler_t>())).on_file_dialog as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dialog_handler_t),
            "::",
            stringify!(on_file_dialog)
        )
    );
}
pub type cef_dialog_handler_t = _cef_dialog_handler_t;
#[repr(C)]
pub struct _cef_display_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_address_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            url: *const cef_string_t,
        ),
    >,
    pub on_title_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            title: *const cef_string_t,
        ),
    >,
    pub on_favicon_urlchange: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            icon_urls: cef_string_list_t,
        ),
    >,
    pub on_fullscreen_mode_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            fullscreen: ::std::os::raw::c_int,
        ),
    >,
    pub on_tooltip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            text: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_status_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            value: *const cef_string_t,
        ),
    >,
    pub on_console_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            level: cef_log_severity_t::Type,
            message: *const cef_string_t,
            source: *const cef_string_t,
            line: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_auto_resize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            new_size: *const cef_size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_loading_progress_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            progress: f64,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_display_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_display_handler_t>(),
        112usize,
        concat!("Size of: ", stringify!(_cef_display_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_display_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_display_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_display_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_address_change as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_address_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_title_change as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_title_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_favicon_urlchange as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_favicon_urlchange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_fullscreen_mode_change as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_fullscreen_mode_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_tooltip as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_tooltip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_status_message as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_status_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_console_message as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_console_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_auto_resize as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_auto_resize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_loading_progress_change
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_loading_progress_change)
        )
    );
}
pub type cef_display_handler_t = _cef_display_handler_t;
#[repr(C)]
pub struct _cef_download_item_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_in_progress: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_canceled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub get_current_speed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_percent_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub get_total_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_received_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_start_time:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_time_t>,
    pub get_end_time:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_time_t>,
    pub get_full_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_id:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> uint32>,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_suggested_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_content_disposition: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_download_item_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_item_t>(),
        176usize,
        concat!("Size of: ", stringify!(_cef_download_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_download_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_in_progress as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_in_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_complete as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_canceled as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_canceled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_current_speed as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_current_speed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_percent_complete as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_percent_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_total_bytes as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_total_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_received_bytes as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_received_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_start_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_start_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_end_time as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_end_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_full_path as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_full_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).get_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).get_url as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_original_url as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_original_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_suggested_file_name as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_suggested_file_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_content_disposition as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_content_disposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_mime_type as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_mime_type)
        )
    );
}
#[repr(C)]
pub struct _cef_before_download_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_before_download_callback_t,
            download_path: *const cef_string_t,
            show_dialog: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_before_download_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_before_download_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_before_download_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_before_download_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_before_download_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_before_download_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_before_download_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_before_download_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_before_download_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[repr(C)]
pub struct _cef_download_item_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    pub pause:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    pub resume:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_download_item_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_item_callback_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_download_item_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_item_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_download_item_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).cancel as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).pause as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(pause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).resume as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(resume)
        )
    );
}
#[repr(C)]
pub struct _cef_download_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_download: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            suggested_name: *const cef_string_t,
            callback: *mut _cef_before_download_callback_t,
        ),
    >,
    pub on_download_updated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            callback: *mut _cef_download_item_callback_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_download_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_download_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_download_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_handler_t>())).on_before_download as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(on_before_download)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_handler_t>())).on_download_updated as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(on_download_updated)
        )
    );
}
pub type cef_download_handler_t = _cef_download_handler_t;
#[repr(C)]
pub struct _cef_drag_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            dragData: *mut _cef_drag_data_t,
            mask: cef_drag_operations_mask_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_draggable_regions_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_drag_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_drag_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_drag_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_drag_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_drag_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_handler_t>())).on_drag_enter as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(on_drag_enter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_handler_t>())).on_draggable_regions_changed as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(on_draggable_regions_changed)
        )
    );
}
pub type cef_drag_handler_t = _cef_drag_handler_t;
#[repr(C)]
pub struct _cef_find_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_find_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_find_handler_t,
            browser: *mut _cef_browser_t,
            identifier: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            selectionRect: *const cef_rect_t,
            activeMatchOrdinal: ::std::os::raw::c_int,
            finalUpdate: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_find_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_find_handler_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_find_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_find_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_find_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_find_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_find_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_find_handler_t>())).on_find_result as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_find_handler_t),
            "::",
            stringify!(on_find_result)
        )
    );
}
pub type cef_find_handler_t = _cef_find_handler_t;
#[repr(C)]
pub struct _cef_focus_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_take_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            next: ::std::os::raw::c_int,
        ),
    >,
    pub on_set_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            source: cef_focus_source_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_got_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_focus_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_focus_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_focus_handler_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_focus_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_focus_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_focus_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_focus_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_take_focus as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_take_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_set_focus as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_set_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_got_focus as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_got_focus)
        )
    );
}
pub type cef_focus_handler_t = _cef_focus_handler_t;
#[repr(C)]
pub struct _cef_jsdialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_callback_t,
            success: ::std::os::raw::c_int,
            user_input: *const cef_string_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_jsdialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_jsdialog_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_jsdialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_jsdialog_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_jsdialog_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[repr(C)]
pub struct _cef_jsdialog_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_jsdialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            dialog_type: cef_jsdialog_type_t::Type,
            message_text: *const cef_string_t,
            default_prompt_text: *const cef_string_t,
            callback: *mut _cef_jsdialog_callback_t,
            suppress_message: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_unload_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            message_text: *const cef_string_t,
            is_reload: ::std::os::raw::c_int,
            callback: *mut _cef_jsdialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_reset_dialog_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_dialog_closed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_jsdialog_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_jsdialog_handler_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_jsdialog_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_jsdialog_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_jsdialog_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_jsdialog as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_jsdialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_before_unload_dialog as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_before_unload_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_reset_dialog_state as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_reset_dialog_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_dialog_closed as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_dialog_closed)
        )
    );
}
pub type cef_jsdialog_handler_t = _cef_jsdialog_handler_t;
#[repr(C)]
pub struct _cef_keyboard_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_pre_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut MSG,
            is_keyboard_shortcut: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut MSG,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_keyboard_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_keyboard_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_keyboard_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_keyboard_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_keyboard_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).on_pre_key_event as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(on_pre_key_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).on_key_event as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(on_key_event)
        )
    );
}
pub type cef_keyboard_handler_t = _cef_keyboard_handler_t;
#[repr(C)]
pub struct _cef_life_span_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_popup: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_frame_name: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t::Type,
            user_gesture: ::std::os::raw::c_int,
            popupFeatures: *const _cef_popup_features_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            no_javascript_access: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_after_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t),
    >,
    pub do_close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_life_span_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_life_span_handler_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_life_span_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_life_span_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_life_span_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_life_span_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_before_popup as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_before_popup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_after_created as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_after_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).do_close as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(do_close)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_before_close as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_before_close)
        )
    );
}
pub type cef_life_span_handler_t = _cef_life_span_handler_t;
#[repr(C)]
pub struct _cef_accessibility_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_accessibility_tree_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t),
    >,
    pub on_accessibility_location_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_accessibility_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_accessibility_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_accessibility_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_accessibility_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_accessibility_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>())).on_accessibility_tree_change
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(on_accessibility_tree_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>()))
                .on_accessibility_location_change as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(on_accessibility_location_change)
        )
    );
}
pub type cef_accessibility_handler_t = _cef_accessibility_handler_t;
#[repr(C)]
pub struct _cef_render_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_accessibility_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
        ) -> *mut _cef_accessibility_handler_t,
    >,
    pub get_root_screen_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_view_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ),
    >,
    pub get_screen_point: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            viewX: ::std::os::raw::c_int,
            viewY: ::std::os::raw::c_int,
            screenX: *mut ::std::os::raw::c_int,
            screenY: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_screen_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            screen_info: *mut _cef_screen_info_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_popup_show: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            show: ::std::os::raw::c_int,
        ),
    >,
    pub on_popup_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *const cef_rect_t,
        ),
    >,
    pub on_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t::Type,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            buffer: *const ::std::os::raw::c_void,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub on_accelerated_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t::Type,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            shared_handle: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_cursor_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            cursor: HCURSOR,
            type_: cef_cursor_type_t::Type,
            custom_cursor_info: *const _cef_cursor_info_t,
        ),
    >,
    pub start_dragging: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            drag_data: *mut _cef_drag_data_t,
            allowed_ops: cef_drag_operations_mask_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub update_drag_cursor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            operation: cef_drag_operations_mask_t,
        ),
    >,
    pub on_scroll_offset_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            x: f64,
            y: f64,
        ),
    >,
    pub on_ime_composition_range_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_range: *const cef_range_t,
            character_boundsCount: usize,
            character_bounds: *const cef_rect_t,
        ),
    >,
    pub on_text_selection_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_text: *const cef_string_t,
            selected_range: *const cef_range_t,
        ),
    >,
    pub on_virtual_keyboard_requested: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            input_mode: cef_text_input_mode_t::Type,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_render_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_render_handler_t>(),
        168usize,
        concat!("Size of: ", stringify!(_cef_render_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_render_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_render_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_render_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_accessibility_handler as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_accessibility_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_root_screen_rect as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_root_screen_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_view_rect as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_view_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_screen_point as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_screen_point)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_screen_info as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_screen_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_popup_show as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_popup_show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_popup_size as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_popup_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_render_handler_t>())).on_paint as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_accelerated_paint as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_accelerated_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_cursor_change as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_cursor_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).start_dragging as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(start_dragging)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).update_drag_cursor as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(update_drag_cursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_scroll_offset_changed as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_scroll_offset_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_ime_composition_range_changed
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_ime_composition_range_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_text_selection_changed as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_text_selection_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_virtual_keyboard_requested
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_virtual_keyboard_requested)
        )
    );
}
pub type cef_render_handler_t = _cef_render_handler_t;
#[repr(C)]
pub struct _cef_auth_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t,
        ),
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_auth_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_auth_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_auth_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_auth_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_auth_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_auth_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).cancel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
pub type cef_auth_callback_t = _cef_auth_callback_t;
#[repr(C)]
pub struct _cef_request_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_callback_t, allow: ::std::os::raw::c_int),
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_request_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_request_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).cancel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
pub type cef_request_callback_t = _cef_request_callback_t;
#[repr(C)]
pub struct _cef_response_filter_t {
    pub base: cef_base_ref_counted_t,
    pub init_filter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_filter_t) -> ::std::os::raw::c_int,
    >,
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_filter_t,
            data_in: *mut ::std::os::raw::c_void,
            data_in_size: usize,
            data_in_read: *mut usize,
            data_out: *mut ::std::os::raw::c_void,
            data_out_size: usize,
            data_out_written: *mut usize,
        ) -> cef_response_filter_status_t::Type,
    >,
}
#[test]
fn bindgen_test_layout__cef_response_filter_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_response_filter_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_response_filter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_response_filter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_response_filter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_filter_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_response_filter_t>())).init_filter as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(init_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_filter_t>())).filter as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(filter)
        )
    );
}
pub type cef_response_filter_t = _cef_response_filter_t;
#[repr(C)]
pub struct _cef_resource_request_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_cookie_access_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_cookie_access_filter_t,
    >,
    pub on_before_resource_load: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_request_callback_t,
        ) -> cef_return_value_t::Type,
    >,
    pub get_resource_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
    pub on_resource_redirect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            new_url: *mut cef_string_t,
        ),
    >,
    pub on_resource_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_response_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> *mut _cef_response_filter_t,
    >,
    pub on_resource_load_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            status: cef_urlrequest_status_t::Type,
            received_content_length: int64,
        ),
    >,
    pub on_protocol_execution: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            allow_os_execution: *mut ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_request_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_request_handler_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_resource_request_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_request_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_request_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_cookie_access_filter
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_cookie_access_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_before_resource_load
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_before_resource_load)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_resource_handler
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_resource_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_redirect
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_redirect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_response
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_response)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_resource_response_filter
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_resource_response_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_load_complete
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_load_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_protocol_execution
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_protocol_execution)
        )
    );
}
pub type cef_resource_request_handler_t = _cef_resource_request_handler_t;
#[repr(C)]
pub struct _cef_cookie_access_filter_t {
    pub base: cef_base_ref_counted_t,
    pub can_send_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub can_save_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_access_filter_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_access_filter_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_cookie_access_filter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_access_filter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cookie_access_filter_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).can_send_cookie as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(can_send_cookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).can_save_cookie as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(can_save_cookie)
        )
    );
}
pub type cef_cookie_access_filter_t = _cef_cookie_access_filter_t;
#[repr(C)]
pub struct _cef_sslinfo_t {
    pub base: cef_base_ref_counted_t,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> cef_cert_status_t,
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> *mut _cef_x509certificate_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_sslinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_sslinfo_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_sslinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_sslinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_sslinfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslinfo_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslinfo_t>())).get_cert_status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(get_cert_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslinfo_t>())).get_x509certificate as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(get_x509certificate)
        )
    );
}
#[repr(C)]
pub struct _cef_select_client_certificate_callback_t {
    pub base: cef_base_ref_counted_t,
    pub select: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_select_client_certificate_callback_t,
            cert: *mut _cef_x509certificate_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_select_client_certificate_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_select_client_certificate_callback_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_cef_select_client_certificate_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_select_client_certificate_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_select_client_certificate_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_select_client_certificate_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_select_client_certificate_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_select_client_certificate_callback_t>())).select as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_select_client_certificate_callback_t),
            "::",
            stringify!(select)
        )
    );
}
#[repr(C)]
pub struct _cef_request_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_browse: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            user_gesture: ::std::os::raw::c_int,
            is_redirect: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_open_urlfrom_tab: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t::Type,
            user_gesture: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_resource_request_handler_t,
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_quota_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            new_size: int64,
            callback: *mut _cef_request_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_certificate_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            cert_error: cef_errorcode_t::Type,
            request_url: *const cef_string_t,
            ssl_info: *mut _cef_sslinfo_t,
            callback: *mut _cef_request_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_select_client_certificate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            certificatesCount: usize,
            certificates: *const *mut _cef_x509certificate_t,
            callback: *mut _cef_select_client_certificate_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_plugin_crashed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            plugin_path: *const cef_string_t,
        ),
    >,
    pub on_render_view_ready: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_render_process_terminated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            status: cef_termination_status_t::Type,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_request_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_handler_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_request_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_before_browse as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_before_browse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_open_urlfrom_tab as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_open_urlfrom_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).get_resource_request_handler
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(get_resource_request_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).get_auth_credentials as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(get_auth_credentials)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_quota_request as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_quota_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_certificate_error as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_certificate_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_select_client_certificate
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_select_client_certificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_plugin_crashed as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_plugin_crashed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_render_view_ready as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_render_view_ready)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_render_process_terminated
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_render_process_terminated)
        )
    );
}
pub type cef_request_handler_t = _cef_request_handler_t;
#[repr(C)]
pub struct _cef_client_t {
    pub base: cef_base_ref_counted_t,
    pub get_context_menu_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_context_menu_handler_t,
    >,
    pub get_dialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_dialog_handler_t,
    >,
    pub get_display_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_display_handler_t,
    >,
    pub get_download_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_download_handler_t,
    >,
    pub get_drag_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_drag_handler_t,
    >,
    pub get_find_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_find_handler_t,
    >,
    pub get_focus_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_focus_handler_t,
    >,
    pub get_jsdialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_jsdialog_handler_t,
    >,
    pub get_keyboard_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_keyboard_handler_t,
    >,
    pub get_life_span_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_life_span_handler_t,
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_load_handler_t,
    >,
    pub get_render_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_render_handler_t,
    >,
    pub get_request_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_request_handler_t,
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_client_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_client_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_client_t>(),
        152usize,
        concat!("Size of: ", stringify!(_cef_client_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_client_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_client_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_context_menu_handler as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_context_menu_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_dialog_handler as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_dialog_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_display_handler as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_display_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_download_handler as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_download_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_drag_handler as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_drag_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_find_handler as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_find_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_focus_handler as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_focus_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_jsdialog_handler as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_jsdialog_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_keyboard_handler as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_keyboard_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_life_span_handler as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_life_span_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_load_handler as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_load_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_render_handler as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_render_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_request_handler as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_request_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).on_process_message_received as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(on_process_message_received)
        )
    );
}
pub type cef_client_t = _cef_client_t;
#[repr(C)]
pub struct _cef_urlrequest_t {
    pub base: cef_base_ref_counted_t,
    pub get_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_request_t,
    >,
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_urlrequest_client_t,
    >,
    pub get_request_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_urlrequest_status_t::Type,
    >,
    pub get_request_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_errorcode_t::Type,
    >,
    pub get_response: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_response_t,
    >,
    pub response_was_cached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> ::std::os::raw::c_int,
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t)>,
}
#[test]
fn bindgen_test_layout__cef_urlrequest_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_urlrequest_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_urlrequest_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_urlrequest_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_urlrequest_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlrequest_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlrequest_t>())).get_request as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_t),
            "::",
            stringify!(get_request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlrequest_t>())).get_client as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_t),
            "::",
            stringify!(get_client)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_urlrequest_t>())).get_request_status as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_t),
            "::",
            stringify!(get_request_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_urlrequest_t>())).get_request_error as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_t),
            "::",
            stringify!(get_request_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlrequest_t>())).get_response as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_t),
            "::",
            stringify!(get_response)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_urlrequest_t>())).response_was_cached as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_t),
            "::",
            stringify!(response_was_cached)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlrequest_t>())).cancel as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_t),
            "::",
            stringify!(cancel)
        )
    );
}
pub type cef_urlrequest_t = _cef_urlrequest_t;
extern "C" {
    pub fn cef_urlrequest_create(
        request: *mut _cef_request_t,
        client: *mut _cef_urlrequest_client_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_urlrequest_t;
}
#[repr(C)]
pub struct _cef_urlrequest_client_t {
    pub base: cef_base_ref_counted_t,
    pub on_request_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_client_t, request: *mut _cef_urlrequest_t),
    >,
    pub on_upload_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: int64,
            total: int64,
        ),
    >,
    pub on_download_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: int64,
            total: int64,
        ),
    >,
    pub on_download_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            data: *const ::std::os::raw::c_void,
            data_length: usize,
        ),
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_urlrequest_client_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_urlrequest_client_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_urlrequest_client_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_urlrequest_client_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_urlrequest_client_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlrequest_client_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_client_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_urlrequest_client_t>())).on_request_complete as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_client_t),
            "::",
            stringify!(on_request_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_urlrequest_client_t>())).on_upload_progress as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_client_t),
            "::",
            stringify!(on_upload_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_urlrequest_client_t>())).on_download_progress as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_client_t),
            "::",
            stringify!(on_download_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_urlrequest_client_t>())).on_download_data as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_client_t),
            "::",
            stringify!(on_download_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_urlrequest_client_t>())).get_auth_credentials as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlrequest_client_t),
            "::",
            stringify!(get_auth_credentials)
        )
    );
}
pub type cef_urlrequest_client_t = _cef_urlrequest_client_t;
#[repr(C)]
pub struct _cef_web_plugin_info_t {
    pub base: cef_base_ref_counted_t,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_web_plugin_info_t) -> cef_string_userfree_t,
    >,
    pub get_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_web_plugin_info_t) -> cef_string_userfree_t,
    >,
    pub get_version: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_web_plugin_info_t) -> cef_string_userfree_t,
    >,
    pub get_description: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_web_plugin_info_t) -> cef_string_userfree_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_web_plugin_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_web_plugin_info_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_web_plugin_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_web_plugin_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_web_plugin_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_web_plugin_info_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_info_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_web_plugin_info_t>())).get_name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_info_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_web_plugin_info_t>())).get_path as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_info_t),
            "::",
            stringify!(get_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_web_plugin_info_t>())).get_version as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_info_t),
            "::",
            stringify!(get_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_web_plugin_info_t>())).get_description as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_info_t),
            "::",
            stringify!(get_description)
        )
    );
}
pub type cef_web_plugin_info_t = _cef_web_plugin_info_t;
#[repr(C)]
pub struct _cef_web_plugin_info_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_web_plugin_info_visitor_t,
            info: *mut _cef_web_plugin_info_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_web_plugin_info_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_web_plugin_info_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_web_plugin_info_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_web_plugin_info_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_web_plugin_info_visitor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_web_plugin_info_visitor_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_info_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_web_plugin_info_visitor_t>())).visit as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_info_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
pub type cef_web_plugin_info_visitor_t = _cef_web_plugin_info_visitor_t;
#[repr(C)]
pub struct _cef_web_plugin_unstable_callback_t {
    pub base: cef_base_ref_counted_t,
    pub is_unstable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_web_plugin_unstable_callback_t,
            path: *const cef_string_t,
            unstable: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_web_plugin_unstable_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_web_plugin_unstable_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_web_plugin_unstable_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_web_plugin_unstable_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_web_plugin_unstable_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_web_plugin_unstable_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_unstable_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_web_plugin_unstable_callback_t>())).is_unstable as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_web_plugin_unstable_callback_t),
            "::",
            stringify!(is_unstable)
        )
    );
}
pub type cef_web_plugin_unstable_callback_t = _cef_web_plugin_unstable_callback_t;
#[repr(C)]
pub struct _cef_register_cdm_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_cdm_registration_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_register_cdm_callback_t,
            result: cef_cdm_registration_error_t::Type,
            error_message: *const cef_string_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_register_cdm_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_register_cdm_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_register_cdm_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_register_cdm_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_register_cdm_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_register_cdm_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_register_cdm_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_register_cdm_callback_t>())).on_cdm_registration_complete
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_register_cdm_callback_t),
            "::",
            stringify!(on_cdm_registration_complete)
        )
    );
}
pub type cef_register_cdm_callback_t = _cef_register_cdm_callback_t;
extern "C" {
    pub fn cef_refresh_web_plugins();
}
extern "C" {
    pub fn cef_unregister_internal_web_plugin(path: *const cef_string_t);
}
extern "C" {
    pub fn cef_register_web_plugin_crash(path: *const cef_string_t);
}
extern "C" {
    pub fn cef_is_web_plugin_unstable(
        path: *const cef_string_t,
        callback: *mut cef_web_plugin_unstable_callback_t,
    );
}
extern "C" {
    pub fn cef_register_widevine_cdm(
        path: *const cef_string_t,
        callback: *mut cef_register_cdm_callback_t,
    );
}
#[repr(C)]
pub struct _cef_request_context_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_request_context_initialized: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_handler_t,
            request_context: *mut _cef_request_context_t,
        ),
    >,
    pub on_before_plugin_load: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_handler_t,
            mime_type: *const cef_string_t,
            plugin_url: *const cef_string_t,
            is_main_frame: ::std::os::raw::c_int,
            top_origin_url: *const cef_string_t,
            plugin_info: *mut _cef_web_plugin_info_t,
            plugin_policy: *mut cef_plugin_policy_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_resource_request_handler_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_request_context_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_context_handler_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_request_context_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_context_handler_t>(),
