#![allow(non_snake_case,non_camel_case_types)]
/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const OS_WIN: u32 = 1;
pub const COMPILER_MSVC: u32 = 1;
pub const ARCH_CPU_X86_FAMILY: u32 = 1;
pub const ARCH_CPU_X86_64: u32 = 1;
pub const ARCH_CPU_64_BITS: u32 = 1;
pub const ARCH_CPU_LITTLE_ENDIAN: u32 = 1;
pub const CEF_STRING_TYPE_UTF16: u32 = 1;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _HAS_CXX17: u32 = 0;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 141;
pub const _MSVC_STL_UPDATE: u32 = 201809;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_COMPLETE_CHARCONV: u32 = 0;
pub const _HAS_SPECIAL_MATH: u32 = 0;
pub const _HAS_STD_BYTE: u32 = 0;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _HAS_IF_CONSTEXPR: u32 = 0;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const _HAS_LAUNDER: u32 = 0;
pub const _HAS_ALIGNED_NEW: u32 = 0;
pub const _HAS_NOEXCEPT_FUNCTION_TYPES: u32 = 0;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_chrono: u32 = 201510;
pub const __cpp_lib_experimental_erase_if: u32 = 201411;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _CRT_WARN: u32 = 0;
pub const _CRT_ERROR: u32 = 1;
pub const _CRT_ASSERT: u32 = 2;
pub const _CRT_ERRCNT: u32 = 3;
pub const _CRTDBG_MODE_FILE: u32 = 1;
pub const _CRTDBG_MODE_DEBUG: u32 = 2;
pub const _CRTDBG_MODE_WNDW: u32 = 4;
pub const _CRTDBG_REPORT_MODE: i32 = -1;
pub const _CRT_RPTHOOK_INSTALL: u32 = 0;
pub const _CRT_RPTHOOK_REMOVE: u32 = 1;
pub const _HOOK_ALLOC: u32 = 1;
pub const _HOOK_REALLOC: u32 = 2;
pub const _HOOK_FREE: u32 = 3;
pub const _CRTDBG_ALLOC_MEM_DF: u32 = 1;
pub const _CRTDBG_DELAY_FREE_MEM_DF: u32 = 2;
pub const _CRTDBG_CHECK_ALWAYS_DF: u32 = 4;
pub const _CRTDBG_RESERVED_DF: u32 = 8;
pub const _CRTDBG_CHECK_CRT_DF: u32 = 16;
pub const _CRTDBG_LEAK_CHECK_DF: u32 = 32;
pub const _CRTDBG_CHECK_EVERY_16_DF: u32 = 1048576;
pub const _CRTDBG_CHECK_EVERY_128_DF: u32 = 8388608;
pub const _CRTDBG_CHECK_EVERY_1024_DF: u32 = 67108864;
pub const _CRTDBG_CHECK_DEFAULT_DF: u32 = 0;
pub const _CRTDBG_REPORT_FLAG: i32 = -1;
pub const _FREE_BLOCK: u32 = 0;
pub const _NORMAL_BLOCK: u32 = 1;
pub const _CRT_BLOCK: u32 = 2;
pub const _IGNORE_BLOCK: u32 = 3;
pub const _CLIENT_BLOCK: u32 = 4;
pub const _MAX_BLOCKS: u32 = 5;
pub const _UNKNOWN_BLOCK: i32 = -1;
pub const _CRT_MSVCP_CURRENT: &'static [u8; 13usize] = b"msvcp140.dll\0";
pub const _HAS_ITERATOR_DEBUGGING: u32 = 0;
pub const _SECURE_SCL: u32 = 0;
pub const _ITERATOR_DEBUG_LEVEL: u32 = 0;
pub const _ITERATOR_DEBUG_ARRAY_OVERLOADS: u32 = 0;
pub const _DEBUG_AFFIX: &'static [u8; 1usize] = b"\0";
pub const _IDL_DEFAULT: u32 = 0;
pub const _LIB_STEM: &'static [u8; 8usize] = b"libcpmt\0";
pub const _IDL_AFFIX: &'static [u8; 1usize] = b"\0";
pub const _MAX_EXP_DIG: u32 = 8;
pub const _MAX_INT_DIG: u32 = 32;
pub const _MAX_SIG_DIG_V1: u32 = 36;
pub const _MAX_SIG_DIG_V2: u32 = 768;
pub const _LOCK_LOCALE: u32 = 0;
pub const _LOCK_MALLOC: u32 = 1;
pub const _LOCK_STREAM: u32 = 2;
pub const _LOCK_DEBUG: u32 = 3;
pub const _LOCK_AT_THREAD_EXIT: u32 = 4;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const FP_INFINITE: u32 = 1;
pub const FP_NAN: u32 = 2;
pub const FP_NORMAL: i32 = -1;
pub const FP_SUBNORMAL: i32 = -2;
pub const FP_ZERO: u32 = 0;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const _DEBUGGER_STEP_OVER: u32 = 15732479;
pub const _DEBUGGER_STEP_INTO: u32 = 16707565;
pub const _HEAP_MAXREQ: i32 = -32;
pub const _HEAPEMPTY: i32 = -1;
pub const _HEAPOK: i32 = -2;
pub const _HEAPBADBEGIN: i32 = -3;
pub const _HEAPBADNODE: i32 = -4;
pub const _HEAPEND: i32 = -5;
pub const _HEAPBADPTR: i32 = -6;
pub const _FREEENTRY: u32 = 0;
pub const _USEDENTRY: u32 = 1;
pub const _ALLOCA_S_THRESHOLD: u32 = 1024;
pub const _ALLOCA_S_STACK_MARKER: u32 = 52428;
pub const _ALLOCA_S_HEAP_MARKER: u32 = 56797;
pub const _ALLOCA_S_MARKER_SIZE: u32 = 16;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const _UPPER: u32 = 1;
pub const _LOWER: u32 = 2;
pub const _DIGIT: u32 = 4;
pub const _SPACE: u32 = 8;
pub const _PUNCT: u32 = 16;
pub const _CONTROL: u32 = 32;
pub const _BLANK: u32 = 64;
pub const _HEX: u32 = 128;
pub const _LEADBYTE: u32 = 32768;
pub const _ALPHA: u32 = 259;
pub const _SH_DENYRW: u32 = 16;
pub const _SH_DENYWR: u32 = 32;
pub const _SH_DENYRD: u32 = 48;
pub const _SH_DENYNO: u32 = 64;
pub const _SH_SECURE: u32 = 128;
pub const SH_DENYRW: u32 = 16;
pub const SH_DENYWR: u32 = 32;
pub const SH_DENYRD: u32 = 48;
pub const SH_DENYNO: u32 = 64;
pub const _S_IFMT: u32 = 61440;
pub const _S_IFDIR: u32 = 16384;
pub const _S_IFCHR: u32 = 8192;
pub const _S_IFIFO: u32 = 4096;
pub const _S_IFREG: u32 = 32768;
pub const _S_IREAD: u32 = 256;
pub const _S_IWRITE: u32 = 128;
pub const _S_IEXEC: u32 = 64;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFREG: u32 = 32768;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const _WCHAR_T_SIZE: u32 = 2;
pub const _SHORT_SIZE: u32 = 2;
pub const _INT_SIZE: u32 = 4;
pub const _LONG_SIZE: u32 = 4;
pub const _LONGLONG_SIZE: u32 = 8;
pub const _ADDR_SIZE: u32 = 8;
pub const _USE_INTERLOCKED_REFCOUNTING: u32 = 1;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MIN: u32 = 0;
pub const LC_MAX: u32 = 5;
pub const _ENABLE_PER_THREAD_LOCALE: u32 = 1;
pub const _DISABLE_PER_THREAD_LOCALE: u32 = 2;
pub const _ENABLE_PER_THREAD_LOCALE_GLOBAL: u32 = 16;
pub const _DISABLE_PER_THREAD_LOCALE_GLOBAL: u32 = 32;
pub const _ENABLE_PER_THREAD_LOCALE_NEW: u32 = 256;
pub const _DISABLE_PER_THREAD_LOCALE_NEW: u32 = 512;
pub const _XB: u32 = 0;
pub const _XA: u32 = 256;
pub const _XS: u32 = 0;
pub const _BB: u32 = 32;
pub const _CN: u32 = 8;
pub const _DI: u32 = 4;
pub const _LO: u32 = 2;
pub const _PU: u32 = 16;
pub const _SP: u32 = 64;
pub const _UP: u32 = 1;
pub const _XD: u32 = 128;
pub const _X_ALL: u32 = 0;
pub const _X_COLLATE: u32 = 1;
pub const _X_CTYPE: u32 = 2;
pub const _X_MONETARY: u32 = 3;
pub const _X_NUMERIC: u32 = 4;
pub const _X_TIME: u32 = 5;
pub const _X_MAX: u32 = 5;
pub const _X_MESSAGES: u32 = 6;
pub const _NCAT: u32 = 7;
pub const _OPENPROT: u32 = 64;
pub const _IOSskipws: u32 = 1;
pub const _IOSunitbuf: u32 = 2;
pub const _IOSuppercase: u32 = 4;
pub const _IOSshowbase: u32 = 8;
pub const _IOSshowpoint: u32 = 16;
pub const _IOSshowpos: u32 = 32;
pub const _IOSleft: u32 = 64;
pub const _IOSright: u32 = 128;
pub const _IOSinternal: u32 = 256;
pub const _IOSdec: u32 = 512;
pub const _IOSoct: u32 = 1024;
pub const _IOShex: u32 = 2048;
pub const _IOSscientific: u32 = 4096;
pub const _IOSfixed: u32 = 8192;
pub const _IOShexfloat: u32 = 12288;
pub const _IOSboolalpha: u32 = 16384;
pub const _IOS_Stdio: u32 = 32768;
pub const _IOS_Nocreate: u32 = 64;
pub const _IOS_Noreplace: u32 = 128;
pub const _IOSbinary: u32 = 32;
pub const _ENABLE_V2_BEHAVIOR: u32 = 1000000000;
pub const _FLOATING_BUFFER_SIZE: u32 = 792;
pub const TIME_UTC: u32 = 1;
pub const WINAPI_FAMILY_PC_APP: u32 = 2;
pub const WINAPI_FAMILY_PHONE_APP: u32 = 3;
pub const WINAPI_FAMILY_SYSTEM: u32 = 4;
pub const WINAPI_FAMILY_SERVER: u32 = 5;
pub const WINAPI_FAMILY_DESKTOP_APP: u32 = 100;
pub const WINAPI_FAMILY_APP: u32 = 2;
pub const WINAPI_FAMILY: u32 = 100;
pub const _WIN32_WINNT_NT4: u32 = 1024;
pub const _WIN32_WINNT_WIN2K: u32 = 1280;
pub const _WIN32_WINNT_WINXP: u32 = 1281;
pub const _WIN32_WINNT_WS03: u32 = 1282;
pub const _WIN32_WINNT_WIN6: u32 = 1536;
pub const _WIN32_WINNT_VISTA: u32 = 1536;
pub const _WIN32_WINNT_WS08: u32 = 1536;
pub const _WIN32_WINNT_LONGHORN: u32 = 1536;
pub const _WIN32_WINNT_WIN7: u32 = 1537;
pub const _WIN32_WINNT_WIN8: u32 = 1538;
pub const _WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _WIN32_WINNT_WINTHRESHOLD: u32 = 2560;
pub const _WIN32_WINNT_WIN10: u32 = 2560;
pub const _WIN32_IE_IE20: u32 = 512;
pub const _WIN32_IE_IE30: u32 = 768;
pub const _WIN32_IE_IE302: u32 = 770;
pub const _WIN32_IE_IE40: u32 = 1024;
pub const _WIN32_IE_IE401: u32 = 1025;
pub const _WIN32_IE_IE50: u32 = 1280;
pub const _WIN32_IE_IE501: u32 = 1281;
pub const _WIN32_IE_IE55: u32 = 1360;
pub const _WIN32_IE_IE60: u32 = 1536;
pub const _WIN32_IE_IE60SP1: u32 = 1537;
pub const _WIN32_IE_IE60SP2: u32 = 1539;
pub const _WIN32_IE_IE70: u32 = 1792;
pub const _WIN32_IE_IE80: u32 = 2048;
pub const _WIN32_IE_IE90: u32 = 2304;
pub const _WIN32_IE_IE100: u32 = 2560;
pub const _WIN32_IE_IE110: u32 = 2560;
pub const _WIN32_IE_NT4: u32 = 512;
pub const _WIN32_IE_NT4SP1: u32 = 512;
pub const _WIN32_IE_NT4SP2: u32 = 512;
pub const _WIN32_IE_NT4SP3: u32 = 770;
pub const _WIN32_IE_NT4SP4: u32 = 1025;
pub const _WIN32_IE_NT4SP5: u32 = 1025;
pub const _WIN32_IE_NT4SP6: u32 = 1280;
pub const _WIN32_IE_WIN98: u32 = 1025;
pub const _WIN32_IE_WIN98SE: u32 = 1280;
pub const _WIN32_IE_WINME: u32 = 1360;
pub const _WIN32_IE_WIN2K: u32 = 1281;
pub const _WIN32_IE_WIN2KSP1: u32 = 1281;
pub const _WIN32_IE_WIN2KSP2: u32 = 1281;
pub const _WIN32_IE_WIN2KSP3: u32 = 1281;
pub const _WIN32_IE_WIN2KSP4: u32 = 1281;
pub const _WIN32_IE_XP: u32 = 1536;
pub const _WIN32_IE_XPSP1: u32 = 1537;
pub const _WIN32_IE_XPSP2: u32 = 1539;
pub const _WIN32_IE_WS03: u32 = 1538;
pub const _WIN32_IE_WS03SP1: u32 = 1539;
pub const _WIN32_IE_WIN6: u32 = 1792;
pub const _WIN32_IE_LONGHORN: u32 = 1792;
pub const _WIN32_IE_WIN7: u32 = 2048;
pub const _WIN32_IE_WIN8: u32 = 2560;
pub const _WIN32_IE_WINBLUE: u32 = 2560;
pub const _WIN32_IE_WINTHRESHOLD: u32 = 2560;
pub const _WIN32_IE_WIN10: u32 = 2560;
pub const NTDDI_WIN2K: u32 = 83886080;
pub const NTDDI_WIN2KSP1: u32 = 83886336;
pub const NTDDI_WIN2KSP2: u32 = 83886592;
pub const NTDDI_WIN2KSP3: u32 = 83886848;
pub const NTDDI_WIN2KSP4: u32 = 83887104;
pub const NTDDI_WINXP: u32 = 83951616;
pub const NTDDI_WINXPSP1: u32 = 83951872;
pub const NTDDI_WINXPSP2: u32 = 83952128;
pub const NTDDI_WINXPSP3: u32 = 83952384;
pub const NTDDI_WINXPSP4: u32 = 83952640;
pub const NTDDI_WS03: u32 = 84017152;
pub const NTDDI_WS03SP1: u32 = 84017408;
pub const NTDDI_WS03SP2: u32 = 84017664;
pub const NTDDI_WS03SP3: u32 = 84017920;
pub const NTDDI_WS03SP4: u32 = 84018176;
pub const NTDDI_WIN6: u32 = 100663296;
pub const NTDDI_WIN6SP1: u32 = 100663552;
pub const NTDDI_WIN6SP2: u32 = 100663808;
pub const NTDDI_WIN6SP3: u32 = 100664064;
pub const NTDDI_WIN6SP4: u32 = 100664320;
pub const NTDDI_VISTA: u32 = 100663296;
pub const NTDDI_VISTASP1: u32 = 100663552;
pub const NTDDI_VISTASP2: u32 = 100663808;
pub const NTDDI_VISTASP3: u32 = 100664064;
pub const NTDDI_VISTASP4: u32 = 100664320;
pub const NTDDI_LONGHORN: u32 = 100663296;
pub const NTDDI_WS08: u32 = 100663552;
pub const NTDDI_WS08SP2: u32 = 100663808;
pub const NTDDI_WS08SP3: u32 = 100664064;
pub const NTDDI_WS08SP4: u32 = 100664320;
pub const NTDDI_WIN7: u32 = 100728832;
pub const NTDDI_WIN8: u32 = 100794368;
pub const NTDDI_WINBLUE: u32 = 100859904;
pub const NTDDI_WINTHRESHOLD: u32 = 167772160;
pub const NTDDI_WIN10: u32 = 167772160;
pub const NTDDI_WIN10_TH2: u32 = 167772161;
pub const NTDDI_WIN10_RS1: u32 = 167772162;
pub const NTDDI_WIN10_RS2: u32 = 167772163;
pub const NTDDI_WIN10_RS3: u32 = 167772164;
pub const NTDDI_WIN10_RS4: u32 = 167772165;
pub const NTDDI_WIN10_RS5: u32 = 167772166;
pub const WDK_NTDDI_VERSION: u32 = 167772166;
pub const OSVERSION_MASK: u32 = 4294901760;
pub const SPVERSION_MASK: u32 = 65280;
pub const SUBVERSION_MASK: u32 = 255;
pub const _WIN32_WINNT: u32 = 2560;
pub const NTDDI_VERSION: u32 = 167772166;
pub const WINVER: u32 = 2560;
pub const _WIN32_IE: u32 = 2560;
pub const EXCEPTION_EXECUTE_HANDLER: u32 = 1;
pub const EXCEPTION_CONTINUE_SEARCH: u32 = 0;
pub const EXCEPTION_CONTINUE_EXECUTION: i32 = -1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __SAL_H_FULL_VER: u32 = 140050727;
pub const __SPECSTRINGS_STRICT_LEVEL: u32 = 1;
pub const __drv_typeConst: u32 = 0;
pub const __drv_typeCond: u32 = 1;
pub const __drv_typeBitset: u32 = 2;
pub const __drv_typeExpr: u32 = 3;
pub const STRICT: u32 = 1;
pub const MAX_PATH: u32 = 260;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const ANYSIZE_ARRAY: u32 = 1;
pub const DISPATCH_LEVEL: u32 = 2;
pub const APC_LEVEL: u32 = 1;
pub const PASSIVE_LEVEL: u32 = 0;
pub const HIGH_LEVEL: u32 = 15;
pub const MEMORY_ALLOCATION_ALIGNMENT: u32 = 16;
pub const SYSTEM_CACHE_ALIGNMENT_SIZE: u32 = 64;
pub const PRAGMA_DEPRECATED_DDK: u32 = 0;
pub const UCSCHAR_INVALID_CHARACTER: u32 = 4294967295;
pub const MIN_UCSCHAR: u32 = 0;
pub const MAX_UCSCHAR: u32 = 1114111;
pub const ALL_PROCESSOR_GROUPS: u32 = 65535;
pub const MAXIMUM_PROC_PER_GROUP: u32 = 64;
pub const MAXIMUM_PROCESSORS: u32 = 64;
pub const APPLICATION_ERROR_MASK: u32 = 536870912;
pub const ERROR_SEVERITY_SUCCESS: u32 = 0;
pub const ERROR_SEVERITY_INFORMATIONAL: u32 = 1073741824;
pub const ERROR_SEVERITY_WARNING: u32 = 2147483648;
pub const ERROR_SEVERITY_ERROR: u32 = 3221225472;
pub const MAXLONGLONG: u64 = 9223372036854775807;
pub const UNICODE_STRING_MAX_CHARS: u32 = 32767;
pub const MINCHAR: u32 = 128;
pub const MAXCHAR: u32 = 127;
pub const MINSHORT: u32 = 32768;
pub const MAXSHORT: u32 = 32767;
pub const MINLONG: u32 = 2147483648;
pub const MAXLONG: u32 = 2147483647;
pub const MAXBYTE: u32 = 255;
pub const MAXWORD: u32 = 65535;
pub const MAXDWORD: u32 = 4294967295;
pub const VER_SERVER_NT: u32 = 2147483648;
pub const VER_WORKSTATION_NT: u32 = 1073741824;
pub const VER_SUITE_SMALLBUSINESS: u32 = 1;
pub const VER_SUITE_ENTERPRISE: u32 = 2;
pub const VER_SUITE_BACKOFFICE: u32 = 4;
pub const VER_SUITE_COMMUNICATIONS: u32 = 8;
pub const VER_SUITE_TERMINAL: u32 = 16;
pub const VER_SUITE_SMALLBUSINESS_RESTRICTED: u32 = 32;
pub const VER_SUITE_EMBEDDEDNT: u32 = 64;
pub const VER_SUITE_DATACENTER: u32 = 128;
pub const VER_SUITE_SINGLEUSERTS: u32 = 256;
pub const VER_SUITE_PERSONAL: u32 = 512;
pub const VER_SUITE_BLADE: u32 = 1024;
pub const VER_SUITE_EMBEDDED_RESTRICTED: u32 = 2048;
pub const VER_SUITE_SECURITY_APPLIANCE: u32 = 4096;
pub const VER_SUITE_STORAGE_SERVER: u32 = 8192;
pub const VER_SUITE_COMPUTE_SERVER: u32 = 16384;
pub const VER_SUITE_WH_SERVER: u32 = 32768;
pub const VER_SUITE_MULTIUSERTS: u32 = 131072;
pub const PRODUCT_UNDEFINED: u32 = 0;
pub const PRODUCT_ULTIMATE: u32 = 1;
pub const PRODUCT_HOME_BASIC: u32 = 2;
pub const PRODUCT_HOME_PREMIUM: u32 = 3;
pub const PRODUCT_ENTERPRISE: u32 = 4;
pub const PRODUCT_HOME_BASIC_N: u32 = 5;
pub const PRODUCT_BUSINESS: u32 = 6;
pub const PRODUCT_STANDARD_SERVER: u32 = 7;
pub const PRODUCT_DATACENTER_SERVER: u32 = 8;
pub const PRODUCT_SMALLBUSINESS_SERVER: u32 = 9;
pub const PRODUCT_ENTERPRISE_SERVER: u32 = 10;
pub const PRODUCT_STARTER: u32 = 11;
pub const PRODUCT_DATACENTER_SERVER_CORE: u32 = 12;
pub const PRODUCT_STANDARD_SERVER_CORE: u32 = 13;
pub const PRODUCT_ENTERPRISE_SERVER_CORE: u32 = 14;
pub const PRODUCT_ENTERPRISE_SERVER_IA64: u32 = 15;
pub const PRODUCT_BUSINESS_N: u32 = 16;
pub const PRODUCT_WEB_SERVER: u32 = 17;
pub const PRODUCT_CLUSTER_SERVER: u32 = 18;
pub const PRODUCT_HOME_SERVER: u32 = 19;
pub const PRODUCT_STORAGE_EXPRESS_SERVER: u32 = 20;
pub const PRODUCT_STORAGE_STANDARD_SERVER: u32 = 21;
pub const PRODUCT_STORAGE_WORKGROUP_SERVER: u32 = 22;
pub const PRODUCT_STORAGE_ENTERPRISE_SERVER: u32 = 23;
pub const PRODUCT_SERVER_FOR_SMALLBUSINESS: u32 = 24;
pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM: u32 = 25;
pub const PRODUCT_HOME_PREMIUM_N: u32 = 26;
pub const PRODUCT_ENTERPRISE_N: u32 = 27;
pub const PRODUCT_ULTIMATE_N: u32 = 28;
pub const PRODUCT_WEB_SERVER_CORE: u32 = 29;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT: u32 = 30;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY: u32 = 31;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING: u32 = 32;
pub const PRODUCT_SERVER_FOUNDATION: u32 = 33;
pub const PRODUCT_HOME_PREMIUM_SERVER: u32 = 34;
pub const PRODUCT_SERVER_FOR_SMALLBUSINESS_V: u32 = 35;
pub const PRODUCT_STANDARD_SERVER_V: u32 = 36;
pub const PRODUCT_DATACENTER_SERVER_V: u32 = 37;
pub const PRODUCT_ENTERPRISE_SERVER_V: u32 = 38;
pub const PRODUCT_DATACENTER_SERVER_CORE_V: u32 = 39;
pub const PRODUCT_STANDARD_SERVER_CORE_V: u32 = 40;
pub const PRODUCT_ENTERPRISE_SERVER_CORE_V: u32 = 41;
pub const PRODUCT_HYPERV: u32 = 42;
pub const PRODUCT_STORAGE_EXPRESS_SERVER_CORE: u32 = 43;
pub const PRODUCT_STORAGE_STANDARD_SERVER_CORE: u32 = 44;
pub const PRODUCT_STORAGE_WORKGROUP_SERVER_CORE: u32 = 45;
pub const PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE: u32 = 46;
pub const PRODUCT_STARTER_N: u32 = 47;
pub const PRODUCT_PROFESSIONAL: u32 = 48;
pub const PRODUCT_PROFESSIONAL_N: u32 = 49;
pub const PRODUCT_SB_SOLUTION_SERVER: u32 = 50;
pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS: u32 = 51;
pub const PRODUCT_STANDARD_SERVER_SOLUTIONS: u32 = 52;
pub const PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE: u32 = 53;
pub const PRODUCT_SB_SOLUTION_SERVER_EM: u32 = 54;
pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM: u32 = 55;
pub const PRODUCT_SOLUTION_EMBEDDEDSERVER: u32 = 56;
pub const PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE: u32 = 57;
pub const PRODUCT_PROFESSIONAL_EMBEDDED: u32 = 58;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT: u32 = 59;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL: u32 = 60;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC: u32 = 61;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC: u32 = 62;
pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE: u32 = 63;
pub const PRODUCT_CLUSTER_SERVER_V: u32 = 64;
pub const PRODUCT_EMBEDDED: u32 = 65;
pub const PRODUCT_STARTER_E: u32 = 66;
pub const PRODUCT_HOME_BASIC_E: u32 = 67;
pub const PRODUCT_HOME_PREMIUM_E: u32 = 68;
pub const PRODUCT_PROFESSIONAL_E: u32 = 69;
pub const PRODUCT_ENTERPRISE_E: u32 = 70;
pub const PRODUCT_ULTIMATE_E: u32 = 71;
pub const PRODUCT_ENTERPRISE_EVALUATION: u32 = 72;
pub const PRODUCT_MULTIPOINT_STANDARD_SERVER: u32 = 76;
pub const PRODUCT_MULTIPOINT_PREMIUM_SERVER: u32 = 77;
pub const PRODUCT_STANDARD_EVALUATION_SERVER: u32 = 79;
pub const PRODUCT_DATACENTER_EVALUATION_SERVER: u32 = 80;
pub const PRODUCT_ENTERPRISE_N_EVALUATION: u32 = 84;
pub const PRODUCT_EMBEDDED_AUTOMOTIVE: u32 = 85;
pub const PRODUCT_EMBEDDED_INDUSTRY_A: u32 = 86;
pub const PRODUCT_THINPC: u32 = 87;
pub const PRODUCT_EMBEDDED_A: u32 = 88;
pub const PRODUCT_EMBEDDED_INDUSTRY: u32 = 89;
pub const PRODUCT_EMBEDDED_E: u32 = 90;
pub const PRODUCT_EMBEDDED_INDUSTRY_E: u32 = 91;
pub const PRODUCT_EMBEDDED_INDUSTRY_A_E: u32 = 92;
pub const PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER: u32 = 95;
pub const PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER: u32 = 96;
pub const PRODUCT_CORE_ARM: u32 = 97;
pub const PRODUCT_CORE_N: u32 = 98;
pub const PRODUCT_CORE_COUNTRYSPECIFIC: u32 = 99;
pub const PRODUCT_CORE_SINGLELANGUAGE: u32 = 100;
pub const PRODUCT_CORE: u32 = 101;
pub const PRODUCT_PROFESSIONAL_WMC: u32 = 103;
pub const PRODUCT_EMBEDDED_INDUSTRY_EVAL: u32 = 105;
pub const PRODUCT_EMBEDDED_INDUSTRY_E_EVAL: u32 = 106;
pub const PRODUCT_EMBEDDED_EVAL: u32 = 107;
pub const PRODUCT_EMBEDDED_E_EVAL: u32 = 108;
pub const PRODUCT_NANO_SERVER: u32 = 109;
pub const PRODUCT_CLOUD_STORAGE_SERVER: u32 = 110;
pub const PRODUCT_CORE_CONNECTED: u32 = 111;
pub const PRODUCT_PROFESSIONAL_STUDENT: u32 = 112;
pub const PRODUCT_CORE_CONNECTED_N: u32 = 113;
pub const PRODUCT_PROFESSIONAL_STUDENT_N: u32 = 114;
pub const PRODUCT_CORE_CONNECTED_SINGLELANGUAGE: u32 = 115;
pub const PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC: u32 = 116;
pub const PRODUCT_CONNECTED_CAR: u32 = 117;
pub const PRODUCT_INDUSTRY_HANDHELD: u32 = 118;
pub const PRODUCT_PPI_PRO: u32 = 119;
pub const PRODUCT_ARM64_SERVER: u32 = 120;
pub const PRODUCT_EDUCATION: u32 = 121;
pub const PRODUCT_EDUCATION_N: u32 = 122;
pub const PRODUCT_IOTUAP: u32 = 123;
pub const PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER: u32 = 124;
pub const PRODUCT_ENTERPRISE_S: u32 = 125;
pub const PRODUCT_ENTERPRISE_S_N: u32 = 126;
pub const PRODUCT_PROFESSIONAL_S: u32 = 127;
pub const PRODUCT_PROFESSIONAL_S_N: u32 = 128;
pub const PRODUCT_ENTERPRISE_S_EVALUATION: u32 = 129;
pub const PRODUCT_ENTERPRISE_S_N_EVALUATION: u32 = 130;
pub const PRODUCT_HOLOGRAPHIC: u32 = 135;
pub const PRODUCT_PRO_SINGLE_LANGUAGE: u32 = 138;
pub const PRODUCT_PRO_CHINA: u32 = 139;
pub const PRODUCT_ENTERPRISE_SUBSCRIPTION: u32 = 140;
pub const PRODUCT_ENTERPRISE_SUBSCRIPTION_N: u32 = 141;
pub const PRODUCT_DATACENTER_NANO_SERVER: u32 = 143;
pub const PRODUCT_STANDARD_NANO_SERVER: u32 = 144;
pub const PRODUCT_DATACENTER_A_SERVER_CORE: u32 = 145;
pub const PRODUCT_STANDARD_A_SERVER_CORE: u32 = 146;
pub const PRODUCT_DATACENTER_WS_SERVER_CORE: u32 = 147;
pub const PRODUCT_STANDARD_WS_SERVER_CORE: u32 = 148;
pub const PRODUCT_UTILITY_VM: u32 = 149;
pub const PRODUCT_DATACENTER_EVALUATION_SERVER_CORE: u32 = 159;
pub const PRODUCT_STANDARD_EVALUATION_SERVER_CORE: u32 = 160;
pub const PRODUCT_PRO_WORKSTATION: u32 = 161;
pub const PRODUCT_PRO_WORKSTATION_N: u32 = 162;
pub const PRODUCT_PRO_FOR_EDUCATION: u32 = 164;
pub const PRODUCT_PRO_FOR_EDUCATION_N: u32 = 165;
pub const PRODUCT_AZURE_SERVER_CORE: u32 = 168;
pub const PRODUCT_AZURE_NANO_SERVER: u32 = 169;
pub const PRODUCT_ENTERPRISEG: u32 = 171;
pub const PRODUCT_ENTERPRISEGN: u32 = 172;
pub const PRODUCT_SERVERRDSH: u32 = 175;
pub const PRODUCT_CLOUD: u32 = 178;
pub const PRODUCT_CLOUDN: u32 = 179;
pub const PRODUCT_HUBOS: u32 = 180;
pub const PRODUCT_ONECOREUPDATEOS: u32 = 182;
pub const PRODUCT_CLOUDE: u32 = 183;
pub const PRODUCT_ANDROMEDA: u32 = 184;
pub const PRODUCT_IOTOS: u32 = 185;
pub const PRODUCT_CLOUDEN: u32 = 186;
pub const PRODUCT_UNLICENSED: u32 = 2882382797;
pub const LANG_NEUTRAL: u32 = 0;
pub const LANG_INVARIANT: u32 = 127;
pub const LANG_AFRIKAANS: u32 = 54;
pub const LANG_ALBANIAN: u32 = 28;
pub const LANG_ALSATIAN: u32 = 132;
pub const LANG_AMHARIC: u32 = 94;
pub const LANG_ARABIC: u32 = 1;
pub const LANG_ARMENIAN: u32 = 43;
pub const LANG_ASSAMESE: u32 = 77;
pub const LANG_AZERI: u32 = 44;
pub const LANG_AZERBAIJANI: u32 = 44;
pub const LANG_BANGLA: u32 = 69;
pub const LANG_BASHKIR: u32 = 109;
pub const LANG_BASQUE: u32 = 45;
pub const LANG_BELARUSIAN: u32 = 35;
pub const LANG_BENGALI: u32 = 69;
pub const LANG_BRETON: u32 = 126;
pub const LANG_BOSNIAN: u32 = 26;
pub const LANG_BOSNIAN_NEUTRAL: u32 = 30746;
pub const LANG_BULGARIAN: u32 = 2;
pub const LANG_CATALAN: u32 = 3;
pub const LANG_CENTRAL_KURDISH: u32 = 146;
pub const LANG_CHEROKEE: u32 = 92;
pub const LANG_CHINESE: u32 = 4;
pub const LANG_CHINESE_SIMPLIFIED: u32 = 4;
pub const LANG_CHINESE_TRADITIONAL: u32 = 31748;
pub const LANG_CORSICAN: u32 = 131;
pub const LANG_CROATIAN: u32 = 26;
pub const LANG_CZECH: u32 = 5;
pub const LANG_DANISH: u32 = 6;
pub const LANG_DARI: u32 = 140;
pub const LANG_DIVEHI: u32 = 101;
pub const LANG_DUTCH: u32 = 19;
pub const LANG_ENGLISH: u32 = 9;
pub const LANG_ESTONIAN: u32 = 37;
pub const LANG_FAEROESE: u32 = 56;
pub const LANG_FARSI: u32 = 41;
pub const LANG_FILIPINO: u32 = 100;
pub const LANG_FINNISH: u32 = 11;
pub const LANG_FRENCH: u32 = 12;
pub const LANG_FRISIAN: u32 = 98;
pub const LANG_FULAH: u32 = 103;
pub const LANG_GALICIAN: u32 = 86;
pub const LANG_GEORGIAN: u32 = 55;
pub const LANG_GERMAN: u32 = 7;
pub const LANG_GREEK: u32 = 8;
pub const LANG_GREENLANDIC: u32 = 111;
pub const LANG_GUJARATI: u32 = 71;
pub const LANG_HAUSA: u32 = 104;
pub const LANG_HAWAIIAN: u32 = 117;
pub const LANG_HEBREW: u32 = 13;
pub const LANG_HINDI: u32 = 57;
pub const LANG_HUNGARIAN: u32 = 14;
pub const LANG_ICELANDIC: u32 = 15;
pub const LANG_IGBO: u32 = 112;
pub const LANG_INDONESIAN: u32 = 33;
pub const LANG_INUKTITUT: u32 = 93;
pub const LANG_IRISH: u32 = 60;
pub const LANG_ITALIAN: u32 = 16;
pub const LANG_JAPANESE: u32 = 17;
pub const LANG_KANNADA: u32 = 75;
pub const LANG_KASHMIRI: u32 = 96;
pub const LANG_KAZAK: u32 = 63;
pub const LANG_KHMER: u32 = 83;
pub const LANG_KICHE: u32 = 134;
pub const LANG_KINYARWANDA: u32 = 135;
pub const LANG_KONKANI: u32 = 87;
pub const LANG_KOREAN: u32 = 18;
pub const LANG_KYRGYZ: u32 = 64;
pub const LANG_LAO: u32 = 84;
pub const LANG_LATVIAN: u32 = 38;
pub const LANG_LITHUANIAN: u32 = 39;
pub const LANG_LOWER_SORBIAN: u32 = 46;
pub const LANG_LUXEMBOURGISH: u32 = 110;
pub const LANG_MACEDONIAN: u32 = 47;
pub const LANG_MALAY: u32 = 62;
pub const LANG_MALAYALAM: u32 = 76;
pub const LANG_MALTESE: u32 = 58;
pub const LANG_MANIPURI: u32 = 88;
pub const LANG_MAORI: u32 = 129;
pub const LANG_MAPUDUNGUN: u32 = 122;
pub const LANG_MARATHI: u32 = 78;
pub const LANG_MOHAWK: u32 = 124;
pub const LANG_MONGOLIAN: u32 = 80;
pub const LANG_NEPALI: u32 = 97;
pub const LANG_NORWEGIAN: u32 = 20;
pub const LANG_OCCITAN: u32 = 130;
pub const LANG_ODIA: u32 = 72;
pub const LANG_ORIYA: u32 = 72;
pub const LANG_PASHTO: u32 = 99;
pub const LANG_PERSIAN: u32 = 41;
pub const LANG_POLISH: u32 = 21;
pub const LANG_PORTUGUESE: u32 = 22;
pub const LANG_PULAR: u32 = 103;
pub const LANG_PUNJABI: u32 = 70;
pub const LANG_QUECHUA: u32 = 107;
pub const LANG_ROMANIAN: u32 = 24;
pub const LANG_ROMANSH: u32 = 23;
pub const LANG_RUSSIAN: u32 = 25;
pub const LANG_SAKHA: u32 = 133;
pub const LANG_SAMI: u32 = 59;
pub const LANG_SANSKRIT: u32 = 79;
pub const LANG_SCOTTISH_GAELIC: u32 = 145;
pub const LANG_SERBIAN: u32 = 26;
pub const LANG_SERBIAN_NEUTRAL: u32 = 31770;
pub const LANG_SINDHI: u32 = 89;
pub const LANG_SINHALESE: u32 = 91;
pub const LANG_SLOVAK: u32 = 27;
pub const LANG_SLOVENIAN: u32 = 36;
pub const LANG_SOTHO: u32 = 108;
pub const LANG_SPANISH: u32 = 10;
pub const LANG_SWAHILI: u32 = 65;
pub const LANG_SWEDISH: u32 = 29;
pub const LANG_SYRIAC: u32 = 90;
pub const LANG_TAJIK: u32 = 40;
pub const LANG_TAMAZIGHT: u32 = 95;
pub const LANG_TAMIL: u32 = 73;
pub const LANG_TATAR: u32 = 68;
pub const LANG_TELUGU: u32 = 74;
pub const LANG_THAI: u32 = 30;
pub const LANG_TIBETAN: u32 = 81;
pub const LANG_TIGRIGNA: u32 = 115;
pub const LANG_TIGRINYA: u32 = 115;
pub const LANG_TSWANA: u32 = 50;
pub const LANG_TURKISH: u32 = 31;
pub const LANG_TURKMEN: u32 = 66;
pub const LANG_UIGHUR: u32 = 128;
pub const LANG_UKRAINIAN: u32 = 34;
pub const LANG_UPPER_SORBIAN: u32 = 46;
pub const LANG_URDU: u32 = 32;
pub const LANG_UZBEK: u32 = 67;
pub const LANG_VALENCIAN: u32 = 3;
pub const LANG_VIETNAMESE: u32 = 42;
pub const LANG_WELSH: u32 = 82;
pub const LANG_WOLOF: u32 = 136;
pub const LANG_XHOSA: u32 = 52;
pub const LANG_YAKUT: u32 = 133;
pub const LANG_YI: u32 = 120;
pub const LANG_YORUBA: u32 = 106;
pub const LANG_ZULU: u32 = 53;
pub const SUBLANG_NEUTRAL: u32 = 0;
pub const SUBLANG_DEFAULT: u32 = 1;
pub const SUBLANG_SYS_DEFAULT: u32 = 2;
pub const SUBLANG_CUSTOM_DEFAULT: u32 = 3;
pub const SUBLANG_CUSTOM_UNSPECIFIED: u32 = 4;
pub const SUBLANG_UI_CUSTOM_DEFAULT: u32 = 5;
pub const SUBLANG_AFRIKAANS_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_ALBANIAN_ALBANIA: u32 = 1;
pub const SUBLANG_ALSATIAN_FRANCE: u32 = 1;
pub const SUBLANG_AMHARIC_ETHIOPIA: u32 = 1;
pub const SUBLANG_ARABIC_SAUDI_ARABIA: u32 = 1;
pub const SUBLANG_ARABIC_IRAQ: u32 = 2;
pub const SUBLANG_ARABIC_EGYPT: u32 = 3;
pub const SUBLANG_ARABIC_LIBYA: u32 = 4;
pub const SUBLANG_ARABIC_ALGERIA: u32 = 5;
pub const SUBLANG_ARABIC_MOROCCO: u32 = 6;
pub const SUBLANG_ARABIC_TUNISIA: u32 = 7;
pub const SUBLANG_ARABIC_OMAN: u32 = 8;
pub const SUBLANG_ARABIC_YEMEN: u32 = 9;
pub const SUBLANG_ARABIC_SYRIA: u32 = 10;
pub const SUBLANG_ARABIC_JORDAN: u32 = 11;
pub const SUBLANG_ARABIC_LEBANON: u32 = 12;
pub const SUBLANG_ARABIC_KUWAIT: u32 = 13;
pub const SUBLANG_ARABIC_UAE: u32 = 14;
pub const SUBLANG_ARABIC_BAHRAIN: u32 = 15;
pub const SUBLANG_ARABIC_QATAR: u32 = 16;
pub const SUBLANG_ARMENIAN_ARMENIA: u32 = 1;
pub const SUBLANG_ASSAMESE_INDIA: u32 = 1;
pub const SUBLANG_AZERI_LATIN: u32 = 1;
pub const SUBLANG_AZERI_CYRILLIC: u32 = 2;
pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN: u32 = 1;
pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC: u32 = 2;
pub const SUBLANG_BANGLA_INDIA: u32 = 1;
pub const SUBLANG_BANGLA_BANGLADESH: u32 = 2;
pub const SUBLANG_BASHKIR_RUSSIA: u32 = 1;
pub const SUBLANG_BASQUE_BASQUE: u32 = 1;
pub const SUBLANG_BELARUSIAN_BELARUS: u32 = 1;
pub const SUBLANG_BENGALI_INDIA: u32 = 1;
pub const SUBLANG_BENGALI_BANGLADESH: u32 = 2;
pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 5;
pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC: u32 = 8;
pub const SUBLANG_BRETON_FRANCE: u32 = 1;
pub const SUBLANG_BULGARIAN_BULGARIA: u32 = 1;
pub const SUBLANG_CATALAN_CATALAN: u32 = 1;
pub const SUBLANG_CENTRAL_KURDISH_IRAQ: u32 = 1;
pub const SUBLANG_CHEROKEE_CHEROKEE: u32 = 1;
pub const SUBLANG_CHINESE_TRADITIONAL: u32 = 1;
pub const SUBLANG_CHINESE_SIMPLIFIED: u32 = 2;
pub const SUBLANG_CHINESE_HONGKONG: u32 = 3;
pub const SUBLANG_CHINESE_SINGAPORE: u32 = 4;
pub const SUBLANG_CHINESE_MACAU: u32 = 5;
pub const SUBLANG_CORSICAN_FRANCE: u32 = 1;
pub const SUBLANG_CZECH_CZECH_REPUBLIC: u32 = 1;
pub const SUBLANG_CROATIAN_CROATIA: u32 = 1;
pub const SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 4;
pub const SUBLANG_DANISH_DENMARK: u32 = 1;
pub const SUBLANG_DARI_AFGHANISTAN: u32 = 1;
pub const SUBLANG_DIVEHI_MALDIVES: u32 = 1;
pub const SUBLANG_DUTCH: u32 = 1;
pub const SUBLANG_DUTCH_BELGIAN: u32 = 2;
pub const SUBLANG_ENGLISH_US: u32 = 1;
pub const SUBLANG_ENGLISH_UK: u32 = 2;
pub const SUBLANG_ENGLISH_AUS: u32 = 3;
pub const SUBLANG_ENGLISH_CAN: u32 = 4;
pub const SUBLANG_ENGLISH_NZ: u32 = 5;
pub const SUBLANG_ENGLISH_EIRE: u32 = 6;
pub const SUBLANG_ENGLISH_SOUTH_AFRICA: u32 = 7;
pub const SUBLANG_ENGLISH_JAMAICA: u32 = 8;
pub const SUBLANG_ENGLISH_CARIBBEAN: u32 = 9;
pub const SUBLANG_ENGLISH_BELIZE: u32 = 10;
pub const SUBLANG_ENGLISH_TRINIDAD: u32 = 11;
pub const SUBLANG_ENGLISH_ZIMBABWE: u32 = 12;
pub const SUBLANG_ENGLISH_PHILIPPINES: u32 = 13;
pub const SUBLANG_ENGLISH_INDIA: u32 = 16;
pub const SUBLANG_ENGLISH_MALAYSIA: u32 = 17;
pub const SUBLANG_ENGLISH_SINGAPORE: u32 = 18;
pub const SUBLANG_ESTONIAN_ESTONIA: u32 = 1;
pub const SUBLANG_FAEROESE_FAROE_ISLANDS: u32 = 1;
pub const SUBLANG_FILIPINO_PHILIPPINES: u32 = 1;
pub const SUBLANG_FINNISH_FINLAND: u32 = 1;
pub const SUBLANG_FRENCH: u32 = 1;
pub const SUBLANG_FRENCH_BELGIAN: u32 = 2;
pub const SUBLANG_FRENCH_CANADIAN: u32 = 3;
pub const SUBLANG_FRENCH_SWISS: u32 = 4;
pub const SUBLANG_FRENCH_LUXEMBOURG: u32 = 5;
pub const SUBLANG_FRENCH_MONACO: u32 = 6;
pub const SUBLANG_FRISIAN_NETHERLANDS: u32 = 1;
pub const SUBLANG_FULAH_SENEGAL: u32 = 2;
pub const SUBLANG_GALICIAN_GALICIAN: u32 = 1;
pub const SUBLANG_GEORGIAN_GEORGIA: u32 = 1;
pub const SUBLANG_GERMAN: u32 = 1;
pub const SUBLANG_GERMAN_SWISS: u32 = 2;
pub const SUBLANG_GERMAN_AUSTRIAN: u32 = 3;
pub const SUBLANG_GERMAN_LUXEMBOURG: u32 = 4;
pub const SUBLANG_GERMAN_LIECHTENSTEIN: u32 = 5;
pub const SUBLANG_GREEK_GREECE: u32 = 1;
pub const SUBLANG_GREENLANDIC_GREENLAND: u32 = 1;
pub const SUBLANG_GUJARATI_INDIA: u32 = 1;
pub const SUBLANG_HAUSA_NIGERIA_LATIN: u32 = 1;
pub const SUBLANG_HAWAIIAN_US: u32 = 1;
pub const SUBLANG_HEBREW_ISRAEL: u32 = 1;
pub const SUBLANG_HINDI_INDIA: u32 = 1;
pub const SUBLANG_HUNGARIAN_HUNGARY: u32 = 1;
pub const SUBLANG_ICELANDIC_ICELAND: u32 = 1;
pub const SUBLANG_IGBO_NIGERIA: u32 = 1;
pub const SUBLANG_INDONESIAN_INDONESIA: u32 = 1;
pub const SUBLANG_INUKTITUT_CANADA: u32 = 1;
pub const SUBLANG_INUKTITUT_CANADA_LATIN: u32 = 2;
pub const SUBLANG_IRISH_IRELAND: u32 = 2;
pub const SUBLANG_ITALIAN: u32 = 1;
pub const SUBLANG_ITALIAN_SWISS: u32 = 2;
pub const SUBLANG_JAPANESE_JAPAN: u32 = 1;
pub const SUBLANG_KANNADA_INDIA: u32 = 1;
pub const SUBLANG_KASHMIRI_SASIA: u32 = 2;
pub const SUBLANG_KASHMIRI_INDIA: u32 = 2;
pub const SUBLANG_KAZAK_KAZAKHSTAN: u32 = 1;
pub const SUBLANG_KHMER_CAMBODIA: u32 = 1;
pub const SUBLANG_KICHE_GUATEMALA: u32 = 1;
pub const SUBLANG_KINYARWANDA_RWANDA: u32 = 1;
pub const SUBLANG_KONKANI_INDIA: u32 = 1;
pub const SUBLANG_KOREAN: u32 = 1;
pub const SUBLANG_KYRGYZ_KYRGYZSTAN: u32 = 1;
pub const SUBLANG_LAO_LAO: u32 = 1;
pub const SUBLANG_LATVIAN_LATVIA: u32 = 1;
pub const SUBLANG_LITHUANIAN: u32 = 1;
pub const SUBLANG_LOWER_SORBIAN_GERMANY: u32 = 2;
pub const SUBLANG_LUXEMBOURGISH_LUXEMBOURG: u32 = 1;
pub const SUBLANG_MACEDONIAN_MACEDONIA: u32 = 1;
pub const SUBLANG_MALAY_MALAYSIA: u32 = 1;
pub const SUBLANG_MALAY_BRUNEI_DARUSSALAM: u32 = 2;
pub const SUBLANG_MALAYALAM_INDIA: u32 = 1;
pub const SUBLANG_MALTESE_MALTA: u32 = 1;
pub const SUBLANG_MAORI_NEW_ZEALAND: u32 = 1;
pub const SUBLANG_MAPUDUNGUN_CHILE: u32 = 1;
pub const SUBLANG_MARATHI_INDIA: u32 = 1;
pub const SUBLANG_MOHAWK_MOHAWK: u32 = 1;
pub const SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA: u32 = 1;
pub const SUBLANG_MONGOLIAN_PRC: u32 = 2;
pub const SUBLANG_NEPALI_INDIA: u32 = 2;
pub const SUBLANG_NEPALI_NEPAL: u32 = 1;
pub const SUBLANG_NORWEGIAN_BOKMAL: u32 = 1;
pub const SUBLANG_NORWEGIAN_NYNORSK: u32 = 2;
pub const SUBLANG_OCCITAN_FRANCE: u32 = 1;
pub const SUBLANG_ODIA_INDIA: u32 = 1;
pub const SUBLANG_ORIYA_INDIA: u32 = 1;
pub const SUBLANG_PASHTO_AFGHANISTAN: u32 = 1;
pub const SUBLANG_PERSIAN_IRAN: u32 = 1;
pub const SUBLANG_POLISH_POLAND: u32 = 1;
pub const SUBLANG_PORTUGUESE: u32 = 2;
pub const SUBLANG_PORTUGUESE_BRAZILIAN: u32 = 1;
pub const SUBLANG_PULAR_SENEGAL: u32 = 2;
pub const SUBLANG_PUNJABI_INDIA: u32 = 1;
pub const SUBLANG_PUNJABI_PAKISTAN: u32 = 2;
pub const SUBLANG_QUECHUA_BOLIVIA: u32 = 1;
pub const SUBLANG_QUECHUA_ECUADOR: u32 = 2;
pub const SUBLANG_QUECHUA_PERU: u32 = 3;
pub const SUBLANG_ROMANIAN_ROMANIA: u32 = 1;
pub const SUBLANG_ROMANSH_SWITZERLAND: u32 = 1;
pub const SUBLANG_RUSSIAN_RUSSIA: u32 = 1;
pub const SUBLANG_SAKHA_RUSSIA: u32 = 1;
pub const SUBLANG_SAMI_NORTHERN_NORWAY: u32 = 1;
pub const SUBLANG_SAMI_NORTHERN_SWEDEN: u32 = 2;
pub const SUBLANG_SAMI_NORTHERN_FINLAND: u32 = 3;
pub const SUBLANG_SAMI_LULE_NORWAY: u32 = 4;
pub const SUBLANG_SAMI_LULE_SWEDEN: u32 = 5;
pub const SUBLANG_SAMI_SOUTHERN_NORWAY: u32 = 6;
pub const SUBLANG_SAMI_SOUTHERN_SWEDEN: u32 = 7;
pub const SUBLANG_SAMI_SKOLT_FINLAND: u32 = 8;
pub const SUBLANG_SAMI_INARI_FINLAND: u32 = 9;
pub const SUBLANG_SANSKRIT_INDIA: u32 = 1;
pub const SUBLANG_SCOTTISH_GAELIC: u32 = 1;
pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 6;
pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC: u32 = 7;
pub const SUBLANG_SERBIAN_MONTENEGRO_LATIN: u32 = 11;
pub const SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC: u32 = 12;
pub const SUBLANG_SERBIAN_SERBIA_LATIN: u32 = 9;
pub const SUBLANG_SERBIAN_SERBIA_CYRILLIC: u32 = 10;
pub const SUBLANG_SERBIAN_CROATIA: u32 = 1;
pub const SUBLANG_SERBIAN_LATIN: u32 = 2;
pub const SUBLANG_SERBIAN_CYRILLIC: u32 = 3;
pub const SUBLANG_SINDHI_INDIA: u32 = 1;
pub const SUBLANG_SINDHI_PAKISTAN: u32 = 2;
pub const SUBLANG_SINDHI_AFGHANISTAN: u32 = 2;
pub const SUBLANG_SINHALESE_SRI_LANKA: u32 = 1;
pub const SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_SLOVAK_SLOVAKIA: u32 = 1;
pub const SUBLANG_SLOVENIAN_SLOVENIA: u32 = 1;
pub const SUBLANG_SPANISH: u32 = 1;
pub const SUBLANG_SPANISH_MEXICAN: u32 = 2;
pub const SUBLANG_SPANISH_MODERN: u32 = 3;
pub const SUBLANG_SPANISH_GUATEMALA: u32 = 4;
pub const SUBLANG_SPANISH_COSTA_RICA: u32 = 5;
pub const SUBLANG_SPANISH_PANAMA: u32 = 6;
pub const SUBLANG_SPANISH_DOMINICAN_REPUBLIC: u32 = 7;
pub const SUBLANG_SPANISH_VENEZUELA: u32 = 8;
pub const SUBLANG_SPANISH_COLOMBIA: u32 = 9;
pub const SUBLANG_SPANISH_PERU: u32 = 10;
pub const SUBLANG_SPANISH_ARGENTINA: u32 = 11;
pub const SUBLANG_SPANISH_ECUADOR: u32 = 12;
pub const SUBLANG_SPANISH_CHILE: u32 = 13;
pub const SUBLANG_SPANISH_URUGUAY: u32 = 14;
pub const SUBLANG_SPANISH_PARAGUAY: u32 = 15;
pub const SUBLANG_SPANISH_BOLIVIA: u32 = 16;
pub const SUBLANG_SPANISH_EL_SALVADOR: u32 = 17;
pub const SUBLANG_SPANISH_HONDURAS: u32 = 18;
pub const SUBLANG_SPANISH_NICARAGUA: u32 = 19;
pub const SUBLANG_SPANISH_PUERTO_RICO: u32 = 20;
pub const SUBLANG_SPANISH_US: u32 = 21;
pub const SUBLANG_SWAHILI_KENYA: u32 = 1;
pub const SUBLANG_SWEDISH: u32 = 1;
pub const SUBLANG_SWEDISH_FINLAND: u32 = 2;
pub const SUBLANG_SYRIAC_SYRIA: u32 = 1;
pub const SUBLANG_TAJIK_TAJIKISTAN: u32 = 1;
pub const SUBLANG_TAMAZIGHT_ALGERIA_LATIN: u32 = 2;
pub const SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH: u32 = 4;
pub const SUBLANG_TAMIL_INDIA: u32 = 1;
pub const SUBLANG_TAMIL_SRI_LANKA: u32 = 2;
pub const SUBLANG_TATAR_RUSSIA: u32 = 1;
pub const SUBLANG_TELUGU_INDIA: u32 = 1;
pub const SUBLANG_THAI_THAILAND: u32 = 1;
pub const SUBLANG_TIBETAN_PRC: u32 = 1;
pub const SUBLANG_TIGRIGNA_ERITREA: u32 = 2;
pub const SUBLANG_TIGRINYA_ERITREA: u32 = 2;
pub const SUBLANG_TIGRINYA_ETHIOPIA: u32 = 1;
pub const SUBLANG_TSWANA_BOTSWANA: u32 = 2;
pub const SUBLANG_TSWANA_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_TURKISH_TURKEY: u32 = 1;
pub const SUBLANG_TURKMEN_TURKMENISTAN: u32 = 1;
pub const SUBLANG_UIGHUR_PRC: u32 = 1;
pub const SUBLANG_UKRAINIAN_UKRAINE: u32 = 1;
pub const SUBLANG_UPPER_SORBIAN_GERMANY: u32 = 1;
pub const SUBLANG_URDU_PAKISTAN: u32 = 1;
pub const SUBLANG_URDU_INDIA: u32 = 2;
pub const SUBLANG_UZBEK_LATIN: u32 = 1;
pub const SUBLANG_UZBEK_CYRILLIC: u32 = 2;
pub const SUBLANG_VALENCIAN_VALENCIA: u32 = 2;
pub const SUBLANG_VIETNAMESE_VIETNAM: u32 = 1;
pub const SUBLANG_WELSH_UNITED_KINGDOM: u32 = 1;
pub const SUBLANG_WOLOF_SENEGAL: u32 = 1;
pub const SUBLANG_XHOSA_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_YAKUT_RUSSIA: u32 = 1;
pub const SUBLANG_YI_PRC: u32 = 1;
pub const SUBLANG_YORUBA_NIGERIA: u32 = 1;
pub const SUBLANG_ZULU_SOUTH_AFRICA: u32 = 1;
pub const SORT_DEFAULT: u32 = 0;
pub const SORT_INVARIANT_MATH: u32 = 1;
pub const SORT_JAPANESE_XJIS: u32 = 0;
pub const SORT_JAPANESE_UNICODE: u32 = 1;
pub const SORT_JAPANESE_RADICALSTROKE: u32 = 4;
pub const SORT_CHINESE_BIG5: u32 = 0;
pub const SORT_CHINESE_PRCP: u32 = 0;
pub const SORT_CHINESE_UNICODE: u32 = 1;
pub const SORT_CHINESE_PRC: u32 = 2;
pub const SORT_CHINESE_BOPOMOFO: u32 = 3;
pub const SORT_CHINESE_RADICALSTROKE: u32 = 4;
pub const SORT_KOREAN_KSC: u32 = 0;
pub const SORT_KOREAN_UNICODE: u32 = 1;
pub const SORT_GERMAN_PHONE_BOOK: u32 = 1;
pub const SORT_HUNGARIAN_DEFAULT: u32 = 0;
pub const SORT_HUNGARIAN_TECHNICAL: u32 = 1;
pub const SORT_GEORGIAN_TRADITIONAL: u32 = 0;
pub const SORT_GEORGIAN_MODERN: u32 = 1;
pub const NLS_VALID_LOCALE_MASK: u32 = 1048575;
pub const LOCALE_NAME_MAX_LENGTH: u32 = 85;
pub const LOCALE_TRANSIENT_KEYBOARD1: u32 = 8192;
pub const LOCALE_TRANSIENT_KEYBOARD2: u32 = 9216;
pub const LOCALE_TRANSIENT_KEYBOARD3: u32 = 10240;
pub const LOCALE_TRANSIENT_KEYBOARD4: u32 = 11264;
pub const MAXIMUM_WAIT_OBJECTS: u32 = 64;
pub const MAXIMUM_SUSPEND_COUNT: u32 = 127;
pub const _MM_HINT_T0: u32 = 1;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 3;
pub const _MM_HINT_NTA: u32 = 0;
pub const PF_TEMPORAL_LEVEL_1: u32 = 1;
pub const PF_TEMPORAL_LEVEL_2: u32 = 2;
pub const PF_TEMPORAL_LEVEL_3: u32 = 3;
pub const PF_NON_TEMPORAL_LEVEL_ALL: u32 = 0;
pub const EXCEPTION_READ_FAULT: u32 = 0;
pub const EXCEPTION_WRITE_FAULT: u32 = 1;
pub const EXCEPTION_EXECUTE_FAULT: u32 = 8;
pub const CONTEXT_AMD64: u32 = 1048576;
pub const CONTEXT_CONTROL: u32 = 1048577;
pub const CONTEXT_INTEGER: u32 = 1048578;
pub const CONTEXT_SEGMENTS: u32 = 1048580;
pub const CONTEXT_FLOATING_POINT: u32 = 1048584;
pub const CONTEXT_DEBUG_REGISTERS: u32 = 1048592;
pub const CONTEXT_FULL: u32 = 1048587;
pub const CONTEXT_ALL: u32 = 1048607;
pub const CONTEXT_XSTATE: u32 = 1048640;
pub const CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728;
pub const CONTEXT_SERVICE_ACTIVE: u32 = 268435456;
pub const CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824;
pub const CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648;
pub const INITIAL_MXCSR: u32 = 8064;
pub const INITIAL_FPCSR: u32 = 639;
pub const RUNTIME_FUNCTION_INDIRECT: u32 = 1;
pub const UNW_FLAG_NHANDLER: u32 = 0;
pub const UNW_FLAG_EHANDLER: u32 = 1;
pub const UNW_FLAG_UHANDLER: u32 = 2;
pub const UNW_FLAG_CHAININFO: u32 = 4;
pub const UNW_FLAG_NO_EPILOGUE: u32 = 2147483648;
pub const UNWIND_HISTORY_TABLE_SIZE: u32 = 12;
pub const OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME: &'static [u8; 34usize] =
    b"OutOfProcessFunctionTableCallback\0";
pub const WOW64_CONTEXT_i386: u32 = 65536;
pub const WOW64_CONTEXT_i486: u32 = 65536;
pub const WOW64_CONTEXT_CONTROL: u32 = 65537;
pub const WOW64_CONTEXT_INTEGER: u32 = 65538;
pub const WOW64_CONTEXT_SEGMENTS: u32 = 65540;
pub const WOW64_CONTEXT_FLOATING_POINT: u32 = 65544;
pub const WOW64_CONTEXT_DEBUG_REGISTERS: u32 = 65552;
pub const WOW64_CONTEXT_EXTENDED_REGISTERS: u32 = 65568;
pub const WOW64_CONTEXT_FULL: u32 = 65543;
pub const WOW64_CONTEXT_ALL: u32 = 65599;
pub const WOW64_CONTEXT_XSTATE: u32 = 65600;
pub const WOW64_CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728;
pub const WOW64_CONTEXT_SERVICE_ACTIVE: u32 = 268435456;
pub const WOW64_CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824;
pub const WOW64_CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648;
pub const WOW64_SIZE_OF_80387_REGISTERS: u32 = 80;
pub const WOW64_MAXIMUM_SUPPORTED_EXTENSION: u32 = 512;
pub const EXCEPTION_NONCONTINUABLE: u32 = 1;
pub const EXCEPTION_UNWINDING: u32 = 2;
pub const EXCEPTION_EXIT_UNWIND: u32 = 4;
pub const EXCEPTION_STACK_INVALID: u32 = 8;
pub const EXCEPTION_NESTED_CALL: u32 = 16;
pub const EXCEPTION_TARGET_UNWIND: u32 = 32;
pub const EXCEPTION_COLLIDED_UNWIND: u32 = 64;
pub const EXCEPTION_UNWIND: u32 = 102;
pub const EXCEPTION_MAXIMUM_PARAMETERS: u32 = 15;
pub const DELETE: u32 = 65536;
pub const READ_CONTROL: u32 = 131072;
pub const WRITE_DAC: u32 = 262144;
pub const WRITE_OWNER: u32 = 524288;
pub const SYNCHRONIZE: u32 = 1048576;
pub const STANDARD_RIGHTS_REQUIRED: u32 = 983040;
pub const STANDARD_RIGHTS_READ: u32 = 131072;
pub const STANDARD_RIGHTS_WRITE: u32 = 131072;
pub const STANDARD_RIGHTS_EXECUTE: u32 = 131072;
pub const STANDARD_RIGHTS_ALL: u32 = 2031616;
pub const SPECIFIC_RIGHTS_ALL: u32 = 65535;
pub const ACCESS_SYSTEM_SECURITY: u32 = 16777216;
pub const MAXIMUM_ALLOWED: u32 = 33554432;
pub const GENERIC_READ: u32 = 2147483648;
pub const GENERIC_WRITE: u32 = 1073741824;
pub const GENERIC_EXECUTE: u32 = 536870912;
pub const GENERIC_ALL: u32 = 268435456;
pub const SID_REVISION: u32 = 1;
pub const SID_MAX_SUB_AUTHORITIES: u32 = 15;
pub const SID_RECOMMENDED_SUB_AUTHORITIES: u32 = 1;
pub const SECURITY_MAX_SID_STRING_CHARACTERS: u32 = 187;
pub const SID_HASH_SIZE: u32 = 32;
pub const SECURITY_NULL_RID: u32 = 0;
pub const SECURITY_WORLD_RID: u32 = 0;
pub const SECURITY_LOCAL_RID: u32 = 0;
pub const SECURITY_LOCAL_LOGON_RID: u32 = 1;
pub const SECURITY_CREATOR_OWNER_RID: u32 = 0;
pub const SECURITY_CREATOR_GROUP_RID: u32 = 1;
pub const SECURITY_CREATOR_OWNER_SERVER_RID: u32 = 2;
pub const SECURITY_CREATOR_GROUP_SERVER_RID: u32 = 3;
pub const SECURITY_CREATOR_OWNER_RIGHTS_RID: u32 = 4;
pub const SECURITY_DIALUP_RID: u32 = 1;
pub const SECURITY_NETWORK_RID: u32 = 2;
pub const SECURITY_BATCH_RID: u32 = 3;
pub const SECURITY_INTERACTIVE_RID: u32 = 4;
pub const SECURITY_LOGON_IDS_RID: u32 = 5;
pub const SECURITY_LOGON_IDS_RID_COUNT: u32 = 3;
pub const SECURITY_SERVICE_RID: u32 = 6;
pub const SECURITY_ANONYMOUS_LOGON_RID: u32 = 7;
pub const SECURITY_PROXY_RID: u32 = 8;
pub const SECURITY_ENTERPRISE_CONTROLLERS_RID: u32 = 9;
pub const SECURITY_SERVER_LOGON_RID: u32 = 9;
pub const SECURITY_PRINCIPAL_SELF_RID: u32 = 10;
pub const SECURITY_AUTHENTICATED_USER_RID: u32 = 11;
pub const SECURITY_RESTRICTED_CODE_RID: u32 = 12;
pub const SECURITY_TERMINAL_SERVER_RID: u32 = 13;
pub const SECURITY_REMOTE_LOGON_RID: u32 = 14;
pub const SECURITY_THIS_ORGANIZATION_RID: u32 = 15;
pub const SECURITY_IUSER_RID: u32 = 17;
pub const SECURITY_LOCAL_SYSTEM_RID: u32 = 18;
pub const SECURITY_LOCAL_SERVICE_RID: u32 = 19;
pub const SECURITY_NETWORK_SERVICE_RID: u32 = 20;
pub const SECURITY_NT_NON_UNIQUE: u32 = 21;
pub const SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT: u32 = 3;
pub const SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID: u32 = 22;
pub const SECURITY_BUILTIN_DOMAIN_RID: u32 = 32;
pub const SECURITY_WRITE_RESTRICTED_CODE_RID: u32 = 33;
pub const SECURITY_PACKAGE_BASE_RID: u32 = 64;
pub const SECURITY_PACKAGE_RID_COUNT: u32 = 2;
pub const SECURITY_PACKAGE_NTLM_RID: u32 = 10;
pub const SECURITY_PACKAGE_SCHANNEL_RID: u32 = 14;
pub const SECURITY_PACKAGE_DIGEST_RID: u32 = 21;
pub const SECURITY_CRED_TYPE_BASE_RID: u32 = 65;
pub const SECURITY_CRED_TYPE_RID_COUNT: u32 = 2;
pub const SECURITY_CRED_TYPE_THIS_ORG_CERT_RID: u32 = 1;
pub const SECURITY_MIN_BASE_RID: u32 = 80;
pub const SECURITY_SERVICE_ID_BASE_RID: u32 = 80;
pub const SECURITY_SERVICE_ID_RID_COUNT: u32 = 6;
pub const SECURITY_RESERVED_ID_BASE_RID: u32 = 81;
pub const SECURITY_APPPOOL_ID_BASE_RID: u32 = 82;
pub const SECURITY_APPPOOL_ID_RID_COUNT: u32 = 6;
pub const SECURITY_VIRTUALSERVER_ID_BASE_RID: u32 = 83;
pub const SECURITY_VIRTUALSERVER_ID_RID_COUNT: u32 = 6;
pub const SECURITY_USERMODEDRIVERHOST_ID_BASE_RID: u32 = 84;
pub const SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID: u32 = 85;
pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT: u32 = 6;
pub const SECURITY_WMIHOST_ID_BASE_RID: u32 = 86;
pub const SECURITY_WMIHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_TASK_ID_BASE_RID: u32 = 87;
pub const SECURITY_NFS_ID_BASE_RID: u32 = 88;
pub const SECURITY_COM_ID_BASE_RID: u32 = 89;
pub const SECURITY_WINDOW_MANAGER_BASE_RID: u32 = 90;
pub const SECURITY_RDV_GFX_BASE_RID: u32 = 91;
pub const SECURITY_DASHOST_ID_BASE_RID: u32 = 92;
pub const SECURITY_DASHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_USERMANAGER_ID_BASE_RID: u32 = 93;
pub const SECURITY_USERMANAGER_ID_RID_COUNT: u32 = 6;
pub const SECURITY_WINRM_ID_BASE_RID: u32 = 94;
pub const SECURITY_WINRM_ID_RID_COUNT: u32 = 6;
pub const SECURITY_CCG_ID_BASE_RID: u32 = 95;
pub const SECURITY_UMFD_BASE_RID: u32 = 96;
pub const SECURITY_VIRTUALACCOUNT_ID_RID_COUNT: u32 = 6;
pub const SECURITY_MAX_BASE_RID: u32 = 111;
pub const SECURITY_MAX_ALWAYS_FILTERED: u32 = 999;
pub const SECURITY_MIN_NEVER_FILTERED: u32 = 1000;
pub const SECURITY_OTHER_ORGANIZATION_RID: u32 = 1000;
pub const SECURITY_WINDOWSMOBILE_ID_BASE_RID: u32 = 112;
pub const SECURITY_INSTALLER_GROUP_CAPABILITY_BASE: u32 = 32;
pub const SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT: u32 = 9;
pub const SECURITY_INSTALLER_CAPABILITY_RID_COUNT: u32 = 10;
pub const SECURITY_LOCAL_ACCOUNT_RID: u32 = 113;
pub const SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID: u32 = 114;
pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED: u32 = 496;
pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS: u32 = 497;
pub const DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS: u32 = 498;
pub const FOREST_USER_RID_MAX: u32 = 499;
pub const DOMAIN_USER_RID_ADMIN: u32 = 500;
pub const DOMAIN_USER_RID_GUEST: u32 = 501;
pub const DOMAIN_USER_RID_KRBTGT: u32 = 502;
pub const DOMAIN_USER_RID_DEFAULT_ACCOUNT: u32 = 503;
pub const DOMAIN_USER_RID_WDAG_ACCOUNT: u32 = 504;
pub const DOMAIN_USER_RID_MAX: u32 = 999;
pub const DOMAIN_GROUP_RID_ADMINS: u32 = 512;
pub const DOMAIN_GROUP_RID_USERS: u32 = 513;
pub const DOMAIN_GROUP_RID_GUESTS: u32 = 514;
pub const DOMAIN_GROUP_RID_COMPUTERS: u32 = 515;
pub const DOMAIN_GROUP_RID_CONTROLLERS: u32 = 516;
pub const DOMAIN_GROUP_RID_CERT_ADMINS: u32 = 517;
pub const DOMAIN_GROUP_RID_SCHEMA_ADMINS: u32 = 518;
pub const DOMAIN_GROUP_RID_ENTERPRISE_ADMINS: u32 = 519;
pub const DOMAIN_GROUP_RID_POLICY_ADMINS: u32 = 520;
pub const DOMAIN_GROUP_RID_READONLY_CONTROLLERS: u32 = 521;
pub const DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS: u32 = 522;
pub const DOMAIN_GROUP_RID_CDC_RESERVED: u32 = 524;
pub const DOMAIN_GROUP_RID_PROTECTED_USERS: u32 = 525;
pub const DOMAIN_GROUP_RID_KEY_ADMINS: u32 = 526;
pub const DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS: u32 = 527;
pub const DOMAIN_ALIAS_RID_ADMINS: u32 = 544;
pub const DOMAIN_ALIAS_RID_USERS: u32 = 545;
pub const DOMAIN_ALIAS_RID_GUESTS: u32 = 546;
pub const DOMAIN_ALIAS_RID_POWER_USERS: u32 = 547;
pub const DOMAIN_ALIAS_RID_ACCOUNT_OPS: u32 = 548;
pub const DOMAIN_ALIAS_RID_SYSTEM_OPS: u32 = 549;
pub const DOMAIN_ALIAS_RID_PRINT_OPS: u32 = 550;
pub const DOMAIN_ALIAS_RID_BACKUP_OPS: u32 = 551;
pub const DOMAIN_ALIAS_RID_REPLICATOR: u32 = 552;
pub const DOMAIN_ALIAS_RID_RAS_SERVERS: u32 = 553;
pub const DOMAIN_ALIAS_RID_PREW2KCOMPACCESS: u32 = 554;
pub const DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS: u32 = 555;
pub const DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS: u32 = 556;
pub const DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS: u32 = 557;
pub const DOMAIN_ALIAS_RID_MONITORING_USERS: u32 = 558;
pub const DOMAIN_ALIAS_RID_LOGGING_USERS: u32 = 559;
pub const DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS: u32 = 560;
pub const DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS: u32 = 561;
pub const DOMAIN_ALIAS_RID_DCOM_USERS: u32 = 562;
pub const DOMAIN_ALIAS_RID_IUSERS: u32 = 568;
pub const DOMAIN_ALIAS_RID_CRYPTO_OPERATORS: u32 = 569;
pub const DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP: u32 = 571;
pub const DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP: u32 = 572;
pub const DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP: u32 = 573;
pub const DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP: u32 = 574;
pub const DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS: u32 = 575;
pub const DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS: u32 = 576;
pub const DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS: u32 = 577;
pub const DOMAIN_ALIAS_RID_HYPER_V_ADMINS: u32 = 578;
pub const DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS: u32 = 579;
pub const DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS: u32 = 580;
pub const DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT: u32 = 581;
pub const DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS: u32 = 582;
pub const DOMAIN_ALIAS_RID_DEVICE_OWNERS: u32 = 583;
pub const SECURITY_APP_PACKAGE_BASE_RID: u32 = 2;
pub const SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT: u32 = 2;
pub const SECURITY_APP_PACKAGE_RID_COUNT: u32 = 8;
pub const SECURITY_CAPABILITY_BASE_RID: u32 = 3;
pub const SECURITY_CAPABILITY_APP_RID: u32 = 1024;
pub const SECURITY_BUILTIN_CAPABILITY_RID_COUNT: u32 = 2;
pub const SECURITY_CAPABILITY_RID_COUNT: u32 = 5;
pub const SECURITY_PARENT_PACKAGE_RID_COUNT: u32 = 8;
pub const SECURITY_CHILD_PACKAGE_RID_COUNT: u32 = 12;
pub const SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE: u32 = 1;
pub const SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE: u32 = 2;
pub const SECURITY_CAPABILITY_INTERNET_CLIENT: u32 = 1;
pub const SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER: u32 = 2;
pub const SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER: u32 = 3;
pub const SECURITY_CAPABILITY_PICTURES_LIBRARY: u32 = 4;
pub const SECURITY_CAPABILITY_VIDEOS_LIBRARY: u32 = 5;
pub const SECURITY_CAPABILITY_MUSIC_LIBRARY: u32 = 6;
pub const SECURITY_CAPABILITY_DOCUMENTS_LIBRARY: u32 = 7;
pub const SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION: u32 = 8;
pub const SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES: u32 = 9;
pub const SECURITY_CAPABILITY_REMOVABLE_STORAGE: u32 = 10;
pub const SECURITY_CAPABILITY_APPOINTMENTS: u32 = 11;
pub const SECURITY_CAPABILITY_CONTACTS: u32 = 12;
pub const SECURITY_CAPABILITY_INTERNET_EXPLORER: u32 = 4096;
pub const SECURITY_MANDATORY_UNTRUSTED_RID: u32 = 0;
pub const SECURITY_MANDATORY_LOW_RID: u32 = 4096;
pub const SECURITY_MANDATORY_MEDIUM_RID: u32 = 8192;
pub const SECURITY_MANDATORY_MEDIUM_PLUS_RID: u32 = 8448;
pub const SECURITY_MANDATORY_HIGH_RID: u32 = 12288;
pub const SECURITY_MANDATORY_SYSTEM_RID: u32 = 16384;
pub const SECURITY_MANDATORY_PROTECTED_PROCESS_RID: u32 = 20480;
pub const SECURITY_MANDATORY_MAXIMUM_USER_RID: u32 = 16384;
pub const SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT: u32 = 1;
pub const SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID: u32 = 1;
pub const SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID: u32 = 2;
pub const SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID: u32 = 3;
pub const SECURITY_AUTHENTICATION_KEY_TRUST_RID: u32 = 4;
pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID: u32 = 5;
pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID: u32 = 6;
pub const SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT: u32 = 2;
pub const SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID: u32 = 1024;
pub const SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID: u32 = 512;
pub const SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID: u32 = 0;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID: u32 = 8192;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID: u32 = 4096;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID: u32 = 2048;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID: u32 = 1536;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID: u32 = 1024;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID: u32 = 0;
pub const SECURITY_TRUSTED_INSTALLER_RID1: u32 = 956008885;
pub const SECURITY_TRUSTED_INSTALLER_RID2: u32 = 3418522649;
pub const SECURITY_TRUSTED_INSTALLER_RID3: u32 = 1831038044;
pub const SECURITY_TRUSTED_INSTALLER_RID4: u32 = 1853292631;
pub const SECURITY_TRUSTED_INSTALLER_RID5: u32 = 2271478464;
pub const SE_GROUP_MANDATORY: u32 = 1;
pub const SE_GROUP_ENABLED_BY_DEFAULT: u32 = 2;
pub const SE_GROUP_ENABLED: u32 = 4;
pub const SE_GROUP_OWNER: u32 = 8;
pub const SE_GROUP_USE_FOR_DENY_ONLY: u32 = 16;
pub const SE_GROUP_INTEGRITY: u32 = 32;
pub const SE_GROUP_INTEGRITY_ENABLED: u32 = 64;
pub const SE_GROUP_LOGON_ID: u32 = 3221225472;
pub const SE_GROUP_RESOURCE: u32 = 536870912;
pub const SE_GROUP_VALID_ATTRIBUTES: u32 = 3758096511;
pub const ACL_REVISION: u32 = 2;
pub const ACL_REVISION_DS: u32 = 4;
pub const ACL_REVISION1: u32 = 1;
pub const ACL_REVISION2: u32 = 2;
pub const ACL_REVISION3: u32 = 3;
pub const ACL_REVISION4: u32 = 4;
pub const MAX_ACL_REVISION: u32 = 4;
pub const ACCESS_MIN_MS_ACE_TYPE: u32 = 0;
pub const ACCESS_ALLOWED_ACE_TYPE: u32 = 0;
pub const ACCESS_DENIED_ACE_TYPE: u32 = 1;
pub const SYSTEM_AUDIT_ACE_TYPE: u32 = 2;
pub const SYSTEM_ALARM_ACE_TYPE: u32 = 3;
pub const ACCESS_MAX_MS_V2_ACE_TYPE: u32 = 3;
pub const ACCESS_ALLOWED_COMPOUND_ACE_TYPE: u32 = 4;
pub const ACCESS_MAX_MS_V3_ACE_TYPE: u32 = 4;
pub const ACCESS_MIN_MS_OBJECT_ACE_TYPE: u32 = 5;
pub const ACCESS_ALLOWED_OBJECT_ACE_TYPE: u32 = 5;
pub const ACCESS_DENIED_OBJECT_ACE_TYPE: u32 = 6;
pub const SYSTEM_AUDIT_OBJECT_ACE_TYPE: u32 = 7;
pub const SYSTEM_ALARM_OBJECT_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_OBJECT_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_V4_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_ACE_TYPE: u32 = 8;
pub const ACCESS_ALLOWED_CALLBACK_ACE_TYPE: u32 = 9;
pub const ACCESS_DENIED_CALLBACK_ACE_TYPE: u32 = 10;
pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE: u32 = 11;
pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE: u32 = 12;
pub const SYSTEM_AUDIT_CALLBACK_ACE_TYPE: u32 = 13;
pub const SYSTEM_ALARM_CALLBACK_ACE_TYPE: u32 = 14;
pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE: u32 = 15;
pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE: u32 = 16;
pub const SYSTEM_MANDATORY_LABEL_ACE_TYPE: u32 = 17;
pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE: u32 = 18;
pub const SYSTEM_SCOPED_POLICY_ID_ACE_TYPE: u32 = 19;
pub const SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE: u32 = 20;
pub const SYSTEM_ACCESS_FILTER_ACE_TYPE: u32 = 21;
pub const ACCESS_MAX_MS_V5_ACE_TYPE: u32 = 21;
pub const OBJECT_INHERIT_ACE: u32 = 1;
pub const CONTAINER_INHERIT_ACE: u32 = 2;
pub const NO_PROPAGATE_INHERIT_ACE: u32 = 4;
pub const INHERIT_ONLY_ACE: u32 = 8;
pub const INHERITED_ACE: u32 = 16;
pub const VALID_INHERIT_FLAGS: u32 = 31;
pub const CRITICAL_ACE_FLAG: u32 = 32;
pub const SUCCESSFUL_ACCESS_ACE_FLAG: u32 = 64;
pub const FAILED_ACCESS_ACE_FLAG: u32 = 128;
pub const TRUST_PROTECTED_FILTER_ACE_FLAG: u32 = 64;
pub const SYSTEM_MANDATORY_LABEL_NO_WRITE_UP: u32 = 1;
pub const SYSTEM_MANDATORY_LABEL_NO_READ_UP: u32 = 2;
pub const SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP: u32 = 4;
pub const SYSTEM_MANDATORY_LABEL_VALID_MASK: u32 = 7;
pub const SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK: u32 = 16777215;
pub const SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK: u32 = 4294967295;
pub const SYSTEM_ACCESS_FILTER_VALID_MASK: u32 = 16777215;
pub const SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK: u32 = 4294967295;
pub const ACE_OBJECT_TYPE_PRESENT: u32 = 1;
pub const ACE_INHERITED_OBJECT_TYPE_PRESENT: u32 = 2;
pub const SECURITY_DESCRIPTOR_REVISION: u32 = 1;
pub const SECURITY_DESCRIPTOR_REVISION1: u32 = 1;
pub const SE_OWNER_DEFAULTED: u32 = 1;
pub const SE_GROUP_DEFAULTED: u32 = 2;
pub const SE_DACL_PRESENT: u32 = 4;
pub const SE_DACL_DEFAULTED: u32 = 8;
pub const SE_SACL_PRESENT: u32 = 16;
pub const SE_SACL_DEFAULTED: u32 = 32;
pub const SE_DACL_AUTO_INHERIT_REQ: u32 = 256;
pub const SE_SACL_AUTO_INHERIT_REQ: u32 = 512;
pub const SE_DACL_AUTO_INHERITED: u32 = 1024;
pub const SE_SACL_AUTO_INHERITED: u32 = 2048;
pub const SE_DACL_PROTECTED: u32 = 4096;
pub const SE_SACL_PROTECTED: u32 = 8192;
pub const SE_RM_CONTROL_VALID: u32 = 16384;
pub const SE_SELF_RELATIVE: u32 = 32768;
pub const ACCESS_OBJECT_GUID: u32 = 0;
pub const ACCESS_PROPERTY_SET_GUID: u32 = 1;
pub const ACCESS_PROPERTY_GUID: u32 = 2;
pub const ACCESS_MAX_LEVEL: u32 = 4;
pub const AUDIT_ALLOW_NO_PRIVILEGE: u32 = 1;
pub const ACCESS_DS_SOURCE_A: &'static [u8; 3usize] = b"DS\0";
pub const ACCESS_DS_SOURCE_W: &'static [u8; 3usize] = b"DS\0";
pub const ACCESS_DS_OBJECT_TYPE_NAME_A: &'static [u8; 25usize] = b"Directory Service Object\0";
pub const ACCESS_DS_OBJECT_TYPE_NAME_W: &'static [u8; 25usize] = b"Directory Service Object\0";
pub const SE_PRIVILEGE_ENABLED_BY_DEFAULT: u32 = 1;
pub const SE_PRIVILEGE_ENABLED: u32 = 2;
pub const SE_PRIVILEGE_USED_FOR_ACCESS: u32 = 2147483648;
pub const PRIVILEGE_SET_ALL_NECESSARY: u32 = 1;
pub const ACCESS_REASON_TYPE_MASK: u32 = 16711680;
pub const ACCESS_REASON_DATA_MASK: u32 = 65535;
pub const ACCESS_REASON_STAGING_MASK: u32 = 2147483648;
pub const ACCESS_REASON_EXDATA_MASK: u32 = 2130706432;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE: u32 = 1;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE: u32 = 2;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE: u32 = 4;
pub const SE_SECURITY_DESCRIPTOR_VALID_FLAGS: u32 = 7;
pub const SE_ACTIVATE_AS_USER_CAPABILITY: &'static [u8; 15usize] = b"activateAsUser\0";
pub const SE_CONSTRAINED_IMPERSONATION_CAPABILITY: &'static [u8; 25usize] =
    b"constrainedImpersonation\0";
pub const SE_SESSION_IMPERSONATION_CAPABILITY: &'static [u8; 21usize] = b"sessionImpersonation\0";
pub const SE_MUMA_CAPABILITY: &'static [u8; 5usize] = b"muma\0";
pub const SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY: &'static [u8; 23usize] =
    b"developmentModeNetwork\0";
pub const TOKEN_ASSIGN_PRIMARY: u32 = 1;
pub const TOKEN_DUPLICATE: u32 = 2;
pub const TOKEN_IMPERSONATE: u32 = 4;
pub const TOKEN_QUERY: u32 = 8;
pub const TOKEN_QUERY_SOURCE: u32 = 16;
pub const TOKEN_ADJUST_PRIVILEGES: u32 = 32;
pub const TOKEN_ADJUST_GROUPS: u32 = 64;
pub const TOKEN_ADJUST_DEFAULT: u32 = 128;
pub const TOKEN_ADJUST_SESSIONID: u32 = 256;
pub const TOKEN_ALL_ACCESS_P: u32 = 983295;
pub const TOKEN_ALL_ACCESS: u32 = 983551;
pub const TOKEN_READ: u32 = 131080;
pub const TOKEN_WRITE: u32 = 131296;
pub const TOKEN_EXECUTE: u32 = 131072;
pub const TOKEN_TRUST_CONSTRAINT_MASK: u32 = 131096;
pub const TOKEN_ACCESS_PSEUDO_HANDLE_WIN8: u32 = 24;
pub const TOKEN_ACCESS_PSEUDO_HANDLE: u32 = 24;
pub const TOKEN_MANDATORY_POLICY_OFF: u32 = 0;
pub const TOKEN_MANDATORY_POLICY_NO_WRITE_UP: u32 = 1;
pub const TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN: u32 = 2;
pub const TOKEN_MANDATORY_POLICY_VALID_MASK: u32 = 3;
pub const POLICY_AUDIT_SUBCATEGORY_COUNT: u32 = 59;
pub const TOKEN_SOURCE_LENGTH: u32 = 8;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID: u32 = 0;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64: u32 = 2;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING: u32 = 3;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN: u32 = 4;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_SID: u32 = 5;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN: u32 = 6;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING: u32 = 16;
pub const CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE: u32 = 2;
pub const CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY: u32 = 4;
pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT: u32 = 8;
pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED: u32 = 16;
pub const CLAIM_SECURITY_ATTRIBUTE_MANDATORY: u32 = 32;
pub const CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS: u32 = 63;
pub const CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS: u32 = 4294901760;
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION: u32 = 1;
pub const SECURITY_DYNAMIC_TRACKING: u32 = 1;
pub const SECURITY_STATIC_TRACKING: u32 = 0;
pub const DISABLE_MAX_PRIVILEGE: u32 = 1;
pub const SANDBOX_INERT: u32 = 2;
pub const LUA_TOKEN: u32 = 4;
pub const WRITE_RESTRICTED: u32 = 8;
pub const OWNER_SECURITY_INFORMATION: u32 = 1;
pub const GROUP_SECURITY_INFORMATION: u32 = 2;
pub const DACL_SECURITY_INFORMATION: u32 = 4;
pub const SACL_SECURITY_INFORMATION: u32 = 8;
pub const LABEL_SECURITY_INFORMATION: u32 = 16;
pub const ATTRIBUTE_SECURITY_INFORMATION: u32 = 32;
pub const SCOPE_SECURITY_INFORMATION: u32 = 64;
pub const PROCESS_TRUST_LABEL_SECURITY_INFORMATION: u32 = 128;
pub const ACCESS_FILTER_SECURITY_INFORMATION: u32 = 256;
pub const BACKUP_SECURITY_INFORMATION: u32 = 65536;
pub const PROTECTED_DACL_SECURITY_INFORMATION: u32 = 2147483648;
pub const PROTECTED_SACL_SECURITY_INFORMATION: u32 = 1073741824;
pub const UNPROTECTED_DACL_SECURITY_INFORMATION: u32 = 536870912;
pub const UNPROTECTED_SACL_SECURITY_INFORMATION: u32 = 268435456;
pub const SE_SIGNING_LEVEL_UNCHECKED: u32 = 0;
pub const SE_SIGNING_LEVEL_UNSIGNED: u32 = 1;
pub const SE_SIGNING_LEVEL_ENTERPRISE: u32 = 2;
pub const SE_SIGNING_LEVEL_CUSTOM_1: u32 = 3;
pub const SE_SIGNING_LEVEL_DEVELOPER: u32 = 3;
pub const SE_SIGNING_LEVEL_AUTHENTICODE: u32 = 4;
pub const SE_SIGNING_LEVEL_CUSTOM_2: u32 = 5;
pub const SE_SIGNING_LEVEL_STORE: u32 = 6;
pub const SE_SIGNING_LEVEL_CUSTOM_3: u32 = 7;
pub const SE_SIGNING_LEVEL_ANTIMALWARE: u32 = 7;
pub const SE_SIGNING_LEVEL_MICROSOFT: u32 = 8;
pub const SE_SIGNING_LEVEL_CUSTOM_4: u32 = 9;
pub const SE_SIGNING_LEVEL_CUSTOM_5: u32 = 10;
pub const SE_SIGNING_LEVEL_DYNAMIC_CODEGEN: u32 = 11;
pub const SE_SIGNING_LEVEL_WINDOWS: u32 = 12;
pub const SE_SIGNING_LEVEL_CUSTOM_7: u32 = 13;
pub const SE_SIGNING_LEVEL_WINDOWS_TCB: u32 = 14;
pub const SE_SIGNING_LEVEL_CUSTOM_6: u32 = 15;
pub const SE_LEARNING_MODE_FLAG_PERMISSIVE: u32 = 1;
pub const PROCESS_TERMINATE: u32 = 1;
pub const PROCESS_CREATE_THREAD: u32 = 2;
pub const PROCESS_SET_SESSIONID: u32 = 4;
pub const PROCESS_VM_OPERATION: u32 = 8;
pub const PROCESS_VM_READ: u32 = 16;
pub const PROCESS_VM_WRITE: u32 = 32;
pub const PROCESS_DUP_HANDLE: u32 = 64;
pub const PROCESS_CREATE_PROCESS: u32 = 128;
pub const PROCESS_SET_QUOTA: u32 = 256;
pub const PROCESS_SET_INFORMATION: u32 = 512;
pub const PROCESS_QUERY_INFORMATION: u32 = 1024;
pub const PROCESS_SUSPEND_RESUME: u32 = 2048;
pub const PROCESS_QUERY_LIMITED_INFORMATION: u32 = 4096;
pub const PROCESS_SET_LIMITED_INFORMATION: u32 = 8192;
pub const PROCESS_ALL_ACCESS: u32 = 2097151;
pub const THREAD_TERMINATE: u32 = 1;
pub const THREAD_SUSPEND_RESUME: u32 = 2;
pub const THREAD_GET_CONTEXT: u32 = 8;
pub const THREAD_SET_CONTEXT: u32 = 16;
pub const THREAD_QUERY_INFORMATION: u32 = 64;
pub const THREAD_SET_INFORMATION: u32 = 32;
pub const THREAD_SET_THREAD_TOKEN: u32 = 128;
pub const THREAD_IMPERSONATE: u32 = 256;
pub const THREAD_DIRECT_IMPERSONATION: u32 = 512;
pub const THREAD_SET_LIMITED_INFORMATION: u32 = 1024;
pub const THREAD_QUERY_LIMITED_INFORMATION: u32 = 2048;
pub const THREAD_RESUME: u32 = 4096;
pub const THREAD_ALL_ACCESS: u32 = 2097151;
pub const JOB_OBJECT_ASSIGN_PROCESS: u32 = 1;
pub const JOB_OBJECT_SET_ATTRIBUTES: u32 = 2;
pub const JOB_OBJECT_QUERY: u32 = 4;
pub const JOB_OBJECT_TERMINATE: u32 = 8;
pub const JOB_OBJECT_SET_SECURITY_ATTRIBUTES: u32 = 16;
pub const JOB_OBJECT_IMPERSONATE: u32 = 32;
pub const JOB_OBJECT_ALL_ACCESS: u32 = 2031679;
pub const FLS_MAXIMUM_AVAILABLE: u32 = 128;
pub const TLS_MINIMUM_AVAILABLE: u32 = 64;
pub const THREAD_DYNAMIC_CODE_ALLOW: u32 = 1;
pub const THREAD_BASE_PRIORITY_LOWRT: u32 = 15;
pub const THREAD_BASE_PRIORITY_MAX: u32 = 2;
pub const THREAD_BASE_PRIORITY_MIN: i32 = -2;
pub const THREAD_BASE_PRIORITY_IDLE: i32 = -15;
pub const MEMORY_PRIORITY_LOWEST: u32 = 0;
pub const MEMORY_PRIORITY_VERY_LOW: u32 = 1;
pub const MEMORY_PRIORITY_LOW: u32 = 2;
pub const MEMORY_PRIORITY_MEDIUM: u32 = 3;
pub const MEMORY_PRIORITY_BELOW_NORMAL: u32 = 4;
pub const MEMORY_PRIORITY_NORMAL: u32 = 5;
pub const QUOTA_LIMITS_HARDWS_MIN_ENABLE: u32 = 1;
pub const QUOTA_LIMITS_HARDWS_MIN_DISABLE: u32 = 2;
pub const QUOTA_LIMITS_HARDWS_MAX_ENABLE: u32 = 4;
pub const QUOTA_LIMITS_HARDWS_MAX_DISABLE: u32 = 8;
pub const QUOTA_LIMITS_USE_DEFAULT_LIMITS: u32 = 16;
pub const MAX_HW_COUNTERS: u32 = 16;
pub const THREAD_PROFILING_FLAG_DISPATCH: u32 = 1;
pub const JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG: u32 = 64;
pub const JOB_OBJECT_TERMINATE_AT_END_OF_JOB: u32 = 0;
pub const JOB_OBJECT_POST_AT_END_OF_JOB: u32 = 1;
pub const JOB_OBJECT_MSG_END_OF_JOB_TIME: u32 = 1;
pub const JOB_OBJECT_MSG_END_OF_PROCESS_TIME: u32 = 2;
pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT: u32 = 3;
pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO: u32 = 4;
pub const JOB_OBJECT_MSG_NEW_PROCESS: u32 = 6;
pub const JOB_OBJECT_MSG_EXIT_PROCESS: u32 = 7;
pub const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS: u32 = 8;
pub const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT: u32 = 9;
pub const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT: u32 = 10;
pub const JOB_OBJECT_MSG_NOTIFICATION_LIMIT: u32 = 11;
pub const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT: u32 = 12;
pub const JOB_OBJECT_MSG_SILO_TERMINATED: u32 = 13;
pub const JOB_OBJECT_MSG_MINIMUM: u32 = 1;
pub const JOB_OBJECT_MSG_MAXIMUM: u32 = 13;
pub const JOB_OBJECT_VALID_COMPLETION_FILTER: u32 = 16382;
pub const JOB_OBJECT_LIMIT_WORKINGSET: u32 = 1;
pub const JOB_OBJECT_LIMIT_PROCESS_TIME: u32 = 2;
pub const JOB_OBJECT_LIMIT_JOB_TIME: u32 = 4;
pub const JOB_OBJECT_LIMIT_ACTIVE_PROCESS: u32 = 8;
pub const JOB_OBJECT_LIMIT_AFFINITY: u32 = 16;
pub const JOB_OBJECT_LIMIT_PRIORITY_CLASS: u32 = 32;
pub const JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME: u32 = 64;
pub const JOB_OBJECT_LIMIT_SCHEDULING_CLASS: u32 = 128;
pub const JOB_OBJECT_LIMIT_PROCESS_MEMORY: u32 = 256;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY: u32 = 512;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH: u32 = 512;
pub const JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION: u32 = 1024;
pub const JOB_OBJECT_LIMIT_BREAKAWAY_OK: u32 = 2048;
pub const JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK: u32 = 4096;
pub const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: u32 = 8192;
pub const JOB_OBJECT_LIMIT_SUBSET_AFFINITY: u32 = 16384;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY_LOW: u32 = 32768;
pub const JOB_OBJECT_LIMIT_JOB_READ_BYTES: u32 = 65536;
pub const JOB_OBJECT_LIMIT_JOB_WRITE_BYTES: u32 = 131072;
pub const JOB_OBJECT_LIMIT_RATE_CONTROL: u32 = 262144;
pub const JOB_OBJECT_LIMIT_CPU_RATE_CONTROL: u32 = 262144;
pub const JOB_OBJECT_LIMIT_IO_RATE_CONTROL: u32 = 524288;
pub const JOB_OBJECT_LIMIT_NET_RATE_CONTROL: u32 = 1048576;
pub const JOB_OBJECT_LIMIT_VALID_FLAGS: u32 = 524287;
pub const JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS: u32 = 255;
pub const JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS: u32 = 32767;
pub const JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS: u32 = 2064900;
pub const JOB_OBJECT_UILIMIT_NONE: u32 = 0;
pub const JOB_OBJECT_UILIMIT_HANDLES: u32 = 1;
pub const JOB_OBJECT_UILIMIT_READCLIPBOARD: u32 = 2;
pub const JOB_OBJECT_UILIMIT_WRITECLIPBOARD: u32 = 4;
pub const JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS: u32 = 8;
pub const JOB_OBJECT_UILIMIT_DISPLAYSETTINGS: u32 = 16;
pub const JOB_OBJECT_UILIMIT_GLOBALATOMS: u32 = 32;
pub const JOB_OBJECT_UILIMIT_DESKTOP: u32 = 64;
pub const JOB_OBJECT_UILIMIT_EXITWINDOWS: u32 = 128;
pub const JOB_OBJECT_UILIMIT_ALL: u32 = 255;
pub const JOB_OBJECT_UI_VALID_FLAGS: u32 = 255;
pub const JOB_OBJECT_SECURITY_NO_ADMIN: u32 = 1;
pub const JOB_OBJECT_SECURITY_RESTRICTED_TOKEN: u32 = 2;
pub const JOB_OBJECT_SECURITY_ONLY_TOKEN: u32 = 4;
pub const JOB_OBJECT_SECURITY_FILTER_TOKENS: u32 = 8;
pub const JOB_OBJECT_SECURITY_VALID_FLAGS: u32 = 15;
pub const JOB_OBJECT_CPU_RATE_CONTROL_ENABLE: u32 = 1;
pub const JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED: u32 = 2;
pub const JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP: u32 = 4;
pub const JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY: u32 = 8;
pub const JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE: u32 = 16;
pub const JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS: u32 = 31;
pub const EVENT_MODIFY_STATE: u32 = 2;
pub const EVENT_ALL_ACCESS: u32 = 2031619;
pub const MUTANT_QUERY_STATE: u32 = 1;
pub const MUTANT_ALL_ACCESS: u32 = 2031617;
pub const SEMAPHORE_MODIFY_STATE: u32 = 2;
pub const SEMAPHORE_ALL_ACCESS: u32 = 2031619;
pub const TIMER_QUERY_STATE: u32 = 1;
pub const TIMER_MODIFY_STATE: u32 = 2;
pub const TIMER_ALL_ACCESS: u32 = 2031619;
pub const TIME_ZONE_ID_UNKNOWN: u32 = 0;
pub const TIME_ZONE_ID_STANDARD: u32 = 1;
pub const TIME_ZONE_ID_DAYLIGHT: u32 = 2;
pub const LTP_PC_SMT: u32 = 1;
pub const CACHE_FULLY_ASSOCIATIVE: u32 = 255;
pub const SYSTEM_CPU_SET_INFORMATION_PARKED: u32 = 1;
pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED: u32 = 2;
pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS: u32 = 4;
pub const SYSTEM_CPU_SET_INFORMATION_REALTIME: u32 = 8;
pub const PROCESSOR_INTEL_386: u32 = 386;
pub const PROCESSOR_INTEL_486: u32 = 486;
pub const PROCESSOR_INTEL_PENTIUM: u32 = 586;
pub const PROCESSOR_INTEL_IA64: u32 = 2200;
pub const PROCESSOR_AMD_X8664: u32 = 8664;
pub const PROCESSOR_MIPS_R4000: u32 = 4000;
pub const PROCESSOR_ALPHA_21064: u32 = 21064;
pub const PROCESSOR_PPC_601: u32 = 601;
pub const PROCESSOR_PPC_603: u32 = 603;
pub const PROCESSOR_PPC_604: u32 = 604;
pub const PROCESSOR_PPC_620: u32 = 620;
pub const PROCESSOR_HITACHI_SH3: u32 = 10003;
pub const PROCESSOR_HITACHI_SH3E: u32 = 10004;
pub const PROCESSOR_HITACHI_SH4: u32 = 10005;
pub const PROCESSOR_MOTOROLA_821: u32 = 821;
pub const PROCESSOR_SHx_SH3: u32 = 103;
pub const PROCESSOR_SHx_SH4: u32 = 104;
pub const PROCESSOR_STRONGARM: u32 = 2577;
pub const PROCESSOR_ARM720: u32 = 1824;
pub const PROCESSOR_ARM820: u32 = 2080;
pub const PROCESSOR_ARM920: u32 = 2336;
pub const PROCESSOR_ARM_7TDMI: u32 = 70001;
pub const PROCESSOR_OPTIL: u32 = 18767;
pub const PROCESSOR_ARCHITECTURE_INTEL: u32 = 0;
pub const PROCESSOR_ARCHITECTURE_MIPS: u32 = 1;
pub const PROCESSOR_ARCHITECTURE_ALPHA: u32 = 2;
pub const PROCESSOR_ARCHITECTURE_PPC: u32 = 3;
pub const PROCESSOR_ARCHITECTURE_SHX: u32 = 4;
pub const PROCESSOR_ARCHITECTURE_ARM: u32 = 5;
pub const PROCESSOR_ARCHITECTURE_IA64: u32 = 6;
pub const PROCESSOR_ARCHITECTURE_ALPHA64: u32 = 7;
pub const PROCESSOR_ARCHITECTURE_MSIL: u32 = 8;
pub const PROCESSOR_ARCHITECTURE_AMD64: u32 = 9;
pub const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64: u32 = 10;
pub const PROCESSOR_ARCHITECTURE_NEUTRAL: u32 = 11;
pub const PROCESSOR_ARCHITECTURE_ARM64: u32 = 12;
pub const PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64: u32 = 13;
pub const PROCESSOR_ARCHITECTURE_IA32_ON_ARM64: u32 = 14;
pub const PROCESSOR_ARCHITECTURE_UNKNOWN: u32 = 65535;
pub const PF_FLOATING_POINT_PRECISION_ERRATA: u32 = 0;
pub const PF_FLOATING_POINT_EMULATED: u32 = 1;
pub const PF_COMPARE_EXCHANGE_DOUBLE: u32 = 2;
pub const PF_MMX_INSTRUCTIONS_AVAILABLE: u32 = 3;
pub const PF_PPC_MOVEMEM_64BIT_OK: u32 = 4;
pub const PF_ALPHA_BYTE_INSTRUCTIONS: u32 = 5;
pub const PF_XMMI_INSTRUCTIONS_AVAILABLE: u32 = 6;
pub const PF_3DNOW_INSTRUCTIONS_AVAILABLE: u32 = 7;
pub const PF_RDTSC_INSTRUCTION_AVAILABLE: u32 = 8;
pub const PF_PAE_ENABLED: u32 = 9;
pub const PF_XMMI64_INSTRUCTIONS_AVAILABLE: u32 = 10;
pub const PF_SSE_DAZ_MODE_AVAILABLE: u32 = 11;
pub const PF_NX_ENABLED: u32 = 12;
pub const PF_SSE3_INSTRUCTIONS_AVAILABLE: u32 = 13;
pub const PF_COMPARE_EXCHANGE128: u32 = 14;
pub const PF_COMPARE64_EXCHANGE128: u32 = 15;
pub const PF_CHANNELS_ENABLED: u32 = 16;
pub const PF_XSAVE_ENABLED: u32 = 17;
pub const PF_ARM_VFP_32_REGISTERS_AVAILABLE: u32 = 18;
pub const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE: u32 = 19;
pub const PF_SECOND_LEVEL_ADDRESS_TRANSLATION: u32 = 20;
pub const PF_VIRT_FIRMWARE_ENABLED: u32 = 21;
pub const PF_RDWRFSGSBASE_AVAILABLE: u32 = 22;
pub const PF_FASTFAIL_AVAILABLE: u32 = 23;
pub const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE: u32 = 24;
pub const PF_ARM_64BIT_LOADSTORE_ATOMIC: u32 = 25;
pub const PF_ARM_EXTERNAL_CACHE_AVAILABLE: u32 = 26;
pub const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE: u32 = 27;
pub const PF_RDRAND_INSTRUCTION_AVAILABLE: u32 = 28;
pub const PF_ARM_V8_INSTRUCTIONS_AVAILABLE: u32 = 29;
pub const PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE: u32 = 30;
pub const PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE: u32 = 31;
pub const PF_RDTSCP_INSTRUCTION_AVAILABLE: u32 = 32;
pub const PF_RDPID_INSTRUCTION_AVAILABLE: u32 = 33;
pub const XSTATE_LEGACY_FLOATING_POINT: u32 = 0;
pub const XSTATE_LEGACY_SSE: u32 = 1;
pub const XSTATE_GSSE: u32 = 2;
pub const XSTATE_AVX: u32 = 2;
pub const XSTATE_MPX_BNDREGS: u32 = 3;
pub const XSTATE_MPX_BNDCSR: u32 = 4;
pub const XSTATE_AVX512_KMASK: u32 = 5;
pub const XSTATE_AVX512_ZMM_H: u32 = 6;
pub const XSTATE_AVX512_ZMM: u32 = 7;
pub const XSTATE_IPT: u32 = 8;
pub const XSTATE_CET_U: u32 = 11;
pub const XSTATE_LWP: u32 = 62;
pub const MAXIMUM_XSTATE_FEATURES: u32 = 64;
pub const XSTATE_COMPACTION_ENABLE: u32 = 63;
pub const XSTATE_ALIGN_BIT: u32 = 1;
pub const XSTATE_CONTROLFLAG_XSAVEOPT_MASK: u32 = 1;
pub const XSTATE_CONTROLFLAG_XSAVEC_MASK: u32 = 2;
pub const XSTATE_CONTROLFLAG_VALID_MASK: u32 = 3;
pub const CFG_CALL_TARGET_VALID: u32 = 1;
pub const CFG_CALL_TARGET_PROCESSED: u32 = 2;
pub const CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID: u32 = 4;
pub const SECTION_QUERY: u32 = 1;
pub const SECTION_MAP_WRITE: u32 = 2;
pub const SECTION_MAP_READ: u32 = 4;
pub const SECTION_MAP_EXECUTE: u32 = 8;
pub const SECTION_EXTEND_SIZE: u32 = 16;
pub const SECTION_MAP_EXECUTE_EXPLICIT: u32 = 32;
pub const SECTION_ALL_ACCESS: u32 = 983071;
pub const SESSION_QUERY_ACCESS: u32 = 1;
pub const SESSION_MODIFY_ACCESS: u32 = 2;
pub const SESSION_ALL_ACCESS: u32 = 983043;
pub const PAGE_NOACCESS: u32 = 1;
pub const PAGE_READONLY: u32 = 2;
pub const PAGE_READWRITE: u32 = 4;
pub const PAGE_WRITECOPY: u32 = 8;
pub const PAGE_EXECUTE: u32 = 16;
pub const PAGE_EXECUTE_READ: u32 = 32;
pub const PAGE_EXECUTE_READWRITE: u32 = 64;
pub const PAGE_EXECUTE_WRITECOPY: u32 = 128;
pub const PAGE_GUARD: u32 = 256;
pub const PAGE_NOCACHE: u32 = 512;
pub const PAGE_WRITECOMBINE: u32 = 1024;
pub const PAGE_ENCLAVE_THREAD_CONTROL: u32 = 2147483648;
pub const PAGE_REVERT_TO_FILE_MAP: u32 = 2147483648;
pub const PAGE_TARGETS_NO_UPDATE: u32 = 1073741824;
pub const PAGE_TARGETS_INVALID: u32 = 1073741824;
pub const PAGE_ENCLAVE_UNVALIDATED: u32 = 536870912;
pub const PAGE_ENCLAVE_DECOMMIT: u32 = 268435456;
pub const MEM_COMMIT: u32 = 4096;
pub const MEM_RESERVE: u32 = 8192;
pub const MEM_REPLACE_PLACEHOLDER: u32 = 16384;
pub const MEM_RESERVE_PLACEHOLDER: u32 = 262144;
pub const MEM_RESET: u32 = 524288;
pub const MEM_TOP_DOWN: u32 = 1048576;
pub const MEM_WRITE_WATCH: u32 = 2097152;
pub const MEM_PHYSICAL: u32 = 4194304;
pub const MEM_ROTATE: u32 = 8388608;
pub const MEM_DIFFERENT_IMAGE_BASE_OK: u32 = 8388608;
pub const MEM_RESET_UNDO: u32 = 16777216;
pub const MEM_LARGE_PAGES: u32 = 536870912;
pub const MEM_4MB_PAGES: u32 = 2147483648;
pub const MEM_64K_PAGES: u32 = 541065216;
pub const MEM_UNMAP_WITH_TRANSIENT_BOOST: u32 = 1;
pub const MEM_COALESCE_PLACEHOLDERS: u32 = 1;
pub const MEM_PRESERVE_PLACEHOLDER: u32 = 2;
pub const MEM_DECOMMIT: u32 = 16384;
pub const MEM_RELEASE: u32 = 32768;
pub const MEM_FREE: u32 = 65536;
pub const MEM_EXTENDED_PARAMETER_GRAPHICS: u32 = 1;
pub const MEM_EXTENDED_PARAMETER_TYPE_BITS: u32 = 8;
pub const SEC_PARTITION_OWNER_HANDLE: u32 = 262144;
pub const SEC_64K_PAGES: u32 = 524288;
pub const SEC_FILE: u32 = 8388608;
pub const SEC_IMAGE: u32 = 16777216;
pub const SEC_PROTECTED_IMAGE: u32 = 33554432;
pub const SEC_RESERVE: u32 = 67108864;
pub const SEC_COMMIT: u32 = 134217728;
pub const SEC_NOCACHE: u32 = 268435456;
pub const SEC_WRITECOMBINE: u32 = 1073741824;
pub const SEC_LARGE_PAGES: u32 = 2147483648;
pub const SEC_IMAGE_NO_EXECUTE: u32 = 285212672;
pub const MEM_PRIVATE: u32 = 131072;
pub const MEM_MAPPED: u32 = 262144;
pub const MEM_IMAGE: u32 = 16777216;
pub const WRITE_WATCH_FLAG_RESET: u32 = 1;
pub const ENCLAVE_TYPE_SGX: u32 = 1;
pub const ENCLAVE_TYPE_SGX2: u32 = 2;
pub const ENCLAVE_TYPE_VBS: u32 = 16;
pub const ENCLAVE_VBS_FLAG_DEBUG: u32 = 1;
pub const FILE_READ_DATA: u32 = 1;
pub const FILE_LIST_DIRECTORY: u32 = 1;
pub const FILE_WRITE_DATA: u32 = 2;
pub const FILE_ADD_FILE: u32 = 2;
pub const FILE_APPEND_DATA: u32 = 4;
pub const FILE_ADD_SUBDIRECTORY: u32 = 4;
pub const FILE_CREATE_PIPE_INSTANCE: u32 = 4;
pub const FILE_READ_EA: u32 = 8;
pub const FILE_WRITE_EA: u32 = 16;
pub const FILE_EXECUTE: u32 = 32;
pub const FILE_TRAVERSE: u32 = 32;
pub const FILE_DELETE_CHILD: u32 = 64;
pub const FILE_READ_ATTRIBUTES: u32 = 128;
pub const FILE_WRITE_ATTRIBUTES: u32 = 256;
pub const FILE_ALL_ACCESS: u32 = 2032127;
pub const FILE_GENERIC_READ: u32 = 1179785;
pub const FILE_GENERIC_WRITE: u32 = 1179926;
pub const FILE_GENERIC_EXECUTE: u32 = 1179808;
pub const FILE_SHARE_READ: u32 = 1;
pub const FILE_SHARE_WRITE: u32 = 2;
pub const FILE_SHARE_DELETE: u32 = 4;
pub const FILE_ATTRIBUTE_READONLY: u32 = 1;
pub const FILE_ATTRIBUTE_HIDDEN: u32 = 2;
pub const FILE_ATTRIBUTE_SYSTEM: u32 = 4;
pub const FILE_ATTRIBUTE_DIRECTORY: u32 = 16;
pub const FILE_ATTRIBUTE_ARCHIVE: u32 = 32;
pub const FILE_ATTRIBUTE_DEVICE: u32 = 64;
pub const FILE_ATTRIBUTE_NORMAL: u32 = 128;
pub const FILE_ATTRIBUTE_TEMPORARY: u32 = 256;
pub const FILE_ATTRIBUTE_SPARSE_FILE: u32 = 512;
pub const FILE_ATTRIBUTE_REPARSE_POINT: u32 = 1024;
pub const FILE_ATTRIBUTE_COMPRESSED: u32 = 2048;
pub const FILE_ATTRIBUTE_OFFLINE: u32 = 4096;
pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED: u32 = 8192;
pub const FILE_ATTRIBUTE_ENCRYPTED: u32 = 16384;
pub const FILE_ATTRIBUTE_INTEGRITY_STREAM: u32 = 32768;
pub const FILE_ATTRIBUTE_VIRTUAL: u32 = 65536;
pub const FILE_ATTRIBUTE_NO_SCRUB_DATA: u32 = 131072;
pub const FILE_ATTRIBUTE_EA: u32 = 262144;
pub const FILE_ATTRIBUTE_PINNED: u32 = 524288;
pub const FILE_ATTRIBUTE_UNPINNED: u32 = 1048576;
pub const FILE_ATTRIBUTE_RECALL_ON_OPEN: u32 = 262144;
pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS: u32 = 4194304;
pub const TREE_CONNECT_ATTRIBUTE_PRIVACY: u32 = 16384;
pub const TREE_CONNECT_ATTRIBUTE_INTEGRITY: u32 = 32768;
pub const TREE_CONNECT_ATTRIBUTE_GLOBAL: u32 = 4;
pub const TREE_CONNECT_ATTRIBUTE_PINNED: u32 = 2;
pub const FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL: u32 = 536870912;
pub const FILE_NOTIFY_CHANGE_FILE_NAME: u32 = 1;
pub const FILE_NOTIFY_CHANGE_DIR_NAME: u32 = 2;
pub const FILE_NOTIFY_CHANGE_ATTRIBUTES: u32 = 4;
pub const FILE_NOTIFY_CHANGE_SIZE: u32 = 8;
pub const FILE_NOTIFY_CHANGE_LAST_WRITE: u32 = 16;
pub const FILE_NOTIFY_CHANGE_LAST_ACCESS: u32 = 32;
pub const FILE_NOTIFY_CHANGE_CREATION: u32 = 64;
pub const FILE_NOTIFY_CHANGE_SECURITY: u32 = 256;
pub const FILE_ACTION_ADDED: u32 = 1;
pub const FILE_ACTION_REMOVED: u32 = 2;
pub const FILE_ACTION_MODIFIED: u32 = 3;
pub const FILE_ACTION_RENAMED_OLD_NAME: u32 = 4;
pub const FILE_ACTION_RENAMED_NEW_NAME: u32 = 5;
pub const FILE_CASE_SENSITIVE_SEARCH: u32 = 1;
pub const FILE_CASE_PRESERVED_NAMES: u32 = 2;
pub const FILE_UNICODE_ON_DISK: u32 = 4;
pub const FILE_PERSISTENT_ACLS: u32 = 8;
pub const FILE_FILE_COMPRESSION: u32 = 16;
pub const FILE_VOLUME_QUOTAS: u32 = 32;
pub const FILE_SUPPORTS_SPARSE_FILES: u32 = 64;
pub const FILE_SUPPORTS_REPARSE_POINTS: u32 = 128;
pub const FILE_SUPPORTS_REMOTE_STORAGE: u32 = 256;
pub const FILE_RETURNS_CLEANUP_RESULT_INFO: u32 = 512;
pub const FILE_SUPPORTS_POSIX_UNLINK_RENAME: u32 = 1024;
pub const FILE_VOLUME_IS_COMPRESSED: u32 = 32768;
pub const FILE_SUPPORTS_OBJECT_IDS: u32 = 65536;
pub const FILE_SUPPORTS_ENCRYPTION: u32 = 131072;
pub const FILE_NAMED_STREAMS: u32 = 262144;
pub const FILE_READ_ONLY_VOLUME: u32 = 524288;
pub const FILE_SEQUENTIAL_WRITE_ONCE: u32 = 1048576;
pub const FILE_SUPPORTS_TRANSACTIONS: u32 = 2097152;
pub const FILE_SUPPORTS_HARD_LINKS: u32 = 4194304;
pub const FILE_SUPPORTS_EXTENDED_ATTRIBUTES: u32 = 8388608;
pub const FILE_SUPPORTS_OPEN_BY_FILE_ID: u32 = 16777216;
pub const FILE_SUPPORTS_USN_JOURNAL: u32 = 33554432;
pub const FILE_SUPPORTS_INTEGRITY_STREAMS: u32 = 67108864;
pub const FILE_SUPPORTS_BLOCK_REFCOUNTING: u32 = 134217728;
pub const FILE_SUPPORTS_SPARSE_VDL: u32 = 268435456;
pub const FILE_DAX_VOLUME: u32 = 536870912;
pub const FILE_SUPPORTS_GHOSTING: u32 = 1073741824;
pub const FLUSH_FLAGS_FILE_DATA_ONLY: u32 = 1;
pub const FLUSH_FLAGS_NO_SYNC: u32 = 2;
pub const FLUSH_FLAGS_FILE_DATA_SYNC_ONLY: u32 = 4;
pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: u32 = 16384;
pub const IO_REPARSE_TAG_RESERVED_ZERO: u32 = 0;
pub const IO_REPARSE_TAG_RESERVED_ONE: u32 = 1;
pub const IO_REPARSE_TAG_RESERVED_TWO: u32 = 2;
pub const IO_REPARSE_TAG_RESERVED_RANGE: u32 = 2;
pub const IO_REPARSE_TAG_MOUNT_POINT: u32 = 2684354563;
pub const IO_REPARSE_TAG_HSM: u32 = 3221225476;
pub const IO_REPARSE_TAG_HSM2: u32 = 2147483654;
pub const IO_REPARSE_TAG_SIS: u32 = 2147483655;
pub const IO_REPARSE_TAG_WIM: u32 = 2147483656;
pub const IO_REPARSE_TAG_CSV: u32 = 2147483657;
pub const IO_REPARSE_TAG_DFS: u32 = 2147483658;
pub const IO_REPARSE_TAG_SYMLINK: u32 = 2684354572;
pub const IO_REPARSE_TAG_DFSR: u32 = 2147483666;
pub const IO_REPARSE_TAG_DEDUP: u32 = 2147483667;
pub const IO_REPARSE_TAG_NFS: u32 = 2147483668;
pub const IO_REPARSE_TAG_FILE_PLACEHOLDER: u32 = 2147483669;
pub const IO_REPARSE_TAG_WOF: u32 = 2147483671;
pub const IO_REPARSE_TAG_WCI: u32 = 2147483672;
pub const IO_REPARSE_TAG_WCI_1: u32 = 2415923224;
pub const IO_REPARSE_TAG_GLOBAL_REPARSE: u32 = 2684354585;
pub const IO_REPARSE_TAG_CLOUD: u32 = 2415919130;
pub const IO_REPARSE_TAG_CLOUD_1: u32 = 2415923226;
pub const IO_REPARSE_TAG_CLOUD_2: u32 = 2415927322;
pub const IO_REPARSE_TAG_CLOUD_3: u32 = 2415931418;
pub const IO_REPARSE_TAG_CLOUD_4: u32 = 2415935514;
pub const IO_REPARSE_TAG_CLOUD_5: u32 = 2415939610;
pub const IO_REPARSE_TAG_CLOUD_6: u32 = 2415943706;
pub const IO_REPARSE_TAG_CLOUD_7: u32 = 2415947802;
pub const IO_REPARSE_TAG_CLOUD_8: u32 = 2415951898;
pub const IO_REPARSE_TAG_CLOUD_9: u32 = 2415955994;
pub const IO_REPARSE_TAG_CLOUD_A: u32 = 2415960090;
pub const IO_REPARSE_TAG_CLOUD_B: u32 = 2415964186;
pub const IO_REPARSE_TAG_CLOUD_C: u32 = 2415968282;
pub const IO_REPARSE_TAG_CLOUD_D: u32 = 2415972378;
pub const IO_REPARSE_TAG_CLOUD_E: u32 = 2415976474;
pub const IO_REPARSE_TAG_CLOUD_F: u32 = 2415980570;
pub const IO_REPARSE_TAG_CLOUD_MASK: u32 = 61440;
pub const IO_REPARSE_TAG_APPEXECLINK: u32 = 2147483675;
pub const IO_REPARSE_TAG_PROJFS: u32 = 2415919132;
pub const IO_REPARSE_TAG_STORAGE_SYNC: u32 = 2147483678;
pub const IO_REPARSE_TAG_WCI_TOMBSTONE: u32 = 2684354591;
pub const IO_REPARSE_TAG_UNHANDLED: u32 = 2147483680;
pub const IO_REPARSE_TAG_ONEDRIVE: u32 = 2147483681;
pub const IO_REPARSE_TAG_PROJFS_TOMBSTONE: u32 = 2684354594;
pub const IO_REPARSE_TAG_AF_UNIX: u32 = 2147483683;
pub const SCRUB_DATA_INPUT_FLAG_RESUME: u32 = 1;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC: u32 = 2;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA: u32 = 4;
pub const SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY: u32 = 8;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_DATA: u32 = 16;
pub const SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID: u32 = 32;
pub const SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE: u32 = 1;
pub const SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE: u32 = 65536;
pub const SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED: u32 = 131072;
pub const SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED: u32 = 262144;
pub const SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS: u32 = 1;
pub const IO_COMPLETION_MODIFY_STATE: u32 = 2;
pub const IO_COMPLETION_ALL_ACCESS: u32 = 2031619;
pub const IO_QOS_MAX_RESERVATION: u32 = 1000000000;
pub const SMB_CCF_APP_INSTANCE_EA_NAME: &'static [u8; 29usize] = b"ClusteredApplicationInstance\0";
pub const NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR: u32 = 1;
pub const DUPLICATE_CLOSE_SOURCE: u32 = 1;
pub const DUPLICATE_SAME_ACCESS: u32 = 2;
pub const POWERBUTTON_ACTION_INDEX_NOTHING: u32 = 0;
pub const POWERBUTTON_ACTION_INDEX_SLEEP: u32 = 1;
pub const POWERBUTTON_ACTION_INDEX_HIBERNATE: u32 = 2;
pub const POWERBUTTON_ACTION_INDEX_SHUTDOWN: u32 = 3;
pub const POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY: u32 = 4;
pub const POWERBUTTON_ACTION_VALUE_NOTHING: u32 = 0;
pub const POWERBUTTON_ACTION_VALUE_SLEEP: u32 = 2;
pub const POWERBUTTON_ACTION_VALUE_HIBERNATE: u32 = 3;
pub const POWERBUTTON_ACTION_VALUE_SHUTDOWN: u32 = 6;
pub const POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY: u32 = 8;
pub const PERFSTATE_POLICY_CHANGE_IDEAL: u32 = 0;
pub const PERFSTATE_POLICY_CHANGE_SINGLE: u32 = 1;
pub const PERFSTATE_POLICY_CHANGE_ROCKET: u32 = 2;
pub const PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE: u32 = 3;
pub const PERFSTATE_POLICY_CHANGE_DECREASE_MAX: u32 = 2;
pub const PERFSTATE_POLICY_CHANGE_INCREASE_MAX: u32 = 3;
pub const PROCESSOR_THROTTLE_DISABLED: u32 = 0;
pub const PROCESSOR_THROTTLE_ENABLED: u32 = 1;
pub const PROCESSOR_THROTTLE_AUTOMATIC: u32 = 2;
pub const PROCESSOR_PERF_BOOST_POLICY_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_BOOST_POLICY_MAX: u32 = 100;
pub const PROCESSOR_PERF_BOOST_MODE_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_BOOST_MODE_ENABLED: u32 = 1;
pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE: u32 = 2;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED: u32 = 3;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE: u32 = 4;
pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED: u32 = 5;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED: u32 = 6;
pub const PROCESSOR_PERF_BOOST_MODE_MAX: u32 = 6;
pub const PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED: u32 = 1;
pub const PROCESSOR_PERF_PERFORMANCE_PREFERENCE: u32 = 255;
pub const PROCESSOR_PERF_ENERGY_PREFERENCE: u32 = 0;
pub const PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW: u32 = 0;
pub const PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW: u32 = 1270000000;
pub const PROCESSOR_DUTY_CYCLING_DISABLED: u32 = 0;
pub const PROCESSOR_DUTY_CYCLING_ENABLED: u32 = 1;
pub const CORE_PARKING_POLICY_CHANGE_IDEAL: u32 = 0;
pub const CORE_PARKING_POLICY_CHANGE_SINGLE: u32 = 1;
pub const CORE_PARKING_POLICY_CHANGE_ROCKET: u32 = 2;
pub const CORE_PARKING_POLICY_CHANGE_MULTISTEP: u32 = 3;
pub const CORE_PARKING_POLICY_CHANGE_MAX: u32 = 3;
pub const POWER_DEVICE_IDLE_POLICY_PERFORMANCE: u32 = 0;
pub const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE: u32 = 1;
pub const POWER_CONNECTIVITY_IN_STANDBY_DISABLED: u32 = 0;
pub const POWER_CONNECTIVITY_IN_STANDBY_ENABLED: u32 = 1;
pub const POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED: u32 = 2;
pub const POWER_DISCONNECTED_STANDBY_MODE_NORMAL: u32 = 0;
pub const POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE: u32 = 1;
pub const POWER_SYSTEM_MAXIMUM: u32 = 7;
pub const DIAGNOSTIC_REASON_VERSION: u32 = 0;
pub const DIAGNOSTIC_REASON_SIMPLE_STRING: u32 = 1;
pub const DIAGNOSTIC_REASON_DETAILED_STRING: u32 = 2;
pub const DIAGNOSTIC_REASON_NOT_SPECIFIED: u32 = 2147483648;
pub const DIAGNOSTIC_REASON_INVALID_FLAGS: i64 = -2147483656;
pub const POWER_REQUEST_CONTEXT_VERSION: u32 = 0;
pub const POWER_REQUEST_CONTEXT_SIMPLE_STRING: u32 = 1;
pub const POWER_REQUEST_CONTEXT_DETAILED_STRING: u32 = 2;
pub const PDCAP_D0_SUPPORTED: u32 = 1;
pub const PDCAP_D1_SUPPORTED: u32 = 2;
pub const PDCAP_D2_SUPPORTED: u32 = 4;
pub const PDCAP_D3_SUPPORTED: u32 = 8;
pub const PDCAP_WAKE_FROM_D0_SUPPORTED: u32 = 16;
pub const PDCAP_WAKE_FROM_D1_SUPPORTED: u32 = 32;
pub const PDCAP_WAKE_FROM_D2_SUPPORTED: u32 = 64;
pub const PDCAP_WAKE_FROM_D3_SUPPORTED: u32 = 128;
pub const PDCAP_WARM_EJECT_SUPPORTED: u32 = 256;
pub const POWER_SETTING_VALUE_VERSION: u32 = 1;
pub const POWER_PLATFORM_ROLE_V1: u32 = 1;
pub const POWER_PLATFORM_ROLE_V2: u32 = 2;
pub const POWER_PLATFORM_ROLE_VERSION: u32 = 2;
pub const PROC_IDLE_BUCKET_COUNT: u32 = 6;
pub const PROC_IDLE_BUCKET_COUNT_EX: u32 = 16;
pub const ACPI_PPM_SOFTWARE_ALL: u32 = 252;
pub const ACPI_PPM_SOFTWARE_ANY: u32 = 253;
pub const ACPI_PPM_HARDWARE_ALL: u32 = 254;
pub const MS_PPM_SOFTWARE_ALL: u32 = 1;
pub const PPM_FIRMWARE_ACPI1C2: u32 = 1;
pub const PPM_FIRMWARE_ACPI1C3: u32 = 2;
pub const PPM_FIRMWARE_ACPI1TSTATES: u32 = 4;
pub const PPM_FIRMWARE_CST: u32 = 8;
pub const PPM_FIRMWARE_CSD: u32 = 16;
pub const PPM_FIRMWARE_PCT: u32 = 32;
pub const PPM_FIRMWARE_PSS: u32 = 64;
pub const PPM_FIRMWARE_XPSS: u32 = 128;
pub const PPM_FIRMWARE_PPC: u32 = 256;
pub const PPM_FIRMWARE_PSD: u32 = 512;
pub const PPM_FIRMWARE_PTC: u32 = 1024;
pub const PPM_FIRMWARE_TSS: u32 = 2048;
pub const PPM_FIRMWARE_TPC: u32 = 4096;
pub const PPM_FIRMWARE_TSD: u32 = 8192;
pub const PPM_FIRMWARE_PCCH: u32 = 16384;
pub const PPM_FIRMWARE_PCCP: u32 = 32768;
pub const PPM_FIRMWARE_OSC: u32 = 65536;
pub const PPM_FIRMWARE_PDC: u32 = 131072;
pub const PPM_FIRMWARE_CPC: u32 = 262144;
pub const PPM_FIRMWARE_LPI: u32 = 524288;
pub const PPM_PERFORMANCE_IMPLEMENTATION_NONE: u32 = 0;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PSTATES: u32 = 1;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PCCV1: u32 = 2;
pub const PPM_PERFORMANCE_IMPLEMENTATION_CPPC: u32 = 3;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PEP: u32 = 4;
pub const PPM_IDLE_IMPLEMENTATION_NONE: u32 = 0;
pub const PPM_IDLE_IMPLEMENTATION_CSTATES: u32 = 1;
pub const PPM_IDLE_IMPLEMENTATION_PEP: u32 = 2;
pub const PPM_IDLE_IMPLEMENTATION_MICROPEP: u32 = 3;
pub const PPM_IDLE_IMPLEMENTATION_LPISTATES: u32 = 4;
pub const POWER_ACTION_QUERY_ALLOWED: u32 = 1;
pub const POWER_ACTION_UI_ALLOWED: u32 = 2;
pub const POWER_ACTION_OVERRIDE_APPS: u32 = 4;
pub const POWER_ACTION_HIBERBOOT: u32 = 8;
pub const POWER_ACTION_USER_NOTIFY: u32 = 16;
pub const POWER_ACTION_DOZE_TO_HIBERNATE: u32 = 32;
pub const POWER_ACTION_ACPI_CRITICAL: u32 = 16777216;
pub const POWER_ACTION_ACPI_USER_NOTIFY: u32 = 33554432;
pub const POWER_ACTION_DIRECTED_DRIPS: u32 = 67108864;
pub const POWER_ACTION_PSEUDO_TRANSITION: u32 = 134217728;
pub const POWER_ACTION_LIGHTEST_FIRST: u32 = 268435456;
pub const POWER_ACTION_LOCK_CONSOLE: u32 = 536870912;
pub const POWER_ACTION_DISABLE_WAKES: u32 = 1073741824;
pub const POWER_ACTION_CRITICAL: u32 = 2147483648;
pub const POWER_LEVEL_USER_NOTIFY_TEXT: u32 = 1;
pub const POWER_LEVEL_USER_NOTIFY_SOUND: u32 = 2;
pub const POWER_LEVEL_USER_NOTIFY_EXEC: u32 = 4;
pub const POWER_USER_NOTIFY_BUTTON: u32 = 8;
pub const POWER_USER_NOTIFY_SHUTDOWN: u32 = 16;
pub const POWER_USER_NOTIFY_FORCED_SHUTDOWN: u32 = 32;
pub const POWER_FORCE_TRIGGER_RESET: u32 = 2147483648;
pub const BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK: u32 = 7;
pub const BATTERY_DISCHARGE_FLAGS_ENABLE: u32 = 2147483648;
pub const NUM_DISCHARGE_POLICIES: u32 = 4;
pub const DISCHARGE_POLICY_CRITICAL: u32 = 0;
pub const DISCHARGE_POLICY_LOW: u32 = 1;
pub const PROCESSOR_IDLESTATE_POLICY_COUNT: u32 = 3;
pub const PO_THROTTLE_NONE: u32 = 0;
pub const PO_THROTTLE_CONSTANT: u32 = 1;
pub const PO_THROTTLE_DEGRADE: u32 = 2;
pub const PO_THROTTLE_ADAPTIVE: u32 = 3;
pub const PO_THROTTLE_MAXIMUM: u32 = 4;
pub const HIBERFILE_TYPE_NONE: u32 = 0;
pub const HIBERFILE_TYPE_REDUCED: u32 = 1;
pub const HIBERFILE_TYPE_FULL: u32 = 2;
pub const HIBERFILE_TYPE_MAX: u32 = 3;
pub const IMAGE_DOS_SIGNATURE: u32 = 23117;
pub const IMAGE_OS2_SIGNATURE: u32 = 17742;
pub const IMAGE_OS2_SIGNATURE_LE: u32 = 17740;
pub const IMAGE_VXD_SIGNATURE: u32 = 17740;
pub const IMAGE_NT_SIGNATURE: u32 = 17744;
pub const IMAGE_SIZEOF_FILE_HEADER: u32 = 20;
pub const IMAGE_FILE_RELOCS_STRIPPED: u32 = 1;
pub const IMAGE_FILE_EXECUTABLE_IMAGE: u32 = 2;
pub const IMAGE_FILE_LINE_NUMS_STRIPPED: u32 = 4;
pub const IMAGE_FILE_LOCAL_SYMS_STRIPPED: u32 = 8;
pub const IMAGE_FILE_AGGRESIVE_WS_TRIM: u32 = 16;
pub const IMAGE_FILE_LARGE_ADDRESS_AWARE: u32 = 32;
pub const IMAGE_FILE_BYTES_REVERSED_LO: u32 = 128;
pub const IMAGE_FILE_32BIT_MACHINE: u32 = 256;
pub const IMAGE_FILE_DEBUG_STRIPPED: u32 = 512;
pub const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: u32 = 1024;
pub const IMAGE_FILE_NET_RUN_FROM_SWAP: u32 = 2048;
pub const IMAGE_FILE_SYSTEM: u32 = 4096;
pub const IMAGE_FILE_DLL: u32 = 8192;
pub const IMAGE_FILE_UP_SYSTEM_ONLY: u32 = 16384;
pub const IMAGE_FILE_BYTES_REVERSED_HI: u32 = 32768;
pub const IMAGE_FILE_MACHINE_UNKNOWN: u32 = 0;
pub const IMAGE_FILE_MACHINE_TARGET_HOST: u32 = 1;
pub const IMAGE_FILE_MACHINE_I386: u32 = 332;
pub const IMAGE_FILE_MACHINE_R3000: u32 = 354;
pub const IMAGE_FILE_MACHINE_R4000: u32 = 358;
pub const IMAGE_FILE_MACHINE_R10000: u32 = 360;
pub const IMAGE_FILE_MACHINE_WCEMIPSV2: u32 = 361;
pub const IMAGE_FILE_MACHINE_ALPHA: u32 = 388;
pub const IMAGE_FILE_MACHINE_SH3: u32 = 418;
pub const IMAGE_FILE_MACHINE_SH3DSP: u32 = 419;
pub const IMAGE_FILE_MACHINE_SH3E: u32 = 420;
pub const IMAGE_FILE_MACHINE_SH4: u32 = 422;
pub const IMAGE_FILE_MACHINE_SH5: u32 = 424;
pub const IMAGE_FILE_MACHINE_ARM: u32 = 448;
pub const IMAGE_FILE_MACHINE_THUMB: u32 = 450;
pub const IMAGE_FILE_MACHINE_ARMNT: u32 = 452;
pub const IMAGE_FILE_MACHINE_AM33: u32 = 467;
pub const IMAGE_FILE_MACHINE_POWERPC: u32 = 496;
pub const IMAGE_FILE_MACHINE_POWERPCFP: u32 = 497;
pub const IMAGE_FILE_MACHINE_IA64: u32 = 512;
pub const IMAGE_FILE_MACHINE_MIPS16: u32 = 614;
pub const IMAGE_FILE_MACHINE_ALPHA64: u32 = 644;
pub const IMAGE_FILE_MACHINE_MIPSFPU: u32 = 870;
pub const IMAGE_FILE_MACHINE_MIPSFPU16: u32 = 1126;
pub const IMAGE_FILE_MACHINE_AXP64: u32 = 644;
pub const IMAGE_FILE_MACHINE_TRICORE: u32 = 1312;
pub const IMAGE_FILE_MACHINE_CEF: u32 = 3311;
pub const IMAGE_FILE_MACHINE_EBC: u32 = 3772;
pub const IMAGE_FILE_MACHINE_AMD64: u32 = 34404;
pub const IMAGE_FILE_MACHINE_M32R: u32 = 36929;
pub const IMAGE_FILE_MACHINE_ARM64: u32 = 43620;
pub const IMAGE_FILE_MACHINE_CEE: u32 = 49390;
pub const IMAGE_NUMBEROF_DIRECTORY_ENTRIES: u32 = 16;
pub const IMAGE_NT_OPTIONAL_HDR32_MAGIC: u32 = 267;
pub const IMAGE_NT_OPTIONAL_HDR64_MAGIC: u32 = 523;
pub const IMAGE_ROM_OPTIONAL_HDR_MAGIC: u32 = 263;
pub const IMAGE_NT_OPTIONAL_HDR_MAGIC: u32 = 523;
pub const IMAGE_SUBSYSTEM_UNKNOWN: u32 = 0;
pub const IMAGE_SUBSYSTEM_NATIVE: u32 = 1;
pub const IMAGE_SUBSYSTEM_WINDOWS_GUI: u32 = 2;
pub const IMAGE_SUBSYSTEM_WINDOWS_CUI: u32 = 3;
pub const IMAGE_SUBSYSTEM_OS2_CUI: u32 = 5;
pub const IMAGE_SUBSYSTEM_POSIX_CUI: u32 = 7;
pub const IMAGE_SUBSYSTEM_NATIVE_WINDOWS: u32 = 8;
pub const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: u32 = 9;
pub const IMAGE_SUBSYSTEM_EFI_APPLICATION: u32 = 10;
pub const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: u32 = 11;
pub const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: u32 = 12;
pub const IMAGE_SUBSYSTEM_EFI_ROM: u32 = 13;
pub const IMAGE_SUBSYSTEM_XBOX: u32 = 14;
pub const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION: u32 = 16;
pub const IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG: u32 = 17;
pub const IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA: u32 = 32;
pub const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE: u32 = 64;
pub const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY: u32 = 128;
pub const IMAGE_DLLCHARACTERISTICS_NX_COMPAT: u32 = 256;
pub const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION: u32 = 512;
pub const IMAGE_DLLCHARACTERISTICS_NO_SEH: u32 = 1024;
pub const IMAGE_DLLCHARACTERISTICS_NO_BIND: u32 = 2048;
pub const IMAGE_DLLCHARACTERISTICS_APPCONTAINER: u32 = 4096;
pub const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER: u32 = 8192;
pub const IMAGE_DLLCHARACTERISTICS_GUARD_CF: u32 = 16384;
pub const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE: u32 = 32768;
pub const IMAGE_DIRECTORY_ENTRY_EXPORT: u32 = 0;
pub const IMAGE_DIRECTORY_ENTRY_IMPORT: u32 = 1;
pub const IMAGE_DIRECTORY_ENTRY_RESOURCE: u32 = 2;
pub const IMAGE_DIRECTORY_ENTRY_EXCEPTION: u32 = 3;
pub const IMAGE_DIRECTORY_ENTRY_SECURITY: u32 = 4;
pub const IMAGE_DIRECTORY_ENTRY_BASERELOC: u32 = 5;
pub const IMAGE_DIRECTORY_ENTRY_DEBUG: u32 = 6;
pub const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE: u32 = 7;
pub const IMAGE_DIRECTORY_ENTRY_GLOBALPTR: u32 = 8;
pub const IMAGE_DIRECTORY_ENTRY_TLS: u32 = 9;
pub const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG: u32 = 10;
pub const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT: u32 = 11;
pub const IMAGE_DIRECTORY_ENTRY_IAT: u32 = 12;
pub const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT: u32 = 13;
pub const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR: u32 = 14;
pub const IMAGE_SIZEOF_SHORT_NAME: u32 = 8;
pub const IMAGE_SIZEOF_SECTION_HEADER: u32 = 40;
pub const IMAGE_SCN_TYPE_NO_PAD: u32 = 8;
pub const IMAGE_SCN_CNT_CODE: u32 = 32;
pub const IMAGE_SCN_CNT_INITIALIZED_DATA: u32 = 64;
pub const IMAGE_SCN_CNT_UNINITIALIZED_DATA: u32 = 128;
pub const IMAGE_SCN_LNK_OTHER: u32 = 256;
pub const IMAGE_SCN_LNK_INFO: u32 = 512;
pub const IMAGE_SCN_LNK_REMOVE: u32 = 2048;
pub const IMAGE_SCN_LNK_COMDAT: u32 = 4096;
pub const IMAGE_SCN_NO_DEFER_SPEC_EXC: u32 = 16384;
pub const IMAGE_SCN_GPREL: u32 = 32768;
pub const IMAGE_SCN_MEM_FARDATA: u32 = 32768;
pub const IMAGE_SCN_MEM_PURGEABLE: u32 = 131072;
pub const IMAGE_SCN_MEM_16BIT: u32 = 131072;
pub const IMAGE_SCN_MEM_LOCKED: u32 = 262144;
pub const IMAGE_SCN_MEM_PRELOAD: u32 = 524288;
pub const IMAGE_SCN_ALIGN_1BYTES: u32 = 1048576;
pub const IMAGE_SCN_ALIGN_2BYTES: u32 = 2097152;
pub const IMAGE_SCN_ALIGN_4BYTES: u32 = 3145728;
pub const IMAGE_SCN_ALIGN_8BYTES: u32 = 4194304;
pub const IMAGE_SCN_ALIGN_16BYTES: u32 = 5242880;
pub const IMAGE_SCN_ALIGN_32BYTES: u32 = 6291456;
pub const IMAGE_SCN_ALIGN_64BYTES: u32 = 7340032;
pub const IMAGE_SCN_ALIGN_128BYTES: u32 = 8388608;
pub const IMAGE_SCN_ALIGN_256BYTES: u32 = 9437184;
pub const IMAGE_SCN_ALIGN_512BYTES: u32 = 10485760;
pub const IMAGE_SCN_ALIGN_1024BYTES: u32 = 11534336;
pub const IMAGE_SCN_ALIGN_2048BYTES: u32 = 12582912;
pub const IMAGE_SCN_ALIGN_4096BYTES: u32 = 13631488;
pub const IMAGE_SCN_ALIGN_8192BYTES: u32 = 14680064;
pub const IMAGE_SCN_ALIGN_MASK: u32 = 15728640;
pub const IMAGE_SCN_LNK_NRELOC_OVFL: u32 = 16777216;
pub const IMAGE_SCN_MEM_DISCARDABLE: u32 = 33554432;
pub const IMAGE_SCN_MEM_NOT_CACHED: u32 = 67108864;
pub const IMAGE_SCN_MEM_NOT_PAGED: u32 = 134217728;
pub const IMAGE_SCN_MEM_SHARED: u32 = 268435456;
pub const IMAGE_SCN_MEM_EXECUTE: u32 = 536870912;
pub const IMAGE_SCN_MEM_READ: u32 = 1073741824;
pub const IMAGE_SCN_MEM_WRITE: u32 = 2147483648;
pub const IMAGE_SCN_SCALE_INDEX: u32 = 1;
pub const IMAGE_SIZEOF_SYMBOL: u32 = 18;
pub const IMAGE_SYM_SECTION_MAX: u32 = 65279;
pub const IMAGE_SYM_SECTION_MAX_EX: u32 = 2147483647;
pub const IMAGE_SYM_TYPE_NULL: u32 = 0;
pub const IMAGE_SYM_TYPE_VOID: u32 = 1;
pub const IMAGE_SYM_TYPE_CHAR: u32 = 2;
pub const IMAGE_SYM_TYPE_SHORT: u32 = 3;
pub const IMAGE_SYM_TYPE_INT: u32 = 4;
pub const IMAGE_SYM_TYPE_LONG: u32 = 5;
pub const IMAGE_SYM_TYPE_FLOAT: u32 = 6;
pub const IMAGE_SYM_TYPE_DOUBLE: u32 = 7;
pub const IMAGE_SYM_TYPE_STRUCT: u32 = 8;
pub const IMAGE_SYM_TYPE_UNION: u32 = 9;
pub const IMAGE_SYM_TYPE_ENUM: u32 = 10;
pub const IMAGE_SYM_TYPE_MOE: u32 = 11;
pub const IMAGE_SYM_TYPE_BYTE: u32 = 12;
pub const IMAGE_SYM_TYPE_WORD: u32 = 13;
pub const IMAGE_SYM_TYPE_UINT: u32 = 14;
pub const IMAGE_SYM_TYPE_DWORD: u32 = 15;
pub const IMAGE_SYM_TYPE_PCODE: u32 = 32768;
pub const IMAGE_SYM_DTYPE_NULL: u32 = 0;
pub const IMAGE_SYM_DTYPE_POINTER: u32 = 1;
pub const IMAGE_SYM_DTYPE_FUNCTION: u32 = 2;
pub const IMAGE_SYM_DTYPE_ARRAY: u32 = 3;
pub const IMAGE_SYM_CLASS_NULL: u32 = 0;
pub const IMAGE_SYM_CLASS_AUTOMATIC: u32 = 1;
pub const IMAGE_SYM_CLASS_EXTERNAL: u32 = 2;
pub const IMAGE_SYM_CLASS_STATIC: u32 = 3;
pub const IMAGE_SYM_CLASS_REGISTER: u32 = 4;
pub const IMAGE_SYM_CLASS_EXTERNAL_DEF: u32 = 5;
pub const IMAGE_SYM_CLASS_LABEL: u32 = 6;
pub const IMAGE_SYM_CLASS_UNDEFINED_LABEL: u32 = 7;
pub const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT: u32 = 8;
pub const IMAGE_SYM_CLASS_ARGUMENT: u32 = 9;
pub const IMAGE_SYM_CLASS_STRUCT_TAG: u32 = 10;
pub const IMAGE_SYM_CLASS_MEMBER_OF_UNION: u32 = 11;
pub const IMAGE_SYM_CLASS_UNION_TAG: u32 = 12;
pub const IMAGE_SYM_CLASS_TYPE_DEFINITION: u32 = 13;
pub const IMAGE_SYM_CLASS_UNDEFINED_STATIC: u32 = 14;
pub const IMAGE_SYM_CLASS_ENUM_TAG: u32 = 15;
pub const IMAGE_SYM_CLASS_MEMBER_OF_ENUM: u32 = 16;
pub const IMAGE_SYM_CLASS_REGISTER_PARAM: u32 = 17;
pub const IMAGE_SYM_CLASS_BIT_FIELD: u32 = 18;
pub const IMAGE_SYM_CLASS_FAR_EXTERNAL: u32 = 68;
pub const IMAGE_SYM_CLASS_BLOCK: u32 = 100;
pub const IMAGE_SYM_CLASS_FUNCTION: u32 = 101;
pub const IMAGE_SYM_CLASS_END_OF_STRUCT: u32 = 102;
pub const IMAGE_SYM_CLASS_FILE: u32 = 103;
pub const IMAGE_SYM_CLASS_SECTION: u32 = 104;
pub const IMAGE_SYM_CLASS_WEAK_EXTERNAL: u32 = 105;
pub const IMAGE_SYM_CLASS_CLR_TOKEN: u32 = 107;
pub const N_BTMASK: u32 = 15;
pub const N_TMASK: u32 = 48;
pub const N_TMASK1: u32 = 192;
pub const N_TMASK2: u32 = 240;
pub const N_BTSHFT: u32 = 4;
pub const N_TSHIFT: u32 = 2;
pub const IMAGE_COMDAT_SELECT_NODUPLICATES: u32 = 1;
pub const IMAGE_COMDAT_SELECT_ANY: u32 = 2;
pub const IMAGE_COMDAT_SELECT_SAME_SIZE: u32 = 3;
pub const IMAGE_COMDAT_SELECT_EXACT_MATCH: u32 = 4;
pub const IMAGE_COMDAT_SELECT_ASSOCIATIVE: u32 = 5;
pub const IMAGE_COMDAT_SELECT_LARGEST: u32 = 6;
pub const IMAGE_COMDAT_SELECT_NEWEST: u32 = 7;
pub const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY: u32 = 1;
pub const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY: u32 = 2;
pub const IMAGE_WEAK_EXTERN_SEARCH_ALIAS: u32 = 3;
pub const IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY: u32 = 4;
pub const IMAGE_REL_I386_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_I386_DIR16: u32 = 1;
pub const IMAGE_REL_I386_REL16: u32 = 2;
pub const IMAGE_REL_I386_DIR32: u32 = 6;
pub const IMAGE_REL_I386_DIR32NB: u32 = 7;
pub const IMAGE_REL_I386_SEG12: u32 = 9;
pub const IMAGE_REL_I386_SECTION: u32 = 10;
pub const IMAGE_REL_I386_SECREL: u32 = 11;
pub const IMAGE_REL_I386_TOKEN: u32 = 12;
pub const IMAGE_REL_I386_SECREL7: u32 = 13;
pub const IMAGE_REL_I386_REL32: u32 = 20;
pub const IMAGE_REL_MIPS_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_MIPS_REFHALF: u32 = 1;
pub const IMAGE_REL_MIPS_REFWORD: u32 = 2;
pub const IMAGE_REL_MIPS_JMPADDR: u32 = 3;
pub const IMAGE_REL_MIPS_REFHI: u32 = 4;
pub const IMAGE_REL_MIPS_REFLO: u32 = 5;
pub const IMAGE_REL_MIPS_GPREL: u32 = 6;
pub const IMAGE_REL_MIPS_LITERAL: u32 = 7;
pub const IMAGE_REL_MIPS_SECTION: u32 = 10;
pub const IMAGE_REL_MIPS_SECREL: u32 = 11;
pub const IMAGE_REL_MIPS_SECRELLO: u32 = 12;
pub const IMAGE_REL_MIPS_SECRELHI: u32 = 13;
pub const IMAGE_REL_MIPS_TOKEN: u32 = 14;
pub const IMAGE_REL_MIPS_JMPADDR16: u32 = 16;
pub const IMAGE_REL_MIPS_REFWORDNB: u32 = 34;
pub const IMAGE_REL_MIPS_PAIR: u32 = 37;
pub const IMAGE_REL_ALPHA_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ALPHA_REFLONG: u32 = 1;
pub const IMAGE_REL_ALPHA_REFQUAD: u32 = 2;
pub const IMAGE_REL_ALPHA_GPREL32: u32 = 3;
pub const IMAGE_REL_ALPHA_LITERAL: u32 = 4;
pub const IMAGE_REL_ALPHA_LITUSE: u32 = 5;
pub const IMAGE_REL_ALPHA_GPDISP: u32 = 6;
pub const IMAGE_REL_ALPHA_BRADDR: u32 = 7;
pub const IMAGE_REL_ALPHA_HINT: u32 = 8;
pub const IMAGE_REL_ALPHA_INLINE_REFLONG: u32 = 9;
pub const IMAGE_REL_ALPHA_REFHI: u32 = 10;
pub const IMAGE_REL_ALPHA_REFLO: u32 = 11;
pub const IMAGE_REL_ALPHA_PAIR: u32 = 12;
pub const IMAGE_REL_ALPHA_MATCH: u32 = 13;
pub const IMAGE_REL_ALPHA_SECTION: u32 = 14;
pub const IMAGE_REL_ALPHA_SECREL: u32 = 15;
pub const IMAGE_REL_ALPHA_REFLONGNB: u32 = 16;
pub const IMAGE_REL_ALPHA_SECRELLO: u32 = 17;
pub const IMAGE_REL_ALPHA_SECRELHI: u32 = 18;
pub const IMAGE_REL_ALPHA_REFQ3: u32 = 19;
pub const IMAGE_REL_ALPHA_REFQ2: u32 = 20;
pub const IMAGE_REL_ALPHA_REFQ1: u32 = 21;
pub const IMAGE_REL_ALPHA_GPRELLO: u32 = 22;
pub const IMAGE_REL_ALPHA_GPRELHI: u32 = 23;
pub const IMAGE_REL_PPC_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_PPC_ADDR64: u32 = 1;
pub const IMAGE_REL_PPC_ADDR32: u32 = 2;
pub const IMAGE_REL_PPC_ADDR24: u32 = 3;
pub const IMAGE_REL_PPC_ADDR16: u32 = 4;
pub const IMAGE_REL_PPC_ADDR14: u32 = 5;
pub const IMAGE_REL_PPC_REL24: u32 = 6;
pub const IMAGE_REL_PPC_REL14: u32 = 7;
pub const IMAGE_REL_PPC_TOCREL16: u32 = 8;
pub const IMAGE_REL_PPC_TOCREL14: u32 = 9;
pub const IMAGE_REL_PPC_ADDR32NB: u32 = 10;
pub const IMAGE_REL_PPC_SECREL: u32 = 11;
pub const IMAGE_REL_PPC_SECTION: u32 = 12;
pub const IMAGE_REL_PPC_IFGLUE: u32 = 13;
pub const IMAGE_REL_PPC_IMGLUE: u32 = 14;
pub const IMAGE_REL_PPC_SECREL16: u32 = 15;
pub const IMAGE_REL_PPC_REFHI: u32 = 16;
pub const IMAGE_REL_PPC_REFLO: u32 = 17;
pub const IMAGE_REL_PPC_PAIR: u32 = 18;
pub const IMAGE_REL_PPC_SECRELLO: u32 = 19;
pub const IMAGE_REL_PPC_SECRELHI: u32 = 20;
pub const IMAGE_REL_PPC_GPREL: u32 = 21;
pub const IMAGE_REL_PPC_TOKEN: u32 = 22;
pub const IMAGE_REL_PPC_TYPEMASK: u32 = 255;
pub const IMAGE_REL_PPC_NEG: u32 = 256;
pub const IMAGE_REL_PPC_BRTAKEN: u32 = 512;
pub const IMAGE_REL_PPC_BRNTAKEN: u32 = 1024;
pub const IMAGE_REL_PPC_TOCDEFN: u32 = 2048;
pub const IMAGE_REL_SH3_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_SH3_DIRECT16: u32 = 1;
pub const IMAGE_REL_SH3_DIRECT32: u32 = 2;
pub const IMAGE_REL_SH3_DIRECT8: u32 = 3;
pub const IMAGE_REL_SH3_DIRECT8_WORD: u32 = 4;
pub const IMAGE_REL_SH3_DIRECT8_LONG: u32 = 5;
pub const IMAGE_REL_SH3_DIRECT4: u32 = 6;
pub const IMAGE_REL_SH3_DIRECT4_WORD: u32 = 7;
pub const IMAGE_REL_SH3_DIRECT4_LONG: u32 = 8;
pub const IMAGE_REL_SH3_PCREL8_WORD: u32 = 9;
pub const IMAGE_REL_SH3_PCREL8_LONG: u32 = 10;
pub const IMAGE_REL_SH3_PCREL12_WORD: u32 = 11;
pub const IMAGE_REL_SH3_STARTOF_SECTION: u32 = 12;
pub const IMAGE_REL_SH3_SIZEOF_SECTION: u32 = 13;
pub const IMAGE_REL_SH3_SECTION: u32 = 14;
pub const IMAGE_REL_SH3_SECREL: u32 = 15;
pub const IMAGE_REL_SH3_DIRECT32_NB: u32 = 16;
pub const IMAGE_REL_SH3_GPREL4_LONG: u32 = 17;
pub const IMAGE_REL_SH3_TOKEN: u32 = 18;
pub const IMAGE_REL_SHM_PCRELPT: u32 = 19;
pub const IMAGE_REL_SHM_REFLO: u32 = 20;
pub const IMAGE_REL_SHM_REFHALF: u32 = 21;
pub const IMAGE_REL_SHM_RELLO: u32 = 22;
pub const IMAGE_REL_SHM_RELHALF: u32 = 23;
pub const IMAGE_REL_SHM_PAIR: u32 = 24;
pub const IMAGE_REL_SH_NOMODE: u32 = 32768;
pub const IMAGE_REL_ARM_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ARM_ADDR32: u32 = 1;
pub const IMAGE_REL_ARM_ADDR32NB: u32 = 2;
pub const IMAGE_REL_ARM_BRANCH24: u32 = 3;
pub const IMAGE_REL_ARM_BRANCH11: u32 = 4;
pub const IMAGE_REL_ARM_TOKEN: u32 = 5;
pub const IMAGE_REL_ARM_GPREL12: u32 = 6;
pub const IMAGE_REL_ARM_GPREL7: u32 = 7;
pub const IMAGE_REL_ARM_BLX24: u32 = 8;
pub const IMAGE_REL_ARM_BLX11: u32 = 9;
pub const IMAGE_REL_ARM_SECTION: u32 = 14;
pub const IMAGE_REL_ARM_SECREL: u32 = 15;
pub const IMAGE_REL_ARM_MOV32A: u32 = 16;
pub const IMAGE_REL_ARM_MOV32: u32 = 16;
pub const IMAGE_REL_ARM_MOV32T: u32 = 17;
pub const IMAGE_REL_THUMB_MOV32: u32 = 17;
pub const IMAGE_REL_ARM_BRANCH20T: u32 = 18;
pub const IMAGE_REL_THUMB_BRANCH20: u32 = 18;
pub const IMAGE_REL_ARM_BRANCH24T: u32 = 20;
pub const IMAGE_REL_THUMB_BRANCH24: u32 = 20;
pub const IMAGE_REL_ARM_BLX23T: u32 = 21;
pub const IMAGE_REL_THUMB_BLX23: u32 = 21;
pub const IMAGE_REL_AM_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_AM_ADDR32: u32 = 1;
pub const IMAGE_REL_AM_ADDR32NB: u32 = 2;
pub const IMAGE_REL_AM_CALL32: u32 = 3;
pub const IMAGE_REL_AM_FUNCINFO: u32 = 4;
pub const IMAGE_REL_AM_REL32_1: u32 = 5;
pub const IMAGE_REL_AM_REL32_2: u32 = 6;
pub const IMAGE_REL_AM_SECREL: u32 = 7;
pub const IMAGE_REL_AM_SECTION: u32 = 8;
pub const IMAGE_REL_AM_TOKEN: u32 = 9;
pub const IMAGE_REL_ARM64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ARM64_ADDR32: u32 = 1;
pub const IMAGE_REL_ARM64_ADDR32NB: u32 = 2;
pub const IMAGE_REL_ARM64_BRANCH26: u32 = 3;
pub const IMAGE_REL_ARM64_PAGEBASE_REL21: u32 = 4;
pub const IMAGE_REL_ARM64_REL21: u32 = 5;
pub const IMAGE_REL_ARM64_PAGEOFFSET_12A: u32 = 6;
pub const IMAGE_REL_ARM64_PAGEOFFSET_12L: u32 = 7;
pub const IMAGE_REL_ARM64_SECREL: u32 = 8;
pub const IMAGE_REL_ARM64_SECREL_LOW12A: u32 = 9;
pub const IMAGE_REL_ARM64_SECREL_HIGH12A: u32 = 10;
pub const IMAGE_REL_ARM64_SECREL_LOW12L: u32 = 11;
pub const IMAGE_REL_ARM64_TOKEN: u32 = 12;
pub const IMAGE_REL_ARM64_SECTION: u32 = 13;
pub const IMAGE_REL_ARM64_ADDR64: u32 = 14;
pub const IMAGE_REL_ARM64_BRANCH19: u32 = 15;
pub const IMAGE_REL_AMD64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_AMD64_ADDR64: u32 = 1;
pub const IMAGE_REL_AMD64_ADDR32: u32 = 2;
pub const IMAGE_REL_AMD64_ADDR32NB: u32 = 3;
pub const IMAGE_REL_AMD64_REL32: u32 = 4;
pub const IMAGE_REL_AMD64_REL32_1: u32 = 5;
pub const IMAGE_REL_AMD64_REL32_2: u32 = 6;
pub const IMAGE_REL_AMD64_REL32_3: u32 = 7;
pub const IMAGE_REL_AMD64_REL32_4: u32 = 8;
pub const IMAGE_REL_AMD64_REL32_5: u32 = 9;
pub const IMAGE_REL_AMD64_SECTION: u32 = 10;
pub const IMAGE_REL_AMD64_SECREL: u32 = 11;
pub const IMAGE_REL_AMD64_SECREL7: u32 = 12;
pub const IMAGE_REL_AMD64_TOKEN: u32 = 13;
pub const IMAGE_REL_AMD64_SREL32: u32 = 14;
pub const IMAGE_REL_AMD64_PAIR: u32 = 15;
pub const IMAGE_REL_AMD64_SSPAN32: u32 = 16;
pub const IMAGE_REL_AMD64_EHANDLER: u32 = 17;
pub const IMAGE_REL_AMD64_IMPORT_BR: u32 = 18;
pub const IMAGE_REL_AMD64_IMPORT_CALL: u32 = 19;
pub const IMAGE_REL_AMD64_CFG_BR: u32 = 20;
pub const IMAGE_REL_AMD64_CFG_BR_REX: u32 = 21;
pub const IMAGE_REL_AMD64_CFG_CALL: u32 = 22;
pub const IMAGE_REL_AMD64_INDIR_BR: u32 = 23;
pub const IMAGE_REL_AMD64_INDIR_BR_REX: u32 = 24;
pub const IMAGE_REL_AMD64_INDIR_CALL: u32 = 25;
pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST: u32 = 32;
pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST: u32 = 47;
pub const IMAGE_REL_IA64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_IA64_IMM14: u32 = 1;
pub const IMAGE_REL_IA64_IMM22: u32 = 2;
pub const IMAGE_REL_IA64_IMM64: u32 = 3;
pub const IMAGE_REL_IA64_DIR32: u32 = 4;
pub const IMAGE_REL_IA64_DIR64: u32 = 5;
pub const IMAGE_REL_IA64_PCREL21B: u32 = 6;
pub const IMAGE_REL_IA64_PCREL21M: u32 = 7;
pub const IMAGE_REL_IA64_PCREL21F: u32 = 8;
pub const IMAGE_REL_IA64_GPREL22: u32 = 9;
pub const IMAGE_REL_IA64_LTOFF22: u32 = 10;
pub const IMAGE_REL_IA64_SECTION: u32 = 11;
pub const IMAGE_REL_IA64_SECREL22: u32 = 12;
pub const IMAGE_REL_IA64_SECREL64I: u32 = 13;
pub const IMAGE_REL_IA64_SECREL32: u32 = 14;
pub const IMAGE_REL_IA64_DIR32NB: u32 = 16;
pub const IMAGE_REL_IA64_SREL14: u32 = 17;
pub const IMAGE_REL_IA64_SREL22: u32 = 18;
pub const IMAGE_REL_IA64_SREL32: u32 = 19;
pub const IMAGE_REL_IA64_UREL32: u32 = 20;
pub const IMAGE_REL_IA64_PCREL60X: u32 = 21;
pub const IMAGE_REL_IA64_PCREL60B: u32 = 22;
pub const IMAGE_REL_IA64_PCREL60F: u32 = 23;
pub const IMAGE_REL_IA64_PCREL60I: u32 = 24;
pub const IMAGE_REL_IA64_PCREL60M: u32 = 25;
pub const IMAGE_REL_IA64_IMMGPREL64: u32 = 26;
pub const IMAGE_REL_IA64_TOKEN: u32 = 27;
pub const IMAGE_REL_IA64_GPREL32: u32 = 28;
pub const IMAGE_REL_IA64_ADDEND: u32 = 31;
pub const IMAGE_REL_CEF_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_CEF_ADDR32: u32 = 1;
pub const IMAGE_REL_CEF_ADDR64: u32 = 2;
pub const IMAGE_REL_CEF_ADDR32NB: u32 = 3;
pub const IMAGE_REL_CEF_SECTION: u32 = 4;
pub const IMAGE_REL_CEF_SECREL: u32 = 5;
pub const IMAGE_REL_CEF_TOKEN: u32 = 6;
pub const IMAGE_REL_CEE_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_CEE_ADDR32: u32 = 1;
pub const IMAGE_REL_CEE_ADDR64: u32 = 2;
pub const IMAGE_REL_CEE_ADDR32NB: u32 = 3;
pub const IMAGE_REL_CEE_SECTION: u32 = 4;
pub const IMAGE_REL_CEE_SECREL: u32 = 5;
pub const IMAGE_REL_CEE_TOKEN: u32 = 6;
pub const IMAGE_REL_M32R_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_M32R_ADDR32: u32 = 1;
pub const IMAGE_REL_M32R_ADDR32NB: u32 = 2;
pub const IMAGE_REL_M32R_ADDR24: u32 = 3;
pub const IMAGE_REL_M32R_GPREL16: u32 = 4;
pub const IMAGE_REL_M32R_PCREL24: u32 = 5;
pub const IMAGE_REL_M32R_PCREL16: u32 = 6;
pub const IMAGE_REL_M32R_PCREL8: u32 = 7;
pub const IMAGE_REL_M32R_REFHALF: u32 = 8;
pub const IMAGE_REL_M32R_REFHI: u32 = 9;
pub const IMAGE_REL_M32R_REFLO: u32 = 10;
pub const IMAGE_REL_M32R_PAIR: u32 = 11;
pub const IMAGE_REL_M32R_SECTION: u32 = 12;
pub const IMAGE_REL_M32R_SECREL32: u32 = 13;
pub const IMAGE_REL_M32R_TOKEN: u32 = 14;
pub const IMAGE_REL_EBC_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_EBC_ADDR32NB: u32 = 1;
pub const IMAGE_REL_EBC_REL32: u32 = 2;
pub const IMAGE_REL_EBC_SECTION: u32 = 3;
pub const IMAGE_REL_EBC_SECREL: u32 = 4;
pub const EMARCH_ENC_I17_IMM7B_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM7B_SIZE_X: u32 = 7;
pub const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X: u32 = 4;
pub const EMARCH_ENC_I17_IMM7B_VAL_POS_X: u32 = 0;
pub const EMARCH_ENC_I17_IMM9D_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM9D_SIZE_X: u32 = 9;
pub const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X: u32 = 18;
pub const EMARCH_ENC_I17_IMM9D_VAL_POS_X: u32 = 7;
pub const EMARCH_ENC_I17_IMM5C_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM5C_SIZE_X: u32 = 5;
pub const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X: u32 = 13;
pub const EMARCH_ENC_I17_IMM5C_VAL_POS_X: u32 = 16;
pub const EMARCH_ENC_I17_IC_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IC_SIZE_X: u32 = 1;
pub const EMARCH_ENC_I17_IC_INST_WORD_POS_X: u32 = 12;
pub const EMARCH_ENC_I17_IC_VAL_POS_X: u32 = 21;
pub const EMARCH_ENC_I17_IMM41a_INST_WORD_X: u32 = 1;
pub const EMARCH_ENC_I17_IMM41a_SIZE_X: u32 = 10;
pub const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X: u32 = 14;
pub const EMARCH_ENC_I17_IMM41a_VAL_POS_X: u32 = 22;
pub const EMARCH_ENC_I17_IMM41b_INST_WORD_X: u32 = 1;
pub const EMARCH_ENC_I17_IMM41b_SIZE_X: u32 = 8;
pub const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X: u32 = 24;
pub const EMARCH_ENC_I17_IMM41b_VAL_POS_X: u32 = 32;
pub const EMARCH_ENC_I17_IMM41c_INST_WORD_X: u32 = 2;
pub const EMARCH_ENC_I17_IMM41c_SIZE_X: u32 = 23;
pub const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X: u32 = 0;
pub const EMARCH_ENC_I17_IMM41c_VAL_POS_X: u32 = 40;
pub const EMARCH_ENC_I17_SIGN_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_SIGN_SIZE_X: u32 = 1;
pub const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X: u32 = 27;
pub const EMARCH_ENC_I17_SIGN_VAL_POS_X: u32 = 63;
pub const X3_OPCODE_INST_WORD_X: u32 = 3;
pub const X3_OPCODE_SIZE_X: u32 = 4;
pub const X3_OPCODE_INST_WORD_POS_X: u32 = 28;
pub const X3_OPCODE_SIGN_VAL_POS_X: u32 = 0;
pub const X3_I_INST_WORD_X: u32 = 3;
pub const X3_I_SIZE_X: u32 = 1;
pub const X3_I_INST_WORD_POS_X: u32 = 27;
pub const X3_I_SIGN_VAL_POS_X: u32 = 59;
pub const X3_D_WH_INST_WORD_X: u32 = 3;
pub const X3_D_WH_SIZE_X: u32 = 3;
pub const X3_D_WH_INST_WORD_POS_X: u32 = 24;
pub const X3_D_WH_SIGN_VAL_POS_X: u32 = 0;
pub const X3_IMM20_INST_WORD_X: u32 = 3;
pub const X3_IMM20_SIZE_X: u32 = 20;
pub const X3_IMM20_INST_WORD_POS_X: u32 = 4;
pub const X3_IMM20_SIGN_VAL_POS_X: u32 = 0;
pub const X3_IMM39_1_INST_WORD_X: u32 = 2;
pub const X3_IMM39_1_SIZE_X: u32 = 23;
pub const X3_IMM39_1_INST_WORD_POS_X: u32 = 0;
pub const X3_IMM39_1_SIGN_VAL_POS_X: u32 = 36;
pub const X3_IMM39_2_INST_WORD_X: u32 = 1;
pub const X3_IMM39_2_SIZE_X: u32 = 16;
pub const X3_IMM39_2_INST_WORD_POS_X: u32 = 16;
pub const X3_IMM39_2_SIGN_VAL_POS_X: u32 = 20;
pub const X3_P_INST_WORD_X: u32 = 3;
pub const X3_P_SIZE_X: u32 = 4;
pub const X3_P_INST_WORD_POS_X: u32 = 0;
pub const X3_P_SIGN_VAL_POS_X: u32 = 0;
pub const X3_TMPLT_INST_WORD_X: u32 = 0;
pub const X3_TMPLT_SIZE_X: u32 = 4;
pub const X3_TMPLT_INST_WORD_POS_X: u32 = 0;
pub const X3_TMPLT_SIGN_VAL_POS_X: u32 = 0;
pub const X3_BTYPE_QP_INST_WORD_X: u32 = 2;
pub const X3_BTYPE_QP_SIZE_X: u32 = 9;
pub const X3_BTYPE_QP_INST_WORD_POS_X: u32 = 23;
pub const X3_BTYPE_QP_INST_VAL_POS_X: u32 = 0;
pub const X3_EMPTY_INST_WORD_X: u32 = 1;
pub const X3_EMPTY_SIZE_X: u32 = 2;
pub const X3_EMPTY_INST_WORD_POS_X: u32 = 14;
pub const X3_EMPTY_INST_VAL_POS_X: u32 = 0;
pub const IMAGE_REL_BASED_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_BASED_HIGH: u32 = 1;
pub const IMAGE_REL_BASED_LOW: u32 = 2;
pub const IMAGE_REL_BASED_HIGHLOW: u32 = 3;
pub const IMAGE_REL_BASED_HIGHADJ: u32 = 4;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_5: u32 = 5;
pub const IMAGE_REL_BASED_RESERVED: u32 = 6;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_7: u32 = 7;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_8: u32 = 8;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_9: u32 = 9;
pub const IMAGE_REL_BASED_DIR64: u32 = 10;
pub const IMAGE_REL_BASED_IA64_IMM64: u32 = 9;
pub const IMAGE_REL_BASED_MIPS_JMPADDR: u32 = 5;
pub const IMAGE_REL_BASED_MIPS_JMPADDR16: u32 = 9;
pub const IMAGE_REL_BASED_ARM_MOV32: u32 = 5;
pub const IMAGE_REL_BASED_THUMB_MOV32: u32 = 7;
pub const IMAGE_ARCHIVE_START_SIZE: u32 = 8;
pub const IMAGE_ARCHIVE_START: &'static [u8; 9usize] = b"!<arch>\n\0";
pub const IMAGE_ARCHIVE_END: &'static [u8; 3usize] = b"`\n\0";
pub const IMAGE_ARCHIVE_PAD: &'static [u8; 2usize] = b"\n\0";
pub const IMAGE_ARCHIVE_LINKER_MEMBER: &'static [u8; 17usize] = b"/               \0";
pub const IMAGE_ARCHIVE_LONGNAMES_MEMBER: &'static [u8; 17usize] = b"//              \0";
pub const IMAGE_ARCHIVE_HYBRIDMAP_MEMBER: &'static [u8; 17usize] = b"/<HYBRIDMAP>/   \0";
pub const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR: u32 = 60;
pub const IMAGE_ORDINAL_FLAG64: i64 = -9223372036854775808;
pub const IMAGE_ORDINAL_FLAG32: u32 = 2147483648;
pub const IMAGE_ORDINAL_FLAG: i64 = -9223372036854775808;
pub const IMAGE_RESOURCE_NAME_IS_STRING: u32 = 2147483648;
pub const IMAGE_RESOURCE_DATA_IS_DIRECTORY: u32 = 2147483648;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE: u32 = 1;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE: u32 = 2;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER: u32 = 3;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER: u32 = 4;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH: u32 = 5;
pub const IMAGE_HOT_PATCH_BASE_OBLIGATORY: u32 = 1;
pub const IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK: u32 = 2;
pub const IMAGE_HOT_PATCH_CHUNK_INVERSE: u32 = 2147483648;
pub const IMAGE_HOT_PATCH_CHUNK_OBLIGATORY: u32 = 1073741824;
pub const IMAGE_HOT_PATCH_CHUNK_RESERVED: u32 = 1072705536;
pub const IMAGE_HOT_PATCH_CHUNK_TYPE: u32 = 1032192;
pub const IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA: u32 = 32768;
pub const IMAGE_HOT_PATCH_CHUNK_TARGET_RVA: u32 = 16384;
pub const IMAGE_HOT_PATCH_CHUNK_SIZE: u32 = 4095;
pub const IMAGE_HOT_PATCH_NONE: u32 = 0;
pub const IMAGE_HOT_PATCH_FUNCTION: u32 = 114688;
pub const IMAGE_HOT_PATCH_ABSOLUTE: u32 = 180224;
pub const IMAGE_HOT_PATCH_REL32: u32 = 245760;
pub const IMAGE_HOT_PATCH_CALL_TARGET: u32 = 278528;
pub const IMAGE_HOT_PATCH_INDIRECT: u32 = 376832;
pub const IMAGE_HOT_PATCH_NO_CALL_TARGET: u32 = 409600;
pub const IMAGE_HOT_PATCH_DYNAMIC_VALUE: u32 = 491520;
pub const IMAGE_GUARD_CF_INSTRUMENTED: u32 = 256;
pub const IMAGE_GUARD_CFW_INSTRUMENTED: u32 = 512;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT: u32 = 1024;
pub const IMAGE_GUARD_SECURITY_COOKIE_UNUSED: u32 = 2048;
pub const IMAGE_GUARD_PROTECT_DELAYLOAD_IAT: u32 = 4096;
pub const IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION: u32 = 8192;
pub const IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT: u32 = 16384;
pub const IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION: u32 = 32768;
pub const IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT: u32 = 65536;
pub const IMAGE_GUARD_RF_INSTRUMENTED: u32 = 131072;
pub const IMAGE_GUARD_RF_ENABLE: u32 = 262144;
pub const IMAGE_GUARD_RF_STRICT: u32 = 524288;
pub const IMAGE_GUARD_RETPOLINE_PRESENT: u32 = 1048576;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK: u32 = 4026531840;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT: u32 = 28;
pub const IMAGE_GUARD_FLAG_FID_SUPPRESSED: u32 = 1;
pub const IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED: u32 = 2;
pub const IMAGE_ENCLAVE_LONG_ID_LENGTH: u32 = 32;
pub const IMAGE_ENCLAVE_SHORT_ID_LENGTH: u32 = 16;
pub const IMAGE_ENCLAVE_POLICY_DEBUGGABLE: u32 = 1;
pub const IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE: u32 = 1;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_NONE: u32 = 0;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID: u32 = 1;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID: u32 = 2;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID: u32 = 3;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID: u32 = 4;
pub const IMAGE_DEBUG_TYPE_UNKNOWN: u32 = 0;
pub const IMAGE_DEBUG_TYPE_COFF: u32 = 1;
pub const IMAGE_DEBUG_TYPE_CODEVIEW: u32 = 2;
pub const IMAGE_DEBUG_TYPE_FPO: u32 = 3;
pub const IMAGE_DEBUG_TYPE_MISC: u32 = 4;
pub const IMAGE_DEBUG_TYPE_EXCEPTION: u32 = 5;
pub const IMAGE_DEBUG_TYPE_FIXUP: u32 = 6;
pub const IMAGE_DEBUG_TYPE_OMAP_TO_SRC: u32 = 7;
pub const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC: u32 = 8;
pub const IMAGE_DEBUG_TYPE_BORLAND: u32 = 9;
pub const IMAGE_DEBUG_TYPE_RESERVED10: u32 = 10;
pub const IMAGE_DEBUG_TYPE_CLSID: u32 = 11;
pub const IMAGE_DEBUG_TYPE_VC_FEATURE: u32 = 12;
pub const IMAGE_DEBUG_TYPE_POGO: u32 = 13;
pub const IMAGE_DEBUG_TYPE_ILTCG: u32 = 14;
pub const IMAGE_DEBUG_TYPE_MPX: u32 = 15;
pub const IMAGE_DEBUG_TYPE_REPRO: u32 = 16;
pub const FRAME_FPO: u32 = 0;
pub const FRAME_TRAP: u32 = 1;
pub const FRAME_TSS: u32 = 2;
pub const FRAME_NONFPO: u32 = 3;
pub const SIZEOF_RFPO_DATA: u32 = 16;
pub const IMAGE_DEBUG_MISC_EXENAME: u32 = 1;
pub const IMAGE_SEPARATE_DEBUG_SIGNATURE: u32 = 18756;
pub const NON_PAGED_DEBUG_SIGNATURE: u32 = 18766;
pub const IMAGE_SEPARATE_DEBUG_FLAGS_MASK: u32 = 32768;
pub const IMAGE_SEPARATE_DEBUG_MISMATCH: u32 = 32768;
pub const IMPORT_OBJECT_HDR_SIG2: u32 = 65535;
pub const RTL_RUN_ONCE_CHECK_ONLY: u32 = 1;
pub const RTL_RUN_ONCE_ASYNC: u32 = 2;
pub const RTL_RUN_ONCE_INIT_FAILED: u32 = 4;
pub const RTL_RUN_ONCE_CTX_RESERVED_BITS: u32 = 2;
pub const FAST_FAIL_LEGACY_GS_VIOLATION: u32 = 0;
pub const FAST_FAIL_VTGUARD_CHECK_FAILURE: u32 = 1;
pub const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE: u32 = 2;
pub const FAST_FAIL_CORRUPT_LIST_ENTRY: u32 = 3;
pub const FAST_FAIL_INCORRECT_STACK: u32 = 4;
pub const FAST_FAIL_INVALID_ARG: u32 = 5;
pub const FAST_FAIL_GS_COOKIE_INIT: u32 = 6;
pub const FAST_FAIL_FATAL_APP_EXIT: u32 = 7;
pub const FAST_FAIL_RANGE_CHECK_FAILURE: u32 = 8;
pub const FAST_FAIL_UNSAFE_REGISTRY_ACCESS: u32 = 9;
pub const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE: u32 = 10;
pub const FAST_FAIL_GUARD_WRITE_CHECK_FAILURE: u32 = 11;
pub const FAST_FAIL_INVALID_FIBER_SWITCH: u32 = 12;
pub const FAST_FAIL_INVALID_SET_OF_CONTEXT: u32 = 13;
pub const FAST_FAIL_INVALID_REFERENCE_COUNT: u32 = 14;
pub const FAST_FAIL_INVALID_JUMP_BUFFER: u32 = 18;
pub const FAST_FAIL_MRDATA_MODIFIED: u32 = 19;
pub const FAST_FAIL_CERTIFICATION_FAILURE: u32 = 20;
pub const FAST_FAIL_INVALID_EXCEPTION_CHAIN: u32 = 21;
pub const FAST_FAIL_CRYPTO_LIBRARY: u32 = 22;
pub const FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT: u32 = 23;
pub const FAST_FAIL_INVALID_IMAGE_BASE: u32 = 24;
pub const FAST_FAIL_DLOAD_PROTECTION_FAILURE: u32 = 25;
pub const FAST_FAIL_UNSAFE_EXTENSION_CALL: u32 = 26;
pub const FAST_FAIL_DEPRECATED_SERVICE_INVOKED: u32 = 27;
pub const FAST_FAIL_INVALID_BUFFER_ACCESS: u32 = 28;
pub const FAST_FAIL_INVALID_BALANCED_TREE: u32 = 29;
pub const FAST_FAIL_INVALID_NEXT_THREAD: u32 = 30;
pub const FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED: u32 = 31;
pub const FAST_FAIL_APCS_DISABLED: u32 = 32;
pub const FAST_FAIL_INVALID_IDLE_STATE: u32 = 33;
pub const FAST_FAIL_MRDATA_PROTECTION_FAILURE: u32 = 34;
pub const FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION: u32 = 35;
pub const FAST_FAIL_INVALID_LOCK_STATE: u32 = 36;
pub const FAST_FAIL_GUARD_JUMPTABLE: u32 = 37;
pub const FAST_FAIL_INVALID_LONGJUMP_TARGET: u32 = 38;
pub const FAST_FAIL_INVALID_DISPATCH_CONTEXT: u32 = 39;
pub const FAST_FAIL_INVALID_THREAD: u32 = 40;
pub const FAST_FAIL_INVALID_SYSCALL_NUMBER: u32 = 41;
pub const FAST_FAIL_INVALID_FILE_OPERATION: u32 = 42;
pub const FAST_FAIL_LPAC_ACCESS_DENIED: u32 = 43;
pub const FAST_FAIL_GUARD_SS_FAILURE: u32 = 44;
pub const FAST_FAIL_LOADER_CONTINUITY_FAILURE: u32 = 45;
pub const FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE: u32 = 46;
pub const FAST_FAIL_INVALID_CONTROL_STACK: u32 = 47;
pub const FAST_FAIL_SET_CONTEXT_DENIED: u32 = 48;
pub const FAST_FAIL_INVALID_IAT: u32 = 49;
pub const FAST_FAIL_HEAP_METADATA_CORRUPTION: u32 = 50;
pub const FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION: u32 = 51;
pub const FAST_FAIL_LOW_LABEL_ACCESS_DENIED: u32 = 52;
pub const FAST_FAIL_ENCLAVE_CALL_FAILURE: u32 = 53;
pub const FAST_FAIL_UNHANDLED_LSS_EXCEPTON: u32 = 54;
pub const FAST_FAIL_ADMINLESS_ACCESS_DENIED: u32 = 55;
pub const FAST_FAIL_UNEXPECTED_CALL: u32 = 56;
pub const FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS: u32 = 57;
pub const FAST_FAIL_INVALID_FAST_FAIL_CODE: u32 = 4294967295;
pub const HEAP_NO_SERIALIZE: u32 = 1;
pub const HEAP_GROWABLE: u32 = 2;
pub const HEAP_GENERATE_EXCEPTIONS: u32 = 4;
pub const HEAP_ZERO_MEMORY: u32 = 8;
pub const HEAP_REALLOC_IN_PLACE_ONLY: u32 = 16;
pub const HEAP_TAIL_CHECKING_ENABLED: u32 = 32;
pub const HEAP_FREE_CHECKING_ENABLED: u32 = 64;
pub const HEAP_DISABLE_COALESCE_ON_FREE: u32 = 128;
pub const HEAP_CREATE_ALIGN_16: u32 = 65536;
pub const HEAP_CREATE_ENABLE_TRACING: u32 = 131072;
pub const HEAP_CREATE_ENABLE_EXECUTE: u32 = 262144;
pub const HEAP_MAXIMUM_TAG: u32 = 4095;
pub const HEAP_PSEUDO_TAG_FLAG: u32 = 32768;
pub const HEAP_TAG_SHIFT: u32 = 18;
pub const HEAP_CREATE_SEGMENT_HEAP: u32 = 256;
pub const HEAP_CREATE_HARDENED: u32 = 512;
pub const IS_TEXT_UNICODE_ASCII16: u32 = 1;
pub const IS_TEXT_UNICODE_REVERSE_ASCII16: u32 = 16;
pub const IS_TEXT_UNICODE_STATISTICS: u32 = 2;
pub const IS_TEXT_UNICODE_REVERSE_STATISTICS: u32 = 32;
pub const IS_TEXT_UNICODE_CONTROLS: u32 = 4;
pub const IS_TEXT_UNICODE_REVERSE_CONTROLS: u32 = 64;
pub const IS_TEXT_UNICODE_SIGNATURE: u32 = 8;
pub const IS_TEXT_UNICODE_REVERSE_SIGNATURE: u32 = 128;
pub const IS_TEXT_UNICODE_ILLEGAL_CHARS: u32 = 256;
pub const IS_TEXT_UNICODE_ODD_LENGTH: u32 = 512;
pub const IS_TEXT_UNICODE_DBCS_LEADBYTE: u32 = 1024;
pub const IS_TEXT_UNICODE_NULL_BYTES: u32 = 4096;
pub const IS_TEXT_UNICODE_UNICODE_MASK: u32 = 15;
pub const IS_TEXT_UNICODE_REVERSE_MASK: u32 = 240;
pub const IS_TEXT_UNICODE_NOT_UNICODE_MASK: u32 = 3840;
pub const IS_TEXT_UNICODE_NOT_ASCII_MASK: u32 = 61440;
pub const COMPRESSION_FORMAT_NONE: u32 = 0;
pub const COMPRESSION_FORMAT_DEFAULT: u32 = 1;
pub const COMPRESSION_FORMAT_LZNT1: u32 = 2;
pub const COMPRESSION_FORMAT_XPRESS: u32 = 3;
pub const COMPRESSION_FORMAT_XPRESS_HUFF: u32 = 4;
pub const COMPRESSION_ENGINE_STANDARD: u32 = 0;
pub const COMPRESSION_ENGINE_MAXIMUM: u32 = 256;
pub const COMPRESSION_ENGINE_HIBER: u32 = 512;
pub const SEF_DACL_AUTO_INHERIT: u32 = 1;
pub const SEF_SACL_AUTO_INHERIT: u32 = 2;
pub const SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT: u32 = 4;
pub const SEF_AVOID_PRIVILEGE_CHECK: u32 = 8;
pub const SEF_AVOID_OWNER_CHECK: u32 = 16;
pub const SEF_DEFAULT_OWNER_FROM_PARENT: u32 = 32;
pub const SEF_DEFAULT_GROUP_FROM_PARENT: u32 = 64;
pub const SEF_MACL_NO_WRITE_UP: u32 = 256;
pub const SEF_MACL_NO_READ_UP: u32 = 512;
pub const SEF_MACL_NO_EXECUTE_UP: u32 = 1024;
pub const SEF_AI_USE_EXTRA_PARAMS: u32 = 2048;
pub const SEF_AVOID_OWNER_RESTRICTION: u32 = 4096;
pub const SEF_FORCE_USER_MODE: u32 = 8192;
pub const SEF_MACL_VALID_FLAGS: u32 = 1792;
pub const MESSAGE_RESOURCE_UNICODE: u32 = 1;
pub const VER_EQUAL: u32 = 1;
pub const VER_GREATER: u32 = 2;
pub const VER_GREATER_EQUAL: u32 = 3;
pub const VER_LESS: u32 = 4;
pub const VER_LESS_EQUAL: u32 = 5;
pub const VER_AND: u32 = 6;
pub const VER_OR: u32 = 7;
pub const VER_CONDITION_MASK: u32 = 7;
pub const VER_NUM_BITS_PER_CONDITION_MASK: u32 = 3;
pub const VER_MINORVERSION: u32 = 1;
pub const VER_MAJORVERSION: u32 = 2;
pub const VER_BUILDNUMBER: u32 = 4;
pub const VER_PLATFORMID: u32 = 8;
pub const VER_SERVICEPACKMINOR: u32 = 16;
pub const VER_SERVICEPACKMAJOR: u32 = 32;
pub const VER_SUITENAME: u32 = 64;
pub const VER_PRODUCT_TYPE: u32 = 128;
pub const VER_NT_WORKSTATION: u32 = 1;
pub const VER_NT_DOMAIN_CONTROLLER: u32 = 2;
pub const VER_NT_SERVER: u32 = 3;
pub const VER_PLATFORM_WIN32s: u32 = 0;
pub const VER_PLATFORM_WIN32_WINDOWS: u32 = 1;
pub const VER_PLATFORM_WIN32_NT: u32 = 2;
pub const RTL_UMS_VERSION: u32 = 256;
pub const VRL_PREDEFINED_CLASS_BEGIN: u32 = 1;
pub const VRL_CUSTOM_CLASS_BEGIN: u32 = 256;
pub const VRL_CLASS_CONSISTENCY: u32 = 1;
pub const VRL_ENABLE_KERNEL_BREAKS: u32 = 2147483648;
pub const CTMF_INCLUDE_APPCONTAINER: u32 = 1;
pub const CTMF_INCLUDE_LPAC: u32 = 2;
pub const CTMF_VALID_FLAGS: u32 = 3;
pub const FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN: u32 = 1;
pub const WRITE_NV_MEMORY_FLAG_FLUSH: u32 = 1;
pub const WRITE_NV_MEMORY_FLAG_NON_TEMPORAL: u32 = 2;
pub const WRITE_NV_MEMORY_FLAG_PERSIST: u32 = 3;
pub const WRITE_NV_MEMORY_FLAG_NO_DRAIN: u32 = 256;
pub const RTL_CORRELATION_VECTOR_STRING_LENGTH: u32 = 129;
pub const RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH: u32 = 16;
pub const RTL_CORRELATION_VECTOR_V1_LENGTH: u32 = 64;
pub const RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH: u32 = 22;
pub const RTL_CORRELATION_VECTOR_V2_LENGTH: u32 = 128;
pub const IMAGE_POLICY_METADATA_VERSION: u32 = 1;
pub const IMAGE_POLICY_SECTION_NAME: &'static [u8; 9usize] = b".tPolicy\0";
pub const RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO: u32 = 16777216;
pub const RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN: u32 = 33554432;
pub const RTL_CRITICAL_SECTION_FLAG_STATIC_INIT: u32 = 67108864;
pub const RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE: u32 = 134217728;
pub const RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO: u32 = 268435456;
pub const RTL_CRITICAL_SECTION_ALL_FLAG_BITS: u32 = 4278190080;
pub const RTL_CRITICAL_SECTION_FLAG_RESERVED: u32 = 3758096384;
pub const RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT: u32 = 1;
pub const RTL_CONDITION_VARIABLE_LOCKMODE_SHARED: u32 = 1;
pub const HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION: u32 = 1;
pub const WT_EXECUTEDEFAULT: u32 = 0;
pub const WT_EXECUTEINIOTHREAD: u32 = 1;
pub const WT_EXECUTEINUITHREAD: u32 = 2;
pub const WT_EXECUTEINWAITTHREAD: u32 = 4;
pub const WT_EXECUTEONLYONCE: u32 = 8;
pub const WT_EXECUTEINTIMERTHREAD: u32 = 32;
pub const WT_EXECUTELONGFUNCTION: u32 = 16;
pub const WT_EXECUTEINPERSISTENTIOTHREAD: u32 = 64;
pub const WT_EXECUTEINPERSISTENTTHREAD: u32 = 128;
pub const WT_TRANSFER_IMPERSONATION: u32 = 256;
pub const WT_EXECUTEINLONGTHREAD: u32 = 16;
pub const WT_EXECUTEDELETEWAIT: u32 = 8;
pub const ACTIVATION_CONTEXT_PATH_TYPE_NONE: u32 = 1;
pub const ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE: u32 = 2;
pub const ACTIVATION_CONTEXT_PATH_TYPE_URL: u32 = 3;
pub const ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF: u32 = 4;
pub const CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID: u32 = 1;
pub const PERFORMANCE_DATA_VERSION: u32 = 1;
pub const READ_THREAD_PROFILING_FLAG_DISPATCHING: u32 = 1;
pub const READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS: u32 = 2;
pub const UNIFIEDBUILDREVISION_KEY: &'static [u8; 63usize] =
    b"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\0";
pub const UNIFIEDBUILDREVISION_VALUE: &'static [u8; 4usize] = b"UBR\0";
pub const UNIFIEDBUILDREVISION_MIN: u32 = 0;
pub const DEVICEFAMILYDEVICEFORM_KEY: &'static [u8; 67usize] =
    b"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\\OEM\0";
pub const DEVICEFAMILYDEVICEFORM_VALUE: &'static [u8; 11usize] = b"DeviceForm\0";
pub const DEVICEFAMILYINFOENUM_UAP: u32 = 0;
pub const DEVICEFAMILYINFOENUM_WINDOWS_8X: u32 = 1;
pub const DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X: u32 = 2;
pub const DEVICEFAMILYINFOENUM_DESKTOP: u32 = 3;
pub const DEVICEFAMILYINFOENUM_MOBILE: u32 = 4;
pub const DEVICEFAMILYINFOENUM_XBOX: u32 = 5;
pub const DEVICEFAMILYINFOENUM_TEAM: u32 = 6;
pub const DEVICEFAMILYINFOENUM_IOT: u32 = 7;
pub const DEVICEFAMILYINFOENUM_IOT_HEADLESS: u32 = 8;
pub const DEVICEFAMILYINFOENUM_SERVER: u32 = 9;
pub const DEVICEFAMILYINFOENUM_HOLOGRAPHIC: u32 = 10;
pub const DEVICEFAMILYINFOENUM_XBOXSRA: u32 = 11;
pub const DEVICEFAMILYINFOENUM_XBOXERA: u32 = 12;
pub const DEVICEFAMILYINFOENUM_SERVER_NANO: u32 = 13;
pub const DEVICEFAMILYINFOENUM_8828080: u32 = 14;
pub const DEVICEFAMILYINFOENUM_7067329: u32 = 15;
pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE: u32 = 16;
pub const DEVICEFAMILYINFOENUM_MAX: u32 = 16;
pub const DEVICEFAMILYDEVICEFORM_UNKNOWN: u32 = 0;
pub const DEVICEFAMILYDEVICEFORM_PHONE: u32 = 1;
pub const DEVICEFAMILYDEVICEFORM_TABLET: u32 = 2;
pub const DEVICEFAMILYDEVICEFORM_DESKTOP: u32 = 3;
pub const DEVICEFAMILYDEVICEFORM_NOTEBOOK: u32 = 4;
pub const DEVICEFAMILYDEVICEFORM_CONVERTIBLE: u32 = 5;
pub const DEVICEFAMILYDEVICEFORM_DETACHABLE: u32 = 6;
pub const DEVICEFAMILYDEVICEFORM_ALLINONE: u32 = 7;
pub const DEVICEFAMILYDEVICEFORM_STICKPC: u32 = 8;
pub const DEVICEFAMILYDEVICEFORM_PUCK: u32 = 9;
pub const DEVICEFAMILYDEVICEFORM_LARGESCREEN: u32 = 10;
pub const DEVICEFAMILYDEVICEFORM_HMD: u32 = 11;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD: u32 = 12;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET: u32 = 13;
pub const DEVICEFAMILYDEVICEFORM_BANKING: u32 = 14;
pub const DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION: u32 = 15;
pub const DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE: u32 = 16;
pub const DEVICEFAMILYDEVICEFORM_GAMING: u32 = 17;
pub const DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION: u32 = 18;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION: u32 = 19;
pub const DEVICEFAMILYDEVICEFORM_KIOSK: u32 = 20;
pub const DEVICEFAMILYDEVICEFORM_MAKER_BOARD: u32 = 21;
pub const DEVICEFAMILYDEVICEFORM_MEDICAL: u32 = 22;
pub const DEVICEFAMILYDEVICEFORM_NETWORKING: u32 = 23;
pub const DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE: u32 = 24;
pub const DEVICEFAMILYDEVICEFORM_PRINTING: u32 = 25;
pub const DEVICEFAMILYDEVICEFORM_THIN_CLIENT: u32 = 26;
pub const DEVICEFAMILYDEVICEFORM_TOY: u32 = 27;
pub const DEVICEFAMILYDEVICEFORM_VENDING: u32 = 28;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER: u32 = 29;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE: u32 = 30;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_S: u32 = 31;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X: u32 = 32;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT: u32 = 33;
pub const DEVICEFAMILYDEVICEFORM_MAX: u32 = 33;
pub const DLL_PROCESS_ATTACH: u32 = 1;
pub const DLL_THREAD_ATTACH: u32 = 2;
pub const DLL_THREAD_DETACH: u32 = 3;
pub const DLL_PROCESS_DETACH: u32 = 0;
pub const EVENTLOG_SEQUENTIAL_READ: u32 = 1;
pub const EVENTLOG_SEEK_READ: u32 = 2;
pub const EVENTLOG_FORWARDS_READ: u32 = 4;
pub const EVENTLOG_BACKWARDS_READ: u32 = 8;
pub const EVENTLOG_SUCCESS: u32 = 0;
pub const EVENTLOG_ERROR_TYPE: u32 = 1;
pub const EVENTLOG_WARNING_TYPE: u32 = 2;
pub const EVENTLOG_INFORMATION_TYPE: u32 = 4;
pub const EVENTLOG_AUDIT_SUCCESS: u32 = 8;
pub const EVENTLOG_AUDIT_FAILURE: u32 = 16;
pub const EVENTLOG_START_PAIRED_EVENT: u32 = 1;
pub const EVENTLOG_END_PAIRED_EVENT: u32 = 2;
pub const EVENTLOG_END_ALL_PAIRED_EVENTS: u32 = 4;
pub const EVENTLOG_PAIRED_EVENT_ACTIVE: u32 = 8;
pub const EVENTLOG_PAIRED_EVENT_INACTIVE: u32 = 16;
pub const MAXLOGICALLOGNAMESIZE: u32 = 256;
pub const KEY_QUERY_VALUE: u32 = 1;
pub const KEY_SET_VALUE: u32 = 2;
pub const KEY_CREATE_SUB_KEY: u32 = 4;
pub const KEY_ENUMERATE_SUB_KEYS: u32 = 8;
pub const KEY_NOTIFY: u32 = 16;
pub const KEY_CREATE_LINK: u32 = 32;
pub const KEY_WOW64_32KEY: u32 = 512;
pub const KEY_WOW64_64KEY: u32 = 256;
pub const KEY_WOW64_RES: u32 = 768;
pub const KEY_READ: u32 = 131097;
pub const KEY_WRITE: u32 = 131078;
pub const KEY_EXECUTE: u32 = 131097;
pub const KEY_ALL_ACCESS: u32 = 983103;
pub const REG_OPTION_RESERVED: u32 = 0;
pub const REG_OPTION_NON_VOLATILE: u32 = 0;
pub const REG_OPTION_VOLATILE: u32 = 1;
pub const REG_OPTION_CREATE_LINK: u32 = 2;
pub const REG_OPTION_BACKUP_RESTORE: u32 = 4;
pub const REG_OPTION_OPEN_LINK: u32 = 8;
pub const REG_OPTION_DONT_VIRTUALIZE: u32 = 16;
pub const REG_LEGAL_OPTION: u32 = 31;
pub const REG_OPEN_LEGAL_OPTION: u32 = 28;
pub const REG_CREATED_NEW_KEY: u32 = 1;
pub const REG_OPENED_EXISTING_KEY: u32 = 2;
pub const REG_STANDARD_FORMAT: u32 = 1;
pub const REG_LATEST_FORMAT: u32 = 2;
pub const REG_NO_COMPRESSION: u32 = 4;
pub const REG_WHOLE_HIVE_VOLATILE: u32 = 1;
pub const REG_REFRESH_HIVE: u32 = 2;
pub const REG_NO_LAZY_FLUSH: u32 = 4;
pub const REG_FORCE_RESTORE: u32 = 8;
pub const REG_APP_HIVE: u32 = 16;
pub const REG_PROCESS_PRIVATE: u32 = 32;
pub const REG_START_JOURNAL: u32 = 64;
pub const REG_HIVE_EXACT_FILE_GROWTH: u32 = 128;
pub const REG_HIVE_NO_RM: u32 = 256;
pub const REG_HIVE_SINGLE_LOG: u32 = 512;
pub const REG_BOOT_HIVE: u32 = 1024;
pub const REG_LOAD_HIVE_OPEN_HANDLE: u32 = 2048;
pub const REG_FLUSH_HIVE_FILE_GROWTH: u32 = 4096;
pub const REG_OPEN_READ_ONLY: u32 = 8192;
pub const REG_IMMUTABLE: u32 = 16384;
pub const REG_APP_HIVE_OPEN_READ_ONLY: u32 = 8192;
pub const REG_FORCE_UNLOAD: u32 = 1;
pub const REG_UNLOAD_LEGAL_FLAGS: u32 = 1;
pub const REG_NOTIFY_CHANGE_NAME: u32 = 1;
pub const REG_NOTIFY_CHANGE_ATTRIBUTES: u32 = 2;
pub const REG_NOTIFY_CHANGE_LAST_SET: u32 = 4;
pub const REG_NOTIFY_CHANGE_SECURITY: u32 = 8;
pub const REG_NOTIFY_THREAD_AGNOSTIC: u32 = 268435456;
pub const REG_LEGAL_CHANGE_FILTER: u32 = 268435471;
pub const REG_NONE: u32 = 0;
pub const REG_SZ: u32 = 1;
pub const REG_EXPAND_SZ: u32 = 2;
pub const REG_BINARY: u32 = 3;
pub const REG_DWORD: u32 = 4;
pub const REG_DWORD_LITTLE_ENDIAN: u32 = 4;
pub const REG_DWORD_BIG_ENDIAN: u32 = 5;
pub const REG_LINK: u32 = 6;
pub const REG_MULTI_SZ: u32 = 7;
pub const REG_RESOURCE_LIST: u32 = 8;
pub const REG_FULL_RESOURCE_DESCRIPTOR: u32 = 9;
pub const REG_RESOURCE_REQUIREMENTS_LIST: u32 = 10;
pub const REG_QWORD: u32 = 11;
pub const REG_QWORD_LITTLE_ENDIAN: u32 = 11;
pub const SERVICE_KERNEL_DRIVER: u32 = 1;
pub const SERVICE_FILE_SYSTEM_DRIVER: u32 = 2;
pub const SERVICE_ADAPTER: u32 = 4;
pub const SERVICE_RECOGNIZER_DRIVER: u32 = 8;
pub const SERVICE_DRIVER: u32 = 11;
pub const SERVICE_WIN32_OWN_PROCESS: u32 = 16;
pub const SERVICE_WIN32_SHARE_PROCESS: u32 = 32;
pub const SERVICE_WIN32: u32 = 48;
pub const SERVICE_USER_SERVICE: u32 = 64;
pub const SERVICE_USERSERVICE_INSTANCE: u32 = 128;
pub const SERVICE_USER_SHARE_PROCESS: u32 = 96;
pub const SERVICE_USER_OWN_PROCESS: u32 = 80;
pub const SERVICE_INTERACTIVE_PROCESS: u32 = 256;
pub const SERVICE_PKG_SERVICE: u32 = 512;
pub const SERVICE_TYPE_ALL: u32 = 1023;
pub const SERVICE_BOOT_START: u32 = 0;
pub const SERVICE_SYSTEM_START: u32 = 1;
pub const SERVICE_AUTO_START: u32 = 2;
pub const SERVICE_DEMAND_START: u32 = 3;
pub const SERVICE_DISABLED: u32 = 4;
pub const SERVICE_ERROR_IGNORE: u32 = 0;
pub const SERVICE_ERROR_NORMAL: u32 = 1;
pub const SERVICE_ERROR_SEVERE: u32 = 2;
pub const SERVICE_ERROR_CRITICAL: u32 = 3;
pub const CM_SERVICE_NETWORK_BOOT_LOAD: u32 = 1;
pub const CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD: u32 = 2;
pub const CM_SERVICE_USB_DISK_BOOT_LOAD: u32 = 4;
pub const CM_SERVICE_SD_DISK_BOOT_LOAD: u32 = 8;
pub const CM_SERVICE_USB3_DISK_BOOT_LOAD: u32 = 16;
pub const CM_SERVICE_MEASURED_BOOT_LOAD: u32 = 32;
pub const CM_SERVICE_VERIFIER_BOOT_LOAD: u32 = 64;
pub const CM_SERVICE_WINPE_BOOT_LOAD: u32 = 128;
pub const CM_SERVICE_RAM_DISK_BOOT_LOAD: u32 = 256;
pub const CM_SERVICE_VALID_PROMOTION_MASK: u32 = 511;
pub const TAPE_ERASE_SHORT: u32 = 0;
pub const TAPE_ERASE_LONG: u32 = 1;
pub const TAPE_LOAD: u32 = 0;
pub const TAPE_UNLOAD: u32 = 1;
pub const TAPE_TENSION: u32 = 2;
pub const TAPE_LOCK: u32 = 3;
pub const TAPE_UNLOCK: u32 = 4;
pub const TAPE_FORMAT: u32 = 5;
pub const TAPE_SETMARKS: u32 = 0;
pub const TAPE_FILEMARKS: u32 = 1;
pub const TAPE_SHORT_FILEMARKS: u32 = 2;
pub const TAPE_LONG_FILEMARKS: u32 = 3;
pub const TAPE_ABSOLUTE_POSITION: u32 = 0;
pub const TAPE_LOGICAL_POSITION: u32 = 1;
pub const TAPE_PSEUDO_LOGICAL_POSITION: u32 = 2;
pub const TAPE_REWIND: u32 = 0;
pub const TAPE_ABSOLUTE_BLOCK: u32 = 1;
pub const TAPE_LOGICAL_BLOCK: u32 = 2;
pub const TAPE_PSEUDO_LOGICAL_BLOCK: u32 = 3;
pub const TAPE_SPACE_END_OF_DATA: u32 = 4;
pub const TAPE_SPACE_RELATIVE_BLOCKS: u32 = 5;
pub const TAPE_SPACE_FILEMARKS: u32 = 6;
pub const TAPE_SPACE_SEQUENTIAL_FMKS: u32 = 7;
pub const TAPE_SPACE_SETMARKS: u32 = 8;
pub const TAPE_SPACE_SEQUENTIAL_SMKS: u32 = 9;
pub const TAPE_DRIVE_FIXED: u32 = 1;
pub const TAPE_DRIVE_SELECT: u32 = 2;
pub const TAPE_DRIVE_INITIATOR: u32 = 4;
pub const TAPE_DRIVE_ERASE_SHORT: u32 = 16;
pub const TAPE_DRIVE_ERASE_LONG: u32 = 32;
pub const TAPE_DRIVE_ERASE_BOP_ONLY: u32 = 64;
pub const TAPE_DRIVE_ERASE_IMMEDIATE: u32 = 128;
pub const TAPE_DRIVE_TAPE_CAPACITY: u32 = 256;
pub const TAPE_DRIVE_TAPE_REMAINING: u32 = 512;
pub const TAPE_DRIVE_FIXED_BLOCK: u32 = 1024;
pub const TAPE_DRIVE_VARIABLE_BLOCK: u32 = 2048;
pub const TAPE_DRIVE_WRITE_PROTECT: u32 = 4096;
pub const TAPE_DRIVE_EOT_WZ_SIZE: u32 = 8192;
pub const TAPE_DRIVE_ECC: u32 = 65536;
pub const TAPE_DRIVE_COMPRESSION: u32 = 131072;
pub const TAPE_DRIVE_PADDING: u32 = 262144;
pub const TAPE_DRIVE_REPORT_SMKS: u32 = 524288;
pub const TAPE_DRIVE_GET_ABSOLUTE_BLK: u32 = 1048576;
pub const TAPE_DRIVE_GET_LOGICAL_BLK: u32 = 2097152;
pub const TAPE_DRIVE_SET_EOT_WZ_SIZE: u32 = 4194304;
pub const TAPE_DRIVE_EJECT_MEDIA: u32 = 16777216;
pub const TAPE_DRIVE_CLEAN_REQUESTS: u32 = 33554432;
pub const TAPE_DRIVE_SET_CMP_BOP_ONLY: u32 = 67108864;
pub const TAPE_DRIVE_RESERVED_BIT: u32 = 2147483648;
pub const TAPE_DRIVE_LOAD_UNLOAD: u32 = 2147483649;
pub const TAPE_DRIVE_TENSION: u32 = 2147483650;
pub const TAPE_DRIVE_LOCK_UNLOCK: u32 = 2147483652;
pub const TAPE_DRIVE_REWIND_IMMEDIATE: u32 = 2147483656;
pub const TAPE_DRIVE_SET_BLOCK_SIZE: u32 = 2147483664;
pub const TAPE_DRIVE_LOAD_UNLD_IMMED: u32 = 2147483680;
pub const TAPE_DRIVE_TENSION_IMMED: u32 = 2147483712;
pub const TAPE_DRIVE_LOCK_UNLK_IMMED: u32 = 2147483776;
pub const TAPE_DRIVE_SET_ECC: u32 = 2147483904;
pub const TAPE_DRIVE_SET_COMPRESSION: u32 = 2147484160;
pub const TAPE_DRIVE_SET_PADDING: u32 = 2147484672;
pub const TAPE_DRIVE_SET_REPORT_SMKS: u32 = 2147485696;
pub const TAPE_DRIVE_ABSOLUTE_BLK: u32 = 2147487744;
pub const TAPE_DRIVE_ABS_BLK_IMMED: u32 = 2147491840;
pub const TAPE_DRIVE_LOGICAL_BLK: u32 = 2147500032;
pub const TAPE_DRIVE_LOG_BLK_IMMED: u32 = 2147516416;
pub const TAPE_DRIVE_END_OF_DATA: u32 = 2147549184;
pub const TAPE_DRIVE_RELATIVE_BLKS: u32 = 2147614720;
pub const TAPE_DRIVE_FILEMARKS: u32 = 2147745792;
pub const TAPE_DRIVE_SEQUENTIAL_FMKS: u32 = 2148007936;
pub const TAPE_DRIVE_SETMARKS: u32 = 2148532224;
pub const TAPE_DRIVE_SEQUENTIAL_SMKS: u32 = 2149580800;
pub const TAPE_DRIVE_REVERSE_POSITION: u32 = 2151677952;
pub const TAPE_DRIVE_SPACE_IMMEDIATE: u32 = 2155872256;
pub const TAPE_DRIVE_WRITE_SETMARKS: u32 = 2164260864;
pub const TAPE_DRIVE_WRITE_FILEMARKS: u32 = 2181038080;
pub const TAPE_DRIVE_WRITE_SHORT_FMKS: u32 = 2214592512;
pub const TAPE_DRIVE_WRITE_LONG_FMKS: u32 = 2281701376;
pub const TAPE_DRIVE_WRITE_MARK_IMMED: u32 = 2415919104;
pub const TAPE_DRIVE_FORMAT: u32 = 2684354560;
pub const TAPE_DRIVE_FORMAT_IMMEDIATE: u32 = 3221225472;
pub const TAPE_DRIVE_HIGH_FEATURES: u32 = 2147483648;
pub const TAPE_FIXED_PARTITIONS: u32 = 0;
pub const TAPE_SELECT_PARTITIONS: u32 = 1;
pub const TAPE_INITIATOR_PARTITIONS: u32 = 2;
pub const TAPE_QUERY_DRIVE_PARAMETERS: u32 = 0;
pub const TAPE_QUERY_MEDIA_CAPACITY: u32 = 1;
pub const TAPE_CHECK_FOR_DRIVE_PROBLEM: u32 = 2;
pub const TAPE_QUERY_IO_ERROR_DATA: u32 = 3;
pub const TAPE_QUERY_DEVICE_ERROR_DATA: u32 = 4;
pub const TRANSACTION_MANAGER_VOLATILE: u32 = 1;
pub const TRANSACTION_MANAGER_COMMIT_DEFAULT: u32 = 0;
pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME: u32 = 2;
pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES: u32 = 4;
pub const TRANSACTION_MANAGER_COMMIT_LOWEST: u32 = 8;
pub const TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY: u32 = 16;
pub const TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS: u32 = 32;
pub const TRANSACTION_MANAGER_MAXIMUM_OPTION: u32 = 63;
pub const TRANSACTION_DO_NOT_PROMOTE: u32 = 1;
pub const TRANSACTION_MAXIMUM_OPTION: u32 = 1;
pub const RESOURCE_MANAGER_VOLATILE: u32 = 1;
pub const RESOURCE_MANAGER_COMMUNICATION: u32 = 2;
pub const RESOURCE_MANAGER_MAXIMUM_OPTION: u32 = 3;
pub const CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY: u32 = 1;
pub const CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO: u32 = 2;
pub const CRM_PROTOCOL_MAXIMUM_OPTION: u32 = 3;
pub const ENLISTMENT_SUPERIOR: u32 = 1;
pub const ENLISTMENT_MAXIMUM_OPTION: u32 = 1;
pub const TRANSACTION_NOTIFY_MASK: u32 = 1073741823;
pub const TRANSACTION_NOTIFY_PREPREPARE: u32 = 1;
pub const TRANSACTION_NOTIFY_PREPARE: u32 = 2;
pub const TRANSACTION_NOTIFY_COMMIT: u32 = 4;
pub const TRANSACTION_NOTIFY_ROLLBACK: u32 = 8;
pub const TRANSACTION_NOTIFY_PREPREPARE_COMPLETE: u32 = 16;
pub const TRANSACTION_NOTIFY_PREPARE_COMPLETE: u32 = 32;
pub const TRANSACTION_NOTIFY_COMMIT_COMPLETE: u32 = 64;
pub const TRANSACTION_NOTIFY_ROLLBACK_COMPLETE: u32 = 128;
pub const TRANSACTION_NOTIFY_RECOVER: u32 = 256;
pub const TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT: u32 = 512;
pub const TRANSACTION_NOTIFY_DELEGATE_COMMIT: u32 = 1024;
pub const TRANSACTION_NOTIFY_RECOVER_QUERY: u32 = 2048;
pub const TRANSACTION_NOTIFY_ENLIST_PREPREPARE: u32 = 4096;
pub const TRANSACTION_NOTIFY_LAST_RECOVER: u32 = 8192;
pub const TRANSACTION_NOTIFY_INDOUBT: u32 = 16384;
pub const TRANSACTION_NOTIFY_PROPAGATE_PULL: u32 = 32768;
pub const TRANSACTION_NOTIFY_PROPAGATE_PUSH: u32 = 65536;
pub const TRANSACTION_NOTIFY_MARSHAL: u32 = 131072;
pub const TRANSACTION_NOTIFY_ENLIST_MASK: u32 = 262144;
pub const TRANSACTION_NOTIFY_RM_DISCONNECTED: u32 = 16777216;
pub const TRANSACTION_NOTIFY_TM_ONLINE: u32 = 33554432;
pub const TRANSACTION_NOTIFY_COMMIT_REQUEST: u32 = 67108864;
pub const TRANSACTION_NOTIFY_PROMOTE: u32 = 134217728;
pub const TRANSACTION_NOTIFY_PROMOTE_NEW: u32 = 268435456;
pub const TRANSACTION_NOTIFY_REQUEST_OUTCOME: u32 = 536870912;
pub const TRANSACTION_NOTIFY_COMMIT_FINALIZE: u32 = 1073741824;
pub const TRANSACTIONMANAGER_OBJECT_PATH: &'static [u8; 21usize] = b"\\TransactionManager\\\0";
pub const TRANSACTION_OBJECT_PATH: &'static [u8; 14usize] = b"\\Transaction\\\0";
pub const ENLISTMENT_OBJECT_PATH: &'static [u8; 13usize] = b"\\Enlistment\\\0";
pub const RESOURCE_MANAGER_OBJECT_PATH: &'static [u8; 18usize] = b"\\ResourceManager\\\0";
pub const TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED: u32 = 1;
pub const KTM_MARSHAL_BLOB_VERSION_MAJOR: u32 = 1;
pub const KTM_MARSHAL_BLOB_VERSION_MINOR: u32 = 1;
pub const MAX_TRANSACTION_DESCRIPTION_LENGTH: u32 = 64;
pub const MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH: u32 = 64;
pub const TRANSACTIONMANAGER_QUERY_INFORMATION: u32 = 1;
pub const TRANSACTIONMANAGER_SET_INFORMATION: u32 = 2;
pub const TRANSACTIONMANAGER_RECOVER: u32 = 4;
pub const TRANSACTIONMANAGER_RENAME: u32 = 8;
pub const TRANSACTIONMANAGER_CREATE_RM: u32 = 16;
pub const TRANSACTIONMANAGER_BIND_TRANSACTION: u32 = 32;
pub const TRANSACTIONMANAGER_GENERIC_READ: u32 = 131073;
pub const TRANSACTIONMANAGER_GENERIC_WRITE: u32 = 131102;
pub const TRANSACTIONMANAGER_GENERIC_EXECUTE: u32 = 131072;
pub const TRANSACTIONMANAGER_ALL_ACCESS: u32 = 983103;
pub const TRANSACTION_QUERY_INFORMATION: u32 = 1;
pub const TRANSACTION_SET_INFORMATION: u32 = 2;
pub const TRANSACTION_ENLIST: u32 = 4;
pub const TRANSACTION_COMMIT: u32 = 8;
pub const TRANSACTION_ROLLBACK: u32 = 16;
pub const TRANSACTION_PROPAGATE: u32 = 32;
pub const TRANSACTION_RIGHT_RESERVED1: u32 = 64;
pub const TRANSACTION_GENERIC_READ: u32 = 1179649;
pub const TRANSACTION_GENERIC_WRITE: u32 = 1179710;
pub const TRANSACTION_GENERIC_EXECUTE: u32 = 1179672;
pub const TRANSACTION_ALL_ACCESS: u32 = 2031679;
pub const TRANSACTION_RESOURCE_MANAGER_RIGHTS: u32 = 1179703;
pub const RESOURCEMANAGER_QUERY_INFORMATION: u32 = 1;
pub const RESOURCEMANAGER_SET_INFORMATION: u32 = 2;
pub const RESOURCEMANAGER_RECOVER: u32 = 4;
pub const RESOURCEMANAGER_ENLIST: u32 = 8;
pub const RESOURCEMANAGER_GET_NOTIFICATION: u32 = 16;
pub const RESOURCEMANAGER_REGISTER_PROTOCOL: u32 = 32;
pub const RESOURCEMANAGER_COMPLETE_PROPAGATION: u32 = 64;
pub const RESOURCEMANAGER_GENERIC_READ: u32 = 1179649;
pub const RESOURCEMANAGER_GENERIC_WRITE: u32 = 1179774;
pub const RESOURCEMANAGER_GENERIC_EXECUTE: u32 = 1179740;
pub const RESOURCEMANAGER_ALL_ACCESS: u32 = 2031743;
pub const ENLISTMENT_QUERY_INFORMATION: u32 = 1;
pub const ENLISTMENT_SET_INFORMATION: u32 = 2;
pub const ENLISTMENT_RECOVER: u32 = 4;
pub const ENLISTMENT_SUBORDINATE_RIGHTS: u32 = 8;
pub const ENLISTMENT_SUPERIOR_RIGHTS: u32 = 16;
pub const ENLISTMENT_GENERIC_READ: u32 = 131073;
pub const ENLISTMENT_GENERIC_WRITE: u32 = 131102;
pub const ENLISTMENT_GENERIC_EXECUTE: u32 = 131100;
pub const ENLISTMENT_ALL_ACCESS: u32 = 983071;
pub const ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION: u32 = 1;
pub const ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION: u32 = 2;
pub const ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION: u32 = 3;
pub const ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION: u32 = 4;
pub const ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION: u32 = 5;
pub const ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION: u32 = 6;
pub const ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION: u32 = 7;
pub const ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE: u32 = 8;
pub const ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES: u32 = 9;
pub const ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS: u32 = 10;
pub const ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO: u32 = 11;
pub const DM_UPDATE: u32 = 1;
pub const DM_COPY: u32 = 2;
pub const DM_PROMPT: u32 = 4;
pub const DM_MODIFY: u32 = 8;
pub const DM_IN_BUFFER: u32 = 8;
pub const DM_IN_PROMPT: u32 = 4;
pub const DM_OUT_BUFFER: u32 = 2;
pub const DM_OUT_DEFAULT: u32 = 1;
pub const DC_FIELDS: u32 = 1;
pub const DC_PAPERS: u32 = 2;
pub const DC_PAPERSIZE: u32 = 3;
pub const DC_MINEXTENT: u32 = 4;
pub const DC_MAXEXTENT: u32 = 5;
pub const DC_BINS: u32 = 6;
pub const DC_DUPLEX: u32 = 7;
pub const DC_SIZE: u32 = 8;
pub const DC_EXTRA: u32 = 9;
pub const DC_VERSION: u32 = 10;
pub const DC_DRIVER: u32 = 11;
pub const DC_BINNAMES: u32 = 12;
pub const DC_ENUMRESOLUTIONS: u32 = 13;
pub const DC_FILEDEPENDENCIES: u32 = 14;
pub const DC_TRUETYPE: u32 = 15;
pub const DC_PAPERNAMES: u32 = 16;
pub const DC_ORIENTATION: u32 = 17;
pub const DC_COPIES: u32 = 18;
pub const FIND_FIRST_EX_CASE_SENSITIVE: u32 = 1;
pub const FIND_FIRST_EX_LARGE_FETCH: u32 = 2;
pub const FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY: u32 = 4;
pub const LOCKFILE_FAIL_IMMEDIATELY: u32 = 1;
pub const LOCKFILE_EXCLUSIVE_LOCK: u32 = 2;
pub const PROCESS_HEAP_REGION: u32 = 1;
pub const PROCESS_HEAP_UNCOMMITTED_RANGE: u32 = 2;
pub const PROCESS_HEAP_ENTRY_BUSY: u32 = 4;
pub const PROCESS_HEAP_SEG_ALLOC: u32 = 8;
pub const PROCESS_HEAP_ENTRY_MOVEABLE: u32 = 16;
pub const PROCESS_HEAP_ENTRY_DDESHARE: u32 = 32;
pub const EXCEPTION_DEBUG_EVENT: u32 = 1;
pub const CREATE_THREAD_DEBUG_EVENT: u32 = 2;
pub const CREATE_PROCESS_DEBUG_EVENT: u32 = 3;
pub const EXIT_THREAD_DEBUG_EVENT: u32 = 4;
pub const EXIT_PROCESS_DEBUG_EVENT: u32 = 5;
pub const LOAD_DLL_DEBUG_EVENT: u32 = 6;
pub const UNLOAD_DLL_DEBUG_EVENT: u32 = 7;
pub const OUTPUT_DEBUG_STRING_EVENT: u32 = 8;
pub const RIP_EVENT: u32 = 9;
pub const LMEM_FIXED: u32 = 0;
pub const LMEM_MOVEABLE: u32 = 2;
pub const LMEM_NOCOMPACT: u32 = 16;
pub const LMEM_NODISCARD: u32 = 32;
pub const LMEM_ZEROINIT: u32 = 64;
pub const LMEM_MODIFY: u32 = 128;
pub const LMEM_DISCARDABLE: u32 = 3840;
pub const LMEM_VALID_FLAGS: u32 = 3954;
pub const LMEM_INVALID_HANDLE: u32 = 32768;
pub const LHND: u32 = 66;
pub const LPTR: u32 = 64;
pub const NONZEROLHND: u32 = 2;
pub const NONZEROLPTR: u32 = 0;
pub const LMEM_DISCARDED: u32 = 16384;
pub const LMEM_LOCKCOUNT: u32 = 255;
pub const CREATE_NEW: u32 = 1;
pub const CREATE_ALWAYS: u32 = 2;
pub const OPEN_EXISTING: u32 = 3;
pub const OPEN_ALWAYS: u32 = 4;
pub const TRUNCATE_EXISTING: u32 = 5;
pub const INIT_ONCE_CHECK_ONLY: u32 = 1;
pub const INIT_ONCE_ASYNC: u32 = 2;
pub const INIT_ONCE_INIT_FAILED: u32 = 4;
pub const INIT_ONCE_CTX_RESERVED_BITS: u32 = 2;
pub const CONDITION_VARIABLE_LOCKMODE_SHARED: u32 = 1;
pub const MUTEX_MODIFY_STATE: u32 = 1;
pub const MUTEX_ALL_ACCESS: u32 = 2031617;
pub const CREATE_MUTEX_INITIAL_OWNER: u32 = 1;
pub const CREATE_EVENT_MANUAL_RESET: u32 = 1;
pub const CREATE_EVENT_INITIAL_SET: u32 = 2;
pub const CREATE_WAITABLE_TIMER_MANUAL_RESET: u32 = 1;
pub const CREATE_WAITABLE_TIMER_HIGH_RESOLUTION: u32 = 2;
pub const SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY: u32 = 1;
pub const SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY: u32 = 2;
pub const SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE: u32 = 4;
pub const PROCESS_AFFINITY_ENABLE_AUTO_UPDATE: u32 = 1;
pub const PROC_THREAD_ATTRIBUTE_REPLACE_VALUE: u32 = 1;
pub const THREAD_POWER_THROTTLING_CURRENT_VERSION: u32 = 1;
pub const THREAD_POWER_THROTTLING_EXECUTION_SPEED: u32 = 1;
pub const THREAD_POWER_THROTTLING_VALID_FLAGS: u32 = 1;
pub const PME_CURRENT_VERSION: u32 = 1;
pub const PME_FAILFAST_ON_COMMIT_FAIL_DISABLE: u32 = 0;
pub const PME_FAILFAST_ON_COMMIT_FAIL_ENABLE: u32 = 1;
pub const PROCESS_POWER_THROTTLING_CURRENT_VERSION: u32 = 1;
pub const PROCESS_POWER_THROTTLING_EXECUTION_SPEED: u32 = 1;
pub const PROCESS_POWER_THROTTLING_VALID_FLAGS: u32 = 1;
pub const PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND: u32 = 1;
pub const PROCESS_LEAP_SECOND_INFO_VALID_FLAGS: u32 = 1;
pub const SCEX2_ALT_NETBIOS_NAME: u32 = 1;
pub const FILE_MAP_WRITE: u32 = 2;
pub const FILE_MAP_READ: u32 = 4;
pub const FILE_MAP_ALL_ACCESS: u32 = 983071;
pub const FILE_MAP_EXECUTE: u32 = 32;
pub const FILE_MAP_COPY: u32 = 1;
pub const FILE_MAP_RESERVE: u32 = 2147483648;
pub const FILE_MAP_TARGETS_INVALID: u32 = 1073741824;
pub const FILE_MAP_LARGE_PAGES: u32 = 536870912;
pub const FILE_CACHE_MAX_HARD_ENABLE: u32 = 1;
pub const FILE_CACHE_MAX_HARD_DISABLE: u32 = 2;
pub const FILE_CACHE_MIN_HARD_ENABLE: u32 = 4;
pub const FILE_CACHE_MIN_HARD_DISABLE: u32 = 8;
pub const MEHC_PATROL_SCRUBBER_PRESENT: u32 = 1;
pub const FIND_RESOURCE_DIRECTORY_TYPES: u32 = 256;
pub const FIND_RESOURCE_DIRECTORY_NAMES: u32 = 512;
pub const FIND_RESOURCE_DIRECTORY_LANGUAGES: u32 = 1024;
pub const RESOURCE_ENUM_LN: u32 = 1;
pub const RESOURCE_ENUM_MUI: u32 = 2;
pub const RESOURCE_ENUM_MUI_SYSTEM: u32 = 4;
pub const RESOURCE_ENUM_VALIDATE: u32 = 8;
pub const RESOURCE_ENUM_MODULE_EXACT: u32 = 16;
pub const SUPPORT_LANG_NUMBER: u32 = 32;
pub const GET_MODULE_HANDLE_EX_FLAG_PIN: u32 = 1;
pub const GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT: u32 = 2;
pub const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS: u32 = 4;
pub const CURRENT_IMPORT_REDIRECTION_VERSION: u32 = 1;
pub const DONT_RESOLVE_DLL_REFERENCES: u32 = 1;
pub const LOAD_LIBRARY_AS_DATAFILE: u32 = 2;
pub const LOAD_WITH_ALTERED_SEARCH_PATH: u32 = 8;
pub const LOAD_IGNORE_CODE_AUTHZ_LEVEL: u32 = 16;
pub const LOAD_LIBRARY_AS_IMAGE_RESOURCE: u32 = 32;
pub const LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE: u32 = 64;
pub const LOAD_LIBRARY_REQUIRE_SIGNED_TARGET: u32 = 128;
pub const LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR: u32 = 256;
pub const LOAD_LIBRARY_SEARCH_APPLICATION_DIR: u32 = 512;
pub const LOAD_LIBRARY_SEARCH_USER_DIRS: u32 = 1024;
pub const LOAD_LIBRARY_SEARCH_SYSTEM32: u32 = 2048;
pub const LOAD_LIBRARY_SEARCH_DEFAULT_DIRS: u32 = 4096;
pub const LOAD_LIBRARY_SAFE_CURRENT_DIRS: u32 = 8192;
pub const LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER: u32 = 16384;
pub const LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY: u32 = 32768;
pub const PRIVATE_NAMESPACE_FLAG_DESTROY: u32 = 1;
pub const FILE_BEGIN: u32 = 0;
pub const FILE_CURRENT: u32 = 1;
pub const FILE_END: u32 = 2;
pub const FILE_FLAG_WRITE_THROUGH: u32 = 2147483648;
pub const FILE_FLAG_OVERLAPPED: u32 = 1073741824;
pub const FILE_FLAG_NO_BUFFERING: u32 = 536870912;
pub const FILE_FLAG_RANDOM_ACCESS: u32 = 268435456;
pub const FILE_FLAG_SEQUENTIAL_SCAN: u32 = 134217728;
pub const FILE_FLAG_DELETE_ON_CLOSE: u32 = 67108864;
pub const FILE_FLAG_BACKUP_SEMANTICS: u32 = 33554432;
pub const FILE_FLAG_POSIX_SEMANTICS: u32 = 16777216;
pub const FILE_FLAG_SESSION_AWARE: u32 = 8388608;
pub const FILE_FLAG_OPEN_REPARSE_POINT: u32 = 2097152;
pub const FILE_FLAG_OPEN_NO_RECALL: u32 = 1048576;
pub const FILE_FLAG_FIRST_PIPE_INSTANCE: u32 = 524288;
pub const FILE_FLAG_OPEN_REQUIRING_OPLOCK: u32 = 262144;
pub const PROGRESS_CONTINUE: u32 = 0;
pub const PROGRESS_CANCEL: u32 = 1;
pub const PROGRESS_STOP: u32 = 2;
pub const PROGRESS_QUIET: u32 = 3;
pub const CALLBACK_CHUNK_FINISHED: u32 = 0;
pub const CALLBACK_STREAM_SWITCH: u32 = 1;
pub const COPY_FILE_FAIL_IF_EXISTS: u32 = 1;
pub const COPY_FILE_RESTARTABLE: u32 = 2;
pub const COPY_FILE_OPEN_SOURCE_FOR_WRITE: u32 = 4;
pub const COPY_FILE_ALLOW_DECRYPTED_DESTINATION: u32 = 8;
pub const COPY_FILE_COPY_SYMLINK: u32 = 2048;
pub const COPY_FILE_NO_BUFFERING: u32 = 4096;
pub const COPY_FILE_REQUEST_SECURITY_PRIVILEGES: u32 = 8192;
pub const COPY_FILE_RESUME_FROM_PAUSE: u32 = 16384;
pub const COPY_FILE_NO_OFFLOAD: u32 = 262144;
pub const COPY_FILE_IGNORE_EDP_BLOCK: u32 = 4194304;
pub const COPY_FILE_IGNORE_SOURCE_ENCRYPTION: u32 = 8388608;
pub const REPLACEFILE_WRITE_THROUGH: u32 = 1;
pub const REPLACEFILE_IGNORE_MERGE_ERRORS: u32 = 2;
pub const REPLACEFILE_IGNORE_ACL_ERRORS: u32 = 4;
pub const PIPE_ACCESS_INBOUND: u32 = 1;
pub const PIPE_ACCESS_OUTBOUND: u32 = 2;
pub const PIPE_ACCESS_DUPLEX: u32 = 3;
pub const PIPE_CLIENT_END: u32 = 0;
pub const PIPE_SERVER_END: u32 = 1;
pub const PIPE_WAIT: u32 = 0;
pub const PIPE_NOWAIT: u32 = 1;
pub const PIPE_READMODE_BYTE: u32 = 0;
pub const PIPE_READMODE_MESSAGE: u32 = 2;
pub const PIPE_TYPE_BYTE: u32 = 0;
pub const PIPE_TYPE_MESSAGE: u32 = 4;
pub const PIPE_ACCEPT_REMOTE_CLIENTS: u32 = 0;
pub const PIPE_REJECT_REMOTE_CLIENTS: u32 = 8;
pub const PIPE_UNLIMITED_INSTANCES: u32 = 255;
pub const SECURITY_CONTEXT_TRACKING: u32 = 262144;
pub const SECURITY_EFFECTIVE_ONLY: u32 = 524288;
pub const SECURITY_SQOS_PRESENT: u32 = 1048576;
pub const SECURITY_VALID_SQOS_FLAGS: u32 = 2031616;
pub const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS: u32 = 1;
pub const FAIL_FAST_NO_HARD_ERROR_DLG: u32 = 2;
pub const DTR_CONTROL_DISABLE: u32 = 0;
pub const DTR_CONTROL_ENABLE: u32 = 1;
pub const DTR_CONTROL_HANDSHAKE: u32 = 2;
pub const RTS_CONTROL_DISABLE: u32 = 0;
pub const RTS_CONTROL_ENABLE: u32 = 1;
pub const RTS_CONTROL_HANDSHAKE: u32 = 2;
pub const RTS_CONTROL_TOGGLE: u32 = 3;
pub const GMEM_FIXED: u32 = 0;
pub const GMEM_MOVEABLE: u32 = 2;
pub const GMEM_NOCOMPACT: u32 = 16;
pub const GMEM_NODISCARD: u32 = 32;
pub const GMEM_ZEROINIT: u32 = 64;
pub const GMEM_MODIFY: u32 = 128;
pub const GMEM_DISCARDABLE: u32 = 256;
pub const GMEM_NOT_BANKED: u32 = 4096;
pub const GMEM_SHARE: u32 = 8192;
pub const GMEM_DDESHARE: u32 = 8192;
pub const GMEM_NOTIFY: u32 = 16384;
pub const GMEM_LOWER: u32 = 4096;
pub const GMEM_VALID_FLAGS: u32 = 32626;
pub const GMEM_INVALID_HANDLE: u32 = 32768;
pub const GHND: u32 = 66;
pub const GPTR: u32 = 64;
pub const GMEM_DISCARDED: u32 = 16384;
pub const GMEM_LOCKCOUNT: u32 = 255;
pub const DEBUG_PROCESS: u32 = 1;
pub const DEBUG_ONLY_THIS_PROCESS: u32 = 2;
pub const CREATE_SUSPENDED: u32 = 4;
pub const DETACHED_PROCESS: u32 = 8;
pub const CREATE_NEW_CONSOLE: u32 = 16;
pub const NORMAL_PRIORITY_CLASS: u32 = 32;
pub const IDLE_PRIORITY_CLASS: u32 = 64;
pub const HIGH_PRIORITY_CLASS: u32 = 128;
pub const REALTIME_PRIORITY_CLASS: u32 = 256;
pub const CREATE_NEW_PROCESS_GROUP: u32 = 512;
pub const CREATE_UNICODE_ENVIRONMENT: u32 = 1024;
pub const CREATE_SEPARATE_WOW_VDM: u32 = 2048;
pub const CREATE_SHARED_WOW_VDM: u32 = 4096;
pub const CREATE_FORCEDOS: u32 = 8192;
pub const BELOW_NORMAL_PRIORITY_CLASS: u32 = 16384;
pub const ABOVE_NORMAL_PRIORITY_CLASS: u32 = 32768;
pub const INHERIT_PARENT_AFFINITY: u32 = 65536;
pub const INHERIT_CALLER_PRIORITY: u32 = 131072;
pub const CREATE_PROTECTED_PROCESS: u32 = 262144;
pub const EXTENDED_STARTUPINFO_PRESENT: u32 = 524288;
pub const PROCESS_MODE_BACKGROUND_BEGIN: u32 = 1048576;
pub const PROCESS_MODE_BACKGROUND_END: u32 = 2097152;
pub const CREATE_SECURE_PROCESS: u32 = 4194304;
pub const CREATE_BREAKAWAY_FROM_JOB: u32 = 16777216;
pub const CREATE_PRESERVE_CODE_AUTHZ_LEVEL: u32 = 33554432;
pub const CREATE_DEFAULT_ERROR_MODE: u32 = 67108864;
pub const CREATE_NO_WINDOW: u32 = 134217728;
pub const PROFILE_USER: u32 = 268435456;
pub const PROFILE_KERNEL: u32 = 536870912;
pub const PROFILE_SERVER: u32 = 1073741824;
pub const CREATE_IGNORE_SYSTEM_DEFAULT: u32 = 2147483648;
pub const STACK_SIZE_PARAM_IS_A_RESERVATION: u32 = 65536;
pub const THREAD_PRIORITY_LOWEST: i32 = -2;
pub const THREAD_PRIORITY_BELOW_NORMAL: i32 = -1;
pub const THREAD_PRIORITY_NORMAL: u32 = 0;
pub const THREAD_PRIORITY_HIGHEST: u32 = 2;
pub const THREAD_PRIORITY_ABOVE_NORMAL: u32 = 1;
pub const THREAD_PRIORITY_ERROR_RETURN: u32 = 2147483647;
pub const THREAD_PRIORITY_TIME_CRITICAL: u32 = 15;
pub const THREAD_PRIORITY_IDLE: i32 = -15;
pub const THREAD_MODE_BACKGROUND_BEGIN: u32 = 65536;
pub const THREAD_MODE_BACKGROUND_END: u32 = 131072;
pub const VOLUME_NAME_DOS: u32 = 0;
pub const VOLUME_NAME_GUID: u32 = 1;
pub const VOLUME_NAME_NT: u32 = 2;
pub const VOLUME_NAME_NONE: u32 = 4;
pub const FILE_NAME_NORMALIZED: u32 = 0;
pub const FILE_NAME_OPENED: u32 = 8;
pub const DRIVE_UNKNOWN: u32 = 0;
pub const DRIVE_NO_ROOT_DIR: u32 = 1;
pub const DRIVE_REMOVABLE: u32 = 2;
pub const DRIVE_FIXED: u32 = 3;
pub const DRIVE_REMOTE: u32 = 4;
pub const DRIVE_CDROM: u32 = 5;
pub const DRIVE_RAMDISK: u32 = 6;
pub const FILE_TYPE_UNKNOWN: u32 = 0;
pub const FILE_TYPE_DISK: u32 = 1;
pub const FILE_TYPE_CHAR: u32 = 2;
pub const FILE_TYPE_PIPE: u32 = 3;
pub const FILE_TYPE_REMOTE: u32 = 32768;
pub const NOPARITY: u32 = 0;
pub const ODDPARITY: u32 = 1;
pub const EVENPARITY: u32 = 2;
pub const MARKPARITY: u32 = 3;
pub const SPACEPARITY: u32 = 4;
pub const ONESTOPBIT: u32 = 0;
pub const ONE5STOPBITS: u32 = 1;
pub const TWOSTOPBITS: u32 = 2;
pub const IGNORE: u32 = 0;
pub const INFINITE: u32 = 4294967295;
pub const CBR_110: u32 = 110;
pub const CBR_300: u32 = 300;
pub const CBR_600: u32 = 600;
pub const CBR_1200: u32 = 1200;
pub const CBR_2400: u32 = 2400;
pub const CBR_4800: u32 = 4800;
pub const CBR_9600: u32 = 9600;
pub const CBR_14400: u32 = 14400;
pub const CBR_19200: u32 = 19200;
pub const CBR_38400: u32 = 38400;
pub const CBR_56000: u32 = 56000;
pub const CBR_57600: u32 = 57600;
pub const CBR_115200: u32 = 115200;
pub const CBR_128000: u32 = 128000;
pub const CBR_256000: u32 = 256000;
pub const CE_RXOVER: u32 = 1;
pub const CE_OVERRUN: u32 = 2;
pub const CE_RXPARITY: u32 = 4;
pub const CE_FRAME: u32 = 8;
pub const CE_BREAK: u32 = 16;
pub const CE_TXFULL: u32 = 256;
pub const CE_PTO: u32 = 512;
pub const CE_IOE: u32 = 1024;
pub const CE_DNS: u32 = 2048;
pub const CE_OOP: u32 = 4096;
pub const CE_MODE: u32 = 32768;
pub const IE_BADID: i32 = -1;
pub const IE_OPEN: i32 = -2;
pub const IE_NOPEN: i32 = -3;
pub const IE_MEMORY: i32 = -4;
pub const IE_DEFAULT: i32 = -5;
pub const IE_HARDWARE: i32 = -10;
pub const IE_BYTESIZE: i32 = -11;
pub const IE_BAUDRATE: i32 = -12;
pub const EV_RXCHAR: u32 = 1;
pub const EV_RXFLAG: u32 = 2;
pub const EV_TXEMPTY: u32 = 4;
pub const EV_CTS: u32 = 8;
pub const EV_DSR: u32 = 16;
pub const EV_RLSD: u32 = 32;
pub const EV_BREAK: u32 = 64;
pub const EV_ERR: u32 = 128;
pub const EV_RING: u32 = 256;
pub const EV_PERR: u32 = 512;
pub const EV_RX80FULL: u32 = 1024;
pub const EV_EVENT1: u32 = 2048;
pub const EV_EVENT2: u32 = 4096;
pub const SETXOFF: u32 = 1;
pub const SETXON: u32 = 2;
pub const SETRTS: u32 = 3;
pub const CLRRTS: u32 = 4;
pub const SETDTR: u32 = 5;
pub const CLRDTR: u32 = 6;
pub const RESETDEV: u32 = 7;
pub const SETBREAK: u32 = 8;
pub const CLRBREAK: u32 = 9;
pub const PURGE_TXABORT: u32 = 1;
pub const PURGE_RXABORT: u32 = 2;
pub const PURGE_TXCLEAR: u32 = 4;
pub const PURGE_RXCLEAR: u32 = 8;
pub const LPTx: u32 = 128;
pub const S_QUEUEEMPTY: u32 = 0;
pub const S_THRESHOLD: u32 = 1;
pub const S_ALLTHRESHOLD: u32 = 2;
pub const S_NORMAL: u32 = 0;
pub const S_LEGATO: u32 = 1;
pub const S_STACCATO: u32 = 2;
pub const S_PERIOD512: u32 = 0;
pub const S_PERIOD1024: u32 = 1;
pub const S_PERIOD2048: u32 = 2;
pub const S_PERIODVOICE: u32 = 3;
pub const S_WHITE512: u32 = 4;
pub const S_WHITE1024: u32 = 5;
pub const S_WHITE2048: u32 = 6;
pub const S_WHITEVOICE: u32 = 7;
pub const S_SERDVNA: i32 = -1;
pub const S_SEROFM: i32 = -2;
pub const S_SERMACT: i32 = -3;
pub const S_SERQFUL: i32 = -4;
pub const S_SERBDNT: i32 = -5;
pub const S_SERDLN: i32 = -6;
pub const S_SERDCC: i32 = -7;
pub const S_SERDTP: i32 = -8;
pub const S_SERDVL: i32 = -9;
pub const S_SERDMD: i32 = -10;
pub const S_SERDSH: i32 = -11;
pub const S_SERDPT: i32 = -12;
pub const S_SERDFQ: i32 = -13;
pub const S_SERDDR: i32 = -14;
pub const S_SERDSR: i32 = -15;
pub const S_SERDST: i32 = -16;
pub const NMPWAIT_WAIT_FOREVER: u32 = 4294967295;
pub const NMPWAIT_NOWAIT: u32 = 1;
pub const NMPWAIT_USE_DEFAULT_WAIT: u32 = 0;
pub const FS_CASE_IS_PRESERVED: u32 = 2;
pub const FS_CASE_SENSITIVE: u32 = 1;
pub const FS_UNICODE_STORED_ON_DISK: u32 = 4;
pub const FS_PERSISTENT_ACLS: u32 = 8;
pub const FS_VOL_IS_COMPRESSED: u32 = 32768;
pub const FS_FILE_COMPRESSION: u32 = 16;
pub const FS_FILE_ENCRYPTION: u32 = 131072;
pub const OF_READ: u32 = 0;
pub const OF_WRITE: u32 = 1;
pub const OF_READWRITE: u32 = 2;
pub const OF_SHARE_COMPAT: u32 = 0;
pub const OF_SHARE_EXCLUSIVE: u32 = 16;
pub const OF_SHARE_DENY_WRITE: u32 = 32;
pub const OF_SHARE_DENY_READ: u32 = 48;
pub const OF_SHARE_DENY_NONE: u32 = 64;
pub const OF_PARSE: u32 = 256;
pub const OF_DELETE: u32 = 512;
pub const OF_VERIFY: u32 = 1024;
pub const OF_CANCEL: u32 = 2048;
pub const OF_CREATE: u32 = 4096;
pub const OF_PROMPT: u32 = 8192;
pub const OF_EXIST: u32 = 16384;
pub const OF_REOPEN: u32 = 32768;
pub const OFS_MAXPATHNAME: u32 = 128;
pub const MAXINTATOM: u32 = 49152;
pub const SCS_32BIT_BINARY: u32 = 0;
pub const SCS_DOS_BINARY: u32 = 1;
pub const SCS_WOW_BINARY: u32 = 2;
pub const SCS_PIF_BINARY: u32 = 3;
pub const SCS_POSIX_BINARY: u32 = 4;
pub const SCS_OS216_BINARY: u32 = 5;
pub const SCS_64BIT_BINARY: u32 = 6;
pub const SCS_THIS_PLATFORM_BINARY: u32 = 6;
pub const FIBER_FLAG_FLOAT_SWITCH: u32 = 1;
pub const UMS_VERSION: u32 = 256;
pub const PROCESS_DEP_ENABLE: u32 = 1;
pub const PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION: u32 = 2;
pub const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS: u32 = 1;
pub const FILE_SKIP_SET_EVENT_ON_HANDLE: u32 = 2;
pub const SEM_FAILCRITICALERRORS: u32 = 1;
pub const SEM_NOGPFAULTERRORBOX: u32 = 2;
pub const SEM_NOALIGNMENTFAULTEXCEPT: u32 = 4;
pub const SEM_NOOPENFILEERRORBOX: u32 = 32768;
pub const CRITICAL_SECTION_NO_DEBUG_INFO: u32 = 16777216;
pub const HANDLE_FLAG_INHERIT: u32 = 1;
pub const HANDLE_FLAG_PROTECT_FROM_CLOSE: u32 = 2;
pub const HINSTANCE_ERROR: u32 = 32;
pub const GET_TAPE_MEDIA_INFORMATION: u32 = 0;
pub const GET_TAPE_DRIVE_INFORMATION: u32 = 1;
pub const SET_TAPE_MEDIA_INFORMATION: u32 = 0;
pub const SET_TAPE_DRIVE_INFORMATION: u32 = 1;
pub const FORMAT_MESSAGE_ALLOCATE_BUFFER: u32 = 256;
pub const FORMAT_MESSAGE_IGNORE_INSERTS: u32 = 512;
pub const FORMAT_MESSAGE_FROM_STRING: u32 = 1024;
pub const FORMAT_MESSAGE_FROM_HMODULE: u32 = 2048;
pub const FORMAT_MESSAGE_FROM_SYSTEM: u32 = 4096;
pub const FORMAT_MESSAGE_ARGUMENT_ARRAY: u32 = 8192;
pub const FORMAT_MESSAGE_MAX_WIDTH_MASK: u32 = 255;
pub const FILE_ENCRYPTABLE: u32 = 0;
pub const FILE_IS_ENCRYPTED: u32 = 1;
pub const FILE_SYSTEM_ATTR: u32 = 2;
pub const FILE_ROOT_DIR: u32 = 3;
pub const FILE_SYSTEM_DIR: u32 = 4;
pub const FILE_UNKNOWN: u32 = 5;
pub const FILE_SYSTEM_NOT_SUPPORT: u32 = 6;
pub const FILE_USER_DISALLOWED: u32 = 7;
pub const FILE_READ_ONLY: u32 = 8;
pub const FILE_DIR_DISALLOWED: u32 = 9;
pub const EFS_USE_RECOVERY_KEYS: u32 = 1;
pub const CREATE_FOR_IMPORT: u32 = 1;
pub const CREATE_FOR_DIR: u32 = 2;
pub const OVERWRITE_HIDDEN: u32 = 4;
pub const EFSRPC_SECURE_ONLY: u32 = 8;
pub const EFS_DROP_ALTERNATE_STREAMS: u32 = 16;
pub const BACKUP_INVALID: u32 = 0;
pub const BACKUP_DATA: u32 = 1;
pub const BACKUP_EA_DATA: u32 = 2;
pub const BACKUP_SECURITY_DATA: u32 = 3;
pub const BACKUP_ALTERNATE_DATA: u32 = 4;
pub const BACKUP_LINK: u32 = 5;
pub const BACKUP_PROPERTY_DATA: u32 = 6;
pub const BACKUP_OBJECT_ID: u32 = 7;
pub const BACKUP_REPARSE_DATA: u32 = 8;
pub const BACKUP_SPARSE_BLOCK: u32 = 9;
pub const BACKUP_TXFS_DATA: u32 = 10;
pub const BACKUP_GHOSTED_FILE_EXTENTS: u32 = 11;
pub const STREAM_NORMAL_ATTRIBUTE: u32 = 0;
pub const STREAM_MODIFIED_WHEN_READ: u32 = 1;
pub const STREAM_CONTAINS_SECURITY: u32 = 2;
pub const STREAM_CONTAINS_PROPERTIES: u32 = 4;
pub const STREAM_SPARSE_ATTRIBUTE: u32 = 8;
pub const STREAM_CONTAINS_GHOSTED_FILE_EXTENTS: u32 = 16;
pub const STARTF_USESHOWWINDOW: u32 = 1;
pub const STARTF_USESIZE: u32 = 2;
pub const STARTF_USEPOSITION: u32 = 4;
pub const STARTF_USECOUNTCHARS: u32 = 8;
pub const STARTF_USEFILLATTRIBUTE: u32 = 16;
pub const STARTF_RUNFULLSCREEN: u32 = 32;
pub const STARTF_FORCEONFEEDBACK: u32 = 64;
pub const STARTF_FORCEOFFFEEDBACK: u32 = 128;
pub const STARTF_USESTDHANDLES: u32 = 256;
pub const STARTF_USEHOTKEY: u32 = 512;
pub const STARTF_TITLEISLINKNAME: u32 = 2048;
pub const STARTF_TITLEISAPPID: u32 = 4096;
pub const STARTF_PREVENTPINNING: u32 = 8192;
pub const STARTF_UNTRUSTEDSOURCE: u32 = 32768;
pub const SHUTDOWN_NORETRY: u32 = 1;
pub const PROTECTION_LEVEL_WINTCB_LIGHT: u32 = 0;
pub const PROTECTION_LEVEL_WINDOWS: u32 = 1;
pub const PROTECTION_LEVEL_WINDOWS_LIGHT: u32 = 2;
pub const PROTECTION_LEVEL_ANTIMALWARE_LIGHT: u32 = 3;
pub const PROTECTION_LEVEL_LSA_LIGHT: u32 = 4;
pub const PROTECTION_LEVEL_WINTCB: u32 = 5;
pub const PROTECTION_LEVEL_CODEGEN_LIGHT: u32 = 6;
pub const PROTECTION_LEVEL_AUTHENTICODE: u32 = 7;
pub const PROTECTION_LEVEL_PPL_APP: u32 = 8;
pub const PROTECTION_LEVEL_SAME: u32 = 4294967295;
pub const PROTECTION_LEVEL_NONE: u32 = 4294967294;
pub const PROCESS_NAME_NATIVE: u32 = 1;
pub const PROC_THREAD_ATTRIBUTE_NUMBER: u32 = 65535;
pub const PROC_THREAD_ATTRIBUTE_THREAD: u32 = 65536;
pub const PROC_THREAD_ATTRIBUTE_INPUT: u32 = 131072;
pub const PROC_THREAD_ATTRIBUTE_ADDITIVE: u32 = 262144;
pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE: u32 = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE: u32 = 2;
pub const PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE: u32 = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK: u32 = 768;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON: u32 = 256;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF: u32 = 512;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS: u32 = 768;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK: u32 = 12288;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON: u32 = 4096;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF: u32 = 8192;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED: u32 = 12288;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK: u32 = 196608;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON: u32 = 65536;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF: u32 = 131072;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED: u32 = 196608;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK: u32 = 3145728;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON: u32 = 1048576;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF: u32 = 2097152;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED: u32 = 3145728;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK: u32 = 50331648;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON: u32 = 16777216;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF: u32 = 33554432;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED: u32 = 50331648;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK: u32 = 805306368;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON: u32 = 268435456;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF: u32 = 536870912;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED: u32 = 805306368;
pub const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED: u32 = 1;
pub const PROCESS_CREATION_CHILD_PROCESS_OVERRIDE: u32 = 2;
pub const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE: u32 = 4;
pub const PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT: u32 = 1;
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE: u32 = 1;
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE: u32 = 2;
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE: u32 = 4;
pub const ATOM_FLAG_GLOBAL: u32 = 2;
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A: &'static [u8; 25usize] =
    b"GetSystemWow64DirectoryA\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W: &'static [u8; 25usize] =
    b"GetSystemWow64DirectoryA\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A: &'static [u8; 25usize] =
    b"GetSystemWow64DirectoryW\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W: &'static [u8; 25usize] =
    b"GetSystemWow64DirectoryW\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A: &'static [u8; 25usize] =
    b"GetSystemWow64DirectoryA\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W: &'static [u8; 25usize] =
    b"GetSystemWow64DirectoryA\0";
pub const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE: u32 = 1;
pub const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE: u32 = 65536;
pub const BASE_SEARCH_PATH_PERMANENT: u32 = 32768;
pub const BASE_SEARCH_PATH_INVALID_FLAGS: i32 = -98306;
pub const DDD_RAW_TARGET_PATH: u32 = 1;
pub const DDD_REMOVE_DEFINITION: u32 = 2;
pub const DDD_EXACT_MATCH_ON_REMOVE: u32 = 4;
pub const DDD_NO_BROADCAST_SYSTEM: u32 = 8;
pub const DDD_LUID_BROADCAST_DRIVE: u32 = 16;
pub const COPYFILE2_MESSAGE_COPY_OFFLOAD: u32 = 1;
pub const MOVEFILE_REPLACE_EXISTING: u32 = 1;
pub const MOVEFILE_COPY_ALLOWED: u32 = 2;
pub const MOVEFILE_DELAY_UNTIL_REBOOT: u32 = 4;
pub const MOVEFILE_WRITE_THROUGH: u32 = 8;
pub const MOVEFILE_CREATE_HARDLINK: u32 = 16;
pub const MOVEFILE_FAIL_IF_NOT_TRACKABLE: u32 = 32;
pub const EVENTLOG_FULL_INFO: u32 = 0;
pub const OPERATION_API_VERSION: u32 = 1;
pub const OPERATION_START_TRACE_CURRENT_THREAD: u32 = 1;
pub const OPERATION_END_DISCARD: u32 = 1;
pub const MAX_COMPUTERNAME_LENGTH: u32 = 15;
pub const LOGON32_LOGON_INTERACTIVE: u32 = 2;
pub const LOGON32_LOGON_NETWORK: u32 = 3;
pub const LOGON32_LOGON_BATCH: u32 = 4;
pub const LOGON32_LOGON_SERVICE: u32 = 5;
pub const LOGON32_LOGON_UNLOCK: u32 = 7;
pub const LOGON32_LOGON_NETWORK_CLEARTEXT: u32 = 8;
pub const LOGON32_LOGON_NEW_CREDENTIALS: u32 = 9;
pub const LOGON32_PROVIDER_DEFAULT: u32 = 0;
pub const LOGON32_PROVIDER_WINNT35: u32 = 1;
pub const LOGON32_PROVIDER_WINNT40: u32 = 2;
pub const LOGON32_PROVIDER_WINNT50: u32 = 3;
pub const LOGON32_PROVIDER_VIRTUAL: u32 = 4;
pub const LOGON_WITH_PROFILE: u32 = 1;
pub const LOGON_NETCREDENTIALS_ONLY: u32 = 2;
pub const LOGON_ZERO_PASSWORD_BUFFER: u32 = 2147483648;
pub const HW_PROFILE_GUIDLEN: u32 = 39;
pub const MAX_PROFILE_LEN: u32 = 80;
pub const DOCKINFO_UNDOCKED: u32 = 1;
pub const DOCKINFO_DOCKED: u32 = 2;
pub const DOCKINFO_USER_SUPPLIED: u32 = 4;
pub const DOCKINFO_USER_UNDOCKED: u32 = 5;
pub const DOCKINFO_USER_DOCKED: u32 = 6;
pub const FACILITY_NULL: u32 = 0;
pub const FACILITY_RPC: u32 = 1;
pub const FACILITY_DISPATCH: u32 = 2;
pub const FACILITY_STORAGE: u32 = 3;
pub const FACILITY_ITF: u32 = 4;
pub const FACILITY_WIN32: u32 = 7;
pub const FACILITY_WINDOWS: u32 = 8;
pub const FACILITY_SSPI: u32 = 9;
pub const FACILITY_SECURITY: u32 = 9;
pub const FACILITY_CONTROL: u32 = 10;
pub const FACILITY_CERT: u32 = 11;
pub const FACILITY_INTERNET: u32 = 12;
pub const FACILITY_MEDIASERVER: u32 = 13;
pub const FACILITY_MSMQ: u32 = 14;
pub const FACILITY_SETUPAPI: u32 = 15;
pub const FACILITY_SCARD: u32 = 16;
pub const FACILITY_COMPLUS: u32 = 17;
pub const FACILITY_AAF: u32 = 18;
pub const FACILITY_URT: u32 = 19;
pub const FACILITY_ACS: u32 = 20;
pub const FACILITY_DPLAY: u32 = 21;
pub const FACILITY_UMI: u32 = 22;
pub const FACILITY_SXS: u32 = 23;
pub const FACILITY_WINDOWS_CE: u32 = 24;
pub const FACILITY_HTTP: u32 = 25;
pub const FACILITY_USERMODE_COMMONLOG: u32 = 26;
pub const FACILITY_WER: u32 = 27;
pub const FACILITY_USERMODE_FILTER_MANAGER: u32 = 31;
pub const FACILITY_BACKGROUNDCOPY: u32 = 32;
pub const FACILITY_CONFIGURATION: u32 = 33;
pub const FACILITY_WIA: u32 = 33;
pub const FACILITY_STATE_MANAGEMENT: u32 = 34;
pub const FACILITY_METADIRECTORY: u32 = 35;
pub const FACILITY_WINDOWSUPDATE: u32 = 36;
pub const FACILITY_DIRECTORYSERVICE: u32 = 37;
pub const FACILITY_GRAPHICS: u32 = 38;
pub const FACILITY_SHELL: u32 = 39;
pub const FACILITY_NAP: u32 = 39;
pub const FACILITY_TPM_SERVICES: u32 = 40;
pub const FACILITY_TPM_SOFTWARE: u32 = 41;
pub const FACILITY_UI: u32 = 42;
pub const FACILITY_XAML: u32 = 43;
pub const FACILITY_ACTION_QUEUE: u32 = 44;
pub const FACILITY_PLA: u32 = 48;
pub const FACILITY_WINDOWS_SETUP: u32 = 48;
pub const FACILITY_FVE: u32 = 49;
pub const FACILITY_FWP: u32 = 50;
pub const FACILITY_WINRM: u32 = 51;
pub const FACILITY_NDIS: u32 = 52;
pub const FACILITY_USERMODE_HYPERVISOR: u32 = 53;
pub const FACILITY_CMI: u32 = 54;
pub const FACILITY_USERMODE_VIRTUALIZATION: u32 = 55;
pub const FACILITY_USERMODE_VOLMGR: u32 = 56;
pub const FACILITY_BCD: u32 = 57;
pub const FACILITY_USERMODE_VHD: u32 = 58;
pub const FACILITY_USERMODE_HNS: u32 = 59;
pub const FACILITY_SDIAG: u32 = 60;
pub const FACILITY_WEBSERVICES: u32 = 61;
pub const FACILITY_WINPE: u32 = 61;
pub const FACILITY_WPN: u32 = 62;
pub const FACILITY_WINDOWS_STORE: u32 = 63;
pub const FACILITY_INPUT: u32 = 64;
pub const FACILITY_EAP: u32 = 66;
pub const FACILITY_WINDOWS_DEFENDER: u32 = 80;
pub const FACILITY_OPC: u32 = 81;
pub const FACILITY_XPS: u32 = 82;
pub const FACILITY_MBN: u32 = 84;
pub const FACILITY_POWERSHELL: u32 = 84;
pub const FACILITY_RAS: u32 = 83;
pub const FACILITY_P2P_INT: u32 = 98;
pub const FACILITY_P2P: u32 = 99;
pub const FACILITY_DAF: u32 = 100;
pub const FACILITY_BLUETOOTH_ATT: u32 = 101;
pub const FACILITY_AUDIO: u32 = 102;
pub const FACILITY_STATEREPOSITORY: u32 = 103;
pub const FACILITY_VISUALCPP: u32 = 109;
pub const FACILITY_SCRIPT: u32 = 112;
pub const FACILITY_PARSE: u32 = 113;
pub const FACILITY_BLB: u32 = 120;
pub const FACILITY_BLB_CLI: u32 = 121;
pub const FACILITY_WSBAPP: u32 = 122;
pub const FACILITY_BLBUI: u32 = 128;
pub const FACILITY_USN: u32 = 129;
pub const FACILITY_USERMODE_VOLSNAP: u32 = 130;
pub const FACILITY_TIERING: u32 = 131;
pub const FACILITY_WSB_ONLINE: u32 = 133;
pub const FACILITY_ONLINE_ID: u32 = 134;
pub const FACILITY_DEVICE_UPDATE_AGENT: u32 = 135;
pub const FACILITY_DRVSERVICING: u32 = 136;
pub const FACILITY_DLS: u32 = 153;
pub const FACILITY_DELIVERY_OPTIMIZATION: u32 = 208;
pub const FACILITY_USERMODE_SPACES: u32 = 231;
pub const FACILITY_USER_MODE_SECURITY_CORE: u32 = 232;
pub const FACILITY_USERMODE_LICENSING: u32 = 234;
pub const FACILITY_SOS: u32 = 160;
pub const FACILITY_DEBUGGERS: u32 = 176;
pub const FACILITY_SPP: u32 = 256;
pub const FACILITY_RESTORE: u32 = 256;
pub const FACILITY_DMSERVER: u32 = 256;
pub const FACILITY_DEPLOYMENT_SERVICES_SERVER: u32 = 257;
pub const FACILITY_DEPLOYMENT_SERVICES_IMAGING: u32 = 258;
pub const FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT: u32 = 259;
pub const FACILITY_DEPLOYMENT_SERVICES_UTIL: u32 = 260;
pub const FACILITY_DEPLOYMENT_SERVICES_BINLSVC: u32 = 261;
pub const FACILITY_DEPLOYMENT_SERVICES_PXE: u32 = 263;
pub const FACILITY_DEPLOYMENT_SERVICES_TFTP: u32 = 264;
pub const FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT: u32 = 272;
pub const FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING: u32 = 278;
pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER: u32 = 289;
pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT: u32 = 290;
pub const FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER: u32 = 293;
pub const FACILITY_LINGUISTIC_SERVICES: u32 = 305;
pub const FACILITY_AUDIOSTREAMING: u32 = 1094;
pub const FACILITY_ACCELERATOR: u32 = 1536;
pub const FACILITY_WMAAECMA: u32 = 1996;
pub const FACILITY_DIRECTMUSIC: u32 = 2168;
pub const FACILITY_DIRECT3D10: u32 = 2169;
pub const FACILITY_DXGI: u32 = 2170;
pub const FACILITY_DXGI_DDI: u32 = 2171;
pub const FACILITY_DIRECT3D11: u32 = 2172;
pub const FACILITY_DIRECT3D11_DEBUG: u32 = 2173;
pub const FACILITY_DIRECT3D12: u32 = 2174;
pub const FACILITY_DIRECT3D12_DEBUG: u32 = 2175;
pub const FACILITY_LEAP: u32 = 2184;
pub const FACILITY_AUDCLNT: u32 = 2185;
pub const FACILITY_WINCODEC_DWRITE_DWM: u32 = 2200;
pub const FACILITY_WINML: u32 = 2192;
pub const FACILITY_DIRECT2D: u32 = 2201;
pub const FACILITY_DEFRAG: u32 = 2304;
pub const FACILITY_USERMODE_SDBUS: u32 = 2305;
pub const FACILITY_JSCRIPT: u32 = 2306;
pub const FACILITY_PIDGENX: u32 = 2561;
pub const FACILITY_EAS: u32 = 85;
pub const FACILITY_WEB: u32 = 885;
pub const FACILITY_WEB_SOCKET: u32 = 886;
pub const FACILITY_MOBILE: u32 = 1793;
pub const FACILITY_SQLITE: u32 = 1967;
pub const FACILITY_UTC: u32 = 1989;
pub const FACILITY_WEP: u32 = 2049;
pub const FACILITY_SYNCENGINE: u32 = 2050;
pub const FACILITY_XBOX: u32 = 2339;
pub const FACILITY_PIX: u32 = 2748;
pub const ERROR_SUCCESS: u32 = 0;
pub const NO_ERROR: u32 = 0;
pub const ERROR_INVALID_FUNCTION: u32 = 1;
pub const ERROR_FILE_NOT_FOUND: u32 = 2;
pub const ERROR_PATH_NOT_FOUND: u32 = 3;
pub const ERROR_TOO_MANY_OPEN_FILES: u32 = 4;
pub const ERROR_ACCESS_DENIED: u32 = 5;
pub const ERROR_INVALID_HANDLE: u32 = 6;
pub const ERROR_ARENA_TRASHED: u32 = 7;
pub const ERROR_NOT_ENOUGH_MEMORY: u32 = 8;
pub const ERROR_INVALID_BLOCK: u32 = 9;
pub const ERROR_BAD_ENVIRONMENT: u32 = 10;
pub const ERROR_BAD_FORMAT: u32 = 11;
pub const ERROR_INVALID_ACCESS: u32 = 12;
pub const ERROR_INVALID_DATA: u32 = 13;
pub const ERROR_OUTOFMEMORY: u32 = 14;
pub const ERROR_INVALID_DRIVE: u32 = 15;
pub const ERROR_CURRENT_DIRECTORY: u32 = 16;
pub const ERROR_NOT_SAME_DEVICE: u32 = 17;
pub const ERROR_NO_MORE_FILES: u32 = 18;
pub const ERROR_WRITE_PROTECT: u32 = 19;
pub const ERROR_BAD_UNIT: u32 = 20;
pub const ERROR_NOT_READY: u32 = 21;
pub const ERROR_BAD_COMMAND: u32 = 22;
pub const ERROR_CRC: u32 = 23;
pub const ERROR_BAD_LENGTH: u32 = 24;
pub const ERROR_SEEK: u32 = 25;
pub const ERROR_NOT_DOS_DISK: u32 = 26;
pub const ERROR_SECTOR_NOT_FOUND: u32 = 27;
pub const ERROR_OUT_OF_PAPER: u32 = 28;
pub const ERROR_WRITE_FAULT: u32 = 29;
pub const ERROR_READ_FAULT: u32 = 30;
pub const ERROR_GEN_FAILURE: u32 = 31;
pub const ERROR_SHARING_VIOLATION: u32 = 32;
pub const ERROR_LOCK_VIOLATION: u32 = 33;
pub const ERROR_WRONG_DISK: u32 = 34;
pub const ERROR_SHARING_BUFFER_EXCEEDED: u32 = 36;
pub const ERROR_HANDLE_EOF: u32 = 38;
pub const ERROR_HANDLE_DISK_FULL: u32 = 39;
pub const ERROR_NOT_SUPPORTED: u32 = 50;
pub const ERROR_REM_NOT_LIST: u32 = 51;
pub const ERROR_DUP_NAME: u32 = 52;
pub const ERROR_BAD_NETPATH: u32 = 53;
pub const ERROR_NETWORK_BUSY: u32 = 54;
pub const ERROR_DEV_NOT_EXIST: u32 = 55;
pub const ERROR_TOO_MANY_CMDS: u32 = 56;
pub const ERROR_ADAP_HDW_ERR: u32 = 57;
pub const ERROR_BAD_NET_RESP: u32 = 58;
pub const ERROR_UNEXP_NET_ERR: u32 = 59;
pub const ERROR_BAD_REM_ADAP: u32 = 60;
pub const ERROR_PRINTQ_FULL: u32 = 61;
pub const ERROR_NO_SPOOL_SPACE: u32 = 62;
pub const ERROR_PRINT_CANCELLED: u32 = 63;
pub const ERROR_NETNAME_DELETED: u32 = 64;
pub const ERROR_NETWORK_ACCESS_DENIED: u32 = 65;
pub const ERROR_BAD_DEV_TYPE: u32 = 66;
pub const ERROR_BAD_NET_NAME: u32 = 67;
pub const ERROR_TOO_MANY_NAMES: u32 = 68;
pub const ERROR_TOO_MANY_SESS: u32 = 69;
pub const ERROR_SHARING_PAUSED: u32 = 70;
pub const ERROR_REQ_NOT_ACCEP: u32 = 71;
pub const ERROR_REDIR_PAUSED: u32 = 72;
pub const ERROR_FILE_EXISTS: u32 = 80;
pub const ERROR_CANNOT_MAKE: u32 = 82;
pub const ERROR_FAIL_I24: u32 = 83;
pub const ERROR_OUT_OF_STRUCTURES: u32 = 84;
pub const ERROR_ALREADY_ASSIGNED: u32 = 85;
pub const ERROR_INVALID_PASSWORD: u32 = 86;
pub const ERROR_INVALID_PARAMETER: u32 = 87;
pub const ERROR_NET_WRITE_FAULT: u32 = 88;
pub const ERROR_NO_PROC_SLOTS: u32 = 89;
pub const ERROR_TOO_MANY_SEMAPHORES: u32 = 100;
pub const ERROR_EXCL_SEM_ALREADY_OWNED: u32 = 101;
pub const ERROR_SEM_IS_SET: u32 = 102;
pub const ERROR_TOO_MANY_SEM_REQUESTS: u32 = 103;
pub const ERROR_INVALID_AT_INTERRUPT_TIME: u32 = 104;
pub const ERROR_SEM_OWNER_DIED: u32 = 105;
pub const ERROR_SEM_USER_LIMIT: u32 = 106;
pub const ERROR_DISK_CHANGE: u32 = 107;
pub const ERROR_DRIVE_LOCKED: u32 = 108;
pub const ERROR_BROKEN_PIPE: u32 = 109;
pub const ERROR_OPEN_FAILED: u32 = 110;
pub const ERROR_BUFFER_OVERFLOW: u32 = 111;
pub const ERROR_DISK_FULL: u32 = 112;
pub const ERROR_NO_MORE_SEARCH_HANDLES: u32 = 113;
pub const ERROR_INVALID_TARGET_HANDLE: u32 = 114;
pub const ERROR_INVALID_CATEGORY: u32 = 117;
pub const ERROR_INVALID_VERIFY_SWITCH: u32 = 118;
pub const ERROR_BAD_DRIVER_LEVEL: u32 = 119;
pub const ERROR_CALL_NOT_IMPLEMENTED: u32 = 120;
pub const ERROR_SEM_TIMEOUT: u32 = 121;
pub const ERROR_INSUFFICIENT_BUFFER: u32 = 122;
pub const ERROR_INVALID_NAME: u32 = 123;
pub const ERROR_INVALID_LEVEL: u32 = 124;
pub const ERROR_NO_VOLUME_LABEL: u32 = 125;
pub const ERROR_MOD_NOT_FOUND: u32 = 126;
pub const ERROR_PROC_NOT_FOUND: u32 = 127;
pub const ERROR_WAIT_NO_CHILDREN: u32 = 128;
pub const ERROR_CHILD_NOT_COMPLETE: u32 = 129;
pub const ERROR_DIRECT_ACCESS_HANDLE: u32 = 130;
pub const ERROR_NEGATIVE_SEEK: u32 = 131;
pub const ERROR_SEEK_ON_DEVICE: u32 = 132;
pub const ERROR_IS_JOIN_TARGET: u32 = 133;
pub const ERROR_IS_JOINED: u32 = 134;
pub const ERROR_IS_SUBSTED: u32 = 135;
pub const ERROR_NOT_JOINED: u32 = 136;
pub const ERROR_NOT_SUBSTED: u32 = 137;
pub const ERROR_JOIN_TO_JOIN: u32 = 138;
pub const ERROR_SUBST_TO_SUBST: u32 = 139;
pub const ERROR_JOIN_TO_SUBST: u32 = 140;
pub const ERROR_SUBST_TO_JOIN: u32 = 141;
pub const ERROR_BUSY_DRIVE: u32 = 142;
pub const ERROR_SAME_DRIVE: u32 = 143;
pub const ERROR_DIR_NOT_ROOT: u32 = 144;
pub const ERROR_DIR_NOT_EMPTY: u32 = 145;
pub const ERROR_IS_SUBST_PATH: u32 = 146;
pub const ERROR_IS_JOIN_PATH: u32 = 147;
pub const ERROR_PATH_BUSY: u32 = 148;
pub const ERROR_IS_SUBST_TARGET: u32 = 149;
pub const ERROR_SYSTEM_TRACE: u32 = 150;
pub const ERROR_INVALID_EVENT_COUNT: u32 = 151;
pub const ERROR_TOO_MANY_MUXWAITERS: u32 = 152;
pub const ERROR_INVALID_LIST_FORMAT: u32 = 153;
pub const ERROR_LABEL_TOO_LONG: u32 = 154;
pub const ERROR_TOO_MANY_TCBS: u32 = 155;
pub const ERROR_SIGNAL_REFUSED: u32 = 156;
pub const ERROR_DISCARDED: u32 = 157;
pub const ERROR_NOT_LOCKED: u32 = 158;
pub const ERROR_BAD_THREADID_ADDR: u32 = 159;
pub const ERROR_BAD_ARGUMENTS: u32 = 160;
pub const ERROR_BAD_PATHNAME: u32 = 161;
pub const ERROR_SIGNAL_PENDING: u32 = 162;
pub const ERROR_MAX_THRDS_REACHED: u32 = 164;
pub const ERROR_LOCK_FAILED: u32 = 167;
pub const ERROR_BUSY: u32 = 170;
pub const ERROR_DEVICE_SUPPORT_IN_PROGRESS: u32 = 171;
pub const ERROR_CANCEL_VIOLATION: u32 = 173;
pub const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED: u32 = 174;
pub const ERROR_INVALID_SEGMENT_NUMBER: u32 = 180;
pub const ERROR_INVALID_ORDINAL: u32 = 182;
pub const ERROR_ALREADY_EXISTS: u32 = 183;
pub const ERROR_INVALID_FLAG_NUMBER: u32 = 186;
pub const ERROR_SEM_NOT_FOUND: u32 = 187;
pub const ERROR_INVALID_STARTING_CODESEG: u32 = 188;
pub const ERROR_INVALID_STACKSEG: u32 = 189;
pub const ERROR_INVALID_MODULETYPE: u32 = 190;
pub const ERROR_INVALID_EXE_SIGNATURE: u32 = 191;
pub const ERROR_EXE_MARKED_INVALID: u32 = 192;
pub const ERROR_BAD_EXE_FORMAT: u32 = 193;
pub const ERROR_ITERATED_DATA_EXCEEDS_64k: u32 = 194;
pub const ERROR_INVALID_MINALLOCSIZE: u32 = 195;
pub const ERROR_DYNLINK_FROM_INVALID_RING: u32 = 196;
pub const ERROR_IOPL_NOT_ENABLED: u32 = 197;
pub const ERROR_INVALID_SEGDPL: u32 = 198;
pub const ERROR_AUTODATASEG_EXCEEDS_64k: u32 = 199;
pub const ERROR_RING2SEG_MUST_BE_MOVABLE: u32 = 200;
pub const ERROR_RELOC_CHAIN_XEEDS_SEGLIM: u32 = 201;
pub const ERROR_INFLOOP_IN_RELOC_CHAIN: u32 = 202;
pub const ERROR_ENVVAR_NOT_FOUND: u32 = 203;
pub const ERROR_NO_SIGNAL_SENT: u32 = 205;
pub const ERROR_FILENAME_EXCED_RANGE: u32 = 206;
pub const ERROR_RING2_STACK_IN_USE: u32 = 207;
pub const ERROR_META_EXPANSION_TOO_LONG: u32 = 208;
pub const ERROR_INVALID_SIGNAL_NUMBER: u32 = 209;
pub const ERROR_THREAD_1_INACTIVE: u32 = 210;
pub const ERROR_LOCKED: u32 = 212;
pub const ERROR_TOO_MANY_MODULES: u32 = 214;
pub const ERROR_NESTING_NOT_ALLOWED: u32 = 215;
pub const ERROR_EXE_MACHINE_TYPE_MISMATCH: u32 = 216;
pub const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY: u32 = 217;
pub const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY: u32 = 218;
pub const ERROR_FILE_CHECKED_OUT: u32 = 220;
pub const ERROR_CHECKOUT_REQUIRED: u32 = 221;
pub const ERROR_BAD_FILE_TYPE: u32 = 222;
pub const ERROR_FILE_TOO_LARGE: u32 = 223;
pub const ERROR_FORMS_AUTH_REQUIRED: u32 = 224;
pub const ERROR_VIRUS_INFECTED: u32 = 225;
pub const ERROR_VIRUS_DELETED: u32 = 226;
pub const ERROR_PIPE_LOCAL: u32 = 229;
pub const ERROR_BAD_PIPE: u32 = 230;
pub const ERROR_PIPE_BUSY: u32 = 231;
pub const ERROR_NO_DATA: u32 = 232;
pub const ERROR_PIPE_NOT_CONNECTED: u32 = 233;
pub const ERROR_MORE_DATA: u32 = 234;
pub const ERROR_NO_WORK_DONE: u32 = 235;
pub const ERROR_VC_DISCONNECTED: u32 = 240;
pub const ERROR_INVALID_EA_NAME: u32 = 254;
pub const ERROR_EA_LIST_INCONSISTENT: u32 = 255;
pub const WAIT_TIMEOUT: u32 = 258;
pub const ERROR_NO_MORE_ITEMS: u32 = 259;
pub const ERROR_CANNOT_COPY: u32 = 266;
pub const ERROR_DIRECTORY: u32 = 267;
pub const ERROR_EAS_DIDNT_FIT: u32 = 275;
pub const ERROR_EA_FILE_CORRUPT: u32 = 276;
pub const ERROR_EA_TABLE_FULL: u32 = 277;
pub const ERROR_INVALID_EA_HANDLE: u32 = 278;
pub const ERROR_EAS_NOT_SUPPORTED: u32 = 282;
pub const ERROR_NOT_OWNER: u32 = 288;
pub const ERROR_TOO_MANY_POSTS: u32 = 298;
pub const ERROR_PARTIAL_COPY: u32 = 299;
pub const ERROR_OPLOCK_NOT_GRANTED: u32 = 300;
pub const ERROR_INVALID_OPLOCK_PROTOCOL: u32 = 301;
pub const ERROR_DISK_TOO_FRAGMENTED: u32 = 302;
pub const ERROR_DELETE_PENDING: u32 = 303;
pub const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING: u32 = 304;
pub const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME: u32 = 305;
pub const ERROR_SECURITY_STREAM_IS_INCONSISTENT: u32 = 306;
pub const ERROR_INVALID_LOCK_RANGE: u32 = 307;
pub const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT: u32 = 308;
pub const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED: u32 = 309;
pub const ERROR_INVALID_EXCEPTION_HANDLER: u32 = 310;
pub const ERROR_DUPLICATE_PRIVILEGES: u32 = 311;
pub const ERROR_NO_RANGES_PROCESSED: u32 = 312;
pub const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE: u32 = 313;
pub const ERROR_DISK_RESOURCES_EXHAUSTED: u32 = 314;
pub const ERROR_INVALID_TOKEN: u32 = 315;
pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED: u32 = 316;
pub const ERROR_MR_MID_NOT_FOUND: u32 = 317;
pub const ERROR_SCOPE_NOT_FOUND: u32 = 318;
pub const ERROR_UNDEFINED_SCOPE: u32 = 319;
pub const ERROR_INVALID_CAP: u32 = 320;
pub const ERROR_DEVICE_UNREACHABLE: u32 = 321;
pub const ERROR_DEVICE_NO_RESOURCES: u32 = 322;
pub const ERROR_DATA_CHECKSUM_ERROR: u32 = 323;
pub const ERROR_INTERMIXED_KERNEL_EA_OPERATION: u32 = 324;
pub const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED: u32 = 326;
pub const ERROR_OFFSET_ALIGNMENT_VIOLATION: u32 = 327;
pub const ERROR_INVALID_FIELD_IN_PARAMETER_LIST: u32 = 328;
pub const ERROR_OPERATION_IN_PROGRESS: u32 = 329;
pub const ERROR_BAD_DEVICE_PATH: u32 = 330;
pub const ERROR_TOO_MANY_DESCRIPTORS: u32 = 331;
pub const ERROR_SCRUB_DATA_DISABLED: u32 = 332;
pub const ERROR_NOT_REDUNDANT_STORAGE: u32 = 333;
pub const ERROR_RESIDENT_FILE_NOT_SUPPORTED: u32 = 334;
pub const ERROR_COMPRESSED_FILE_NOT_SUPPORTED: u32 = 335;
pub const ERROR_DIRECTORY_NOT_SUPPORTED: u32 = 336;
pub const ERROR_NOT_READ_FROM_COPY: u32 = 337;
pub const ERROR_FT_WRITE_FAILURE: u32 = 338;
pub const ERROR_FT_DI_SCAN_REQUIRED: u32 = 339;
pub const ERROR_INVALID_KERNEL_INFO_VERSION: u32 = 340;
pub const ERROR_INVALID_PEP_INFO_VERSION: u32 = 341;
pub const ERROR_OBJECT_NOT_EXTERNALLY_BACKED: u32 = 342;
pub const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN: u32 = 343;
pub const ERROR_COMPRESSION_NOT_BENEFICIAL: u32 = 344;
pub const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH: u32 = 345;
pub const ERROR_BLOCKED_BY_PARENTAL_CONTROLS: u32 = 346;
pub const ERROR_BLOCK_TOO_MANY_REFERENCES: u32 = 347;
pub const ERROR_MARKED_TO_DISALLOW_WRITES: u32 = 348;
pub const ERROR_ENCLAVE_FAILURE: u32 = 349;
pub const ERROR_FAIL_NOACTION_REBOOT: u32 = 350;
pub const ERROR_FAIL_SHUTDOWN: u32 = 351;
pub const ERROR_FAIL_RESTART: u32 = 352;
pub const ERROR_MAX_SESSIONS_REACHED: u32 = 353;
pub const ERROR_NETWORK_ACCESS_DENIED_EDP: u32 = 354;
pub const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL: u32 = 355;
pub const ERROR_EDP_POLICY_DENIES_OPERATION: u32 = 356;
pub const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED: u32 = 357;
pub const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT: u32 = 358;
pub const ERROR_DEVICE_IN_MAINTENANCE: u32 = 359;
pub const ERROR_NOT_SUPPORTED_ON_DAX: u32 = 360;
pub const ERROR_DAX_MAPPING_EXISTS: u32 = 361;
pub const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING: u32 = 362;
pub const ERROR_CLOUD_FILE_METADATA_CORRUPT: u32 = 363;
pub const ERROR_CLOUD_FILE_METADATA_TOO_LARGE: u32 = 364;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE: u32 = 365;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH: u32 = 366;
pub const ERROR_CHILD_PROCESS_BLOCKED: u32 = 367;
pub const ERROR_STORAGE_LOST_DATA_PERSISTENCE: u32 = 368;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE: u32 = 369;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT: u32 = 370;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY: u32 = 371;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN: u32 = 372;
pub const ERROR_GDI_HANDLE_LEAK: u32 = 373;
pub const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS: u32 = 374;
pub const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED: u32 = 375;
pub const ERROR_NOT_A_CLOUD_FILE: u32 = 376;
pub const ERROR_CLOUD_FILE_NOT_IN_SYNC: u32 = 377;
pub const ERROR_CLOUD_FILE_ALREADY_CONNECTED: u32 = 378;
pub const ERROR_CLOUD_FILE_NOT_SUPPORTED: u32 = 379;
pub const ERROR_CLOUD_FILE_INVALID_REQUEST: u32 = 380;
pub const ERROR_CLOUD_FILE_READ_ONLY_VOLUME: u32 = 381;
pub const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY: u32 = 382;
pub const ERROR_CLOUD_FILE_VALIDATION_FAILED: u32 = 383;
pub const ERROR_SMB1_NOT_AVAILABLE: u32 = 384;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION: u32 = 385;
pub const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED: u32 = 386;
pub const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES: u32 = 387;
pub const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE: u32 = 388;
pub const ERROR_CLOUD_FILE_UNSUCCESSFUL: u32 = 389;
pub const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT: u32 = 390;
pub const ERROR_CLOUD_FILE_IN_USE: u32 = 391;
pub const ERROR_CLOUD_FILE_PINNED: u32 = 392;
pub const ERROR_CLOUD_FILE_REQUEST_ABORTED: u32 = 393;
pub const ERROR_CLOUD_FILE_PROPERTY_CORRUPT: u32 = 394;
pub const ERROR_CLOUD_FILE_ACCESS_DENIED: u32 = 395;
pub const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS: u32 = 396;
pub const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT: u32 = 397;
pub const ERROR_CLOUD_FILE_REQUEST_CANCELED: u32 = 398;
pub const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED: u32 = 399;
pub const ERROR_THREAD_MODE_ALREADY_BACKGROUND: u32 = 400;
pub const ERROR_THREAD_MODE_NOT_BACKGROUND: u32 = 401;
pub const ERROR_PROCESS_MODE_ALREADY_BACKGROUND: u32 = 402;
pub const ERROR_PROCESS_MODE_NOT_BACKGROUND: u32 = 403;
pub const ERROR_CLOUD_FILE_PROVIDER_TERMINATED: u32 = 404;
pub const ERROR_NOT_A_CLOUD_SYNC_ROOT: u32 = 405;
pub const ERROR_FILE_PROTECTED_UNDER_DPL: u32 = 406;
pub const ERROR_VOLUME_NOT_CLUSTER_ALIGNED: u32 = 407;
pub const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND: u32 = 408;
pub const ERROR_APPX_FILE_NOT_ENCRYPTED: u32 = 409;
pub const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED: u32 = 410;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET: u32 = 411;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE: u32 = 412;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER: u32 = 413;
pub const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT: u32 = 414;
pub const ERROR_FT_READ_FAILURE: u32 = 415;
pub const ERROR_STORAGE_RESERVE_ID_INVALID: u32 = 416;
pub const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST: u32 = 417;
pub const ERROR_STORAGE_RESERVE_ALREADY_EXISTS: u32 = 418;
pub const ERROR_STORAGE_RESERVE_NOT_EMPTY: u32 = 419;
pub const ERROR_NOT_A_DAX_VOLUME: u32 = 420;
pub const ERROR_NOT_DAX_MAPPABLE: u32 = 421;
pub const ERROR_TIME_CRITICAL_THREAD: u32 = 422;
pub const ERROR_DPL_NOT_SUPPORTED_FOR_USER: u32 = 423;
pub const ERROR_CASE_DIFFERING_NAMES_IN_DIR: u32 = 424;
pub const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED: u32 = 450;
pub const ERROR_CAPAUTHZ_CHANGE_TYPE: u32 = 451;
pub const ERROR_CAPAUTHZ_NOT_PROVISIONED: u32 = 452;
pub const ERROR_CAPAUTHZ_NOT_AUTHORIZED: u32 = 453;
pub const ERROR_CAPAUTHZ_NO_POLICY: u32 = 454;
pub const ERROR_CAPAUTHZ_DB_CORRUPTED: u32 = 455;
pub const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG: u32 = 456;
pub const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY: u32 = 457;
pub const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR: u32 = 458;
pub const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED: u32 = 459;
pub const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH: u32 = 460;
pub const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT: u32 = 480;
pub const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT: u32 = 481;
pub const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT: u32 = 482;
pub const ERROR_DEVICE_HARDWARE_ERROR: u32 = 483;
pub const ERROR_INVALID_ADDRESS: u32 = 487;
pub const ERROR_VRF_CFG_ENABLED: u32 = 1183;
pub const ERROR_PARTITION_TERMINATING: u32 = 1184;
pub const ERROR_USER_PROFILE_LOAD: u32 = 500;
pub const ERROR_ARITHMETIC_OVERFLOW: u32 = 534;
pub const ERROR_PIPE_CONNECTED: u32 = 535;
pub const ERROR_PIPE_LISTENING: u32 = 536;
pub const ERROR_VERIFIER_STOP: u32 = 537;
pub const ERROR_ABIOS_ERROR: u32 = 538;
pub const ERROR_WX86_WARNING: u32 = 539;
pub const ERROR_WX86_ERROR: u32 = 540;
pub const ERROR_TIMER_NOT_CANCELED: u32 = 541;
pub const ERROR_UNWIND: u32 = 542;
pub const ERROR_BAD_STACK: u32 = 543;
pub const ERROR_INVALID_UNWIND_TARGET: u32 = 544;
pub const ERROR_INVALID_PORT_ATTRIBUTES: u32 = 545;
pub const ERROR_PORT_MESSAGE_TOO_LONG: u32 = 546;
pub const ERROR_INVALID_QUOTA_LOWER: u32 = 547;
pub const ERROR_DEVICE_ALREADY_ATTACHED: u32 = 548;
pub const ERROR_INSTRUCTION_MISALIGNMENT: u32 = 549;
pub const ERROR_PROFILING_NOT_STARTED: u32 = 550;
pub const ERROR_PROFILING_NOT_STOPPED: u32 = 551;
pub const ERROR_COULD_NOT_INTERPRET: u32 = 552;
pub const ERROR_PROFILING_AT_LIMIT: u32 = 553;
pub const ERROR_CANT_WAIT: u32 = 554;
pub const ERROR_CANT_TERMINATE_SELF: u32 = 555;
pub const ERROR_UNEXPECTED_MM_CREATE_ERR: u32 = 556;
pub const ERROR_UNEXPECTED_MM_MAP_ERROR: u32 = 557;
pub const ERROR_UNEXPECTED_MM_EXTEND_ERR: u32 = 558;
pub const ERROR_BAD_FUNCTION_TABLE: u32 = 559;
pub const ERROR_NO_GUID_TRANSLATION: u32 = 560;
pub const ERROR_INVALID_LDT_SIZE: u32 = 561;
pub const ERROR_INVALID_LDT_OFFSET: u32 = 563;
pub const ERROR_INVALID_LDT_DESCRIPTOR: u32 = 564;
pub const ERROR_TOO_MANY_THREADS: u32 = 565;
pub const ERROR_THREAD_NOT_IN_PROCESS: u32 = 566;
pub const ERROR_PAGEFILE_QUOTA_EXCEEDED: u32 = 567;
pub const ERROR_LOGON_SERVER_CONFLICT: u32 = 568;
pub const ERROR_SYNCHRONIZATION_REQUIRED: u32 = 569;
pub const ERROR_NET_OPEN_FAILED: u32 = 570;
pub const ERROR_IO_PRIVILEGE_FAILED: u32 = 571;
pub const ERROR_CONTROL_C_EXIT: u32 = 572;
pub const ERROR_MISSING_SYSTEMFILE: u32 = 573;
pub const ERROR_UNHANDLED_EXCEPTION: u32 = 574;
pub const ERROR_APP_INIT_FAILURE: u32 = 575;
pub const ERROR_PAGEFILE_CREATE_FAILED: u32 = 576;
pub const ERROR_INVALID_IMAGE_HASH: u32 = 577;
pub const ERROR_NO_PAGEFILE: u32 = 578;
pub const ERROR_ILLEGAL_FLOAT_CONTEXT: u32 = 579;
pub const ERROR_NO_EVENT_PAIR: u32 = 580;
pub const ERROR_DOMAIN_CTRLR_CONFIG_ERROR: u32 = 581;
pub const ERROR_ILLEGAL_CHARACTER: u32 = 582;
pub const ERROR_UNDEFINED_CHARACTER: u32 = 583;
pub const ERROR_FLOPPY_VOLUME: u32 = 584;
pub const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT: u32 = 585;
pub const ERROR_BACKUP_CONTROLLER: u32 = 586;
pub const ERROR_MUTANT_LIMIT_EXCEEDED: u32 = 587;
pub const ERROR_FS_DRIVER_REQUIRED: u32 = 588;
pub const ERROR_CANNOT_LOAD_REGISTRY_FILE: u32 = 589;
pub const ERROR_DEBUG_ATTACH_FAILED: u32 = 590;
pub const ERROR_SYSTEM_PROCESS_TERMINATED: u32 = 591;
pub const ERROR_DATA_NOT_ACCEPTED: u32 = 592;
pub const ERROR_VDM_HARD_ERROR: u32 = 593;
pub const ERROR_DRIVER_CANCEL_TIMEOUT: u32 = 594;
pub const ERROR_REPLY_MESSAGE_MISMATCH: u32 = 595;
pub const ERROR_LOST_WRITEBEHIND_DATA: u32 = 596;
pub const ERROR_CLIENT_SERVER_PARAMETERS_INVALID: u32 = 597;
pub const ERROR_NOT_TINY_STREAM: u32 = 598;
pub const ERROR_STACK_OVERFLOW_READ: u32 = 599;
pub const ERROR_CONVERT_TO_LARGE: u32 = 600;
pub const ERROR_FOUND_OUT_OF_SCOPE: u32 = 601;
pub const ERROR_ALLOCATE_BUCKET: u32 = 602;
pub const ERROR_MARSHALL_OVERFLOW: u32 = 603;
pub const ERROR_INVALID_VARIANT: u32 = 604;
pub const ERROR_BAD_COMPRESSION_BUFFER: u32 = 605;
pub const ERROR_AUDIT_FAILED: u32 = 606;
pub const ERROR_TIMER_RESOLUTION_NOT_SET: u32 = 607;
pub const ERROR_INSUFFICIENT_LOGON_INFO: u32 = 608;
pub const ERROR_BAD_DLL_ENTRYPOINT: u32 = 609;
pub const ERROR_BAD_SERVICE_ENTRYPOINT: u32 = 610;
pub const ERROR_IP_ADDRESS_CONFLICT1: u32 = 611;
pub const ERROR_IP_ADDRESS_CONFLICT2: u32 = 612;
pub const ERROR_REGISTRY_QUOTA_LIMIT: u32 = 613;
pub const ERROR_NO_CALLBACK_ACTIVE: u32 = 614;
pub const ERROR_PWD_TOO_SHORT: u32 = 615;
pub const ERROR_PWD_TOO_RECENT: u32 = 616;
pub const ERROR_PWD_HISTORY_CONFLICT: u32 = 617;
pub const ERROR_UNSUPPORTED_COMPRESSION: u32 = 618;
pub const ERROR_INVALID_HW_PROFILE: u32 = 619;
pub const ERROR_INVALID_PLUGPLAY_DEVICE_PATH: u32 = 620;
pub const ERROR_QUOTA_LIST_INCONSISTENT: u32 = 621;
pub const ERROR_EVALUATION_EXPIRATION: u32 = 622;
pub const ERROR_ILLEGAL_DLL_RELOCATION: u32 = 623;
pub const ERROR_DLL_INIT_FAILED_LOGOFF: u32 = 624;
pub const ERROR_VALIDATE_CONTINUE: u32 = 625;
pub const ERROR_NO_MORE_MATCHES: u32 = 626;
pub const ERROR_RANGE_LIST_CONFLICT: u32 = 627;
pub const ERROR_SERVER_SID_MISMATCH: u32 = 628;
pub const ERROR_CANT_ENABLE_DENY_ONLY: u32 = 629;
pub const ERROR_FLOAT_MULTIPLE_FAULTS: u32 = 630;
pub const ERROR_FLOAT_MULTIPLE_TRAPS: u32 = 631;
pub const ERROR_NOINTERFACE: u32 = 632;
pub const ERROR_DRIVER_FAILED_SLEEP: u32 = 633;
pub const ERROR_CORRUPT_SYSTEM_FILE: u32 = 634;
pub const ERROR_COMMITMENT_MINIMUM: u32 = 635;
pub const ERROR_PNP_RESTART_ENUMERATION: u32 = 636;
pub const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE: u32 = 637;
pub const ERROR_PNP_REBOOT_REQUIRED: u32 = 638;
pub const ERROR_INSUFFICIENT_POWER: u32 = 639;
pub const ERROR_MULTIPLE_FAULT_VIOLATION: u32 = 640;
pub const ERROR_SYSTEM_SHUTDOWN: u32 = 641;
pub const ERROR_PORT_NOT_SET: u32 = 642;
pub const ERROR_DS_VERSION_CHECK_FAILURE: u32 = 643;
pub const ERROR_RANGE_NOT_FOUND: u32 = 644;
pub const ERROR_NOT_SAFE_MODE_DRIVER: u32 = 646;
pub const ERROR_FAILED_DRIVER_ENTRY: u32 = 647;
pub const ERROR_DEVICE_ENUMERATION_ERROR: u32 = 648;
pub const ERROR_MOUNT_POINT_NOT_RESOLVED: u32 = 649;
pub const ERROR_INVALID_DEVICE_OBJECT_PARAMETER: u32 = 650;
pub const ERROR_MCA_OCCURED: u32 = 651;
pub const ERROR_DRIVER_DATABASE_ERROR: u32 = 652;
pub const ERROR_SYSTEM_HIVE_TOO_LARGE: u32 = 653;
pub const ERROR_DRIVER_FAILED_PRIOR_UNLOAD: u32 = 654;
pub const ERROR_VOLSNAP_PREPARE_HIBERNATE: u32 = 655;
pub const ERROR_HIBERNATION_FAILURE: u32 = 656;
pub const ERROR_PWD_TOO_LONG: u32 = 657;
pub const ERROR_FILE_SYSTEM_LIMITATION: u32 = 665;
pub const ERROR_ASSERTION_FAILURE: u32 = 668;
pub const ERROR_ACPI_ERROR: u32 = 669;
pub const ERROR_WOW_ASSERTION: u32 = 670;
pub const ERROR_PNP_BAD_MPS_TABLE: u32 = 671;
pub const ERROR_PNP_TRANSLATION_FAILED: u32 = 672;
pub const ERROR_PNP_IRQ_TRANSLATION_FAILED: u32 = 673;
pub const ERROR_PNP_INVALID_ID: u32 = 674;
pub const ERROR_WAKE_SYSTEM_DEBUGGER: u32 = 675;
pub const ERROR_HANDLES_CLOSED: u32 = 676;
pub const ERROR_EXTRANEOUS_INFORMATION: u32 = 677;
pub const ERROR_RXACT_COMMIT_NECESSARY: u32 = 678;
pub const ERROR_MEDIA_CHECK: u32 = 679;
pub const ERROR_GUID_SUBSTITUTION_MADE: u32 = 680;
pub const ERROR_STOPPED_ON_SYMLINK: u32 = 681;
pub const ERROR_LONGJUMP: u32 = 682;
pub const ERROR_PLUGPLAY_QUERY_VETOED: u32 = 683;
pub const ERROR_UNWIND_CONSOLIDATE: u32 = 684;
pub const ERROR_REGISTRY_HIVE_RECOVERED: u32 = 685;
pub const ERROR_DLL_MIGHT_BE_INSECURE: u32 = 686;
pub const ERROR_DLL_MIGHT_BE_INCOMPATIBLE: u32 = 687;
pub const ERROR_DBG_EXCEPTION_NOT_HANDLED: u32 = 688;
pub const ERROR_DBG_REPLY_LATER: u32 = 689;
pub const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE: u32 = 690;
pub const ERROR_DBG_TERMINATE_THREAD: u32 = 691;
pub const ERROR_DBG_TERMINATE_PROCESS: u32 = 692;
pub const ERROR_DBG_CONTROL_C: u32 = 693;
pub const ERROR_DBG_PRINTEXCEPTION_C: u32 = 694;
pub const ERROR_DBG_RIPEXCEPTION: u32 = 695;
pub const ERROR_DBG_CONTROL_BREAK: u32 = 696;
pub const ERROR_DBG_COMMAND_EXCEPTION: u32 = 697;
pub const ERROR_OBJECT_NAME_EXISTS: u32 = 698;
pub const ERROR_THREAD_WAS_SUSPENDED: u32 = 699;
pub const ERROR_IMAGE_NOT_AT_BASE: u32 = 700;
pub const ERROR_RXACT_STATE_CREATED: u32 = 701;
pub const ERROR_SEGMENT_NOTIFICATION: u32 = 702;
pub const ERROR_BAD_CURRENT_DIRECTORY: u32 = 703;
pub const ERROR_FT_READ_RECOVERY_FROM_BACKUP: u32 = 704;
pub const ERROR_FT_WRITE_RECOVERY: u32 = 705;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH: u32 = 706;
pub const ERROR_RECEIVE_PARTIAL: u32 = 707;
pub const ERROR_RECEIVE_EXPEDITED: u32 = 708;
pub const ERROR_RECEIVE_PARTIAL_EXPEDITED: u32 = 709;
pub const ERROR_EVENT_DONE: u32 = 710;
pub const ERROR_EVENT_PENDING: u32 = 711;
pub const ERROR_CHECKING_FILE_SYSTEM: u32 = 712;
pub const ERROR_FATAL_APP_EXIT: u32 = 713;
pub const ERROR_PREDEFINED_HANDLE: u32 = 714;
pub const ERROR_WAS_UNLOCKED: u32 = 715;
pub const ERROR_SERVICE_NOTIFICATION: u32 = 716;
pub const ERROR_WAS_LOCKED: u32 = 717;
pub const ERROR_LOG_HARD_ERROR: u32 = 718;
pub const ERROR_ALREADY_WIN32: u32 = 719;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE: u32 = 720;
pub const ERROR_NO_YIELD_PERFORMED: u32 = 721;
pub const ERROR_TIMER_RESUME_IGNORED: u32 = 722;
pub const ERROR_ARBITRATION_UNHANDLED: u32 = 723;
pub const ERROR_CARDBUS_NOT_SUPPORTED: u32 = 724;
pub const ERROR_MP_PROCESSOR_MISMATCH: u32 = 725;
pub const ERROR_HIBERNATED: u32 = 726;
pub const ERROR_RESUME_HIBERNATION: u32 = 727;
pub const ERROR_FIRMWARE_UPDATED: u32 = 728;
pub const ERROR_DRIVERS_LEAKING_LOCKED_PAGES: u32 = 729;
pub const ERROR_WAKE_SYSTEM: u32 = 730;
pub const ERROR_WAIT_1: u32 = 731;
pub const ERROR_WAIT_2: u32 = 732;
pub const ERROR_WAIT_3: u32 = 733;
pub const ERROR_WAIT_63: u32 = 734;
pub const ERROR_ABANDONED_WAIT_0: u32 = 735;
pub const ERROR_ABANDONED_WAIT_63: u32 = 736;
pub const ERROR_USER_APC: u32 = 737;
pub const ERROR_KERNEL_APC: u32 = 738;
pub const ERROR_ALERTED: u32 = 739;
pub const ERROR_ELEVATION_REQUIRED: u32 = 740;
pub const ERROR_REPARSE: u32 = 741;
pub const ERROR_OPLOCK_BREAK_IN_PROGRESS: u32 = 742;
pub const ERROR_VOLUME_MOUNTED: u32 = 743;
pub const ERROR_RXACT_COMMITTED: u32 = 744;
pub const ERROR_NOTIFY_CLEANUP: u32 = 745;
pub const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED: u32 = 746;
pub const ERROR_PAGE_FAULT_TRANSITION: u32 = 747;
pub const ERROR_PAGE_FAULT_DEMAND_ZERO: u32 = 748;
pub const ERROR_PAGE_FAULT_COPY_ON_WRITE: u32 = 749;
pub const ERROR_PAGE_FAULT_GUARD_PAGE: u32 = 750;
pub const ERROR_PAGE_FAULT_PAGING_FILE: u32 = 751;
pub const ERROR_CACHE_PAGE_LOCKED: u32 = 752;
pub const ERROR_CRASH_DUMP: u32 = 753;
pub const ERROR_BUFFER_ALL_ZEROS: u32 = 754;
pub const ERROR_REPARSE_OBJECT: u32 = 755;
pub const ERROR_RESOURCE_REQUIREMENTS_CHANGED: u32 = 756;
pub const ERROR_TRANSLATION_COMPLETE: u32 = 757;
pub const ERROR_NOTHING_TO_TERMINATE: u32 = 758;
pub const ERROR_PROCESS_NOT_IN_JOB: u32 = 759;
pub const ERROR_PROCESS_IN_JOB: u32 = 760;
pub const ERROR_VOLSNAP_HIBERNATE_READY: u32 = 761;
pub const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY: u32 = 762;
pub const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED: u32 = 763;
pub const ERROR_INTERRUPT_STILL_CONNECTED: u32 = 764;
pub const ERROR_WAIT_FOR_OPLOCK: u32 = 765;
pub const ERROR_DBG_EXCEPTION_HANDLED: u32 = 766;
pub const ERROR_DBG_CONTINUE: u32 = 767;
pub const ERROR_CALLBACK_POP_STACK: u32 = 768;
pub const ERROR_COMPRESSION_DISABLED: u32 = 769;
pub const ERROR_CANTFETCHBACKWARDS: u32 = 770;
pub const ERROR_CANTSCROLLBACKWARDS: u32 = 771;
pub const ERROR_ROWSNOTRELEASED: u32 = 772;
pub const ERROR_BAD_ACCESSOR_FLAGS: u32 = 773;
pub const ERROR_ERRORS_ENCOUNTERED: u32 = 774;
pub const ERROR_NOT_CAPABLE: u32 = 775;
pub const ERROR_REQUEST_OUT_OF_SEQUENCE: u32 = 776;
pub const ERROR_VERSION_PARSE_ERROR: u32 = 777;
pub const ERROR_BADSTARTPOSITION: u32 = 778;
pub const ERROR_MEMORY_HARDWARE: u32 = 779;
pub const ERROR_DISK_REPAIR_DISABLED: u32 = 780;
pub const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE: u32 = 781;
pub const ERROR_SYSTEM_POWERSTATE_TRANSITION: u32 = 782;
pub const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION: u32 = 783;
pub const ERROR_MCA_EXCEPTION: u32 = 784;
pub const ERROR_ACCESS_AUDIT_BY_POLICY: u32 = 785;
pub const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY: u32 = 786;
pub const ERROR_ABANDON_HIBERFILE: u32 = 787;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED: u32 = 788;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR: u32 = 789;
pub const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR: u32 = 790;
pub const ERROR_BAD_MCFG_TABLE: u32 = 791;
pub const ERROR_DISK_REPAIR_REDIRECTED: u32 = 792;
pub const ERROR_DISK_REPAIR_UNSUCCESSFUL: u32 = 793;
pub const ERROR_CORRUPT_LOG_OVERFULL: u32 = 794;
pub const ERROR_CORRUPT_LOG_CORRUPTED: u32 = 795;
pub const ERROR_CORRUPT_LOG_UNAVAILABLE: u32 = 796;
pub const ERROR_CORRUPT_LOG_DELETED_FULL: u32 = 797;
pub const ERROR_CORRUPT_LOG_CLEARED: u32 = 798;
pub const ERROR_ORPHAN_NAME_EXHAUSTED: u32 = 799;
pub const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE: u32 = 800;
pub const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK: u32 = 801;
pub const ERROR_CANNOT_BREAK_OPLOCK: u32 = 802;
pub const ERROR_OPLOCK_HANDLE_CLOSED: u32 = 803;
pub const ERROR_NO_ACE_CONDITION: u32 = 804;
pub const ERROR_INVALID_ACE_CONDITION: u32 = 805;
pub const ERROR_FILE_HANDLE_REVOKED: u32 = 806;
pub const ERROR_IMAGE_AT_DIFFERENT_BASE: u32 = 807;
pub const ERROR_ENCRYPTED_IO_NOT_POSSIBLE: u32 = 808;
pub const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS: u32 = 809;
pub const ERROR_QUOTA_ACTIVITY: u32 = 810;
pub const ERROR_HANDLE_REVOKED: u32 = 811;
pub const ERROR_CALLBACK_INVOKE_INLINE: u32 = 812;
pub const ERROR_CPU_SET_INVALID: u32 = 813;
pub const ERROR_ENCLAVE_NOT_TERMINATED: u32 = 814;
pub const ERROR_ENCLAVE_VIOLATION: u32 = 815;
pub const ERROR_EA_ACCESS_DENIED: u32 = 994;
pub const ERROR_OPERATION_ABORTED: u32 = 995;
pub const ERROR_IO_INCOMPLETE: u32 = 996;
pub const ERROR_IO_PENDING: u32 = 997;
pub const ERROR_NOACCESS: u32 = 998;
pub const ERROR_SWAPERROR: u32 = 999;
pub const ERROR_STACK_OVERFLOW: u32 = 1001;
pub const ERROR_INVALID_MESSAGE: u32 = 1002;
pub const ERROR_CAN_NOT_COMPLETE: u32 = 1003;
pub const ERROR_INVALID_FLAGS: u32 = 1004;
pub const ERROR_UNRECOGNIZED_VOLUME: u32 = 1005;
pub const ERROR_FILE_INVALID: u32 = 1006;
pub const ERROR_FULLSCREEN_MODE: u32 = 1007;
pub const ERROR_NO_TOKEN: u32 = 1008;
pub const ERROR_BADDB: u32 = 1009;
pub const ERROR_BADKEY: u32 = 1010;
pub const ERROR_CANTOPEN: u32 = 1011;
pub const ERROR_CANTREAD: u32 = 1012;
pub const ERROR_CANTWRITE: u32 = 1013;
pub const ERROR_REGISTRY_RECOVERED: u32 = 1014;
pub const ERROR_REGISTRY_CORRUPT: u32 = 1015;
pub const ERROR_REGISTRY_IO_FAILED: u32 = 1016;
pub const ERROR_NOT_REGISTRY_FILE: u32 = 1017;
pub const ERROR_KEY_DELETED: u32 = 1018;
pub const ERROR_NO_LOG_SPACE: u32 = 1019;
pub const ERROR_KEY_HAS_CHILDREN: u32 = 1020;
pub const ERROR_CHILD_MUST_BE_VOLATILE: u32 = 1021;
pub const ERROR_NOTIFY_ENUM_DIR: u32 = 1022;
pub const ERROR_DEPENDENT_SERVICES_RUNNING: u32 = 1051;
pub const ERROR_INVALID_SERVICE_CONTROL: u32 = 1052;
pub const ERROR_SERVICE_REQUEST_TIMEOUT: u32 = 1053;
pub const ERROR_SERVICE_NO_THREAD: u32 = 1054;
pub const ERROR_SERVICE_DATABASE_LOCKED: u32 = 1055;
pub const ERROR_SERVICE_ALREADY_RUNNING: u32 = 1056;
pub const ERROR_INVALID_SERVICE_ACCOUNT: u32 = 1057;
pub const ERROR_SERVICE_DISABLED: u32 = 1058;
pub const ERROR_CIRCULAR_DEPENDENCY: u32 = 1059;
pub const ERROR_SERVICE_DOES_NOT_EXIST: u32 = 1060;
pub const ERROR_SERVICE_CANNOT_ACCEPT_CTRL: u32 = 1061;
pub const ERROR_SERVICE_NOT_ACTIVE: u32 = 1062;
pub const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT: u32 = 1063;
pub const ERROR_EXCEPTION_IN_SERVICE: u32 = 1064;
pub const ERROR_DATABASE_DOES_NOT_EXIST: u32 = 1065;
pub const ERROR_SERVICE_SPECIFIC_ERROR: u32 = 1066;
pub const ERROR_PROCESS_ABORTED: u32 = 1067;
pub const ERROR_SERVICE_DEPENDENCY_FAIL: u32 = 1068;
pub const ERROR_SERVICE_LOGON_FAILED: u32 = 1069;
pub const ERROR_SERVICE_START_HANG: u32 = 1070;
pub const ERROR_INVALID_SERVICE_LOCK: u32 = 1071;
pub const ERROR_SERVICE_MARKED_FOR_DELETE: u32 = 1072;
pub const ERROR_SERVICE_EXISTS: u32 = 1073;
pub const ERROR_ALREADY_RUNNING_LKG: u32 = 1074;
pub const ERROR_SERVICE_DEPENDENCY_DELETED: u32 = 1075;
pub const ERROR_BOOT_ALREADY_ACCEPTED: u32 = 1076;
pub const ERROR_SERVICE_NEVER_STARTED: u32 = 1077;
pub const ERROR_DUPLICATE_SERVICE_NAME: u32 = 1078;
pub const ERROR_DIFFERENT_SERVICE_ACCOUNT: u32 = 1079;
pub const ERROR_CANNOT_DETECT_DRIVER_FAILURE: u32 = 1080;
pub const ERROR_CANNOT_DETECT_PROCESS_ABORT: u32 = 1081;
pub const ERROR_NO_RECOVERY_PROGRAM: u32 = 1082;
pub const ERROR_SERVICE_NOT_IN_EXE: u32 = 1083;
pub const ERROR_NOT_SAFEBOOT_SERVICE: u32 = 1084;
pub const ERROR_END_OF_MEDIA: u32 = 1100;
pub const ERROR_FILEMARK_DETECTED: u32 = 1101;
pub const ERROR_BEGINNING_OF_MEDIA: u32 = 1102;
pub const ERROR_SETMARK_DETECTED: u32 = 1103;
pub const ERROR_NO_DATA_DETECTED: u32 = 1104;
pub const ERROR_PARTITION_FAILURE: u32 = 1105;
pub const ERROR_INVALID_BLOCK_LENGTH: u32 = 1106;
pub const ERROR_DEVICE_NOT_PARTITIONED: u32 = 1107;
pub const ERROR_UNABLE_TO_LOCK_MEDIA: u32 = 1108;
pub const ERROR_UNABLE_TO_UNLOAD_MEDIA: u32 = 1109;
pub const ERROR_MEDIA_CHANGED: u32 = 1110;
pub const ERROR_BUS_RESET: u32 = 1111;
pub const ERROR_NO_MEDIA_IN_DRIVE: u32 = 1112;
pub const ERROR_NO_UNICODE_TRANSLATION: u32 = 1113;
pub const ERROR_DLL_INIT_FAILED: u32 = 1114;
pub const ERROR_SHUTDOWN_IN_PROGRESS: u32 = 1115;
pub const ERROR_NO_SHUTDOWN_IN_PROGRESS: u32 = 1116;
pub const ERROR_IO_DEVICE: u32 = 1117;
pub const ERROR_SERIAL_NO_DEVICE: u32 = 1118;
pub const ERROR_IRQ_BUSY: u32 = 1119;
pub const ERROR_MORE_WRITES: u32 = 1120;
pub const ERROR_COUNTER_TIMEOUT: u32 = 1121;
pub const ERROR_FLOPPY_ID_MARK_NOT_FOUND: u32 = 1122;
pub const ERROR_FLOPPY_WRONG_CYLINDER: u32 = 1123;
pub const ERROR_FLOPPY_UNKNOWN_ERROR: u32 = 1124;
pub const ERROR_FLOPPY_BAD_REGISTERS: u32 = 1125;
pub const ERROR_DISK_RECALIBRATE_FAILED: u32 = 1126;
pub const ERROR_DISK_OPERATION_FAILED: u32 = 1127;
pub const ERROR_DISK_RESET_FAILED: u32 = 1128;
pub const ERROR_EOM_OVERFLOW: u32 = 1129;
pub const ERROR_NOT_ENOUGH_SERVER_MEMORY: u32 = 1130;
pub const ERROR_POSSIBLE_DEADLOCK: u32 = 1131;
pub const ERROR_MAPPED_ALIGNMENT: u32 = 1132;
pub const ERROR_SET_POWER_STATE_VETOED: u32 = 1140;
pub const ERROR_SET_POWER_STATE_FAILED: u32 = 1141;
pub const ERROR_TOO_MANY_LINKS: u32 = 1142;
pub const ERROR_OLD_WIN_VERSION: u32 = 1150;
pub const ERROR_APP_WRONG_OS: u32 = 1151;
pub const ERROR_SINGLE_INSTANCE_APP: u32 = 1152;
pub const ERROR_RMODE_APP: u32 = 1153;
pub const ERROR_INVALID_DLL: u32 = 1154;
pub const ERROR_NO_ASSOCIATION: u32 = 1155;
pub const ERROR_DDE_FAIL: u32 = 1156;
pub const ERROR_DLL_NOT_FOUND: u32 = 1157;
pub const ERROR_NO_MORE_USER_HANDLES: u32 = 1158;
pub const ERROR_MESSAGE_SYNC_ONLY: u32 = 1159;
pub const ERROR_SOURCE_ELEMENT_EMPTY: u32 = 1160;
pub const ERROR_DESTINATION_ELEMENT_FULL: u32 = 1161;
pub const ERROR_ILLEGAL_ELEMENT_ADDRESS: u32 = 1162;
pub const ERROR_MAGAZINE_NOT_PRESENT: u32 = 1163;
pub const ERROR_DEVICE_REINITIALIZATION_NEEDED: u32 = 1164;
pub const ERROR_DEVICE_REQUIRES_CLEANING: u32 = 1165;
pub const ERROR_DEVICE_DOOR_OPEN: u32 = 1166;
pub const ERROR_DEVICE_NOT_CONNECTED: u32 = 1167;
pub const ERROR_NOT_FOUND: u32 = 1168;
pub const ERROR_NO_MATCH: u32 = 1169;
pub const ERROR_SET_NOT_FOUND: u32 = 1170;
pub const ERROR_POINT_NOT_FOUND: u32 = 1171;
pub const ERROR_NO_TRACKING_SERVICE: u32 = 1172;
pub const ERROR_NO_VOLUME_ID: u32 = 1173;
pub const ERROR_UNABLE_TO_REMOVE_REPLACED: u32 = 1175;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT: u32 = 1176;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2: u32 = 1177;
pub const ERROR_JOURNAL_DELETE_IN_PROGRESS: u32 = 1178;
pub const ERROR_JOURNAL_NOT_ACTIVE: u32 = 1179;
pub const ERROR_POTENTIAL_FILE_FOUND: u32 = 1180;
pub const ERROR_JOURNAL_ENTRY_DELETED: u32 = 1181;
pub const ERROR_SHUTDOWN_IS_SCHEDULED: u32 = 1190;
pub const ERROR_SHUTDOWN_USERS_LOGGED_ON: u32 = 1191;
pub const ERROR_BAD_DEVICE: u32 = 1200;
pub const ERROR_CONNECTION_UNAVAIL: u32 = 1201;
pub const ERROR_DEVICE_ALREADY_REMEMBERED: u32 = 1202;
pub const ERROR_NO_NET_OR_BAD_PATH: u32 = 1203;
pub const ERROR_BAD_PROVIDER: u32 = 1204;
pub const ERROR_CANNOT_OPEN_PROFILE: u32 = 1205;
pub const ERROR_BAD_PROFILE: u32 = 1206;
pub const ERROR_NOT_CONTAINER: u32 = 1207;
pub const ERROR_EXTENDED_ERROR: u32 = 1208;
pub const ERROR_INVALID_GROUPNAME: u32 = 1209;
pub const ERROR_INVALID_COMPUTERNAME: u32 = 1210;
pub const ERROR_INVALID_EVENTNAME: u32 = 1211;
pub const ERROR_INVALID_DOMAINNAME: u32 = 1212;
pub const ERROR_INVALID_SERVICENAME: u32 = 1213;
pub const ERROR_INVALID_NETNAME: u32 = 1214;
pub const ERROR_INVALID_SHARENAME: u32 = 1215;
pub const ERROR_INVALID_PASSWORDNAME: u32 = 1216;
pub const ERROR_INVALID_MESSAGENAME: u32 = 1217;
pub const ERROR_INVALID_MESSAGEDEST: u32 = 1218;
pub const ERROR_SESSION_CREDENTIAL_CONFLICT: u32 = 1219;
pub const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED: u32 = 1220;
pub const ERROR_DUP_DOMAINNAME: u32 = 1221;
pub const ERROR_NO_NETWORK: u32 = 1222;
pub const ERROR_CANCELLED: u32 = 1223;
pub const ERROR_USER_MAPPED_FILE: u32 = 1224;
pub const ERROR_CONNECTION_REFUSED: u32 = 1225;
pub const ERROR_GRACEFUL_DISCONNECT: u32 = 1226;
pub const ERROR_ADDRESS_ALREADY_ASSOCIATED: u32 = 1227;
pub const ERROR_ADDRESS_NOT_ASSOCIATED: u32 = 1228;
pub const ERROR_CONNECTION_INVALID: u32 = 1229;
pub const ERROR_CONNECTION_ACTIVE: u32 = 1230;
pub const ERROR_NETWORK_UNREACHABLE: u32 = 1231;
pub const ERROR_HOST_UNREACHABLE: u32 = 1232;
pub const ERROR_PROTOCOL_UNREACHABLE: u32 = 1233;
pub const ERROR_PORT_UNREACHABLE: u32 = 1234;
pub const ERROR_REQUEST_ABORTED: u32 = 1235;
pub const ERROR_CONNECTION_ABORTED: u32 = 1236;
pub const ERROR_RETRY: u32 = 1237;
pub const ERROR_CONNECTION_COUNT_LIMIT: u32 = 1238;
pub const ERROR_LOGIN_TIME_RESTRICTION: u32 = 1239;
pub const ERROR_LOGIN_WKSTA_RESTRICTION: u32 = 1240;
pub const ERROR_INCORRECT_ADDRESS: u32 = 1241;
pub const ERROR_ALREADY_REGISTERED: u32 = 1242;
pub const ERROR_SERVICE_NOT_FOUND: u32 = 1243;
pub const ERROR_NOT_AUTHENTICATED: u32 = 1244;
pub const ERROR_NOT_LOGGED_ON: u32 = 1245;
pub const ERROR_CONTINUE: u32 = 1246;
pub const ERROR_ALREADY_INITIALIZED: u32 = 1247;
pub const ERROR_NO_MORE_DEVICES: u32 = 1248;
pub const ERROR_NO_SUCH_SITE: u32 = 1249;
pub const ERROR_DOMAIN_CONTROLLER_EXISTS: u32 = 1250;
pub const ERROR_ONLY_IF_CONNECTED: u32 = 1251;
pub const ERROR_OVERRIDE_NOCHANGES: u32 = 1252;
pub const ERROR_BAD_USER_PROFILE: u32 = 1253;
pub const ERROR_NOT_SUPPORTED_ON_SBS: u32 = 1254;
pub const ERROR_SERVER_SHUTDOWN_IN_PROGRESS: u32 = 1255;
pub const ERROR_HOST_DOWN: u32 = 1256;
pub const ERROR_NON_ACCOUNT_SID: u32 = 1257;
pub const ERROR_NON_DOMAIN_SID: u32 = 1258;
pub const ERROR_APPHELP_BLOCK: u32 = 1259;
pub const ERROR_ACCESS_DISABLED_BY_POLICY: u32 = 1260;
pub const ERROR_REG_NAT_CONSUMPTION: u32 = 1261;
pub const ERROR_CSCSHARE_OFFLINE: u32 = 1262;
pub const ERROR_PKINIT_FAILURE: u32 = 1263;
pub const ERROR_SMARTCARD_SUBSYSTEM_FAILURE: u32 = 1264;
pub const ERROR_DOWNGRADE_DETECTED: u32 = 1265;
pub const ERROR_MACHINE_LOCKED: u32 = 1271;
pub const ERROR_SMB_GUEST_LOGON_BLOCKED: u32 = 1272;
pub const ERROR_CALLBACK_SUPPLIED_INVALID_DATA: u32 = 1273;
pub const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED: u32 = 1274;
pub const ERROR_DRIVER_BLOCKED: u32 = 1275;
pub const ERROR_INVALID_IMPORT_OF_NON_DLL: u32 = 1276;
pub const ERROR_ACCESS_DISABLED_WEBBLADE: u32 = 1277;
pub const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER: u32 = 1278;
pub const ERROR_RECOVERY_FAILURE: u32 = 1279;
pub const ERROR_ALREADY_FIBER: u32 = 1280;
pub const ERROR_ALREADY_THREAD: u32 = 1281;
pub const ERROR_STACK_BUFFER_OVERRUN: u32 = 1282;
pub const ERROR_PARAMETER_QUOTA_EXCEEDED: u32 = 1283;
pub const ERROR_DEBUGGER_INACTIVE: u32 = 1284;
pub const ERROR_DELAY_LOAD_FAILED: u32 = 1285;
pub const ERROR_VDM_DISALLOWED: u32 = 1286;
pub const ERROR_UNIDENTIFIED_ERROR: u32 = 1287;
pub const ERROR_INVALID_CRUNTIME_PARAMETER: u32 = 1288;
pub const ERROR_BEYOND_VDL: u32 = 1289;
pub const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE: u32 = 1290;
pub const ERROR_DRIVER_PROCESS_TERMINATED: u32 = 1291;
pub const ERROR_IMPLEMENTATION_LIMIT: u32 = 1292;
pub const ERROR_PROCESS_IS_PROTECTED: u32 = 1293;
pub const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING: u32 = 1294;
pub const ERROR_DISK_QUOTA_EXCEEDED: u32 = 1295;
pub const ERROR_CONTENT_BLOCKED: u32 = 1296;
pub const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE: u32 = 1297;
pub const ERROR_APP_HANG: u32 = 1298;
pub const ERROR_INVALID_LABEL: u32 = 1299;
pub const ERROR_NOT_ALL_ASSIGNED: u32 = 1300;
pub const ERROR_SOME_NOT_MAPPED: u32 = 1301;
pub const ERROR_NO_QUOTAS_FOR_ACCOUNT: u32 = 1302;
pub const ERROR_LOCAL_USER_SESSION_KEY: u32 = 1303;
pub const ERROR_NULL_LM_PASSWORD: u32 = 1304;
pub const ERROR_UNKNOWN_REVISION: u32 = 1305;
pub const ERROR_REVISION_MISMATCH: u32 = 1306;
pub const ERROR_INVALID_OWNER: u32 = 1307;
pub const ERROR_INVALID_PRIMARY_GROUP: u32 = 1308;
pub const ERROR_NO_IMPERSONATION_TOKEN: u32 = 1309;
pub const ERROR_CANT_DISABLE_MANDATORY: u32 = 1310;
pub const ERROR_NO_LOGON_SERVERS: u32 = 1311;
pub const ERROR_NO_SUCH_LOGON_SESSION: u32 = 1312;
pub const ERROR_NO_SUCH_PRIVILEGE: u32 = 1313;
pub const ERROR_PRIVILEGE_NOT_HELD: u32 = 1314;
pub const ERROR_INVALID_ACCOUNT_NAME: u32 = 1315;
pub const ERROR_USER_EXISTS: u32 = 1316;
pub const ERROR_NO_SUCH_USER: u32 = 1317;
pub const ERROR_GROUP_EXISTS: u32 = 1318;
pub const ERROR_NO_SUCH_GROUP: u32 = 1319;
pub const ERROR_MEMBER_IN_GROUP: u32 = 1320;
pub const ERROR_MEMBER_NOT_IN_GROUP: u32 = 1321;
pub const ERROR_LAST_ADMIN: u32 = 1322;
pub const ERROR_WRONG_PASSWORD: u32 = 1323;
pub const ERROR_ILL_FORMED_PASSWORD: u32 = 1324;
pub const ERROR_PASSWORD_RESTRICTION: u32 = 1325;
pub const ERROR_LOGON_FAILURE: u32 = 1326;
pub const ERROR_ACCOUNT_RESTRICTION: u32 = 1327;
pub const ERROR_INVALID_LOGON_HOURS: u32 = 1328;
pub const ERROR_INVALID_WORKSTATION: u32 = 1329;
pub const ERROR_PASSWORD_EXPIRED: u32 = 1330;
pub const ERROR_ACCOUNT_DISABLED: u32 = 1331;
pub const ERROR_NONE_MAPPED: u32 = 1332;
pub const ERROR_TOO_MANY_LUIDS_REQUESTED: u32 = 1333;
pub const ERROR_LUIDS_EXHAUSTED: u32 = 1334;
pub const ERROR_INVALID_SUB_AUTHORITY: u32 = 1335;
pub const ERROR_INVALID_ACL: u32 = 1336;
pub const ERROR_INVALID_SID: u32 = 1337;
pub const ERROR_INVALID_SECURITY_DESCR: u32 = 1338;
pub const ERROR_BAD_INHERITANCE_ACL: u32 = 1340;
pub const ERROR_SERVER_DISABLED: u32 = 1341;
pub const ERROR_SERVER_NOT_DISABLED: u32 = 1342;
pub const ERROR_INVALID_ID_AUTHORITY: u32 = 1343;
pub const ERROR_ALLOTTED_SPACE_EXCEEDED: u32 = 1344;
pub const ERROR_INVALID_GROUP_ATTRIBUTES: u32 = 1345;
pub const ERROR_BAD_IMPERSONATION_LEVEL: u32 = 1346;
pub const ERROR_CANT_OPEN_ANONYMOUS: u32 = 1347;
pub const ERROR_BAD_VALIDATION_CLASS: u32 = 1348;
pub const ERROR_BAD_TOKEN_TYPE: u32 = 1349;
pub const ERROR_NO_SECURITY_ON_OBJECT: u32 = 1350;
pub const ERROR_CANT_ACCESS_DOMAIN_INFO: u32 = 1351;
pub const ERROR_INVALID_SERVER_STATE: u32 = 1352;
pub const ERROR_INVALID_DOMAIN_STATE: u32 = 1353;
pub const ERROR_INVALID_DOMAIN_ROLE: u32 = 1354;
pub const ERROR_NO_SUCH_DOMAIN: u32 = 1355;
pub const ERROR_DOMAIN_EXISTS: u32 = 1356;
pub const ERROR_DOMAIN_LIMIT_EXCEEDED: u32 = 1357;
pub const ERROR_INTERNAL_DB_CORRUPTION: u32 = 1358;
pub const ERROR_INTERNAL_ERROR: u32 = 1359;
pub const ERROR_GENERIC_NOT_MAPPED: u32 = 1360;
pub const ERROR_BAD_DESCRIPTOR_FORMAT: u32 = 1361;
pub const ERROR_NOT_LOGON_PROCESS: u32 = 1362;
pub const ERROR_LOGON_SESSION_EXISTS: u32 = 1363;
pub const ERROR_NO_SUCH_PACKAGE: u32 = 1364;
pub const ERROR_BAD_LOGON_SESSION_STATE: u32 = 1365;
pub const ERROR_LOGON_SESSION_COLLISION: u32 = 1366;
pub const ERROR_INVALID_LOGON_TYPE: u32 = 1367;
pub const ERROR_CANNOT_IMPERSONATE: u32 = 1368;
pub const ERROR_RXACT_INVALID_STATE: u32 = 1369;
pub const ERROR_RXACT_COMMIT_FAILURE: u32 = 1370;
pub const ERROR_SPECIAL_ACCOUNT: u32 = 1371;
pub const ERROR_SPECIAL_GROUP: u32 = 1372;
pub const ERROR_SPECIAL_USER: u32 = 1373;
pub const ERROR_MEMBERS_PRIMARY_GROUP: u32 = 1374;
pub const ERROR_TOKEN_ALREADY_IN_USE: u32 = 1375;
pub const ERROR_NO_SUCH_ALIAS: u32 = 1376;
pub const ERROR_MEMBER_NOT_IN_ALIAS: u32 = 1377;
pub const ERROR_MEMBER_IN_ALIAS: u32 = 1378;
pub const ERROR_ALIAS_EXISTS: u32 = 1379;
pub const ERROR_LOGON_NOT_GRANTED: u32 = 1380;
pub const ERROR_TOO_MANY_SECRETS: u32 = 1381;
pub const ERROR_SECRET_TOO_LONG: u32 = 1382;
pub const ERROR_INTERNAL_DB_ERROR: u32 = 1383;
pub const ERROR_TOO_MANY_CONTEXT_IDS: u32 = 1384;
pub const ERROR_LOGON_TYPE_NOT_GRANTED: u32 = 1385;
pub const ERROR_NT_CROSS_ENCRYPTION_REQUIRED: u32 = 1386;
pub const ERROR_NO_SUCH_MEMBER: u32 = 1387;
pub const ERROR_INVALID_MEMBER: u32 = 1388;
pub const ERROR_TOO_MANY_SIDS: u32 = 1389;
pub const ERROR_LM_CROSS_ENCRYPTION_REQUIRED: u32 = 1390;
pub const ERROR_NO_INHERITANCE: u32 = 1391;
pub const ERROR_FILE_CORRUPT: u32 = 1392;
pub const ERROR_DISK_CORRUPT: u32 = 1393;
pub const ERROR_NO_USER_SESSION_KEY: u32 = 1394;
pub const ERROR_LICENSE_QUOTA_EXCEEDED: u32 = 1395;
pub const ERROR_WRONG_TARGET_NAME: u32 = 1396;
pub const ERROR_MUTUAL_AUTH_FAILED: u32 = 1397;
pub const ERROR_TIME_SKEW: u32 = 1398;
pub const ERROR_CURRENT_DOMAIN_NOT_ALLOWED: u32 = 1399;
pub const ERROR_INVALID_WINDOW_HANDLE: u32 = 1400;
pub const ERROR_INVALID_MENU_HANDLE: u32 = 1401;
pub const ERROR_INVALID_CURSOR_HANDLE: u32 = 1402;
pub const ERROR_INVALID_ACCEL_HANDLE: u32 = 1403;
pub const ERROR_INVALID_HOOK_HANDLE: u32 = 1404;
pub const ERROR_INVALID_DWP_HANDLE: u32 = 1405;
pub const ERROR_TLW_WITH_WSCHILD: u32 = 1406;
pub const ERROR_CANNOT_FIND_WND_CLASS: u32 = 1407;
pub const ERROR_WINDOW_OF_OTHER_THREAD: u32 = 1408;
pub const ERROR_HOTKEY_ALREADY_REGISTERED: u32 = 1409;
pub const ERROR_CLASS_ALREADY_EXISTS: u32 = 1410;
pub const ERROR_CLASS_DOES_NOT_EXIST: u32 = 1411;
pub const ERROR_CLASS_HAS_WINDOWS: u32 = 1412;
pub const ERROR_INVALID_INDEX: u32 = 1413;
pub const ERROR_INVALID_ICON_HANDLE: u32 = 1414;
pub const ERROR_PRIVATE_DIALOG_INDEX: u32 = 1415;
pub const ERROR_LISTBOX_ID_NOT_FOUND: u32 = 1416;
pub const ERROR_NO_WILDCARD_CHARACTERS: u32 = 1417;
pub const ERROR_CLIPBOARD_NOT_OPEN: u32 = 1418;
pub const ERROR_HOTKEY_NOT_REGISTERED: u32 = 1419;
pub const ERROR_WINDOW_NOT_DIALOG: u32 = 1420;
pub const ERROR_CONTROL_ID_NOT_FOUND: u32 = 1421;
pub const ERROR_INVALID_COMBOBOX_MESSAGE: u32 = 1422;
pub const ERROR_WINDOW_NOT_COMBOBOX: u32 = 1423;
pub const ERROR_INVALID_EDIT_HEIGHT: u32 = 1424;
pub const ERROR_DC_NOT_FOUND: u32 = 1425;
pub const ERROR_INVALID_HOOK_FILTER: u32 = 1426;
pub const ERROR_INVALID_FILTER_PROC: u32 = 1427;
pub const ERROR_HOOK_NEEDS_HMOD: u32 = 1428;
pub const ERROR_GLOBAL_ONLY_HOOK: u32 = 1429;
pub const ERROR_JOURNAL_HOOK_SET: u32 = 1430;
pub const ERROR_HOOK_NOT_INSTALLED: u32 = 1431;
pub const ERROR_INVALID_LB_MESSAGE: u32 = 1432;
pub const ERROR_SETCOUNT_ON_BAD_LB: u32 = 1433;
pub const ERROR_LB_WITHOUT_TABSTOPS: u32 = 1434;
pub const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD: u32 = 1435;
pub const ERROR_CHILD_WINDOW_MENU: u32 = 1436;
pub const ERROR_NO_SYSTEM_MENU: u32 = 1437;
pub const ERROR_INVALID_MSGBOX_STYLE: u32 = 1438;
pub const ERROR_INVALID_SPI_VALUE: u32 = 1439;
pub const ERROR_SCREEN_ALREADY_LOCKED: u32 = 1440;
pub const ERROR_HWNDS_HAVE_DIFF_PARENT: u32 = 1441;
pub const ERROR_NOT_CHILD_WINDOW: u32 = 1442;
pub const ERROR_INVALID_GW_COMMAND: u32 = 1443;
pub const ERROR_INVALID_THREAD_ID: u32 = 1444;
pub const ERROR_NON_MDICHILD_WINDOW: u32 = 1445;
pub const ERROR_POPUP_ALREADY_ACTIVE: u32 = 1446;
pub const ERROR_NO_SCROLLBARS: u32 = 1447;
pub const ERROR_INVALID_SCROLLBAR_RANGE: u32 = 1448;
pub const ERROR_INVALID_SHOWWIN_COMMAND: u32 = 1449;
pub const ERROR_NO_SYSTEM_RESOURCES: u32 = 1450;
pub const ERROR_NONPAGED_SYSTEM_RESOURCES: u32 = 1451;
pub const ERROR_PAGED_SYSTEM_RESOURCES: u32 = 1452;
pub const ERROR_WORKING_SET_QUOTA: u32 = 1453;
pub const ERROR_PAGEFILE_QUOTA: u32 = 1454;
pub const ERROR_COMMITMENT_LIMIT: u32 = 1455;
pub const ERROR_MENU_ITEM_NOT_FOUND: u32 = 1456;
pub const ERROR_INVALID_KEYBOARD_HANDLE: u32 = 1457;
pub const ERROR_HOOK_TYPE_NOT_ALLOWED: u32 = 1458;
pub const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION: u32 = 1459;
pub const ERROR_TIMEOUT: u32 = 1460;
pub const ERROR_INVALID_MONITOR_HANDLE: u32 = 1461;
pub const ERROR_INCORRECT_SIZE: u32 = 1462;
pub const ERROR_SYMLINK_CLASS_DISABLED: u32 = 1463;
pub const ERROR_SYMLINK_NOT_SUPPORTED: u32 = 1464;
pub const ERROR_XML_PARSE_ERROR: u32 = 1465;
pub const ERROR_XMLDSIG_ERROR: u32 = 1466;
pub const ERROR_RESTART_APPLICATION: u32 = 1467;
pub const ERROR_WRONG_COMPARTMENT: u32 = 1468;
pub const ERROR_AUTHIP_FAILURE: u32 = 1469;
pub const ERROR_NO_NVRAM_RESOURCES: u32 = 1470;
pub const ERROR_NOT_GUI_PROCESS: u32 = 1471;
pub const ERROR_EVENTLOG_FILE_CORRUPT: u32 = 1500;
pub const ERROR_EVENTLOG_CANT_START: u32 = 1501;
pub const ERROR_LOG_FILE_FULL: u32 = 1502;
pub const ERROR_EVENTLOG_FILE_CHANGED: u32 = 1503;
pub const ERROR_CONTAINER_ASSIGNED: u32 = 1504;
pub const ERROR_JOB_NO_CONTAINER: u32 = 1505;
pub const ERROR_INVALID_TASK_NAME: u32 = 1550;
pub const ERROR_INVALID_TASK_INDEX: u32 = 1551;
pub const ERROR_THREAD_ALREADY_IN_TASK: u32 = 1552;
pub const ERROR_INSTALL_SERVICE_FAILURE: u32 = 1601;
pub const ERROR_INSTALL_USEREXIT: u32 = 1602;
pub const ERROR_INSTALL_FAILURE: u32 = 1603;
pub const ERROR_INSTALL_SUSPEND: u32 = 1604;
pub const ERROR_UNKNOWN_PRODUCT: u32 = 1605;
pub const ERROR_UNKNOWN_FEATURE: u32 = 1606;
pub const ERROR_UNKNOWN_COMPONENT: u32 = 1607;
pub const ERROR_UNKNOWN_PROPERTY: u32 = 1608;
pub const ERROR_INVALID_HANDLE_STATE: u32 = 1609;
pub const ERROR_BAD_CONFIGURATION: u32 = 1610;
pub const ERROR_INDEX_ABSENT: u32 = 1611;
pub const ERROR_INSTALL_SOURCE_ABSENT: u32 = 1612;
pub const ERROR_INSTALL_PACKAGE_VERSION: u32 = 1613;
pub const ERROR_PRODUCT_UNINSTALLED: u32 = 1614;
pub const ERROR_BAD_QUERY_SYNTAX: u32 = 1615;
pub const ERROR_INVALID_FIELD: u32 = 1616;
pub const ERROR_DEVICE_REMOVED: u32 = 1617;
pub const ERROR_INSTALL_ALREADY_RUNNING: u32 = 1618;
pub const ERROR_INSTALL_PACKAGE_OPEN_FAILED: u32 = 1619;
pub const ERROR_INSTALL_PACKAGE_INVALID: u32 = 1620;
pub const ERROR_INSTALL_UI_FAILURE: u32 = 1621;
pub const ERROR_INSTALL_LOG_FAILURE: u32 = 1622;
pub const ERROR_INSTALL_LANGUAGE_UNSUPPORTED: u32 = 1623;
pub const ERROR_INSTALL_TRANSFORM_FAILURE: u32 = 1624;
pub const ERROR_INSTALL_PACKAGE_REJECTED: u32 = 1625;
pub const ERROR_FUNCTION_NOT_CALLED: u32 = 1626;
pub const ERROR_FUNCTION_FAILED: u32 = 1627;
pub const ERROR_INVALID_TABLE: u32 = 1628;
pub const ERROR_DATATYPE_MISMATCH: u32 = 1629;
pub const ERROR_UNSUPPORTED_TYPE: u32 = 1630;
pub const ERROR_CREATE_FAILED: u32 = 1631;
pub const ERROR_INSTALL_TEMP_UNWRITABLE: u32 = 1632;
pub const ERROR_INSTALL_PLATFORM_UNSUPPORTED: u32 = 1633;
pub const ERROR_INSTALL_NOTUSED: u32 = 1634;
pub const ERROR_PATCH_PACKAGE_OPEN_FAILED: u32 = 1635;
pub const ERROR_PATCH_PACKAGE_INVALID: u32 = 1636;
pub const ERROR_PATCH_PACKAGE_UNSUPPORTED: u32 = 1637;
pub const ERROR_PRODUCT_VERSION: u32 = 1638;
pub const ERROR_INVALID_COMMAND_LINE: u32 = 1639;
pub const ERROR_INSTALL_REMOTE_DISALLOWED: u32 = 1640;
pub const ERROR_SUCCESS_REBOOT_INITIATED: u32 = 1641;
pub const ERROR_PATCH_TARGET_NOT_FOUND: u32 = 1642;
pub const ERROR_PATCH_PACKAGE_REJECTED: u32 = 1643;
pub const ERROR_INSTALL_TRANSFORM_REJECTED: u32 = 1644;
pub const ERROR_INSTALL_REMOTE_PROHIBITED: u32 = 1645;
pub const ERROR_PATCH_REMOVAL_UNSUPPORTED: u32 = 1646;
pub const ERROR_UNKNOWN_PATCH: u32 = 1647;
pub const ERROR_PATCH_NO_SEQUENCE: u32 = 1648;
pub const ERROR_PATCH_REMOVAL_DISALLOWED: u32 = 1649;
pub const ERROR_INVALID_PATCH_XML: u32 = 1650;
pub const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT: u32 = 1651;
pub const ERROR_INSTALL_SERVICE_SAFEBOOT: u32 = 1652;
pub const ERROR_FAIL_FAST_EXCEPTION: u32 = 1653;
pub const ERROR_INSTALL_REJECTED: u32 = 1654;
pub const ERROR_DYNAMIC_CODE_BLOCKED: u32 = 1655;
pub const ERROR_NOT_SAME_OBJECT: u32 = 1656;
pub const ERROR_STRICT_CFG_VIOLATION: u32 = 1657;
pub const ERROR_SET_CONTEXT_DENIED: u32 = 1660;
pub const ERROR_CROSS_PARTITION_VIOLATION: u32 = 1661;
pub const RPC_S_INVALID_STRING_BINDING: u32 = 1700;
pub const RPC_S_WRONG_KIND_OF_BINDING: u32 = 1701;
pub const RPC_S_INVALID_BINDING: u32 = 1702;
pub const RPC_S_PROTSEQ_NOT_SUPPORTED: u32 = 1703;
pub const RPC_S_INVALID_RPC_PROTSEQ: u32 = 1704;
pub const RPC_S_INVALID_STRING_UUID: u32 = 1705;
pub const RPC_S_INVALID_ENDPOINT_FORMAT: u32 = 1706;
pub const RPC_S_INVALID_NET_ADDR: u32 = 1707;
pub const RPC_S_NO_ENDPOINT_FOUND: u32 = 1708;
pub const RPC_S_INVALID_TIMEOUT: u32 = 1709;
pub const RPC_S_OBJECT_NOT_FOUND: u32 = 1710;
pub const RPC_S_ALREADY_REGISTERED: u32 = 1711;
pub const RPC_S_TYPE_ALREADY_REGISTERED: u32 = 1712;
pub const RPC_S_ALREADY_LISTENING: u32 = 1713;
pub const RPC_S_NO_PROTSEQS_REGISTERED: u32 = 1714;
pub const RPC_S_NOT_LISTENING: u32 = 1715;
pub const RPC_S_UNKNOWN_MGR_TYPE: u32 = 1716;
pub const RPC_S_UNKNOWN_IF: u32 = 1717;
pub const RPC_S_NO_BINDINGS: u32 = 1718;
pub const RPC_S_NO_PROTSEQS: u32 = 1719;
pub const RPC_S_CANT_CREATE_ENDPOINT: u32 = 1720;
pub const RPC_S_OUT_OF_RESOURCES: u32 = 1721;
pub const RPC_S_SERVER_UNAVAILABLE: u32 = 1722;
pub const RPC_S_SERVER_TOO_BUSY: u32 = 1723;
pub const RPC_S_INVALID_NETWORK_OPTIONS: u32 = 1724;
pub const RPC_S_NO_CALL_ACTIVE: u32 = 1725;
pub const RPC_S_CALL_FAILED: u32 = 1726;
pub const RPC_S_CALL_FAILED_DNE: u32 = 1727;
pub const RPC_S_PROTOCOL_ERROR: u32 = 1728;
pub const RPC_S_PROXY_ACCESS_DENIED: u32 = 1729;
pub const RPC_S_UNSUPPORTED_TRANS_SYN: u32 = 1730;
pub const RPC_S_UNSUPPORTED_TYPE: u32 = 1732;
pub const RPC_S_INVALID_TAG: u32 = 1733;
pub const RPC_S_INVALID_BOUND: u32 = 1734;
pub const RPC_S_NO_ENTRY_NAME: u32 = 1735;
pub const RPC_S_INVALID_NAME_SYNTAX: u32 = 1736;
pub const RPC_S_UNSUPPORTED_NAME_SYNTAX: u32 = 1737;
pub const RPC_S_UUID_NO_ADDRESS: u32 = 1739;
pub const RPC_S_DUPLICATE_ENDPOINT: u32 = 1740;
pub const RPC_S_UNKNOWN_AUTHN_TYPE: u32 = 1741;
pub const RPC_S_MAX_CALLS_TOO_SMALL: u32 = 1742;
pub const RPC_S_STRING_TOO_LONG: u32 = 1743;
pub const RPC_S_PROTSEQ_NOT_FOUND: u32 = 1744;
pub const RPC_S_PROCNUM_OUT_OF_RANGE: u32 = 1745;
pub const RPC_S_BINDING_HAS_NO_AUTH: u32 = 1746;
pub const RPC_S_UNKNOWN_AUTHN_SERVICE: u32 = 1747;
pub const RPC_S_UNKNOWN_AUTHN_LEVEL: u32 = 1748;
pub const RPC_S_INVALID_AUTH_IDENTITY: u32 = 1749;
pub const RPC_S_UNKNOWN_AUTHZ_SERVICE: u32 = 1750;
pub const EPT_S_INVALID_ENTRY: u32 = 1751;
pub const EPT_S_CANT_PERFORM_OP: u32 = 1752;
pub const EPT_S_NOT_REGISTERED: u32 = 1753;
pub const RPC_S_NOTHING_TO_EXPORT: u32 = 1754;
pub const RPC_S_INCOMPLETE_NAME: u32 = 1755;
pub const RPC_S_INVALID_VERS_OPTION: u32 = 1756;
pub const RPC_S_NO_MORE_MEMBERS: u32 = 1757;
pub const RPC_S_NOT_ALL_OBJS_UNEXPORTED: u32 = 1758;
pub const RPC_S_INTERFACE_NOT_FOUND: u32 = 1759;
pub const RPC_S_ENTRY_ALREADY_EXISTS: u32 = 1760;
pub const RPC_S_ENTRY_NOT_FOUND: u32 = 1761;
pub const RPC_S_NAME_SERVICE_UNAVAILABLE: u32 = 1762;
pub const RPC_S_INVALID_NAF_ID: u32 = 1763;
pub const RPC_S_CANNOT_SUPPORT: u32 = 1764;
pub const RPC_S_NO_CONTEXT_AVAILABLE: u32 = 1765;
pub const RPC_S_INTERNAL_ERROR: u32 = 1766;
pub const RPC_S_ZERO_DIVIDE: u32 = 1767;
pub const RPC_S_ADDRESS_ERROR: u32 = 1768;
pub const RPC_S_FP_DIV_ZERO: u32 = 1769;
pub const RPC_S_FP_UNDERFLOW: u32 = 1770;
pub const RPC_S_FP_OVERFLOW: u32 = 1771;
pub const RPC_X_NO_MORE_ENTRIES: u32 = 1772;
pub const RPC_X_SS_CHAR_TRANS_OPEN_FAIL: u32 = 1773;
pub const RPC_X_SS_CHAR_TRANS_SHORT_FILE: u32 = 1774;
pub const RPC_X_SS_IN_NULL_CONTEXT: u32 = 1775;
pub const RPC_X_SS_CONTEXT_DAMAGED: u32 = 1777;
pub const RPC_X_SS_HANDLES_MISMATCH: u32 = 1778;
pub const RPC_X_SS_CANNOT_GET_CALL_HANDLE: u32 = 1779;
pub const RPC_X_NULL_REF_POINTER: u32 = 1780;
pub const RPC_X_ENUM_VALUE_OUT_OF_RANGE: u32 = 1781;
pub const RPC_X_BYTE_COUNT_TOO_SMALL: u32 = 1782;
pub const RPC_X_BAD_STUB_DATA: u32 = 1783;
pub const ERROR_INVALID_USER_BUFFER: u32 = 1784;
pub const ERROR_UNRECOGNIZED_MEDIA: u32 = 1785;
pub const ERROR_NO_TRUST_LSA_SECRET: u32 = 1786;
pub const ERROR_NO_TRUST_SAM_ACCOUNT: u32 = 1787;
pub const ERROR_TRUSTED_DOMAIN_FAILURE: u32 = 1788;
pub const ERROR_TRUSTED_RELATIONSHIP_FAILURE: u32 = 1789;
pub const ERROR_TRUST_FAILURE: u32 = 1790;
pub const RPC_S_CALL_IN_PROGRESS: u32 = 1791;
pub const ERROR_NETLOGON_NOT_STARTED: u32 = 1792;
pub const ERROR_ACCOUNT_EXPIRED: u32 = 1793;
pub const ERROR_REDIRECTOR_HAS_OPEN_HANDLES: u32 = 1794;
pub const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED: u32 = 1795;
pub const ERROR_UNKNOWN_PORT: u32 = 1796;
pub const ERROR_UNKNOWN_PRINTER_DRIVER: u32 = 1797;
pub const ERROR_UNKNOWN_PRINTPROCESSOR: u32 = 1798;
pub const ERROR_INVALID_SEPARATOR_FILE: u32 = 1799;
pub const ERROR_INVALID_PRIORITY: u32 = 1800;
pub const ERROR_INVALID_PRINTER_NAME: u32 = 1801;
pub const ERROR_PRINTER_ALREADY_EXISTS: u32 = 1802;
pub const ERROR_INVALID_PRINTER_COMMAND: u32 = 1803;
pub const ERROR_INVALID_DATATYPE: u32 = 1804;
pub const ERROR_INVALID_ENVIRONMENT: u32 = 1805;
pub const RPC_S_NO_MORE_BINDINGS: u32 = 1806;
pub const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT: u32 = 1807;
pub const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT: u32 = 1808;
pub const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT: u32 = 1809;
pub const ERROR_DOMAIN_TRUST_INCONSISTENT: u32 = 1810;
pub const ERROR_SERVER_HAS_OPEN_HANDLES: u32 = 1811;
pub const ERROR_RESOURCE_DATA_NOT_FOUND: u32 = 1812;
pub const ERROR_RESOURCE_TYPE_NOT_FOUND: u32 = 1813;
pub const ERROR_RESOURCE_NAME_NOT_FOUND: u32 = 1814;
pub const ERROR_RESOURCE_LANG_NOT_FOUND: u32 = 1815;
pub const ERROR_NOT_ENOUGH_QUOTA: u32 = 1816;
pub const RPC_S_NO_INTERFACES: u32 = 1817;
pub const RPC_S_CALL_CANCELLED: u32 = 1818;
pub const RPC_S_BINDING_INCOMPLETE: u32 = 1819;
pub const RPC_S_COMM_FAILURE: u32 = 1820;
pub const RPC_S_UNSUPPORTED_AUTHN_LEVEL: u32 = 1821;
pub const RPC_S_NO_PRINC_NAME: u32 = 1822;
pub const RPC_S_NOT_RPC_ERROR: u32 = 1823;
pub const RPC_S_UUID_LOCAL_ONLY: u32 = 1824;
pub const RPC_S_SEC_PKG_ERROR: u32 = 1825;
pub const RPC_S_NOT_CANCELLED: u32 = 1826;
pub const RPC_X_INVALID_ES_ACTION: u32 = 1827;
pub const RPC_X_WRONG_ES_VERSION: u32 = 1828;
pub const RPC_X_WRONG_STUB_VERSION: u32 = 1829;
pub const RPC_X_INVALID_PIPE_OBJECT: u32 = 1830;
pub const RPC_X_WRONG_PIPE_ORDER: u32 = 1831;
pub const RPC_X_WRONG_PIPE_VERSION: u32 = 1832;
pub const RPC_S_COOKIE_AUTH_FAILED: u32 = 1833;
pub const RPC_S_DO_NOT_DISTURB: u32 = 1834;
pub const RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED: u32 = 1835;
pub const RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH: u32 = 1836;
pub const RPC_S_GROUP_MEMBER_NOT_FOUND: u32 = 1898;
pub const EPT_S_CANT_CREATE: u32 = 1899;
pub const RPC_S_INVALID_OBJECT: u32 = 1900;
pub const ERROR_INVALID_TIME: u32 = 1901;
pub const ERROR_INVALID_FORM_NAME: u32 = 1902;
pub const ERROR_INVALID_FORM_SIZE: u32 = 1903;
pub const ERROR_ALREADY_WAITING: u32 = 1904;
pub const ERROR_PRINTER_DELETED: u32 = 1905;
pub const ERROR_INVALID_PRINTER_STATE: u32 = 1906;
pub const ERROR_PASSWORD_MUST_CHANGE: u32 = 1907;
pub const ERROR_DOMAIN_CONTROLLER_NOT_FOUND: u32 = 1908;
pub const ERROR_ACCOUNT_LOCKED_OUT: u32 = 1909;
pub const OR_INVALID_OXID: u32 = 1910;
pub const OR_INVALID_OID: u32 = 1911;
pub const OR_INVALID_SET: u32 = 1912;
pub const RPC_S_SEND_INCOMPLETE: u32 = 1913;
pub const RPC_S_INVALID_ASYNC_HANDLE: u32 = 1914;
pub const RPC_S_INVALID_ASYNC_CALL: u32 = 1915;
pub const RPC_X_PIPE_CLOSED: u32 = 1916;
pub const RPC_X_PIPE_DISCIPLINE_ERROR: u32 = 1917;
pub const RPC_X_PIPE_EMPTY: u32 = 1918;
pub const ERROR_NO_SITENAME: u32 = 1919;
pub const ERROR_CANT_ACCESS_FILE: u32 = 1920;
pub const ERROR_CANT_RESOLVE_FILENAME: u32 = 1921;
pub const RPC_S_ENTRY_TYPE_MISMATCH: u32 = 1922;
pub const RPC_S_NOT_ALL_OBJS_EXPORTED: u32 = 1923;
pub const RPC_S_INTERFACE_NOT_EXPORTED: u32 = 1924;
pub const RPC_S_PROFILE_NOT_ADDED: u32 = 1925;
pub const RPC_S_PRF_ELT_NOT_ADDED: u32 = 1926;
pub const RPC_S_PRF_ELT_NOT_REMOVED: u32 = 1927;
pub const RPC_S_GRP_ELT_NOT_ADDED: u32 = 1928;
pub const RPC_S_GRP_ELT_NOT_REMOVED: u32 = 1929;
pub const ERROR_KM_DRIVER_BLOCKED: u32 = 1930;
pub const ERROR_CONTEXT_EXPIRED: u32 = 1931;
pub const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED: u32 = 1932;
pub const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED: u32 = 1933;
pub const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED: u32 = 1934;
pub const ERROR_AUTHENTICATION_FIREWALL_FAILED: u32 = 1935;
pub const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED: u32 = 1936;
pub const ERROR_NTLM_BLOCKED: u32 = 1937;
pub const ERROR_PASSWORD_CHANGE_REQUIRED: u32 = 1938;
pub const ERROR_LOST_MODE_LOGON_RESTRICTION: u32 = 1939;
pub const ERROR_INVALID_PIXEL_FORMAT: u32 = 2000;
pub const ERROR_BAD_DRIVER: u32 = 2001;
pub const ERROR_INVALID_WINDOW_STYLE: u32 = 2002;
pub const ERROR_METAFILE_NOT_SUPPORTED: u32 = 2003;
pub const ERROR_TRANSFORM_NOT_SUPPORTED: u32 = 2004;
pub const ERROR_CLIPPING_NOT_SUPPORTED: u32 = 2005;
pub const ERROR_INVALID_CMM: u32 = 2010;
pub const ERROR_INVALID_PROFILE: u32 = 2011;
pub const ERROR_TAG_NOT_FOUND: u32 = 2012;
pub const ERROR_TAG_NOT_PRESENT: u32 = 2013;
pub const ERROR_DUPLICATE_TAG: u32 = 2014;
pub const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE: u32 = 2015;
pub const ERROR_PROFILE_NOT_FOUND: u32 = 2016;
pub const ERROR_INVALID_COLORSPACE: u32 = 2017;
pub const ERROR_ICM_NOT_ENABLED: u32 = 2018;
pub const ERROR_DELETING_ICM_XFORM: u32 = 2019;
pub const ERROR_INVALID_TRANSFORM: u32 = 2020;
pub const ERROR_COLORSPACE_MISMATCH: u32 = 2021;
pub const ERROR_INVALID_COLORINDEX: u32 = 2022;
pub const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE: u32 = 2023;
pub const ERROR_CONNECTED_OTHER_PASSWORD: u32 = 2108;
pub const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT: u32 = 2109;
pub const ERROR_BAD_USERNAME: u32 = 2202;
pub const ERROR_NOT_CONNECTED: u32 = 2250;
pub const ERROR_OPEN_FILES: u32 = 2401;
pub const ERROR_ACTIVE_CONNECTIONS: u32 = 2402;
pub const ERROR_DEVICE_IN_USE: u32 = 2404;
pub const ERROR_UNKNOWN_PRINT_MONITOR: u32 = 3000;
pub const ERROR_PRINTER_DRIVER_IN_USE: u32 = 3001;
pub const ERROR_SPOOL_FILE_NOT_FOUND: u32 = 3002;
pub const ERROR_SPL_NO_STARTDOC: u32 = 3003;
pub const ERROR_SPL_NO_ADDJOB: u32 = 3004;
pub const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED: u32 = 3005;
pub const ERROR_PRINT_MONITOR_ALREADY_INSTALLED: u32 = 3006;
pub const ERROR_INVALID_PRINT_MONITOR: u32 = 3007;
pub const ERROR_PRINT_MONITOR_IN_USE: u32 = 3008;
pub const ERROR_PRINTER_HAS_JOBS_QUEUED: u32 = 3009;
pub const ERROR_SUCCESS_REBOOT_REQUIRED: u32 = 3010;
pub const ERROR_SUCCESS_RESTART_REQUIRED: u32 = 3011;
pub const ERROR_PRINTER_NOT_FOUND: u32 = 3012;
pub const ERROR_PRINTER_DRIVER_WARNED: u32 = 3013;
pub const ERROR_PRINTER_DRIVER_BLOCKED: u32 = 3014;
pub const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE: u32 = 3015;
pub const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND: u32 = 3016;
pub const ERROR_FAIL_REBOOT_REQUIRED: u32 = 3017;
pub const ERROR_FAIL_REBOOT_INITIATED: u32 = 3018;
pub const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED: u32 = 3019;
pub const ERROR_PRINT_JOB_RESTART_REQUIRED: u32 = 3020;
pub const ERROR_INVALID_PRINTER_DRIVER_MANIFEST: u32 = 3021;
pub const ERROR_PRINTER_NOT_SHAREABLE: u32 = 3022;
pub const ERROR_REQUEST_PAUSED: u32 = 3050;
pub const ERROR_APPEXEC_CONDITION_NOT_SATISFIED: u32 = 3060;
pub const ERROR_APPEXEC_HANDLE_INVALIDATED: u32 = 3061;
pub const ERROR_APPEXEC_INVALID_HOST_GENERATION: u32 = 3062;
pub const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION: u32 = 3063;
pub const ERROR_APPEXEC_INVALID_HOST_STATE: u32 = 3064;
pub const ERROR_APPEXEC_NO_DONOR: u32 = 3065;
pub const ERROR_APPEXEC_HOST_ID_MISMATCH: u32 = 3066;
pub const ERROR_APPEXEC_UNKNOWN_USER: u32 = 3067;
pub const ERROR_IO_REISSUE_AS_CACHED: u32 = 3950;
pub const ERROR_WINS_INTERNAL: u32 = 4000;
pub const ERROR_CAN_NOT_DEL_LOCAL_WINS: u32 = 4001;
pub const ERROR_STATIC_INIT: u32 = 4002;
pub const ERROR_INC_BACKUP: u32 = 4003;
pub const ERROR_FULL_BACKUP: u32 = 4004;
pub const ERROR_REC_NON_EXISTENT: u32 = 4005;
pub const ERROR_RPL_NOT_ALLOWED: u32 = 4006;
pub const PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED: u32 = 4050;
pub const PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO: u32 = 4051;
pub const PEERDIST_ERROR_MISSING_DATA: u32 = 4052;
pub const PEERDIST_ERROR_NO_MORE: u32 = 4053;
pub const PEERDIST_ERROR_NOT_INITIALIZED: u32 = 4054;
pub const PEERDIST_ERROR_ALREADY_INITIALIZED: u32 = 4055;
pub const PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS: u32 = 4056;
pub const PEERDIST_ERROR_INVALIDATED: u32 = 4057;
pub const PEERDIST_ERROR_ALREADY_EXISTS: u32 = 4058;
pub const PEERDIST_ERROR_OPERATION_NOTFOUND: u32 = 4059;
pub const PEERDIST_ERROR_ALREADY_COMPLETED: u32 = 4060;
pub const PEERDIST_ERROR_OUT_OF_BOUNDS: u32 = 4061;
pub const PEERDIST_ERROR_VERSION_UNSUPPORTED: u32 = 4062;
pub const PEERDIST_ERROR_INVALID_CONFIGURATION: u32 = 4063;
pub const PEERDIST_ERROR_NOT_LICENSED: u32 = 4064;
pub const PEERDIST_ERROR_SERVICE_UNAVAILABLE: u32 = 4065;
pub const PEERDIST_ERROR_TRUST_FAILURE: u32 = 4066;
pub const ERROR_DHCP_ADDRESS_CONFLICT: u32 = 4100;
pub const ERROR_WMI_GUID_NOT_FOUND: u32 = 4200;
pub const ERROR_WMI_INSTANCE_NOT_FOUND: u32 = 4201;
pub const ERROR_WMI_ITEMID_NOT_FOUND: u32 = 4202;
pub const ERROR_WMI_TRY_AGAIN: u32 = 4203;
pub const ERROR_WMI_DP_NOT_FOUND: u32 = 4204;
pub const ERROR_WMI_UNRESOLVED_INSTANCE_REF: u32 = 4205;
pub const ERROR_WMI_ALREADY_ENABLED: u32 = 4206;
pub const ERROR_WMI_GUID_DISCONNECTED: u32 = 4207;
pub const ERROR_WMI_SERVER_UNAVAILABLE: u32 = 4208;
pub const ERROR_WMI_DP_FAILED: u32 = 4209;
pub const ERROR_WMI_INVALID_MOF: u32 = 4210;
pub const ERROR_WMI_INVALID_REGINFO: u32 = 4211;
pub const ERROR_WMI_ALREADY_DISABLED: u32 = 4212;
pub const ERROR_WMI_READ_ONLY: u32 = 4213;
pub const ERROR_WMI_SET_FAILURE: u32 = 4214;
pub const ERROR_NOT_APPCONTAINER: u32 = 4250;
pub const ERROR_APPCONTAINER_REQUIRED: u32 = 4251;
pub const ERROR_NOT_SUPPORTED_IN_APPCONTAINER: u32 = 4252;
pub const ERROR_INVALID_PACKAGE_SID_LENGTH: u32 = 4253;
pub const ERROR_INVALID_MEDIA: u32 = 4300;
pub const ERROR_INVALID_LIBRARY: u32 = 4301;
pub const ERROR_INVALID_MEDIA_POOL: u32 = 4302;
pub const ERROR_DRIVE_MEDIA_MISMATCH: u32 = 4303;
pub const ERROR_MEDIA_OFFLINE: u32 = 4304;
pub const ERROR_LIBRARY_OFFLINE: u32 = 4305;
pub const ERROR_EMPTY: u32 = 4306;
pub const ERROR_NOT_EMPTY: u32 = 4307;
pub const ERROR_MEDIA_UNAVAILABLE: u32 = 4308;
pub const ERROR_RESOURCE_DISABLED: u32 = 4309;
pub const ERROR_INVALID_CLEANER: u32 = 4310;
pub const ERROR_UNABLE_TO_CLEAN: u32 = 4311;
pub const ERROR_OBJECT_NOT_FOUND: u32 = 4312;
pub const ERROR_DATABASE_FAILURE: u32 = 4313;
pub const ERROR_DATABASE_FULL: u32 = 4314;
pub const ERROR_MEDIA_INCOMPATIBLE: u32 = 4315;
pub const ERROR_RESOURCE_NOT_PRESENT: u32 = 4316;
pub const ERROR_INVALID_OPERATION: u32 = 4317;
pub const ERROR_MEDIA_NOT_AVAILABLE: u32 = 4318;
pub const ERROR_DEVICE_NOT_AVAILABLE: u32 = 4319;
pub const ERROR_REQUEST_REFUSED: u32 = 4320;
pub const ERROR_INVALID_DRIVE_OBJECT: u32 = 4321;
pub const ERROR_LIBRARY_FULL: u32 = 4322;
pub const ERROR_MEDIUM_NOT_ACCESSIBLE: u32 = 4323;
pub const ERROR_UNABLE_TO_LOAD_MEDIUM: u32 = 4324;
pub const ERROR_UNABLE_TO_INVENTORY_DRIVE: u32 = 4325;
pub const ERROR_UNABLE_TO_INVENTORY_SLOT: u32 = 4326;
pub const ERROR_UNABLE_TO_INVENTORY_TRANSPORT: u32 = 4327;
pub const ERROR_TRANSPORT_FULL: u32 = 4328;
pub const ERROR_CONTROLLING_IEPORT: u32 = 4329;
pub const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA: u32 = 4330;
pub const ERROR_CLEANER_SLOT_SET: u32 = 4331;
pub const ERROR_CLEANER_SLOT_NOT_SET: u32 = 4332;
pub const ERROR_CLEANER_CARTRIDGE_SPENT: u32 = 4333;
pub const ERROR_UNEXPECTED_OMID: u32 = 4334;
pub const ERROR_CANT_DELETE_LAST_ITEM: u32 = 4335;
pub const ERROR_MESSAGE_EXCEEDS_MAX_SIZE: u32 = 4336;
pub const ERROR_VOLUME_CONTAINS_SYS_FILES: u32 = 4337;
pub const ERROR_INDIGENOUS_TYPE: u32 = 4338;
pub const ERROR_NO_SUPPORTING_DRIVES: u32 = 4339;
pub const ERROR_CLEANER_CARTRIDGE_INSTALLED: u32 = 4340;
pub const ERROR_IEPORT_FULL: u32 = 4341;
pub const ERROR_FILE_OFFLINE: u32 = 4350;
pub const ERROR_REMOTE_STORAGE_NOT_ACTIVE: u32 = 4351;
pub const ERROR_REMOTE_STORAGE_MEDIA_ERROR: u32 = 4352;
pub const ERROR_NOT_A_REPARSE_POINT: u32 = 4390;
pub const ERROR_REPARSE_ATTRIBUTE_CONFLICT: u32 = 4391;
pub const ERROR_INVALID_REPARSE_DATA: u32 = 4392;
pub const ERROR_REPARSE_TAG_INVALID: u32 = 4393;
pub const ERROR_REPARSE_TAG_MISMATCH: u32 = 4394;
pub const ERROR_REPARSE_POINT_ENCOUNTERED: u32 = 4395;
pub const ERROR_APP_DATA_NOT_FOUND: u32 = 4400;
pub const ERROR_APP_DATA_EXPIRED: u32 = 4401;
pub const ERROR_APP_DATA_CORRUPT: u32 = 4402;
pub const ERROR_APP_DATA_LIMIT_EXCEEDED: u32 = 4403;
pub const ERROR_APP_DATA_REBOOT_REQUIRED: u32 = 4404;
pub const ERROR_SECUREBOOT_ROLLBACK_DETECTED: u32 = 4420;
pub const ERROR_SECUREBOOT_POLICY_VIOLATION: u32 = 4421;
pub const ERROR_SECUREBOOT_INVALID_POLICY: u32 = 4422;
pub const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND: u32 = 4423;
pub const ERROR_SECUREBOOT_POLICY_NOT_SIGNED: u32 = 4424;
pub const ERROR_SECUREBOOT_NOT_ENABLED: u32 = 4425;
pub const ERROR_SECUREBOOT_FILE_REPLACED: u32 = 4426;
pub const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED: u32 = 4427;
pub const ERROR_SECUREBOOT_POLICY_UNKNOWN: u32 = 4428;
pub const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION: u32 = 4429;
pub const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH: u32 = 4430;
pub const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED: u32 = 4431;
pub const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH: u32 = 4432;
pub const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING: u32 = 4433;
pub const ERROR_SECUREBOOT_NOT_BASE_POLICY: u32 = 4434;
pub const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY: u32 = 4435;
pub const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED: u32 = 4440;
pub const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED: u32 = 4441;
pub const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED: u32 = 4442;
pub const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED: u32 = 4443;
pub const ERROR_ALREADY_HAS_STREAM_ID: u32 = 4444;
pub const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED: u32 = 4445;
pub const ERROR_WOF_WIM_HEADER_CORRUPT: u32 = 4446;
pub const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT: u32 = 4447;
pub const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT: u32 = 4448;
pub const ERROR_VOLUME_NOT_SIS_ENABLED: u32 = 4500;
pub const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED: u32 = 4550;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION: u32 = 4551;
pub const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY: u32 = 4552;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED: u32 = 4553;
pub const ERROR_VSM_NOT_INITIALIZED: u32 = 4560;
pub const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE: u32 = 4561;
pub const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED: u32 = 4570;
pub const ERROR_PLATFORM_MANIFEST_INVALID: u32 = 4571;
pub const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED: u32 = 4572;
pub const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED: u32 = 4573;
pub const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND: u32 = 4574;
pub const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE: u32 = 4575;
pub const ERROR_PLATFORM_MANIFEST_NOT_SIGNED: u32 = 4576;
pub const ERROR_DEPENDENT_RESOURCE_EXISTS: u32 = 5001;
pub const ERROR_DEPENDENCY_NOT_FOUND: u32 = 5002;
pub const ERROR_DEPENDENCY_ALREADY_EXISTS: u32 = 5003;
pub const ERROR_RESOURCE_NOT_ONLINE: u32 = 5004;
pub const ERROR_HOST_NODE_NOT_AVAILABLE: u32 = 5005;
pub const ERROR_RESOURCE_NOT_AVAILABLE: u32 = 5006;
pub const ERROR_RESOURCE_NOT_FOUND: u32 = 5007;
pub const ERROR_SHUTDOWN_CLUSTER: u32 = 5008;
pub const ERROR_CANT_EVICT_ACTIVE_NODE: u32 = 5009;
pub const ERROR_OBJECT_ALREADY_EXISTS: u32 = 5010;
pub const ERROR_OBJECT_IN_LIST: u32 = 5011;
pub const ERROR_GROUP_NOT_AVAILABLE: u32 = 5012;
pub const ERROR_GROUP_NOT_FOUND: u32 = 5013;
pub const ERROR_GROUP_NOT_ONLINE: u32 = 5014;
pub const ERROR_HOST_NODE_NOT_RESOURCE_OWNER: u32 = 5015;
pub const ERROR_HOST_NODE_NOT_GROUP_OWNER: u32 = 5016;
pub const ERROR_RESMON_CREATE_FAILED: u32 = 5017;
pub const ERROR_RESMON_ONLINE_FAILED: u32 = 5018;
pub const ERROR_RESOURCE_ONLINE: u32 = 5019;
pub const ERROR_QUORUM_RESOURCE: u32 = 5020;
pub const ERROR_NOT_QUORUM_CAPABLE: u32 = 5021;
pub const ERROR_CLUSTER_SHUTTING_DOWN: u32 = 5022;
pub const ERROR_INVALID_STATE: u32 = 5023;
pub const ERROR_RESOURCE_PROPERTIES_STORED: u32 = 5024;
pub const ERROR_NOT_QUORUM_CLASS: u32 = 5025;
pub const ERROR_CORE_RESOURCE: u32 = 5026;
pub const ERROR_QUORUM_RESOURCE_ONLINE_FAILED: u32 = 5027;
pub const ERROR_QUORUMLOG_OPEN_FAILED: u32 = 5028;
pub const ERROR_CLUSTERLOG_CORRUPT: u32 = 5029;
pub const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE: u32 = 5030;
pub const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE: u32 = 5031;
pub const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND: u32 = 5032;
pub const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE: u32 = 5033;
pub const ERROR_QUORUM_OWNER_ALIVE: u32 = 5034;
pub const ERROR_NETWORK_NOT_AVAILABLE: u32 = 5035;
pub const ERROR_NODE_NOT_AVAILABLE: u32 = 5036;
pub const ERROR_ALL_NODES_NOT_AVAILABLE: u32 = 5037;
pub const ERROR_RESOURCE_FAILED: u32 = 5038;
pub const ERROR_CLUSTER_INVALID_NODE: u32 = 5039;
pub const ERROR_CLUSTER_NODE_EXISTS: u32 = 5040;
pub const ERROR_CLUSTER_JOIN_IN_PROGRESS: u32 = 5041;
pub const ERROR_CLUSTER_NODE_NOT_FOUND: u32 = 5042;
pub const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND: u32 = 5043;
pub const ERROR_CLUSTER_NETWORK_EXISTS: u32 = 5044;
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND: u32 = 5045;
pub const ERROR_CLUSTER_NETINTERFACE_EXISTS: u32 = 5046;
pub const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND: u32 = 5047;
pub const ERROR_CLUSTER_INVALID_REQUEST: u32 = 5048;
pub const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER: u32 = 5049;
pub const ERROR_CLUSTER_NODE_DOWN: u32 = 5050;
pub const ERROR_CLUSTER_NODE_UNREACHABLE: u32 = 5051;
pub const ERROR_CLUSTER_NODE_NOT_MEMBER: u32 = 5052;
pub const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS: u32 = 5053;
pub const ERROR_CLUSTER_INVALID_NETWORK: u32 = 5054;
pub const ERROR_CLUSTER_NODE_UP: u32 = 5056;
pub const ERROR_CLUSTER_IPADDR_IN_USE: u32 = 5057;
pub const ERROR_CLUSTER_NODE_NOT_PAUSED: u32 = 5058;
pub const ERROR_CLUSTER_NO_SECURITY_CONTEXT: u32 = 5059;
pub const ERROR_CLUSTER_NETWORK_NOT_INTERNAL: u32 = 5060;
pub const ERROR_CLUSTER_NODE_ALREADY_UP: u32 = 5061;
pub const ERROR_CLUSTER_NODE_ALREADY_DOWN: u32 = 5062;
pub const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE: u32 = 5063;
pub const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE: u32 = 5064;
pub const ERROR_CLUSTER_NODE_ALREADY_MEMBER: u32 = 5065;
pub const ERROR_CLUSTER_LAST_INTERNAL_NETWORK: u32 = 5066;
pub const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS: u32 = 5067;
pub const ERROR_INVALID_OPERATION_ON_QUORUM: u32 = 5068;
pub const ERROR_DEPENDENCY_NOT_ALLOWED: u32 = 5069;
pub const ERROR_CLUSTER_NODE_PAUSED: u32 = 5070;
pub const ERROR_NODE_CANT_HOST_RESOURCE: u32 = 5071;
pub const ERROR_CLUSTER_NODE_NOT_READY: u32 = 5072;
pub const ERROR_CLUSTER_NODE_SHUTTING_DOWN: u32 = 5073;
pub const ERROR_CLUSTER_JOIN_ABORTED: u32 = 5074;
pub const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS: u32 = 5075;
pub const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED: u32 = 5076;
pub const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED: u32 = 5077;
pub const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND: u32 = 5078;
pub const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED: u32 = 5079;
pub const ERROR_CLUSTER_RESNAME_NOT_FOUND: u32 = 5080;
pub const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED: u32 = 5081;
pub const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST: u32 = 5082;
pub const ERROR_CLUSTER_DATABASE_SEQMISMATCH: u32 = 5083;
pub const ERROR_RESMON_INVALID_STATE: u32 = 5084;
pub const ERROR_CLUSTER_GUM_NOT_LOCKER: u32 = 5085;
pub const ERROR_QUORUM_DISK_NOT_FOUND: u32 = 5086;
pub const ERROR_DATABASE_BACKUP_CORRUPT: u32 = 5087;
pub const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT: u32 = 5088;
pub const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE: u32 = 5089;
pub const ERROR_NO_ADMIN_ACCESS_POINT: u32 = 5090;
pub const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE: u32 = 5890;
pub const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND: u32 = 5891;
pub const ERROR_CLUSTER_MEMBERSHIP_HALT: u32 = 5892;
pub const ERROR_CLUSTER_INSTANCE_ID_MISMATCH: u32 = 5893;
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP: u32 = 5894;
pub const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH: u32 = 5895;
pub const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP: u32 = 5896;
pub const ERROR_CLUSTER_PARAMETER_MISMATCH: u32 = 5897;
pub const ERROR_NODE_CANNOT_BE_CLUSTERED: u32 = 5898;
pub const ERROR_CLUSTER_WRONG_OS_VERSION: u32 = 5899;
pub const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME: u32 = 5900;
pub const ERROR_CLUSCFG_ALREADY_COMMITTED: u32 = 5901;
pub const ERROR_CLUSCFG_ROLLBACK_FAILED: u32 = 5902;
pub const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT: u32 = 5903;
pub const ERROR_CLUSTER_OLD_VERSION: u32 = 5904;
pub const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME: u32 = 5905;
pub const ERROR_CLUSTER_NO_NET_ADAPTERS: u32 = 5906;
pub const ERROR_CLUSTER_POISONED: u32 = 5907;
pub const ERROR_CLUSTER_GROUP_MOVING: u32 = 5908;
pub const ERROR_CLUSTER_RESOURCE_TYPE_BUSY: u32 = 5909;
pub const ERROR_RESOURCE_CALL_TIMED_OUT: u32 = 5910;
pub const ERROR_INVALID_CLUSTER_IPV6_ADDRESS: u32 = 5911;
pub const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION: u32 = 5912;
pub const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS: u32 = 5913;
pub const ERROR_CLUSTER_PARTIAL_SEND: u32 = 5914;
pub const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION: u32 = 5915;
pub const ERROR_CLUSTER_INVALID_STRING_TERMINATION: u32 = 5916;
pub const ERROR_CLUSTER_INVALID_STRING_FORMAT: u32 = 5917;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS: u32 = 5918;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS: u32 = 5919;
pub const ERROR_CLUSTER_NULL_DATA: u32 = 5920;
pub const ERROR_CLUSTER_PARTIAL_READ: u32 = 5921;
pub const ERROR_CLUSTER_PARTIAL_WRITE: u32 = 5922;
pub const ERROR_CLUSTER_CANT_DESERIALIZE_DATA: u32 = 5923;
pub const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT: u32 = 5924;
pub const ERROR_CLUSTER_NO_QUORUM: u32 = 5925;
pub const ERROR_CLUSTER_INVALID_IPV6_NETWORK: u32 = 5926;
pub const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK: u32 = 5927;
pub const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP: u32 = 5928;
pub const ERROR_DEPENDENCY_TREE_TOO_COMPLEX: u32 = 5929;
pub const ERROR_EXCEPTION_IN_RESOURCE_CALL: u32 = 5930;
pub const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION: u32 = 5931;
pub const ERROR_CLUSTER_NOT_INSTALLED: u32 = 5932;
pub const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE: u32 = 5933;
pub const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER: u32 = 5934;
pub const ERROR_CLUSTER_TOO_MANY_NODES: u32 = 5935;
pub const ERROR_CLUSTER_OBJECT_ALREADY_USED: u32 = 5936;
pub const ERROR_NONCORE_GROUPS_FOUND: u32 = 5937;
pub const ERROR_FILE_SHARE_RESOURCE_CONFLICT: u32 = 5938;
pub const ERROR_CLUSTER_EVICT_INVALID_REQUEST: u32 = 5939;
pub const ERROR_CLUSTER_SINGLETON_RESOURCE: u32 = 5940;
pub const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE: u32 = 5941;
pub const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED: u32 = 5942;
pub const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR: u32 = 5943;
pub const ERROR_CLUSTER_GROUP_BUSY: u32 = 5944;
pub const ERROR_CLUSTER_NOT_SHARED_VOLUME: u32 = 5945;
pub const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR: u32 = 5946;
pub const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE: u32 = 5947;
pub const ERROR_CLUSTER_USE_SHARED_VOLUMES_API: u32 = 5948;
pub const ERROR_CLUSTER_BACKUP_IN_PROGRESS: u32 = 5949;
pub const ERROR_NON_CSV_PATH: u32 = 5950;
pub const ERROR_CSV_VOLUME_NOT_LOCAL: u32 = 5951;
pub const ERROR_CLUSTER_WATCHDOG_TERMINATING: u32 = 5952;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES: u32 = 5953;
pub const ERROR_CLUSTER_INVALID_NODE_WEIGHT: u32 = 5954;
pub const ERROR_CLUSTER_RESOURCE_VETOED_CALL: u32 = 5955;
pub const ERROR_RESMON_SYSTEM_RESOURCES_LACKING: u32 = 5956;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION: u32 = 5957;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE: u32 = 5958;
pub const ERROR_CLUSTER_GROUP_QUEUED: u32 = 5959;
pub const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS: u32 = 5960;
pub const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED: u32 = 5961;
pub const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS: u32 = 5962;
pub const ERROR_CLUSTER_DISK_NOT_CONNECTED: u32 = 5963;
pub const ERROR_DISK_NOT_CSV_CAPABLE: u32 = 5964;
pub const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE: u32 = 5965;
pub const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED: u32 = 5966;
pub const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED: u32 = 5967;
pub const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES: u32 = 5968;
pub const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES: u32 = 5969;
pub const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE: u32 = 5970;
pub const ERROR_CLUSTER_AFFINITY_CONFLICT: u32 = 5971;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE: u32 = 5972;
pub const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS: u32 = 5973;
pub const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED: u32 = 5974;
pub const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED: u32 = 5975;
pub const ERROR_CLUSTER_UPGRADE_IN_PROGRESS: u32 = 5976;
pub const ERROR_CLUSTER_UPGRADE_INCOMPLETE: u32 = 5977;
pub const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD: u32 = 5978;
pub const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT: u32 = 5979;
pub const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER: u32 = 5980;
pub const ERROR_CLUSTER_RESOURCE_NOT_MONITORED: u32 = 5981;
pub const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED: u32 = 5982;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICATED: u32 = 5983;
pub const ERROR_CLUSTER_NODE_ISOLATED: u32 = 5984;
pub const ERROR_CLUSTER_NODE_QUARANTINED: u32 = 5985;
pub const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED: u32 = 5986;
pub const ERROR_CLUSTER_SPACE_DEGRADED: u32 = 5987;
pub const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED: u32 = 5988;
pub const ERROR_CLUSTER_CSV_INVALID_HANDLE: u32 = 5989;
pub const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR: u32 = 5990;
pub const ERROR_GROUPSET_NOT_AVAILABLE: u32 = 5991;
pub const ERROR_GROUPSET_NOT_FOUND: u32 = 5992;
pub const ERROR_GROUPSET_CANT_PROVIDE: u32 = 5993;
pub const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND: u32 = 5994;
pub const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY: u32 = 5995;
pub const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION: u32 = 5996;
pub const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS: u32 = 5997;
pub const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME: u32 = 5998;
pub const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE: u32 = 5999;
pub const ERROR_ENCRYPTION_FAILED: u32 = 6000;
pub const ERROR_DECRYPTION_FAILED: u32 = 6001;
pub const ERROR_FILE_ENCRYPTED: u32 = 6002;
pub const ERROR_NO_RECOVERY_POLICY: u32 = 6003;
pub const ERROR_NO_EFS: u32 = 6004;
pub const ERROR_WRONG_EFS: u32 = 6005;
pub const ERROR_NO_USER_KEYS: u32 = 6006;
pub const ERROR_FILE_NOT_ENCRYPTED: u32 = 6007;
pub const ERROR_NOT_EXPORT_FORMAT: u32 = 6008;
pub const ERROR_FILE_READ_ONLY: u32 = 6009;
pub const ERROR_DIR_EFS_DISALLOWED: u32 = 6010;
pub const ERROR_EFS_SERVER_NOT_TRUSTED: u32 = 6011;
pub const ERROR_BAD_RECOVERY_POLICY: u32 = 6012;
pub const ERROR_EFS_ALG_BLOB_TOO_BIG: u32 = 6013;
pub const ERROR_VOLUME_NOT_SUPPORT_EFS: u32 = 6014;
pub const ERROR_EFS_DISABLED: u32 = 6015;
pub const ERROR_EFS_VERSION_NOT_SUPPORT: u32 = 6016;
pub const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE: u32 = 6017;
pub const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER: u32 = 6018;
pub const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE: u32 = 6019;
pub const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE: u32 = 6020;
pub const ERROR_CS_ENCRYPTION_FILE_NOT_CSE: u32 = 6021;
pub const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION: u32 = 6022;
pub const ERROR_NO_BROWSER_SERVERS_FOUND: u32 = 6118;
pub const SCHED_E_SERVICE_NOT_LOCALSYSTEM: u32 = 6200;
pub const ERROR_LOG_SECTOR_INVALID: u32 = 6600;
pub const ERROR_LOG_SECTOR_PARITY_INVALID: u32 = 6601;
pub const ERROR_LOG_SECTOR_REMAPPED: u32 = 6602;
pub const ERROR_LOG_BLOCK_INCOMPLETE: u32 = 6603;
pub const ERROR_LOG_INVALID_RANGE: u32 = 6604;
pub const ERROR_LOG_BLOCKS_EXHAUSTED: u32 = 6605;
pub const ERROR_LOG_READ_CONTEXT_INVALID: u32 = 6606;
pub const ERROR_LOG_RESTART_INVALID: u32 = 6607;
pub const ERROR_LOG_BLOCK_VERSION: u32 = 6608;
pub const ERROR_LOG_BLOCK_INVALID: u32 = 6609;
pub const ERROR_LOG_READ_MODE_INVALID: u32 = 6610;
pub const ERROR_LOG_NO_RESTART: u32 = 6611;
pub const ERROR_LOG_METADATA_CORRUPT: u32 = 6612;
pub const ERROR_LOG_METADATA_INVALID: u32 = 6613;
pub const ERROR_LOG_METADATA_INCONSISTENT: u32 = 6614;
pub const ERROR_LOG_RESERVATION_INVALID: u32 = 6615;
pub const ERROR_LOG_CANT_DELETE: u32 = 6616;
pub const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED: u32 = 6617;
pub const ERROR_LOG_START_OF_LOG: u32 = 6618;
pub const ERROR_LOG_POLICY_ALREADY_INSTALLED: u32 = 6619;
pub const ERROR_LOG_POLICY_NOT_INSTALLED: u32 = 6620;
pub const ERROR_LOG_POLICY_INVALID: u32 = 6621;
pub const ERROR_LOG_POLICY_CONFLICT: u32 = 6622;
pub const ERROR_LOG_PINNED_ARCHIVE_TAIL: u32 = 6623;
pub const ERROR_LOG_RECORD_NONEXISTENT: u32 = 6624;
pub const ERROR_LOG_RECORDS_RESERVED_INVALID: u32 = 6625;
pub const ERROR_LOG_SPACE_RESERVED_INVALID: u32 = 6626;
pub const ERROR_LOG_TAIL_INVALID: u32 = 6627;
pub const ERROR_LOG_FULL: u32 = 6628;
pub const ERROR_COULD_NOT_RESIZE_LOG: u32 = 6629;
pub const ERROR_LOG_MULTIPLEXED: u32 = 6630;
pub const ERROR_LOG_DEDICATED: u32 = 6631;
pub const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS: u32 = 6632;
pub const ERROR_LOG_ARCHIVE_IN_PROGRESS: u32 = 6633;
pub const ERROR_LOG_EPHEMERAL: u32 = 6634;
pub const ERROR_LOG_NOT_ENOUGH_CONTAINERS: u32 = 6635;
pub const ERROR_LOG_CLIENT_ALREADY_REGISTERED: u32 = 6636;
pub const ERROR_LOG_CLIENT_NOT_REGISTERED: u32 = 6637;
pub const ERROR_LOG_FULL_HANDLER_IN_PROGRESS: u32 = 6638;
pub const ERROR_LOG_CONTAINER_READ_FAILED: u32 = 6639;
pub const ERROR_LOG_CONTAINER_WRITE_FAILED: u32 = 6640;
pub const ERROR_LOG_CONTAINER_OPEN_FAILED: u32 = 6641;
pub const ERROR_LOG_CONTAINER_STATE_INVALID: u32 = 6642;
pub const ERROR_LOG_STATE_INVALID: u32 = 6643;
pub const ERROR_LOG_PINNED: u32 = 6644;
pub const ERROR_LOG_METADATA_FLUSH_FAILED: u32 = 6645;
pub const ERROR_LOG_INCONSISTENT_SECURITY: u32 = 6646;
pub const ERROR_LOG_APPENDED_FLUSH_FAILED: u32 = 6647;
pub const ERROR_LOG_PINNED_RESERVATION: u32 = 6648;
pub const ERROR_INVALID_TRANSACTION: u32 = 6700;
pub const ERROR_TRANSACTION_NOT_ACTIVE: u32 = 6701;
pub const ERROR_TRANSACTION_REQUEST_NOT_VALID: u32 = 6702;
pub const ERROR_TRANSACTION_NOT_REQUESTED: u32 = 6703;
pub const ERROR_TRANSACTION_ALREADY_ABORTED: u32 = 6704;
pub const ERROR_TRANSACTION_ALREADY_COMMITTED: u32 = 6705;
pub const ERROR_TM_INITIALIZATION_FAILED: u32 = 6706;
pub const ERROR_RESOURCEMANAGER_READ_ONLY: u32 = 6707;
pub const ERROR_TRANSACTION_NOT_JOINED: u32 = 6708;
pub const ERROR_TRANSACTION_SUPERIOR_EXISTS: u32 = 6709;
pub const ERROR_CRM_PROTOCOL_ALREADY_EXISTS: u32 = 6710;
pub const ERROR_TRANSACTION_PROPAGATION_FAILED: u32 = 6711;
pub const ERROR_CRM_PROTOCOL_NOT_FOUND: u32 = 6712;
pub const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER: u32 = 6713;
pub const ERROR_CURRENT_TRANSACTION_NOT_VALID: u32 = 6714;
pub const ERROR_TRANSACTION_NOT_FOUND: u32 = 6715;
pub const ERROR_RESOURCEMANAGER_NOT_FOUND: u32 = 6716;
pub const ERROR_ENLISTMENT_NOT_FOUND: u32 = 6717;
pub const ERROR_TRANSACTIONMANAGER_NOT_FOUND: u32 = 6718;
pub const ERROR_TRANSACTIONMANAGER_NOT_ONLINE: u32 = 6719;
pub const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION: u32 = 6720;
pub const ERROR_TRANSACTION_NOT_ROOT: u32 = 6721;
pub const ERROR_TRANSACTION_OBJECT_EXPIRED: u32 = 6722;
pub const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED: u32 = 6723;
pub const ERROR_TRANSACTION_RECORD_TOO_LONG: u32 = 6724;
pub const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED: u32 = 6725;
pub const ERROR_TRANSACTION_INTEGRITY_VIOLATED: u32 = 6726;
pub const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH: u32 = 6727;
pub const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT: u32 = 6728;
pub const ERROR_TRANSACTION_MUST_WRITETHROUGH: u32 = 6729;
pub const ERROR_TRANSACTION_NO_SUPERIOR: u32 = 6730;
pub const ERROR_HEURISTIC_DAMAGE_POSSIBLE: u32 = 6731;
pub const ERROR_TRANSACTIONAL_CONFLICT: u32 = 6800;
pub const ERROR_RM_NOT_ACTIVE: u32 = 6801;
pub const ERROR_RM_METADATA_CORRUPT: u32 = 6802;
pub const ERROR_DIRECTORY_NOT_RM: u32 = 6803;
pub const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE: u32 = 6805;
pub const ERROR_LOG_RESIZE_INVALID_SIZE: u32 = 6806;
pub const ERROR_OBJECT_NO_LONGER_EXISTS: u32 = 6807;
pub const ERROR_STREAM_MINIVERSION_NOT_FOUND: u32 = 6808;
pub const ERROR_STREAM_MINIVERSION_NOT_VALID: u32 = 6809;
pub const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION: u32 = 6810;
pub const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT: u32 = 6811;
pub const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS: u32 = 6812;
pub const ERROR_REMOTE_FILE_VERSION_MISMATCH: u32 = 6814;
pub const ERROR_HANDLE_NO_LONGER_VALID: u32 = 6815;
pub const ERROR_NO_TXF_METADATA: u32 = 6816;
pub const ERROR_LOG_CORRUPTION_DETECTED: u32 = 6817;
pub const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN: u32 = 6818;
pub const ERROR_RM_DISCONNECTED: u32 = 6819;
pub const ERROR_ENLISTMENT_NOT_SUPERIOR: u32 = 6820;
pub const ERROR_RECOVERY_NOT_NEEDED: u32 = 6821;
pub const ERROR_RM_ALREADY_STARTED: u32 = 6822;
pub const ERROR_FILE_IDENTITY_NOT_PERSISTENT: u32 = 6823;
pub const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY: u32 = 6824;
pub const ERROR_CANT_CROSS_RM_BOUNDARY: u32 = 6825;
pub const ERROR_TXF_DIR_NOT_EMPTY: u32 = 6826;
pub const ERROR_INDOUBT_TRANSACTIONS_EXIST: u32 = 6827;
pub const ERROR_TM_VOLATILE: u32 = 6828;
pub const ERROR_ROLLBACK_TIMER_EXPIRED: u32 = 6829;
pub const ERROR_TXF_ATTRIBUTE_CORRUPT: u32 = 6830;
pub const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION: u32 = 6831;
pub const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED: u32 = 6832;
pub const ERROR_LOG_GROWTH_FAILED: u32 = 6833;
pub const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE: u32 = 6834;
pub const ERROR_TXF_METADATA_ALREADY_PRESENT: u32 = 6835;
pub const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET: u32 = 6836;
pub const ERROR_TRANSACTION_REQUIRED_PROMOTION: u32 = 6837;
pub const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION: u32 = 6838;
pub const ERROR_TRANSACTIONS_NOT_FROZEN: u32 = 6839;
pub const ERROR_TRANSACTION_FREEZE_IN_PROGRESS: u32 = 6840;
pub const ERROR_NOT_SNAPSHOT_VOLUME: u32 = 6841;
pub const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES: u32 = 6842;
pub const ERROR_DATA_LOST_REPAIR: u32 = 6843;
pub const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION: u32 = 6844;
pub const ERROR_TM_IDENTITY_MISMATCH: u32 = 6845;
pub const ERROR_FLOATED_SECTION: u32 = 6846;
pub const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK: u32 = 6847;
pub const ERROR_CANNOT_ABORT_TRANSACTIONS: u32 = 6848;
pub const ERROR_BAD_CLUSTERS: u32 = 6849;
pub const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION: u32 = 6850;
pub const ERROR_VOLUME_DIRTY: u32 = 6851;
pub const ERROR_NO_LINK_TRACKING_IN_TRANSACTION: u32 = 6852;
pub const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION: u32 = 6853;
pub const ERROR_EXPIRED_HANDLE: u32 = 6854;
pub const ERROR_TRANSACTION_NOT_ENLISTED: u32 = 6855;
pub const ERROR_CTX_WINSTATION_NAME_INVALID: u32 = 7001;
pub const ERROR_CTX_INVALID_PD: u32 = 7002;
pub const ERROR_CTX_PD_NOT_FOUND: u32 = 7003;
pub const ERROR_CTX_WD_NOT_FOUND: u32 = 7004;
pub const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY: u32 = 7005;
pub const ERROR_CTX_SERVICE_NAME_COLLISION: u32 = 7006;
pub const ERROR_CTX_CLOSE_PENDING: u32 = 7007;
pub const ERROR_CTX_NO_OUTBUF: u32 = 7008;
pub const ERROR_CTX_MODEM_INF_NOT_FOUND: u32 = 7009;
pub const ERROR_CTX_INVALID_MODEMNAME: u32 = 7010;
pub const ERROR_CTX_MODEM_RESPONSE_ERROR: u32 = 7011;
pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT: u32 = 7012;
pub const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER: u32 = 7013;
pub const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE: u32 = 7014;
pub const ERROR_CTX_MODEM_RESPONSE_BUSY: u32 = 7015;
pub const ERROR_CTX_MODEM_RESPONSE_VOICE: u32 = 7016;
pub const ERROR_CTX_TD_ERROR: u32 = 7017;
pub const ERROR_CTX_WINSTATION_NOT_FOUND: u32 = 7022;
pub const ERROR_CTX_WINSTATION_ALREADY_EXISTS: u32 = 7023;
pub const ERROR_CTX_WINSTATION_BUSY: u32 = 7024;
pub const ERROR_CTX_BAD_VIDEO_MODE: u32 = 7025;
pub const ERROR_CTX_GRAPHICS_INVALID: u32 = 7035;
pub const ERROR_CTX_LOGON_DISABLED: u32 = 7037;
pub const ERROR_CTX_NOT_CONSOLE: u32 = 7038;
pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT: u32 = 7040;
pub const ERROR_CTX_CONSOLE_DISCONNECT: u32 = 7041;
pub const ERROR_CTX_CONSOLE_CONNECT: u32 = 7042;
pub const ERROR_CTX_SHADOW_DENIED: u32 = 7044;
pub const ERROR_CTX_WINSTATION_ACCESS_DENIED: u32 = 7045;
pub const ERROR_CTX_INVALID_WD: u32 = 7049;
pub const ERROR_CTX_SHADOW_INVALID: u32 = 7050;
pub const ERROR_CTX_SHADOW_DISABLED: u32 = 7051;
pub const ERROR_CTX_CLIENT_LICENSE_IN_USE: u32 = 7052;
pub const ERROR_CTX_CLIENT_LICENSE_NOT_SET: u32 = 7053;
pub const ERROR_CTX_LICENSE_NOT_AVAILABLE: u32 = 7054;
pub const ERROR_CTX_LICENSE_CLIENT_INVALID: u32 = 7055;
pub const ERROR_CTX_LICENSE_EXPIRED: u32 = 7056;
pub const ERROR_CTX_SHADOW_NOT_RUNNING: u32 = 7057;
pub const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE: u32 = 7058;
pub const ERROR_ACTIVATION_COUNT_EXCEEDED: u32 = 7059;
pub const ERROR_CTX_WINSTATIONS_DISABLED: u32 = 7060;
pub const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED: u32 = 7061;
pub const ERROR_CTX_SESSION_IN_USE: u32 = 7062;
pub const ERROR_CTX_NO_FORCE_LOGOFF: u32 = 7063;
pub const ERROR_CTX_ACCOUNT_RESTRICTION: u32 = 7064;
pub const ERROR_RDP_PROTOCOL_ERROR: u32 = 7065;
pub const ERROR_CTX_CDM_CONNECT: u32 = 7066;
pub const ERROR_CTX_CDM_DISCONNECT: u32 = 7067;
pub const ERROR_CTX_SECURITY_LAYER_ERROR: u32 = 7068;
pub const ERROR_TS_INCOMPATIBLE_SESSIONS: u32 = 7069;
pub const ERROR_TS_VIDEO_SUBSYSTEM_ERROR: u32 = 7070;
pub const FRS_ERR_INVALID_API_SEQUENCE: u32 = 8001;
pub const FRS_ERR_STARTING_SERVICE: u32 = 8002;
pub const FRS_ERR_STOPPING_SERVICE: u32 = 8003;
pub const FRS_ERR_INTERNAL_API: u32 = 8004;
pub const FRS_ERR_INTERNAL: u32 = 8005;
pub const FRS_ERR_SERVICE_COMM: u32 = 8006;
pub const FRS_ERR_INSUFFICIENT_PRIV: u32 = 8007;
pub const FRS_ERR_AUTHENTICATION: u32 = 8008;
pub const FRS_ERR_PARENT_INSUFFICIENT_PRIV: u32 = 8009;
pub const FRS_ERR_PARENT_AUTHENTICATION: u32 = 8010;
pub const FRS_ERR_CHILD_TO_PARENT_COMM: u32 = 8011;
pub const FRS_ERR_PARENT_TO_CHILD_COMM: u32 = 8012;
pub const FRS_ERR_SYSVOL_POPULATE: u32 = 8013;
pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: u32 = 8014;
pub const FRS_ERR_SYSVOL_IS_BUSY: u32 = 8015;
pub const FRS_ERR_SYSVOL_DEMOTE: u32 = 8016;
pub const FRS_ERR_INVALID_SERVICE_PARAMETER: u32 = 8017;
pub const DS_S_SUCCESS: u32 = 0;
pub const ERROR_DS_NOT_INSTALLED: u32 = 8200;
pub const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY: u32 = 8201;
pub const ERROR_DS_NO_ATTRIBUTE_OR_VALUE: u32 = 8202;
pub const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX: u32 = 8203;
pub const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED: u32 = 8204;
pub const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS: u32 = 8205;
pub const ERROR_DS_BUSY: u32 = 8206;
pub const ERROR_DS_UNAVAILABLE: u32 = 8207;
pub const ERROR_DS_NO_RIDS_ALLOCATED: u32 = 8208;
pub const ERROR_DS_NO_MORE_RIDS: u32 = 8209;
pub const ERROR_DS_INCORRECT_ROLE_OWNER: u32 = 8210;
pub const ERROR_DS_RIDMGR_INIT_ERROR: u32 = 8211;
pub const ERROR_DS_OBJ_CLASS_VIOLATION: u32 = 8212;
pub const ERROR_DS_CANT_ON_NON_LEAF: u32 = 8213;
pub const ERROR_DS_CANT_ON_RDN: u32 = 8214;
pub const ERROR_DS_CANT_MOD_OBJ_CLASS: u32 = 8215;
pub const ERROR_DS_CROSS_DOM_MOVE_ERROR: u32 = 8216;
pub const ERROR_DS_GC_NOT_AVAILABLE: u32 = 8217;
pub const ERROR_SHARED_POLICY: u32 = 8218;
pub const ERROR_POLICY_OBJECT_NOT_FOUND: u32 = 8219;
pub const ERROR_POLICY_ONLY_IN_DS: u32 = 8220;
pub const ERROR_PROMOTION_ACTIVE: u32 = 8221;
pub const ERROR_NO_PROMOTION_ACTIVE: u32 = 8222;
pub const ERROR_DS_OPERATIONS_ERROR: u32 = 8224;
pub const ERROR_DS_PROTOCOL_ERROR: u32 = 8225;
pub const ERROR_DS_TIMELIMIT_EXCEEDED: u32 = 8226;
pub const ERROR_DS_SIZELIMIT_EXCEEDED: u32 = 8227;
pub const ERROR_DS_ADMIN_LIMIT_EXCEEDED: u32 = 8228;
pub const ERROR_DS_COMPARE_FALSE: u32 = 8229;
pub const ERROR_DS_COMPARE_TRUE: u32 = 8230;
pub const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED: u32 = 8231;
pub const ERROR_DS_STRONG_AUTH_REQUIRED: u32 = 8232;
pub const ERROR_DS_INAPPROPRIATE_AUTH: u32 = 8233;
pub const ERROR_DS_AUTH_UNKNOWN: u32 = 8234;
pub const ERROR_DS_REFERRAL: u32 = 8235;
pub const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION: u32 = 8236;
pub const ERROR_DS_CONFIDENTIALITY_REQUIRED: u32 = 8237;
pub const ERROR_DS_INAPPROPRIATE_MATCHING: u32 = 8238;
pub const ERROR_DS_CONSTRAINT_VIOLATION: u32 = 8239;
pub const ERROR_DS_NO_SUCH_OBJECT: u32 = 8240;
pub const ERROR_DS_ALIAS_PROBLEM: u32 = 8241;
pub const ERROR_DS_INVALID_DN_SYNTAX: u32 = 8242;
pub const ERROR_DS_IS_LEAF: u32 = 8243;
pub const ERROR_DS_ALIAS_DEREF_PROBLEM: u32 = 8244;
pub const ERROR_DS_UNWILLING_TO_PERFORM: u32 = 8245;
pub const ERROR_DS_LOOP_DETECT: u32 = 8246;
pub const ERROR_DS_NAMING_VIOLATION: u32 = 8247;
pub const ERROR_DS_OBJECT_RESULTS_TOO_LARGE: u32 = 8248;
pub const ERROR_DS_AFFECTS_MULTIPLE_DSAS: u32 = 8249;
pub const ERROR_DS_SERVER_DOWN: u32 = 8250;
pub const ERROR_DS_LOCAL_ERROR: u32 = 8251;
pub const ERROR_DS_ENCODING_ERROR: u32 = 8252;
pub const ERROR_DS_DECODING_ERROR: u32 = 8253;
pub const ERROR_DS_FILTER_UNKNOWN: u32 = 8254;
pub const ERROR_DS_PARAM_ERROR: u32 = 8255;
pub const ERROR_DS_NOT_SUPPORTED: u32 = 8256;
pub const ERROR_DS_NO_RESULTS_RETURNED: u32 = 8257;
pub const ERROR_DS_CONTROL_NOT_FOUND: u32 = 8258;
pub const ERROR_DS_CLIENT_LOOP: u32 = 8259;
pub const ERROR_DS_REFERRAL_LIMIT_EXCEEDED: u32 = 8260;
pub const ERROR_DS_SORT_CONTROL_MISSING: u32 = 8261;
pub const ERROR_DS_OFFSET_RANGE_ERROR: u32 = 8262;
pub const ERROR_DS_RIDMGR_DISABLED: u32 = 8263;
pub const ERROR_DS_ROOT_MUST_BE_NC: u32 = 8301;
pub const ERROR_DS_ADD_REPLICA_INHIBITED: u32 = 8302;
pub const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA: u32 = 8303;
pub const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED: u32 = 8304;
pub const ERROR_DS_OBJ_STRING_NAME_EXISTS: u32 = 8305;
pub const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA: u32 = 8306;
pub const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA: u32 = 8307;
pub const ERROR_DS_NO_REQUESTED_ATTS_FOUND: u32 = 8308;
pub const ERROR_DS_USER_BUFFER_TO_SMALL: u32 = 8309;
pub const ERROR_DS_ATT_IS_NOT_ON_OBJ: u32 = 8310;
pub const ERROR_DS_ILLEGAL_MOD_OPERATION: u32 = 8311;
pub const ERROR_DS_OBJ_TOO_LARGE: u32 = 8312;
pub const ERROR_DS_BAD_INSTANCE_TYPE: u32 = 8313;
pub const ERROR_DS_MASTERDSA_REQUIRED: u32 = 8314;
pub const ERROR_DS_OBJECT_CLASS_REQUIRED: u32 = 8315;
pub const ERROR_DS_MISSING_REQUIRED_ATT: u32 = 8316;
pub const ERROR_DS_ATT_NOT_DEF_FOR_CLASS: u32 = 8317;
pub const ERROR_DS_ATT_ALREADY_EXISTS: u32 = 8318;
pub const ERROR_DS_CANT_ADD_ATT_VALUES: u32 = 8320;
pub const ERROR_DS_SINGLE_VALUE_CONSTRAINT: u32 = 8321;
pub const ERROR_DS_RANGE_CONSTRAINT: u32 = 8322;
pub const ERROR_DS_ATT_VAL_ALREADY_EXISTS: u32 = 8323;
pub const ERROR_DS_CANT_REM_MISSING_ATT: u32 = 8324;
pub const ERROR_DS_CANT_REM_MISSING_ATT_VAL: u32 = 8325;
pub const ERROR_DS_ROOT_CANT_BE_SUBREF: u32 = 8326;
pub const ERROR_DS_NO_CHAINING: u32 = 8327;
pub const ERROR_DS_NO_CHAINED_EVAL: u32 = 8328;
pub const ERROR_DS_NO_PARENT_OBJECT: u32 = 8329;
pub const ERROR_DS_PARENT_IS_AN_ALIAS: u32 = 8330;
pub const ERROR_DS_CANT_MIX_MASTER_AND_REPS: u32 = 8331;
pub const ERROR_DS_CHILDREN_EXIST: u32 = 8332;
pub const ERROR_DS_OBJ_NOT_FOUND: u32 = 8333;
pub const ERROR_DS_ALIASED_OBJ_MISSING: u32 = 8334;
pub const ERROR_DS_BAD_NAME_SYNTAX: u32 = 8335;
pub const ERROR_DS_ALIAS_POINTS_TO_ALIAS: u32 = 8336;
pub const ERROR_DS_CANT_DEREF_ALIAS: u32 = 8337;
pub const ERROR_DS_OUT_OF_SCOPE: u32 = 8338;
pub const ERROR_DS_OBJECT_BEING_REMOVED: u32 = 8339;
pub const ERROR_DS_CANT_DELETE_DSA_OBJ: u32 = 8340;
pub const ERROR_DS_GENERIC_ERROR: u32 = 8341;
pub const ERROR_DS_DSA_MUST_BE_INT_MASTER: u32 = 8342;
pub const ERROR_DS_CLASS_NOT_DSA: u32 = 8343;
pub const ERROR_DS_INSUFF_ACCESS_RIGHTS: u32 = 8344;
pub const ERROR_DS_ILLEGAL_SUPERIOR: u32 = 8345;
pub const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM: u32 = 8346;
pub const ERROR_DS_NAME_TOO_MANY_PARTS: u32 = 8347;
pub const ERROR_DS_NAME_TOO_LONG: u32 = 8348;
pub const ERROR_DS_NAME_VALUE_TOO_LONG: u32 = 8349;
pub const ERROR_DS_NAME_UNPARSEABLE: u32 = 8350;
pub const ERROR_DS_NAME_TYPE_UNKNOWN: u32 = 8351;
pub const ERROR_DS_NOT_AN_OBJECT: u32 = 8352;
pub const ERROR_DS_SEC_DESC_TOO_SHORT: u32 = 8353;
pub const ERROR_DS_SEC_DESC_INVALID: u32 = 8354;
pub const ERROR_DS_NO_DELETED_NAME: u32 = 8355;
pub const ERROR_DS_SUBREF_MUST_HAVE_PARENT: u32 = 8356;
pub const ERROR_DS_NCNAME_MUST_BE_NC: u32 = 8357;
pub const ERROR_DS_CANT_ADD_SYSTEM_ONLY: u32 = 8358;
pub const ERROR_DS_CLASS_MUST_BE_CONCRETE: u32 = 8359;
pub const ERROR_DS_INVALID_DMD: u32 = 8360;
pub const ERROR_DS_OBJ_GUID_EXISTS: u32 = 8361;
pub const ERROR_DS_NOT_ON_BACKLINK: u32 = 8362;
pub const ERROR_DS_NO_CROSSREF_FOR_NC: u32 = 8363;
pub const ERROR_DS_SHUTTING_DOWN: u32 = 8364;
pub const ERROR_DS_UNKNOWN_OPERATION: u32 = 8365;
pub const ERROR_DS_INVALID_ROLE_OWNER: u32 = 8366;
pub const ERROR_DS_COULDNT_CONTACT_FSMO: u32 = 8367;
pub const ERROR_DS_CROSS_NC_DN_RENAME: u32 = 8368;
pub const ERROR_DS_CANT_MOD_SYSTEM_ONLY: u32 = 8369;
pub const ERROR_DS_REPLICATOR_ONLY: u32 = 8370;
pub const ERROR_DS_OBJ_CLASS_NOT_DEFINED: u32 = 8371;
pub const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS: u32 = 8372;
pub const ERROR_DS_NAME_REFERENCE_INVALID: u32 = 8373;
pub const ERROR_DS_CROSS_REF_EXISTS: u32 = 8374;
pub const ERROR_DS_CANT_DEL_MASTER_CROSSREF: u32 = 8375;
pub const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD: u32 = 8376;
pub const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX: u32 = 8377;
pub const ERROR_DS_DUP_RDN: u32 = 8378;
pub const ERROR_DS_DUP_OID: u32 = 8379;
pub const ERROR_DS_DUP_MAPI_ID: u32 = 8380;
pub const ERROR_DS_DUP_SCHEMA_ID_GUID: u32 = 8381;
pub const ERROR_DS_DUP_LDAP_DISPLAY_NAME: u32 = 8382;
pub const ERROR_DS_SEMANTIC_ATT_TEST: u32 = 8383;
pub const ERROR_DS_SYNTAX_MISMATCH: u32 = 8384;
pub const ERROR_DS_EXISTS_IN_MUST_HAVE: u32 = 8385;
pub const ERROR_DS_EXISTS_IN_MAY_HAVE: u32 = 8386;
pub const ERROR_DS_NONEXISTENT_MAY_HAVE: u32 = 8387;
pub const ERROR_DS_NONEXISTENT_MUST_HAVE: u32 = 8388;
pub const ERROR_DS_AUX_CLS_TEST_FAIL: u32 = 8389;
pub const ERROR_DS_NONEXISTENT_POSS_SUP: u32 = 8390;
pub const ERROR_DS_SUB_CLS_TEST_FAIL: u32 = 8391;
pub const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX: u32 = 8392;
pub const ERROR_DS_EXISTS_IN_AUX_CLS: u32 = 8393;
pub const ERROR_DS_EXISTS_IN_SUB_CLS: u32 = 8394;
pub const ERROR_DS_EXISTS_IN_POSS_SUP: u32 = 8395;
pub const ERROR_DS_RECALCSCHEMA_FAILED: u32 = 8396;
pub const ERROR_DS_TREE_DELETE_NOT_FINISHED: u32 = 8397;
pub const ERROR_DS_CANT_DELETE: u32 = 8398;
pub const ERROR_DS_ATT_SCHEMA_REQ_ID: u32 = 8399;
pub const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX: u32 = 8400;
pub const ERROR_DS_CANT_CACHE_ATT: u32 = 8401;
pub const ERROR_DS_CANT_CACHE_CLASS: u32 = 8402;
pub const ERROR_DS_CANT_REMOVE_ATT_CACHE: u32 = 8403;
pub const ERROR_DS_CANT_REMOVE_CLASS_CACHE: u32 = 8404;
pub const ERROR_DS_CANT_RETRIEVE_DN: u32 = 8405;
pub const ERROR_DS_MISSING_SUPREF: u32 = 8406;
pub const ERROR_DS_CANT_RETRIEVE_INSTANCE: u32 = 8407;
pub const ERROR_DS_CODE_INCONSISTENCY: u32 = 8408;
pub const ERROR_DS_DATABASE_ERROR: u32 = 8409;
pub const ERROR_DS_GOVERNSID_MISSING: u32 = 8410;
pub const ERROR_DS_MISSING_EXPECTED_ATT: u32 = 8411;
pub const ERROR_DS_NCNAME_MISSING_CR_REF: u32 = 8412;
pub const ERROR_DS_SECURITY_CHECKING_ERROR: u32 = 8413;
pub const ERROR_DS_SCHEMA_NOT_LOADED: u32 = 8414;
pub const ERROR_DS_SCHEMA_ALLOC_FAILED: u32 = 8415;
pub const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX: u32 = 8416;
pub const ERROR_DS_GCVERIFY_ERROR: u32 = 8417;
pub const ERROR_DS_DRA_SCHEMA_MISMATCH: u32 = 8418;
pub const ERROR_DS_CANT_FIND_DSA_OBJ: u32 = 8419;
pub const ERROR_DS_CANT_FIND_EXPECTED_NC: u32 = 8420;
pub const ERROR_DS_CANT_FIND_NC_IN_CACHE: u32 = 8421;
pub const ERROR_DS_CANT_RETRIEVE_CHILD: u32 = 8422;
pub const ERROR_DS_SECURITY_ILLEGAL_MODIFY: u32 = 8423;
pub const ERROR_DS_CANT_REPLACE_HIDDEN_REC: u32 = 8424;
pub const ERROR_DS_BAD_HIERARCHY_FILE: u32 = 8425;
pub const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED: u32 = 8426;
pub const ERROR_DS_CONFIG_PARAM_MISSING: u32 = 8427;
pub const ERROR_DS_COUNTING_AB_INDICES_FAILED: u32 = 8428;
pub const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED: u32 = 8429;
pub const ERROR_DS_INTERNAL_FAILURE: u32 = 8430;
pub const ERROR_DS_UNKNOWN_ERROR: u32 = 8431;
pub const ERROR_DS_ROOT_REQUIRES_CLASS_TOP: u32 = 8432;
pub const ERROR_DS_REFUSING_FSMO_ROLES: u32 = 8433;
pub const ERROR_DS_MISSING_FSMO_SETTINGS: u32 = 8434;
pub const ERROR_DS_UNABLE_TO_SURRENDER_ROLES: u32 = 8435;
pub const ERROR_DS_DRA_GENERIC: u32 = 8436;
pub const ERROR_DS_DRA_INVALID_PARAMETER: u32 = 8437;
pub const ERROR_DS_DRA_BUSY: u32 = 8438;
pub const ERROR_DS_DRA_BAD_DN: u32 = 8439;
pub const ERROR_DS_DRA_BAD_NC: u32 = 8440;
pub const ERROR_DS_DRA_DN_EXISTS: u32 = 8441;
pub const ERROR_DS_DRA_INTERNAL_ERROR: u32 = 8442;
pub const ERROR_DS_DRA_INCONSISTENT_DIT: u32 = 8443;
pub const ERROR_DS_DRA_CONNECTION_FAILED: u32 = 8444;
pub const ERROR_DS_DRA_BAD_INSTANCE_TYPE: u32 = 8445;
pub const ERROR_DS_DRA_OUT_OF_MEM: u32 = 8446;
pub const ERROR_DS_DRA_MAIL_PROBLEM: u32 = 8447;
pub const ERROR_DS_DRA_REF_ALREADY_EXISTS: u32 = 8448;
pub const ERROR_DS_DRA_REF_NOT_FOUND: u32 = 8449;
pub const ERROR_DS_DRA_OBJ_IS_REP_SOURCE: u32 = 8450;
pub const ERROR_DS_DRA_DB_ERROR: u32 = 8451;
pub const ERROR_DS_DRA_NO_REPLICA: u32 = 8452;
pub const ERROR_DS_DRA_ACCESS_DENIED: u32 = 8453;
pub const ERROR_DS_DRA_NOT_SUPPORTED: u32 = 8454;
pub const ERROR_DS_DRA_RPC_CANCELLED: u32 = 8455;
pub const ERROR_DS_DRA_SOURCE_DISABLED: u32 = 8456;
pub const ERROR_DS_DRA_SINK_DISABLED: u32 = 8457;
pub const ERROR_DS_DRA_NAME_COLLISION: u32 = 8458;
pub const ERROR_DS_DRA_SOURCE_REINSTALLED: u32 = 8459;
pub const ERROR_DS_DRA_MISSING_PARENT: u32 = 8460;
pub const ERROR_DS_DRA_PREEMPTED: u32 = 8461;
pub const ERROR_DS_DRA_ABANDON_SYNC: u32 = 8462;
pub const ERROR_DS_DRA_SHUTDOWN: u32 = 8463;
pub const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET: u32 = 8464;
pub const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA: u32 = 8465;
pub const ERROR_DS_DRA_EXTN_CONNECTION_FAILED: u32 = 8466;
pub const ERROR_DS_INSTALL_SCHEMA_MISMATCH: u32 = 8467;
pub const ERROR_DS_DUP_LINK_ID: u32 = 8468;
pub const ERROR_DS_NAME_ERROR_RESOLVING: u32 = 8469;
pub const ERROR_DS_NAME_ERROR_NOT_FOUND: u32 = 8470;
pub const ERROR_DS_NAME_ERROR_NOT_UNIQUE: u32 = 8471;
pub const ERROR_DS_NAME_ERROR_NO_MAPPING: u32 = 8472;
pub const ERROR_DS_NAME_ERROR_DOMAIN_ONLY: u32 = 8473;
pub const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING: u32 = 8474;
pub const ERROR_DS_CONSTRUCTED_ATT_MOD: u32 = 8475;
pub const ERROR_DS_WRONG_OM_OBJ_CLASS: u32 = 8476;
pub const ERROR_DS_DRA_REPL_PENDING: u32 = 8477;
pub const ERROR_DS_DS_REQUIRED: u32 = 8478;
pub const ERROR_DS_INVALID_LDAP_DISPLAY_NAME: u32 = 8479;
pub const ERROR_DS_NON_BASE_SEARCH: u32 = 8480;
pub const ERROR_DS_CANT_RETRIEVE_ATTS: u32 = 8481;
pub const ERROR_DS_BACKLINK_WITHOUT_LINK: u32 = 8482;
pub const ERROR_DS_EPOCH_MISMATCH: u32 = 8483;
pub const ERROR_DS_SRC_NAME_MISMATCH: u32 = 8484;
pub const ERROR_DS_SRC_AND_DST_NC_IDENTICAL: u32 = 8485;
pub const ERROR_DS_DST_NC_MISMATCH: u32 = 8486;
pub const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC: u32 = 8487;
pub const ERROR_DS_SRC_GUID_MISMATCH: u32 = 8488;
pub const ERROR_DS_CANT_MOVE_DELETED_OBJECT: u32 = 8489;
pub const ERROR_DS_PDC_OPERATION_IN_PROGRESS: u32 = 8490;
pub const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD: u32 = 8491;
pub const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION: u32 = 8492;
pub const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS: u32 = 8493;
pub const ERROR_DS_NC_MUST_HAVE_NC_PARENT: u32 = 8494;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE: u32 = 8495;
pub const ERROR_DS_DST_DOMAIN_NOT_NATIVE: u32 = 8496;
pub const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER: u32 = 8497;
pub const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP: u32 = 8498;
pub const ERROR_DS_CANT_MOVE_RESOURCE_GROUP: u32 = 8499;
pub const ERROR_DS_INVALID_SEARCH_FLAG: u32 = 8500;
pub const ERROR_DS_NO_TREE_DELETE_ABOVE_NC: u32 = 8501;
pub const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE: u32 = 8502;
pub const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE: u32 = 8503;
pub const ERROR_DS_SAM_INIT_FAILURE: u32 = 8504;
pub const ERROR_DS_SENSITIVE_GROUP_VIOLATION: u32 = 8505;
pub const ERROR_DS_CANT_MOD_PRIMARYGROUPID: u32 = 8506;
pub const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD: u32 = 8507;
pub const ERROR_DS_NONSAFE_SCHEMA_CHANGE: u32 = 8508;
pub const ERROR_DS_SCHEMA_UPDATE_DISALLOWED: u32 = 8509;
pub const ERROR_DS_CANT_CREATE_UNDER_SCHEMA: u32 = 8510;
pub const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION: u32 = 8511;
pub const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE: u32 = 8512;
pub const ERROR_DS_INVALID_GROUP_TYPE: u32 = 8513;
pub const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN: u32 = 8514;
pub const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN: u32 = 8515;
pub const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER: u32 = 8516;
pub const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER: u32 = 8517;
pub const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER: u32 = 8518;
pub const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER: u32 = 8519;
pub const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER: u32 = 8520;
pub const ERROR_DS_HAVE_PRIMARY_MEMBERS: u32 = 8521;
pub const ERROR_DS_STRING_SD_CONVERSION_FAILED: u32 = 8522;
pub const ERROR_DS_NAMING_MASTER_GC: u32 = 8523;
pub const ERROR_DS_DNS_LOOKUP_FAILURE: u32 = 8524;
pub const ERROR_DS_COULDNT_UPDATE_SPNS: u32 = 8525;
pub const ERROR_DS_CANT_RETRIEVE_SD: u32 = 8526;
pub const ERROR_DS_KEY_NOT_UNIQUE: u32 = 8527;
pub const ERROR_DS_WRONG_LINKED_ATT_SYNTAX: u32 = 8528;
pub const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD: u32 = 8529;
pub const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY: u32 = 8530;
pub const ERROR_DS_CANT_START: u32 = 8531;
pub const ERROR_DS_INIT_FAILURE: u32 = 8532;
pub const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION: u32 = 8533;
pub const ERROR_DS_SOURCE_DOMAIN_IN_FOREST: u32 = 8534;
pub const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST: u32 = 8535;
pub const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED: u32 = 8536;
pub const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN: u32 = 8537;
pub const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER: u32 = 8538;
pub const ERROR_DS_SRC_SID_EXISTS_IN_FOREST: u32 = 8539;
pub const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH: u32 = 8540;
pub const ERROR_SAM_INIT_FAILURE: u32 = 8541;
pub const ERROR_DS_DRA_SCHEMA_INFO_SHIP: u32 = 8542;
pub const ERROR_DS_DRA_SCHEMA_CONFLICT: u32 = 8543;
pub const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT: u32 = 8544;
pub const ERROR_DS_DRA_OBJ_NC_MISMATCH: u32 = 8545;
pub const ERROR_DS_NC_STILL_HAS_DSAS: u32 = 8546;
pub const ERROR_DS_GC_REQUIRED: u32 = 8547;
pub const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY: u32 = 8548;
pub const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS: u32 = 8549;
pub const ERROR_DS_CANT_ADD_TO_GC: u32 = 8550;
pub const ERROR_DS_NO_CHECKPOINT_WITH_PDC: u32 = 8551;
pub const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED: u32 = 8552;
pub const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC: u32 = 8553;
pub const ERROR_DS_INVALID_NAME_FOR_SPN: u32 = 8554;
pub const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS: u32 = 8555;
pub const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES: u32 = 8556;
pub const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: u32 = 8557;
pub const ERROR_DS_MUST_BE_RUN_ON_DST_DC: u32 = 8558;
pub const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER: u32 = 8559;
pub const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ: u32 = 8560;
pub const ERROR_DS_INIT_FAILURE_CONSOLE: u32 = 8561;
pub const ERROR_DS_SAM_INIT_FAILURE_CONSOLE: u32 = 8562;
pub const ERROR_DS_FOREST_VERSION_TOO_HIGH: u32 = 8563;
pub const ERROR_DS_DOMAIN_VERSION_TOO_HIGH: u32 = 8564;
pub const ERROR_DS_FOREST_VERSION_TOO_LOW: u32 = 8565;
pub const ERROR_DS_DOMAIN_VERSION_TOO_LOW: u32 = 8566;
pub const ERROR_DS_INCOMPATIBLE_VERSION: u32 = 8567;
pub const ERROR_DS_LOW_DSA_VERSION: u32 = 8568;
pub const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN: u32 = 8569;
pub const ERROR_DS_NOT_SUPPORTED_SORT_ORDER: u32 = 8570;
pub const ERROR_DS_NAME_NOT_UNIQUE: u32 = 8571;
pub const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4: u32 = 8572;
pub const ERROR_DS_OUT_OF_VERSION_STORE: u32 = 8573;
pub const ERROR_DS_INCOMPATIBLE_CONTROLS_USED: u32 = 8574;
pub const ERROR_DS_NO_REF_DOMAIN: u32 = 8575;
pub const ERROR_DS_RESERVED_LINK_ID: u32 = 8576;
pub const ERROR_DS_LINK_ID_NOT_AVAILABLE: u32 = 8577;
pub const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER: u32 = 8578;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE: u32 = 8579;
pub const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC: u32 = 8580;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG: u32 = 8581;
pub const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT: u32 = 8582;
pub const ERROR_DS_NAME_ERROR_TRUST_REFERRAL: u32 = 8583;
pub const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER: u32 = 8584;
pub const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD: u32 = 8585;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2: u32 = 8586;
pub const ERROR_DS_THREAD_LIMIT_EXCEEDED: u32 = 8587;
pub const ERROR_DS_NOT_CLOSEST: u32 = 8588;
pub const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF: u32 = 8589;
pub const ERROR_DS_SINGLE_USER_MODE_FAILED: u32 = 8590;
pub const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR: u32 = 8591;
pub const ERROR_DS_NTDSCRIPT_PROCESS_ERROR: u32 = 8592;
pub const ERROR_DS_DIFFERENT_REPL_EPOCHS: u32 = 8593;
pub const ERROR_DS_DRS_EXTENSIONS_CHANGED: u32 = 8594;
pub const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR: u32 = 8595;
pub const ERROR_DS_NO_MSDS_INTID: u32 = 8596;
pub const ERROR_DS_DUP_MSDS_INTID: u32 = 8597;
pub const ERROR_DS_EXISTS_IN_RDNATTID: u32 = 8598;
pub const ERROR_DS_AUTHORIZATION_FAILED: u32 = 8599;
pub const ERROR_DS_INVALID_SCRIPT: u32 = 8600;
pub const ERROR_DS_REMOTE_CROSSREF_OP_FAILED: u32 = 8601;
pub const ERROR_DS_CROSS_REF_BUSY: u32 = 8602;
pub const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN: u32 = 8603;
pub const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC: u32 = 8604;
pub const ERROR_DS_DUPLICATE_ID_FOUND: u32 = 8605;
pub const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT: u32 = 8606;
pub const ERROR_DS_GROUP_CONVERSION_ERROR: u32 = 8607;
pub const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP: u32 = 8608;
pub const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP: u32 = 8609;
pub const ERROR_DS_ROLE_NOT_VERIFIED: u32 = 8610;
pub const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL: u32 = 8611;
pub const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS: u32 = 8612;
pub const ERROR_DS_EXISTING_AD_CHILD_NC: u32 = 8613;
pub const ERROR_DS_REPL_LIFETIME_EXCEEDED: u32 = 8614;
pub const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER: u32 = 8615;
pub const ERROR_DS_LDAP_SEND_QUEUE_FULL: u32 = 8616;
pub const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW: u32 = 8617;
pub const ERROR_DS_POLICY_NOT_KNOWN: u32 = 8618;
pub const ERROR_NO_SITE_SETTINGS_OBJECT: u32 = 8619;
pub const ERROR_NO_SECRETS: u32 = 8620;
pub const ERROR_NO_WRITABLE_DC_FOUND: u32 = 8621;
pub const ERROR_DS_NO_SERVER_OBJECT: u32 = 8622;
pub const ERROR_DS_NO_NTDSA_OBJECT: u32 = 8623;
pub const ERROR_DS_NON_ASQ_SEARCH: u32 = 8624;
pub const ERROR_DS_AUDIT_FAILURE: u32 = 8625;
pub const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE: u32 = 8626;
pub const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE: u32 = 8627;
pub const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP: u32 = 8628;
pub const ERROR_DS_DRA_CORRUPT_UTD_VECTOR: u32 = 8629;
pub const ERROR_DS_DRA_SECRETS_DENIED: u32 = 8630;
pub const ERROR_DS_RESERVED_MAPI_ID: u32 = 8631;
pub const ERROR_DS_MAPI_ID_NOT_AVAILABLE: u32 = 8632;
pub const ERROR_DS_DRA_MISSING_KRBTGT_SECRET: u32 = 8633;
pub const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST: u32 = 8634;
pub const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST: u32 = 8635;
pub const ERROR_INVALID_USER_PRINCIPAL_NAME: u32 = 8636;
pub const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS: u32 = 8637;
pub const ERROR_DS_OID_NOT_FOUND: u32 = 8638;
pub const ERROR_DS_DRA_RECYCLED_TARGET: u32 = 8639;
pub const ERROR_DS_DISALLOWED_NC_REDIRECT: u32 = 8640;
pub const ERROR_DS_HIGH_ADLDS_FFL: u32 = 8641;
pub const ERROR_DS_HIGH_DSA_VERSION: u32 = 8642;
pub const ERROR_DS_LOW_ADLDS_FFL: u32 = 8643;
pub const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION: u32 = 8644;
pub const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED: u32 = 8645;
pub const ERROR_INCORRECT_ACCOUNT_TYPE: u32 = 8646;
pub const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST: u32 = 8647;
pub const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST: u32 = 8648;
pub const ERROR_DS_MISSING_FOREST_TRUST: u32 = 8649;
pub const ERROR_DS_VALUE_KEY_NOT_UNIQUE: u32 = 8650;
pub const DNS_ERROR_RESPONSE_CODES_BASE: u32 = 9000;
pub const DNS_ERROR_RCODE_NO_ERROR: u32 = 0;
pub const DNS_ERROR_MASK: u32 = 9000;
pub const DNS_ERROR_RCODE_FORMAT_ERROR: u32 = 9001;
pub const DNS_ERROR_RCODE_SERVER_FAILURE: u32 = 9002;
pub const DNS_ERROR_RCODE_NAME_ERROR: u32 = 9003;
pub const DNS_ERROR_RCODE_NOT_IMPLEMENTED: u32 = 9004;
pub const DNS_ERROR_RCODE_REFUSED: u32 = 9005;
pub const DNS_ERROR_RCODE_YXDOMAIN: u32 = 9006;
pub const DNS_ERROR_RCODE_YXRRSET: u32 = 9007;
pub const DNS_ERROR_RCODE_NXRRSET: u32 = 9008;
pub const DNS_ERROR_RCODE_NOTAUTH: u32 = 9009;
pub const DNS_ERROR_RCODE_NOTZONE: u32 = 9010;
pub const DNS_ERROR_RCODE_BADSIG: u32 = 9016;
pub const DNS_ERROR_RCODE_BADKEY: u32 = 9017;
pub const DNS_ERROR_RCODE_BADTIME: u32 = 9018;
pub const DNS_ERROR_RCODE_LAST: u32 = 9018;
pub const DNS_ERROR_DNSSEC_BASE: u32 = 9100;
pub const DNS_ERROR_KEYMASTER_REQUIRED: u32 = 9101;
pub const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE: u32 = 9102;
pub const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1: u32 = 9103;
pub const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS: u32 = 9104;
pub const DNS_ERROR_UNSUPPORTED_ALGORITHM: u32 = 9105;
pub const DNS_ERROR_INVALID_KEY_SIZE: u32 = 9106;
pub const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE: u32 = 9107;
pub const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION: u32 = 9108;
pub const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR: u32 = 9109;
pub const DNS_ERROR_UNEXPECTED_CNG_ERROR: u32 = 9110;
pub const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION: u32 = 9111;
pub const DNS_ERROR_KSP_NOT_ACCESSIBLE: u32 = 9112;
pub const DNS_ERROR_TOO_MANY_SKDS: u32 = 9113;
pub const DNS_ERROR_INVALID_ROLLOVER_PERIOD: u32 = 9114;
pub const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET: u32 = 9115;
pub const DNS_ERROR_ROLLOVER_IN_PROGRESS: u32 = 9116;
pub const DNS_ERROR_STANDBY_KEY_NOT_PRESENT: u32 = 9117;
pub const DNS_ERROR_NOT_ALLOWED_ON_ZSK: u32 = 9118;
pub const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD: u32 = 9119;
pub const DNS_ERROR_ROLLOVER_ALREADY_QUEUED: u32 = 9120;
pub const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE: u32 = 9121;
pub const DNS_ERROR_BAD_KEYMASTER: u32 = 9122;
pub const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD: u32 = 9123;
pub const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT: u32 = 9124;
pub const DNS_ERROR_DNSSEC_IS_DISABLED: u32 = 9125;
pub const DNS_ERROR_INVALID_XML: u32 = 9126;
pub const DNS_ERROR_NO_VALID_TRUST_ANCHORS: u32 = 9127;
pub const DNS_ERROR_ROLLOVER_NOT_POKEABLE: u32 = 9128;
pub const DNS_ERROR_NSEC3_NAME_COLLISION: u32 = 9129;
pub const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1: u32 = 9130;
pub const DNS_ERROR_PACKET_FMT_BASE: u32 = 9500;
pub const DNS_INFO_NO_RECORDS: u32 = 9501;
pub const DNS_ERROR_BAD_PACKET: u32 = 9502;
pub const DNS_ERROR_NO_PACKET: u32 = 9503;
pub const DNS_ERROR_RCODE: u32 = 9504;
pub const DNS_ERROR_UNSECURE_PACKET: u32 = 9505;
pub const DNS_STATUS_PACKET_UNSECURE: u32 = 9505;
pub const DNS_REQUEST_PENDING: u32 = 9506;
pub const DNS_ERROR_NO_MEMORY: u32 = 14;
pub const DNS_ERROR_INVALID_NAME: u32 = 123;
pub const DNS_ERROR_INVALID_DATA: u32 = 13;
pub const DNS_ERROR_GENERAL_API_BASE: u32 = 9550;
pub const DNS_ERROR_INVALID_TYPE: u32 = 9551;
pub const DNS_ERROR_INVALID_IP_ADDRESS: u32 = 9552;
pub const DNS_ERROR_INVALID_PROPERTY: u32 = 9553;
pub const DNS_ERROR_TRY_AGAIN_LATER: u32 = 9554;
pub const DNS_ERROR_NOT_UNIQUE: u32 = 9555;
pub const DNS_ERROR_NON_RFC_NAME: u32 = 9556;
pub const DNS_STATUS_FQDN: u32 = 9557;
pub const DNS_STATUS_DOTTED_NAME: u32 = 9558;
pub const DNS_STATUS_SINGLE_PART_NAME: u32 = 9559;
pub const DNS_ERROR_INVALID_NAME_CHAR: u32 = 9560;
pub const DNS_ERROR_NUMERIC_NAME: u32 = 9561;
pub const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER: u32 = 9562;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION: u32 = 9563;
pub const DNS_ERROR_CANNOT_FIND_ROOT_HINTS: u32 = 9564;
pub const DNS_ERROR_INCONSISTENT_ROOT_HINTS: u32 = 9565;
pub const DNS_ERROR_DWORD_VALUE_TOO_SMALL: u32 = 9566;
pub const DNS_ERROR_DWORD_VALUE_TOO_LARGE: u32 = 9567;
pub const DNS_ERROR_BACKGROUND_LOADING: u32 = 9568;
pub const DNS_ERROR_NOT_ALLOWED_ON_RODC: u32 = 9569;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME: u32 = 9570;
pub const DNS_ERROR_DELEGATION_REQUIRED: u32 = 9571;
pub const DNS_ERROR_INVALID_POLICY_TABLE: u32 = 9572;
pub const DNS_ERROR_ADDRESS_REQUIRED: u32 = 9573;
pub const DNS_ERROR_ZONE_BASE: u32 = 9600;
pub const DNS_ERROR_ZONE_DOES_NOT_EXIST: u32 = 9601;
pub const DNS_ERROR_NO_ZONE_INFO: u32 = 9602;
pub const DNS_ERROR_INVALID_ZONE_OPERATION: u32 = 9603;
pub const DNS_ERROR_ZONE_CONFIGURATION_ERROR: u32 = 9604;
pub const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD: u32 = 9605;
pub const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS: u32 = 9606;
pub const DNS_ERROR_ZONE_LOCKED: u32 = 9607;
pub const DNS_ERROR_ZONE_CREATION_FAILED: u32 = 9608;
pub const DNS_ERROR_ZONE_ALREADY_EXISTS: u32 = 9609;
pub const DNS_ERROR_AUTOZONE_ALREADY_EXISTS: u32 = 9610;
pub const DNS_ERROR_INVALID_ZONE_TYPE: u32 = 9611;
pub const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP: u32 = 9612;
pub const DNS_ERROR_ZONE_NOT_SECONDARY: u32 = 9613;
pub const DNS_ERROR_NEED_SECONDARY_ADDRESSES: u32 = 9614;
pub const DNS_ERROR_WINS_INIT_FAILED: u32 = 9615;
pub const DNS_ERROR_NEED_WINS_SERVERS: u32 = 9616;
pub const DNS_ERROR_NBSTAT_INIT_FAILED: u32 = 9617;
pub const DNS_ERROR_SOA_DELETE_INVALID: u32 = 9618;
pub const DNS_ERROR_FORWARDER_ALREADY_EXISTS: u32 = 9619;
pub const DNS_ERROR_ZONE_REQUIRES_MASTER_IP: u32 = 9620;
pub const DNS_ERROR_ZONE_IS_SHUTDOWN: u32 = 9621;
pub const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING: u32 = 9622;
pub const DNS_ERROR_DATAFILE_BASE: u32 = 9650;
pub const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE: u32 = 9651;
pub const DNS_ERROR_INVALID_DATAFILE_NAME: u32 = 9652;
pub const DNS_ERROR_DATAFILE_OPEN_FAILURE: u32 = 9653;
pub const DNS_ERROR_FILE_WRITEBACK_FAILED: u32 = 9654;
pub const DNS_ERROR_DATAFILE_PARSING: u32 = 9655;
pub const DNS_ERROR_DATABASE_BASE: u32 = 9700;
pub const DNS_ERROR_RECORD_DOES_NOT_EXIST: u32 = 9701;
pub const DNS_ERROR_RECORD_FORMAT: u32 = 9702;
pub const DNS_ERROR_NODE_CREATION_FAILED: u32 = 9703;
pub const DNS_ERROR_UNKNOWN_RECORD_TYPE: u32 = 9704;
pub const DNS_ERROR_RECORD_TIMED_OUT: u32 = 9705;
pub const DNS_ERROR_NAME_NOT_IN_ZONE: u32 = 9706;
pub const DNS_ERROR_CNAME_LOOP: u32 = 9707;
pub const DNS_ERROR_NODE_IS_CNAME: u32 = 9708;
pub const DNS_ERROR_CNAME_COLLISION: u32 = 9709;
pub const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT: u32 = 9710;
pub const DNS_ERROR_RECORD_ALREADY_EXISTS: u32 = 9711;
pub const DNS_ERROR_SECONDARY_DATA: u32 = 9712;
pub const DNS_ERROR_NO_CREATE_CACHE_DATA: u32 = 9713;
pub const DNS_ERROR_NAME_DOES_NOT_EXIST: u32 = 9714;
pub const DNS_WARNING_PTR_CREATE_FAILED: u32 = 9715;
pub const DNS_WARNING_DOMAIN_UNDELETED: u32 = 9716;
pub const DNS_ERROR_DS_UNAVAILABLE: u32 = 9717;
pub const DNS_ERROR_DS_ZONE_ALREADY_EXISTS: u32 = 9718;
pub const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE: u32 = 9719;
pub const DNS_ERROR_NODE_IS_DNAME: u32 = 9720;
pub const DNS_ERROR_DNAME_COLLISION: u32 = 9721;
pub const DNS_ERROR_ALIAS_LOOP: u32 = 9722;
pub const DNS_ERROR_OPERATION_BASE: u32 = 9750;
pub const DNS_INFO_AXFR_COMPLETE: u32 = 9751;
pub const DNS_ERROR_AXFR: u32 = 9752;
pub const DNS_INFO_ADDED_LOCAL_WINS: u32 = 9753;
pub const DNS_ERROR_SECURE_BASE: u32 = 9800;
pub const DNS_STATUS_CONTINUE_NEEDED: u32 = 9801;
pub const DNS_ERROR_SETUP_BASE: u32 = 9850;
pub const DNS_ERROR_NO_TCPIP: u32 = 9851;
pub const DNS_ERROR_NO_DNS_SERVERS: u32 = 9852;
pub const DNS_ERROR_DP_BASE: u32 = 9900;
pub const DNS_ERROR_DP_DOES_NOT_EXIST: u32 = 9901;
pub const DNS_ERROR_DP_ALREADY_EXISTS: u32 = 9902;
pub const DNS_ERROR_DP_NOT_ENLISTED: u32 = 9903;
pub const DNS_ERROR_DP_ALREADY_ENLISTED: u32 = 9904;
pub const DNS_ERROR_DP_NOT_AVAILABLE: u32 = 9905;
pub const DNS_ERROR_DP_FSMO_ERROR: u32 = 9906;
pub const DNS_ERROR_RRL_NOT_ENABLED: u32 = 9911;
pub const DNS_ERROR_RRL_INVALID_WINDOW_SIZE: u32 = 9912;
pub const DNS_ERROR_RRL_INVALID_IPV4_PREFIX: u32 = 9913;
pub const DNS_ERROR_RRL_INVALID_IPV6_PREFIX: u32 = 9914;
pub const DNS_ERROR_RRL_INVALID_TC_RATE: u32 = 9915;
pub const DNS_ERROR_RRL_INVALID_LEAK_RATE: u32 = 9916;
pub const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE: u32 = 9917;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS: u32 = 9921;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST: u32 = 9922;
pub const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED: u32 = 9923;
pub const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME: u32 = 9924;
pub const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE: u32 = 9925;
pub const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS: u32 = 9951;
pub const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST: u32 = 9952;
pub const DNS_ERROR_DEFAULT_ZONESCOPE: u32 = 9953;
pub const DNS_ERROR_INVALID_ZONESCOPE_NAME: u32 = 9954;
pub const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES: u32 = 9955;
pub const DNS_ERROR_LOAD_ZONESCOPE_FAILED: u32 = 9956;
pub const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED: u32 = 9957;
pub const DNS_ERROR_INVALID_SCOPE_NAME: u32 = 9958;
pub const DNS_ERROR_SCOPE_DOES_NOT_EXIST: u32 = 9959;
pub const DNS_ERROR_DEFAULT_SCOPE: u32 = 9960;
pub const DNS_ERROR_INVALID_SCOPE_OPERATION: u32 = 9961;
pub const DNS_ERROR_SCOPE_LOCKED: u32 = 9962;
pub const DNS_ERROR_SCOPE_ALREADY_EXISTS: u32 = 9963;
pub const DNS_ERROR_POLICY_ALREADY_EXISTS: u32 = 9971;
pub const DNS_ERROR_POLICY_DOES_NOT_EXIST: u32 = 9972;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA: u32 = 9973;
pub const DNS_ERROR_POLICY_INVALID_SETTINGS: u32 = 9974;
pub const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED: u32 = 9975;
pub const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST: u32 = 9976;
pub const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS: u32 = 9977;
pub const DNS_ERROR_SUBNET_DOES_NOT_EXIST: u32 = 9978;
pub const DNS_ERROR_SUBNET_ALREADY_EXISTS: u32 = 9979;
pub const DNS_ERROR_POLICY_LOCKED: u32 = 9980;
pub const DNS_ERROR_POLICY_INVALID_WEIGHT: u32 = 9981;
pub const DNS_ERROR_POLICY_INVALID_NAME: u32 = 9982;
pub const DNS_ERROR_POLICY_MISSING_CRITERIA: u32 = 9983;
pub const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME: u32 = 9984;
pub const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID: u32 = 9985;
pub const DNS_ERROR_POLICY_SCOPE_MISSING: u32 = 9986;
pub const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED: u32 = 9987;
pub const DNS_ERROR_SERVERSCOPE_IS_REFERENCED: u32 = 9988;
pub const DNS_ERROR_ZONESCOPE_IS_REFERENCED: u32 = 9989;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET: u32 = 9990;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL: u32 = 9991;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL: u32 = 9992;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE: u32 = 9993;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN: u32 = 9994;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE: u32 = 9995;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY: u32 = 9996;
pub const WSABASEERR: u32 = 10000;
pub const WSAEINTR: u32 = 10004;
pub const WSAEBADF: u32 = 10009;
pub const WSAEACCES: u32 = 10013;
pub const WSAEFAULT: u32 = 10014;
pub const WSAEINVAL: u32 = 10022;
pub const WSAEMFILE: u32 = 10024;
pub const WSAEWOULDBLOCK: u32 = 10035;
pub const WSAEINPROGRESS: u32 = 10036;
pub const WSAEALREADY: u32 = 10037;
pub const WSAENOTSOCK: u32 = 10038;
pub const WSAEDESTADDRREQ: u32 = 10039;
pub const WSAEMSGSIZE: u32 = 10040;
pub const WSAEPROTOTYPE: u32 = 10041;
pub const WSAENOPROTOOPT: u32 = 10042;
pub const WSAEPROTONOSUPPORT: u32 = 10043;
pub const WSAESOCKTNOSUPPORT: u32 = 10044;
pub const WSAEOPNOTSUPP: u32 = 10045;
pub const WSAEPFNOSUPPORT: u32 = 10046;
pub const WSAEAFNOSUPPORT: u32 = 10047;
pub const WSAEADDRINUSE: u32 = 10048;
pub const WSAEADDRNOTAVAIL: u32 = 10049;
pub const WSAENETDOWN: u32 = 10050;
pub const WSAENETUNREACH: u32 = 10051;
pub const WSAENETRESET: u32 = 10052;
pub const WSAECONNABORTED: u32 = 10053;
pub const WSAECONNRESET: u32 = 10054;
pub const WSAENOBUFS: u32 = 10055;
pub const WSAEISCONN: u32 = 10056;
pub const WSAENOTCONN: u32 = 10057;
pub const WSAESHUTDOWN: u32 = 10058;
pub const WSAETOOMANYREFS: u32 = 10059;
pub const WSAETIMEDOUT: u32 = 10060;
pub const WSAECONNREFUSED: u32 = 10061;
pub const WSAELOOP: u32 = 10062;
pub const WSAENAMETOOLONG: u32 = 10063;
pub const WSAEHOSTDOWN: u32 = 10064;
pub const WSAEHOSTUNREACH: u32 = 10065;
pub const WSAENOTEMPTY: u32 = 10066;
pub const WSAEPROCLIM: u32 = 10067;
pub const WSAEUSERS: u32 = 10068;
pub const WSAEDQUOT: u32 = 10069;
pub const WSAESTALE: u32 = 10070;
pub const WSAEREMOTE: u32 = 10071;
pub const WSASYSNOTREADY: u32 = 10091;
pub const WSAVERNOTSUPPORTED: u32 = 10092;
pub const WSANOTINITIALISED: u32 = 10093;
pub const WSAEDISCON: u32 = 10101;
pub const WSAENOMORE: u32 = 10102;
pub const WSAECANCELLED: u32 = 10103;
pub const WSAEINVALIDPROCTABLE: u32 = 10104;
pub const WSAEINVALIDPROVIDER: u32 = 10105;
pub const WSAEPROVIDERFAILEDINIT: u32 = 10106;
pub const WSASYSCALLFAILURE: u32 = 10107;
pub const WSASERVICE_NOT_FOUND: u32 = 10108;
pub const WSATYPE_NOT_FOUND: u32 = 10109;
pub const WSA_E_NO_MORE: u32 = 10110;
pub const WSA_E_CANCELLED: u32 = 10111;
pub const WSAEREFUSED: u32 = 10112;
pub const WSAHOST_NOT_FOUND: u32 = 11001;
pub const WSATRY_AGAIN: u32 = 11002;
pub const WSANO_RECOVERY: u32 = 11003;
pub const WSANO_DATA: u32 = 11004;
pub const WSA_QOS_RECEIVERS: u32 = 11005;
pub const WSA_QOS_SENDERS: u32 = 11006;
pub const WSA_QOS_NO_SENDERS: u32 = 11007;
pub const WSA_QOS_NO_RECEIVERS: u32 = 11008;
pub const WSA_QOS_REQUEST_CONFIRMED: u32 = 11009;
pub const WSA_QOS_ADMISSION_FAILURE: u32 = 11010;
pub const WSA_QOS_POLICY_FAILURE: u32 = 11011;
pub const WSA_QOS_BAD_STYLE: u32 = 11012;
pub const WSA_QOS_BAD_OBJECT: u32 = 11013;
pub const WSA_QOS_TRAFFIC_CTRL_ERROR: u32 = 11014;
pub const WSA_QOS_GENERIC_ERROR: u32 = 11015;
pub const WSA_QOS_ESERVICETYPE: u32 = 11016;
pub const WSA_QOS_EFLOWSPEC: u32 = 11017;
pub const WSA_QOS_EPROVSPECBUF: u32 = 11018;
pub const WSA_QOS_EFILTERSTYLE: u32 = 11019;
pub const WSA_QOS_EFILTERTYPE: u32 = 11020;
pub const WSA_QOS_EFILTERCOUNT: u32 = 11021;
pub const WSA_QOS_EOBJLENGTH: u32 = 11022;
pub const WSA_QOS_EFLOWCOUNT: u32 = 11023;
pub const WSA_QOS_EUNKOWNPSOBJ: u32 = 11024;
pub const WSA_QOS_EPOLICYOBJ: u32 = 11025;
pub const WSA_QOS_EFLOWDESC: u32 = 11026;
pub const WSA_QOS_EPSFLOWSPEC: u32 = 11027;
pub const WSA_QOS_EPSFILTERSPEC: u32 = 11028;
pub const WSA_QOS_ESDMODEOBJ: u32 = 11029;
pub const WSA_QOS_ESHAPERATEOBJ: u32 = 11030;
pub const WSA_QOS_RESERVED_PETYPE: u32 = 11031;
pub const WSA_SECURE_HOST_NOT_FOUND: u32 = 11032;
pub const WSA_IPSEC_NAME_POLICY_ERROR: u32 = 11033;
pub const ERROR_IPSEC_QM_POLICY_EXISTS: u32 = 13000;
pub const ERROR_IPSEC_QM_POLICY_NOT_FOUND: u32 = 13001;
pub const ERROR_IPSEC_QM_POLICY_IN_USE: u32 = 13002;
pub const ERROR_IPSEC_MM_POLICY_EXISTS: u32 = 13003;
pub const ERROR_IPSEC_MM_POLICY_NOT_FOUND: u32 = 13004;
pub const ERROR_IPSEC_MM_POLICY_IN_USE: u32 = 13005;
pub const ERROR_IPSEC_MM_FILTER_EXISTS: u32 = 13006;
pub const ERROR_IPSEC_MM_FILTER_NOT_FOUND: u32 = 13007;
pub const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS: u32 = 13008;
pub const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND: u32 = 13009;
pub const ERROR_IPSEC_MM_AUTH_EXISTS: u32 = 13010;
pub const ERROR_IPSEC_MM_AUTH_NOT_FOUND: u32 = 13011;
pub const ERROR_IPSEC_MM_AUTH_IN_USE: u32 = 13012;
pub const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND: u32 = 13013;
pub const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND: u32 = 13014;
pub const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND: u32 = 13015;
pub const ERROR_IPSEC_TUNNEL_FILTER_EXISTS: u32 = 13016;
pub const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND: u32 = 13017;
pub const ERROR_IPSEC_MM_FILTER_PENDING_DELETION: u32 = 13018;
pub const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION: u32 = 13019;
pub const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION: u32 = 13020;
pub const ERROR_IPSEC_MM_POLICY_PENDING_DELETION: u32 = 13021;
pub const ERROR_IPSEC_MM_AUTH_PENDING_DELETION: u32 = 13022;
pub const ERROR_IPSEC_QM_POLICY_PENDING_DELETION: u32 = 13023;
pub const WARNING_IPSEC_MM_POLICY_PRUNED: u32 = 13024;
pub const WARNING_IPSEC_QM_POLICY_PRUNED: u32 = 13025;
pub const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN: u32 = 13800;
pub const ERROR_IPSEC_IKE_AUTH_FAIL: u32 = 13801;
pub const ERROR_IPSEC_IKE_ATTRIB_FAIL: u32 = 13802;
pub const ERROR_IPSEC_IKE_NEGOTIATION_PENDING: u32 = 13803;
pub const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR: u32 = 13804;
pub const ERROR_IPSEC_IKE_TIMED_OUT: u32 = 13805;
pub const ERROR_IPSEC_IKE_NO_CERT: u32 = 13806;
pub const ERROR_IPSEC_IKE_SA_DELETED: u32 = 13807;
pub const ERROR_IPSEC_IKE_SA_REAPED: u32 = 13808;
pub const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP: u32 = 13809;
pub const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP: u32 = 13810;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_MM: u32 = 13811;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM: u32 = 13812;
pub const ERROR_IPSEC_IKE_DROP_NO_RESPONSE: u32 = 13813;
pub const ERROR_IPSEC_IKE_MM_DELAY_DROP: u32 = 13814;
pub const ERROR_IPSEC_IKE_QM_DELAY_DROP: u32 = 13815;
pub const ERROR_IPSEC_IKE_ERROR: u32 = 13816;
pub const ERROR_IPSEC_IKE_CRL_FAILED: u32 = 13817;
pub const ERROR_IPSEC_IKE_INVALID_KEY_USAGE: u32 = 13818;
pub const ERROR_IPSEC_IKE_INVALID_CERT_TYPE: u32 = 13819;
pub const ERROR_IPSEC_IKE_NO_PRIVATE_KEY: u32 = 13820;
pub const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY: u32 = 13821;
pub const ERROR_IPSEC_IKE_DH_FAIL: u32 = 13822;
pub const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED: u32 = 13823;
pub const ERROR_IPSEC_IKE_INVALID_HEADER: u32 = 13824;
pub const ERROR_IPSEC_IKE_NO_POLICY: u32 = 13825;
pub const ERROR_IPSEC_IKE_INVALID_SIGNATURE: u32 = 13826;
pub const ERROR_IPSEC_IKE_KERBEROS_ERROR: u32 = 13827;
pub const ERROR_IPSEC_IKE_NO_PUBLIC_KEY: u32 = 13828;
pub const ERROR_IPSEC_IKE_PROCESS_ERR: u32 = 13829;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SA: u32 = 13830;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_PROP: u32 = 13831;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS: u32 = 13832;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_KE: u32 = 13833;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_ID: u32 = 13834;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT: u32 = 13835;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ: u32 = 13836;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_HASH: u32 = 13837;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SIG: u32 = 13838;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE: u32 = 13839;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY: u32 = 13840;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE: u32 = 13841;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR: u32 = 13842;
pub const ERROR_IPSEC_IKE_INVALID_PAYLOAD: u32 = 13843;
pub const ERROR_IPSEC_IKE_LOAD_SOFT_SA: u32 = 13844;
pub const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN: u32 = 13845;
pub const ERROR_IPSEC_IKE_INVALID_COOKIE: u32 = 13846;
pub const ERROR_IPSEC_IKE_NO_PEER_CERT: u32 = 13847;
pub const ERROR_IPSEC_IKE_PEER_CRL_FAILED: u32 = 13848;
pub const ERROR_IPSEC_IKE_POLICY_CHANGE: u32 = 13849;
pub const ERROR_IPSEC_IKE_NO_MM_POLICY: u32 = 13850;
pub const ERROR_IPSEC_IKE_NOTCBPRIV: u32 = 13851;
pub const ERROR_IPSEC_IKE_SECLOADFAIL: u32 = 13852;
pub const ERROR_IPSEC_IKE_FAILSSPINIT: u32 = 13853;
pub const ERROR_IPSEC_IKE_FAILQUERYSSP: u32 = 13854;
pub const ERROR_IPSEC_IKE_SRVACQFAIL: u32 = 13855;
pub const ERROR_IPSEC_IKE_SRVQUERYCRED: u32 = 13856;
pub const ERROR_IPSEC_IKE_GETSPIFAIL: u32 = 13857;
pub const ERROR_IPSEC_IKE_INVALID_FILTER: u32 = 13858;
pub const ERROR_IPSEC_IKE_OUT_OF_MEMORY: u32 = 13859;
pub const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED: u32 = 13860;
pub const ERROR_IPSEC_IKE_INVALID_POLICY: u32 = 13861;
pub const ERROR_IPSEC_IKE_UNKNOWN_DOI: u32 = 13862;
pub const ERROR_IPSEC_IKE_INVALID_SITUATION: u32 = 13863;
pub const ERROR_IPSEC_IKE_DH_FAILURE: u32 = 13864;
pub const ERROR_IPSEC_IKE_INVALID_GROUP: u32 = 13865;
pub const ERROR_IPSEC_IKE_ENCRYPT: u32 = 13866;
pub const ERROR_IPSEC_IKE_DECRYPT: u32 = 13867;
pub const ERROR_IPSEC_IKE_POLICY_MATCH: u32 = 13868;
pub const ERROR_IPSEC_IKE_UNSUPPORTED_ID: u32 = 13869;
pub const ERROR_IPSEC_IKE_INVALID_HASH: u32 = 13870;
pub const ERROR_IPSEC_IKE_INVALID_HASH_ALG: u32 = 13871;
pub const ERROR_IPSEC_IKE_INVALID_HASH_SIZE: u32 = 13872;
pub const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG: u32 = 13873;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_ALG: u32 = 13874;
pub const ERROR_IPSEC_IKE_INVALID_SIG: u32 = 13875;
pub const ERROR_IPSEC_IKE_LOAD_FAILED: u32 = 13876;
pub const ERROR_IPSEC_IKE_RPC_DELETE: u32 = 13877;
pub const ERROR_IPSEC_IKE_BENIGN_REINIT: u32 = 13878;
pub const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY: u32 = 13879;
pub const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION: u32 = 13880;
pub const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN: u32 = 13881;
pub const ERROR_IPSEC_IKE_MM_LIMIT: u32 = 13882;
pub const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED: u32 = 13883;
pub const ERROR_IPSEC_IKE_QM_LIMIT: u32 = 13884;
pub const ERROR_IPSEC_IKE_MM_EXPIRED: u32 = 13885;
pub const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID: u32 = 13886;
pub const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH: u32 = 13887;
pub const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID: u32 = 13888;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD: u32 = 13889;
pub const ERROR_IPSEC_IKE_DOS_COOKIE_SENT: u32 = 13890;
pub const ERROR_IPSEC_IKE_SHUTTING_DOWN: u32 = 13891;
pub const ERROR_IPSEC_IKE_CGA_AUTH_FAILED: u32 = 13892;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA: u32 = 13893;
pub const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM: u32 = 13894;
pub const ERROR_IPSEC_IKE_QM_EXPIRED: u32 = 13895;
pub const ERROR_IPSEC_IKE_TOO_MANY_FILTERS: u32 = 13896;
pub const ERROR_IPSEC_IKE_NEG_STATUS_END: u32 = 13897;
pub const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL: u32 = 13898;
pub const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE: u32 = 13899;
pub const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING: u32 = 13900;
pub const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING: u32 = 13901;
pub const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS: u32 = 13902;
pub const ERROR_IPSEC_IKE_RATELIMIT_DROP: u32 = 13903;
pub const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE: u32 = 13904;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE: u32 = 13905;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE: u32 = 13906;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY: u32 = 13907;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE: u32 = 13908;
pub const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END: u32 = 13909;
pub const ERROR_IPSEC_BAD_SPI: u32 = 13910;
pub const ERROR_IPSEC_SA_LIFETIME_EXPIRED: u32 = 13911;
pub const ERROR_IPSEC_WRONG_SA: u32 = 13912;
pub const ERROR_IPSEC_REPLAY_CHECK_FAILED: u32 = 13913;
pub const ERROR_IPSEC_INVALID_PACKET: u32 = 13914;
pub const ERROR_IPSEC_INTEGRITY_CHECK_FAILED: u32 = 13915;
pub const ERROR_IPSEC_CLEAR_TEXT_DROP: u32 = 13916;
pub const ERROR_IPSEC_AUTH_FIREWALL_DROP: u32 = 13917;
pub const ERROR_IPSEC_THROTTLE_DROP: u32 = 13918;
pub const ERROR_IPSEC_DOSP_BLOCK: u32 = 13925;
pub const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST: u32 = 13926;
pub const ERROR_IPSEC_DOSP_INVALID_PACKET: u32 = 13927;
pub const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED: u32 = 13928;
pub const ERROR_IPSEC_DOSP_MAX_ENTRIES: u32 = 13929;
pub const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED: u32 = 13930;
pub const ERROR_IPSEC_DOSP_NOT_INSTALLED: u32 = 13931;
pub const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES: u32 = 13932;
pub const ERROR_SXS_SECTION_NOT_FOUND: u32 = 14000;
pub const ERROR_SXS_CANT_GEN_ACTCTX: u32 = 14001;
pub const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT: u32 = 14002;
pub const ERROR_SXS_ASSEMBLY_NOT_FOUND: u32 = 14003;
pub const ERROR_SXS_MANIFEST_FORMAT_ERROR: u32 = 14004;
pub const ERROR_SXS_MANIFEST_PARSE_ERROR: u32 = 14005;
pub const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED: u32 = 14006;
pub const ERROR_SXS_KEY_NOT_FOUND: u32 = 14007;
pub const ERROR_SXS_VERSION_CONFLICT: u32 = 14008;
pub const ERROR_SXS_WRONG_SECTION_TYPE: u32 = 14009;
pub const ERROR_SXS_THREAD_QUERIES_DISABLED: u32 = 14010;
pub const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET: u32 = 14011;
pub const ERROR_SXS_UNKNOWN_ENCODING_GROUP: u32 = 14012;
pub const ERROR_SXS_UNKNOWN_ENCODING: u32 = 14013;
pub const ERROR_SXS_INVALID_XML_NAMESPACE_URI: u32 = 14014;
pub const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED: u32 = 14015;
pub const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED: u32 = 14016;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE: u32 = 14017;
pub const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE: u32 = 14018;
pub const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE: u32 = 14019;
pub const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT: u32 = 14020;
pub const ERROR_SXS_DUPLICATE_DLL_NAME: u32 = 14021;
pub const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME: u32 = 14022;
pub const ERROR_SXS_DUPLICATE_CLSID: u32 = 14023;
pub const ERROR_SXS_DUPLICATE_IID: u32 = 14024;
pub const ERROR_SXS_DUPLICATE_TLBID: u32 = 14025;
pub const ERROR_SXS_DUPLICATE_PROGID: u32 = 14026;
pub const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME: u32 = 14027;
pub const ERROR_SXS_FILE_HASH_MISMATCH: u32 = 14028;
pub const ERROR_SXS_POLICY_PARSE_ERROR: u32 = 14029;
pub const ERROR_SXS_XML_E_MISSINGQUOTE: u32 = 14030;
pub const ERROR_SXS_XML_E_COMMENTSYNTAX: u32 = 14031;
pub const ERROR_SXS_XML_E_BADSTARTNAMECHAR: u32 = 14032;
pub const ERROR_SXS_XML_E_BADNAMECHAR: u32 = 14033;
pub const ERROR_SXS_XML_E_BADCHARINSTRING: u32 = 14034;
pub const ERROR_SXS_XML_E_XMLDECLSYNTAX: u32 = 14035;
pub const ERROR_SXS_XML_E_BADCHARDATA: u32 = 14036;
pub const ERROR_SXS_XML_E_MISSINGWHITESPACE: u32 = 14037;
pub const ERROR_SXS_XML_E_EXPECTINGTAGEND: u32 = 14038;
pub const ERROR_SXS_XML_E_MISSINGSEMICOLON: u32 = 14039;
pub const ERROR_SXS_XML_E_UNBALANCEDPAREN: u32 = 14040;
pub const ERROR_SXS_XML_E_INTERNALERROR: u32 = 14041;
pub const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE: u32 = 14042;
pub const ERROR_SXS_XML_E_INCOMPLETE_ENCODING: u32 = 14043;
pub const ERROR_SXS_XML_E_MISSING_PAREN: u32 = 14044;
pub const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE: u32 = 14045;
pub const ERROR_SXS_XML_E_MULTIPLE_COLONS: u32 = 14046;
pub const ERROR_SXS_XML_E_INVALID_DECIMAL: u32 = 14047;
pub const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL: u32 = 14048;
pub const ERROR_SXS_XML_E_INVALID_UNICODE: u32 = 14049;
pub const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK: u32 = 14050;
pub const ERROR_SXS_XML_E_UNEXPECTEDENDTAG: u32 = 14051;
pub const ERROR_SXS_XML_E_UNCLOSEDTAG: u32 = 14052;
pub const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE: u32 = 14053;
pub const ERROR_SXS_XML_E_MULTIPLEROOTS: u32 = 14054;
pub const ERROR_SXS_XML_E_INVALIDATROOTLEVEL: u32 = 14055;
pub const ERROR_SXS_XML_E_BADXMLDECL: u32 = 14056;
pub const ERROR_SXS_XML_E_MISSINGROOT: u32 = 14057;
pub const ERROR_SXS_XML_E_UNEXPECTEDEOF: u32 = 14058;
pub const ERROR_SXS_XML_E_BADPEREFINSUBSET: u32 = 14059;
pub const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG: u32 = 14060;
pub const ERROR_SXS_XML_E_UNCLOSEDENDTAG: u32 = 14061;
pub const ERROR_SXS_XML_E_UNCLOSEDSTRING: u32 = 14062;
pub const ERROR_SXS_XML_E_UNCLOSEDCOMMENT: u32 = 14063;
pub const ERROR_SXS_XML_E_UNCLOSEDDECL: u32 = 14064;
pub const ERROR_SXS_XML_E_UNCLOSEDCDATA: u32 = 14065;
pub const ERROR_SXS_XML_E_RESERVEDNAMESPACE: u32 = 14066;
pub const ERROR_SXS_XML_E_INVALIDENCODING: u32 = 14067;
pub const ERROR_SXS_XML_E_INVALIDSWITCH: u32 = 14068;
pub const ERROR_SXS_XML_E_BADXMLCASE: u32 = 14069;
pub const ERROR_SXS_XML_E_INVALID_STANDALONE: u32 = 14070;
pub const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE: u32 = 14071;
pub const ERROR_SXS_XML_E_INVALID_VERSION: u32 = 14072;
pub const ERROR_SXS_XML_E_MISSINGEQUALS: u32 = 14073;
pub const ERROR_SXS_PROTECTION_RECOVERY_FAILED: u32 = 14074;
pub const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT: u32 = 14075;
pub const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID: u32 = 14076;
pub const ERROR_SXS_UNTRANSLATABLE_HRESULT: u32 = 14077;
pub const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING: u32 = 14078;
pub const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE: u32 = 14079;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME: u32 = 14080;
pub const ERROR_SXS_ASSEMBLY_MISSING: u32 = 14081;
pub const ERROR_SXS_CORRUPT_ACTIVATION_STACK: u32 = 14082;
pub const ERROR_SXS_CORRUPTION: u32 = 14083;
pub const ERROR_SXS_EARLY_DEACTIVATION: u32 = 14084;
pub const ERROR_SXS_INVALID_DEACTIVATION: u32 = 14085;
pub const ERROR_SXS_MULTIPLE_DEACTIVATION: u32 = 14086;
pub const ERROR_SXS_PROCESS_TERMINATION_REQUESTED: u32 = 14087;
pub const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT: u32 = 14088;
pub const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY: u32 = 14089;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE: u32 = 14090;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME: u32 = 14091;
pub const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE: u32 = 14092;
pub const ERROR_SXS_IDENTITY_PARSE_ERROR: u32 = 14093;
pub const ERROR_MALFORMED_SUBSTITUTION_STRING: u32 = 14094;
pub const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN: u32 = 14095;
pub const ERROR_UNMAPPED_SUBSTITUTION_STRING: u32 = 14096;
pub const ERROR_SXS_ASSEMBLY_NOT_LOCKED: u32 = 14097;
pub const ERROR_SXS_COMPONENT_STORE_CORRUPT: u32 = 14098;
pub const ERROR_ADVANCED_INSTALLER_FAILED: u32 = 14099;
pub const ERROR_XML_ENCODING_MISMATCH: u32 = 14100;
pub const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT: u32 = 14101;
pub const ERROR_SXS_IDENTITIES_DIFFERENT: u32 = 14102;
pub const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT: u32 = 14103;
pub const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY: u32 = 14104;
pub const ERROR_SXS_MANIFEST_TOO_BIG: u32 = 14105;
pub const ERROR_SXS_SETTING_NOT_REGISTERED: u32 = 14106;
pub const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE: u32 = 14107;
pub const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED: u32 = 14108;
pub const ERROR_GENERIC_COMMAND_FAILED: u32 = 14109;
pub const ERROR_SXS_FILE_HASH_MISSING: u32 = 14110;
pub const ERROR_EVT_INVALID_CHANNEL_PATH: u32 = 15000;
pub const ERROR_EVT_INVALID_QUERY: u32 = 15001;
pub const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND: u32 = 15002;
pub const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND: u32 = 15003;
pub const ERROR_EVT_INVALID_PUBLISHER_NAME: u32 = 15004;
pub const ERROR_EVT_INVALID_EVENT_DATA: u32 = 15005;
pub const ERROR_EVT_CHANNEL_NOT_FOUND: u32 = 15007;
pub const ERROR_EVT_MALFORMED_XML_TEXT: u32 = 15008;
pub const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL: u32 = 15009;
pub const ERROR_EVT_CONFIGURATION_ERROR: u32 = 15010;
pub const ERROR_EVT_QUERY_RESULT_STALE: u32 = 15011;
pub const ERROR_EVT_QUERY_RESULT_INVALID_POSITION: u32 = 15012;
pub const ERROR_EVT_NON_VALIDATING_MSXML: u32 = 15013;
pub const ERROR_EVT_FILTER_ALREADYSCOPED: u32 = 15014;
pub const ERROR_EVT_FILTER_NOTELTSET: u32 = 15015;
pub const ERROR_EVT_FILTER_INVARG: u32 = 15016;
pub const ERROR_EVT_FILTER_INVTEST: u32 = 15017;
pub const ERROR_EVT_FILTER_INVTYPE: u32 = 15018;
pub const ERROR_EVT_FILTER_PARSEERR: u32 = 15019;
pub const ERROR_EVT_FILTER_UNSUPPORTEDOP: u32 = 15020;
pub const ERROR_EVT_FILTER_UNEXPECTEDTOKEN: u32 = 15021;
pub const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL: u32 = 15022;
pub const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE: u32 = 15023;
pub const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE: u32 = 15024;
pub const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE: u32 = 15025;
pub const ERROR_EVT_FILTER_TOO_COMPLEX: u32 = 15026;
pub const ERROR_EVT_MESSAGE_NOT_FOUND: u32 = 15027;
pub const ERROR_EVT_MESSAGE_ID_NOT_FOUND: u32 = 15028;
pub const ERROR_EVT_UNRESOLVED_VALUE_INSERT: u32 = 15029;
pub const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT: u32 = 15030;
pub const ERROR_EVT_MAX_INSERTS_REACHED: u32 = 15031;
pub const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND: u32 = 15032;
pub const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND: u32 = 15033;
pub const ERROR_EVT_VERSION_TOO_OLD: u32 = 15034;
pub const ERROR_EVT_VERSION_TOO_NEW: u32 = 15035;
pub const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY: u32 = 15036;
pub const ERROR_EVT_PUBLISHER_DISABLED: u32 = 15037;
pub const ERROR_EVT_FILTER_OUT_OF_RANGE: u32 = 15038;
pub const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE: u32 = 15080;
pub const ERROR_EC_LOG_DISABLED: u32 = 15081;
pub const ERROR_EC_CIRCULAR_FORWARDING: u32 = 15082;
pub const ERROR_EC_CREDSTORE_FULL: u32 = 15083;
pub const ERROR_EC_CRED_NOT_FOUND: u32 = 15084;
pub const ERROR_EC_NO_ACTIVE_CHANNEL: u32 = 15085;
pub const ERROR_MUI_FILE_NOT_FOUND: u32 = 15100;
pub const ERROR_MUI_INVALID_FILE: u32 = 15101;
pub const ERROR_MUI_INVALID_RC_CONFIG: u32 = 15102;
pub const ERROR_MUI_INVALID_LOCALE_NAME: u32 = 15103;
pub const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME: u32 = 15104;
pub const ERROR_MUI_FILE_NOT_LOADED: u32 = 15105;
pub const ERROR_RESOURCE_ENUM_USER_STOP: u32 = 15106;
pub const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED: u32 = 15107;
pub const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME: u32 = 15108;
pub const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE: u32 = 15110;
pub const ERROR_MRM_INVALID_PRICONFIG: u32 = 15111;
pub const ERROR_MRM_INVALID_FILE_TYPE: u32 = 15112;
pub const ERROR_MRM_UNKNOWN_QUALIFIER: u32 = 15113;
pub const ERROR_MRM_INVALID_QUALIFIER_VALUE: u32 = 15114;
pub const ERROR_MRM_NO_CANDIDATE: u32 = 15115;
pub const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE: u32 = 15116;
pub const ERROR_MRM_RESOURCE_TYPE_MISMATCH: u32 = 15117;
pub const ERROR_MRM_DUPLICATE_MAP_NAME: u32 = 15118;
pub const ERROR_MRM_DUPLICATE_ENTRY: u32 = 15119;
pub const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER: u32 = 15120;
pub const ERROR_MRM_FILEPATH_TOO_LONG: u32 = 15121;
pub const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE: u32 = 15122;
pub const ERROR_MRM_INVALID_PRI_FILE: u32 = 15126;
pub const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND: u32 = 15127;
pub const ERROR_MRM_MAP_NOT_FOUND: u32 = 15135;
pub const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE: u32 = 15136;
pub const ERROR_MRM_INVALID_QUALIFIER_OPERATOR: u32 = 15137;
pub const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE: u32 = 15138;
pub const ERROR_MRM_AUTOMERGE_ENABLED: u32 = 15139;
pub const ERROR_MRM_TOO_MANY_RESOURCES: u32 = 15140;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE: u32 = 15141;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE: u32 = 15142;
pub const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD: u32 = 15143;
pub const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST: u32 = 15144;
pub const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT: u32 = 15145;
pub const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE: u32 = 15146;
pub const ERROR_MRM_GENERATION_COUNT_MISMATCH: u32 = 15147;
pub const ERROR_PRI_MERGE_VERSION_MISMATCH: u32 = 15148;
pub const ERROR_PRI_MERGE_MISSING_SCHEMA: u32 = 15149;
pub const ERROR_PRI_MERGE_LOAD_FILE_FAILED: u32 = 15150;
pub const ERROR_PRI_MERGE_ADD_FILE_FAILED: u32 = 15151;
pub const ERROR_PRI_MERGE_WRITE_FILE_FAILED: u32 = 15152;
pub const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED: u32 = 15153;
pub const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED: u32 = 15154;
pub const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED: u32 = 15155;
pub const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED: u32 = 15156;
pub const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED: u32 = 15157;
pub const ERROR_PRI_MERGE_INVALID_FILE_NAME: u32 = 15158;
pub const ERROR_MRM_PACKAGE_NOT_FOUND: u32 = 15159;
pub const ERROR_MCA_INVALID_CAPABILITIES_STRING: u32 = 15200;
pub const ERROR_MCA_INVALID_VCP_VERSION: u32 = 15201;
pub const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION: u32 = 15202;
pub const ERROR_MCA_MCCS_VERSION_MISMATCH: u32 = 15203;
pub const ERROR_MCA_UNSUPPORTED_MCCS_VERSION: u32 = 15204;
pub const ERROR_MCA_INTERNAL_ERROR: u32 = 15205;
pub const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED: u32 = 15206;
pub const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE: u32 = 15207;
pub const ERROR_AMBIGUOUS_SYSTEM_DEVICE: u32 = 15250;
pub const ERROR_SYSTEM_DEVICE_NOT_FOUND: u32 = 15299;
pub const ERROR_HASH_NOT_SUPPORTED: u32 = 15300;
pub const ERROR_HASH_NOT_PRESENT: u32 = 15301;
pub const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED: u32 = 15321;
pub const ERROR_GPIO_CLIENT_INFORMATION_INVALID: u32 = 15322;
pub const ERROR_GPIO_VERSION_NOT_SUPPORTED: u32 = 15323;
pub const ERROR_GPIO_INVALID_REGISTRATION_PACKET: u32 = 15324;
pub const ERROR_GPIO_OPERATION_DENIED: u32 = 15325;
pub const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE: u32 = 15326;
pub const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED: u32 = 15327;
pub const ERROR_CANNOT_SWITCH_RUNLEVEL: u32 = 15400;
pub const ERROR_INVALID_RUNLEVEL_SETTING: u32 = 15401;
pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT: u32 = 15402;
pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT: u32 = 15403;
pub const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS: u32 = 15404;
pub const ERROR_SERVICES_FAILED_AUTOSTART: u32 = 15405;
pub const ERROR_COM_TASK_STOP_PENDING: u32 = 15501;
pub const ERROR_INSTALL_OPEN_PACKAGE_FAILED: u32 = 15600;
pub const ERROR_INSTALL_PACKAGE_NOT_FOUND: u32 = 15601;
pub const ERROR_INSTALL_INVALID_PACKAGE: u32 = 15602;
pub const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED: u32 = 15603;
pub const ERROR_INSTALL_OUT_OF_DISK_SPACE: u32 = 15604;
pub const ERROR_INSTALL_NETWORK_FAILURE: u32 = 15605;
pub const ERROR_INSTALL_REGISTRATION_FAILURE: u32 = 15606;
pub const ERROR_INSTALL_DEREGISTRATION_FAILURE: u32 = 15607;
pub const ERROR_INSTALL_CANCEL: u32 = 15608;
pub const ERROR_INSTALL_FAILED: u32 = 15609;
pub const ERROR_REMOVE_FAILED: u32 = 15610;
pub const ERROR_PACKAGE_ALREADY_EXISTS: u32 = 15611;
pub const ERROR_NEEDS_REMEDIATION: u32 = 15612;
pub const ERROR_INSTALL_PREREQUISITE_FAILED: u32 = 15613;
pub const ERROR_PACKAGE_REPOSITORY_CORRUPTED: u32 = 15614;
pub const ERROR_INSTALL_POLICY_FAILURE: u32 = 15615;
pub const ERROR_PACKAGE_UPDATING: u32 = 15616;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY: u32 = 15617;
pub const ERROR_PACKAGES_IN_USE: u32 = 15618;
pub const ERROR_RECOVERY_FILE_CORRUPT: u32 = 15619;
pub const ERROR_INVALID_STAGED_SIGNATURE: u32 = 15620;
pub const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED: u32 = 15621;
pub const ERROR_INSTALL_PACKAGE_DOWNGRADE: u32 = 15622;
pub const ERROR_SYSTEM_NEEDS_REMEDIATION: u32 = 15623;
pub const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN: u32 = 15624;
pub const ERROR_RESILIENCY_FILE_CORRUPT: u32 = 15625;
pub const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING: u32 = 15626;
pub const ERROR_PACKAGE_MOVE_FAILED: u32 = 15627;
pub const ERROR_INSTALL_VOLUME_NOT_EMPTY: u32 = 15628;
pub const ERROR_INSTALL_VOLUME_OFFLINE: u32 = 15629;
pub const ERROR_INSTALL_VOLUME_CORRUPT: u32 = 15630;
pub const ERROR_NEEDS_REGISTRATION: u32 = 15631;
pub const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE: u32 = 15632;
pub const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED: u32 = 15633;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE: u32 = 15634;
pub const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM: u32 = 15635;
pub const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING: u32 = 15636;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE: u32 = 15637;
pub const ERROR_PACKAGE_STAGING_ONHOLD: u32 = 15638;
pub const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE: u32 = 15639;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY: u32 = 15640;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF: u32 = 15641;
pub const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED: u32 = 15642;
pub const ERROR_PACKAGES_REPUTATION_CHECK_FAILED: u32 = 15643;
pub const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT: u32 = 15644;
pub const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED: u32 = 15645;
pub const ERROR_APPINSTALLER_ACTIVATION_BLOCKED: u32 = 15646;
pub const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED: u32 = 15647;
pub const APPMODEL_ERROR_NO_PACKAGE: u32 = 15700;
pub const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT: u32 = 15701;
pub const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT: u32 = 15702;
pub const APPMODEL_ERROR_NO_APPLICATION: u32 = 15703;
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED: u32 = 15704;
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID: u32 = 15705;
pub const APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE: u32 = 15706;
pub const ERROR_STATE_LOAD_STORE_FAILED: u32 = 15800;
pub const ERROR_STATE_GET_VERSION_FAILED: u32 = 15801;
pub const ERROR_STATE_SET_VERSION_FAILED: u32 = 15802;
pub const ERROR_STATE_STRUCTURED_RESET_FAILED: u32 = 15803;
pub const ERROR_STATE_OPEN_CONTAINER_FAILED: u32 = 15804;
pub const ERROR_STATE_CREATE_CONTAINER_FAILED: u32 = 15805;
pub const ERROR_STATE_DELETE_CONTAINER_FAILED: u32 = 15806;
pub const ERROR_STATE_READ_SETTING_FAILED: u32 = 15807;
pub const ERROR_STATE_WRITE_SETTING_FAILED: u32 = 15808;
pub const ERROR_STATE_DELETE_SETTING_FAILED: u32 = 15809;
pub const ERROR_STATE_QUERY_SETTING_FAILED: u32 = 15810;
pub const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED: u32 = 15811;
pub const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED: u32 = 15812;
pub const ERROR_STATE_ENUMERATE_CONTAINER_FAILED: u32 = 15813;
pub const ERROR_STATE_ENUMERATE_SETTINGS_FAILED: u32 = 15814;
pub const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED: u32 = 15815;
pub const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED: u32 = 15816;
pub const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED: u32 = 15817;
pub const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED: u32 = 15818;
pub const ERROR_API_UNAVAILABLE: u32 = 15841;
pub const STORE_ERROR_UNLICENSED: u32 = 15861;
pub const STORE_ERROR_UNLICENSED_USER: u32 = 15862;
pub const STORE_ERROR_PENDING_COM_TRANSACTION: u32 = 15863;
pub const STORE_ERROR_LICENSE_REVOKED: u32 = 15864;
pub const SEVERITY_SUCCESS: u32 = 0;
pub const SEVERITY_ERROR: u32 = 1;
pub const FACILITY_NT_BIT: u32 = 268435456;
pub const NOERROR: u32 = 0;
pub const DRAGDROP_E_FIRST: u32 = 2147746048;
pub const DRAGDROP_E_LAST: u32 = 2147746063;
pub const DRAGDROP_S_FIRST: u32 = 262400;
pub const DRAGDROP_S_LAST: u32 = 262415;
pub const CLASSFACTORY_E_FIRST: u32 = 2147746064;
pub const CLASSFACTORY_E_LAST: u32 = 2147746079;
pub const CLASSFACTORY_S_FIRST: u32 = 262416;
pub const CLASSFACTORY_S_LAST: u32 = 262431;
pub const MARSHAL_E_FIRST: u32 = 2147746080;
pub const MARSHAL_E_LAST: u32 = 2147746095;
pub const MARSHAL_S_FIRST: u32 = 262432;
pub const MARSHAL_S_LAST: u32 = 262447;
pub const DATA_E_FIRST: u32 = 2147746096;
pub const DATA_E_LAST: u32 = 2147746111;
pub const DATA_S_FIRST: u32 = 262448;
pub const DATA_S_LAST: u32 = 262463;
pub const VIEW_E_FIRST: u32 = 2147746112;
pub const VIEW_E_LAST: u32 = 2147746127;
pub const VIEW_S_FIRST: u32 = 262464;
pub const VIEW_S_LAST: u32 = 262479;
pub const REGDB_E_FIRST: u32 = 2147746128;
pub const REGDB_E_LAST: u32 = 2147746143;
pub const REGDB_S_FIRST: u32 = 262480;
pub const REGDB_S_LAST: u32 = 262495;
pub const CAT_E_FIRST: u32 = 2147746144;
pub const CAT_E_LAST: u32 = 2147746145;
pub const CS_E_FIRST: u32 = 2147746148;
pub const CS_E_LAST: u32 = 2147746159;
pub const CACHE_E_FIRST: u32 = 2147746160;
pub const CACHE_E_LAST: u32 = 2147746175;
pub const CACHE_S_FIRST: u32 = 262512;
pub const CACHE_S_LAST: u32 = 262527;
pub const OLEOBJ_E_FIRST: u32 = 2147746176;
pub const OLEOBJ_E_LAST: u32 = 2147746191;
pub const OLEOBJ_S_FIRST: u32 = 262528;
pub const OLEOBJ_S_LAST: u32 = 262543;
pub const CLIENTSITE_E_FIRST: u32 = 2147746192;
pub const CLIENTSITE_E_LAST: u32 = 2147746207;
pub const CLIENTSITE_S_FIRST: u32 = 262544;
pub const CLIENTSITE_S_LAST: u32 = 262559;
pub const INPLACE_E_FIRST: u32 = 2147746208;
pub const INPLACE_E_LAST: u32 = 2147746223;
pub const INPLACE_S_FIRST: u32 = 262560;
pub const INPLACE_S_LAST: u32 = 262575;
pub const ENUM_E_FIRST: u32 = 2147746224;
pub const ENUM_E_LAST: u32 = 2147746239;
pub const ENUM_S_FIRST: u32 = 262576;
pub const ENUM_S_LAST: u32 = 262591;
pub const CONVERT10_E_FIRST: u32 = 2147746240;
pub const CONVERT10_E_LAST: u32 = 2147746255;
pub const CONVERT10_S_FIRST: u32 = 262592;
pub const CONVERT10_S_LAST: u32 = 262607;
pub const CLIPBRD_E_FIRST: u32 = 2147746256;
pub const CLIPBRD_E_LAST: u32 = 2147746271;
pub const CLIPBRD_S_FIRST: u32 = 262608;
pub const CLIPBRD_S_LAST: u32 = 262623;
pub const MK_E_FIRST: u32 = 2147746272;
pub const MK_E_LAST: u32 = 2147746287;
pub const MK_S_FIRST: u32 = 262624;
pub const MK_S_LAST: u32 = 262639;
pub const CO_E_FIRST: u32 = 2147746288;
pub const CO_E_LAST: u32 = 2147746303;
pub const CO_S_FIRST: u32 = 262640;
pub const CO_S_LAST: u32 = 262655;
pub const EVENT_E_FIRST: u32 = 2147746304;
pub const EVENT_E_LAST: u32 = 2147746335;
pub const EVENT_S_FIRST: u32 = 262656;
pub const EVENT_S_LAST: u32 = 262687;
pub const XACT_E_FIRST: u32 = 2147799040;
pub const XACT_E_LAST: u32 = 2147799083;
pub const XACT_S_FIRST: u32 = 315392;
pub const XACT_S_LAST: u32 = 315408;
pub const CONTEXT_E_FIRST: u32 = 2147803136;
pub const CONTEXT_E_LAST: u32 = 2147803183;
pub const CONTEXT_S_FIRST: u32 = 319488;
pub const CONTEXT_S_LAST: u32 = 319535;
pub const NTE_OP_OK: u32 = 0;
pub const SCARD_S_SUCCESS: u32 = 0;
pub const TC_NORMAL: u32 = 0;
pub const TC_HARDERR: u32 = 1;
pub const TC_GP_TRAP: u32 = 2;
pub const TC_SIGNAL: u32 = 3;
pub const AC_LINE_OFFLINE: u32 = 0;
pub const AC_LINE_ONLINE: u32 = 1;
pub const AC_LINE_BACKUP_POWER: u32 = 2;
pub const AC_LINE_UNKNOWN: u32 = 255;
pub const BATTERY_FLAG_HIGH: u32 = 1;
pub const BATTERY_FLAG_LOW: u32 = 2;
pub const BATTERY_FLAG_CRITICAL: u32 = 4;
pub const BATTERY_FLAG_CHARGING: u32 = 8;
pub const BATTERY_FLAG_NO_BATTERY: u32 = 128;
pub const BATTERY_FLAG_UNKNOWN: u32 = 255;
pub const BATTERY_PERCENTAGE_UNKNOWN: u32 = 255;
pub const SYSTEM_STATUS_FLAG_POWER_SAVING_ON: u32 = 1;
pub const BATTERY_LIFE_UNKNOWN: u32 = 4294967295;
pub const ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID: u32 = 1;
pub const ACTCTX_FLAG_LANGID_VALID: u32 = 2;
pub const ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID: u32 = 4;
pub const ACTCTX_FLAG_RESOURCE_NAME_VALID: u32 = 8;
pub const ACTCTX_FLAG_SET_PROCESS_DEFAULT: u32 = 16;
pub const ACTCTX_FLAG_APPLICATION_NAME_VALID: u32 = 32;
pub const ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF: u32 = 64;
pub const ACTCTX_FLAG_HMODULE_VALID: u32 = 128;
pub const DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION: u32 = 1;
pub const FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX: u32 = 1;
pub const FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS: u32 = 2;
pub const FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA: u32 = 4;
pub const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED: u32 = 1;
pub const QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX: u32 = 4;
pub const QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE: u32 = 8;
pub const QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS: u32 = 16;
pub const QUERY_ACTCTX_FLAG_NO_ADDREF: u32 = 2147483648;
pub const RESTART_MAX_CMD_LINE: u32 = 1024;
pub const RESTART_NO_CRASH: u32 = 1;
pub const RESTART_NO_HANG: u32 = 2;
pub const RESTART_NO_PATCH: u32 = 4;
pub const RESTART_NO_REBOOT: u32 = 8;
pub const RECOVERY_DEFAULT_PING_INTERVAL: u32 = 5000;
pub const RECOVERY_MAX_PING_INTERVAL: u32 = 300000;
pub const FILE_RENAME_FLAG_REPLACE_IF_EXISTS: u32 = 1;
pub const FILE_RENAME_FLAG_POSIX_SEMANTICS: u32 = 2;
pub const FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE: u32 = 4;
pub const FILE_DISPOSITION_FLAG_DO_NOT_DELETE: u32 = 0;
pub const FILE_DISPOSITION_FLAG_DELETE: u32 = 1;
pub const FILE_DISPOSITION_FLAG_POSIX_SEMANTICS: u32 = 2;
pub const FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK: u32 = 4;
pub const FILE_DISPOSITION_FLAG_ON_CLOSE: u32 = 8;
pub const FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE: u32 = 16;
pub const STORAGE_INFO_FLAGS_ALIGNED_DEVICE: u32 = 1;
pub const STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE: u32 = 2;
pub const STORAGE_INFO_OFFSET_UNKNOWN: u32 = 4294967295;
pub const REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK: u32 = 1;
pub const REMOTE_PROTOCOL_INFO_FLAG_OFFLINE: u32 = 2;
pub const REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE: u32 = 4;
pub const RPI_FLAG_SMB2_SHARECAP_TIMEWARP: u32 = 2;
pub const RPI_FLAG_SMB2_SHARECAP_DFS: u32 = 8;
pub const RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY: u32 = 16;
pub const RPI_FLAG_SMB2_SHARECAP_SCALEOUT: u32 = 32;
pub const RPI_FLAG_SMB2_SHARECAP_CLUSTER: u32 = 64;
pub const RPI_SMB2_FLAG_SERVERCAP_DFS: u32 = 1;
pub const RPI_SMB2_FLAG_SERVERCAP_LEASING: u32 = 2;
pub const RPI_SMB2_FLAG_SERVERCAP_LARGEMTU: u32 = 4;
pub const RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL: u32 = 8;
pub const RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES: u32 = 16;
pub const RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING: u32 = 32;
pub const SYMBOLIC_LINK_FLAG_DIRECTORY: u32 = 1;
pub const SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE: u32 = 2;
pub const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: u32 = 0;
pub const R2_BLACK: u32 = 1;
pub const R2_NOTMERGEPEN: u32 = 2;
pub const R2_MASKNOTPEN: u32 = 3;
pub const R2_NOTCOPYPEN: u32 = 4;
pub const R2_MASKPENNOT: u32 = 5;
pub const R2_NOT: u32 = 6;
pub const R2_XORPEN: u32 = 7;
pub const R2_NOTMASKPEN: u32 = 8;
pub const R2_MASKPEN: u32 = 9;
pub const R2_NOTXORPEN: u32 = 10;
pub const R2_NOP: u32 = 11;
pub const R2_MERGENOTPEN: u32 = 12;
pub const R2_COPYPEN: u32 = 13;
pub const R2_MERGEPENNOT: u32 = 14;
pub const R2_MERGEPEN: u32 = 15;
pub const R2_WHITE: u32 = 16;
pub const R2_LAST: u32 = 16;
pub const GDI_ERROR: u32 = 4294967295;
pub const ERROR: u32 = 0;
pub const NULLREGION: u32 = 1;
pub const SIMPLEREGION: u32 = 2;
pub const COMPLEXREGION: u32 = 3;
pub const RGN_ERROR: u32 = 0;
pub const RGN_AND: u32 = 1;
pub const RGN_OR: u32 = 2;
pub const RGN_XOR: u32 = 3;
pub const RGN_DIFF: u32 = 4;
pub const RGN_COPY: u32 = 5;
pub const RGN_MIN: u32 = 1;
pub const RGN_MAX: u32 = 5;
pub const BLACKONWHITE: u32 = 1;
pub const WHITEONBLACK: u32 = 2;
pub const COLORONCOLOR: u32 = 3;
pub const HALFTONE: u32 = 4;
pub const MAXSTRETCHBLTMODE: u32 = 4;
pub const STRETCH_ANDSCANS: u32 = 1;
pub const STRETCH_ORSCANS: u32 = 2;
pub const STRETCH_DELETESCANS: u32 = 3;
pub const STRETCH_HALFTONE: u32 = 4;
pub const ALTERNATE: u32 = 1;
pub const WINDING: u32 = 2;
pub const POLYFILL_LAST: u32 = 2;
pub const LAYOUT_RTL: u32 = 1;
pub const LAYOUT_BTT: u32 = 2;
pub const LAYOUT_VBH: u32 = 4;
pub const LAYOUT_ORIENTATIONMASK: u32 = 7;
pub const LAYOUT_BITMAPORIENTATIONPRESERVED: u32 = 8;
pub const TA_NOUPDATECP: u32 = 0;
pub const TA_UPDATECP: u32 = 1;
pub const TA_LEFT: u32 = 0;
pub const TA_RIGHT: u32 = 2;
pub const TA_CENTER: u32 = 6;
pub const TA_TOP: u32 = 0;
pub const TA_BOTTOM: u32 = 8;
pub const TA_BASELINE: u32 = 24;
pub const TA_RTLREADING: u32 = 256;
pub const TA_MASK: u32 = 287;
pub const VTA_BASELINE: u32 = 24;
pub const VTA_LEFT: u32 = 8;
pub const VTA_RIGHT: u32 = 0;
pub const VTA_CENTER: u32 = 6;
pub const VTA_BOTTOM: u32 = 2;
pub const VTA_TOP: u32 = 0;
pub const ETO_OPAQUE: u32 = 2;
pub const ETO_CLIPPED: u32 = 4;
pub const ETO_GLYPH_INDEX: u32 = 16;
pub const ETO_RTLREADING: u32 = 128;
pub const ETO_NUMERICSLOCAL: u32 = 1024;
pub const ETO_NUMERICSLATIN: u32 = 2048;
pub const ETO_IGNORELANGUAGE: u32 = 4096;
pub const ETO_PDY: u32 = 8192;
pub const ETO_REVERSE_INDEX_MAP: u32 = 65536;
pub const ASPECT_FILTERING: u32 = 1;
pub const DCB_RESET: u32 = 1;
pub const DCB_ACCUMULATE: u32 = 2;
pub const DCB_DIRTY: u32 = 2;
pub const DCB_SET: u32 = 3;
pub const DCB_ENABLE: u32 = 4;
pub const DCB_DISABLE: u32 = 8;
pub const META_SETBKCOLOR: u32 = 513;
pub const META_SETBKMODE: u32 = 258;
pub const META_SETMAPMODE: u32 = 259;
pub const META_SETROP2: u32 = 260;
pub const META_SETRELABS: u32 = 261;
pub const META_SETPOLYFILLMODE: u32 = 262;
pub const META_SETSTRETCHBLTMODE: u32 = 263;
pub const META_SETTEXTCHAREXTRA: u32 = 264;
pub const META_SETTEXTCOLOR: u32 = 521;
pub const META_SETTEXTJUSTIFICATION: u32 = 522;
pub const META_SETWINDOWORG: u32 = 523;
pub const META_SETWINDOWEXT: u32 = 524;
pub const META_SETVIEWPORTORG: u32 = 525;
pub const META_SETVIEWPORTEXT: u32 = 526;
pub const META_OFFSETWINDOWORG: u32 = 527;
pub const META_SCALEWINDOWEXT: u32 = 1040;
pub const META_OFFSETVIEWPORTORG: u32 = 529;
pub const META_SCALEVIEWPORTEXT: u32 = 1042;
pub const META_LINETO: u32 = 531;
pub const META_MOVETO: u32 = 532;
pub const META_EXCLUDECLIPRECT: u32 = 1045;
pub const META_INTERSECTCLIPRECT: u32 = 1046;
pub const META_ARC: u32 = 2071;
pub const META_ELLIPSE: u32 = 1048;
pub const META_FLOODFILL: u32 = 1049;
pub const META_PIE: u32 = 2074;
pub const META_RECTANGLE: u32 = 1051;
pub const META_ROUNDRECT: u32 = 1564;
pub const META_PATBLT: u32 = 1565;
pub const META_SAVEDC: u32 = 30;
pub const META_SETPIXEL: u32 = 1055;
pub const META_OFFSETCLIPRGN: u32 = 544;
pub const META_TEXTOUT: u32 = 1313;
pub const META_BITBLT: u32 = 2338;
pub const META_STRETCHBLT: u32 = 2851;
pub const META_POLYGON: u32 = 804;
pub const META_POLYLINE: u32 = 805;
pub const META_ESCAPE: u32 = 1574;
pub const META_RESTOREDC: u32 = 295;
pub const META_FILLREGION: u32 = 552;
pub const META_FRAMEREGION: u32 = 1065;
pub const META_INVERTREGION: u32 = 298;
pub const META_PAINTREGION: u32 = 299;
pub const META_SELECTCLIPREGION: u32 = 300;
pub const META_SELECTOBJECT: u32 = 301;
pub const META_SETTEXTALIGN: u32 = 302;
pub const META_CHORD: u32 = 2096;
pub const META_SETMAPPERFLAGS: u32 = 561;
pub const META_EXTTEXTOUT: u32 = 2610;
pub const META_SETDIBTODEV: u32 = 3379;
pub const META_SELECTPALETTE: u32 = 564;
pub const META_REALIZEPALETTE: u32 = 53;
pub const META_ANIMATEPALETTE: u32 = 1078;
pub const META_SETPALENTRIES: u32 = 55;
pub const META_POLYPOLYGON: u32 = 1336;
pub const META_RESIZEPALETTE: u32 = 313;
pub const META_DIBBITBLT: u32 = 2368;
pub const META_DIBSTRETCHBLT: u32 = 2881;
pub const META_DIBCREATEPATTERNBRUSH: u32 = 322;
pub const META_STRETCHDIB: u32 = 3907;
pub const META_EXTFLOODFILL: u32 = 1352;
pub const META_SETLAYOUT: u32 = 329;
pub const META_DELETEOBJECT: u32 = 496;
pub const META_CREATEPALETTE: u32 = 247;
pub const META_CREATEPATTERNBRUSH: u32 = 505;
pub const META_CREATEPENINDIRECT: u32 = 762;
pub const META_CREATEFONTINDIRECT: u32 = 763;
pub const META_CREATEBRUSHINDIRECT: u32 = 764;
pub const META_CREATEREGION: u32 = 1791;
pub const NEWFRAME: u32 = 1;
pub const ABORTDOC: u32 = 2;
pub const NEXTBAND: u32 = 3;
pub const SETCOLORTABLE: u32 = 4;
pub const GETCOLORTABLE: u32 = 5;
pub const FLUSHOUTPUT: u32 = 6;
pub const DRAFTMODE: u32 = 7;
pub const QUERYESCSUPPORT: u32 = 8;
pub const SETABORTPROC: u32 = 9;
pub const STARTDOC: u32 = 10;
pub const ENDDOC: u32 = 11;
pub const GETPHYSPAGESIZE: u32 = 12;
pub const GETPRINTINGOFFSET: u32 = 13;
pub const GETSCALINGFACTOR: u32 = 14;
pub const MFCOMMENT: u32 = 15;
pub const GETPENWIDTH: u32 = 16;
pub const SETCOPYCOUNT: u32 = 17;
pub const SELECTPAPERSOURCE: u32 = 18;
pub const DEVICEDATA: u32 = 19;
pub const PASSTHROUGH: u32 = 19;
pub const GETTECHNOLGY: u32 = 20;
pub const GETTECHNOLOGY: u32 = 20;
pub const SETLINECAP: u32 = 21;
pub const SETLINEJOIN: u32 = 22;
pub const SETMITERLIMIT: u32 = 23;
pub const BANDINFO: u32 = 24;
pub const DRAWPATTERNRECT: u32 = 25;
pub const GETVECTORPENSIZE: u32 = 26;
pub const GETVECTORBRUSHSIZE: u32 = 27;
pub const ENABLEDUPLEX: u32 = 28;
pub const GETSETPAPERBINS: u32 = 29;
pub const GETSETPRINTORIENT: u32 = 30;
pub const ENUMPAPERBINS: u32 = 31;
pub const SETDIBSCALING: u32 = 32;
pub const EPSPRINTING: u32 = 33;
pub const ENUMPAPERMETRICS: u32 = 34;
pub const GETSETPAPERMETRICS: u32 = 35;
pub const POSTSCRIPT_DATA: u32 = 37;
pub const POSTSCRIPT_IGNORE: u32 = 38;
pub const MOUSETRAILS: u32 = 39;
pub const GETDEVICEUNITS: u32 = 42;
pub const GETEXTENDEDTEXTMETRICS: u32 = 256;
pub const GETEXTENTTABLE: u32 = 257;
pub const GETPAIRKERNTABLE: u32 = 258;
pub const GETTRACKKERNTABLE: u32 = 259;
pub const EXTTEXTOUT: u32 = 512;
pub const GETFACENAME: u32 = 513;
pub const DOWNLOADFACE: u32 = 514;
pub const ENABLERELATIVEWIDTHS: u32 = 768;
pub const ENABLEPAIRKERNING: u32 = 769;
pub const SETKERNTRACK: u32 = 770;
pub const SETALLJUSTVALUES: u32 = 771;
pub const SETCHARSET: u32 = 772;
pub const STRETCHBLT: u32 = 2048;
pub const METAFILE_DRIVER: u32 = 2049;
pub const GETSETSCREENPARAMS: u32 = 3072;
pub const QUERYDIBSUPPORT: u32 = 3073;
pub const BEGIN_PATH: u32 = 4096;
pub const CLIP_TO_PATH: u32 = 4097;
pub const END_PATH: u32 = 4098;
pub const EXT_DEVICE_CAPS: u32 = 4099;
pub const RESTORE_CTM: u32 = 4100;
pub const SAVE_CTM: u32 = 4101;
pub const SET_ARC_DIRECTION: u32 = 4102;
pub const SET_BACKGROUND_COLOR: u32 = 4103;
pub const SET_POLY_MODE: u32 = 4104;
pub const SET_SCREEN_ANGLE: u32 = 4105;
pub const SET_SPREAD: u32 = 4106;
pub const TRANSFORM_CTM: u32 = 4107;
pub const SET_CLIP_BOX: u32 = 4108;
pub const SET_BOUNDS: u32 = 4109;
pub const SET_MIRROR_MODE: u32 = 4110;
pub const OPENCHANNEL: u32 = 4110;
pub const DOWNLOADHEADER: u32 = 4111;
pub const CLOSECHANNEL: u32 = 4112;
pub const POSTSCRIPT_PASSTHROUGH: u32 = 4115;
pub const ENCAPSULATED_POSTSCRIPT: u32 = 4116;
pub const POSTSCRIPT_IDENTIFY: u32 = 4117;
pub const POSTSCRIPT_INJECTION: u32 = 4118;
pub const CHECKJPEGFORMAT: u32 = 4119;
pub const CHECKPNGFORMAT: u32 = 4120;
pub const GET_PS_FEATURESETTING: u32 = 4121;
pub const GDIPLUS_TS_QUERYVER: u32 = 4122;
pub const GDIPLUS_TS_RECORD: u32 = 4123;
pub const MILCORE_TS_QUERYVER_RESULT_FALSE: u32 = 0;
pub const MILCORE_TS_QUERYVER_RESULT_TRUE: u32 = 2147483647;
pub const SPCLPASSTHROUGH2: u32 = 4568;
pub const PSIDENT_GDICENTRIC: u32 = 0;
pub const PSIDENT_PSCENTRIC: u32 = 1;
pub const PSINJECT_BEGINSTREAM: u32 = 1;
pub const PSINJECT_PSADOBE: u32 = 2;
pub const PSINJECT_PAGESATEND: u32 = 3;
pub const PSINJECT_PAGES: u32 = 4;
pub const PSINJECT_DOCNEEDEDRES: u32 = 5;
pub const PSINJECT_DOCSUPPLIEDRES: u32 = 6;
pub const PSINJECT_PAGEORDER: u32 = 7;
pub const PSINJECT_ORIENTATION: u32 = 8;
pub const PSINJECT_BOUNDINGBOX: u32 = 9;
pub const PSINJECT_DOCUMENTPROCESSCOLORS: u32 = 10;
pub const PSINJECT_COMMENTS: u32 = 11;
pub const PSINJECT_BEGINDEFAULTS: u32 = 12;
pub const PSINJECT_ENDDEFAULTS: u32 = 13;
pub const PSINJECT_BEGINPROLOG: u32 = 14;
pub const PSINJECT_ENDPROLOG: u32 = 15;
pub const PSINJECT_BEGINSETUP: u32 = 16;
pub const PSINJECT_ENDSETUP: u32 = 17;
pub const PSINJECT_TRAILER: u32 = 18;
pub const PSINJECT_EOF: u32 = 19;
pub const PSINJECT_ENDSTREAM: u32 = 20;
pub const PSINJECT_DOCUMENTPROCESSCOLORSATEND: u32 = 21;
pub const PSINJECT_PAGENUMBER: u32 = 100;
pub const PSINJECT_BEGINPAGESETUP: u32 = 101;
pub const PSINJECT_ENDPAGESETUP: u32 = 102;
pub const PSINJECT_PAGETRAILER: u32 = 103;
pub const PSINJECT_PLATECOLOR: u32 = 104;
pub const PSINJECT_SHOWPAGE: u32 = 105;
pub const PSINJECT_PAGEBBOX: u32 = 106;
pub const PSINJECT_ENDPAGECOMMENTS: u32 = 107;
pub const PSINJECT_VMSAVE: u32 = 200;
pub const PSINJECT_VMRESTORE: u32 = 201;
pub const PSINJECT_DLFONT: u32 = 3722304989;
pub const FEATURESETTING_NUP: u32 = 0;
pub const FEATURESETTING_OUTPUT: u32 = 1;
pub const FEATURESETTING_PSLEVEL: u32 = 2;
pub const FEATURESETTING_CUSTPAPER: u32 = 3;
pub const FEATURESETTING_MIRROR: u32 = 4;
pub const FEATURESETTING_NEGATIVE: u32 = 5;
pub const FEATURESETTING_PROTOCOL: u32 = 6;
pub const FEATURESETTING_PRIVATE_BEGIN: u32 = 4096;
pub const FEATURESETTING_PRIVATE_END: u32 = 8191;
pub const PSPROTOCOL_ASCII: u32 = 0;
pub const PSPROTOCOL_BCP: u32 = 1;
pub const PSPROTOCOL_TBCP: u32 = 2;
pub const PSPROTOCOL_BINARY: u32 = 3;
pub const QDI_SETDIBITS: u32 = 1;
pub const QDI_GETDIBITS: u32 = 2;
pub const QDI_DIBTOSCREEN: u32 = 4;
pub const QDI_STRETCHDIB: u32 = 8;
pub const SP_NOTREPORTED: u32 = 16384;
pub const SP_ERROR: i32 = -1;
pub const SP_APPABORT: i32 = -2;
pub const SP_USERABORT: i32 = -3;
pub const SP_OUTOFDISK: i32 = -4;
pub const SP_OUTOFMEMORY: i32 = -5;
pub const PR_JOBSTATUS: u32 = 0;
pub const OBJ_PEN: u32 = 1;
pub const OBJ_BRUSH: u32 = 2;
pub const OBJ_DC: u32 = 3;
pub const OBJ_METADC: u32 = 4;
pub const OBJ_PAL: u32 = 5;
pub const OBJ_FONT: u32 = 6;
pub const OBJ_BITMAP: u32 = 7;
pub const OBJ_REGION: u32 = 8;
pub const OBJ_METAFILE: u32 = 9;
pub const OBJ_MEMDC: u32 = 10;
pub const OBJ_EXTPEN: u32 = 11;
pub const OBJ_ENHMETADC: u32 = 12;
pub const OBJ_ENHMETAFILE: u32 = 13;
pub const OBJ_COLORSPACE: u32 = 14;
pub const GDI_OBJ_LAST: u32 = 14;
pub const MWT_IDENTITY: u32 = 1;
pub const MWT_LEFTMULTIPLY: u32 = 2;
pub const MWT_RIGHTMULTIPLY: u32 = 3;
pub const MWT_MIN: u32 = 1;
pub const MWT_MAX: u32 = 3;
pub const CS_ENABLE: u32 = 1;
pub const CS_DISABLE: u32 = 2;
pub const CS_DELETE_TRANSFORM: u32 = 3;
pub const LCS_CALIBRATED_RGB: u32 = 0;
pub const LCS_GM_BUSINESS: u32 = 1;
pub const LCS_GM_GRAPHICS: u32 = 2;
pub const LCS_GM_IMAGES: u32 = 4;
pub const LCS_GM_ABS_COLORIMETRIC: u32 = 8;
pub const CM_OUT_OF_GAMUT: u32 = 255;
pub const CM_IN_GAMUT: u32 = 0;
pub const ICM_ADDPROFILE: u32 = 1;
pub const ICM_DELETEPROFILE: u32 = 2;
pub const ICM_QUERYPROFILE: u32 = 3;
pub const ICM_SETDEFAULTPROFILE: u32 = 4;
pub const ICM_REGISTERICMATCHER: u32 = 5;
pub const ICM_UNREGISTERICMATCHER: u32 = 6;
pub const ICM_QUERYMATCH: u32 = 7;
pub const BI_RGB: u32 = 0;
pub const BI_RLE8: u32 = 1;
pub const BI_RLE4: u32 = 2;
pub const BI_BITFIELDS: u32 = 3;
pub const BI_JPEG: u32 = 4;
pub const BI_PNG: u32 = 5;
pub const TCI_SRCCHARSET: u32 = 1;
pub const TCI_SRCCODEPAGE: u32 = 2;
pub const TCI_SRCFONTSIG: u32 = 3;
pub const TCI_SRCLOCALE: u32 = 4096;
pub const TMPF_FIXED_PITCH: u32 = 1;
pub const TMPF_VECTOR: u32 = 2;
pub const TMPF_DEVICE: u32 = 8;
pub const TMPF_TRUETYPE: u32 = 4;
pub const NTM_REGULAR: u32 = 64;
pub const NTM_BOLD: u32 = 32;
pub const NTM_ITALIC: u32 = 1;
pub const NTM_NONNEGATIVE_AC: u32 = 65536;
pub const NTM_PS_OPENTYPE: u32 = 131072;
pub const NTM_TT_OPENTYPE: u32 = 262144;
pub const NTM_MULTIPLEMASTER: u32 = 524288;
pub const NTM_TYPE1: u32 = 1048576;
pub const NTM_DSIG: u32 = 2097152;
pub const LF_FACESIZE: u32 = 32;
pub const LF_FULLFACESIZE: u32 = 64;
pub const OUT_DEFAULT_PRECIS: u32 = 0;
pub const OUT_STRING_PRECIS: u32 = 1;
pub const OUT_CHARACTER_PRECIS: u32 = 2;
pub const OUT_STROKE_PRECIS: u32 = 3;
pub const OUT_TT_PRECIS: u32 = 4;
pub const OUT_DEVICE_PRECIS: u32 = 5;
pub const OUT_RASTER_PRECIS: u32 = 6;
pub const OUT_TT_ONLY_PRECIS: u32 = 7;
pub const OUT_OUTLINE_PRECIS: u32 = 8;
pub const OUT_SCREEN_OUTLINE_PRECIS: u32 = 9;
pub const OUT_PS_ONLY_PRECIS: u32 = 10;
pub const CLIP_DEFAULT_PRECIS: u32 = 0;
pub const CLIP_CHARACTER_PRECIS: u32 = 1;
pub const CLIP_STROKE_PRECIS: u32 = 2;
pub const CLIP_MASK: u32 = 15;
pub const CLIP_LH_ANGLES: u32 = 16;
pub const CLIP_TT_ALWAYS: u32 = 32;
pub const CLIP_DFA_DISABLE: u32 = 64;
pub const CLIP_EMBEDDED: u32 = 128;
pub const DEFAULT_QUALITY: u32 = 0;
pub const DRAFT_QUALITY: u32 = 1;
pub const PROOF_QUALITY: u32 = 2;
pub const NONANTIALIASED_QUALITY: u32 = 3;
pub const ANTIALIASED_QUALITY: u32 = 4;
pub const CLEARTYPE_QUALITY: u32 = 5;
pub const CLEARTYPE_NATURAL_QUALITY: u32 = 6;
pub const DEFAULT_PITCH: u32 = 0;
pub const FIXED_PITCH: u32 = 1;
pub const VARIABLE_PITCH: u32 = 2;
pub const MONO_FONT: u32 = 8;
pub const ANSI_CHARSET: u32 = 0;
pub const DEFAULT_CHARSET: u32 = 1;
pub const SYMBOL_CHARSET: u32 = 2;
pub const SHIFTJIS_CHARSET: u32 = 128;
pub const HANGEUL_CHARSET: u32 = 129;
pub const HANGUL_CHARSET: u32 = 129;
pub const GB2312_CHARSET: u32 = 134;
pub const CHINESEBIG5_CHARSET: u32 = 136;
pub const OEM_CHARSET: u32 = 255;
pub const JOHAB_CHARSET: u32 = 130;
pub const HEBREW_CHARSET: u32 = 177;
pub const ARABIC_CHARSET: u32 = 178;
pub const GREEK_CHARSET: u32 = 161;
pub const TURKISH_CHARSET: u32 = 162;
pub const VIETNAMESE_CHARSET: u32 = 163;
pub const THAI_CHARSET: u32 = 222;
pub const EASTEUROPE_CHARSET: u32 = 238;
pub const RUSSIAN_CHARSET: u32 = 204;
pub const MAC_CHARSET: u32 = 77;
pub const BALTIC_CHARSET: u32 = 186;
pub const FS_LATIN1: u32 = 1;
pub const FS_LATIN2: u32 = 2;
pub const FS_CYRILLIC: u32 = 4;
pub const FS_GREEK: u32 = 8;
pub const FS_TURKISH: u32 = 16;
pub const FS_HEBREW: u32 = 32;
pub const FS_ARABIC: u32 = 64;
pub const FS_BALTIC: u32 = 128;
pub const FS_VIETNAMESE: u32 = 256;
pub const FS_THAI: u32 = 65536;
pub const FS_JISJAPAN: u32 = 131072;
pub const FS_CHINESESIMP: u32 = 262144;
pub const FS_WANSUNG: u32 = 524288;
pub const FS_CHINESETRAD: u32 = 1048576;
pub const FS_JOHAB: u32 = 2097152;
pub const FS_SYMBOL: u32 = 2147483648;
pub const FF_DONTCARE: u32 = 0;
pub const FF_ROMAN: u32 = 16;
pub const FF_SWISS: u32 = 32;
pub const FF_MODERN: u32 = 48;
pub const FF_SCRIPT: u32 = 64;
pub const FF_DECORATIVE: u32 = 80;
pub const FW_DONTCARE: u32 = 0;
pub const FW_THIN: u32 = 100;
pub const FW_EXTRALIGHT: u32 = 200;
pub const FW_LIGHT: u32 = 300;
pub const FW_NORMAL: u32 = 400;
pub const FW_MEDIUM: u32 = 500;
pub const FW_SEMIBOLD: u32 = 600;
pub const FW_BOLD: u32 = 700;
pub const FW_EXTRABOLD: u32 = 800;
pub const FW_HEAVY: u32 = 900;
pub const FW_ULTRALIGHT: u32 = 200;
pub const FW_REGULAR: u32 = 400;
pub const FW_DEMIBOLD: u32 = 600;
pub const FW_ULTRABOLD: u32 = 800;
pub const FW_BLACK: u32 = 900;
pub const PANOSE_COUNT: u32 = 10;
pub const PAN_FAMILYTYPE_INDEX: u32 = 0;
pub const PAN_SERIFSTYLE_INDEX: u32 = 1;
pub const PAN_WEIGHT_INDEX: u32 = 2;
pub const PAN_PROPORTION_INDEX: u32 = 3;
pub const PAN_CONTRAST_INDEX: u32 = 4;
pub const PAN_STROKEVARIATION_INDEX: u32 = 5;
pub const PAN_ARMSTYLE_INDEX: u32 = 6;
pub const PAN_LETTERFORM_INDEX: u32 = 7;
pub const PAN_MIDLINE_INDEX: u32 = 8;
pub const PAN_XHEIGHT_INDEX: u32 = 9;
pub const PAN_CULTURE_LATIN: u32 = 0;
pub const PAN_ANY: u32 = 0;
pub const PAN_NO_FIT: u32 = 1;
pub const PAN_FAMILY_TEXT_DISPLAY: u32 = 2;
pub const PAN_FAMILY_SCRIPT: u32 = 3;
pub const PAN_FAMILY_DECORATIVE: u32 = 4;
pub const PAN_FAMILY_PICTORIAL: u32 = 5;
pub const PAN_SERIF_COVE: u32 = 2;
pub const PAN_SERIF_OBTUSE_COVE: u32 = 3;
pub const PAN_SERIF_SQUARE_COVE: u32 = 4;
pub const PAN_SERIF_OBTUSE_SQUARE_COVE: u32 = 5;
pub const PAN_SERIF_SQUARE: u32 = 6;
pub const PAN_SERIF_THIN: u32 = 7;
pub const PAN_SERIF_BONE: u32 = 8;
pub const PAN_SERIF_EXAGGERATED: u32 = 9;
pub const PAN_SERIF_TRIANGLE: u32 = 10;
pub const PAN_SERIF_NORMAL_SANS: u32 = 11;
pub const PAN_SERIF_OBTUSE_SANS: u32 = 12;
pub const PAN_SERIF_PERP_SANS: u32 = 13;
pub const PAN_SERIF_FLARED: u32 = 14;
pub const PAN_SERIF_ROUNDED: u32 = 15;
pub const PAN_WEIGHT_VERY_LIGHT: u32 = 2;
pub const PAN_WEIGHT_LIGHT: u32 = 3;
pub const PAN_WEIGHT_THIN: u32 = 4;
pub const PAN_WEIGHT_BOOK: u32 = 5;
pub const PAN_WEIGHT_MEDIUM: u32 = 6;
pub const PAN_WEIGHT_DEMI: u32 = 7;
pub const PAN_WEIGHT_BOLD: u32 = 8;
pub const PAN_WEIGHT_HEAVY: u32 = 9;
pub const PAN_WEIGHT_BLACK: u32 = 10;
pub const PAN_WEIGHT_NORD: u32 = 11;
pub const PAN_PROP_OLD_STYLE: u32 = 2;
pub const PAN_PROP_MODERN: u32 = 3;
pub const PAN_PROP_EVEN_WIDTH: u32 = 4;
pub const PAN_PROP_EXPANDED: u32 = 5;
pub const PAN_PROP_CONDENSED: u32 = 6;
pub const PAN_PROP_VERY_EXPANDED: u32 = 7;
pub const PAN_PROP_VERY_CONDENSED: u32 = 8;
pub const PAN_PROP_MONOSPACED: u32 = 9;
pub const PAN_CONTRAST_NONE: u32 = 2;
pub const PAN_CONTRAST_VERY_LOW: u32 = 3;
pub const PAN_CONTRAST_LOW: u32 = 4;
pub const PAN_CONTRAST_MEDIUM_LOW: u32 = 5;
pub const PAN_CONTRAST_MEDIUM: u32 = 6;
pub const PAN_CONTRAST_MEDIUM_HIGH: u32 = 7;
pub const PAN_CONTRAST_HIGH: u32 = 8;
pub const PAN_CONTRAST_VERY_HIGH: u32 = 9;
pub const PAN_STROKE_GRADUAL_DIAG: u32 = 2;
pub const PAN_STROKE_GRADUAL_TRAN: u32 = 3;
pub const PAN_STROKE_GRADUAL_VERT: u32 = 4;
pub const PAN_STROKE_GRADUAL_HORZ: u32 = 5;
pub const PAN_STROKE_RAPID_VERT: u32 = 6;
pub const PAN_STROKE_RAPID_HORZ: u32 = 7;
pub const PAN_STROKE_INSTANT_VERT: u32 = 8;
pub const PAN_STRAIGHT_ARMS_HORZ: u32 = 2;
pub const PAN_STRAIGHT_ARMS_WEDGE: u32 = 3;
pub const PAN_STRAIGHT_ARMS_VERT: u32 = 4;
pub const PAN_STRAIGHT_ARMS_SINGLE_SERIF: u32 = 5;
pub const PAN_STRAIGHT_ARMS_DOUBLE_SERIF: u32 = 6;
pub const PAN_BENT_ARMS_HORZ: u32 = 7;
pub const PAN_BENT_ARMS_WEDGE: u32 = 8;
pub const PAN_BENT_ARMS_VERT: u32 = 9;
pub const PAN_BENT_ARMS_SINGLE_SERIF: u32 = 10;
pub const PAN_BENT_ARMS_DOUBLE_SERIF: u32 = 11;
pub const PAN_LETT_NORMAL_CONTACT: u32 = 2;
pub const PAN_LETT_NORMAL_WEIGHTED: u32 = 3;
pub const PAN_LETT_NORMAL_BOXED: u32 = 4;
pub const PAN_LETT_NORMAL_FLATTENED: u32 = 5;
pub const PAN_LETT_NORMAL_ROUNDED: u32 = 6;
pub const PAN_LETT_NORMAL_OFF_CENTER: u32 = 7;
pub const PAN_LETT_NORMAL_SQUARE: u32 = 8;
pub const PAN_LETT_OBLIQUE_CONTACT: u32 = 9;
pub const PAN_LETT_OBLIQUE_WEIGHTED: u32 = 10;
pub const PAN_LETT_OBLIQUE_BOXED: u32 = 11;
pub const PAN_LETT_OBLIQUE_FLATTENED: u32 = 12;
pub const PAN_LETT_OBLIQUE_ROUNDED: u32 = 13;
pub const PAN_LETT_OBLIQUE_OFF_CENTER: u32 = 14;
pub const PAN_LETT_OBLIQUE_SQUARE: u32 = 15;
pub const PAN_MIDLINE_STANDARD_TRIMMED: u32 = 2;
pub const PAN_MIDLINE_STANDARD_POINTED: u32 = 3;
pub const PAN_MIDLINE_STANDARD_SERIFED: u32 = 4;
pub const PAN_MIDLINE_HIGH_TRIMMED: u32 = 5;
pub const PAN_MIDLINE_HIGH_POINTED: u32 = 6;
pub const PAN_MIDLINE_HIGH_SERIFED: u32 = 7;
pub const PAN_MIDLINE_CONSTANT_TRIMMED: u32 = 8;
pub const PAN_MIDLINE_CONSTANT_POINTED: u32 = 9;
pub const PAN_MIDLINE_CONSTANT_SERIFED: u32 = 10;
pub const PAN_MIDLINE_LOW_TRIMMED: u32 = 11;
pub const PAN_MIDLINE_LOW_POINTED: u32 = 12;
pub const PAN_MIDLINE_LOW_SERIFED: u32 = 13;
pub const PAN_XHEIGHT_CONSTANT_SMALL: u32 = 2;
pub const PAN_XHEIGHT_CONSTANT_STD: u32 = 3;
pub const PAN_XHEIGHT_CONSTANT_LARGE: u32 = 4;
pub const PAN_XHEIGHT_DUCKING_SMALL: u32 = 5;
pub const PAN_XHEIGHT_DUCKING_STD: u32 = 6;
pub const PAN_XHEIGHT_DUCKING_LARGE: u32 = 7;
pub const ELF_VENDOR_SIZE: u32 = 4;
pub const ELF_VERSION: u32 = 0;
pub const ELF_CULTURE_LATIN: u32 = 0;
pub const RASTER_FONTTYPE: u32 = 1;
pub const DEVICE_FONTTYPE: u32 = 2;
pub const TRUETYPE_FONTTYPE: u32 = 4;
pub const PC_RESERVED: u32 = 1;
pub const PC_EXPLICIT: u32 = 2;
pub const PC_NOCOLLAPSE: u32 = 4;
pub const TRANSPARENT: u32 = 1;
pub const OPAQUE: u32 = 2;
pub const BKMODE_LAST: u32 = 2;
pub const GM_COMPATIBLE: u32 = 1;
pub const GM_ADVANCED: u32 = 2;
pub const GM_LAST: u32 = 2;
pub const PT_CLOSEFIGURE: u32 = 1;
pub const PT_LINETO: u32 = 2;
pub const PT_BEZIERTO: u32 = 4;
pub const PT_MOVETO: u32 = 6;
pub const MM_TEXT: u32 = 1;
pub const MM_LOMETRIC: u32 = 2;
pub const MM_HIMETRIC: u32 = 3;
pub const MM_LOENGLISH: u32 = 4;
pub const MM_HIENGLISH: u32 = 5;
pub const MM_TWIPS: u32 = 6;
pub const MM_ISOTROPIC: u32 = 7;
pub const MM_ANISOTROPIC: u32 = 8;
pub const MM_MIN: u32 = 1;
pub const MM_MAX: u32 = 8;
pub const MM_MAX_FIXEDSCALE: u32 = 6;
pub const ABSOLUTE: u32 = 1;
pub const RELATIVE: u32 = 2;
pub const WHITE_BRUSH: u32 = 0;
pub const LTGRAY_BRUSH: u32 = 1;
pub const GRAY_BRUSH: u32 = 2;
pub const DKGRAY_BRUSH: u32 = 3;
pub const BLACK_BRUSH: u32 = 4;
pub const NULL_BRUSH: u32 = 5;
pub const HOLLOW_BRUSH: u32 = 5;
pub const WHITE_PEN: u32 = 6;
pub const BLACK_PEN: u32 = 7;
pub const NULL_PEN: u32 = 8;
pub const OEM_FIXED_FONT: u32 = 10;
pub const ANSI_FIXED_FONT: u32 = 11;
pub const ANSI_VAR_FONT: u32 = 12;
pub const SYSTEM_FONT: u32 = 13;
pub const DEVICE_DEFAULT_FONT: u32 = 14;
pub const DEFAULT_PALETTE: u32 = 15;
pub const SYSTEM_FIXED_FONT: u32 = 16;
pub const DEFAULT_GUI_FONT: u32 = 17;
pub const DC_BRUSH: u32 = 18;
pub const DC_PEN: u32 = 19;
pub const STOCK_LAST: u32 = 19;
pub const CLR_INVALID: u32 = 4294967295;
pub const BS_SOLID: u32 = 0;
pub const BS_NULL: u32 = 1;
pub const BS_HOLLOW: u32 = 1;
pub const BS_HATCHED: u32 = 2;
pub const BS_PATTERN: u32 = 3;
pub const BS_INDEXED: u32 = 4;
pub const BS_DIBPATTERN: u32 = 5;
pub const BS_DIBPATTERNPT: u32 = 6;
pub const BS_PATTERN8X8: u32 = 7;
pub const BS_DIBPATTERN8X8: u32 = 8;
pub const BS_MONOPATTERN: u32 = 9;
pub const HS_HORIZONTAL: u32 = 0;
pub const HS_VERTICAL: u32 = 1;
pub const HS_FDIAGONAL: u32 = 2;
pub const HS_BDIAGONAL: u32 = 3;
pub const HS_CROSS: u32 = 4;
pub const HS_DIAGCROSS: u32 = 5;
pub const HS_API_MAX: u32 = 12;
pub const PS_SOLID: u32 = 0;
pub const PS_DASH: u32 = 1;
pub const PS_DOT: u32 = 2;
pub const PS_DASHDOT: u32 = 3;
pub const PS_DASHDOTDOT: u32 = 4;
pub const PS_NULL: u32 = 5;
pub const PS_INSIDEFRAME: u32 = 6;
pub const PS_USERSTYLE: u32 = 7;
pub const PS_ALTERNATE: u32 = 8;
pub const PS_STYLE_MASK: u32 = 15;
pub const PS_ENDCAP_ROUND: u32 = 0;
pub const PS_ENDCAP_SQUARE: u32 = 256;
pub const PS_ENDCAP_FLAT: u32 = 512;
pub const PS_ENDCAP_MASK: u32 = 3840;
pub const PS_JOIN_ROUND: u32 = 0;
pub const PS_JOIN_BEVEL: u32 = 4096;
pub const PS_JOIN_MITER: u32 = 8192;
pub const PS_JOIN_MASK: u32 = 61440;
pub const PS_COSMETIC: u32 = 0;
pub const PS_GEOMETRIC: u32 = 65536;
pub const PS_TYPE_MASK: u32 = 983040;
pub const AD_COUNTERCLOCKWISE: u32 = 1;
pub const AD_CLOCKWISE: u32 = 2;
pub const DRIVERVERSION: u32 = 0;
pub const TECHNOLOGY: u32 = 2;
pub const HORZSIZE: u32 = 4;
pub const VERTSIZE: u32 = 6;
pub const HORZRES: u32 = 8;
pub const VERTRES: u32 = 10;
pub const BITSPIXEL: u32 = 12;
pub const PLANES: u32 = 14;
pub const NUMBRUSHES: u32 = 16;
pub const NUMPENS: u32 = 18;
pub const NUMMARKERS: u32 = 20;
pub const NUMFONTS: u32 = 22;
pub const NUMCOLORS: u32 = 24;
pub const PDEVICESIZE: u32 = 26;
pub const CURVECAPS: u32 = 28;
pub const LINECAPS: u32 = 30;
pub const POLYGONALCAPS: u32 = 32;
pub const TEXTCAPS: u32 = 34;
pub const CLIPCAPS: u32 = 36;
pub const RASTERCAPS: u32 = 38;
pub const ASPECTX: u32 = 40;
pub const ASPECTY: u32 = 42;
pub const ASPECTXY: u32 = 44;
pub const LOGPIXELSX: u32 = 88;
pub const LOGPIXELSY: u32 = 90;
pub const SIZEPALETTE: u32 = 104;
pub const NUMRESERVED: u32 = 106;
pub const COLORRES: u32 = 108;
pub const PHYSICALWIDTH: u32 = 110;
pub const PHYSICALHEIGHT: u32 = 111;
pub const PHYSICALOFFSETX: u32 = 112;
pub const PHYSICALOFFSETY: u32 = 113;
pub const SCALINGFACTORX: u32 = 114;
pub const SCALINGFACTORY: u32 = 115;
pub const VREFRESH: u32 = 116;
pub const DESKTOPVERTRES: u32 = 117;
pub const DESKTOPHORZRES: u32 = 118;
pub const BLTALIGNMENT: u32 = 119;
pub const SHADEBLENDCAPS: u32 = 120;
pub const COLORMGMTCAPS: u32 = 121;
pub const DT_PLOTTER: u32 = 0;
pub const DT_RASDISPLAY: u32 = 1;
pub const DT_RASPRINTER: u32 = 2;
pub const DT_RASCAMERA: u32 = 3;
pub const DT_CHARSTREAM: u32 = 4;
pub const DT_METAFILE: u32 = 5;
pub const DT_DISPFILE: u32 = 6;
pub const CC_NONE: u32 = 0;
pub const CC_CIRCLES: u32 = 1;
pub const CC_PIE: u32 = 2;
pub const CC_CHORD: u32 = 4;
pub const CC_ELLIPSES: u32 = 8;
pub const CC_WIDE: u32 = 16;
pub const CC_STYLED: u32 = 32;
pub const CC_WIDESTYLED: u32 = 64;
pub const CC_INTERIORS: u32 = 128;
pub const CC_ROUNDRECT: u32 = 256;
pub const LC_NONE: u32 = 0;
pub const LC_POLYLINE: u32 = 2;
pub const LC_MARKER: u32 = 4;
pub const LC_POLYMARKER: u32 = 8;
pub const LC_WIDE: u32 = 16;
pub const LC_STYLED: u32 = 32;
pub const LC_WIDESTYLED: u32 = 64;
pub const LC_INTERIORS: u32 = 128;
pub const PC_NONE: u32 = 0;
pub const PC_POLYGON: u32 = 1;
pub const PC_RECTANGLE: u32 = 2;
pub const PC_WINDPOLYGON: u32 = 4;
pub const PC_TRAPEZOID: u32 = 4;
pub const PC_SCANLINE: u32 = 8;
pub const PC_WIDE: u32 = 16;
pub const PC_STYLED: u32 = 32;
pub const PC_WIDESTYLED: u32 = 64;
pub const PC_INTERIORS: u32 = 128;
pub const PC_POLYPOLYGON: u32 = 256;
pub const PC_PATHS: u32 = 512;
pub const CP_NONE: u32 = 0;
pub const CP_RECTANGLE: u32 = 1;
pub const CP_REGION: u32 = 2;
pub const TC_OP_CHARACTER: u32 = 1;
pub const TC_OP_STROKE: u32 = 2;
pub const TC_CP_STROKE: u32 = 4;
pub const TC_CR_90: u32 = 8;
pub const TC_CR_ANY: u32 = 16;
pub const TC_SF_X_YINDEP: u32 = 32;
pub const TC_SA_DOUBLE: u32 = 64;
pub const TC_SA_INTEGER: u32 = 128;
pub const TC_SA_CONTIN: u32 = 256;
pub const TC_EA_DOUBLE: u32 = 512;
pub const TC_IA_ABLE: u32 = 1024;
pub const TC_UA_ABLE: u32 = 2048;
pub const TC_SO_ABLE: u32 = 4096;
pub const TC_RA_ABLE: u32 = 8192;
pub const TC_VA_ABLE: u32 = 16384;
pub const TC_RESERVED: u32 = 32768;
pub const TC_SCROLLBLT: u32 = 65536;
pub const RC_BITBLT: u32 = 1;
pub const RC_BANDING: u32 = 2;
pub const RC_SCALING: u32 = 4;
pub const RC_BITMAP64: u32 = 8;
pub const RC_GDI20_OUTPUT: u32 = 16;
pub const RC_GDI20_STATE: u32 = 32;
pub const RC_SAVEBITMAP: u32 = 64;
pub const RC_DI_BITMAP: u32 = 128;
pub const RC_PALETTE: u32 = 256;
pub const RC_DIBTODEV: u32 = 512;
pub const RC_BIGFONT: u32 = 1024;
pub const RC_STRETCHBLT: u32 = 2048;
pub const RC_FLOODFILL: u32 = 4096;
pub const RC_STRETCHDIB: u32 = 8192;
pub const RC_OP_DX_OUTPUT: u32 = 16384;
pub const RC_DEVBITS: u32 = 32768;
pub const SB_NONE: u32 = 0;
pub const SB_CONST_ALPHA: u32 = 1;
pub const SB_PIXEL_ALPHA: u32 = 2;
pub const SB_PREMULT_ALPHA: u32 = 4;
pub const SB_GRAD_RECT: u32 = 16;
pub const SB_GRAD_TRI: u32 = 32;
pub const CM_NONE: u32 = 0;
pub const CM_DEVICE_ICM: u32 = 1;
pub const CM_GAMMA_RAMP: u32 = 2;
pub const CM_CMYK_COLOR: u32 = 4;
pub const DIB_RGB_COLORS: u32 = 0;
pub const DIB_PAL_COLORS: u32 = 1;
pub const SYSPAL_ERROR: u32 = 0;
pub const SYSPAL_STATIC: u32 = 1;
pub const SYSPAL_NOSTATIC: u32 = 2;
pub const SYSPAL_NOSTATIC256: u32 = 3;
pub const CBM_INIT: u32 = 4;
pub const FLOODFILLBORDER: u32 = 0;
pub const FLOODFILLSURFACE: u32 = 1;
pub const CCHDEVICENAME: u32 = 32;
pub const CCHFORMNAME: u32 = 32;
pub const DM_SPECVERSION: u32 = 1025;
pub const DM_ORIENTATION: u32 = 1;
pub const DM_PAPERSIZE: u32 = 2;
pub const DM_PAPERLENGTH: u32 = 4;
pub const DM_PAPERWIDTH: u32 = 8;
pub const DM_SCALE: u32 = 16;
pub const DM_POSITION: u32 = 32;
pub const DM_NUP: u32 = 64;
pub const DM_DISPLAYORIENTATION: u32 = 128;
pub const DM_COPIES: u32 = 256;
pub const DM_DEFAULTSOURCE: u32 = 512;
pub const DM_PRINTQUALITY: u32 = 1024;
pub const DM_COLOR: u32 = 2048;
pub const DM_DUPLEX: u32 = 4096;
pub const DM_YRESOLUTION: u32 = 8192;
pub const DM_TTOPTION: u32 = 16384;
pub const DM_COLLATE: u32 = 32768;
pub const DM_FORMNAME: u32 = 65536;
pub const DM_LOGPIXELS: u32 = 131072;
pub const DM_BITSPERPEL: u32 = 262144;
pub const DM_PELSWIDTH: u32 = 524288;
pub const DM_PELSHEIGHT: u32 = 1048576;
pub const DM_DISPLAYFLAGS: u32 = 2097152;
pub const DM_DISPLAYFREQUENCY: u32 = 4194304;
pub const DM_ICMMETHOD: u32 = 8388608;
pub const DM_ICMINTENT: u32 = 16777216;
pub const DM_MEDIATYPE: u32 = 33554432;
pub const DM_DITHERTYPE: u32 = 67108864;
pub const DM_PANNINGWIDTH: u32 = 134217728;
pub const DM_PANNINGHEIGHT: u32 = 268435456;
pub const DM_DISPLAYFIXEDOUTPUT: u32 = 536870912;
pub const DMORIENT_PORTRAIT: u32 = 1;
pub const DMORIENT_LANDSCAPE: u32 = 2;
pub const DMPAPER_LETTER: u32 = 1;
pub const DMPAPER_LETTERSMALL: u32 = 2;
pub const DMPAPER_TABLOID: u32 = 3;
pub const DMPAPER_LEDGER: u32 = 4;
pub const DMPAPER_LEGAL: u32 = 5;
pub const DMPAPER_STATEMENT: u32 = 6;
pub const DMPAPER_EXECUTIVE: u32 = 7;
pub const DMPAPER_A3: u32 = 8;
pub const DMPAPER_A4: u32 = 9;
pub const DMPAPER_A4SMALL: u32 = 10;
pub const DMPAPER_A5: u32 = 11;
pub const DMPAPER_B4: u32 = 12;
pub const DMPAPER_B5: u32 = 13;
pub const DMPAPER_FOLIO: u32 = 14;
pub const DMPAPER_QUARTO: u32 = 15;
pub const DMPAPER_10X14: u32 = 16;
pub const DMPAPER_11X17: u32 = 17;
pub const DMPAPER_NOTE: u32 = 18;
pub const DMPAPER_ENV_9: u32 = 19;
pub const DMPAPER_ENV_10: u32 = 20;
pub const DMPAPER_ENV_11: u32 = 21;
pub const DMPAPER_ENV_12: u32 = 22;
pub const DMPAPER_ENV_14: u32 = 23;
pub const DMPAPER_CSHEET: u32 = 24;
pub const DMPAPER_DSHEET: u32 = 25;
pub const DMPAPER_ESHEET: u32 = 26;
pub const DMPAPER_ENV_DL: u32 = 27;
pub const DMPAPER_ENV_C5: u32 = 28;
pub const DMPAPER_ENV_C3: u32 = 29;
pub const DMPAPER_ENV_C4: u32 = 30;
pub const DMPAPER_ENV_C6: u32 = 31;
pub const DMPAPER_ENV_C65: u32 = 32;
pub const DMPAPER_ENV_B4: u32 = 33;
pub const DMPAPER_ENV_B5: u32 = 34;
pub const DMPAPER_ENV_B6: u32 = 35;
pub const DMPAPER_ENV_ITALY: u32 = 36;
pub const DMPAPER_ENV_MONARCH: u32 = 37;
pub const DMPAPER_ENV_PERSONAL: u32 = 38;
pub const DMPAPER_FANFOLD_US: u32 = 39;
pub const DMPAPER_FANFOLD_STD_GERMAN: u32 = 40;
pub const DMPAPER_FANFOLD_LGL_GERMAN: u32 = 41;
pub const DMPAPER_ISO_B4: u32 = 42;
pub const DMPAPER_JAPANESE_POSTCARD: u32 = 43;
pub const DMPAPER_9X11: u32 = 44;
pub const DMPAPER_10X11: u32 = 45;
pub const DMPAPER_15X11: u32 = 46;
pub const DMPAPER_ENV_INVITE: u32 = 47;
pub const DMPAPER_RESERVED_48: u32 = 48;
pub const DMPAPER_RESERVED_49: u32 = 49;
pub const DMPAPER_LETTER_EXTRA: u32 = 50;
pub const DMPAPER_LEGAL_EXTRA: u32 = 51;
pub const DMPAPER_TABLOID_EXTRA: u32 = 52;
pub const DMPAPER_A4_EXTRA: u32 = 53;
pub const DMPAPER_LETTER_TRANSVERSE: u32 = 54;
pub const DMPAPER_A4_TRANSVERSE: u32 = 55;
pub const DMPAPER_LETTER_EXTRA_TRANSVERSE: u32 = 56;
pub const DMPAPER_A_PLUS: u32 = 57;
pub const DMPAPER_B_PLUS: u32 = 58;
pub const DMPAPER_LETTER_PLUS: u32 = 59;
pub const DMPAPER_A4_PLUS: u32 = 60;
pub const DMPAPER_A5_TRANSVERSE: u32 = 61;
pub const DMPAPER_B5_TRANSVERSE: u32 = 62;
pub const DMPAPER_A3_EXTRA: u32 = 63;
pub const DMPAPER_A5_EXTRA: u32 = 64;
pub const DMPAPER_B5_EXTRA: u32 = 65;
pub const DMPAPER_A2: u32 = 66;
pub const DMPAPER_A3_TRANSVERSE: u32 = 67;
pub const DMPAPER_A3_EXTRA_TRANSVERSE: u32 = 68;
pub const DMPAPER_DBL_JAPANESE_POSTCARD: u32 = 69;
pub const DMPAPER_A6: u32 = 70;
pub const DMPAPER_JENV_KAKU2: u32 = 71;
pub const DMPAPER_JENV_KAKU3: u32 = 72;
pub const DMPAPER_JENV_CHOU3: u32 = 73;
pub const DMPAPER_JENV_CHOU4: u32 = 74;
pub const DMPAPER_LETTER_ROTATED: u32 = 75;
pub const DMPAPER_A3_ROTATED: u32 = 76;
pub const DMPAPER_A4_ROTATED: u32 = 77;
pub const DMPAPER_A5_ROTATED: u32 = 78;
pub const DMPAPER_B4_JIS_ROTATED: u32 = 79;
pub const DMPAPER_B5_JIS_ROTATED: u32 = 80;
pub const DMPAPER_JAPANESE_POSTCARD_ROTATED: u32 = 81;
pub const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED: u32 = 82;
pub const DMPAPER_A6_ROTATED: u32 = 83;
pub const DMPAPER_JENV_KAKU2_ROTATED: u32 = 84;
pub const DMPAPER_JENV_KAKU3_ROTATED: u32 = 85;
pub const DMPAPER_JENV_CHOU3_ROTATED: u32 = 86;
pub const DMPAPER_JENV_CHOU4_ROTATED: u32 = 87;
pub const DMPAPER_B6_JIS: u32 = 88;
pub const DMPAPER_B6_JIS_ROTATED: u32 = 89;
pub const DMPAPER_12X11: u32 = 90;
pub const DMPAPER_JENV_YOU4: u32 = 91;
pub const DMPAPER_JENV_YOU4_ROTATED: u32 = 92;
pub const DMPAPER_P16K: u32 = 93;
pub const DMPAPER_P32K: u32 = 94;
pub const DMPAPER_P32KBIG: u32 = 95;
pub const DMPAPER_PENV_1: u32 = 96;
pub const DMPAPER_PENV_2: u32 = 97;
pub const DMPAPER_PENV_3: u32 = 98;
pub const DMPAPER_PENV_4: u32 = 99;
pub const DMPAPER_PENV_5: u32 = 100;
pub const DMPAPER_PENV_6: u32 = 101;
pub const DMPAPER_PENV_7: u32 = 102;
pub const DMPAPER_PENV_8: u32 = 103;
pub const DMPAPER_PENV_9: u32 = 104;
pub const DMPAPER_PENV_10: u32 = 105;
pub const DMPAPER_P16K_ROTATED: u32 = 106;
pub const DMPAPER_P32K_ROTATED: u32 = 107;
pub const DMPAPER_P32KBIG_ROTATED: u32 = 108;
pub const DMPAPER_PENV_1_ROTATED: u32 = 109;
pub const DMPAPER_PENV_2_ROTATED: u32 = 110;
pub const DMPAPER_PENV_3_ROTATED: u32 = 111;
pub const DMPAPER_PENV_4_ROTATED: u32 = 112;
pub const DMPAPER_PENV_5_ROTATED: u32 = 113;
pub const DMPAPER_PENV_6_ROTATED: u32 = 114;
pub const DMPAPER_PENV_7_ROTATED: u32 = 115;
pub const DMPAPER_PENV_8_ROTATED: u32 = 116;
pub const DMPAPER_PENV_9_ROTATED: u32 = 117;
pub const DMPAPER_PENV_10_ROTATED: u32 = 118;
pub const DMPAPER_LAST: u32 = 118;
pub const DMPAPER_USER: u32 = 256;
pub const DMBIN_UPPER: u32 = 1;
pub const DMBIN_ONLYONE: u32 = 1;
pub const DMBIN_LOWER: u32 = 2;
pub const DMBIN_MIDDLE: u32 = 3;
pub const DMBIN_MANUAL: u32 = 4;
pub const DMBIN_ENVELOPE: u32 = 5;
pub const DMBIN_ENVMANUAL: u32 = 6;
pub const DMBIN_AUTO: u32 = 7;
pub const DMBIN_TRACTOR: u32 = 8;
pub const DMBIN_SMALLFMT: u32 = 9;
pub const DMBIN_LARGEFMT: u32 = 10;
pub const DMBIN_LARGECAPACITY: u32 = 11;
pub const DMBIN_CASSETTE: u32 = 14;
pub const DMBIN_FORMSOURCE: u32 = 15;
pub const DMBIN_LAST: u32 = 15;
pub const DMBIN_USER: u32 = 256;
pub const DMRES_DRAFT: i32 = -1;
pub const DMRES_LOW: i32 = -2;
pub const DMRES_MEDIUM: i32 = -3;
pub const DMRES_HIGH: i32 = -4;
pub const DMCOLOR_MONOCHROME: u32 = 1;
pub const DMCOLOR_COLOR: u32 = 2;
pub const DMDUP_SIMPLEX: u32 = 1;
pub const DMDUP_VERTICAL: u32 = 2;
pub const DMDUP_HORIZONTAL: u32 = 3;
pub const DMTT_BITMAP: u32 = 1;
pub const DMTT_DOWNLOAD: u32 = 2;
pub const DMTT_SUBDEV: u32 = 3;
pub const DMTT_DOWNLOAD_OUTLINE: u32 = 4;
pub const DMCOLLATE_FALSE: u32 = 0;
pub const DMCOLLATE_TRUE: u32 = 1;
pub const DMDO_DEFAULT: u32 = 0;
pub const DMDO_90: u32 = 1;
pub const DMDO_180: u32 = 2;
pub const DMDO_270: u32 = 3;
pub const DMDFO_DEFAULT: u32 = 0;
pub const DMDFO_STRETCH: u32 = 1;
pub const DMDFO_CENTER: u32 = 2;
pub const DM_INTERLACED: u32 = 2;
pub const DMDISPLAYFLAGS_TEXTMODE: u32 = 4;
pub const DMNUP_SYSTEM: u32 = 1;
pub const DMNUP_ONEUP: u32 = 2;
pub const DMICMMETHOD_NONE: u32 = 1;
pub const DMICMMETHOD_SYSTEM: u32 = 2;
pub const DMICMMETHOD_DRIVER: u32 = 3;
pub const DMICMMETHOD_DEVICE: u32 = 4;
pub const DMICMMETHOD_USER: u32 = 256;
pub const DMICM_SATURATE: u32 = 1;
pub const DMICM_CONTRAST: u32 = 2;
pub const DMICM_COLORIMETRIC: u32 = 3;
pub const DMICM_ABS_COLORIMETRIC: u32 = 4;
pub const DMICM_USER: u32 = 256;
pub const DMMEDIA_STANDARD: u32 = 1;
pub const DMMEDIA_TRANSPARENCY: u32 = 2;
pub const DMMEDIA_GLOSSY: u32 = 3;
pub const DMMEDIA_USER: u32 = 256;
pub const DMDITHER_NONE: u32 = 1;
pub const DMDITHER_COARSE: u32 = 2;
pub const DMDITHER_FINE: u32 = 3;
pub const DMDITHER_LINEART: u32 = 4;
pub const DMDITHER_ERRORDIFFUSION: u32 = 5;
pub const DMDITHER_RESERVED6: u32 = 6;
pub const DMDITHER_RESERVED7: u32 = 7;
pub const DMDITHER_RESERVED8: u32 = 8;
pub const DMDITHER_RESERVED9: u32 = 9;
pub const DMDITHER_GRAYSCALE: u32 = 10;
pub const DMDITHER_USER: u32 = 256;
pub const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP: u32 = 1;
pub const DISPLAY_DEVICE_MULTI_DRIVER: u32 = 2;
pub const DISPLAY_DEVICE_PRIMARY_DEVICE: u32 = 4;
pub const DISPLAY_DEVICE_MIRRORING_DRIVER: u32 = 8;
pub const DISPLAY_DEVICE_VGA_COMPATIBLE: u32 = 16;
pub const DISPLAY_DEVICE_REMOVABLE: u32 = 32;
pub const DISPLAY_DEVICE_ACC_DRIVER: u32 = 64;
pub const DISPLAY_DEVICE_MODESPRUNED: u32 = 134217728;
pub const DISPLAY_DEVICE_RDPUDD: u32 = 16777216;
pub const DISPLAY_DEVICE_REMOTE: u32 = 67108864;
pub const DISPLAY_DEVICE_DISCONNECT: u32 = 33554432;
pub const DISPLAY_DEVICE_TS_COMPATIBLE: u32 = 2097152;
pub const DISPLAY_DEVICE_UNSAFE_MODES_ON: u32 = 524288;
pub const DISPLAY_DEVICE_ACTIVE: u32 = 1;
pub const DISPLAY_DEVICE_ATTACHED: u32 = 2;
pub const DISPLAYCONFIG_MAXPATH: u32 = 1024;
pub const DISPLAYCONFIG_PATH_MODE_IDX_INVALID: u32 = 4294967295;
pub const DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID: u32 = 65535;
pub const DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID: u32 = 65535;
pub const DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID: u32 = 65535;
pub const DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID: u32 = 65535;
pub const DISPLAYCONFIG_SOURCE_IN_USE: u32 = 1;
pub const DISPLAYCONFIG_TARGET_IN_USE: u32 = 1;
pub const DISPLAYCONFIG_TARGET_FORCIBLE: u32 = 2;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT: u32 = 4;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH: u32 = 8;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM: u32 = 16;
pub const DISPLAYCONFIG_TARGET_IS_HMD: u32 = 32;
pub const DISPLAYCONFIG_PATH_ACTIVE: u32 = 1;
pub const DISPLAYCONFIG_PATH_PREFERRED_UNSCALED: u32 = 4;
pub const DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE: u32 = 8;
pub const DISPLAYCONFIG_PATH_VALID_FLAGS: u32 = 13;
pub const QDC_ALL_PATHS: u32 = 1;
pub const QDC_ONLY_ACTIVE_PATHS: u32 = 2;
pub const QDC_DATABASE_CURRENT: u32 = 4;
pub const QDC_VIRTUAL_MODE_AWARE: u32 = 16;
pub const QDC_INCLUDE_HMD: u32 = 32;
pub const SDC_TOPOLOGY_INTERNAL: u32 = 1;
pub const SDC_TOPOLOGY_CLONE: u32 = 2;
pub const SDC_TOPOLOGY_EXTEND: u32 = 4;
pub const SDC_TOPOLOGY_EXTERNAL: u32 = 8;
pub const SDC_TOPOLOGY_SUPPLIED: u32 = 16;
pub const SDC_USE_DATABASE_CURRENT: u32 = 15;
pub const SDC_USE_SUPPLIED_DISPLAY_CONFIG: u32 = 32;
pub const SDC_VALIDATE: u32 = 64;
pub const SDC_APPLY: u32 = 128;
pub const SDC_NO_OPTIMIZATION: u32 = 256;
pub const SDC_SAVE_TO_DATABASE: u32 = 512;
pub const SDC_ALLOW_CHANGES: u32 = 1024;
pub const SDC_PATH_PERSIST_IF_REQUIRED: u32 = 2048;
pub const SDC_FORCE_MODE_ENUMERATION: u32 = 4096;
pub const SDC_ALLOW_PATH_ORDER_CHANGES: u32 = 8192;
pub const SDC_VIRTUAL_MODE_AWARE: u32 = 32768;
pub const RDH_RECTANGLES: u32 = 1;
pub const SYSRGN: u32 = 4;
pub const GGO_METRICS: u32 = 0;
pub const GGO_BITMAP: u32 = 1;
pub const GGO_NATIVE: u32 = 2;
pub const GGO_BEZIER: u32 = 3;
pub const GGO_GRAY2_BITMAP: u32 = 4;
pub const GGO_GRAY4_BITMAP: u32 = 5;
pub const GGO_GRAY8_BITMAP: u32 = 6;
pub const GGO_GLYPH_INDEX: u32 = 128;
pub const GGO_UNHINTED: u32 = 256;
pub const TT_POLYGON_TYPE: u32 = 24;
pub const TT_PRIM_LINE: u32 = 1;
pub const TT_PRIM_QSPLINE: u32 = 2;
pub const TT_PRIM_CSPLINE: u32 = 3;
pub const GCP_DBCS: u32 = 1;
pub const GCP_REORDER: u32 = 2;
pub const GCP_USEKERNING: u32 = 8;
pub const GCP_GLYPHSHAPE: u32 = 16;
pub const GCP_LIGATE: u32 = 32;
pub const GCP_DIACRITIC: u32 = 256;
pub const GCP_KASHIDA: u32 = 1024;
pub const GCP_ERROR: u32 = 32768;
pub const FLI_MASK: u32 = 4155;
pub const GCP_JUSTIFY: u32 = 65536;
pub const FLI_GLYPHS: u32 = 262144;
pub const GCP_CLASSIN: u32 = 524288;
pub const GCP_MAXEXTENT: u32 = 1048576;
pub const GCP_JUSTIFYIN: u32 = 2097152;
pub const GCP_DISPLAYZWG: u32 = 4194304;
pub const GCP_SYMSWAPOFF: u32 = 8388608;
pub const GCP_NUMERICOVERRIDE: u32 = 16777216;
pub const GCP_NEUTRALOVERRIDE: u32 = 33554432;
pub const GCP_NUMERICSLATIN: u32 = 67108864;
pub const GCP_NUMERICSLOCAL: u32 = 134217728;
pub const GCPCLASS_LATIN: u32 = 1;
pub const GCPCLASS_HEBREW: u32 = 2;
pub const GCPCLASS_ARABIC: u32 = 2;
pub const GCPCLASS_NEUTRAL: u32 = 3;
pub const GCPCLASS_LOCALNUMBER: u32 = 4;
pub const GCPCLASS_LATINNUMBER: u32 = 5;
pub const GCPCLASS_LATINNUMERICTERMINATOR: u32 = 6;
pub const GCPCLASS_LATINNUMERICSEPARATOR: u32 = 7;
pub const GCPCLASS_NUMERICSEPARATOR: u32 = 8;
pub const GCPCLASS_PREBOUNDLTR: u32 = 128;
pub const GCPCLASS_PREBOUNDRTL: u32 = 64;
pub const GCPCLASS_POSTBOUNDLTR: u32 = 32;
pub const GCPCLASS_POSTBOUNDRTL: u32 = 16;
pub const GCPGLYPH_LINKBEFORE: u32 = 32768;
pub const GCPGLYPH_LINKAFTER: u32 = 16384;
pub const TT_AVAILABLE: u32 = 1;
pub const TT_ENABLED: u32 = 2;
pub const PFD_TYPE_RGBA: u32 = 0;
pub const PFD_TYPE_COLORINDEX: u32 = 1;
pub const PFD_MAIN_PLANE: u32 = 0;
pub const PFD_OVERLAY_PLANE: u32 = 1;
pub const PFD_UNDERLAY_PLANE: i32 = -1;
pub const PFD_DOUBLEBUFFER: u32 = 1;
pub const PFD_STEREO: u32 = 2;
pub const PFD_DRAW_TO_WINDOW: u32 = 4;
pub const PFD_DRAW_TO_BITMAP: u32 = 8;
pub const PFD_SUPPORT_GDI: u32 = 16;
pub const PFD_SUPPORT_OPENGL: u32 = 32;
pub const PFD_GENERIC_FORMAT: u32 = 64;
pub const PFD_NEED_PALETTE: u32 = 128;
pub const PFD_NEED_SYSTEM_PALETTE: u32 = 256;
pub const PFD_SWAP_EXCHANGE: u32 = 512;
pub const PFD_SWAP_COPY: u32 = 1024;
pub const PFD_SWAP_LAYER_BUFFERS: u32 = 2048;
pub const PFD_GENERIC_ACCELERATED: u32 = 4096;
pub const PFD_SUPPORT_DIRECTDRAW: u32 = 8192;
pub const PFD_DIRECT3D_ACCELERATED: u32 = 16384;
pub const PFD_SUPPORT_COMPOSITION: u32 = 32768;
pub const PFD_DEPTH_DONTCARE: u32 = 536870912;
pub const PFD_DOUBLEBUFFER_DONTCARE: u32 = 1073741824;
pub const PFD_STEREO_DONTCARE: u32 = 2147483648;
pub const DC_BINADJUST: u32 = 19;
pub const DC_EMF_COMPLIANT: u32 = 20;
pub const DC_DATATYPE_PRODUCED: u32 = 21;
pub const DC_COLLATE: u32 = 22;
pub const DC_MANUFACTURER: u32 = 23;
pub const DC_MODEL: u32 = 24;
pub const DC_PERSONALITY: u32 = 25;
pub const DC_PRINTRATE: u32 = 26;
pub const DC_PRINTRATEUNIT: u32 = 27;
pub const PRINTRATEUNIT_PPM: u32 = 1;
pub const PRINTRATEUNIT_CPS: u32 = 2;
pub const PRINTRATEUNIT_LPM: u32 = 3;
pub const PRINTRATEUNIT_IPM: u32 = 4;
pub const DC_PRINTERMEM: u32 = 28;
pub const DC_MEDIAREADY: u32 = 29;
pub const DC_STAPLE: u32 = 30;
pub const DC_PRINTRATEPPM: u32 = 31;
pub const DC_COLORDEVICE: u32 = 32;
pub const DC_NUP: u32 = 33;
pub const DC_MEDIATYPENAMES: u32 = 34;
pub const DC_MEDIATYPES: u32 = 35;
pub const DCTT_BITMAP: u32 = 1;
pub const DCTT_DOWNLOAD: u32 = 2;
pub const DCTT_SUBDEV: u32 = 4;
pub const DCTT_DOWNLOAD_OUTLINE: u32 = 8;
pub const DCBA_FACEUPNONE: u32 = 0;
pub const DCBA_FACEUPCENTER: u32 = 1;
pub const DCBA_FACEUPLEFT: u32 = 2;
pub const DCBA_FACEUPRIGHT: u32 = 3;
pub const DCBA_FACEDOWNNONE: u32 = 256;
pub const DCBA_FACEDOWNCENTER: u32 = 257;
pub const DCBA_FACEDOWNLEFT: u32 = 258;
pub const DCBA_FACEDOWNRIGHT: u32 = 259;
pub const GS_8BIT_INDICES: u32 = 1;
pub const MM_MAX_NUMAXES: u32 = 16;
pub const FR_PRIVATE: u32 = 16;
pub const FR_NOT_ENUM: u32 = 32;
pub const MM_MAX_AXES_NAMELEN: u32 = 16;
pub const AC_SRC_OVER: u32 = 0;
pub const AC_SRC_ALPHA: u32 = 1;
pub const GRADIENT_FILL_RECT_H: u32 = 0;
pub const GRADIENT_FILL_RECT_V: u32 = 1;
pub const GRADIENT_FILL_TRIANGLE: u32 = 2;
pub const GRADIENT_FILL_OP_FLAG: u32 = 255;
pub const CA_NEGATIVE: u32 = 1;
pub const CA_LOG_FILTER: u32 = 2;
pub const ILLUMINANT_DEVICE_DEFAULT: u32 = 0;
pub const ILLUMINANT_A: u32 = 1;
pub const ILLUMINANT_B: u32 = 2;
pub const ILLUMINANT_C: u32 = 3;
pub const ILLUMINANT_D50: u32 = 4;
pub const ILLUMINANT_D55: u32 = 5;
pub const ILLUMINANT_D65: u32 = 6;
pub const ILLUMINANT_D75: u32 = 7;
pub const ILLUMINANT_F2: u32 = 8;
pub const ILLUMINANT_MAX_INDEX: u32 = 8;
pub const ILLUMINANT_TUNGSTEN: u32 = 1;
pub const ILLUMINANT_DAYLIGHT: u32 = 3;
pub const ILLUMINANT_FLUORESCENT: u32 = 8;
pub const ILLUMINANT_NTSC: u32 = 3;
pub const DI_APPBANDING: u32 = 1;
pub const DI_ROPS_READ_DESTINATION: u32 = 2;
pub const FONTMAPPER_MAX: u32 = 10;
pub const ICM_OFF: u32 = 1;
pub const ICM_ON: u32 = 2;
pub const ICM_QUERY: u32 = 3;
pub const ICM_DONE_OUTSIDEDC: u32 = 4;
pub const ENHMETA_SIGNATURE: u32 = 1179469088;
pub const ENHMETA_STOCK_OBJECT: u32 = 2147483648;
pub const EMR_HEADER: u32 = 1;
pub const EMR_POLYBEZIER: u32 = 2;
pub const EMR_POLYGON: u32 = 3;
pub const EMR_POLYLINE: u32 = 4;
pub const EMR_POLYBEZIERTO: u32 = 5;
pub const EMR_POLYLINETO: u32 = 6;
pub const EMR_POLYPOLYLINE: u32 = 7;
pub const EMR_POLYPOLYGON: u32 = 8;
pub const EMR_SETWINDOWEXTEX: u32 = 9;
pub const EMR_SETWINDOWORGEX: u32 = 10;
pub const EMR_SETVIEWPORTEXTEX: u32 = 11;
pub const EMR_SETVIEWPORTORGEX: u32 = 12;
pub const EMR_SETBRUSHORGEX: u32 = 13;
pub const EMR_EOF: u32 = 14;
pub const EMR_SETPIXELV: u32 = 15;
pub const EMR_SETMAPPERFLAGS: u32 = 16;
pub const EMR_SETMAPMODE: u32 = 17;
pub const EMR_SETBKMODE: u32 = 18;
pub const EMR_SETPOLYFILLMODE: u32 = 19;
pub const EMR_SETROP2: u32 = 20;
pub const EMR_SETSTRETCHBLTMODE: u32 = 21;
pub const EMR_SETTEXTALIGN: u32 = 22;
pub const EMR_SETCOLORADJUSTMENT: u32 = 23;
pub const EMR_SETTEXTCOLOR: u32 = 24;
pub const EMR_SETBKCOLOR: u32 = 25;
pub const EMR_OFFSETCLIPRGN: u32 = 26;
pub const EMR_MOVETOEX: u32 = 27;
pub const EMR_SETMETARGN: u32 = 28;
pub const EMR_EXCLUDECLIPRECT: u32 = 29;
pub const EMR_INTERSECTCLIPRECT: u32 = 30;
pub const EMR_SCALEVIEWPORTEXTEX: u32 = 31;
pub const EMR_SCALEWINDOWEXTEX: u32 = 32;
pub const EMR_SAVEDC: u32 = 33;
pub const EMR_RESTOREDC: u32 = 34;
pub const EMR_SETWORLDTRANSFORM: u32 = 35;
pub const EMR_MODIFYWORLDTRANSFORM: u32 = 36;
pub const EMR_SELECTOBJECT: u32 = 37;
pub const EMR_CREATEPEN: u32 = 38;
pub const EMR_CREATEBRUSHINDIRECT: u32 = 39;
pub const EMR_DELETEOBJECT: u32 = 40;
pub const EMR_ANGLEARC: u32 = 41;
pub const EMR_ELLIPSE: u32 = 42;
pub const EMR_RECTANGLE: u32 = 43;
pub const EMR_ROUNDRECT: u32 = 44;
pub const EMR_ARC: u32 = 45;
pub const EMR_CHORD: u32 = 46;
pub const EMR_PIE: u32 = 47;
pub const EMR_SELECTPALETTE: u32 = 48;
pub const EMR_CREATEPALETTE: u32 = 49;
pub const EMR_SETPALETTEENTRIES: u32 = 50;
pub const EMR_RESIZEPALETTE: u32 = 51;
pub const EMR_REALIZEPALETTE: u32 = 52;
pub const EMR_EXTFLOODFILL: u32 = 53;
pub const EMR_LINETO: u32 = 54;
pub const EMR_ARCTO: u32 = 55;
pub const EMR_POLYDRAW: u32 = 56;
pub const EMR_SETARCDIRECTION: u32 = 57;
pub const EMR_SETMITERLIMIT: u32 = 58;
pub const EMR_BEGINPATH: u32 = 59;
pub const EMR_ENDPATH: u32 = 60;
pub const EMR_CLOSEFIGURE: u32 = 61;
pub const EMR_FILLPATH: u32 = 62;
pub const EMR_STROKEANDFILLPATH: u32 = 63;
pub const EMR_STROKEPATH: u32 = 64;
pub const EMR_FLATTENPATH: u32 = 65;
pub const EMR_WIDENPATH: u32 = 66;
pub const EMR_SELECTCLIPPATH: u32 = 67;
pub const EMR_ABORTPATH: u32 = 68;
pub const EMR_GDICOMMENT: u32 = 70;
pub const EMR_FILLRGN: u32 = 71;
pub const EMR_FRAMERGN: u32 = 72;
pub const EMR_INVERTRGN: u32 = 73;
pub const EMR_PAINTRGN: u32 = 74;
pub const EMR_EXTSELECTCLIPRGN: u32 = 75;
pub const EMR_BITBLT: u32 = 76;
pub const EMR_STRETCHBLT: u32 = 77;
pub const EMR_MASKBLT: u32 = 78;
pub const EMR_PLGBLT: u32 = 79;
pub const EMR_SETDIBITSTODEVICE: u32 = 80;
pub const EMR_STRETCHDIBITS: u32 = 81;
pub const EMR_EXTCREATEFONTINDIRECTW: u32 = 82;
pub const EMR_EXTTEXTOUTA: u32 = 83;
pub const EMR_EXTTEXTOUTW: u32 = 84;
pub const EMR_POLYBEZIER16: u32 = 85;
pub const EMR_POLYGON16: u32 = 86;
pub const EMR_POLYLINE16: u32 = 87;
pub const EMR_POLYBEZIERTO16: u32 = 88;
pub const EMR_POLYLINETO16: u32 = 89;
pub const EMR_POLYPOLYLINE16: u32 = 90;
pub const EMR_POLYPOLYGON16: u32 = 91;
pub const EMR_POLYDRAW16: u32 = 92;
pub const EMR_CREATEMONOBRUSH: u32 = 93;
pub const EMR_CREATEDIBPATTERNBRUSHPT: u32 = 94;
pub const EMR_EXTCREATEPEN: u32 = 95;
pub const EMR_POLYTEXTOUTA: u32 = 96;
pub const EMR_POLYTEXTOUTW: u32 = 97;
pub const EMR_SETICMMODE: u32 = 98;
pub const EMR_CREATECOLORSPACE: u32 = 99;
pub const EMR_SETCOLORSPACE: u32 = 100;
pub const EMR_DELETECOLORSPACE: u32 = 101;
pub const EMR_GLSRECORD: u32 = 102;
pub const EMR_GLSBOUNDEDRECORD: u32 = 103;
pub const EMR_PIXELFORMAT: u32 = 104;
pub const EMR_RESERVED_105: u32 = 105;
pub const EMR_RESERVED_106: u32 = 106;
pub const EMR_RESERVED_107: u32 = 107;
pub const EMR_RESERVED_108: u32 = 108;
pub const EMR_RESERVED_109: u32 = 109;
pub const EMR_RESERVED_110: u32 = 110;
pub const EMR_COLORCORRECTPALETTE: u32 = 111;
pub const EMR_SETICMPROFILEA: u32 = 112;
pub const EMR_SETICMPROFILEW: u32 = 113;
pub const EMR_ALPHABLEND: u32 = 114;
pub const EMR_SETLAYOUT: u32 = 115;
pub const EMR_TRANSPARENTBLT: u32 = 116;
pub const EMR_RESERVED_117: u32 = 117;
pub const EMR_GRADIENTFILL: u32 = 118;
pub const EMR_RESERVED_119: u32 = 119;
pub const EMR_RESERVED_120: u32 = 120;
pub const EMR_COLORMATCHTOTARGETW: u32 = 121;
pub const EMR_CREATECOLORSPACEW: u32 = 122;
pub const EMR_MIN: u32 = 1;
pub const EMR_MAX: u32 = 122;
pub const SETICMPROFILE_EMBEDED: u32 = 1;
pub const CREATECOLORSPACE_EMBEDED: u32 = 1;
pub const COLORMATCHTOTARGET_EMBEDED: u32 = 1;
pub const GDICOMMENT_IDENTIFIER: u32 = 1128875079;
pub const GDICOMMENT_WINDOWS_METAFILE: u32 = 2147483649;
pub const GDICOMMENT_BEGINGROUP: u32 = 2;
pub const GDICOMMENT_ENDGROUP: u32 = 3;
pub const GDICOMMENT_MULTIFORMATS: u32 = 1073741828;
pub const EPS_SIGNATURE: u32 = 1179865157;
pub const GDICOMMENT_UNICODE_STRING: u32 = 64;
pub const GDICOMMENT_UNICODE_END: u32 = 128;
pub const WGL_FONT_LINES: u32 = 0;
pub const WGL_FONT_POLYGONS: u32 = 1;
pub const LPD_DOUBLEBUFFER: u32 = 1;
pub const LPD_STEREO: u32 = 2;
pub const LPD_SUPPORT_GDI: u32 = 16;
pub const LPD_SUPPORT_OPENGL: u32 = 32;
pub const LPD_SHARE_DEPTH: u32 = 64;
pub const LPD_SHARE_STENCIL: u32 = 128;
pub const LPD_SHARE_ACCUM: u32 = 256;
pub const LPD_SWAP_EXCHANGE: u32 = 512;
pub const LPD_SWAP_COPY: u32 = 1024;
pub const LPD_TRANSPARENT: u32 = 4096;
pub const LPD_TYPE_RGBA: u32 = 0;
pub const LPD_TYPE_COLORINDEX: u32 = 1;
pub const WGL_SWAP_MAIN_PLANE: u32 = 1;
pub const WGL_SWAP_OVERLAY1: u32 = 2;
pub const WGL_SWAP_OVERLAY2: u32 = 4;
pub const WGL_SWAP_OVERLAY3: u32 = 8;
pub const WGL_SWAP_OVERLAY4: u32 = 16;
pub const WGL_SWAP_OVERLAY5: u32 = 32;
pub const WGL_SWAP_OVERLAY6: u32 = 64;
pub const WGL_SWAP_OVERLAY7: u32 = 128;
pub const WGL_SWAP_OVERLAY8: u32 = 256;
pub const WGL_SWAP_OVERLAY9: u32 = 512;
pub const WGL_SWAP_OVERLAY10: u32 = 1024;
pub const WGL_SWAP_OVERLAY11: u32 = 2048;
pub const WGL_SWAP_OVERLAY12: u32 = 4096;
pub const WGL_SWAP_OVERLAY13: u32 = 8192;
pub const WGL_SWAP_OVERLAY14: u32 = 16384;
pub const WGL_SWAP_OVERLAY15: u32 = 32768;
pub const WGL_SWAP_UNDERLAY1: u32 = 65536;
pub const WGL_SWAP_UNDERLAY2: u32 = 131072;
pub const WGL_SWAP_UNDERLAY3: u32 = 262144;
pub const WGL_SWAP_UNDERLAY4: u32 = 524288;
pub const WGL_SWAP_UNDERLAY5: u32 = 1048576;
pub const WGL_SWAP_UNDERLAY6: u32 = 2097152;
pub const WGL_SWAP_UNDERLAY7: u32 = 4194304;
pub const WGL_SWAP_UNDERLAY8: u32 = 8388608;
pub const WGL_SWAP_UNDERLAY9: u32 = 16777216;
pub const WGL_SWAP_UNDERLAY10: u32 = 33554432;
pub const WGL_SWAP_UNDERLAY11: u32 = 67108864;
pub const WGL_SWAP_UNDERLAY12: u32 = 134217728;
pub const WGL_SWAP_UNDERLAY13: u32 = 268435456;
pub const WGL_SWAP_UNDERLAY14: u32 = 536870912;
pub const WGL_SWAP_UNDERLAY15: u32 = 1073741824;
pub const WGL_SWAPMULTIPLE_MAX: u32 = 16;
pub const DIFFERENCE: u32 = 11;
pub const SB_HORZ: u32 = 0;
pub const SB_VERT: u32 = 1;
pub const SB_CTL: u32 = 2;
pub const SB_BOTH: u32 = 3;
pub const SB_LINEUP: u32 = 0;
pub const SB_LINELEFT: u32 = 0;
pub const SB_LINEDOWN: u32 = 1;
pub const SB_LINERIGHT: u32 = 1;
pub const SB_PAGEUP: u32 = 2;
pub const SB_PAGELEFT: u32 = 2;
pub const SB_PAGEDOWN: u32 = 3;
pub const SB_PAGERIGHT: u32 = 3;
pub const SB_THUMBPOSITION: u32 = 4;
pub const SB_THUMBTRACK: u32 = 5;
pub const SB_TOP: u32 = 6;
pub const SB_LEFT: u32 = 6;
pub const SB_BOTTOM: u32 = 7;
pub const SB_RIGHT: u32 = 7;
pub const SB_ENDSCROLL: u32 = 8;
pub const SW_HIDE: u32 = 0;
pub const SW_SHOWNORMAL: u32 = 1;
pub const SW_NORMAL: u32 = 1;
pub const SW_SHOWMINIMIZED: u32 = 2;
pub const SW_SHOWMAXIMIZED: u32 = 3;
pub const SW_MAXIMIZE: u32 = 3;
pub const SW_SHOWNOACTIVATE: u32 = 4;
pub const SW_SHOW: u32 = 5;
pub const SW_MINIMIZE: u32 = 6;
pub const SW_SHOWMINNOACTIVE: u32 = 7;
pub const SW_SHOWNA: u32 = 8;
pub const SW_RESTORE: u32 = 9;
pub const SW_SHOWDEFAULT: u32 = 10;
pub const SW_FORCEMINIMIZE: u32 = 11;
pub const SW_MAX: u32 = 11;
pub const HIDE_WINDOW: u32 = 0;
pub const SHOW_OPENWINDOW: u32 = 1;
pub const SHOW_ICONWINDOW: u32 = 2;
pub const SHOW_FULLSCREEN: u32 = 3;
pub const SHOW_OPENNOACTIVATE: u32 = 4;
pub const SW_PARENTCLOSING: u32 = 1;
pub const SW_OTHERZOOM: u32 = 2;
pub const SW_PARENTOPENING: u32 = 3;
pub const SW_OTHERUNZOOM: u32 = 4;
pub const AW_HOR_POSITIVE: u32 = 1;
pub const AW_HOR_NEGATIVE: u32 = 2;
pub const AW_VER_POSITIVE: u32 = 4;
pub const AW_VER_NEGATIVE: u32 = 8;
pub const AW_CENTER: u32 = 16;
pub const AW_HIDE: u32 = 65536;
pub const AW_ACTIVATE: u32 = 131072;
pub const AW_SLIDE: u32 = 262144;
pub const AW_BLEND: u32 = 524288;
pub const KF_EXTENDED: u32 = 256;
pub const KF_DLGMODE: u32 = 2048;
pub const KF_MENUMODE: u32 = 4096;
pub const KF_ALTDOWN: u32 = 8192;
pub const KF_REPEAT: u32 = 16384;
pub const KF_UP: u32 = 32768;
pub const VK_LBUTTON: u32 = 1;
pub const VK_RBUTTON: u32 = 2;
pub const VK_CANCEL: u32 = 3;
pub const VK_MBUTTON: u32 = 4;
pub const VK_XBUTTON1: u32 = 5;
pub const VK_XBUTTON2: u32 = 6;
pub const VK_BACK: u32 = 8;
pub const VK_TAB: u32 = 9;
pub const VK_CLEAR: u32 = 12;
pub const VK_RETURN: u32 = 13;
pub const VK_SHIFT: u32 = 16;
pub const VK_CONTROL: u32 = 17;
pub const VK_MENU: u32 = 18;
pub const VK_PAUSE: u32 = 19;
pub const VK_CAPITAL: u32 = 20;
pub const VK_KANA: u32 = 21;
pub const VK_HANGEUL: u32 = 21;
pub const VK_HANGUL: u32 = 21;
pub const VK_JUNJA: u32 = 23;
pub const VK_FINAL: u32 = 24;
pub const VK_HANJA: u32 = 25;
pub const VK_KANJI: u32 = 25;
pub const VK_ESCAPE: u32 = 27;
pub const VK_CONVERT: u32 = 28;
pub const VK_NONCONVERT: u32 = 29;
pub const VK_ACCEPT: u32 = 30;
pub const VK_MODECHANGE: u32 = 31;
pub const VK_SPACE: u32 = 32;
pub const VK_PRIOR: u32 = 33;
pub const VK_NEXT: u32 = 34;
pub const VK_END: u32 = 35;
pub const VK_HOME: u32 = 36;
pub const VK_LEFT: u32 = 37;
pub const VK_UP: u32 = 38;
pub const VK_RIGHT: u32 = 39;
pub const VK_DOWN: u32 = 40;
pub const VK_SELECT: u32 = 41;
pub const VK_PRINT: u32 = 42;
pub const VK_EXECUTE: u32 = 43;
pub const VK_SNAPSHOT: u32 = 44;
pub const VK_INSERT: u32 = 45;
pub const VK_DELETE: u32 = 46;
pub const VK_HELP: u32 = 47;
pub const VK_LWIN: u32 = 91;
pub const VK_RWIN: u32 = 92;
pub const VK_APPS: u32 = 93;
pub const VK_SLEEP: u32 = 95;
pub const VK_NUMPAD0: u32 = 96;
pub const VK_NUMPAD1: u32 = 97;
pub const VK_NUMPAD2: u32 = 98;
pub const VK_NUMPAD3: u32 = 99;
pub const VK_NUMPAD4: u32 = 100;
pub const VK_NUMPAD5: u32 = 101;
pub const VK_NUMPAD6: u32 = 102;
pub const VK_NUMPAD7: u32 = 103;
pub const VK_NUMPAD8: u32 = 104;
pub const VK_NUMPAD9: u32 = 105;
pub const VK_MULTIPLY: u32 = 106;
pub const VK_ADD: u32 = 107;
pub const VK_SEPARATOR: u32 = 108;
pub const VK_SUBTRACT: u32 = 109;
pub const VK_DECIMAL: u32 = 110;
pub const VK_DIVIDE: u32 = 111;
pub const VK_F1: u32 = 112;
pub const VK_F2: u32 = 113;
pub const VK_F3: u32 = 114;
pub const VK_F4: u32 = 115;
pub const VK_F5: u32 = 116;
pub const VK_F6: u32 = 117;
pub const VK_F7: u32 = 118;
pub const VK_F8: u32 = 119;
pub const VK_F9: u32 = 120;
pub const VK_F10: u32 = 121;
pub const VK_F11: u32 = 122;
pub const VK_F12: u32 = 123;
pub const VK_F13: u32 = 124;
pub const VK_F14: u32 = 125;
pub const VK_F15: u32 = 126;
pub const VK_F16: u32 = 127;
pub const VK_F17: u32 = 128;
pub const VK_F18: u32 = 129;
pub const VK_F19: u32 = 130;
pub const VK_F20: u32 = 131;
pub const VK_F21: u32 = 132;
pub const VK_F22: u32 = 133;
pub const VK_F23: u32 = 134;
pub const VK_F24: u32 = 135;
pub const VK_NAVIGATION_VIEW: u32 = 136;
pub const VK_NAVIGATION_MENU: u32 = 137;
pub const VK_NAVIGATION_UP: u32 = 138;
pub const VK_NAVIGATION_DOWN: u32 = 139;
pub const VK_NAVIGATION_LEFT: u32 = 140;
pub const VK_NAVIGATION_RIGHT: u32 = 141;
pub const VK_NAVIGATION_ACCEPT: u32 = 142;
pub const VK_NAVIGATION_CANCEL: u32 = 143;
pub const VK_NUMLOCK: u32 = 144;
pub const VK_SCROLL: u32 = 145;
pub const VK_OEM_NEC_EQUAL: u32 = 146;
pub const VK_OEM_FJ_JISHO: u32 = 146;
pub const VK_OEM_FJ_MASSHOU: u32 = 147;
pub const VK_OEM_FJ_TOUROKU: u32 = 148;
pub const VK_OEM_FJ_LOYA: u32 = 149;
pub const VK_OEM_FJ_ROYA: u32 = 150;
pub const VK_LSHIFT: u32 = 160;
pub const VK_RSHIFT: u32 = 161;
pub const VK_LCONTROL: u32 = 162;
pub const VK_RCONTROL: u32 = 163;
pub const VK_LMENU: u32 = 164;
pub const VK_RMENU: u32 = 165;
pub const VK_BROWSER_BACK: u32 = 166;
pub const VK_BROWSER_FORWARD: u32 = 167;
pub const VK_BROWSER_REFRESH: u32 = 168;
pub const VK_BROWSER_STOP: u32 = 169;
pub const VK_BROWSER_SEARCH: u32 = 170;
pub const VK_BROWSER_FAVORITES: u32 = 171;
pub const VK_BROWSER_HOME: u32 = 172;
pub const VK_VOLUME_MUTE: u32 = 173;
pub const VK_VOLUME_DOWN: u32 = 174;
pub const VK_VOLUME_UP: u32 = 175;
pub const VK_MEDIA_NEXT_TRACK: u32 = 176;
pub const VK_MEDIA_PREV_TRACK: u32 = 177;
pub const VK_MEDIA_STOP: u32 = 178;
pub const VK_MEDIA_PLAY_PAUSE: u32 = 179;
pub const VK_LAUNCH_MAIL: u32 = 180;
pub const VK_LAUNCH_MEDIA_SELECT: u32 = 181;
pub const VK_LAUNCH_APP1: u32 = 182;
pub const VK_LAUNCH_APP2: u32 = 183;
pub const VK_OEM_1: u32 = 186;
pub const VK_OEM_PLUS: u32 = 187;
pub const VK_OEM_COMMA: u32 = 188;
pub const VK_OEM_MINUS: u32 = 189;
pub const VK_OEM_PERIOD: u32 = 190;
pub const VK_OEM_2: u32 = 191;
pub const VK_OEM_3: u32 = 192;
pub const VK_GAMEPAD_A: u32 = 195;
pub const VK_GAMEPAD_B: u32 = 196;
pub const VK_GAMEPAD_X: u32 = 197;
pub const VK_GAMEPAD_Y: u32 = 198;
pub const VK_GAMEPAD_RIGHT_SHOULDER: u32 = 199;
pub const VK_GAMEPAD_LEFT_SHOULDER: u32 = 200;
pub const VK_GAMEPAD_LEFT_TRIGGER: u32 = 201;
pub const VK_GAMEPAD_RIGHT_TRIGGER: u32 = 202;
pub const VK_GAMEPAD_DPAD_UP: u32 = 203;
pub const VK_GAMEPAD_DPAD_DOWN: u32 = 204;
pub const VK_GAMEPAD_DPAD_LEFT: u32 = 205;
pub const VK_GAMEPAD_DPAD_RIGHT: u32 = 206;
pub const VK_GAMEPAD_MENU: u32 = 207;
pub const VK_GAMEPAD_VIEW: u32 = 208;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON: u32 = 209;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON: u32 = 210;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_UP: u32 = 211;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN: u32 = 212;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT: u32 = 213;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT: u32 = 214;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_UP: u32 = 215;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN: u32 = 216;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT: u32 = 217;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT: u32 = 218;
pub const VK_OEM_4: u32 = 219;
pub const VK_OEM_5: u32 = 220;
pub const VK_OEM_6: u32 = 221;
pub const VK_OEM_7: u32 = 222;
pub const VK_OEM_8: u32 = 223;
pub const VK_OEM_AX: u32 = 225;
pub const VK_OEM_102: u32 = 226;
pub const VK_ICO_HELP: u32 = 227;
pub const VK_ICO_00: u32 = 228;
pub const VK_PROCESSKEY: u32 = 229;
pub const VK_ICO_CLEAR: u32 = 230;
pub const VK_PACKET: u32 = 231;
pub const VK_OEM_RESET: u32 = 233;
pub const VK_OEM_JUMP: u32 = 234;
pub const VK_OEM_PA1: u32 = 235;
pub const VK_OEM_PA2: u32 = 236;
pub const VK_OEM_PA3: u32 = 237;
pub const VK_OEM_WSCTRL: u32 = 238;
pub const VK_OEM_CUSEL: u32 = 239;
pub const VK_OEM_ATTN: u32 = 240;
pub const VK_OEM_FINISH: u32 = 241;
pub const VK_OEM_COPY: u32 = 242;
pub const VK_OEM_AUTO: u32 = 243;
pub const VK_OEM_ENLW: u32 = 244;
pub const VK_OEM_BACKTAB: u32 = 245;
pub const VK_ATTN: u32 = 246;
pub const VK_CRSEL: u32 = 247;
pub const VK_EXSEL: u32 = 248;
pub const VK_EREOF: u32 = 249;
pub const VK_PLAY: u32 = 250;
pub const VK_ZOOM: u32 = 251;
pub const VK_NONAME: u32 = 252;
pub const VK_PA1: u32 = 253;
pub const VK_OEM_CLEAR: u32 = 254;
pub const WH_MIN: i32 = -1;
pub const WH_MSGFILTER: i32 = -1;
pub const WH_JOURNALRECORD: u32 = 0;
pub const WH_JOURNALPLAYBACK: u32 = 1;
pub const WH_KEYBOARD: u32 = 2;
pub const WH_GETMESSAGE: u32 = 3;
pub const WH_CALLWNDPROC: u32 = 4;
pub const WH_CBT: u32 = 5;
pub const WH_SYSMSGFILTER: u32 = 6;
pub const WH_MOUSE: u32 = 7;
pub const WH_DEBUG: u32 = 9;
pub const WH_SHELL: u32 = 10;
pub const WH_FOREGROUNDIDLE: u32 = 11;
pub const WH_CALLWNDPROCRET: u32 = 12;
pub const WH_KEYBOARD_LL: u32 = 13;
pub const WH_MOUSE_LL: u32 = 14;
pub const WH_MAX: u32 = 14;
pub const WH_MINHOOK: i32 = -1;
pub const WH_MAXHOOK: u32 = 14;
pub const HC_ACTION: u32 = 0;
pub const HC_GETNEXT: u32 = 1;
pub const HC_SKIP: u32 = 2;
pub const HC_NOREMOVE: u32 = 3;
pub const HC_NOREM: u32 = 3;
pub const HC_SYSMODALON: u32 = 4;
pub const HC_SYSMODALOFF: u32 = 5;
pub const HCBT_MOVESIZE: u32 = 0;
pub const HCBT_MINMAX: u32 = 1;
pub const HCBT_QS: u32 = 2;
pub const HCBT_CREATEWND: u32 = 3;
pub const HCBT_DESTROYWND: u32 = 4;
pub const HCBT_ACTIVATE: u32 = 5;
pub const HCBT_CLICKSKIPPED: u32 = 6;
pub const HCBT_KEYSKIPPED: u32 = 7;
pub const HCBT_SYSCOMMAND: u32 = 8;
pub const HCBT_SETFOCUS: u32 = 9;
pub const WTS_CONSOLE_CONNECT: u32 = 1;
pub const WTS_CONSOLE_DISCONNECT: u32 = 2;
pub const WTS_REMOTE_CONNECT: u32 = 3;
pub const WTS_REMOTE_DISCONNECT: u32 = 4;
pub const WTS_SESSION_LOGON: u32 = 5;
pub const WTS_SESSION_LOGOFF: u32 = 6;
pub const WTS_SESSION_LOCK: u32 = 7;
pub const WTS_SESSION_UNLOCK: u32 = 8;
pub const WTS_SESSION_REMOTE_CONTROL: u32 = 9;
pub const WTS_SESSION_CREATE: u32 = 10;
pub const WTS_SESSION_TERMINATE: u32 = 11;
pub const MSGF_DIALOGBOX: u32 = 0;
pub const MSGF_MESSAGEBOX: u32 = 1;
pub const MSGF_MENU: u32 = 2;
pub const MSGF_SCROLLBAR: u32 = 5;
pub const MSGF_NEXTWINDOW: u32 = 6;
pub const MSGF_MAX: u32 = 8;
pub const MSGF_USER: u32 = 4096;
pub const HSHELL_WINDOWCREATED: u32 = 1;
pub const HSHELL_WINDOWDESTROYED: u32 = 2;
pub const HSHELL_ACTIVATESHELLWINDOW: u32 = 3;
pub const HSHELL_WINDOWACTIVATED: u32 = 4;
pub const HSHELL_GETMINRECT: u32 = 5;
pub const HSHELL_REDRAW: u32 = 6;
pub const HSHELL_TASKMAN: u32 = 7;
pub const HSHELL_LANGUAGE: u32 = 8;
pub const HSHELL_SYSMENU: u32 = 9;
pub const HSHELL_ENDTASK: u32 = 10;
pub const HSHELL_ACCESSIBILITYSTATE: u32 = 11;
pub const HSHELL_APPCOMMAND: u32 = 12;
pub const HSHELL_WINDOWREPLACED: u32 = 13;
pub const HSHELL_WINDOWREPLACING: u32 = 14;
pub const HSHELL_MONITORCHANGED: u32 = 16;
pub const HSHELL_HIGHBIT: u32 = 32768;
pub const HSHELL_FLASH: u32 = 32774;
pub const HSHELL_RUDEAPPACTIVATED: u32 = 32772;
pub const APPCOMMAND_BROWSER_BACKWARD: u32 = 1;
pub const APPCOMMAND_BROWSER_FORWARD: u32 = 2;
pub const APPCOMMAND_BROWSER_REFRESH: u32 = 3;
pub const APPCOMMAND_BROWSER_STOP: u32 = 4;
pub const APPCOMMAND_BROWSER_SEARCH: u32 = 5;
pub const APPCOMMAND_BROWSER_FAVORITES: u32 = 6;
pub const APPCOMMAND_BROWSER_HOME: u32 = 7;
pub const APPCOMMAND_VOLUME_MUTE: u32 = 8;
pub const APPCOMMAND_VOLUME_DOWN: u32 = 9;
pub const APPCOMMAND_VOLUME_UP: u32 = 10;
pub const APPCOMMAND_MEDIA_NEXTTRACK: u32 = 11;
pub const APPCOMMAND_MEDIA_PREVIOUSTRACK: u32 = 12;
pub const APPCOMMAND_MEDIA_STOP: u32 = 13;
pub const APPCOMMAND_MEDIA_PLAY_PAUSE: u32 = 14;
pub const APPCOMMAND_LAUNCH_MAIL: u32 = 15;
pub const APPCOMMAND_LAUNCH_MEDIA_SELECT: u32 = 16;
pub const APPCOMMAND_LAUNCH_APP1: u32 = 17;
pub const APPCOMMAND_LAUNCH_APP2: u32 = 18;
pub const APPCOMMAND_BASS_DOWN: u32 = 19;
pub const APPCOMMAND_BASS_BOOST: u32 = 20;
pub const APPCOMMAND_BASS_UP: u32 = 21;
pub const APPCOMMAND_TREBLE_DOWN: u32 = 22;
pub const APPCOMMAND_TREBLE_UP: u32 = 23;
pub const APPCOMMAND_MICROPHONE_VOLUME_MUTE: u32 = 24;
pub const APPCOMMAND_MICROPHONE_VOLUME_DOWN: u32 = 25;
pub const APPCOMMAND_MICROPHONE_VOLUME_UP: u32 = 26;
pub const APPCOMMAND_HELP: u32 = 27;
pub const APPCOMMAND_FIND: u32 = 28;
pub const APPCOMMAND_NEW: u32 = 29;
pub const APPCOMMAND_OPEN: u32 = 30;
pub const APPCOMMAND_CLOSE: u32 = 31;
pub const APPCOMMAND_SAVE: u32 = 32;
pub const APPCOMMAND_PRINT: u32 = 33;
pub const APPCOMMAND_UNDO: u32 = 34;
pub const APPCOMMAND_REDO: u32 = 35;
pub const APPCOMMAND_COPY: u32 = 36;
pub const APPCOMMAND_CUT: u32 = 37;
pub const APPCOMMAND_PASTE: u32 = 38;
pub const APPCOMMAND_REPLY_TO_MAIL: u32 = 39;
pub const APPCOMMAND_FORWARD_MAIL: u32 = 40;
pub const APPCOMMAND_SEND_MAIL: u32 = 41;
pub const APPCOMMAND_SPELL_CHECK: u32 = 42;
pub const APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE: u32 = 43;
pub const APPCOMMAND_MIC_ON_OFF_TOGGLE: u32 = 44;
pub const APPCOMMAND_CORRECTION_LIST: u32 = 45;
pub const APPCOMMAND_MEDIA_PLAY: u32 = 46;
pub const APPCOMMAND_MEDIA_PAUSE: u32 = 47;
pub const APPCOMMAND_MEDIA_RECORD: u32 = 48;
pub const APPCOMMAND_MEDIA_FAST_FORWARD: u32 = 49;
pub const APPCOMMAND_MEDIA_REWIND: u32 = 50;
pub const APPCOMMAND_MEDIA_CHANNEL_UP: u32 = 51;
pub const APPCOMMAND_MEDIA_CHANNEL_DOWN: u32 = 52;
pub const APPCOMMAND_DELETE: u32 = 53;
pub const APPCOMMAND_DWM_FLIP3D: u32 = 54;
pub const FAPPCOMMAND_MOUSE: u32 = 32768;
pub const FAPPCOMMAND_KEY: u32 = 0;
pub const FAPPCOMMAND_OEM: u32 = 4096;
pub const FAPPCOMMAND_MASK: u32 = 61440;
pub const LLKHF_EXTENDED: u32 = 1;
pub const LLKHF_INJECTED: u32 = 16;
pub const LLKHF_ALTDOWN: u32 = 32;
pub const LLKHF_UP: u32 = 128;
pub const LLKHF_LOWER_IL_INJECTED: u32 = 2;
pub const LLMHF_INJECTED: u32 = 1;
pub const LLMHF_LOWER_IL_INJECTED: u32 = 2;
pub const HKL_PREV: u32 = 0;
pub const HKL_NEXT: u32 = 1;
pub const KLF_ACTIVATE: u32 = 1;
pub const KLF_SUBSTITUTE_OK: u32 = 2;
pub const KLF_REORDER: u32 = 8;
pub const KLF_REPLACELANG: u32 = 16;
pub const KLF_NOTELLSHELL: u32 = 128;
pub const KLF_SETFORPROCESS: u32 = 256;
pub const KLF_SHIFTLOCK: u32 = 65536;
pub const KLF_RESET: u32 = 1073741824;
pub const INPUTLANGCHANGE_SYSCHARSET: u32 = 1;
pub const INPUTLANGCHANGE_FORWARD: u32 = 2;
pub const INPUTLANGCHANGE_BACKWARD: u32 = 4;
pub const KL_NAMELENGTH: u32 = 9;
pub const GMMP_USE_DISPLAY_POINTS: u32 = 1;
pub const GMMP_USE_HIGH_RESOLUTION_POINTS: u32 = 2;
pub const DESKTOP_READOBJECTS: u32 = 1;
pub const DESKTOP_CREATEWINDOW: u32 = 2;
pub const DESKTOP_CREATEMENU: u32 = 4;
pub const DESKTOP_HOOKCONTROL: u32 = 8;
pub const DESKTOP_JOURNALRECORD: u32 = 16;
pub const DESKTOP_JOURNALPLAYBACK: u32 = 32;
pub const DESKTOP_ENUMERATE: u32 = 64;
pub const DESKTOP_WRITEOBJECTS: u32 = 128;
pub const DESKTOP_SWITCHDESKTOP: u32 = 256;
pub const DF_ALLOWOTHERACCOUNTHOOK: u32 = 1;
pub const WINSTA_ENUMDESKTOPS: u32 = 1;
pub const WINSTA_READATTRIBUTES: u32 = 2;
pub const WINSTA_ACCESSCLIPBOARD: u32 = 4;
pub const WINSTA_CREATEDESKTOP: u32 = 8;
pub const WINSTA_WRITEATTRIBUTES: u32 = 16;
pub const WINSTA_ACCESSGLOBALATOMS: u32 = 32;
pub const WINSTA_EXITWINDOWS: u32 = 64;
pub const WINSTA_ENUMERATE: u32 = 256;
pub const WINSTA_READSCREEN: u32 = 512;
pub const WINSTA_ALL_ACCESS: u32 = 895;
pub const CWF_CREATE_ONLY: u32 = 1;
pub const WSF_VISIBLE: u32 = 1;
pub const UOI_FLAGS: u32 = 1;
pub const UOI_NAME: u32 = 2;
pub const UOI_TYPE: u32 = 3;
pub const UOI_USER_SID: u32 = 4;
pub const UOI_HEAPSIZE: u32 = 5;
pub const UOI_IO: u32 = 6;
pub const UOI_TIMERPROC_EXCEPTION_SUPPRESSION: u32 = 7;
pub const GWL_WNDPROC: i32 = -4;
pub const GWL_HINSTANCE: i32 = -6;
pub const GWL_HWNDPARENT: i32 = -8;
pub const GWL_STYLE: i32 = -16;
pub const GWL_EXSTYLE: i32 = -20;
pub const GWL_USERDATA: i32 = -21;
pub const GWL_ID: i32 = -12;
pub const GWLP_WNDPROC: i32 = -4;
pub const GWLP_HINSTANCE: i32 = -6;
pub const GWLP_HWNDPARENT: i32 = -8;
pub const GWLP_USERDATA: i32 = -21;
pub const GWLP_ID: i32 = -12;
pub const GCL_MENUNAME: i32 = -8;
pub const GCL_HBRBACKGROUND: i32 = -10;
pub const GCL_HCURSOR: i32 = -12;
pub const GCL_HICON: i32 = -14;
pub const GCL_HMODULE: i32 = -16;
pub const GCL_CBWNDEXTRA: i32 = -18;
pub const GCL_CBCLSEXTRA: i32 = -20;
pub const GCL_WNDPROC: i32 = -24;
pub const GCL_STYLE: i32 = -26;
pub const GCW_ATOM: i32 = -32;
pub const GCL_HICONSM: i32 = -34;
pub const GCLP_MENUNAME: i32 = -8;
pub const GCLP_HBRBACKGROUND: i32 = -10;
pub const GCLP_HCURSOR: i32 = -12;
pub const GCLP_HICON: i32 = -14;
pub const GCLP_HMODULE: i32 = -16;
pub const GCLP_WNDPROC: i32 = -24;
pub const GCLP_HICONSM: i32 = -34;
pub const WM_NULL: u32 = 0;
pub const WM_CREATE: u32 = 1;
pub const WM_DESTROY: u32 = 2;
pub const WM_MOVE: u32 = 3;
pub const WM_SIZE: u32 = 5;
pub const WM_ACTIVATE: u32 = 6;
pub const WA_INACTIVE: u32 = 0;
pub const WA_ACTIVE: u32 = 1;
pub const WA_CLICKACTIVE: u32 = 2;
pub const WM_SETFOCUS: u32 = 7;
pub const WM_KILLFOCUS: u32 = 8;
pub const WM_ENABLE: u32 = 10;
pub const WM_SETREDRAW: u32 = 11;
pub const WM_SETTEXT: u32 = 12;
pub const WM_GETTEXT: u32 = 13;
pub const WM_GETTEXTLENGTH: u32 = 14;
pub const WM_PAINT: u32 = 15;
pub const WM_CLOSE: u32 = 16;
pub const WM_QUERYENDSESSION: u32 = 17;
pub const WM_QUERYOPEN: u32 = 19;
pub const WM_ENDSESSION: u32 = 22;
pub const WM_QUIT: u32 = 18;
pub const WM_ERASEBKGND: u32 = 20;
pub const WM_SYSCOLORCHANGE: u32 = 21;
pub const WM_SHOWWINDOW: u32 = 24;
pub const WM_WININICHANGE: u32 = 26;
pub const WM_SETTINGCHANGE: u32 = 26;
pub const WM_DEVMODECHANGE: u32 = 27;
pub const WM_ACTIVATEAPP: u32 = 28;
pub const WM_FONTCHANGE: u32 = 29;
pub const WM_TIMECHANGE: u32 = 30;
pub const WM_CANCELMODE: u32 = 31;
pub const WM_SETCURSOR: u32 = 32;
pub const WM_MOUSEACTIVATE: u32 = 33;
pub const WM_CHILDACTIVATE: u32 = 34;
pub const WM_QUEUESYNC: u32 = 35;
pub const WM_GETMINMAXINFO: u32 = 36;
pub const WM_PAINTICON: u32 = 38;
pub const WM_ICONERASEBKGND: u32 = 39;
pub const WM_NEXTDLGCTL: u32 = 40;
pub const WM_SPOOLERSTATUS: u32 = 42;
pub const WM_DRAWITEM: u32 = 43;
pub const WM_MEASUREITEM: u32 = 44;
pub const WM_DELETEITEM: u32 = 45;
pub const WM_VKEYTOITEM: u32 = 46;
pub const WM_CHARTOITEM: u32 = 47;
pub const WM_SETFONT: u32 = 48;
pub const WM_GETFONT: u32 = 49;
pub const WM_SETHOTKEY: u32 = 50;
pub const WM_GETHOTKEY: u32 = 51;
pub const WM_QUERYDRAGICON: u32 = 55;
pub const WM_COMPAREITEM: u32 = 57;
pub const WM_GETOBJECT: u32 = 61;
pub const WM_COMPACTING: u32 = 65;
pub const WM_COMMNOTIFY: u32 = 68;
pub const WM_WINDOWPOSCHANGING: u32 = 70;
pub const WM_WINDOWPOSCHANGED: u32 = 71;
pub const WM_POWER: u32 = 72;
pub const PWR_OK: u32 = 1;
pub const PWR_FAIL: i32 = -1;
pub const PWR_SUSPENDREQUEST: u32 = 1;
pub const PWR_SUSPENDRESUME: u32 = 2;
pub const PWR_CRITICALRESUME: u32 = 3;
pub const WM_COPYDATA: u32 = 74;
pub const WM_CANCELJOURNAL: u32 = 75;
pub const WM_NOTIFY: u32 = 78;
pub const WM_INPUTLANGCHANGEREQUEST: u32 = 80;
pub const WM_INPUTLANGCHANGE: u32 = 81;
pub const WM_TCARD: u32 = 82;
pub const WM_HELP: u32 = 83;
pub const WM_USERCHANGED: u32 = 84;
pub const WM_NOTIFYFORMAT: u32 = 85;
pub const NFR_ANSI: u32 = 1;
pub const NFR_UNICODE: u32 = 2;
pub const NF_QUERY: u32 = 3;
pub const NF_REQUERY: u32 = 4;
pub const WM_CONTEXTMENU: u32 = 123;
pub const WM_STYLECHANGING: u32 = 124;
pub const WM_STYLECHANGED: u32 = 125;
pub const WM_DISPLAYCHANGE: u32 = 126;
pub const WM_GETICON: u32 = 127;
pub const WM_SETICON: u32 = 128;
pub const WM_NCCREATE: u32 = 129;
pub const WM_NCDESTROY: u32 = 130;
pub const WM_NCCALCSIZE: u32 = 131;
pub const WM_NCHITTEST: u32 = 132;
pub const WM_NCPAINT: u32 = 133;
pub const WM_NCACTIVATE: u32 = 134;
pub const WM_GETDLGCODE: u32 = 135;
pub const WM_SYNCPAINT: u32 = 136;
pub const WM_NCMOUSEMOVE: u32 = 160;
pub const WM_NCLBUTTONDOWN: u32 = 161;
pub const WM_NCLBUTTONUP: u32 = 162;
pub const WM_NCLBUTTONDBLCLK: u32 = 163;
pub const WM_NCRBUTTONDOWN: u32 = 164;
pub const WM_NCRBUTTONUP: u32 = 165;
pub const WM_NCRBUTTONDBLCLK: u32 = 166;
pub const WM_NCMBUTTONDOWN: u32 = 167;
pub const WM_NCMBUTTONUP: u32 = 168;
pub const WM_NCMBUTTONDBLCLK: u32 = 169;
pub const WM_NCXBUTTONDOWN: u32 = 171;
pub const WM_NCXBUTTONUP: u32 = 172;
pub const WM_NCXBUTTONDBLCLK: u32 = 173;
pub const WM_INPUT_DEVICE_CHANGE: u32 = 254;
pub const WM_INPUT: u32 = 255;
pub const WM_KEYFIRST: u32 = 256;
pub const WM_KEYDOWN: u32 = 256;
pub const WM_KEYUP: u32 = 257;
pub const WM_CHAR: u32 = 258;
pub const WM_DEADCHAR: u32 = 259;
pub const WM_SYSKEYDOWN: u32 = 260;
pub const WM_SYSKEYUP: u32 = 261;
pub const WM_SYSCHAR: u32 = 262;
pub const WM_SYSDEADCHAR: u32 = 263;
pub const WM_UNICHAR: u32 = 265;
pub const WM_KEYLAST: u32 = 265;
pub const UNICODE_NOCHAR: u32 = 65535;
pub const WM_IME_STARTCOMPOSITION: u32 = 269;
pub const WM_IME_ENDCOMPOSITION: u32 = 270;
pub const WM_IME_COMPOSITION: u32 = 271;
pub const WM_IME_KEYLAST: u32 = 271;
pub const WM_INITDIALOG: u32 = 272;
pub const WM_COMMAND: u32 = 273;
pub const WM_SYSCOMMAND: u32 = 274;
pub const WM_TIMER: u32 = 275;
pub const WM_HSCROLL: u32 = 276;
pub const WM_VSCROLL: u32 = 277;
pub const WM_INITMENU: u32 = 278;
pub const WM_INITMENUPOPUP: u32 = 279;
pub const WM_GESTURE: u32 = 281;
pub const WM_GESTURENOTIFY: u32 = 282;
pub const WM_MENUSELECT: u32 = 287;
pub const WM_MENUCHAR: u32 = 288;
pub const WM_ENTERIDLE: u32 = 289;
pub const WM_MENURBUTTONUP: u32 = 290;
pub const WM_MENUDRAG: u32 = 291;
pub const WM_MENUGETOBJECT: u32 = 292;
pub const WM_UNINITMENUPOPUP: u32 = 293;
pub const WM_MENUCOMMAND: u32 = 294;
pub const WM_CHANGEUISTATE: u32 = 295;
pub const WM_UPDATEUISTATE: u32 = 296;
pub const WM_QUERYUISTATE: u32 = 297;
pub const UIS_SET: u32 = 1;
pub const UIS_CLEAR: u32 = 2;
pub const UIS_INITIALIZE: u32 = 3;
pub const UISF_HIDEFOCUS: u32 = 1;
pub const UISF_HIDEACCEL: u32 = 2;
pub const UISF_ACTIVE: u32 = 4;
pub const WM_CTLCOLORMSGBOX: u32 = 306;
pub const WM_CTLCOLOREDIT: u32 = 307;
pub const WM_CTLCOLORLISTBOX: u32 = 308;
pub const WM_CTLCOLORBTN: u32 = 309;
pub const WM_CTLCOLORDLG: u32 = 310;
pub const WM_CTLCOLORSCROLLBAR: u32 = 311;
pub const WM_CTLCOLORSTATIC: u32 = 312;
pub const MN_GETHMENU: u32 = 481;
pub const WM_MOUSEFIRST: u32 = 512;
pub const WM_MOUSEMOVE: u32 = 512;
pub const WM_LBUTTONDOWN: u32 = 513;
pub const WM_LBUTTONUP: u32 = 514;
pub const WM_LBUTTONDBLCLK: u32 = 515;
pub const WM_RBUTTONDOWN: u32 = 516;
pub const WM_RBUTTONUP: u32 = 517;
pub const WM_RBUTTONDBLCLK: u32 = 518;
pub const WM_MBUTTONDOWN: u32 = 519;
pub const WM_MBUTTONUP: u32 = 520;
pub const WM_MBUTTONDBLCLK: u32 = 521;
pub const WM_MOUSEWHEEL: u32 = 522;
pub const WM_XBUTTONDOWN: u32 = 523;
pub const WM_XBUTTONUP: u32 = 524;
pub const WM_XBUTTONDBLCLK: u32 = 525;
pub const WM_MOUSEHWHEEL: u32 = 526;
pub const WM_MOUSELAST: u32 = 526;
pub const WHEEL_DELTA: u32 = 120;
pub const WHEEL_PAGESCROLL: u32 = 4294967295;
pub const XBUTTON1: u32 = 1;
pub const XBUTTON2: u32 = 2;
pub const WM_PARENTNOTIFY: u32 = 528;
pub const WM_ENTERMENULOOP: u32 = 529;
pub const WM_EXITMENULOOP: u32 = 530;
pub const WM_NEXTMENU: u32 = 531;
pub const WM_SIZING: u32 = 532;
pub const WM_CAPTURECHANGED: u32 = 533;
pub const WM_MOVING: u32 = 534;
pub const WM_POWERBROADCAST: u32 = 536;
pub const PBT_APMQUERYSUSPEND: u32 = 0;
pub const PBT_APMQUERYSTANDBY: u32 = 1;
pub const PBT_APMQUERYSUSPENDFAILED: u32 = 2;
pub const PBT_APMQUERYSTANDBYFAILED: u32 = 3;
pub const PBT_APMSUSPEND: u32 = 4;
pub const PBT_APMSTANDBY: u32 = 5;
pub const PBT_APMRESUMECRITICAL: u32 = 6;
pub const PBT_APMRESUMESUSPEND: u32 = 7;
pub const PBT_APMRESUMESTANDBY: u32 = 8;
pub const PBTF_APMRESUMEFROMFAILURE: u32 = 1;
pub const PBT_APMBATTERYLOW: u32 = 9;
pub const PBT_APMPOWERSTATUSCHANGE: u32 = 10;
pub const PBT_APMOEMEVENT: u32 = 11;
pub const PBT_APMRESUMEAUTOMATIC: u32 = 18;
pub const PBT_POWERSETTINGCHANGE: u32 = 32787;
pub const WM_DEVICECHANGE: u32 = 537;
pub const WM_MDICREATE: u32 = 544;
pub const WM_MDIDESTROY: u32 = 545;
pub const WM_MDIACTIVATE: u32 = 546;
pub const WM_MDIRESTORE: u32 = 547;
pub const WM_MDINEXT: u32 = 548;
pub const WM_MDIMAXIMIZE: u32 = 549;
pub const WM_MDITILE: u32 = 550;
pub const WM_MDICASCADE: u32 = 551;
pub const WM_MDIICONARRANGE: u32 = 552;
pub const WM_MDIGETACTIVE: u32 = 553;
pub const WM_MDISETMENU: u32 = 560;
pub const WM_ENTERSIZEMOVE: u32 = 561;
pub const WM_EXITSIZEMOVE: u32 = 562;
pub const WM_DROPFILES: u32 = 563;
pub const WM_MDIREFRESHMENU: u32 = 564;
pub const WM_POINTERDEVICECHANGE: u32 = 568;
pub const WM_POINTERDEVICEINRANGE: u32 = 569;
pub const WM_POINTERDEVICEOUTOFRANGE: u32 = 570;
pub const WM_TOUCH: u32 = 576;
pub const WM_NCPOINTERUPDATE: u32 = 577;
pub const WM_NCPOINTERDOWN: u32 = 578;
pub const WM_NCPOINTERUP: u32 = 579;
pub const WM_POINTERUPDATE: u32 = 581;
pub const WM_POINTERDOWN: u32 = 582;
pub const WM_POINTERUP: u32 = 583;
pub const WM_POINTERENTER: u32 = 585;
pub const WM_POINTERLEAVE: u32 = 586;
pub const WM_POINTERACTIVATE: u32 = 587;
pub const WM_POINTERCAPTURECHANGED: u32 = 588;
pub const WM_TOUCHHITTESTING: u32 = 589;
pub const WM_POINTERWHEEL: u32 = 590;
pub const WM_POINTERHWHEEL: u32 = 591;
pub const DM_POINTERHITTEST: u32 = 592;
pub const WM_POINTERROUTEDTO: u32 = 593;
pub const WM_POINTERROUTEDAWAY: u32 = 594;
pub const WM_POINTERROUTEDRELEASED: u32 = 595;
pub const WM_IME_SETCONTEXT: u32 = 641;
pub const WM_IME_NOTIFY: u32 = 642;
pub const WM_IME_CONTROL: u32 = 643;
pub const WM_IME_COMPOSITIONFULL: u32 = 644;
pub const WM_IME_SELECT: u32 = 645;
pub const WM_IME_CHAR: u32 = 646;
pub const WM_IME_REQUEST: u32 = 648;
pub const WM_IME_KEYDOWN: u32 = 656;
pub const WM_IME_KEYUP: u32 = 657;
pub const WM_MOUSEHOVER: u32 = 673;
pub const WM_MOUSELEAVE: u32 = 675;
pub const WM_NCMOUSEHOVER: u32 = 672;
pub const WM_NCMOUSELEAVE: u32 = 674;
pub const WM_WTSSESSION_CHANGE: u32 = 689;
pub const WM_TABLET_FIRST: u32 = 704;
pub const WM_TABLET_LAST: u32 = 735;
pub const WM_DPICHANGED: u32 = 736;
pub const WM_DPICHANGED_BEFOREPARENT: u32 = 738;
pub const WM_DPICHANGED_AFTERPARENT: u32 = 739;
pub const WM_GETDPISCALEDSIZE: u32 = 740;
pub const WM_CUT: u32 = 768;
pub const WM_COPY: u32 = 769;
pub const WM_PASTE: u32 = 770;
pub const WM_CLEAR: u32 = 771;
pub const WM_UNDO: u32 = 772;
pub const WM_RENDERFORMAT: u32 = 773;
pub const WM_RENDERALLFORMATS: u32 = 774;
pub const WM_DESTROYCLIPBOARD: u32 = 775;
pub const WM_DRAWCLIPBOARD: u32 = 776;
pub const WM_PAINTCLIPBOARD: u32 = 777;
pub const WM_VSCROLLCLIPBOARD: u32 = 778;
pub const WM_SIZECLIPBOARD: u32 = 779;
pub const WM_ASKCBFORMATNAME: u32 = 780;
pub const WM_CHANGECBCHAIN: u32 = 781;
pub const WM_HSCROLLCLIPBOARD: u32 = 782;
pub const WM_QUERYNEWPALETTE: u32 = 783;
pub const WM_PALETTEISCHANGING: u32 = 784;
pub const WM_PALETTECHANGED: u32 = 785;
pub const WM_HOTKEY: u32 = 786;
pub const WM_PRINT: u32 = 791;
pub const WM_PRINTCLIENT: u32 = 792;
pub const WM_APPCOMMAND: u32 = 793;
pub const WM_THEMECHANGED: u32 = 794;
pub const WM_CLIPBOARDUPDATE: u32 = 797;
pub const WM_DWMCOMPOSITIONCHANGED: u32 = 798;
pub const WM_DWMNCRENDERINGCHANGED: u32 = 799;
pub const WM_DWMCOLORIZATIONCOLORCHANGED: u32 = 800;
pub const WM_DWMWINDOWMAXIMIZEDCHANGE: u32 = 801;
pub const WM_DWMSENDICONICTHUMBNAIL: u32 = 803;
pub const WM_DWMSENDICONICLIVEPREVIEWBITMAP: u32 = 806;
pub const WM_GETTITLEBARINFOEX: u32 = 831;
pub const WM_HANDHELDFIRST: u32 = 856;
pub const WM_HANDHELDLAST: u32 = 863;
pub const WM_AFXFIRST: u32 = 864;
pub const WM_AFXLAST: u32 = 895;
pub const WM_PENWINFIRST: u32 = 896;
pub const WM_PENWINLAST: u32 = 911;
pub const WM_APP: u32 = 32768;
pub const WM_USER: u32 = 1024;
pub const WMSZ_LEFT: u32 = 1;
pub const WMSZ_RIGHT: u32 = 2;
pub const WMSZ_TOP: u32 = 3;
pub const WMSZ_TOPLEFT: u32 = 4;
pub const WMSZ_TOPRIGHT: u32 = 5;
pub const WMSZ_BOTTOM: u32 = 6;
pub const WMSZ_BOTTOMLEFT: u32 = 7;
pub const WMSZ_BOTTOMRIGHT: u32 = 8;
pub const HTERROR: i32 = -2;
pub const HTTRANSPARENT: i32 = -1;
pub const HTNOWHERE: u32 = 0;
pub const HTCLIENT: u32 = 1;
pub const HTCAPTION: u32 = 2;
pub const HTSYSMENU: u32 = 3;
pub const HTGROWBOX: u32 = 4;
pub const HTSIZE: u32 = 4;
pub const HTMENU: u32 = 5;
pub const HTHSCROLL: u32 = 6;
pub const HTVSCROLL: u32 = 7;
pub const HTMINBUTTON: u32 = 8;
pub const HTMAXBUTTON: u32 = 9;
pub const HTLEFT: u32 = 10;
pub const HTRIGHT: u32 = 11;
pub const HTTOP: u32 = 12;
pub const HTTOPLEFT: u32 = 13;
pub const HTTOPRIGHT: u32 = 14;
pub const HTBOTTOM: u32 = 15;
pub const HTBOTTOMLEFT: u32 = 16;
pub const HTBOTTOMRIGHT: u32 = 17;
pub const HTBORDER: u32 = 18;
pub const HTREDUCE: u32 = 8;
pub const HTZOOM: u32 = 9;
pub const HTSIZEFIRST: u32 = 10;
pub const HTSIZELAST: u32 = 17;
pub const HTOBJECT: u32 = 19;
pub const HTCLOSE: u32 = 20;
pub const HTHELP: u32 = 21;
pub const SMTO_NORMAL: u32 = 0;
pub const SMTO_BLOCK: u32 = 1;
pub const SMTO_ABORTIFHUNG: u32 = 2;
pub const SMTO_NOTIMEOUTIFNOTHUNG: u32 = 8;
pub const SMTO_ERRORONEXIT: u32 = 32;
pub const MA_ACTIVATE: u32 = 1;
pub const MA_ACTIVATEANDEAT: u32 = 2;
pub const MA_NOACTIVATE: u32 = 3;
pub const MA_NOACTIVATEANDEAT: u32 = 4;
pub const ICON_SMALL: u32 = 0;
pub const ICON_BIG: u32 = 1;
pub const ICON_SMALL2: u32 = 2;
pub const SIZE_RESTORED: u32 = 0;
pub const SIZE_MINIMIZED: u32 = 1;
pub const SIZE_MAXIMIZED: u32 = 2;
pub const SIZE_MAXSHOW: u32 = 3;
pub const SIZE_MAXHIDE: u32 = 4;
pub const SIZENORMAL: u32 = 0;
pub const SIZEICONIC: u32 = 1;
pub const SIZEFULLSCREEN: u32 = 2;
pub const SIZEZOOMSHOW: u32 = 3;
pub const SIZEZOOMHIDE: u32 = 4;
pub const WVR_ALIGNTOP: u32 = 16;
pub const WVR_ALIGNLEFT: u32 = 32;
pub const WVR_ALIGNBOTTOM: u32 = 64;
pub const WVR_ALIGNRIGHT: u32 = 128;
pub const WVR_HREDRAW: u32 = 256;
pub const WVR_VREDRAW: u32 = 512;
pub const WVR_REDRAW: u32 = 768;
pub const WVR_VALIDRECTS: u32 = 1024;
pub const MK_LBUTTON: u32 = 1;
pub const MK_RBUTTON: u32 = 2;
pub const MK_SHIFT: u32 = 4;
pub const MK_CONTROL: u32 = 8;
pub const MK_MBUTTON: u32 = 16;
pub const MK_XBUTTON1: u32 = 32;
pub const MK_XBUTTON2: u32 = 64;
pub const TME_HOVER: u32 = 1;
pub const TME_LEAVE: u32 = 2;
pub const TME_NONCLIENT: u32 = 16;
pub const TME_QUERY: u32 = 1073741824;
pub const TME_CANCEL: u32 = 2147483648;
pub const HOVER_DEFAULT: u32 = 4294967295;
pub const WS_OVERLAPPED: u32 = 0;
pub const WS_POPUP: u32 = 2147483648;
pub const WS_CHILD: u32 = 1073741824;
pub const WS_MINIMIZE: u32 = 536870912;
pub const WS_VISIBLE: u32 = 268435456;
pub const WS_DISABLED: u32 = 134217728;
pub const WS_CLIPSIBLINGS: u32 = 67108864;
pub const WS_CLIPCHILDREN: u32 = 33554432;
pub const WS_MAXIMIZE: u32 = 16777216;
pub const WS_CAPTION: u32 = 12582912;
pub const WS_BORDER: u32 = 8388608;
pub const WS_DLGFRAME: u32 = 4194304;
pub const WS_VSCROLL: u32 = 2097152;
pub const WS_HSCROLL: u32 = 1048576;
pub const WS_SYSMENU: u32 = 524288;
pub const WS_THICKFRAME: u32 = 262144;
pub const WS_GROUP: u32 = 131072;
pub const WS_TABSTOP: u32 = 65536;
pub const WS_MINIMIZEBOX: u32 = 131072;
pub const WS_MAXIMIZEBOX: u32 = 65536;
pub const WS_TILED: u32 = 0;
pub const WS_ICONIC: u32 = 536870912;
pub const WS_SIZEBOX: u32 = 262144;
pub const WS_OVERLAPPEDWINDOW: u32 = 13565952;
pub const WS_POPUPWINDOW: u32 = 2156396544;
pub const WS_CHILDWINDOW: u32 = 1073741824;
pub const WS_EX_DLGMODALFRAME: u32 = 1;
pub const WS_EX_NOPARENTNOTIFY: u32 = 4;
pub const WS_EX_TOPMOST: u32 = 8;
pub const WS_EX_ACCEPTFILES: u32 = 16;
pub const WS_EX_TRANSPARENT: u32 = 32;
pub const WS_EX_MDICHILD: u32 = 64;
pub const WS_EX_TOOLWINDOW: u32 = 128;
pub const WS_EX_WINDOWEDGE: u32 = 256;
pub const WS_EX_CLIENTEDGE: u32 = 512;
pub const WS_EX_CONTEXTHELP: u32 = 1024;
pub const WS_EX_RIGHT: u32 = 4096;
pub const WS_EX_LEFT: u32 = 0;
pub const WS_EX_RTLREADING: u32 = 8192;
pub const WS_EX_LTRREADING: u32 = 0;
pub const WS_EX_LEFTSCROLLBAR: u32 = 16384;
pub const WS_EX_RIGHTSCROLLBAR: u32 = 0;
pub const WS_EX_CONTROLPARENT: u32 = 65536;
pub const WS_EX_STATICEDGE: u32 = 131072;
pub const WS_EX_APPWINDOW: u32 = 262144;
pub const WS_EX_OVERLAPPEDWINDOW: u32 = 768;
pub const WS_EX_PALETTEWINDOW: u32 = 392;
pub const WS_EX_LAYERED: u32 = 524288;
pub const WS_EX_NOINHERITLAYOUT: u32 = 1048576;
pub const WS_EX_NOREDIRECTIONBITMAP: u32 = 2097152;
pub const WS_EX_LAYOUTRTL: u32 = 4194304;
pub const WS_EX_COMPOSITED: u32 = 33554432;
pub const WS_EX_NOACTIVATE: u32 = 134217728;
pub const CS_VREDRAW: u32 = 1;
pub const CS_HREDRAW: u32 = 2;
pub const CS_DBLCLKS: u32 = 8;
pub const CS_OWNDC: u32 = 32;
pub const CS_CLASSDC: u32 = 64;
pub const CS_PARENTDC: u32 = 128;
pub const CS_NOCLOSE: u32 = 512;
pub const CS_SAVEBITS: u32 = 2048;
pub const CS_BYTEALIGNCLIENT: u32 = 4096;
pub const CS_BYTEALIGNWINDOW: u32 = 8192;
pub const CS_GLOBALCLASS: u32 = 16384;
pub const CS_IME: u32 = 65536;
pub const CS_DROPSHADOW: u32 = 131072;
pub const PRF_CHECKVISIBLE: u32 = 1;
pub const PRF_NONCLIENT: u32 = 2;
pub const PRF_CLIENT: u32 = 4;
pub const PRF_ERASEBKGND: u32 = 8;
pub const PRF_CHILDREN: u32 = 16;
pub const PRF_OWNED: u32 = 32;
pub const BDR_RAISEDOUTER: u32 = 1;
pub const BDR_SUNKENOUTER: u32 = 2;
pub const BDR_RAISEDINNER: u32 = 4;
pub const BDR_SUNKENINNER: u32 = 8;
pub const BDR_OUTER: u32 = 3;
pub const BDR_INNER: u32 = 12;
pub const BDR_RAISED: u32 = 5;
pub const BDR_SUNKEN: u32 = 10;
pub const EDGE_RAISED: u32 = 5;
pub const EDGE_SUNKEN: u32 = 10;
pub const EDGE_ETCHED: u32 = 6;
pub const EDGE_BUMP: u32 = 9;
pub const BF_LEFT: u32 = 1;
pub const BF_TOP: u32 = 2;
pub const BF_RIGHT: u32 = 4;
pub const BF_BOTTOM: u32 = 8;
pub const BF_TOPLEFT: u32 = 3;
pub const BF_TOPRIGHT: u32 = 6;
pub const BF_BOTTOMLEFT: u32 = 9;
pub const BF_BOTTOMRIGHT: u32 = 12;
pub const BF_RECT: u32 = 15;
pub const BF_DIAGONAL: u32 = 16;
pub const BF_DIAGONAL_ENDTOPRIGHT: u32 = 22;
pub const BF_DIAGONAL_ENDTOPLEFT: u32 = 19;
pub const BF_DIAGONAL_ENDBOTTOMLEFT: u32 = 25;
pub const BF_DIAGONAL_ENDBOTTOMRIGHT: u32 = 28;
pub const BF_MIDDLE: u32 = 2048;
pub const BF_SOFT: u32 = 4096;
pub const BF_ADJUST: u32 = 8192;
pub const BF_FLAT: u32 = 16384;
pub const BF_MONO: u32 = 32768;
pub const DFC_CAPTION: u32 = 1;
pub const DFC_MENU: u32 = 2;
pub const DFC_SCROLL: u32 = 3;
pub const DFC_BUTTON: u32 = 4;
pub const DFC_POPUPMENU: u32 = 5;
pub const DFCS_CAPTIONCLOSE: u32 = 0;
pub const DFCS_CAPTIONMIN: u32 = 1;
pub const DFCS_CAPTIONMAX: u32 = 2;
pub const DFCS_CAPTIONRESTORE: u32 = 3;
pub const DFCS_CAPTIONHELP: u32 = 4;
pub const DFCS_MENUARROW: u32 = 0;
pub const DFCS_MENUCHECK: u32 = 1;
pub const DFCS_MENUBULLET: u32 = 2;
pub const DFCS_MENUARROWRIGHT: u32 = 4;
pub const DFCS_SCROLLUP: u32 = 0;
pub const DFCS_SCROLLDOWN: u32 = 1;
pub const DFCS_SCROLLLEFT: u32 = 2;
pub const DFCS_SCROLLRIGHT: u32 = 3;
pub const DFCS_SCROLLCOMBOBOX: u32 = 5;
pub const DFCS_SCROLLSIZEGRIP: u32 = 8;
pub const DFCS_SCROLLSIZEGRIPRIGHT: u32 = 16;
pub const DFCS_BUTTONCHECK: u32 = 0;
pub const DFCS_BUTTONRADIOIMAGE: u32 = 1;
pub const DFCS_BUTTONRADIOMASK: u32 = 2;
pub const DFCS_BUTTONRADIO: u32 = 4;
pub const DFCS_BUTTON3STATE: u32 = 8;
pub const DFCS_BUTTONPUSH: u32 = 16;
pub const DFCS_INACTIVE: u32 = 256;
pub const DFCS_PUSHED: u32 = 512;
pub const DFCS_CHECKED: u32 = 1024;
pub const DFCS_TRANSPARENT: u32 = 2048;
pub const DFCS_HOT: u32 = 4096;
pub const DFCS_ADJUSTRECT: u32 = 8192;
pub const DFCS_FLAT: u32 = 16384;
pub const DFCS_MONO: u32 = 32768;
pub const DC_ACTIVE: u32 = 1;
pub const DC_SMALLCAP: u32 = 2;
pub const DC_ICON: u32 = 4;
pub const DC_TEXT: u32 = 8;
pub const DC_INBUTTON: u32 = 16;
pub const DC_GRADIENT: u32 = 32;
pub const DC_BUTTONS: u32 = 4096;
pub const IDANI_OPEN: u32 = 1;
pub const IDANI_CAPTION: u32 = 3;
pub const CF_TEXT: u32 = 1;
pub const CF_BITMAP: u32 = 2;
pub const CF_METAFILEPICT: u32 = 3;
pub const CF_SYLK: u32 = 4;
pub const CF_DIF: u32 = 5;
pub const CF_TIFF: u32 = 6;
pub const CF_OEMTEXT: u32 = 7;
pub const CF_DIB: u32 = 8;
pub const CF_PALETTE: u32 = 9;
pub const CF_PENDATA: u32 = 10;
pub const CF_RIFF: u32 = 11;
pub const CF_WAVE: u32 = 12;
pub const CF_UNICODETEXT: u32 = 13;
pub const CF_ENHMETAFILE: u32 = 14;
pub const CF_HDROP: u32 = 15;
pub const CF_LOCALE: u32 = 16;
pub const CF_DIBV5: u32 = 17;
pub const CF_MAX: u32 = 18;
pub const CF_OWNERDISPLAY: u32 = 128;
pub const CF_DSPTEXT: u32 = 129;
pub const CF_DSPBITMAP: u32 = 130;
pub const CF_DSPMETAFILEPICT: u32 = 131;
pub const CF_DSPENHMETAFILE: u32 = 142;
pub const CF_PRIVATEFIRST: u32 = 512;
pub const CF_PRIVATELAST: u32 = 767;
pub const CF_GDIOBJFIRST: u32 = 768;
pub const CF_GDIOBJLAST: u32 = 1023;
pub const FVIRTKEY: u32 = 1;
pub const FNOINVERT: u32 = 2;
pub const FSHIFT: u32 = 4;
pub const FCONTROL: u32 = 8;
pub const FALT: u32 = 16;
pub const WPF_SETMINPOSITION: u32 = 1;
pub const WPF_RESTORETOMAXIMIZED: u32 = 2;
pub const WPF_ASYNCWINDOWPLACEMENT: u32 = 4;
pub const ODT_MENU: u32 = 1;
pub const ODT_LISTBOX: u32 = 2;
pub const ODT_COMBOBOX: u32 = 3;
pub const ODT_BUTTON: u32 = 4;
pub const ODT_STATIC: u32 = 5;
pub const ODA_DRAWENTIRE: u32 = 1;
pub const ODA_SELECT: u32 = 2;
pub const ODA_FOCUS: u32 = 4;
pub const ODS_SELECTED: u32 = 1;
pub const ODS_GRAYED: u32 = 2;
pub const ODS_DISABLED: u32 = 4;
pub const ODS_CHECKED: u32 = 8;
pub const ODS_FOCUS: u32 = 16;
pub const ODS_DEFAULT: u32 = 32;
pub const ODS_COMBOBOXEDIT: u32 = 4096;
pub const ODS_HOTLIGHT: u32 = 64;
pub const ODS_INACTIVE: u32 = 128;
pub const ODS_NOACCEL: u32 = 256;
pub const ODS_NOFOCUSRECT: u32 = 512;
pub const PM_NOREMOVE: u32 = 0;
pub const PM_REMOVE: u32 = 1;
pub const PM_NOYIELD: u32 = 2;
pub const MOD_ALT: u32 = 1;
pub const MOD_CONTROL: u32 = 2;
pub const MOD_SHIFT: u32 = 4;
pub const MOD_WIN: u32 = 8;
pub const MOD_NOREPEAT: u32 = 16384;
pub const IDHOT_SNAPWINDOW: i32 = -1;
pub const IDHOT_SNAPDESKTOP: i32 = -2;
pub const ENDSESSION_CLOSEAPP: u32 = 1;
pub const ENDSESSION_CRITICAL: u32 = 1073741824;
pub const ENDSESSION_LOGOFF: u32 = 2147483648;
pub const EWX_LOGOFF: u32 = 0;
pub const EWX_SHUTDOWN: u32 = 1;
pub const EWX_REBOOT: u32 = 2;
pub const EWX_FORCE: u32 = 4;
pub const EWX_POWEROFF: u32 = 8;
pub const EWX_FORCEIFHUNG: u32 = 16;
pub const EWX_QUICKRESOLVE: u32 = 32;
pub const EWX_RESTARTAPPS: u32 = 64;
pub const EWX_HYBRID_SHUTDOWN: u32 = 4194304;
pub const EWX_BOOTOPTIONS: u32 = 16777216;
pub const BSM_ALLCOMPONENTS: u32 = 0;
pub const BSM_VXDS: u32 = 1;
pub const BSM_NETDRIVER: u32 = 2;
pub const BSM_INSTALLABLEDRIVERS: u32 = 4;
pub const BSM_APPLICATIONS: u32 = 8;
pub const BSM_ALLDESKTOPS: u32 = 16;
pub const BSF_QUERY: u32 = 1;
pub const BSF_IGNORECURRENTTASK: u32 = 2;
pub const BSF_FLUSHDISK: u32 = 4;
pub const BSF_NOHANG: u32 = 8;
pub const BSF_POSTMESSAGE: u32 = 16;
pub const BSF_FORCEIFHUNG: u32 = 32;
pub const BSF_NOTIMEOUTIFNOTHUNG: u32 = 64;
pub const BSF_ALLOWSFW: u32 = 128;
pub const BSF_SENDNOTIFYMESSAGE: u32 = 256;
pub const BSF_RETURNHDESK: u32 = 512;
pub const BSF_LUID: u32 = 1024;
pub const BROADCAST_QUERY_DENY: u32 = 1112363332;
pub const DEVICE_NOTIFY_WINDOW_HANDLE: u32 = 0;
pub const DEVICE_NOTIFY_SERVICE_HANDLE: u32 = 1;
pub const DEVICE_NOTIFY_ALL_INTERFACE_CLASSES: u32 = 4;
pub const ISMEX_NOSEND: u32 = 0;
pub const ISMEX_SEND: u32 = 1;
pub const ISMEX_NOTIFY: u32 = 2;
pub const ISMEX_CALLBACK: u32 = 4;
pub const ISMEX_REPLIED: u32 = 8;
pub const PW_CLIENTONLY: u32 = 1;
pub const PW_RENDERFULLCONTENT: u32 = 2;
pub const LWA_COLORKEY: u32 = 1;
pub const LWA_ALPHA: u32 = 2;
pub const ULW_COLORKEY: u32 = 1;
pub const ULW_ALPHA: u32 = 2;
pub const ULW_OPAQUE: u32 = 4;
pub const ULW_EX_NORESIZE: u32 = 8;
pub const FLASHW_STOP: u32 = 0;
pub const FLASHW_CAPTION: u32 = 1;
pub const FLASHW_TRAY: u32 = 2;
pub const FLASHW_ALL: u32 = 3;
pub const FLASHW_TIMER: u32 = 4;
pub const FLASHW_TIMERNOFG: u32 = 12;
pub const WDA_NONE: u32 = 0;
pub const WDA_MONITOR: u32 = 1;
pub const SWP_NOSIZE: u32 = 1;
pub const SWP_NOMOVE: u32 = 2;
pub const SWP_NOZORDER: u32 = 4;
pub const SWP_NOREDRAW: u32 = 8;
pub const SWP_NOACTIVATE: u32 = 16;
pub const SWP_FRAMECHANGED: u32 = 32;
pub const SWP_SHOWWINDOW: u32 = 64;
pub const SWP_HIDEWINDOW: u32 = 128;
pub const SWP_NOCOPYBITS: u32 = 256;
pub const SWP_NOOWNERZORDER: u32 = 512;
pub const SWP_NOSENDCHANGING: u32 = 1024;
pub const SWP_DRAWFRAME: u32 = 32;
pub const SWP_NOREPOSITION: u32 = 512;
pub const SWP_DEFERERASE: u32 = 8192;
pub const SWP_ASYNCWINDOWPOS: u32 = 16384;
pub const DLGWINDOWEXTRA: u32 = 30;
pub const KEYEVENTF_EXTENDEDKEY: u32 = 1;
pub const KEYEVENTF_KEYUP: u32 = 2;
pub const KEYEVENTF_UNICODE: u32 = 4;
pub const KEYEVENTF_SCANCODE: u32 = 8;
pub const MOUSEEVENTF_MOVE: u32 = 1;
pub const MOUSEEVENTF_LEFTDOWN: u32 = 2;
pub const MOUSEEVENTF_LEFTUP: u32 = 4;
pub const MOUSEEVENTF_RIGHTDOWN: u32 = 8;
pub const MOUSEEVENTF_RIGHTUP: u32 = 16;
pub const MOUSEEVENTF_MIDDLEDOWN: u32 = 32;
pub const MOUSEEVENTF_MIDDLEUP: u32 = 64;
pub const MOUSEEVENTF_XDOWN: u32 = 128;
pub const MOUSEEVENTF_XUP: u32 = 256;
pub const MOUSEEVENTF_WHEEL: u32 = 2048;
pub const MOUSEEVENTF_HWHEEL: u32 = 4096;
pub const MOUSEEVENTF_MOVE_NOCOALESCE: u32 = 8192;
pub const MOUSEEVENTF_VIRTUALDESK: u32 = 16384;
pub const MOUSEEVENTF_ABSOLUTE: u32 = 32768;
pub const INPUT_MOUSE: u32 = 0;
pub const INPUT_KEYBOARD: u32 = 1;
pub const INPUT_HARDWARE: u32 = 2;
pub const TOUCHEVENTF_MOVE: u32 = 1;
pub const TOUCHEVENTF_DOWN: u32 = 2;
pub const TOUCHEVENTF_UP: u32 = 4;
pub const TOUCHEVENTF_INRANGE: u32 = 8;
pub const TOUCHEVENTF_PRIMARY: u32 = 16;
pub const TOUCHEVENTF_NOCOALESCE: u32 = 32;
pub const TOUCHEVENTF_PEN: u32 = 64;
pub const TOUCHEVENTF_PALM: u32 = 128;
pub const TOUCHINPUTMASKF_TIMEFROMSYSTEM: u32 = 1;
pub const TOUCHINPUTMASKF_EXTRAINFO: u32 = 2;
pub const TOUCHINPUTMASKF_CONTACTAREA: u32 = 4;
pub const TWF_FINETOUCH: u32 = 1;
pub const TWF_WANTPALM: u32 = 2;
pub const POINTER_FLAG_NONE: u32 = 0;
pub const POINTER_FLAG_NEW: u32 = 1;
pub const POINTER_FLAG_INRANGE: u32 = 2;
pub const POINTER_FLAG_INCONTACT: u32 = 4;
pub const POINTER_FLAG_FIRSTBUTTON: u32 = 16;
pub const POINTER_FLAG_SECONDBUTTON: u32 = 32;
pub const POINTER_FLAG_THIRDBUTTON: u32 = 64;
pub const POINTER_FLAG_FOURTHBUTTON: u32 = 128;
pub const POINTER_FLAG_FIFTHBUTTON: u32 = 256;
pub const POINTER_FLAG_PRIMARY: u32 = 8192;
pub const POINTER_FLAG_CONFIDENCE: u32 = 16384;
pub const POINTER_FLAG_CANCELED: u32 = 32768;
pub const POINTER_FLAG_DOWN: u32 = 65536;
pub const POINTER_FLAG_UPDATE: u32 = 131072;
pub const POINTER_FLAG_UP: u32 = 262144;
pub const POINTER_FLAG_WHEEL: u32 = 524288;
pub const POINTER_FLAG_HWHEEL: u32 = 1048576;
pub const POINTER_FLAG_CAPTURECHANGED: u32 = 2097152;
pub const POINTER_FLAG_HASTRANSFORM: u32 = 4194304;
pub const POINTER_MOD_SHIFT: u32 = 4;
pub const POINTER_MOD_CTRL: u32 = 8;
pub const TOUCH_FLAG_NONE: u32 = 0;
pub const TOUCH_MASK_NONE: u32 = 0;
pub const TOUCH_MASK_CONTACTAREA: u32 = 1;
pub const TOUCH_MASK_ORIENTATION: u32 = 2;
pub const TOUCH_MASK_PRESSURE: u32 = 4;
pub const PEN_FLAG_NONE: u32 = 0;
pub const PEN_FLAG_BARREL: u32 = 1;
pub const PEN_FLAG_INVERTED: u32 = 2;
pub const PEN_FLAG_ERASER: u32 = 4;
pub const PEN_MASK_NONE: u32 = 0;
pub const PEN_MASK_PRESSURE: u32 = 1;
pub const PEN_MASK_ROTATION: u32 = 2;
pub const PEN_MASK_TILT_X: u32 = 4;
pub const PEN_MASK_TILT_Y: u32 = 8;
pub const POINTER_MESSAGE_FLAG_NEW: u32 = 1;
pub const POINTER_MESSAGE_FLAG_INRANGE: u32 = 2;
pub const POINTER_MESSAGE_FLAG_INCONTACT: u32 = 4;
pub const POINTER_MESSAGE_FLAG_FIRSTBUTTON: u32 = 16;
pub const POINTER_MESSAGE_FLAG_SECONDBUTTON: u32 = 32;
pub const POINTER_MESSAGE_FLAG_THIRDBUTTON: u32 = 64;
pub const POINTER_MESSAGE_FLAG_FOURTHBUTTON: u32 = 128;
pub const POINTER_MESSAGE_FLAG_FIFTHBUTTON: u32 = 256;
pub const POINTER_MESSAGE_FLAG_PRIMARY: u32 = 8192;
pub const POINTER_MESSAGE_FLAG_CONFIDENCE: u32 = 16384;
pub const POINTER_MESSAGE_FLAG_CANCELED: u32 = 32768;
pub const PA_ACTIVATE: u32 = 1;
pub const PA_NOACTIVATE: u32 = 3;
pub const MAX_TOUCH_COUNT: u32 = 256;
pub const TOUCH_FEEDBACK_DEFAULT: u32 = 1;
pub const TOUCH_FEEDBACK_INDIRECT: u32 = 2;
pub const TOUCH_FEEDBACK_NONE: u32 = 3;
pub const TOUCH_HIT_TESTING_DEFAULT: u32 = 0;
pub const TOUCH_HIT_TESTING_CLIENT: u32 = 1;
pub const TOUCH_HIT_TESTING_NONE: u32 = 2;
pub const TOUCH_HIT_TESTING_PROXIMITY_CLOSEST: u32 = 0;
pub const TOUCH_HIT_TESTING_PROXIMITY_FARTHEST: u32 = 4095;
pub const GWFS_INCLUDE_ANCESTORS: u32 = 1;
pub const MAPVK_VK_TO_VSC: u32 = 0;
pub const MAPVK_VSC_TO_VK: u32 = 1;
pub const MAPVK_VK_TO_CHAR: u32 = 2;
pub const MAPVK_VSC_TO_VK_EX: u32 = 3;
pub const MAPVK_VK_TO_VSC_EX: u32 = 4;
pub const MWMO_WAITALL: u32 = 1;
pub const MWMO_ALERTABLE: u32 = 2;
pub const MWMO_INPUTAVAILABLE: u32 = 4;
pub const QS_KEY: u32 = 1;
pub const QS_MOUSEMOVE: u32 = 2;
pub const QS_MOUSEBUTTON: u32 = 4;
pub const QS_POSTMESSAGE: u32 = 8;
pub const QS_TIMER: u32 = 16;
pub const QS_PAINT: u32 = 32;
pub const QS_SENDMESSAGE: u32 = 64;
pub const QS_HOTKEY: u32 = 128;
pub const QS_ALLPOSTMESSAGE: u32 = 256;
pub const QS_RAWINPUT: u32 = 1024;
pub const QS_TOUCH: u32 = 2048;
pub const QS_POINTER: u32 = 4096;
pub const QS_MOUSE: u32 = 6;
pub const QS_INPUT: u32 = 7175;
pub const QS_ALLEVENTS: u32 = 7359;
pub const QS_ALLINPUT: u32 = 7423;
pub const USER_TIMER_MAXIMUM: u32 = 2147483647;
pub const USER_TIMER_MINIMUM: u32 = 10;
pub const TIMERV_DEFAULT_COALESCING: u32 = 0;
pub const TIMERV_NO_COALESCING: u32 = 4294967295;
pub const TIMERV_COALESCING_MIN: u32 = 1;
pub const TIMERV_COALESCING_MAX: u32 = 2147483637;
pub const SM_CXSCREEN: u32 = 0;
pub const SM_CYSCREEN: u32 = 1;
pub const SM_CXVSCROLL: u32 = 2;
pub const SM_CYHSCROLL: u32 = 3;
pub const SM_CYCAPTION: u32 = 4;
pub const SM_CXBORDER: u32 = 5;
pub const SM_CYBORDER: u32 = 6;
pub const SM_CXDLGFRAME: u32 = 7;
pub const SM_CYDLGFRAME: u32 = 8;
pub const SM_CYVTHUMB: u32 = 9;
pub const SM_CXHTHUMB: u32 = 10;
pub const SM_CXICON: u32 = 11;
pub const SM_CYICON: u32 = 12;
pub const SM_CXCURSOR: u32 = 13;
pub const SM_CYCURSOR: u32 = 14;
pub const SM_CYMENU: u32 = 15;
pub const SM_CXFULLSCREEN: u32 = 16;
pub const SM_CYFULLSCREEN: u32 = 17;
pub const SM_CYKANJIWINDOW: u32 = 18;
pub const SM_MOUSEPRESENT: u32 = 19;
pub const SM_CYVSCROLL: u32 = 20;
pub const SM_CXHSCROLL: u32 = 21;
pub const SM_DEBUG: u32 = 22;
pub const SM_SWAPBUTTON: u32 = 23;
pub const SM_RESERVED1: u32 = 24;
pub const SM_RESERVED2: u32 = 25;
pub const SM_RESERVED3: u32 = 26;
pub const SM_RESERVED4: u32 = 27;
pub const SM_CXMIN: u32 = 28;
pub const SM_CYMIN: u32 = 29;
pub const SM_CXSIZE: u32 = 30;
pub const SM_CYSIZE: u32 = 31;
pub const SM_CXFRAME: u32 = 32;
pub const SM_CYFRAME: u32 = 33;
pub const SM_CXMINTRACK: u32 = 34;
pub const SM_CYMINTRACK: u32 = 35;
pub const SM_CXDOUBLECLK: u32 = 36;
pub const SM_CYDOUBLECLK: u32 = 37;
pub const SM_CXICONSPACING: u32 = 38;
pub const SM_CYICONSPACING: u32 = 39;
pub const SM_MENUDROPALIGNMENT: u32 = 40;
pub const SM_PENWINDOWS: u32 = 41;
pub const SM_DBCSENABLED: u32 = 42;
pub const SM_CMOUSEBUTTONS: u32 = 43;
pub const SM_CXFIXEDFRAME: u32 = 7;
pub const SM_CYFIXEDFRAME: u32 = 8;
pub const SM_CXSIZEFRAME: u32 = 32;
pub const SM_CYSIZEFRAME: u32 = 33;
pub const SM_SECURE: u32 = 44;
pub const SM_CXEDGE: u32 = 45;
pub const SM_CYEDGE: u32 = 46;
pub const SM_CXMINSPACING: u32 = 47;
pub const SM_CYMINSPACING: u32 = 48;
pub const SM_CXSMICON: u32 = 49;
pub const SM_CYSMICON: u32 = 50;
pub const SM_CYSMCAPTION: u32 = 51;
pub const SM_CXSMSIZE: u32 = 52;
pub const SM_CYSMSIZE: u32 = 53;
pub const SM_CXMENUSIZE: u32 = 54;
pub const SM_CYMENUSIZE: u32 = 55;
pub const SM_ARRANGE: u32 = 56;
pub const SM_CXMINIMIZED: u32 = 57;
pub const SM_CYMINIMIZED: u32 = 58;
pub const SM_CXMAXTRACK: u32 = 59;
pub const SM_CYMAXTRACK: u32 = 60;
pub const SM_CXMAXIMIZED: u32 = 61;
pub const SM_CYMAXIMIZED: u32 = 62;
pub const SM_NETWORK: u32 = 63;
pub const SM_CLEANBOOT: u32 = 67;
pub const SM_CXDRAG: u32 = 68;
pub const SM_CYDRAG: u32 = 69;
pub const SM_SHOWSOUNDS: u32 = 70;
pub const SM_CXMENUCHECK: u32 = 71;
pub const SM_CYMENUCHECK: u32 = 72;
pub const SM_SLOWMACHINE: u32 = 73;
pub const SM_MIDEASTENABLED: u32 = 74;
pub const SM_MOUSEWHEELPRESENT: u32 = 75;
pub const SM_XVIRTUALSCREEN: u32 = 76;
pub const SM_YVIRTUALSCREEN: u32 = 77;
pub const SM_CXVIRTUALSCREEN: u32 = 78;
pub const SM_CYVIRTUALSCREEN: u32 = 79;
pub const SM_CMONITORS: u32 = 80;
pub const SM_SAMEDISPLAYFORMAT: u32 = 81;
pub const SM_IMMENABLED: u32 = 82;
pub const SM_CXFOCUSBORDER: u32 = 83;
pub const SM_CYFOCUSBORDER: u32 = 84;
pub const SM_TABLETPC: u32 = 86;
pub const SM_MEDIACENTER: u32 = 87;
pub const SM_STARTER: u32 = 88;
pub const SM_SERVERR2: u32 = 89;
pub const SM_MOUSEHORIZONTALWHEELPRESENT: u32 = 91;
pub const SM_CXPADDEDBORDER: u32 = 92;
pub const SM_DIGITIZER: u32 = 94;
pub const SM_MAXIMUMTOUCHES: u32 = 95;
pub const SM_CMETRICS: u32 = 97;
pub const SM_REMOTESESSION: u32 = 4096;
pub const SM_SHUTTINGDOWN: u32 = 8192;
pub const SM_REMOTECONTROL: u32 = 8193;
pub const SM_CARETBLINKINGENABLED: u32 = 8194;
pub const SM_CONVERTIBLESLATEMODE: u32 = 8195;
pub const SM_SYSTEMDOCKED: u32 = 8196;
pub const PMB_ACTIVE: u32 = 1;
pub const MNC_IGNORE: u32 = 0;
pub const MNC_CLOSE: u32 = 1;
pub const MNC_EXECUTE: u32 = 2;
pub const MNC_SELECT: u32 = 3;
pub const MNS_NOCHECK: u32 = 2147483648;
pub const MNS_MODELESS: u32 = 1073741824;
pub const MNS_DRAGDROP: u32 = 536870912;
pub const MNS_AUTODISMISS: u32 = 268435456;
pub const MNS_NOTIFYBYPOS: u32 = 134217728;
pub const MNS_CHECKORBMP: u32 = 67108864;
pub const MIM_MAXHEIGHT: u32 = 1;
pub const MIM_BACKGROUND: u32 = 2;
pub const MIM_HELPID: u32 = 4;
pub const MIM_MENUDATA: u32 = 8;
pub const MIM_STYLE: u32 = 16;
pub const MIM_APPLYTOSUBMENUS: u32 = 2147483648;
pub const MND_CONTINUE: u32 = 0;
pub const MND_ENDMENU: u32 = 1;
pub const MNGOF_TOPGAP: u32 = 1;
pub const MNGOF_BOTTOMGAP: u32 = 2;
pub const MNGO_NOINTERFACE: u32 = 0;
pub const MNGO_NOERROR: u32 = 1;
pub const MIIM_STATE: u32 = 1;
pub const MIIM_ID: u32 = 2;
pub const MIIM_SUBMENU: u32 = 4;
pub const MIIM_CHECKMARKS: u32 = 8;
pub const MIIM_TYPE: u32 = 16;
pub const MIIM_DATA: u32 = 32;
pub const MIIM_STRING: u32 = 64;
pub const MIIM_BITMAP: u32 = 128;
pub const MIIM_FTYPE: u32 = 256;
pub const GMDI_USEDISABLED: u32 = 1;
pub const GMDI_GOINTOPOPUPS: u32 = 2;
pub const TPM_LEFTBUTTON: u32 = 0;
pub const TPM_RIGHTBUTTON: u32 = 2;
pub const TPM_LEFTALIGN: u32 = 0;
pub const TPM_CENTERALIGN: u32 = 4;
pub const TPM_RIGHTALIGN: u32 = 8;
pub const TPM_TOPALIGN: u32 = 0;
pub const TPM_VCENTERALIGN: u32 = 16;
pub const TPM_BOTTOMALIGN: u32 = 32;
pub const TPM_HORIZONTAL: u32 = 0;
pub const TPM_VERTICAL: u32 = 64;
pub const TPM_NONOTIFY: u32 = 128;
pub const TPM_RETURNCMD: u32 = 256;
pub const TPM_RECURSE: u32 = 1;
pub const TPM_HORPOSANIMATION: u32 = 1024;
pub const TPM_HORNEGANIMATION: u32 = 2048;
pub const TPM_VERPOSANIMATION: u32 = 4096;
pub const TPM_VERNEGANIMATION: u32 = 8192;
pub const TPM_NOANIMATION: u32 = 16384;
pub const TPM_LAYOUTRTL: u32 = 32768;
pub const TPM_WORKAREA: u32 = 65536;
pub const DOF_EXECUTABLE: u32 = 32769;
pub const DOF_DOCUMENT: u32 = 32770;
pub const DOF_DIRECTORY: u32 = 32771;
pub const DOF_MULTIPLE: u32 = 32772;
pub const DOF_PROGMAN: u32 = 1;
pub const DOF_SHELLDATA: u32 = 2;
pub const DO_DROPFILE: u32 = 1162627398;
pub const DO_PRINTFILE: u32 = 1414419024;
pub const DT_TOP: u32 = 0;
pub const DT_LEFT: u32 = 0;
pub const DT_CENTER: u32 = 1;
pub const DT_RIGHT: u32 = 2;
pub const DT_VCENTER: u32 = 4;
pub const DT_BOTTOM: u32 = 8;
pub const DT_WORDBREAK: u32 = 16;
pub const DT_SINGLELINE: u32 = 32;
pub const DT_EXPANDTABS: u32 = 64;
pub const DT_TABSTOP: u32 = 128;
pub const DT_NOCLIP: u32 = 256;
pub const DT_EXTERNALLEADING: u32 = 512;
pub const DT_CALCRECT: u32 = 1024;
pub const DT_NOPREFIX: u32 = 2048;
pub const DT_INTERNAL: u32 = 4096;
pub const DT_EDITCONTROL: u32 = 8192;
pub const DT_PATH_ELLIPSIS: u32 = 16384;
pub const DT_END_ELLIPSIS: u32 = 32768;
pub const DT_MODIFYSTRING: u32 = 65536;
pub const DT_RTLREADING: u32 = 131072;
pub const DT_WORD_ELLIPSIS: u32 = 262144;
pub const DT_NOFULLWIDTHCHARBREAK: u32 = 524288;
pub const DT_HIDEPREFIX: u32 = 1048576;
pub const DT_PREFIXONLY: u32 = 2097152;
pub const DST_COMPLEX: u32 = 0;
pub const DST_TEXT: u32 = 1;
pub const DST_PREFIXTEXT: u32 = 2;
pub const DST_ICON: u32 = 3;
pub const DST_BITMAP: u32 = 4;
pub const DSS_NORMAL: u32 = 0;
pub const DSS_UNION: u32 = 16;
pub const DSS_DISABLED: u32 = 32;
pub const DSS_MONO: u32 = 128;
pub const DSS_HIDEPREFIX: u32 = 512;
pub const DSS_PREFIXONLY: u32 = 1024;
pub const DSS_RIGHT: u32 = 32768;
pub const LSFW_LOCK: u32 = 1;
pub const LSFW_UNLOCK: u32 = 2;
pub const DCX_WINDOW: u32 = 1;
pub const DCX_CACHE: u32 = 2;
pub const DCX_NORESETATTRS: u32 = 4;
pub const DCX_CLIPCHILDREN: u32 = 8;
pub const DCX_CLIPSIBLINGS: u32 = 16;
pub const DCX_PARENTCLIP: u32 = 32;
pub const DCX_EXCLUDERGN: u32 = 64;
pub const DCX_INTERSECTRGN: u32 = 128;
pub const DCX_EXCLUDEUPDATE: u32 = 256;
pub const DCX_INTERSECTUPDATE: u32 = 512;
pub const DCX_LOCKWINDOWUPDATE: u32 = 1024;
pub const DCX_VALIDATE: u32 = 2097152;
pub const RDW_INVALIDATE: u32 = 1;
pub const RDW_INTERNALPAINT: u32 = 2;
pub const RDW_ERASE: u32 = 4;
pub const RDW_VALIDATE: u32 = 8;
pub const RDW_NOINTERNALPAINT: u32 = 16;
pub const RDW_NOERASE: u32 = 32;
pub const RDW_NOCHILDREN: u32 = 64;
pub const RDW_ALLCHILDREN: u32 = 128;
pub const RDW_UPDATENOW: u32 = 256;
pub const RDW_ERASENOW: u32 = 512;
pub const RDW_FRAME: u32 = 1024;
pub const RDW_NOFRAME: u32 = 2048;
pub const SW_SCROLLCHILDREN: u32 = 1;
pub const SW_INVALIDATE: u32 = 2;
pub const SW_ERASE: u32 = 4;
pub const SW_SMOOTHSCROLL: u32 = 16;
pub const ESB_ENABLE_BOTH: u32 = 0;
pub const ESB_DISABLE_BOTH: u32 = 3;
pub const ESB_DISABLE_LEFT: u32 = 1;
pub const ESB_DISABLE_RIGHT: u32 = 2;
pub const ESB_DISABLE_UP: u32 = 1;
pub const ESB_DISABLE_DOWN: u32 = 2;
pub const ESB_DISABLE_LTUP: u32 = 1;
pub const ESB_DISABLE_RTDN: u32 = 2;
pub const HELPINFO_WINDOW: u32 = 1;
pub const HELPINFO_MENUITEM: u32 = 2;
pub const MB_OK: u32 = 0;
pub const MB_OKCANCEL: u32 = 1;
pub const MB_ABORTRETRYIGNORE: u32 = 2;
pub const MB_YESNOCANCEL: u32 = 3;
pub const MB_YESNO: u32 = 4;
pub const MB_RETRYCANCEL: u32 = 5;
pub const MB_CANCELTRYCONTINUE: u32 = 6;
pub const MB_ICONHAND: u32 = 16;
pub const MB_ICONQUESTION: u32 = 32;
pub const MB_ICONEXCLAMATION: u32 = 48;
pub const MB_ICONASTERISK: u32 = 64;
pub const MB_USERICON: u32 = 128;
pub const MB_ICONWARNING: u32 = 48;
pub const MB_ICONERROR: u32 = 16;
pub const MB_ICONINFORMATION: u32 = 64;
pub const MB_ICONSTOP: u32 = 16;
pub const MB_DEFBUTTON1: u32 = 0;
pub const MB_DEFBUTTON2: u32 = 256;
pub const MB_DEFBUTTON3: u32 = 512;
pub const MB_DEFBUTTON4: u32 = 768;
pub const MB_APPLMODAL: u32 = 0;
pub const MB_SYSTEMMODAL: u32 = 4096;
pub const MB_TASKMODAL: u32 = 8192;
pub const MB_HELP: u32 = 16384;
pub const MB_NOFOCUS: u32 = 32768;
pub const MB_SETFOREGROUND: u32 = 65536;
pub const MB_DEFAULT_DESKTOP_ONLY: u32 = 131072;
pub const MB_TOPMOST: u32 = 262144;
pub const MB_RIGHT: u32 = 524288;
pub const MB_RTLREADING: u32 = 1048576;
pub const MB_SERVICE_NOTIFICATION: u32 = 2097152;
pub const MB_SERVICE_NOTIFICATION_NT3X: u32 = 262144;
pub const MB_TYPEMASK: u32 = 15;
pub const MB_ICONMASK: u32 = 240;
pub const MB_DEFMASK: u32 = 3840;
pub const MB_MODEMASK: u32 = 12288;
pub const MB_MISCMASK: u32 = 49152;
pub const CWP_ALL: u32 = 0;
pub const CWP_SKIPINVISIBLE: u32 = 1;
pub const CWP_SKIPDISABLED: u32 = 2;
pub const CWP_SKIPTRANSPARENT: u32 = 4;
pub const CTLCOLOR_MSGBOX: u32 = 0;
pub const CTLCOLOR_EDIT: u32 = 1;
pub const CTLCOLOR_LISTBOX: u32 = 2;
pub const CTLCOLOR_BTN: u32 = 3;
pub const CTLCOLOR_DLG: u32 = 4;
pub const CTLCOLOR_SCROLLBAR: u32 = 5;
pub const CTLCOLOR_STATIC: u32 = 6;
pub const CTLCOLOR_MAX: u32 = 7;
pub const COLOR_SCROLLBAR: u32 = 0;
pub const COLOR_BACKGROUND: u32 = 1;
pub const COLOR_ACTIVECAPTION: u32 = 2;
pub const COLOR_INACTIVECAPTION: u32 = 3;
pub const COLOR_MENU: u32 = 4;
pub const COLOR_WINDOW: u32 = 5;
pub const COLOR_WINDOWFRAME: u32 = 6;
pub const COLOR_MENUTEXT: u32 = 7;
pub const COLOR_WINDOWTEXT: u32 = 8;
pub const COLOR_CAPTIONTEXT: u32 = 9;
pub const COLOR_ACTIVEBORDER: u32 = 10;
pub const COLOR_INACTIVEBORDER: u32 = 11;
pub const COLOR_APPWORKSPACE: u32 = 12;
pub const COLOR_HIGHLIGHT: u32 = 13;
pub const COLOR_HIGHLIGHTTEXT: u32 = 14;
pub const COLOR_BTNFACE: u32 = 15;
pub const COLOR_BTNSHADOW: u32 = 16;
pub const COLOR_GRAYTEXT: u32 = 17;
pub const COLOR_BTNTEXT: u32 = 18;
pub const COLOR_INACTIVECAPTIONTEXT: u32 = 19;
pub const COLOR_BTNHIGHLIGHT: u32 = 20;
pub const COLOR_3DDKSHADOW: u32 = 21;
pub const COLOR_3DLIGHT: u32 = 22;
pub const COLOR_INFOTEXT: u32 = 23;
pub const COLOR_INFOBK: u32 = 24;
pub const COLOR_HOTLIGHT: u32 = 26;
pub const COLOR_GRADIENTACTIVECAPTION: u32 = 27;
pub const COLOR_GRADIENTINACTIVECAPTION: u32 = 28;
pub const COLOR_MENUHILIGHT: u32 = 29;
pub const COLOR_MENUBAR: u32 = 30;
pub const COLOR_DESKTOP: u32 = 1;
pub const COLOR_3DFACE: u32 = 15;
pub const COLOR_3DSHADOW: u32 = 16;
pub const COLOR_3DHIGHLIGHT: u32 = 20;
pub const COLOR_3DHILIGHT: u32 = 20;
pub const COLOR_BTNHILIGHT: u32 = 20;
pub const GW_HWNDFIRST: u32 = 0;
pub const GW_HWNDLAST: u32 = 1;
pub const GW_HWNDNEXT: u32 = 2;
pub const GW_HWNDPREV: u32 = 3;
pub const GW_OWNER: u32 = 4;
pub const GW_CHILD: u32 = 5;
pub const GW_ENABLEDPOPUP: u32 = 6;
pub const GW_MAX: u32 = 6;
pub const MF_INSERT: u32 = 0;
pub const MF_CHANGE: u32 = 128;
pub const MF_APPEND: u32 = 256;
pub const MF_DELETE: u32 = 512;
pub const MF_REMOVE: u32 = 4096;
pub const MF_BYCOMMAND: u32 = 0;
pub const MF_BYPOSITION: u32 = 1024;
pub const MF_SEPARATOR: u32 = 2048;
pub const MF_ENABLED: u32 = 0;
pub const MF_GRAYED: u32 = 1;
pub const MF_DISABLED: u32 = 2;
pub const MF_UNCHECKED: u32 = 0;
pub const MF_CHECKED: u32 = 8;
pub const MF_USECHECKBITMAPS: u32 = 512;
pub const MF_STRING: u32 = 0;
pub const MF_BITMAP: u32 = 4;
pub const MF_OWNERDRAW: u32 = 256;
pub const MF_POPUP: u32 = 16;
pub const MF_MENUBARBREAK: u32 = 32;
pub const MF_MENUBREAK: u32 = 64;
pub const MF_UNHILITE: u32 = 0;
pub const MF_HILITE: u32 = 128;
pub const MF_DEFAULT: u32 = 4096;
pub const MF_SYSMENU: u32 = 8192;
pub const MF_HELP: u32 = 16384;
pub const MF_RIGHTJUSTIFY: u32 = 16384;
pub const MF_MOUSESELECT: u32 = 32768;
pub const MF_END: u32 = 128;
pub const MFT_STRING: u32 = 0;
pub const MFT_BITMAP: u32 = 4;
pub const MFT_MENUBARBREAK: u32 = 32;
pub const MFT_MENUBREAK: u32 = 64;
pub const MFT_OWNERDRAW: u32 = 256;
pub const MFT_RADIOCHECK: u32 = 512;
pub const MFT_SEPARATOR: u32 = 2048;
pub const MFT_RIGHTORDER: u32 = 8192;
pub const MFT_RIGHTJUSTIFY: u32 = 16384;
pub const MFS_GRAYED: u32 = 3;
pub const MFS_DISABLED: u32 = 3;
pub const MFS_CHECKED: u32 = 8;
pub const MFS_HILITE: u32 = 128;
pub const MFS_ENABLED: u32 = 0;
pub const MFS_UNCHECKED: u32 = 0;
pub const MFS_UNHILITE: u32 = 0;
pub const MFS_DEFAULT: u32 = 4096;
pub const SC_SIZE: u32 = 61440;
pub const SC_MOVE: u32 = 61456;
pub const SC_MINIMIZE: u32 = 61472;
pub const SC_MAXIMIZE: u32 = 61488;
pub const SC_NEXTWINDOW: u32 = 61504;
pub const SC_PREVWINDOW: u32 = 61520;
pub const SC_CLOSE: u32 = 61536;
pub const SC_VSCROLL: u32 = 61552;
pub const SC_HSCROLL: u32 = 61568;
pub const SC_MOUSEMENU: u32 = 61584;
pub const SC_KEYMENU: u32 = 61696;
pub const SC_ARRANGE: u32 = 61712;
pub const SC_RESTORE: u32 = 61728;
pub const SC_TASKLIST: u32 = 61744;
pub const SC_SCREENSAVE: u32 = 61760;
pub const SC_HOTKEY: u32 = 61776;
pub const SC_DEFAULT: u32 = 61792;
pub const SC_MONITORPOWER: u32 = 61808;
pub const SC_CONTEXTHELP: u32 = 61824;
pub const SC_SEPARATOR: u32 = 61455;
pub const SCF_ISSECURE: u32 = 1;
pub const SC_ICON: u32 = 61472;
pub const SC_ZOOM: u32 = 61488;
pub const IMAGE_BITMAP: u32 = 0;
pub const IMAGE_ICON: u32 = 1;
pub const IMAGE_CURSOR: u32 = 2;
pub const IMAGE_ENHMETAFILE: u32 = 3;
pub const LR_DEFAULTCOLOR: u32 = 0;
pub const LR_MONOCHROME: u32 = 1;
pub const LR_COLOR: u32 = 2;
pub const LR_COPYRETURNORG: u32 = 4;
pub const LR_COPYDELETEORG: u32 = 8;
pub const LR_LOADFROMFILE: u32 = 16;
pub const LR_LOADTRANSPARENT: u32 = 32;
pub const LR_DEFAULTSIZE: u32 = 64;
pub const LR_VGACOLOR: u32 = 128;
pub const LR_LOADMAP3DCOLORS: u32 = 4096;
pub const LR_CREATEDIBSECTION: u32 = 8192;
pub const LR_COPYFROMRESOURCE: u32 = 16384;
pub const LR_SHARED: u32 = 32768;
pub const DI_MASK: u32 = 1;
pub const DI_IMAGE: u32 = 2;
pub const DI_NORMAL: u32 = 3;
pub const DI_COMPAT: u32 = 4;
pub const DI_DEFAULTSIZE: u32 = 8;
pub const DI_NOMIRROR: u32 = 16;
pub const RES_ICON: u32 = 1;
pub const RES_CURSOR: u32 = 2;
pub const ORD_LANGDRIVER: u32 = 1;
pub const IDOK: u32 = 1;
pub const IDCANCEL: u32 = 2;
pub const IDABORT: u32 = 3;
pub const IDRETRY: u32 = 4;
pub const IDIGNORE: u32 = 5;
pub const IDYES: u32 = 6;
pub const IDNO: u32 = 7;
pub const IDCLOSE: u32 = 8;
pub const IDHELP: u32 = 9;
pub const IDTRYAGAIN: u32 = 10;
pub const IDCONTINUE: u32 = 11;
pub const IDTIMEOUT: u32 = 32000;
pub const ES_LEFT: u32 = 0;
pub const ES_CENTER: u32 = 1;
pub const ES_RIGHT: u32 = 2;
pub const ES_MULTILINE: u32 = 4;
pub const ES_UPPERCASE: u32 = 8;
pub const ES_LOWERCASE: u32 = 16;
pub const ES_PASSWORD: u32 = 32;
pub const ES_AUTOVSCROLL: u32 = 64;
pub const ES_AUTOHSCROLL: u32 = 128;
pub const ES_NOHIDESEL: u32 = 256;
pub const ES_OEMCONVERT: u32 = 1024;
pub const ES_READONLY: u32 = 2048;
pub const ES_WANTRETURN: u32 = 4096;
pub const ES_NUMBER: u32 = 8192;
pub const EN_SETFOCUS: u32 = 256;
pub const EN_KILLFOCUS: u32 = 512;
pub const EN_CHANGE: u32 = 768;
pub const EN_UPDATE: u32 = 1024;
pub const EN_ERRSPACE: u32 = 1280;
pub const EN_MAXTEXT: u32 = 1281;
pub const EN_HSCROLL: u32 = 1537;
pub const EN_VSCROLL: u32 = 1538;
pub const EN_ALIGN_LTR_EC: u32 = 1792;
pub const EN_ALIGN_RTL_EC: u32 = 1793;
pub const EN_BEFORE_PASTE: u32 = 2048;
pub const EN_AFTER_PASTE: u32 = 2049;
pub const EC_LEFTMARGIN: u32 = 1;
pub const EC_RIGHTMARGIN: u32 = 2;
pub const EC_USEFONTINFO: u32 = 65535;
pub const EMSIS_COMPOSITIONSTRING: u32 = 1;
pub const EIMES_GETCOMPSTRATONCE: u32 = 1;
pub const EIMES_CANCELCOMPSTRINFOCUS: u32 = 2;
pub const EIMES_COMPLETECOMPSTRKILLFOCUS: u32 = 4;
pub const EM_GETSEL: u32 = 176;
pub const EM_SETSEL: u32 = 177;
pub const EM_GETRECT: u32 = 178;
pub const EM_SETRECT: u32 = 179;
pub const EM_SETRECTNP: u32 = 180;
pub const EM_SCROLL: u32 = 181;
pub const EM_LINESCROLL: u32 = 182;
pub const EM_SCROLLCARET: u32 = 183;
pub const EM_GETMODIFY: u32 = 184;
pub const EM_SETMODIFY: u32 = 185;
pub const EM_GETLINECOUNT: u32 = 186;
pub const EM_LINEINDEX: u32 = 187;
pub const EM_SETHANDLE: u32 = 188;
pub const EM_GETHANDLE: u32 = 189;
pub const EM_GETTHUMB: u32 = 190;
pub const EM_LINELENGTH: u32 = 193;
pub const EM_REPLACESEL: u32 = 194;
pub const EM_GETLINE: u32 = 196;
pub const EM_LIMITTEXT: u32 = 197;
pub const EM_CANUNDO: u32 = 198;
pub const EM_UNDO: u32 = 199;
pub const EM_FMTLINES: u32 = 200;
pub const EM_LINEFROMCHAR: u32 = 201;
pub const EM_SETTABSTOPS: u32 = 203;
pub const EM_SETPASSWORDCHAR: u32 = 204;
pub const EM_EMPTYUNDOBUFFER: u32 = 205;
pub const EM_GETFIRSTVISIBLELINE: u32 = 206;
pub const EM_SETREADONLY: u32 = 207;
pub const EM_SETWORDBREAKPROC: u32 = 208;
pub const EM_GETWORDBREAKPROC: u32 = 209;
pub const EM_GETPASSWORDCHAR: u32 = 210;
pub const EM_SETMARGINS: u32 = 211;
pub const EM_GETMARGINS: u32 = 212;
pub const EM_SETLIMITTEXT: u32 = 197;
pub const EM_GETLIMITTEXT: u32 = 213;
pub const EM_POSFROMCHAR: u32 = 214;
pub const EM_CHARFROMPOS: u32 = 215;
pub const EM_SETIMESTATUS: u32 = 216;
pub const EM_GETIMESTATUS: u32 = 217;
pub const EM_ENABLEFEATURE: u32 = 218;
pub const WB_LEFT: u32 = 0;
pub const WB_RIGHT: u32 = 1;
pub const WB_ISDELIMITER: u32 = 2;
pub const BS_PUSHBUTTON: u32 = 0;
pub const BS_DEFPUSHBUTTON: u32 = 1;
pub const BS_CHECKBOX: u32 = 2;
pub const BS_AUTOCHECKBOX: u32 = 3;
pub const BS_RADIOBUTTON: u32 = 4;
pub const BS_3STATE: u32 = 5;
pub const BS_AUTO3STATE: u32 = 6;
pub const BS_GROUPBOX: u32 = 7;
pub const BS_USERBUTTON: u32 = 8;
pub const BS_AUTORADIOBUTTON: u32 = 9;
pub const BS_PUSHBOX: u32 = 10;
pub const BS_OWNERDRAW: u32 = 11;
pub const BS_TYPEMASK: u32 = 15;
pub const BS_LEFTTEXT: u32 = 32;
pub const BS_TEXT: u32 = 0;
pub const BS_ICON: u32 = 64;
pub const BS_BITMAP: u32 = 128;
pub const BS_LEFT: u32 = 256;
pub const BS_RIGHT: u32 = 512;
pub const BS_CENTER: u32 = 768;
pub const BS_TOP: u32 = 1024;
pub const BS_BOTTOM: u32 = 2048;
pub const BS_VCENTER: u32 = 3072;
pub const BS_PUSHLIKE: u32 = 4096;
pub const BS_MULTILINE: u32 = 8192;
pub const BS_NOTIFY: u32 = 16384;
pub const BS_FLAT: u32 = 32768;
pub const BS_RIGHTBUTTON: u32 = 32;
pub const BN_CLICKED: u32 = 0;
pub const BN_PAINT: u32 = 1;
pub const BN_HILITE: u32 = 2;
pub const BN_UNHILITE: u32 = 3;
pub const BN_DISABLE: u32 = 4;
pub const BN_DOUBLECLICKED: u32 = 5;
pub const BN_PUSHED: u32 = 2;
pub const BN_UNPUSHED: u32 = 3;
pub const BN_DBLCLK: u32 = 5;
pub const BN_SETFOCUS: u32 = 6;
pub const BN_KILLFOCUS: u32 = 7;
pub const BM_GETCHECK: u32 = 240;
pub const BM_SETCHECK: u32 = 241;
pub const BM_GETSTATE: u32 = 242;
pub const BM_SETSTATE: u32 = 243;
pub const BM_SETSTYLE: u32 = 244;
pub const BM_CLICK: u32 = 245;
pub const BM_GETIMAGE: u32 = 246;
pub const BM_SETIMAGE: u32 = 247;
pub const BM_SETDONTCLICK: u32 = 248;
pub const BST_UNCHECKED: u32 = 0;
pub const BST_CHECKED: u32 = 1;
pub const BST_INDETERMINATE: u32 = 2;
pub const BST_PUSHED: u32 = 4;
pub const BST_FOCUS: u32 = 8;
pub const SS_LEFT: u32 = 0;
pub const SS_CENTER: u32 = 1;
pub const SS_RIGHT: u32 = 2;
pub const SS_ICON: u32 = 3;
pub const SS_BLACKRECT: u32 = 4;
pub const SS_GRAYRECT: u32 = 5;
pub const SS_WHITERECT: u32 = 6;
pub const SS_BLACKFRAME: u32 = 7;
pub const SS_GRAYFRAME: u32 = 8;
pub const SS_WHITEFRAME: u32 = 9;
pub const SS_USERITEM: u32 = 10;
pub const SS_SIMPLE: u32 = 11;
pub const SS_LEFTNOWORDWRAP: u32 = 12;
pub const SS_OWNERDRAW: u32 = 13;
pub const SS_BITMAP: u32 = 14;
pub const SS_ENHMETAFILE: u32 = 15;
pub const SS_ETCHEDHORZ: u32 = 16;
pub const SS_ETCHEDVERT: u32 = 17;
pub const SS_ETCHEDFRAME: u32 = 18;
pub const SS_TYPEMASK: u32 = 31;
pub const SS_REALSIZECONTROL: u32 = 64;
pub const SS_NOPREFIX: u32 = 128;
pub const SS_NOTIFY: u32 = 256;
pub const SS_CENTERIMAGE: u32 = 512;
pub const SS_RIGHTJUST: u32 = 1024;
pub const SS_REALSIZEIMAGE: u32 = 2048;
pub const SS_SUNKEN: u32 = 4096;
pub const SS_EDITCONTROL: u32 = 8192;
pub const SS_ENDELLIPSIS: u32 = 16384;
pub const SS_PATHELLIPSIS: u32 = 32768;
pub const SS_WORDELLIPSIS: u32 = 49152;
pub const SS_ELLIPSISMASK: u32 = 49152;
pub const STM_SETICON: u32 = 368;
pub const STM_GETICON: u32 = 369;
pub const STM_SETIMAGE: u32 = 370;
pub const STM_GETIMAGE: u32 = 371;
pub const STN_CLICKED: u32 = 0;
pub const STN_DBLCLK: u32 = 1;
pub const STN_ENABLE: u32 = 2;
pub const STN_DISABLE: u32 = 3;
pub const STM_MSGMAX: u32 = 372;
pub const DWL_MSGRESULT: u32 = 0;
pub const DWL_DLGPROC: u32 = 4;
pub const DWL_USER: u32 = 8;
pub const DWLP_MSGRESULT: u32 = 0;
pub const DDL_READWRITE: u32 = 0;
pub const DDL_READONLY: u32 = 1;
pub const DDL_HIDDEN: u32 = 2;
pub const DDL_SYSTEM: u32 = 4;
pub const DDL_DIRECTORY: u32 = 16;
pub const DDL_ARCHIVE: u32 = 32;
pub const DDL_POSTMSGS: u32 = 8192;
pub const DDL_DRIVES: u32 = 16384;
pub const DDL_EXCLUSIVE: u32 = 32768;
pub const DS_ABSALIGN: u32 = 1;
pub const DS_SYSMODAL: u32 = 2;
pub const DS_LOCALEDIT: u32 = 32;
pub const DS_SETFONT: u32 = 64;
pub const DS_MODALFRAME: u32 = 128;
pub const DS_NOIDLEMSG: u32 = 256;
pub const DS_SETFOREGROUND: u32 = 512;
pub const DS_3DLOOK: u32 = 4;
pub const DS_FIXEDSYS: u32 = 8;
pub const DS_NOFAILCREATE: u32 = 16;
pub const DS_CONTROL: u32 = 1024;
pub const DS_CENTER: u32 = 2048;
pub const DS_CENTERMOUSE: u32 = 4096;
pub const DS_CONTEXTHELP: u32 = 8192;
pub const DS_SHELLFONT: u32 = 72;
pub const DM_GETDEFID: u32 = 1024;
pub const DM_SETDEFID: u32 = 1025;
pub const DM_REPOSITION: u32 = 1026;
pub const DC_HASDEFID: u32 = 21323;
pub const DLGC_WANTARROWS: u32 = 1;
pub const DLGC_WANTTAB: u32 = 2;
pub const DLGC_WANTALLKEYS: u32 = 4;
pub const DLGC_WANTMESSAGE: u32 = 4;
pub const DLGC_HASSETSEL: u32 = 8;
pub const DLGC_DEFPUSHBUTTON: u32 = 16;
pub const DLGC_UNDEFPUSHBUTTON: u32 = 32;
pub const DLGC_RADIOBUTTON: u32 = 64;
pub const DLGC_WANTCHARS: u32 = 128;
pub const DLGC_STATIC: u32 = 256;
pub const DLGC_BUTTON: u32 = 8192;
pub const LB_CTLCODE: u32 = 0;
pub const LB_OKAY: u32 = 0;
pub const LB_ERR: i32 = -1;
pub const LB_ERRSPACE: i32 = -2;
pub const LBN_ERRSPACE: i32 = -2;
pub const LBN_SELCHANGE: u32 = 1;
pub const LBN_DBLCLK: u32 = 2;
pub const LBN_SELCANCEL: u32 = 3;
pub const LBN_SETFOCUS: u32 = 4;
pub const LBN_KILLFOCUS: u32 = 5;
pub const LB_ADDSTRING: u32 = 384;
pub const LB_INSERTSTRING: u32 = 385;
pub const LB_DELETESTRING: u32 = 386;
pub const LB_SELITEMRANGEEX: u32 = 387;
pub const LB_RESETCONTENT: u32 = 388;
pub const LB_SETSEL: u32 = 389;
pub const LB_SETCURSEL: u32 = 390;
pub const LB_GETSEL: u32 = 391;
pub const LB_GETCURSEL: u32 = 392;
pub const LB_GETTEXT: u32 = 393;
pub const LB_GETTEXTLEN: u32 = 394;
pub const LB_GETCOUNT: u32 = 395;
pub const LB_SELECTSTRING: u32 = 396;
pub const LB_DIR: u32 = 397;
pub const LB_GETTOPINDEX: u32 = 398;
pub const LB_FINDSTRING: u32 = 399;
pub const LB_GETSELCOUNT: u32 = 400;
pub const LB_GETSELITEMS: u32 = 401;
pub const LB_SETTABSTOPS: u32 = 402;
pub const LB_GETHORIZONTALEXTENT: u32 = 403;
pub const LB_SETHORIZONTALEXTENT: u32 = 404;
pub const LB_SETCOLUMNWIDTH: u32 = 405;
pub const LB_ADDFILE: u32 = 406;
pub const LB_SETTOPINDEX: u32 = 407;
pub const LB_GETITEMRECT: u32 = 408;
pub const LB_GETITEMDATA: u32 = 409;
pub const LB_SETITEMDATA: u32 = 410;
pub const LB_SELITEMRANGE: u32 = 411;
pub const LB_SETANCHORINDEX: u32 = 412;
pub const LB_GETANCHORINDEX: u32 = 413;
pub const LB_SETCARETINDEX: u32 = 414;
pub const LB_GETCARETINDEX: u32 = 415;
pub const LB_SETITEMHEIGHT: u32 = 416;
pub const LB_GETITEMHEIGHT: u32 = 417;
pub const LB_FINDSTRINGEXACT: u32 = 418;
pub const LB_SETLOCALE: u32 = 421;
pub const LB_GETLOCALE: u32 = 422;
pub const LB_SETCOUNT: u32 = 423;
pub const LB_INITSTORAGE: u32 = 424;
pub const LB_ITEMFROMPOINT: u32 = 425;
pub const LB_GETLISTBOXINFO: u32 = 434;
pub const LB_MSGMAX: u32 = 435;
pub const LBS_NOTIFY: u32 = 1;
pub const LBS_SORT: u32 = 2;
pub const LBS_NOREDRAW: u32 = 4;
pub const LBS_MULTIPLESEL: u32 = 8;
pub const LBS_OWNERDRAWFIXED: u32 = 16;
pub const LBS_OWNERDRAWVARIABLE: u32 = 32;
pub const LBS_HASSTRINGS: u32 = 64;
pub const LBS_USETABSTOPS: u32 = 128;
pub const LBS_NOINTEGRALHEIGHT: u32 = 256;
pub const LBS_MULTICOLUMN: u32 = 512;
pub const LBS_WANTKEYBOARDINPUT: u32 = 1024;
pub const LBS_EXTENDEDSEL: u32 = 2048;
pub const LBS_DISABLENOSCROLL: u32 = 4096;
pub const LBS_NODATA: u32 = 8192;
pub const LBS_NOSEL: u32 = 16384;
pub const LBS_COMBOBOX: u32 = 32768;
pub const LBS_STANDARD: u32 = 10485763;
pub const CB_OKAY: u32 = 0;
pub const CB_ERR: i32 = -1;
pub const CB_ERRSPACE: i32 = -2;
pub const CBN_ERRSPACE: i32 = -1;
pub const CBN_SELCHANGE: u32 = 1;
pub const CBN_DBLCLK: u32 = 2;
pub const CBN_SETFOCUS: u32 = 3;
pub const CBN_KILLFOCUS: u32 = 4;
pub const CBN_EDITCHANGE: u32 = 5;
pub const CBN_EDITUPDATE: u32 = 6;
pub const CBN_DROPDOWN: u32 = 7;
pub const CBN_CLOSEUP: u32 = 8;
pub const CBN_SELENDOK: u32 = 9;
pub const CBN_SELENDCANCEL: u32 = 10;
pub const CBS_SIMPLE: u32 = 1;
pub const CBS_DROPDOWN: u32 = 2;
pub const CBS_DROPDOWNLIST: u32 = 3;
pub const CBS_OWNERDRAWFIXED: u32 = 16;
pub const CBS_OWNERDRAWVARIABLE: u32 = 32;
pub const CBS_AUTOHSCROLL: u32 = 64;
pub const CBS_OEMCONVERT: u32 = 128;
pub const CBS_SORT: u32 = 256;
pub const CBS_HASSTRINGS: u32 = 512;
pub const CBS_NOINTEGRALHEIGHT: u32 = 1024;
pub const CBS_DISABLENOSCROLL: u32 = 2048;
pub const CBS_UPPERCASE: u32 = 8192;
pub const CBS_LOWERCASE: u32 = 16384;
pub const CB_GETEDITSEL: u32 = 320;
pub const CB_LIMITTEXT: u32 = 321;
pub const CB_SETEDITSEL: u32 = 322;
pub const CB_ADDSTRING: u32 = 323;
pub const CB_DELETESTRING: u32 = 324;
pub const CB_DIR: u32 = 325;
pub const CB_GETCOUNT: u32 = 326;
pub const CB_GETCURSEL: u32 = 327;
pub const CB_GETLBTEXT: u32 = 328;
pub const CB_GETLBTEXTLEN: u32 = 329;
pub const CB_INSERTSTRING: u32 = 330;
pub const CB_RESETCONTENT: u32 = 331;
pub const CB_FINDSTRING: u32 = 332;
pub const CB_SELECTSTRING: u32 = 333;
pub const CB_SETCURSEL: u32 = 334;
pub const CB_SHOWDROPDOWN: u32 = 335;
pub const CB_GETITEMDATA: u32 = 336;
pub const CB_SETITEMDATA: u32 = 337;
pub const CB_GETDROPPEDCONTROLRECT: u32 = 338;
pub const CB_SETITEMHEIGHT: u32 = 339;
pub const CB_GETITEMHEIGHT: u32 = 340;
pub const CB_SETEXTENDEDUI: u32 = 341;
pub const CB_GETEXTENDEDUI: u32 = 342;
pub const CB_GETDROPPEDSTATE: u32 = 343;
pub const CB_FINDSTRINGEXACT: u32 = 344;
pub const CB_SETLOCALE: u32 = 345;
pub const CB_GETLOCALE: u32 = 346;
pub const CB_GETTOPINDEX: u32 = 347;
pub const CB_SETTOPINDEX: u32 = 348;
pub const CB_GETHORIZONTALEXTENT: u32 = 349;
pub const CB_SETHORIZONTALEXTENT: u32 = 350;
pub const CB_GETDROPPEDWIDTH: u32 = 351;
pub const CB_SETDROPPEDWIDTH: u32 = 352;
pub const CB_INITSTORAGE: u32 = 353;
pub const CB_GETCOMBOBOXINFO: u32 = 356;
pub const CB_MSGMAX: u32 = 357;
pub const SBS_HORZ: u32 = 0;
pub const SBS_VERT: u32 = 1;
pub const SBS_TOPALIGN: u32 = 2;
pub const SBS_LEFTALIGN: u32 = 2;
pub const SBS_BOTTOMALIGN: u32 = 4;
pub const SBS_RIGHTALIGN: u32 = 4;
pub const SBS_SIZEBOXTOPLEFTALIGN: u32 = 2;
pub const SBS_SIZEBOXBOTTOMRIGHTALIGN: u32 = 4;
pub const SBS_SIZEBOX: u32 = 8;
pub const SBS_SIZEGRIP: u32 = 16;
pub const SBM_SETPOS: u32 = 224;
pub const SBM_GETPOS: u32 = 225;
pub const SBM_SETRANGE: u32 = 226;
pub const SBM_SETRANGEREDRAW: u32 = 230;
pub const SBM_GETRANGE: u32 = 227;
pub const SBM_ENABLE_ARROWS: u32 = 228;
pub const SBM_SETSCROLLINFO: u32 = 233;
pub const SBM_GETSCROLLINFO: u32 = 234;
pub const SBM_GETSCROLLBARINFO: u32 = 235;
pub const SIF_RANGE: u32 = 1;
pub const SIF_PAGE: u32 = 2;
pub const SIF_POS: u32 = 4;
pub const SIF_DISABLENOSCROLL: u32 = 8;
pub const SIF_TRACKPOS: u32 = 16;
pub const SIF_ALL: u32 = 23;
pub const MDIS_ALLCHILDSTYLES: u32 = 1;
pub const MDITILE_VERTICAL: u32 = 0;
pub const MDITILE_HORIZONTAL: u32 = 1;
pub const MDITILE_SKIPDISABLED: u32 = 2;
pub const MDITILE_ZORDER: u32 = 4;
pub const HELP_CONTEXT: u32 = 1;
pub const HELP_QUIT: u32 = 2;
pub const HELP_INDEX: u32 = 3;
pub const HELP_CONTENTS: u32 = 3;
pub const HELP_HELPONHELP: u32 = 4;
pub const HELP_SETINDEX: u32 = 5;
pub const HELP_SETCONTENTS: u32 = 5;
pub const HELP_CONTEXTPOPUP: u32 = 8;
pub const HELP_FORCEFILE: u32 = 9;
pub const HELP_KEY: u32 = 257;
pub const HELP_COMMAND: u32 = 258;
pub const HELP_PARTIALKEY: u32 = 261;
pub const HELP_MULTIKEY: u32 = 513;
pub const HELP_SETWINPOS: u32 = 515;
pub const HELP_CONTEXTMENU: u32 = 10;
pub const HELP_FINDER: u32 = 11;
pub const HELP_WM_HELP: u32 = 12;
pub const HELP_SETPOPUP_POS: u32 = 13;
pub const HELP_TCARD: u32 = 32768;
pub const HELP_TCARD_DATA: u32 = 16;
pub const HELP_TCARD_OTHER_CALLER: u32 = 17;
pub const IDH_NO_HELP: u32 = 28440;
pub const IDH_MISSING_CONTEXT: u32 = 28441;
pub const IDH_GENERIC_HELP_BUTTON: u32 = 28442;
pub const IDH_OK: u32 = 28443;
pub const IDH_CANCEL: u32 = 28444;
pub const IDH_HELP: u32 = 28445;
pub const GR_GDIOBJECTS: u32 = 0;
pub const GR_USEROBJECTS: u32 = 1;
pub const GR_GDIOBJECTS_PEAK: u32 = 2;
pub const GR_USEROBJECTS_PEAK: u32 = 4;
pub const SPI_GETBEEP: u32 = 1;
pub const SPI_SETBEEP: u32 = 2;
pub const SPI_GETMOUSE: u32 = 3;
pub const SPI_SETMOUSE: u32 = 4;
pub const SPI_GETBORDER: u32 = 5;
pub const SPI_SETBORDER: u32 = 6;
pub const SPI_GETKEYBOARDSPEED: u32 = 10;
pub const SPI_SETKEYBOARDSPEED: u32 = 11;
pub const SPI_LANGDRIVER: u32 = 12;
pub const SPI_ICONHORIZONTALSPACING: u32 = 13;
pub const SPI_GETSCREENSAVETIMEOUT: u32 = 14;
pub const SPI_SETSCREENSAVETIMEOUT: u32 = 15;
pub const SPI_GETSCREENSAVEACTIVE: u32 = 16;
pub const SPI_SETSCREENSAVEACTIVE: u32 = 17;
pub const SPI_GETGRIDGRANULARITY: u32 = 18;
pub const SPI_SETGRIDGRANULARITY: u32 = 19;
pub const SPI_SETDESKWALLPAPER: u32 = 20;
pub const SPI_SETDESKPATTERN: u32 = 21;
pub const SPI_GETKEYBOARDDELAY: u32 = 22;
pub const SPI_SETKEYBOARDDELAY: u32 = 23;
pub const SPI_ICONVERTICALSPACING: u32 = 24;
pub const SPI_GETICONTITLEWRAP: u32 = 25;
pub const SPI_SETICONTITLEWRAP: u32 = 26;
pub const SPI_GETMENUDROPALIGNMENT: u32 = 27;
pub const SPI_SETMENUDROPALIGNMENT: u32 = 28;
pub const SPI_SETDOUBLECLKWIDTH: u32 = 29;
pub const SPI_SETDOUBLECLKHEIGHT: u32 = 30;
pub const SPI_GETICONTITLELOGFONT: u32 = 31;
pub const SPI_SETDOUBLECLICKTIME: u32 = 32;
pub const SPI_SETMOUSEBUTTONSWAP: u32 = 33;
pub const SPI_SETICONTITLELOGFONT: u32 = 34;
pub const SPI_GETFASTTASKSWITCH: u32 = 35;
pub const SPI_SETFASTTASKSWITCH: u32 = 36;
pub const SPI_SETDRAGFULLWINDOWS: u32 = 37;
pub const SPI_GETDRAGFULLWINDOWS: u32 = 38;
pub const SPI_GETNONCLIENTMETRICS: u32 = 41;
pub const SPI_SETNONCLIENTMETRICS: u32 = 42;
pub const SPI_GETMINIMIZEDMETRICS: u32 = 43;
pub const SPI_SETMINIMIZEDMETRICS: u32 = 44;
pub const SPI_GETICONMETRICS: u32 = 45;
pub const SPI_SETICONMETRICS: u32 = 46;
pub const SPI_SETWORKAREA: u32 = 47;
pub const SPI_GETWORKAREA: u32 = 48;
pub const SPI_SETPENWINDOWS: u32 = 49;
pub const SPI_GETHIGHCONTRAST: u32 = 66;
pub const SPI_SETHIGHCONTRAST: u32 = 67;
pub const SPI_GETKEYBOARDPREF: u32 = 68;
pub const SPI_SETKEYBOARDPREF: u32 = 69;
pub const SPI_GETSCREENREADER: u32 = 70;
pub const SPI_SETSCREENREADER: u32 = 71;
pub const SPI_GETANIMATION: u32 = 72;
pub const SPI_SETANIMATION: u32 = 73;
pub const SPI_GETFONTSMOOTHING: u32 = 74;
pub const SPI_SETFONTSMOOTHING: u32 = 75;
pub const SPI_SETDRAGWIDTH: u32 = 76;
pub const SPI_SETDRAGHEIGHT: u32 = 77;
pub const SPI_SETHANDHELD: u32 = 78;
pub const SPI_GETLOWPOWERTIMEOUT: u32 = 79;
pub const SPI_GETPOWEROFFTIMEOUT: u32 = 80;
pub const SPI_SETLOWPOWERTIMEOUT: u32 = 81;
pub const SPI_SETPOWEROFFTIMEOUT: u32 = 82;
pub const SPI_GETLOWPOWERACTIVE: u32 = 83;
pub const SPI_GETPOWEROFFACTIVE: u32 = 84;
pub const SPI_SETLOWPOWERACTIVE: u32 = 85;
pub const SPI_SETPOWEROFFACTIVE: u32 = 86;
pub const SPI_SETCURSORS: u32 = 87;
pub const SPI_SETICONS: u32 = 88;
pub const SPI_GETDEFAULTINPUTLANG: u32 = 89;
pub const SPI_SETDEFAULTINPUTLANG: u32 = 90;
pub const SPI_SETLANGTOGGLE: u32 = 91;
pub const SPI_GETWINDOWSEXTENSION: u32 = 92;
pub const SPI_SETMOUSETRAILS: u32 = 93;
pub const SPI_GETMOUSETRAILS: u32 = 94;
pub const SPI_SETSCREENSAVERRUNNING: u32 = 97;
pub const SPI_SCREENSAVERRUNNING: u32 = 97;
pub const SPI_GETFILTERKEYS: u32 = 50;
pub const SPI_SETFILTERKEYS: u32 = 51;
pub const SPI_GETTOGGLEKEYS: u32 = 52;
pub const SPI_SETTOGGLEKEYS: u32 = 53;
pub const SPI_GETMOUSEKEYS: u32 = 54;
pub const SPI_SETMOUSEKEYS: u32 = 55;
pub const SPI_GETSHOWSOUNDS: u32 = 56;
pub const SPI_SETSHOWSOUNDS: u32 = 57;
pub const SPI_GETSTICKYKEYS: u32 = 58;
pub const SPI_SETSTICKYKEYS: u32 = 59;
pub const SPI_GETACCESSTIMEOUT: u32 = 60;
pub const SPI_SETACCESSTIMEOUT: u32 = 61;
pub const SPI_GETSERIALKEYS: u32 = 62;
pub const SPI_SETSERIALKEYS: u32 = 63;
pub const SPI_GETSOUNDSENTRY: u32 = 64;
pub const SPI_SETSOUNDSENTRY: u32 = 65;
pub const SPI_GETSNAPTODEFBUTTON: u32 = 95;
pub const SPI_SETSNAPTODEFBUTTON: u32 = 96;
pub const SPI_GETMOUSEHOVERWIDTH: u32 = 98;
pub const SPI_SETMOUSEHOVERWIDTH: u32 = 99;
pub const SPI_GETMOUSEHOVERHEIGHT: u32 = 100;
pub const SPI_SETMOUSEHOVERHEIGHT: u32 = 101;
pub const SPI_GETMOUSEHOVERTIME: u32 = 102;
pub const SPI_SETMOUSEHOVERTIME: u32 = 103;
pub const SPI_GETWHEELSCROLLLINES: u32 = 104;
pub const SPI_SETWHEELSCROLLLINES: u32 = 105;
pub const SPI_GETMENUSHOWDELAY: u32 = 106;
pub const SPI_SETMENUSHOWDELAY: u32 = 107;
pub const SPI_GETWHEELSCROLLCHARS: u32 = 108;
pub const SPI_SETWHEELSCROLLCHARS: u32 = 109;
pub const SPI_GETSHOWIMEUI: u32 = 110;
pub const SPI_SETSHOWIMEUI: u32 = 111;
pub const SPI_GETMOUSESPEED: u32 = 112;
pub const SPI_SETMOUSESPEED: u32 = 113;
pub const SPI_GETSCREENSAVERRUNNING: u32 = 114;
pub const SPI_GETDESKWALLPAPER: u32 = 115;
pub const SPI_GETAUDIODESCRIPTION: u32 = 116;
pub const SPI_SETAUDIODESCRIPTION: u32 = 117;
pub const SPI_GETSCREENSAVESECURE: u32 = 118;
pub const SPI_SETSCREENSAVESECURE: u32 = 119;
pub const SPI_GETHUNGAPPTIMEOUT: u32 = 120;
pub const SPI_SETHUNGAPPTIMEOUT: u32 = 121;
pub const SPI_GETWAITTOKILLTIMEOUT: u32 = 122;
pub const SPI_SETWAITTOKILLTIMEOUT: u32 = 123;
pub const SPI_GETWAITTOKILLSERVICETIMEOUT: u32 = 124;
pub const SPI_SETWAITTOKILLSERVICETIMEOUT: u32 = 125;
pub const SPI_GETMOUSEDOCKTHRESHOLD: u32 = 126;
pub const SPI_SETMOUSEDOCKTHRESHOLD: u32 = 127;
pub const SPI_GETPENDOCKTHRESHOLD: u32 = 128;
pub const SPI_SETPENDOCKTHRESHOLD: u32 = 129;
pub const SPI_GETWINARRANGING: u32 = 130;
pub const SPI_SETWINARRANGING: u32 = 131;
pub const SPI_GETMOUSEDRAGOUTTHRESHOLD: u32 = 132;
pub const SPI_SETMOUSEDRAGOUTTHRESHOLD: u32 = 133;
pub const SPI_GETPENDRAGOUTTHRESHOLD: u32 = 134;
pub const SPI_SETPENDRAGOUTTHRESHOLD: u32 = 135;
pub const SPI_GETMOUSESIDEMOVETHRESHOLD: u32 = 136;
pub const SPI_SETMOUSESIDEMOVETHRESHOLD: u32 = 137;
pub const SPI_GETPENSIDEMOVETHRESHOLD: u32 = 138;
pub const SPI_SETPENSIDEMOVETHRESHOLD: u32 = 139;
pub const SPI_GETDRAGFROMMAXIMIZE: u32 = 140;
pub const SPI_SETDRAGFROMMAXIMIZE: u32 = 141;
pub const SPI_GETSNAPSIZING: u32 = 142;
pub const SPI_SETSNAPSIZING: u32 = 143;
pub const SPI_GETDOCKMOVING: u32 = 144;
pub const SPI_SETDOCKMOVING: u32 = 145;
pub const MAX_TOUCH_PREDICTION_FILTER_TAPS: u32 = 3;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY: u32 = 8;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME: u32 = 8;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP: u32 = 1;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA: f64 = 0.001;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN: f64 = 0.9;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX: f64 = 0.999;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE: f64 = 0.001;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA: f64 = 0.99;
pub const SPI_GETTOUCHPREDICTIONPARAMETERS: u32 = 156;
pub const SPI_SETTOUCHPREDICTIONPARAMETERS: u32 = 157;
pub const MAX_LOGICALDPIOVERRIDE: u32 = 2;
pub const MIN_LOGICALDPIOVERRIDE: i32 = -2;
pub const SPI_GETLOGICALDPIOVERRIDE: u32 = 158;
pub const SPI_SETLOGICALDPIOVERRIDE: u32 = 159;
pub const SPI_GETMENURECT: u32 = 162;
pub const SPI_SETMENURECT: u32 = 163;
pub const SPI_GETACTIVEWINDOWTRACKING: u32 = 4096;
pub const SPI_SETACTIVEWINDOWTRACKING: u32 = 4097;
pub const SPI_GETMENUANIMATION: u32 = 4098;
pub const SPI_SETMENUANIMATION: u32 = 4099;
pub const SPI_GETCOMBOBOXANIMATION: u32 = 4100;
pub const SPI_SETCOMBOBOXANIMATION: u32 = 4101;
pub const SPI_GETLISTBOXSMOOTHSCROLLING: u32 = 4102;
pub const SPI_SETLISTBOXSMOOTHSCROLLING: u32 = 4103;
pub const SPI_GETGRADIENTCAPTIONS: u32 = 4104;
pub const SPI_SETGRADIENTCAPTIONS: u32 = 4105;
pub const SPI_GETKEYBOARDCUES: u32 = 4106;
pub const SPI_SETKEYBOARDCUES: u32 = 4107;
pub const SPI_GETMENUUNDERLINES: u32 = 4106;
pub const SPI_SETMENUUNDERLINES: u32 = 4107;
pub const SPI_GETACTIVEWNDTRKZORDER: u32 = 4108;
pub const SPI_SETACTIVEWNDTRKZORDER: u32 = 4109;
pub const SPI_GETHOTTRACKING: u32 = 4110;
pub const SPI_SETHOTTRACKING: u32 = 4111;
pub const SPI_GETMENUFADE: u32 = 4114;
pub const SPI_SETMENUFADE: u32 = 4115;
pub const SPI_GETSELECTIONFADE: u32 = 4116;
pub const SPI_SETSELECTIONFADE: u32 = 4117;
pub const SPI_GETTOOLTIPANIMATION: u32 = 4118;
pub const SPI_SETTOOLTIPANIMATION: u32 = 4119;
pub const SPI_GETTOOLTIPFADE: u32 = 4120;
pub const SPI_SETTOOLTIPFADE: u32 = 4121;
pub const SPI_GETCURSORSHADOW: u32 = 4122;
pub const SPI_SETCURSORSHADOW: u32 = 4123;
pub const SPI_GETMOUSESONAR: u32 = 4124;
pub const SPI_SETMOUSESONAR: u32 = 4125;
pub const SPI_GETMOUSECLICKLOCK: u32 = 4126;
pub const SPI_SETMOUSECLICKLOCK: u32 = 4127;
pub const SPI_GETMOUSEVANISH: u32 = 4128;
pub const SPI_SETMOUSEVANISH: u32 = 4129;
pub const SPI_GETFLATMENU: u32 = 4130;
pub const SPI_SETFLATMENU: u32 = 4131;
pub const SPI_GETDROPSHADOW: u32 = 4132;
pub const SPI_SETDROPSHADOW: u32 = 4133;
pub const SPI_GETBLOCKSENDINPUTRESETS: u32 = 4134;
pub const SPI_SETBLOCKSENDINPUTRESETS: u32 = 4135;
pub const SPI_GETUIEFFECTS: u32 = 4158;
pub const SPI_SETUIEFFECTS: u32 = 4159;
pub const SPI_GETDISABLEOVERLAPPEDCONTENT: u32 = 4160;
pub const SPI_SETDISABLEOVERLAPPEDCONTENT: u32 = 4161;
pub const SPI_GETCLIENTAREAANIMATION: u32 = 4162;
pub const SPI_SETCLIENTAREAANIMATION: u32 = 4163;
pub const SPI_GETCLEARTYPE: u32 = 4168;
pub const SPI_SETCLEARTYPE: u32 = 4169;
pub const SPI_GETSPEECHRECOGNITION: u32 = 4170;
pub const SPI_SETSPEECHRECOGNITION: u32 = 4171;
pub const SPI_GETCARETBROWSING: u32 = 4172;
pub const SPI_SETCARETBROWSING: u32 = 4173;
pub const SPI_GETTHREADLOCALINPUTSETTINGS: u32 = 4174;
pub const SPI_SETTHREADLOCALINPUTSETTINGS: u32 = 4175;
pub const SPI_GETSYSTEMLANGUAGEBAR: u32 = 4176;
pub const SPI_SETSYSTEMLANGUAGEBAR: u32 = 4177;
pub const SPI_GETFOREGROUNDLOCKTIMEOUT: u32 = 8192;
pub const SPI_SETFOREGROUNDLOCKTIMEOUT: u32 = 8193;
pub const SPI_GETACTIVEWNDTRKTIMEOUT: u32 = 8194;
pub const SPI_SETACTIVEWNDTRKTIMEOUT: u32 = 8195;
pub const SPI_GETFOREGROUNDFLASHCOUNT: u32 = 8196;
pub const SPI_SETFOREGROUNDFLASHCOUNT: u32 = 8197;
pub const SPI_GETCARETWIDTH: u32 = 8198;
pub const SPI_SETCARETWIDTH: u32 = 8199;
pub const SPI_GETMOUSECLICKLOCKTIME: u32 = 8200;
pub const SPI_SETMOUSECLICKLOCKTIME: u32 = 8201;
pub const SPI_GETFONTSMOOTHINGTYPE: u32 = 8202;
pub const SPI_SETFONTSMOOTHINGTYPE: u32 = 8203;
pub const FE_FONTSMOOTHINGSTANDARD: u32 = 1;
pub const FE_FONTSMOOTHINGCLEARTYPE: u32 = 2;
pub const SPI_GETFONTSMOOTHINGCONTRAST: u32 = 8204;
pub const SPI_SETFONTSMOOTHINGCONTRAST: u32 = 8205;
pub const SPI_GETFOCUSBORDERWIDTH: u32 = 8206;
pub const SPI_SETFOCUSBORDERWIDTH: u32 = 8207;
pub const SPI_GETFOCUSBORDERHEIGHT: u32 = 8208;
pub const SPI_SETFOCUSBORDERHEIGHT: u32 = 8209;
pub const SPI_GETFONTSMOOTHINGORIENTATION: u32 = 8210;
pub const SPI_SETFONTSMOOTHINGORIENTATION: u32 = 8211;
pub const FE_FONTSMOOTHINGORIENTATIONBGR: u32 = 0;
pub const FE_FONTSMOOTHINGORIENTATIONRGB: u32 = 1;
pub const SPI_GETMINIMUMHITRADIUS: u32 = 8212;
pub const SPI_SETMINIMUMHITRADIUS: u32 = 8213;
pub const SPI_GETMESSAGEDURATION: u32 = 8214;
pub const SPI_SETMESSAGEDURATION: u32 = 8215;
pub const SPI_GETCONTACTVISUALIZATION: u32 = 8216;
pub const SPI_SETCONTACTVISUALIZATION: u32 = 8217;
pub const CONTACTVISUALIZATION_OFF: u32 = 0;
pub const CONTACTVISUALIZATION_ON: u32 = 1;
pub const CONTACTVISUALIZATION_PRESENTATIONMODE: u32 = 2;
pub const SPI_GETGESTUREVISUALIZATION: u32 = 8218;
pub const SPI_SETGESTUREVISUALIZATION: u32 = 8219;
pub const GESTUREVISUALIZATION_OFF: u32 = 0;
pub const GESTUREVISUALIZATION_ON: u32 = 31;
pub const GESTUREVISUALIZATION_TAP: u32 = 1;
pub const GESTUREVISUALIZATION_DOUBLETAP: u32 = 2;
pub const GESTUREVISUALIZATION_PRESSANDTAP: u32 = 4;
pub const GESTUREVISUALIZATION_PRESSANDHOLD: u32 = 8;
pub const GESTUREVISUALIZATION_RIGHTTAP: u32 = 16;
pub const SPI_GETMOUSEWHEELROUTING: u32 = 8220;
pub const SPI_SETMOUSEWHEELROUTING: u32 = 8221;
pub const MOUSEWHEEL_ROUTING_FOCUS: u32 = 0;
pub const MOUSEWHEEL_ROUTING_HYBRID: u32 = 1;
pub const MOUSEWHEEL_ROUTING_MOUSE_POS: u32 = 2;
pub const SPI_GETPENVISUALIZATION: u32 = 8222;
pub const SPI_SETPENVISUALIZATION: u32 = 8223;
pub const PENVISUALIZATION_ON: u32 = 35;
pub const PENVISUALIZATION_OFF: u32 = 0;
pub const PENVISUALIZATION_TAP: u32 = 1;
pub const PENVISUALIZATION_DOUBLETAP: u32 = 2;
pub const PENVISUALIZATION_CURSOR: u32 = 32;
pub const SPI_GETPENARBITRATIONTYPE: u32 = 8224;
pub const SPI_SETPENARBITRATIONTYPE: u32 = 8225;
pub const PENARBITRATIONTYPE_NONE: u32 = 0;
pub const PENARBITRATIONTYPE_WIN8: u32 = 1;
pub const PENARBITRATIONTYPE_FIS: u32 = 2;
pub const PENARBITRATIONTYPE_SPT: u32 = 3;
pub const PENARBITRATIONTYPE_MAX: u32 = 4;
pub const SPI_GETCARETTIMEOUT: u32 = 8226;
pub const SPI_SETCARETTIMEOUT: u32 = 8227;
pub const SPI_GETHANDEDNESS: u32 = 8228;
pub const SPI_SETHANDEDNESS: u32 = 8229;
pub const SPIF_UPDATEINIFILE: u32 = 1;
pub const SPIF_SENDWININICHANGE: u32 = 2;
pub const SPIF_SENDCHANGE: u32 = 2;
pub const METRICS_USEDEFAULT: i32 = -1;
pub const ARW_BOTTOMLEFT: u32 = 0;
pub const ARW_BOTTOMRIGHT: u32 = 1;
pub const ARW_TOPLEFT: u32 = 2;
pub const ARW_TOPRIGHT: u32 = 3;
pub const ARW_STARTMASK: u32 = 3;
pub const ARW_STARTRIGHT: u32 = 1;
pub const ARW_STARTTOP: u32 = 2;
pub const ARW_LEFT: u32 = 0;
pub const ARW_RIGHT: u32 = 0;
pub const ARW_UP: u32 = 4;
pub const ARW_DOWN: u32 = 4;
pub const ARW_HIDE: u32 = 8;
pub const SERKF_SERIALKEYSON: u32 = 1;
pub const SERKF_AVAILABLE: u32 = 2;
pub const SERKF_INDICATOR: u32 = 4;
pub const HCF_HIGHCONTRASTON: u32 = 1;
pub const HCF_AVAILABLE: u32 = 2;
pub const HCF_HOTKEYACTIVE: u32 = 4;
pub const HCF_CONFIRMHOTKEY: u32 = 8;
pub const HCF_HOTKEYSOUND: u32 = 16;
pub const HCF_INDICATOR: u32 = 32;
pub const HCF_HOTKEYAVAILABLE: u32 = 64;
pub const HCF_LOGONDESKTOP: u32 = 256;
pub const HCF_DEFAULTDESKTOP: u32 = 512;
pub const CDS_UPDATEREGISTRY: u32 = 1;
pub const CDS_TEST: u32 = 2;
pub const CDS_FULLSCREEN: u32 = 4;
pub const CDS_GLOBAL: u32 = 8;
pub const CDS_SET_PRIMARY: u32 = 16;
pub const CDS_VIDEOPARAMETERS: u32 = 32;
pub const CDS_ENABLE_UNSAFE_MODES: u32 = 256;
pub const CDS_DISABLE_UNSAFE_MODES: u32 = 512;
pub const CDS_RESET: u32 = 1073741824;
pub const CDS_RESET_EX: u32 = 536870912;
pub const CDS_NORESET: u32 = 268435456;
pub const VP_COMMAND_GET: u32 = 1;
pub const VP_COMMAND_SET: u32 = 2;
pub const VP_FLAGS_TV_MODE: u32 = 1;
pub const VP_FLAGS_TV_STANDARD: u32 = 2;
pub const VP_FLAGS_FLICKER: u32 = 4;
pub const VP_FLAGS_OVERSCAN: u32 = 8;
pub const VP_FLAGS_MAX_UNSCALED: u32 = 16;
pub const VP_FLAGS_POSITION: u32 = 32;
pub const VP_FLAGS_BRIGHTNESS: u32 = 64;
pub const VP_FLAGS_CONTRAST: u32 = 128;
pub const VP_FLAGS_COPYPROTECT: u32 = 256;
pub const VP_MODE_WIN_GRAPHICS: u32 = 1;
pub const VP_MODE_TV_PLAYBACK: u32 = 2;
pub const VP_TV_STANDARD_NTSC_M: u32 = 1;
pub const VP_TV_STANDARD_NTSC_M_J: u32 = 2;
pub const VP_TV_STANDARD_PAL_B: u32 = 4;
pub const VP_TV_STANDARD_PAL_D: u32 = 8;
pub const VP_TV_STANDARD_PAL_H: u32 = 16;
pub const VP_TV_STANDARD_PAL_I: u32 = 32;
pub const VP_TV_STANDARD_PAL_M: u32 = 64;
pub const VP_TV_STANDARD_PAL_N: u32 = 128;
pub const VP_TV_STANDARD_SECAM_B: u32 = 256;
pub const VP_TV_STANDARD_SECAM_D: u32 = 512;
pub const VP_TV_STANDARD_SECAM_G: u32 = 1024;
pub const VP_TV_STANDARD_SECAM_H: u32 = 2048;
pub const VP_TV_STANDARD_SECAM_K: u32 = 4096;
pub const VP_TV_STANDARD_SECAM_K1: u32 = 8192;
pub const VP_TV_STANDARD_SECAM_L: u32 = 16384;
pub const VP_TV_STANDARD_WIN_VGA: u32 = 32768;
pub const VP_TV_STANDARD_NTSC_433: u32 = 65536;
pub const VP_TV_STANDARD_PAL_G: u32 = 131072;
pub const VP_TV_STANDARD_PAL_60: u32 = 262144;
pub const VP_TV_STANDARD_SECAM_L1: u32 = 524288;
pub const VP_CP_TYPE_APS_TRIGGER: u32 = 1;
pub const VP_CP_TYPE_MACROVISION: u32 = 2;
pub const VP_CP_CMD_ACTIVATE: u32 = 1;
pub const VP_CP_CMD_DEACTIVATE: u32 = 2;
pub const VP_CP_CMD_CHANGE: u32 = 4;
pub const DISP_CHANGE_SUCCESSFUL: u32 = 0;
pub const DISP_CHANGE_RESTART: u32 = 1;
pub const DISP_CHANGE_FAILED: i32 = -1;
pub const DISP_CHANGE_BADMODE: i32 = -2;
pub const DISP_CHANGE_NOTUPDATED: i32 = -3;
pub const DISP_CHANGE_BADFLAGS: i32 = -4;
pub const DISP_CHANGE_BADPARAM: i32 = -5;
pub const DISP_CHANGE_BADDUALVIEW: i32 = -6;
pub const EDS_RAWMODE: u32 = 2;
pub const EDS_ROTATEDMODE: u32 = 4;
pub const EDD_GET_DEVICE_INTERFACE_NAME: u32 = 1;
pub const FKF_FILTERKEYSON: u32 = 1;
pub const FKF_AVAILABLE: u32 = 2;
pub const FKF_HOTKEYACTIVE: u32 = 4;
pub const FKF_CONFIRMHOTKEY: u32 = 8;
pub const FKF_HOTKEYSOUND: u32 = 16;
pub const FKF_INDICATOR: u32 = 32;
pub const FKF_CLICKON: u32 = 64;
pub const SKF_STICKYKEYSON: u32 = 1;
pub const SKF_AVAILABLE: u32 = 2;
pub const SKF_HOTKEYACTIVE: u32 = 4;
pub const SKF_CONFIRMHOTKEY: u32 = 8;
pub const SKF_HOTKEYSOUND: u32 = 16;
pub const SKF_INDICATOR: u32 = 32;
pub const SKF_AUDIBLEFEEDBACK: u32 = 64;
pub const SKF_TRISTATE: u32 = 128;
pub const SKF_TWOKEYSOFF: u32 = 256;
pub const SKF_LALTLATCHED: u32 = 268435456;
pub const SKF_LCTLLATCHED: u32 = 67108864;
pub const SKF_LSHIFTLATCHED: u32 = 16777216;
pub const SKF_RALTLATCHED: u32 = 536870912;
pub const SKF_RCTLLATCHED: u32 = 134217728;
pub const SKF_RSHIFTLATCHED: u32 = 33554432;
pub const SKF_LWINLATCHED: u32 = 1073741824;
pub const SKF_RWINLATCHED: u32 = 2147483648;
pub const SKF_LALTLOCKED: u32 = 1048576;
pub const SKF_LCTLLOCKED: u32 = 262144;
pub const SKF_LSHIFTLOCKED: u32 = 65536;
pub const SKF_RALTLOCKED: u32 = 2097152;
pub const SKF_RCTLLOCKED: u32 = 524288;
pub const SKF_RSHIFTLOCKED: u32 = 131072;
pub const SKF_LWINLOCKED: u32 = 4194304;
pub const SKF_RWINLOCKED: u32 = 8388608;
pub const MKF_MOUSEKEYSON: u32 = 1;
pub const MKF_AVAILABLE: u32 = 2;
pub const MKF_HOTKEYACTIVE: u32 = 4;
pub const MKF_CONFIRMHOTKEY: u32 = 8;
pub const MKF_HOTKEYSOUND: u32 = 16;
pub const MKF_INDICATOR: u32 = 32;
pub const MKF_MODIFIERS: u32 = 64;
pub const MKF_REPLACENUMBERS: u32 = 128;
pub const MKF_LEFTBUTTONSEL: u32 = 268435456;
pub const MKF_RIGHTBUTTONSEL: u32 = 536870912;
pub const MKF_LEFTBUTTONDOWN: u32 = 16777216;
pub const MKF_RIGHTBUTTONDOWN: u32 = 33554432;
pub const MKF_MOUSEMODE: u32 = 2147483648;
pub const ATF_TIMEOUTON: u32 = 1;
pub const ATF_ONOFFFEEDBACK: u32 = 2;
pub const SSGF_NONE: u32 = 0;
pub const SSGF_DISPLAY: u32 = 3;
pub const SSTF_NONE: u32 = 0;
pub const SSTF_CHARS: u32 = 1;
pub const SSTF_BORDER: u32 = 2;
pub const SSTF_DISPLAY: u32 = 3;
pub const SSWF_NONE: u32 = 0;
pub const SSWF_TITLE: u32 = 1;
pub const SSWF_WINDOW: u32 = 2;
pub const SSWF_DISPLAY: u32 = 3;
pub const SSWF_CUSTOM: u32 = 4;
pub const SSF_SOUNDSENTRYON: u32 = 1;
pub const SSF_AVAILABLE: u32 = 2;
pub const SSF_INDICATOR: u32 = 4;
pub const TKF_TOGGLEKEYSON: u32 = 1;
pub const TKF_AVAILABLE: u32 = 2;
pub const TKF_HOTKEYACTIVE: u32 = 4;
pub const TKF_CONFIRMHOTKEY: u32 = 8;
pub const TKF_HOTKEYSOUND: u32 = 16;
pub const TKF_INDICATOR: u32 = 32;
pub const SLE_ERROR: u32 = 1;
pub const SLE_MINORERROR: u32 = 2;
pub const SLE_WARNING: u32 = 3;
pub const MONITOR_DEFAULTTONULL: u32 = 0;
pub const MONITOR_DEFAULTTOPRIMARY: u32 = 1;
pub const MONITOR_DEFAULTTONEAREST: u32 = 2;
pub const MONITORINFOF_PRIMARY: u32 = 1;
pub const WINEVENT_OUTOFCONTEXT: u32 = 0;
pub const WINEVENT_SKIPOWNTHREAD: u32 = 1;
pub const WINEVENT_SKIPOWNPROCESS: u32 = 2;
pub const WINEVENT_INCONTEXT: u32 = 4;
pub const CHILDID_SELF: u32 = 0;
pub const INDEXID_OBJECT: u32 = 0;
pub const INDEXID_CONTAINER: u32 = 0;
pub const EVENT_MIN: u32 = 1;
pub const EVENT_MAX: u32 = 2147483647;
pub const EVENT_SYSTEM_SOUND: u32 = 1;
pub const EVENT_SYSTEM_ALERT: u32 = 2;
pub const EVENT_SYSTEM_FOREGROUND: u32 = 3;
pub const EVENT_SYSTEM_MENUSTART: u32 = 4;
pub const EVENT_SYSTEM_MENUEND: u32 = 5;
pub const EVENT_SYSTEM_MENUPOPUPSTART: u32 = 6;
pub const EVENT_SYSTEM_MENUPOPUPEND: u32 = 7;
pub const EVENT_SYSTEM_CAPTURESTART: u32 = 8;
pub const EVENT_SYSTEM_CAPTUREEND: u32 = 9;
pub const EVENT_SYSTEM_MOVESIZESTART: u32 = 10;
pub const EVENT_SYSTEM_MOVESIZEEND: u32 = 11;
pub const EVENT_SYSTEM_CONTEXTHELPSTART: u32 = 12;
pub const EVENT_SYSTEM_CONTEXTHELPEND: u32 = 13;
pub const EVENT_SYSTEM_DRAGDROPSTART: u32 = 14;
pub const EVENT_SYSTEM_DRAGDROPEND: u32 = 15;
pub const EVENT_SYSTEM_DIALOGSTART: u32 = 16;
pub const EVENT_SYSTEM_DIALOGEND: u32 = 17;
pub const EVENT_SYSTEM_SCROLLINGSTART: u32 = 18;
pub const EVENT_SYSTEM_SCROLLINGEND: u32 = 19;
pub const EVENT_SYSTEM_SWITCHSTART: u32 = 20;
pub const EVENT_SYSTEM_SWITCHEND: u32 = 21;
pub const EVENT_SYSTEM_MINIMIZESTART: u32 = 22;
pub const EVENT_SYSTEM_MINIMIZEEND: u32 = 23;
pub const EVENT_SYSTEM_DESKTOPSWITCH: u32 = 32;
pub const EVENT_SYSTEM_SWITCHER_APPGRABBED: u32 = 36;
pub const EVENT_SYSTEM_SWITCHER_APPOVERTARGET: u32 = 37;
pub const EVENT_SYSTEM_SWITCHER_APPDROPPED: u32 = 38;
pub const EVENT_SYSTEM_SWITCHER_CANCELLED: u32 = 39;
pub const EVENT_SYSTEM_IME_KEY_NOTIFICATION: u32 = 41;
pub const EVENT_SYSTEM_END: u32 = 255;
pub const EVENT_OEM_DEFINED_START: u32 = 257;
pub const EVENT_OEM_DEFINED_END: u32 = 511;
pub const EVENT_UIA_EVENTID_START: u32 = 19968;
pub const EVENT_UIA_EVENTID_END: u32 = 20223;
pub const EVENT_UIA_PROPID_START: u32 = 29952;
pub const EVENT_UIA_PROPID_END: u32 = 30207;
pub const EVENT_CONSOLE_CARET: u32 = 16385;
pub const EVENT_CONSOLE_UPDATE_REGION: u32 = 16386;
pub const EVENT_CONSOLE_UPDATE_SIMPLE: u32 = 16387;
pub const EVENT_CONSOLE_UPDATE_SCROLL: u32 = 16388;
pub const EVENT_CONSOLE_LAYOUT: u32 = 16389;
pub const EVENT_CONSOLE_START_APPLICATION: u32 = 16390;
pub const EVENT_CONSOLE_END_APPLICATION: u32 = 16391;
pub const CONSOLE_APPLICATION_16BIT: u32 = 0;
pub const CONSOLE_CARET_SELECTION: u32 = 1;
pub const CONSOLE_CARET_VISIBLE: u32 = 2;
pub const EVENT_CONSOLE_END: u32 = 16639;
pub const EVENT_OBJECT_CREATE: u32 = 32768;
pub const EVENT_OBJECT_DESTROY: u32 = 32769;
pub const EVENT_OBJECT_SHOW: u32 = 32770;
pub const EVENT_OBJECT_HIDE: u32 = 32771;
pub const EVENT_OBJECT_REORDER: u32 = 32772;
pub const EVENT_OBJECT_FOCUS: u32 = 32773;
pub const EVENT_OBJECT_SELECTION: u32 = 32774;
pub const EVENT_OBJECT_SELECTIONADD: u32 = 32775;
pub const EVENT_OBJECT_SELECTIONREMOVE: u32 = 32776;
pub const EVENT_OBJECT_SELECTIONWITHIN: u32 = 32777;
pub const EVENT_OBJECT_STATECHANGE: u32 = 32778;
pub const EVENT_OBJECT_LOCATIONCHANGE: u32 = 32779;
pub const EVENT_OBJECT_NAMECHANGE: u32 = 32780;
pub const EVENT_OBJECT_DESCRIPTIONCHANGE: u32 = 32781;
pub const EVENT_OBJECT_VALUECHANGE: u32 = 32782;
pub const EVENT_OBJECT_PARENTCHANGE: u32 = 32783;
pub const EVENT_OBJECT_HELPCHANGE: u32 = 32784;
pub const EVENT_OBJECT_DEFACTIONCHANGE: u32 = 32785;
pub const EVENT_OBJECT_ACCELERATORCHANGE: u32 = 32786;
pub const EVENT_OBJECT_INVOKED: u32 = 32787;
pub const EVENT_OBJECT_TEXTSELECTIONCHANGED: u32 = 32788;
pub const EVENT_OBJECT_CONTENTSCROLLED: u32 = 32789;
pub const EVENT_SYSTEM_ARRANGMENTPREVIEW: u32 = 32790;
pub const EVENT_OBJECT_CLOAKED: u32 = 32791;
pub const EVENT_OBJECT_UNCLOAKED: u32 = 32792;
pub const EVENT_OBJECT_LIVEREGIONCHANGED: u32 = 32793;
pub const EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED: u32 = 32800;
pub const EVENT_OBJECT_DRAGSTART: u32 = 32801;
pub const EVENT_OBJECT_DRAGCANCEL: u32 = 32802;
pub const EVENT_OBJECT_DRAGCOMPLETE: u32 = 32803;
pub const EVENT_OBJECT_DRAGENTER: u32 = 32804;
pub const EVENT_OBJECT_DRAGLEAVE: u32 = 32805;
pub const EVENT_OBJECT_DRAGDROPPED: u32 = 32806;
pub const EVENT_OBJECT_IME_SHOW: u32 = 32807;
pub const EVENT_OBJECT_IME_HIDE: u32 = 32808;
pub const EVENT_OBJECT_IME_CHANGE: u32 = 32809;
pub const EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED: u32 = 32816;
pub const EVENT_OBJECT_END: u32 = 33023;
pub const EVENT_AIA_START: u32 = 40960;
pub const EVENT_AIA_END: u32 = 45055;
pub const SOUND_SYSTEM_STARTUP: u32 = 1;
pub const SOUND_SYSTEM_SHUTDOWN: u32 = 2;
pub const SOUND_SYSTEM_BEEP: u32 = 3;
pub const SOUND_SYSTEM_ERROR: u32 = 4;
pub const SOUND_SYSTEM_QUESTION: u32 = 5;
pub const SOUND_SYSTEM_WARNING: u32 = 6;
pub const SOUND_SYSTEM_INFORMATION: u32 = 7;
pub const SOUND_SYSTEM_MAXIMIZE: u32 = 8;
pub const SOUND_SYSTEM_MINIMIZE: u32 = 9;
pub const SOUND_SYSTEM_RESTOREUP: u32 = 10;
pub const SOUND_SYSTEM_RESTOREDOWN: u32 = 11;
pub const SOUND_SYSTEM_APPSTART: u32 = 12;
pub const SOUND_SYSTEM_FAULT: u32 = 13;
pub const SOUND_SYSTEM_APPEND: u32 = 14;
pub const SOUND_SYSTEM_MENUCOMMAND: u32 = 15;
pub const SOUND_SYSTEM_MENUPOPUP: u32 = 16;
pub const CSOUND_SYSTEM: u32 = 16;
pub const ALERT_SYSTEM_INFORMATIONAL: u32 = 1;
pub const ALERT_SYSTEM_WARNING: u32 = 2;
pub const ALERT_SYSTEM_ERROR: u32 = 3;
pub const ALERT_SYSTEM_QUERY: u32 = 4;
pub const ALERT_SYSTEM_CRITICAL: u32 = 5;
pub const CALERT_SYSTEM: u32 = 6;
pub const GUI_CARETBLINKING: u32 = 1;
pub const GUI_INMOVESIZE: u32 = 2;
pub const GUI_INMENUMODE: u32 = 4;
pub const GUI_SYSTEMMENUMODE: u32 = 8;
pub const GUI_POPUPMENUMODE: u32 = 16;
pub const GUI_16BITTASK: u32 = 0;
pub const USER_DEFAULT_SCREEN_DPI: u32 = 96;
pub const STATE_SYSTEM_UNAVAILABLE: u32 = 1;
pub const STATE_SYSTEM_SELECTED: u32 = 2;
pub const STATE_SYSTEM_FOCUSED: u32 = 4;
pub const STATE_SYSTEM_PRESSED: u32 = 8;
pub const STATE_SYSTEM_CHECKED: u32 = 16;
pub const STATE_SYSTEM_MIXED: u32 = 32;
pub const STATE_SYSTEM_INDETERMINATE: u32 = 32;
pub const STATE_SYSTEM_READONLY: u32 = 64;
pub const STATE_SYSTEM_HOTTRACKED: u32 = 128;
pub const STATE_SYSTEM_DEFAULT: u32 = 256;
pub const STATE_SYSTEM_EXPANDED: u32 = 512;
pub const STATE_SYSTEM_COLLAPSED: u32 = 1024;
pub const STATE_SYSTEM_BUSY: u32 = 2048;
pub const STATE_SYSTEM_FLOATING: u32 = 4096;
pub const STATE_SYSTEM_MARQUEED: u32 = 8192;
pub const STATE_SYSTEM_ANIMATED: u32 = 16384;
pub const STATE_SYSTEM_INVISIBLE: u32 = 32768;
pub const STATE_SYSTEM_OFFSCREEN: u32 = 65536;
pub const STATE_SYSTEM_SIZEABLE: u32 = 131072;
pub const STATE_SYSTEM_MOVEABLE: u32 = 262144;
pub const STATE_SYSTEM_SELFVOICING: u32 = 524288;
pub const STATE_SYSTEM_FOCUSABLE: u32 = 1048576;
pub const STATE_SYSTEM_SELECTABLE: u32 = 2097152;
pub const STATE_SYSTEM_LINKED: u32 = 4194304;
pub const STATE_SYSTEM_TRAVERSED: u32 = 8388608;
pub const STATE_SYSTEM_MULTISELECTABLE: u32 = 16777216;
pub const STATE_SYSTEM_EXTSELECTABLE: u32 = 33554432;
pub const STATE_SYSTEM_ALERT_LOW: u32 = 67108864;
pub const STATE_SYSTEM_ALERT_MEDIUM: u32 = 134217728;
pub const STATE_SYSTEM_ALERT_HIGH: u32 = 268435456;
pub const STATE_SYSTEM_PROTECTED: u32 = 536870912;
pub const STATE_SYSTEM_VALID: u32 = 1073741823;
pub const CCHILDREN_TITLEBAR: u32 = 5;
pub const CCHILDREN_SCROLLBAR: u32 = 5;
pub const CURSOR_SHOWING: u32 = 1;
pub const CURSOR_SUPPRESSED: u32 = 2;
pub const WS_ACTIVECAPTION: u32 = 1;
pub const GA_PARENT: u32 = 1;
pub const GA_ROOT: u32 = 2;
pub const GA_ROOTOWNER: u32 = 3;
pub const RIM_INPUT: u32 = 0;
pub const RIM_INPUTSINK: u32 = 1;
pub const RIM_TYPEMOUSE: u32 = 0;
pub const RIM_TYPEKEYBOARD: u32 = 1;
pub const RIM_TYPEHID: u32 = 2;
pub const RIM_TYPEMAX: u32 = 2;
pub const RI_MOUSE_LEFT_BUTTON_DOWN: u32 = 1;
pub const RI_MOUSE_LEFT_BUTTON_UP: u32 = 2;
pub const RI_MOUSE_RIGHT_BUTTON_DOWN: u32 = 4;
pub const RI_MOUSE_RIGHT_BUTTON_UP: u32 = 8;
pub const RI_MOUSE_MIDDLE_BUTTON_DOWN: u32 = 16;
pub const RI_MOUSE_MIDDLE_BUTTON_UP: u32 = 32;
pub const RI_MOUSE_BUTTON_1_DOWN: u32 = 1;
pub const RI_MOUSE_BUTTON_1_UP: u32 = 2;
pub const RI_MOUSE_BUTTON_2_DOWN: u32 = 4;
pub const RI_MOUSE_BUTTON_2_UP: u32 = 8;
pub const RI_MOUSE_BUTTON_3_DOWN: u32 = 16;
pub const RI_MOUSE_BUTTON_3_UP: u32 = 32;
pub const RI_MOUSE_BUTTON_4_DOWN: u32 = 64;
pub const RI_MOUSE_BUTTON_4_UP: u32 = 128;
pub const RI_MOUSE_BUTTON_5_DOWN: u32 = 256;
pub const RI_MOUSE_BUTTON_5_UP: u32 = 512;
pub const RI_MOUSE_WHEEL: u32 = 1024;
pub const RI_MOUSE_HWHEEL: u32 = 2048;
pub const MOUSE_MOVE_RELATIVE: u32 = 0;
pub const MOUSE_MOVE_ABSOLUTE: u32 = 1;
pub const MOUSE_VIRTUAL_DESKTOP: u32 = 2;
pub const MOUSE_ATTRIBUTES_CHANGED: u32 = 4;
pub const MOUSE_MOVE_NOCOALESCE: u32 = 8;
pub const KEYBOARD_OVERRUN_MAKE_CODE: u32 = 255;
pub const RI_KEY_MAKE: u32 = 0;
pub const RI_KEY_BREAK: u32 = 1;
pub const RI_KEY_E0: u32 = 2;
pub const RI_KEY_E1: u32 = 4;
pub const RI_KEY_TERMSRV_SET_LED: u32 = 8;
pub const RI_KEY_TERMSRV_SHADOW: u32 = 16;
pub const RID_INPUT: u32 = 268435459;
pub const RID_HEADER: u32 = 268435461;
pub const RIDI_PREPARSEDDATA: u32 = 536870917;
pub const RIDI_DEVICENAME: u32 = 536870919;
pub const RIDI_DEVICEINFO: u32 = 536870923;
pub const RIDEV_REMOVE: u32 = 1;
pub const RIDEV_EXCLUDE: u32 = 16;
pub const RIDEV_PAGEONLY: u32 = 32;
pub const RIDEV_NOLEGACY: u32 = 48;
pub const RIDEV_INPUTSINK: u32 = 256;
pub const RIDEV_CAPTUREMOUSE: u32 = 512;
pub const RIDEV_NOHOTKEYS: u32 = 512;
pub const RIDEV_APPKEYS: u32 = 1024;
pub const RIDEV_EXINPUTSINK: u32 = 4096;
pub const RIDEV_DEVNOTIFY: u32 = 8192;
pub const RIDEV_EXMODEMASK: u32 = 240;
pub const GIDC_ARRIVAL: u32 = 1;
pub const GIDC_REMOVAL: u32 = 2;
pub const POINTER_DEVICE_PRODUCT_STRING_MAX: u32 = 520;
pub const PDC_ARRIVAL: u32 = 1;
pub const PDC_REMOVAL: u32 = 2;
pub const PDC_ORIENTATION_0: u32 = 4;
pub const PDC_ORIENTATION_90: u32 = 8;
pub const PDC_ORIENTATION_180: u32 = 16;
pub const PDC_ORIENTATION_270: u32 = 32;
pub const PDC_MODE_DEFAULT: u32 = 64;
pub const PDC_MODE_CENTERED: u32 = 128;
pub const PDC_MAPPING_CHANGE: u32 = 256;
pub const PDC_RESOLUTION: u32 = 512;
pub const PDC_ORIGIN: u32 = 1024;
pub const PDC_MODE_ASPECTRATIOPRESERVED: u32 = 2048;
pub const MSGFLT_ADD: u32 = 1;
pub const MSGFLT_REMOVE: u32 = 2;
pub const MSGFLTINFO_NONE: u32 = 0;
pub const MSGFLTINFO_ALREADYALLOWED_FORWND: u32 = 1;
pub const MSGFLTINFO_ALREADYDISALLOWED_FORWND: u32 = 2;
pub const MSGFLTINFO_ALLOWED_HIGHER: u32 = 3;
pub const MSGFLT_RESET: u32 = 0;
pub const MSGFLT_ALLOW: u32 = 1;
pub const MSGFLT_DISALLOW: u32 = 2;
pub const GF_BEGIN: u32 = 1;
pub const GF_INERTIA: u32 = 2;
pub const GF_END: u32 = 4;
pub const GID_BEGIN: u32 = 1;
pub const GID_END: u32 = 2;
pub const GID_ZOOM: u32 = 3;
pub const GID_PAN: u32 = 4;
pub const GID_ROTATE: u32 = 5;
pub const GID_TWOFINGERTAP: u32 = 6;
pub const GID_PRESSANDTAP: u32 = 7;
pub const GID_ROLLOVER: u32 = 7;
pub const GC_ALLGESTURES: u32 = 1;
pub const GC_ZOOM: u32 = 1;
pub const GC_PAN: u32 = 1;
pub const GC_PAN_WITH_SINGLE_FINGER_VERTICALLY: u32 = 2;
pub const GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY: u32 = 4;
pub const GC_PAN_WITH_GUTTER: u32 = 8;
pub const GC_PAN_WITH_INERTIA: u32 = 16;
pub const GC_ROTATE: u32 = 1;
pub const GC_TWOFINGERTAP: u32 = 1;
pub const GC_PRESSANDTAP: u32 = 1;
pub const GC_ROLLOVER: u32 = 1;
pub const GESTURECONFIGMAXCOUNT: u32 = 256;
pub const GCF_INCLUDE_ANCESTORS: u32 = 1;
pub const NID_INTEGRATED_TOUCH: u32 = 1;
pub const NID_EXTERNAL_TOUCH: u32 = 2;
pub const NID_INTEGRATED_PEN: u32 = 4;
pub const NID_EXTERNAL_PEN: u32 = 8;
pub const NID_MULTI_INPUT: u32 = 64;
pub const NID_READY: u32 = 128;
pub const MAX_STR_BLOCKREASON: u32 = 256;
pub const MAX_LEADBYTES: u32 = 12;
pub const MAX_DEFAULTCHAR: u32 = 2;
pub const HIGH_SURROGATE_START: u32 = 55296;
pub const HIGH_SURROGATE_END: u32 = 56319;
pub const LOW_SURROGATE_START: u32 = 56320;
pub const LOW_SURROGATE_END: u32 = 57343;
pub const MB_PRECOMPOSED: u32 = 1;
pub const MB_COMPOSITE: u32 = 2;
pub const MB_USEGLYPHCHARS: u32 = 4;
pub const MB_ERR_INVALID_CHARS: u32 = 8;
pub const WC_COMPOSITECHECK: u32 = 512;
pub const WC_DISCARDNS: u32 = 16;
pub const WC_SEPCHARS: u32 = 32;
pub const WC_DEFAULTCHAR: u32 = 64;
pub const WC_ERR_INVALID_CHARS: u32 = 128;
pub const WC_NO_BEST_FIT_CHARS: u32 = 1024;
pub const CT_CTYPE1: u32 = 1;
pub const CT_CTYPE2: u32 = 2;
pub const CT_CTYPE3: u32 = 4;
pub const C1_UPPER: u32 = 1;
pub const C1_LOWER: u32 = 2;
pub const C1_DIGIT: u32 = 4;
pub const C1_SPACE: u32 = 8;
pub const C1_PUNCT: u32 = 16;
pub const C1_CNTRL: u32 = 32;
pub const C1_BLANK: u32 = 64;
pub const C1_XDIGIT: u32 = 128;
pub const C1_ALPHA: u32 = 256;
pub const C1_DEFINED: u32 = 512;
pub const C2_LEFTTORIGHT: u32 = 1;
pub const C2_RIGHTTOLEFT: u32 = 2;
pub const C2_EUROPENUMBER: u32 = 3;
pub const C2_EUROPESEPARATOR: u32 = 4;
pub const C2_EUROPETERMINATOR: u32 = 5;
pub const C2_ARABICNUMBER: u32 = 6;
pub const C2_COMMONSEPARATOR: u32 = 7;
pub const C2_BLOCKSEPARATOR: u32 = 8;
pub const C2_SEGMENTSEPARATOR: u32 = 9;
pub const C2_WHITESPACE: u32 = 10;
pub const C2_OTHERNEUTRAL: u32 = 11;
pub const C2_NOTAPPLICABLE: u32 = 0;
pub const C3_NONSPACING: u32 = 1;
pub const C3_DIACRITIC: u32 = 2;
pub const C3_VOWELMARK: u32 = 4;
pub const C3_SYMBOL: u32 = 8;
pub const C3_KATAKANA: u32 = 16;
pub const C3_HIRAGANA: u32 = 32;
pub const C3_HALFWIDTH: u32 = 64;
pub const C3_FULLWIDTH: u32 = 128;
pub const C3_IDEOGRAPH: u32 = 256;
pub const C3_KASHIDA: u32 = 512;
pub const C3_LEXICAL: u32 = 1024;
pub const C3_HIGHSURROGATE: u32 = 2048;
pub const C3_LOWSURROGATE: u32 = 4096;
pub const C3_ALPHA: u32 = 32768;
pub const C3_NOTAPPLICABLE: u32 = 0;
pub const NORM_IGNORECASE: u32 = 1;
pub const NORM_IGNORENONSPACE: u32 = 2;
pub const NORM_IGNORESYMBOLS: u32 = 4;
pub const LINGUISTIC_IGNORECASE: u32 = 16;
pub const LINGUISTIC_IGNOREDIACRITIC: u32 = 32;
pub const NORM_IGNOREKANATYPE: u32 = 65536;
pub const NORM_IGNOREWIDTH: u32 = 131072;
pub const NORM_LINGUISTIC_CASING: u32 = 134217728;
pub const MAP_FOLDCZONE: u32 = 16;
pub const MAP_PRECOMPOSED: u32 = 32;
pub const MAP_COMPOSITE: u32 = 64;
pub const MAP_FOLDDIGITS: u32 = 128;
pub const MAP_EXPAND_LIGATURES: u32 = 8192;
pub const LCMAP_LOWERCASE: u32 = 256;
pub const LCMAP_UPPERCASE: u32 = 512;
pub const LCMAP_TITLECASE: u32 = 768;
pub const LCMAP_SORTKEY: u32 = 1024;
pub const LCMAP_BYTEREV: u32 = 2048;
pub const LCMAP_HIRAGANA: u32 = 1048576;
pub const LCMAP_KATAKANA: u32 = 2097152;
pub const LCMAP_HALFWIDTH: u32 = 4194304;
pub const LCMAP_FULLWIDTH: u32 = 8388608;
pub const LCMAP_LINGUISTIC_CASING: u32 = 16777216;
pub const LCMAP_SIMPLIFIED_CHINESE: u32 = 33554432;
pub const LCMAP_TRADITIONAL_CHINESE: u32 = 67108864;
pub const LCMAP_SORTHANDLE: u32 = 536870912;
pub const LCMAP_HASH: u32 = 262144;
pub const FIND_STARTSWITH: u32 = 1048576;
pub const FIND_ENDSWITH: u32 = 2097152;
pub const FIND_FROMSTART: u32 = 4194304;
pub const FIND_FROMEND: u32 = 8388608;
pub const LGRPID_INSTALLED: u32 = 1;
pub const LGRPID_SUPPORTED: u32 = 2;
pub const LCID_INSTALLED: u32 = 1;
pub const LCID_SUPPORTED: u32 = 2;
pub const LCID_ALTERNATE_SORTS: u32 = 4;
pub const LOCALE_ALL: u32 = 0;
pub const LOCALE_WINDOWS: u32 = 1;
pub const LOCALE_SUPPLEMENTAL: u32 = 2;
pub const LOCALE_ALTERNATE_SORTS: u32 = 4;
pub const LOCALE_REPLACEMENT: u32 = 8;
pub const LOCALE_NEUTRALDATA: u32 = 16;
pub const LOCALE_SPECIFICDATA: u32 = 32;
pub const CP_INSTALLED: u32 = 1;
pub const CP_SUPPORTED: u32 = 2;
pub const SORT_STRINGSORT: u32 = 4096;
pub const SORT_DIGITSASNUMBERS: u32 = 8;
pub const CSTR_LESS_THAN: u32 = 1;
pub const CSTR_EQUAL: u32 = 2;
pub const CSTR_GREATER_THAN: u32 = 3;
pub const CP_ACP: u32 = 0;
pub const CP_OEMCP: u32 = 1;
pub const CP_MACCP: u32 = 2;
pub const CP_THREAD_ACP: u32 = 3;
pub const CP_SYMBOL: u32 = 42;
pub const CP_UTF7: u32 = 65000;
pub const CP_UTF8: u32 = 65001;
pub const CTRY_DEFAULT: u32 = 0;
pub const CTRY_ALBANIA: u32 = 355;
pub const CTRY_ALGERIA: u32 = 213;
pub const CTRY_ARGENTINA: u32 = 54;
pub const CTRY_ARMENIA: u32 = 374;
pub const CTRY_AUSTRALIA: u32 = 61;
pub const CTRY_AUSTRIA: u32 = 43;
pub const CTRY_AZERBAIJAN: u32 = 994;
pub const CTRY_BAHRAIN: u32 = 973;
pub const CTRY_BELARUS: u32 = 375;
pub const CTRY_BELGIUM: u32 = 32;
pub const CTRY_BELIZE: u32 = 501;
pub const CTRY_BOLIVIA: u32 = 591;
pub const CTRY_BRAZIL: u32 = 55;
pub const CTRY_BRUNEI_DARUSSALAM: u32 = 673;
pub const CTRY_BULGARIA: u32 = 359;
pub const CTRY_CANADA: u32 = 2;
pub const CTRY_CARIBBEAN: u32 = 1;
pub const CTRY_CHILE: u32 = 56;
pub const CTRY_COLOMBIA: u32 = 57;
pub const CTRY_COSTA_RICA: u32 = 506;
pub const CTRY_CROATIA: u32 = 385;
pub const CTRY_CZECH: u32 = 420;
pub const CTRY_DENMARK: u32 = 45;
pub const CTRY_DOMINICAN_REPUBLIC: u32 = 1;
pub const CTRY_ECUADOR: u32 = 593;
pub const CTRY_EGYPT: u32 = 20;
pub const CTRY_EL_SALVADOR: u32 = 503;
pub const CTRY_ESTONIA: u32 = 372;
pub const CTRY_FAEROE_ISLANDS: u32 = 298;
pub const CTRY_FINLAND: u32 = 358;
pub const CTRY_FRANCE: u32 = 33;
pub const CTRY_GEORGIA: u32 = 995;
pub const CTRY_GERMANY: u32 = 49;
pub const CTRY_GREECE: u32 = 30;
pub const CTRY_GUATEMALA: u32 = 502;
pub const CTRY_HONDURAS: u32 = 504;
pub const CTRY_HONG_KONG: u32 = 852;
pub const CTRY_HUNGARY: u32 = 36;
pub const CTRY_ICELAND: u32 = 354;
pub const CTRY_INDIA: u32 = 91;
pub const CTRY_INDONESIA: u32 = 62;
pub const CTRY_IRAN: u32 = 981;
pub const CTRY_IRAQ: u32 = 964;
pub const CTRY_IRELAND: u32 = 353;
pub const CTRY_ISRAEL: u32 = 972;
pub const CTRY_ITALY: u32 = 39;
pub const CTRY_JAMAICA: u32 = 1;
pub const CTRY_JAPAN: u32 = 81;
pub const CTRY_JORDAN: u32 = 962;
pub const CTRY_KAZAKSTAN: u32 = 7;
pub const CTRY_KENYA: u32 = 254;
pub const CTRY_KUWAIT: u32 = 965;
pub const CTRY_KYRGYZSTAN: u32 = 996;
pub const CTRY_LATVIA: u32 = 371;
pub const CTRY_LEBANON: u32 = 961;
pub const CTRY_LIBYA: u32 = 218;
pub const CTRY_LIECHTENSTEIN: u32 = 41;
pub const CTRY_LITHUANIA: u32 = 370;
pub const CTRY_LUXEMBOURG: u32 = 352;
pub const CTRY_MACAU: u32 = 853;
pub const CTRY_MACEDONIA: u32 = 389;
pub const CTRY_MALAYSIA: u32 = 60;
pub const CTRY_MALDIVES: u32 = 960;
pub const CTRY_MEXICO: u32 = 52;
pub const CTRY_MONACO: u32 = 33;
pub const CTRY_MONGOLIA: u32 = 976;
pub const CTRY_MOROCCO: u32 = 212;
pub const CTRY_NETHERLANDS: u32 = 31;
pub const CTRY_NEW_ZEALAND: u32 = 64;
pub const CTRY_NICARAGUA: u32 = 505;
pub const CTRY_NORWAY: u32 = 47;
pub const CTRY_OMAN: u32 = 968;
pub const CTRY_PAKISTAN: u32 = 92;
pub const CTRY_PANAMA: u32 = 507;
pub const CTRY_PARAGUAY: u32 = 595;
pub const CTRY_PERU: u32 = 51;
pub const CTRY_PHILIPPINES: u32 = 63;
pub const CTRY_POLAND: u32 = 48;
pub const CTRY_PORTUGAL: u32 = 351;
pub const CTRY_PRCHINA: u32 = 86;
pub const CTRY_PUERTO_RICO: u32 = 1;
pub const CTRY_QATAR: u32 = 974;
pub const CTRY_ROMANIA: u32 = 40;
pub const CTRY_RUSSIA: u32 = 7;
pub const CTRY_SAUDI_ARABIA: u32 = 966;
pub const CTRY_SERBIA: u32 = 381;
pub const CTRY_SINGAPORE: u32 = 65;
pub const CTRY_SLOVAK: u32 = 421;
pub const CTRY_SLOVENIA: u32 = 386;
pub const CTRY_SOUTH_AFRICA: u32 = 27;
pub const CTRY_SOUTH_KOREA: u32 = 82;
pub const CTRY_SPAIN: u32 = 34;
pub const CTRY_SWEDEN: u32 = 46;
pub const CTRY_SWITZERLAND: u32 = 41;
pub const CTRY_SYRIA: u32 = 963;
pub const CTRY_TAIWAN: u32 = 886;
pub const CTRY_TATARSTAN: u32 = 7;
pub const CTRY_THAILAND: u32 = 66;
pub const CTRY_TRINIDAD_Y_TOBAGO: u32 = 1;
pub const CTRY_TUNISIA: u32 = 216;
pub const CTRY_TURKEY: u32 = 90;
pub const CTRY_UAE: u32 = 971;
pub const CTRY_UKRAINE: u32 = 380;
pub const CTRY_UNITED_KINGDOM: u32 = 44;
pub const CTRY_UNITED_STATES: u32 = 1;
pub const CTRY_URUGUAY: u32 = 598;
pub const CTRY_UZBEKISTAN: u32 = 7;
pub const CTRY_VENEZUELA: u32 = 58;
pub const CTRY_VIET_NAM: u32 = 84;
pub const CTRY_YEMEN: u32 = 967;
pub const CTRY_ZIMBABWE: u32 = 263;
pub const LOCALE_NOUSEROVERRIDE: u32 = 2147483648;
pub const LOCALE_USE_CP_ACP: u32 = 1073741824;
pub const LOCALE_RETURN_NUMBER: u32 = 536870912;
pub const LOCALE_RETURN_GENITIVE_NAMES: u32 = 268435456;
pub const LOCALE_ALLOW_NEUTRAL_NAMES: u32 = 134217728;
pub const LOCALE_SLOCALIZEDDISPLAYNAME: u32 = 2;
pub const LOCALE_SENGLISHDISPLAYNAME: u32 = 114;
pub const LOCALE_SNATIVEDISPLAYNAME: u32 = 115;
pub const LOCALE_SLOCALIZEDLANGUAGENAME: u32 = 111;
pub const LOCALE_SENGLISHLANGUAGENAME: u32 = 4097;
pub const LOCALE_SNATIVELANGUAGENAME: u32 = 4;
pub const LOCALE_SLOCALIZEDCOUNTRYNAME: u32 = 6;
pub const LOCALE_SENGLISHCOUNTRYNAME: u32 = 4098;
pub const LOCALE_SNATIVECOUNTRYNAME: u32 = 8;
pub const LOCALE_IDIALINGCODE: u32 = 5;
pub const LOCALE_SLIST: u32 = 12;
pub const LOCALE_IMEASURE: u32 = 13;
pub const LOCALE_SDECIMAL: u32 = 14;
pub const LOCALE_STHOUSAND: u32 = 15;
pub const LOCALE_SGROUPING: u32 = 16;
pub const LOCALE_IDIGITS: u32 = 17;
pub const LOCALE_ILZERO: u32 = 18;
pub const LOCALE_INEGNUMBER: u32 = 4112;
pub const LOCALE_SNATIVEDIGITS: u32 = 19;
pub const LOCALE_SCURRENCY: u32 = 20;
pub const LOCALE_SINTLSYMBOL: u32 = 21;
pub const LOCALE_SMONDECIMALSEP: u32 = 22;
pub const LOCALE_SMONTHOUSANDSEP: u32 = 23;
pub const LOCALE_SMONGROUPING: u32 = 24;
pub const LOCALE_ICURRDIGITS: u32 = 25;
pub const LOCALE_ICURRENCY: u32 = 27;
pub const LOCALE_INEGCURR: u32 = 28;
pub const LOCALE_SSHORTDATE: u32 = 31;
pub const LOCALE_SLONGDATE: u32 = 32;
pub const LOCALE_STIMEFORMAT: u32 = 4099;
pub const LOCALE_SAM: u32 = 40;
pub const LOCALE_SPM: u32 = 41;
pub const LOCALE_ICALENDARTYPE: u32 = 4105;
pub const LOCALE_IOPTIONALCALENDAR: u32 = 4107;
pub const LOCALE_IFIRSTDAYOFWEEK: u32 = 4108;
pub const LOCALE_IFIRSTWEEKOFYEAR: u32 = 4109;
pub const LOCALE_SDAYNAME1: u32 = 42;
pub const LOCALE_SDAYNAME2: u32 = 43;
pub const LOCALE_SDAYNAME3: u32 = 44;
pub const LOCALE_SDAYNAME4: u32 = 45;
pub const LOCALE_SDAYNAME5: u32 = 46;
pub const LOCALE_SDAYNAME6: u32 = 47;
pub const LOCALE_SDAYNAME7: u32 = 48;
pub const LOCALE_SABBREVDAYNAME1: u32 = 49;
pub const LOCALE_SABBREVDAYNAME2: u32 = 50;
pub const LOCALE_SABBREVDAYNAME3: u32 = 51;
pub const LOCALE_SABBREVDAYNAME4: u32 = 52;
pub const LOCALE_SABBREVDAYNAME5: u32 = 53;
pub const LOCALE_SABBREVDAYNAME6: u32 = 54;
pub const LOCALE_SABBREVDAYNAME7: u32 = 55;
pub const LOCALE_SMONTHNAME1: u32 = 56;
pub const LOCALE_SMONTHNAME2: u32 = 57;
pub const LOCALE_SMONTHNAME3: u32 = 58;
pub const LOCALE_SMONTHNAME4: u32 = 59;
pub const LOCALE_SMONTHNAME5: u32 = 60;
pub const LOCALE_SMONTHNAME6: u32 = 61;
pub const LOCALE_SMONTHNAME7: u32 = 62;
pub const LOCALE_SMONTHNAME8: u32 = 63;
pub const LOCALE_SMONTHNAME9: u32 = 64;
pub const LOCALE_SMONTHNAME10: u32 = 65;
pub const LOCALE_SMONTHNAME11: u32 = 66;
pub const LOCALE_SMONTHNAME12: u32 = 67;
pub const LOCALE_SMONTHNAME13: u32 = 4110;
pub const LOCALE_SABBREVMONTHNAME1: u32 = 68;
pub const LOCALE_SABBREVMONTHNAME2: u32 = 69;
pub const LOCALE_SABBREVMONTHNAME3: u32 = 70;
pub const LOCALE_SABBREVMONTHNAME4: u32 = 71;
pub const LOCALE_SABBREVMONTHNAME5: u32 = 72;
pub const LOCALE_SABBREVMONTHNAME6: u32 = 73;
pub const LOCALE_SABBREVMONTHNAME7: u32 = 74;
pub const LOCALE_SABBREVMONTHNAME8: u32 = 75;
pub const LOCALE_SABBREVMONTHNAME9: u32 = 76;
pub const LOCALE_SABBREVMONTHNAME10: u32 = 77;
pub const LOCALE_SABBREVMONTHNAME11: u32 = 78;
pub const LOCALE_SABBREVMONTHNAME12: u32 = 79;
pub const LOCALE_SABBREVMONTHNAME13: u32 = 4111;
pub const LOCALE_SPOSITIVESIGN: u32 = 80;
pub const LOCALE_SNEGATIVESIGN: u32 = 81;
pub const LOCALE_IPOSSIGNPOSN: u32 = 82;
pub const LOCALE_INEGSIGNPOSN: u32 = 83;
pub const LOCALE_IPOSSYMPRECEDES: u32 = 84;
pub const LOCALE_IPOSSEPBYSPACE: u32 = 85;
pub const LOCALE_INEGSYMPRECEDES: u32 = 86;
pub const LOCALE_INEGSEPBYSPACE: u32 = 87;
pub const LOCALE_FONTSIGNATURE: u32 = 88;
pub const LOCALE_SISO639LANGNAME: u32 = 89;
pub const LOCALE_SISO3166CTRYNAME: u32 = 90;
pub const LOCALE_IPAPERSIZE: u32 = 4106;
pub const LOCALE_SENGCURRNAME: u32 = 4103;
pub const LOCALE_SNATIVECURRNAME: u32 = 4104;
pub const LOCALE_SYEARMONTH: u32 = 4102;
pub const LOCALE_SSORTNAME: u32 = 4115;
pub const LOCALE_IDIGITSUBSTITUTION: u32 = 4116;
pub const LOCALE_SNAME: u32 = 92;
pub const LOCALE_SDURATION: u32 = 93;
pub const LOCALE_SSHORTESTDAYNAME1: u32 = 96;
pub const LOCALE_SSHORTESTDAYNAME2: u32 = 97;
pub const LOCALE_SSHORTESTDAYNAME3: u32 = 98;
pub const LOCALE_SSHORTESTDAYNAME4: u32 = 99;
pub const LOCALE_SSHORTESTDAYNAME5: u32 = 100;
pub const LOCALE_SSHORTESTDAYNAME6: u32 = 101;
pub const LOCALE_SSHORTESTDAYNAME7: u32 = 102;
pub const LOCALE_SISO639LANGNAME2: u32 = 103;
pub const LOCALE_SISO3166CTRYNAME2: u32 = 104;
pub const LOCALE_SNAN: u32 = 105;
pub const LOCALE_SPOSINFINITY: u32 = 106;
pub const LOCALE_SNEGINFINITY: u32 = 107;
pub const LOCALE_SSCRIPTS: u32 = 108;
pub const LOCALE_SPARENT: u32 = 109;
pub const LOCALE_SCONSOLEFALLBACKNAME: u32 = 110;
pub const LOCALE_IREADINGLAYOUT: u32 = 112;
pub const LOCALE_INEUTRAL: u32 = 113;
pub const LOCALE_INEGATIVEPERCENT: u32 = 116;
pub const LOCALE_IPOSITIVEPERCENT: u32 = 117;
pub const LOCALE_SPERCENT: u32 = 118;
pub const LOCALE_SPERMILLE: u32 = 119;
pub const LOCALE_SMONTHDAY: u32 = 120;
pub const LOCALE_SSHORTTIME: u32 = 121;
pub const LOCALE_SOPENTYPELANGUAGETAG: u32 = 122;
pub const LOCALE_SSORTLOCALE: u32 = 123;
pub const LOCALE_SRELATIVELONGDATE: u32 = 124;
pub const LOCALE_SSHORTESTAM: u32 = 126;
pub const LOCALE_SSHORTESTPM: u32 = 127;
pub const LOCALE_IDEFAULTCODEPAGE: u32 = 11;
pub const LOCALE_IDEFAULTANSICODEPAGE: u32 = 4100;
pub const LOCALE_IDEFAULTMACCODEPAGE: u32 = 4113;
pub const LOCALE_IDEFAULTEBCDICCODEPAGE: u32 = 4114;
pub const LOCALE_ILANGUAGE: u32 = 1;
pub const LOCALE_SABBREVLANGNAME: u32 = 3;
pub const LOCALE_SABBREVCTRYNAME: u32 = 7;
pub const LOCALE_IGEOID: u32 = 91;
pub const LOCALE_IDEFAULTLANGUAGE: u32 = 9;
pub const LOCALE_IDEFAULTCOUNTRY: u32 = 10;
pub const LOCALE_IINTLCURRDIGITS: u32 = 26;
pub const LOCALE_SDATE: u32 = 29;
pub const LOCALE_STIME: u32 = 30;
pub const LOCALE_IDATE: u32 = 33;
pub const LOCALE_ILDATE: u32 = 34;
pub const LOCALE_ITIME: u32 = 35;
pub const LOCALE_ITIMEMARKPOSN: u32 = 4101;
pub const LOCALE_ICENTURY: u32 = 36;
pub const LOCALE_ITLZERO: u32 = 37;
pub const LOCALE_IDAYLZERO: u32 = 38;
pub const LOCALE_IMONLZERO: u32 = 39;
pub const LOCALE_SKEYBOARDSTOINSTALL: u32 = 94;
pub const LOCALE_SLANGUAGE: u32 = 2;
pub const LOCALE_SLANGDISPLAYNAME: u32 = 111;
pub const LOCALE_SENGLANGUAGE: u32 = 4097;
pub const LOCALE_SNATIVELANGNAME: u32 = 4;
pub const LOCALE_SCOUNTRY: u32 = 6;
pub const LOCALE_SENGCOUNTRY: u32 = 4098;
pub const LOCALE_SNATIVECTRYNAME: u32 = 8;
pub const LOCALE_ICOUNTRY: u32 = 5;
pub const LOCALE_S1159: u32 = 40;
pub const LOCALE_S2359: u32 = 41;
pub const TIME_NOMINUTESORSECONDS: u32 = 1;
pub const TIME_NOSECONDS: u32 = 2;
pub const TIME_NOTIMEMARKER: u32 = 4;
pub const TIME_FORCE24HOURFORMAT: u32 = 8;
pub const DATE_SHORTDATE: u32 = 1;
pub const DATE_LONGDATE: u32 = 2;
pub const DATE_USE_ALT_CALENDAR: u32 = 4;
pub const DATE_YEARMONTH: u32 = 8;
pub const DATE_LTRREADING: u32 = 16;
pub const DATE_RTLREADING: u32 = 32;
pub const DATE_AUTOLAYOUT: u32 = 64;
pub const DATE_MONTHDAY: u32 = 128;
pub const CAL_NOUSEROVERRIDE: u32 = 2147483648;
pub const CAL_USE_CP_ACP: u32 = 1073741824;
pub const CAL_RETURN_NUMBER: u32 = 536870912;
pub const CAL_RETURN_GENITIVE_NAMES: u32 = 268435456;
pub const CAL_ICALINTVALUE: u32 = 1;
pub const CAL_SCALNAME: u32 = 2;
pub const CAL_IYEAROFFSETRANGE: u32 = 3;
pub const CAL_SERASTRING: u32 = 4;
pub const CAL_SSHORTDATE: u32 = 5;
pub const CAL_SLONGDATE: u32 = 6;
pub const CAL_SDAYNAME1: u32 = 7;
pub const CAL_SDAYNAME2: u32 = 8;
pub const CAL_SDAYNAME3: u32 = 9;
pub const CAL_SDAYNAME4: u32 = 10;
pub const CAL_SDAYNAME5: u32 = 11;
pub const CAL_SDAYNAME6: u32 = 12;
pub const CAL_SDAYNAME7: u32 = 13;
pub const CAL_SABBREVDAYNAME1: u32 = 14;
pub const CAL_SABBREVDAYNAME2: u32 = 15;
pub const CAL_SABBREVDAYNAME3: u32 = 16;
pub const CAL_SABBREVDAYNAME4: u32 = 17;
pub const CAL_SABBREVDAYNAME5: u32 = 18;
pub const CAL_SABBREVDAYNAME6: u32 = 19;
pub const CAL_SABBREVDAYNAME7: u32 = 20;
pub const CAL_SMONTHNAME1: u32 = 21;
pub const CAL_SMONTHNAME2: u32 = 22;
pub const CAL_SMONTHNAME3: u32 = 23;
pub const CAL_SMONTHNAME4: u32 = 24;
pub const CAL_SMONTHNAME5: u32 = 25;
pub const CAL_SMONTHNAME6: u32 = 26;
pub const CAL_SMONTHNAME7: u32 = 27;
pub const CAL_SMONTHNAME8: u32 = 28;
pub const CAL_SMONTHNAME9: u32 = 29;
pub const CAL_SMONTHNAME10: u32 = 30;
pub const CAL_SMONTHNAME11: u32 = 31;
pub const CAL_SMONTHNAME12: u32 = 32;
pub const CAL_SMONTHNAME13: u32 = 33;
pub const CAL_SABBREVMONTHNAME1: u32 = 34;
pub const CAL_SABBREVMONTHNAME2: u32 = 35;
pub const CAL_SABBREVMONTHNAME3: u32 = 36;
pub const CAL_SABBREVMONTHNAME4: u32 = 37;
pub const CAL_SABBREVMONTHNAME5: u32 = 38;
pub const CAL_SABBREVMONTHNAME6: u32 = 39;
pub const CAL_SABBREVMONTHNAME7: u32 = 40;
pub const CAL_SABBREVMONTHNAME8: u32 = 41;
pub const CAL_SABBREVMONTHNAME9: u32 = 42;
pub const CAL_SABBREVMONTHNAME10: u32 = 43;
pub const CAL_SABBREVMONTHNAME11: u32 = 44;
pub const CAL_SABBREVMONTHNAME12: u32 = 45;
pub const CAL_SABBREVMONTHNAME13: u32 = 46;
pub const CAL_SYEARMONTH: u32 = 47;
pub const CAL_ITWODIGITYEARMAX: u32 = 48;
pub const CAL_SSHORTESTDAYNAME1: u32 = 49;
pub const CAL_SSHORTESTDAYNAME2: u32 = 50;
pub const CAL_SSHORTESTDAYNAME3: u32 = 51;
pub const CAL_SSHORTESTDAYNAME4: u32 = 52;
pub const CAL_SSHORTESTDAYNAME5: u32 = 53;
pub const CAL_SSHORTESTDAYNAME6: u32 = 54;
pub const CAL_SSHORTESTDAYNAME7: u32 = 55;
pub const CAL_SMONTHDAY: u32 = 56;
pub const CAL_SABBREVERASTRING: u32 = 57;
pub const CAL_SRELATIVELONGDATE: u32 = 58;
pub const CAL_SENGLISHERANAME: u32 = 59;
pub const CAL_SENGLISHABBREVERANAME: u32 = 60;
pub const ENUM_ALL_CALENDARS: u32 = 4294967295;
pub const CAL_GREGORIAN: u32 = 1;
pub const CAL_GREGORIAN_US: u32 = 2;
pub const CAL_JAPAN: u32 = 3;
pub const CAL_TAIWAN: u32 = 4;
pub const CAL_KOREA: u32 = 5;
pub const CAL_HIJRI: u32 = 6;
pub const CAL_THAI: u32 = 7;
pub const CAL_HEBREW: u32 = 8;
pub const CAL_GREGORIAN_ME_FRENCH: u32 = 9;
pub const CAL_GREGORIAN_ARABIC: u32 = 10;
pub const CAL_GREGORIAN_XLIT_ENGLISH: u32 = 11;
pub const CAL_GREGORIAN_XLIT_FRENCH: u32 = 12;
pub const CAL_PERSIAN: u32 = 22;
pub const CAL_UMALQURA: u32 = 23;
pub const LGRPID_WESTERN_EUROPE: u32 = 1;
pub const LGRPID_CENTRAL_EUROPE: u32 = 2;
pub const LGRPID_BALTIC: u32 = 3;
pub const LGRPID_GREEK: u32 = 4;
pub const LGRPID_CYRILLIC: u32 = 5;
pub const LGRPID_TURKIC: u32 = 6;
pub const LGRPID_TURKISH: u32 = 6;
pub const LGRPID_JAPANESE: u32 = 7;
pub const LGRPID_KOREAN: u32 = 8;
pub const LGRPID_TRADITIONAL_CHINESE: u32 = 9;
pub const LGRPID_SIMPLIFIED_CHINESE: u32 = 10;
pub const LGRPID_THAI: u32 = 11;
pub const LGRPID_HEBREW: u32 = 12;
pub const LGRPID_ARABIC: u32 = 13;
pub const LGRPID_VIETNAMESE: u32 = 14;
pub const LGRPID_INDIC: u32 = 15;
pub const LGRPID_GEORGIAN: u32 = 16;
pub const LGRPID_ARMENIAN: u32 = 17;
pub const MUI_LANGUAGE_ID: u32 = 4;
pub const MUI_LANGUAGE_NAME: u32 = 8;
pub const MUI_MERGE_SYSTEM_FALLBACK: u32 = 16;
pub const MUI_MERGE_USER_FALLBACK: u32 = 32;
pub const MUI_UI_FALLBACK: u32 = 48;
pub const MUI_THREAD_LANGUAGES: u32 = 64;
pub const MUI_CONSOLE_FILTER: u32 = 256;
pub const MUI_COMPLEX_SCRIPT_FILTER: u32 = 512;
pub const MUI_RESET_FILTERS: u32 = 1;
pub const MUI_USER_PREFERRED_UI_LANGUAGES: u32 = 16;
pub const MUI_USE_INSTALLED_LANGUAGES: u32 = 32;
pub const MUI_USE_SEARCH_ALL_LANGUAGES: u32 = 64;
pub const MUI_LANG_NEUTRAL_PE_FILE: u32 = 256;
pub const MUI_NON_LANG_NEUTRAL_FILE: u32 = 512;
pub const MUI_MACHINE_LANGUAGE_SETTINGS: u32 = 1024;
pub const MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL: u32 = 1;
pub const MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN: u32 = 2;
pub const MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI: u32 = 4;
pub const MUI_QUERY_TYPE: u32 = 1;
pub const MUI_QUERY_CHECKSUM: u32 = 2;
pub const MUI_QUERY_LANGUAGE_NAME: u32 = 4;
pub const MUI_QUERY_RESOURCE_TYPES: u32 = 8;
pub const MUI_FILEINFO_VERSION: u32 = 1;
pub const MUI_FULL_LANGUAGE: u32 = 1;
pub const MUI_PARTIAL_LANGUAGE: u32 = 2;
pub const MUI_LIP_LANGUAGE: u32 = 4;
pub const MUI_LANGUAGE_INSTALLED: u32 = 32;
pub const MUI_LANGUAGE_LICENSED: u32 = 64;
pub const GEOID_NOT_AVAILABLE: i32 = -1;
pub const GEO_NAME_USER_DEFAULT: u32 = 0;
pub const IDN_ALLOW_UNASSIGNED: u32 = 1;
pub const IDN_USE_STD3_ASCII_RULES: u32 = 2;
pub const IDN_EMAIL_ADDRESS: u32 = 4;
pub const IDN_RAW_PUNYCODE: u32 = 8;
pub const VS_ALLOW_LATIN: u32 = 1;
pub const GSS_ALLOW_INHERITED_COMMON: u32 = 1;
pub const MUI_FORMAT_REG_COMPAT: u32 = 1;
pub const MUI_FORMAT_INF_COMPAT: u32 = 2;
pub const MUI_VERIFY_FILE_EXISTS: u32 = 4;
pub const MUI_SKIP_STRING_CACHE: u32 = 8;
pub const MUI_IMMUTABLE_LOOKUP: u32 = 16;
pub const LOCALE_NAME_USER_DEFAULT: u32 = 0;
pub const LOCALE_NAME_INVARIANT: &'static [u8; 1usize] = b"\0";
pub const LOCALE_NAME_SYSTEM_DEFAULT: &'static [u8; 22usize] = b"!x-sys-default-locale\0";
pub const RIGHT_ALT_PRESSED: u32 = 1;
pub const LEFT_ALT_PRESSED: u32 = 2;
pub const RIGHT_CTRL_PRESSED: u32 = 4;
pub const LEFT_CTRL_PRESSED: u32 = 8;
pub const SHIFT_PRESSED: u32 = 16;
pub const NUMLOCK_ON: u32 = 32;
pub const SCROLLLOCK_ON: u32 = 64;
pub const CAPSLOCK_ON: u32 = 128;
pub const ENHANCED_KEY: u32 = 256;
pub const NLS_DBCSCHAR: u32 = 65536;
pub const NLS_ALPHANUMERIC: u32 = 0;
pub const NLS_KATAKANA: u32 = 131072;
pub const NLS_HIRAGANA: u32 = 262144;
pub const NLS_ROMAN: u32 = 4194304;
pub const NLS_IME_CONVERSION: u32 = 8388608;
pub const ALTNUMPAD_BIT: u32 = 67108864;
pub const NLS_IME_DISABLE: u32 = 536870912;
pub const FROM_LEFT_1ST_BUTTON_PRESSED: u32 = 1;
pub const RIGHTMOST_BUTTON_PRESSED: u32 = 2;
pub const FROM_LEFT_2ND_BUTTON_PRESSED: u32 = 4;
pub const FROM_LEFT_3RD_BUTTON_PRESSED: u32 = 8;
pub const FROM_LEFT_4TH_BUTTON_PRESSED: u32 = 16;
pub const MOUSE_MOVED: u32 = 1;
pub const DOUBLE_CLICK: u32 = 2;
pub const MOUSE_WHEELED: u32 = 4;
pub const MOUSE_HWHEELED: u32 = 8;
pub const KEY_EVENT: u32 = 1;
pub const MOUSE_EVENT: u32 = 2;
pub const WINDOW_BUFFER_SIZE_EVENT: u32 = 4;
pub const MENU_EVENT: u32 = 8;
pub const FOCUS_EVENT: u32 = 16;
pub const ENABLE_PROCESSED_INPUT: u32 = 1;
pub const ENABLE_LINE_INPUT: u32 = 2;
pub const ENABLE_ECHO_INPUT: u32 = 4;
pub const ENABLE_WINDOW_INPUT: u32 = 8;
pub const ENABLE_MOUSE_INPUT: u32 = 16;
pub const ENABLE_INSERT_MODE: u32 = 32;
pub const ENABLE_QUICK_EDIT_MODE: u32 = 64;
pub const ENABLE_EXTENDED_FLAGS: u32 = 128;
pub const ENABLE_AUTO_POSITION: u32 = 256;
pub const ENABLE_VIRTUAL_TERMINAL_INPUT: u32 = 512;
pub const ENABLE_PROCESSED_OUTPUT: u32 = 1;
pub const ENABLE_WRAP_AT_EOL_OUTPUT: u32 = 2;
pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING: u32 = 4;
pub const DISABLE_NEWLINE_AUTO_RETURN: u32 = 8;
pub const ENABLE_LVB_GRID_WORLDWIDE: u32 = 16;
pub const CTRL_C_EVENT: u32 = 0;
pub const CTRL_BREAK_EVENT: u32 = 1;
pub const CTRL_CLOSE_EVENT: u32 = 2;
pub const CTRL_LOGOFF_EVENT: u32 = 5;
pub const CTRL_SHUTDOWN_EVENT: u32 = 6;
pub const PSEUDOCONSOLE_INHERIT_CURSOR: u32 = 1;
pub const FOREGROUND_BLUE: u32 = 1;
pub const FOREGROUND_GREEN: u32 = 2;
pub const FOREGROUND_RED: u32 = 4;
pub const FOREGROUND_INTENSITY: u32 = 8;
pub const BACKGROUND_BLUE: u32 = 16;
pub const BACKGROUND_GREEN: u32 = 32;
pub const BACKGROUND_RED: u32 = 64;
pub const BACKGROUND_INTENSITY: u32 = 128;
pub const COMMON_LVB_LEADING_BYTE: u32 = 256;
pub const COMMON_LVB_TRAILING_BYTE: u32 = 512;
pub const COMMON_LVB_GRID_HORIZONTAL: u32 = 1024;
pub const COMMON_LVB_GRID_LVERTICAL: u32 = 2048;
pub const COMMON_LVB_GRID_RVERTICAL: u32 = 4096;
pub const COMMON_LVB_REVERSE_VIDEO: u32 = 16384;
pub const COMMON_LVB_UNDERSCORE: u32 = 32768;
pub const COMMON_LVB_SBCSDBCS: u32 = 768;
pub const CONSOLE_NO_SELECTION: u32 = 0;
pub const CONSOLE_SELECTION_IN_PROGRESS: u32 = 1;
pub const CONSOLE_SELECTION_NOT_EMPTY: u32 = 2;
pub const CONSOLE_MOUSE_SELECTION: u32 = 4;
pub const CONSOLE_MOUSE_DOWN: u32 = 8;
pub const HISTORY_NO_DUP_FLAG: u32 = 1;
pub const CONSOLE_FULLSCREEN: u32 = 1;
pub const CONSOLE_FULLSCREEN_HARDWARE: u32 = 2;
pub const CONSOLE_FULLSCREEN_MODE: u32 = 1;
pub const CONSOLE_WINDOWED_MODE: u32 = 2;
pub const CONSOLE_TEXTMODE_BUFFER: u32 = 1;
pub const VS_VERSION_INFO: u32 = 1;
pub const VS_USER_DEFINED: u32 = 100;
pub const VS_FFI_SIGNATURE: u32 = 4277077181;
pub const VS_FFI_STRUCVERSION: u32 = 65536;
pub const VS_FFI_FILEFLAGSMASK: u32 = 63;
pub const VS_FF_DEBUG: u32 = 1;
pub const VS_FF_PRERELEASE: u32 = 2;
pub const VS_FF_PATCHED: u32 = 4;
pub const VS_FF_PRIVATEBUILD: u32 = 8;
pub const VS_FF_INFOINFERRED: u32 = 16;
pub const VS_FF_SPECIALBUILD: u32 = 32;
pub const VOS_UNKNOWN: u32 = 0;
pub const VOS_DOS: u32 = 65536;
pub const VOS_OS216: u32 = 131072;
pub const VOS_OS232: u32 = 196608;
pub const VOS_NT: u32 = 262144;
pub const VOS_WINCE: u32 = 327680;
pub const VOS__BASE: u32 = 0;
pub const VOS__WINDOWS16: u32 = 1;
pub const VOS__PM16: u32 = 2;
pub const VOS__PM32: u32 = 3;
pub const VOS__WINDOWS32: u32 = 4;
pub const VOS_DOS_WINDOWS16: u32 = 65537;
pub const VOS_DOS_WINDOWS32: u32 = 65540;
pub const VOS_OS216_PM16: u32 = 131074;
pub const VOS_OS232_PM32: u32 = 196611;
pub const VOS_NT_WINDOWS32: u32 = 262148;
pub const VFT_UNKNOWN: u32 = 0;
pub const VFT_APP: u32 = 1;
pub const VFT_DLL: u32 = 2;
pub const VFT_DRV: u32 = 3;
pub const VFT_FONT: u32 = 4;
pub const VFT_VXD: u32 = 5;
pub const VFT_STATIC_LIB: u32 = 7;
pub const VFT2_UNKNOWN: u32 = 0;
pub const VFT2_DRV_PRINTER: u32 = 1;
pub const VFT2_DRV_KEYBOARD: u32 = 2;
pub const VFT2_DRV_LANGUAGE: u32 = 3;
pub const VFT2_DRV_DISPLAY: u32 = 4;
pub const VFT2_DRV_MOUSE: u32 = 5;
pub const VFT2_DRV_NETWORK: u32 = 6;
pub const VFT2_DRV_SYSTEM: u32 = 7;
pub const VFT2_DRV_INSTALLABLE: u32 = 8;
pub const VFT2_DRV_SOUND: u32 = 9;
pub const VFT2_DRV_COMM: u32 = 10;
pub const VFT2_DRV_INPUTMETHOD: u32 = 11;
pub const VFT2_DRV_VERSIONED_PRINTER: u32 = 12;
pub const VFT2_FONT_RASTER: u32 = 1;
pub const VFT2_FONT_VECTOR: u32 = 2;
pub const VFT2_FONT_TRUETYPE: u32 = 3;
pub const VFFF_ISSHAREDFILE: u32 = 1;
pub const VFF_CURNEDEST: u32 = 1;
pub const VFF_FILEINUSE: u32 = 2;
pub const VFF_BUFFTOOSMALL: u32 = 4;
pub const VIFF_FORCEINSTALL: u32 = 1;
pub const VIFF_DONTDELETEOLD: u32 = 2;
pub const VIF_TEMPFILE: u32 = 1;
pub const VIF_MISMATCH: u32 = 2;
pub const VIF_SRCOLD: u32 = 4;
pub const VIF_DIFFLANG: u32 = 8;
pub const VIF_DIFFCODEPG: u32 = 16;
pub const VIF_DIFFTYPE: u32 = 32;
pub const VIF_WRITEPROT: u32 = 64;
pub const VIF_FILEINUSE: u32 = 128;
pub const VIF_OUTOFSPACE: u32 = 256;
pub const VIF_ACCESSVIOLATION: u32 = 512;
pub const VIF_SHARINGVIOLATION: u32 = 1024;
pub const VIF_CANNOTCREATE: u32 = 2048;
pub const VIF_CANNOTDELETE: u32 = 4096;
pub const VIF_CANNOTRENAME: u32 = 8192;
pub const VIF_CANNOTDELETECUR: u32 = 16384;
pub const VIF_OUTOFMEMORY: u32 = 32768;
pub const VIF_CANNOTREADSRC: u32 = 65536;
pub const VIF_CANNOTREADDST: u32 = 131072;
pub const VIF_BUFFTOOSMALL: u32 = 262144;
pub const VIF_CANNOTLOADLZ32: u32 = 524288;
pub const VIF_CANNOTLOADCABINET: u32 = 1048576;
pub const FILE_VER_GET_LOCALISED: u32 = 1;
pub const FILE_VER_GET_NEUTRAL: u32 = 2;
pub const FILE_VER_GET_PREFETCHED: u32 = 4;
pub const RRF_RT_REG_NONE: u32 = 1;
pub const RRF_RT_REG_SZ: u32 = 2;
pub const RRF_RT_REG_EXPAND_SZ: u32 = 4;
pub const RRF_RT_REG_BINARY: u32 = 8;
pub const RRF_RT_REG_DWORD: u32 = 16;
pub const RRF_RT_REG_MULTI_SZ: u32 = 32;
pub const RRF_RT_REG_QWORD: u32 = 64;
pub const RRF_RT_DWORD: u32 = 24;
pub const RRF_RT_QWORD: u32 = 72;
pub const RRF_RT_ANY: u32 = 65535;
pub const RRF_SUBKEY_WOW6464KEY: u32 = 65536;
pub const RRF_SUBKEY_WOW6432KEY: u32 = 131072;
pub const RRF_WOW64_MASK: u32 = 196608;
pub const RRF_NOEXPAND: u32 = 268435456;
pub const RRF_ZEROONFAILURE: u32 = 536870912;
pub const REG_PROCESS_APPKEY: u32 = 1;
pub const PROVIDER_KEEPS_VALUE_LENGTH: u32 = 1;
pub const WIN31_CLASS: u32 = 0;
pub const REG_MUI_STRING_TRUNCATE: u32 = 1;
pub const REG_SECURE_CONNECTION: u32 = 1;
pub const SHTDN_REASON_FLAG_COMMENT_REQUIRED: u32 = 16777216;
pub const SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED: u32 = 33554432;
pub const SHTDN_REASON_FLAG_CLEAN_UI: u32 = 67108864;
pub const SHTDN_REASON_FLAG_DIRTY_UI: u32 = 134217728;
pub const SHTDN_REASON_FLAG_MOBILE_UI_RESERVED: u32 = 268435456;
pub const SHTDN_REASON_FLAG_USER_DEFINED: u32 = 1073741824;
pub const SHTDN_REASON_FLAG_PLANNED: u32 = 2147483648;
pub const SHTDN_REASON_MAJOR_OTHER: u32 = 0;
pub const SHTDN_REASON_MAJOR_NONE: u32 = 0;
pub const SHTDN_REASON_MAJOR_HARDWARE: u32 = 65536;
pub const SHTDN_REASON_MAJOR_OPERATINGSYSTEM: u32 = 131072;
pub const SHTDN_REASON_MAJOR_SOFTWARE: u32 = 196608;
pub const SHTDN_REASON_MAJOR_APPLICATION: u32 = 262144;
pub const SHTDN_REASON_MAJOR_SYSTEM: u32 = 327680;
pub const SHTDN_REASON_MAJOR_POWER: u32 = 393216;
pub const SHTDN_REASON_MAJOR_LEGACY_API: u32 = 458752;
pub const SHTDN_REASON_MINOR_OTHER: u32 = 0;
pub const SHTDN_REASON_MINOR_NONE: u32 = 255;
pub const SHTDN_REASON_MINOR_MAINTENANCE: u32 = 1;
pub const SHTDN_REASON_MINOR_INSTALLATION: u32 = 2;
pub const SHTDN_REASON_MINOR_UPGRADE: u32 = 3;
pub const SHTDN_REASON_MINOR_RECONFIG: u32 = 4;
pub const SHTDN_REASON_MINOR_HUNG: u32 = 5;
pub const SHTDN_REASON_MINOR_UNSTABLE: u32 = 6;
pub const SHTDN_REASON_MINOR_DISK: u32 = 7;
pub const SHTDN_REASON_MINOR_PROCESSOR: u32 = 8;
pub const SHTDN_REASON_MINOR_NETWORKCARD: u32 = 9;
pub const SHTDN_REASON_MINOR_POWER_SUPPLY: u32 = 10;
pub const SHTDN_REASON_MINOR_CORDUNPLUGGED: u32 = 11;
pub const SHTDN_REASON_MINOR_ENVIRONMENT: u32 = 12;
pub const SHTDN_REASON_MINOR_HARDWARE_DRIVER: u32 = 13;
pub const SHTDN_REASON_MINOR_OTHERDRIVER: u32 = 14;
pub const SHTDN_REASON_MINOR_BLUESCREEN: u32 = 15;
pub const SHTDN_REASON_MINOR_SERVICEPACK: u32 = 16;
pub const SHTDN_REASON_MINOR_HOTFIX: u32 = 17;
pub const SHTDN_REASON_MINOR_SECURITYFIX: u32 = 18;
pub const SHTDN_REASON_MINOR_SECURITY: u32 = 19;
pub const SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY: u32 = 20;
pub const SHTDN_REASON_MINOR_WMI: u32 = 21;
pub const SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL: u32 = 22;
pub const SHTDN_REASON_MINOR_HOTFIX_UNINSTALL: u32 = 23;
pub const SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL: u32 = 24;
pub const SHTDN_REASON_MINOR_MMC: u32 = 25;
pub const SHTDN_REASON_MINOR_SYSTEMRESTORE: u32 = 26;
pub const SHTDN_REASON_MINOR_TERMSRV: u32 = 32;
pub const SHTDN_REASON_MINOR_DC_PROMOTION: u32 = 33;
pub const SHTDN_REASON_MINOR_DC_DEMOTION: u32 = 34;
pub const SHTDN_REASON_UNKNOWN: u32 = 255;
pub const SHTDN_REASON_LEGACY_API: u32 = 2147942400;
pub const SHTDN_REASON_VALID_BIT_MASK: u32 = 3238002687;
pub const PCLEANUI: u32 = 2214592512;
pub const UCLEANUI: u32 = 67108864;
pub const PDIRTYUI: u32 = 2281701376;
pub const UDIRTYUI: u32 = 134217728;
pub const MAX_REASON_NAME_LEN: u32 = 64;
pub const MAX_REASON_DESC_LEN: u32 = 256;
pub const MAX_REASON_BUGID_LEN: u32 = 32;
pub const MAX_REASON_COMMENT_LEN: u32 = 512;
pub const SHUTDOWN_TYPE_LEN: u32 = 32;
pub const POLICY_SHOWREASONUI_NEVER: u32 = 0;
pub const POLICY_SHOWREASONUI_ALWAYS: u32 = 1;
pub const POLICY_SHOWREASONUI_WORKSTATIONONLY: u32 = 2;
pub const POLICY_SHOWREASONUI_SERVERONLY: u32 = 3;
pub const SNAPSHOT_POLICY_NEVER: u32 = 0;
pub const SNAPSHOT_POLICY_ALWAYS: u32 = 1;
pub const SNAPSHOT_POLICY_UNPLANNED: u32 = 2;
pub const MAX_NUM_REASONS: u32 = 256;
pub const REASON_SWINSTALL: u32 = 196610;
pub const REASON_HWINSTALL: u32 = 65538;
pub const REASON_SERVICEHANG: u32 = 196613;
pub const REASON_UNSTABLE: u32 = 327686;
pub const REASON_SWHWRECONF: u32 = 196612;
pub const REASON_OTHER: u32 = 0;
pub const REASON_UNKNOWN: u32 = 255;
pub const REASON_LEGACY_API: u32 = 2147942400;
pub const REASON_PLANNED_FLAG: u32 = 2147483648;
pub const MAX_SHUTDOWN_TIMEOUT: u32 = 315360000;
pub const SHUTDOWN_FORCE_OTHERS: u32 = 1;
pub const SHUTDOWN_FORCE_SELF: u32 = 2;
pub const SHUTDOWN_RESTART: u32 = 4;
pub const SHUTDOWN_POWEROFF: u32 = 8;
pub const SHUTDOWN_NOREBOOT: u32 = 16;
pub const SHUTDOWN_GRACE_OVERRIDE: u32 = 32;
pub const SHUTDOWN_INSTALL_UPDATES: u32 = 64;
pub const SHUTDOWN_RESTARTAPPS: u32 = 128;
pub const SHUTDOWN_SKIP_SVC_PRESHUTDOWN: u32 = 256;
pub const SHUTDOWN_HYBRID: u32 = 512;
pub const SHUTDOWN_RESTART_BOOTOPTIONS: u32 = 1024;
pub const SHUTDOWN_SOFT_REBOOT: u32 = 2048;
pub const SHUTDOWN_MOBILE_UI: u32 = 4096;
pub const WNNC_NET_MSNET: u32 = 65536;
pub const WNNC_NET_SMB: u32 = 131072;
pub const WNNC_NET_NETWARE: u32 = 196608;
pub const WNNC_NET_VINES: u32 = 262144;
pub const WNNC_NET_10NET: u32 = 327680;
pub const WNNC_NET_LOCUS: u32 = 393216;
pub const WNNC_NET_SUN_PC_NFS: u32 = 458752;
pub const WNNC_NET_LANSTEP: u32 = 524288;
pub const WNNC_NET_9TILES: u32 = 589824;
pub const WNNC_NET_LANTASTIC: u32 = 655360;
pub const WNNC_NET_AS400: u32 = 720896;
pub const WNNC_NET_FTP_NFS: u32 = 786432;
pub const WNNC_NET_PATHWORKS: u32 = 851968;
pub const WNNC_NET_LIFENET: u32 = 917504;
pub const WNNC_NET_POWERLAN: u32 = 983040;
pub const WNNC_NET_BWNFS: u32 = 1048576;
pub const WNNC_NET_COGENT: u32 = 1114112;
pub const WNNC_NET_FARALLON: u32 = 1179648;
pub const WNNC_NET_APPLETALK: u32 = 1245184;
pub const WNNC_NET_INTERGRAPH: u32 = 1310720;
pub const WNNC_NET_SYMFONET: u32 = 1376256;
pub const WNNC_NET_CLEARCASE: u32 = 1441792;
pub const WNNC_NET_FRONTIER: u32 = 1507328;
pub const WNNC_NET_BMC: u32 = 1572864;
pub const WNNC_NET_DCE: u32 = 1638400;
pub const WNNC_NET_AVID: u32 = 1703936;
pub const WNNC_NET_DOCUSPACE: u32 = 1769472;
pub const WNNC_NET_MANGOSOFT: u32 = 1835008;
pub const WNNC_NET_SERNET: u32 = 1900544;
pub const WNNC_NET_RIVERFRONT2: u32 = 2031616;
pub const WNNC_NET_DECORB: u32 = 2097152;
pub const WNNC_NET_PROTSTOR: u32 = 2162688;
pub const WNNC_NET_FJ_REDIR: u32 = 2228224;
pub const WNNC_NET_DISTINCT: u32 = 2293760;
pub const WNNC_NET_TWINS: u32 = 2359296;
pub const WNNC_NET_RDR2SAMPLE: u32 = 2424832;
pub const WNNC_NET_CSC: u32 = 2490368;
pub const WNNC_NET_3IN1: u32 = 2555904;
pub const WNNC_NET_EXTENDNET: u32 = 2686976;
pub const WNNC_NET_STAC: u32 = 2752512;
pub const WNNC_NET_FOXBAT: u32 = 2818048;
pub const WNNC_NET_YAHOO: u32 = 2883584;
pub const WNNC_NET_EXIFS: u32 = 2949120;
pub const WNNC_NET_DAV: u32 = 3014656;
pub const WNNC_NET_KNOWARE: u32 = 3080192;
pub const WNNC_NET_OBJECT_DIRE: u32 = 3145728;
pub const WNNC_NET_MASFAX: u32 = 3211264;
pub const WNNC_NET_HOB_NFS: u32 = 3276800;
pub const WNNC_NET_SHIVA: u32 = 3342336;
pub const WNNC_NET_IBMAL: u32 = 3407872;
pub const WNNC_NET_LOCK: u32 = 3473408;
pub const WNNC_NET_TERMSRV: u32 = 3538944;
pub const WNNC_NET_SRT: u32 = 3604480;
pub const WNNC_NET_QUINCY: u32 = 3670016;
pub const WNNC_NET_OPENAFS: u32 = 3735552;
pub const WNNC_NET_DFS: u32 = 3866624;
pub const WNNC_NET_KWNP: u32 = 3932160;
pub const WNNC_NET_ZENWORKS: u32 = 3997696;
pub const WNNC_NET_DRIVEONWEB: u32 = 4063232;
pub const WNNC_NET_VMWARE: u32 = 4128768;
pub const WNNC_NET_RSFX: u32 = 4194304;
pub const WNNC_NET_MFILES: u32 = 4259840;
pub const WNNC_NET_MS_NFS: u32 = 4325376;
pub const WNNC_NET_GOOGLE: u32 = 4390912;
pub const WNNC_NET_NDFS: u32 = 4456448;
pub const WNNC_NET_DOCUSHARE: u32 = 4521984;
pub const WNNC_NET_AURISTOR_FS: u32 = 4587520;
pub const WNNC_NET_SECUREAGENT: u32 = 4653056;
pub const WNNC_CRED_MANAGER: u32 = 4294901760;
pub const WNNC_NET_LANMAN: u32 = 131072;
pub const RESOURCE_CONNECTED: u32 = 1;
pub const RESOURCE_GLOBALNET: u32 = 2;
pub const RESOURCE_REMEMBERED: u32 = 3;
pub const RESOURCE_RECENT: u32 = 4;
pub const RESOURCE_CONTEXT: u32 = 5;
pub const RESOURCETYPE_ANY: u32 = 0;
pub const RESOURCETYPE_DISK: u32 = 1;
pub const RESOURCETYPE_PRINT: u32 = 2;
pub const RESOURCETYPE_RESERVED: u32 = 8;
pub const RESOURCETYPE_UNKNOWN: u32 = 4294967295;
pub const RESOURCEUSAGE_CONNECTABLE: u32 = 1;
pub const RESOURCEUSAGE_CONTAINER: u32 = 2;
pub const RESOURCEUSAGE_NOLOCALDEVICE: u32 = 4;
pub const RESOURCEUSAGE_SIBLING: u32 = 8;
pub const RESOURCEUSAGE_ATTACHED: u32 = 16;
pub const RESOURCEUSAGE_ALL: u32 = 19;
pub const RESOURCEUSAGE_RESERVED: u32 = 2147483648;
pub const RESOURCEDISPLAYTYPE_GENERIC: u32 = 0;
pub const RESOURCEDISPLAYTYPE_DOMAIN: u32 = 1;
pub const RESOURCEDISPLAYTYPE_SERVER: u32 = 2;
pub const RESOURCEDISPLAYTYPE_SHARE: u32 = 3;
pub const RESOURCEDISPLAYTYPE_FILE: u32 = 4;
pub const RESOURCEDISPLAYTYPE_GROUP: u32 = 5;
pub const RESOURCEDISPLAYTYPE_NETWORK: u32 = 6;
pub const RESOURCEDISPLAYTYPE_ROOT: u32 = 7;
pub const RESOURCEDISPLAYTYPE_SHAREADMIN: u32 = 8;
pub const RESOURCEDISPLAYTYPE_DIRECTORY: u32 = 9;
pub const RESOURCEDISPLAYTYPE_TREE: u32 = 10;
pub const RESOURCEDISPLAYTYPE_NDSCONTAINER: u32 = 11;
pub const NETPROPERTY_PERSISTENT: u32 = 1;
pub const CONNECT_UPDATE_PROFILE: u32 = 1;
pub const CONNECT_UPDATE_RECENT: u32 = 2;
pub const CONNECT_TEMPORARY: u32 = 4;
pub const CONNECT_INTERACTIVE: u32 = 8;
pub const CONNECT_PROMPT: u32 = 16;
pub const CONNECT_NEED_DRIVE: u32 = 32;
pub const CONNECT_REFCOUNT: u32 = 64;
pub const CONNECT_REDIRECT: u32 = 128;
pub const CONNECT_LOCALDRIVE: u32 = 256;
pub const CONNECT_CURRENT_MEDIA: u32 = 512;
pub const CONNECT_DEFERRED: u32 = 1024;
pub const CONNECT_RESERVED: u32 = 4278190080;
pub const CONNECT_COMMANDLINE: u32 = 2048;
pub const CONNECT_CMD_SAVECRED: u32 = 4096;
pub const CONNECT_CRED_RESET: u32 = 8192;
pub const CONNECT_REQUIRE_INTEGRITY: u32 = 16384;
pub const CONNECT_REQUIRE_PRIVACY: u32 = 32768;
pub const CONNECT_WRITE_THROUGH_SEMANTICS: u32 = 65536;
pub const CONNDLG_RO_PATH: u32 = 1;
pub const CONNDLG_CONN_POINT: u32 = 2;
pub const CONNDLG_USE_MRU: u32 = 4;
pub const CONNDLG_HIDE_BOX: u32 = 8;
pub const CONNDLG_PERSIST: u32 = 16;
pub const CONNDLG_NOT_PERSIST: u32 = 32;
pub const DISC_UPDATE_PROFILE: u32 = 1;
pub const DISC_NO_FORCE: u32 = 64;
pub const UNIVERSAL_NAME_INFO_LEVEL: u32 = 1;
pub const REMOTE_NAME_INFO_LEVEL: u32 = 2;
pub const WNFMT_MULTILINE: u32 = 1;
pub const WNFMT_ABBREVIATED: u32 = 2;
pub const WNFMT_INENUM: u32 = 16;
pub const WNFMT_CONNECTION: u32 = 32;
pub const NETINFO_DLL16: u32 = 1;
pub const NETINFO_DISKRED: u32 = 4;
pub const NETINFO_PRINTERRED: u32 = 8;
pub const WN_SUCCESS: u32 = 0;
pub const WN_NO_ERROR: u32 = 0;
pub const WN_NOT_SUPPORTED: u32 = 50;
pub const WN_CANCEL: u32 = 1223;
pub const WN_RETRY: u32 = 1237;
pub const WN_NET_ERROR: u32 = 59;
pub const WN_MORE_DATA: u32 = 234;
pub const WN_BAD_POINTER: u32 = 487;
pub const WN_BAD_VALUE: u32 = 87;
pub const WN_BAD_USER: u32 = 2202;
pub const WN_BAD_PASSWORD: u32 = 86;
pub const WN_ACCESS_DENIED: u32 = 5;
pub const WN_FUNCTION_BUSY: u32 = 170;
pub const WN_WINDOWS_ERROR: u32 = 59;
pub const WN_OUT_OF_MEMORY: u32 = 8;
pub const WN_NO_NETWORK: u32 = 1222;
pub const WN_EXTENDED_ERROR: u32 = 1208;
pub const WN_BAD_LEVEL: u32 = 124;
pub const WN_BAD_HANDLE: u32 = 6;
pub const WN_NOT_INITIALIZING: u32 = 1247;
pub const WN_NO_MORE_DEVICES: u32 = 1248;
pub const WN_NOT_CONNECTED: u32 = 2250;
pub const WN_OPEN_FILES: u32 = 2401;
pub const WN_DEVICE_IN_USE: u32 = 2404;
pub const WN_BAD_NETNAME: u32 = 67;
pub const WN_BAD_LOCALNAME: u32 = 1200;
pub const WN_ALREADY_CONNECTED: u32 = 85;
pub const WN_DEVICE_ERROR: u32 = 31;
pub const WN_CONNECTION_CLOSED: u32 = 1201;
pub const WN_NO_NET_OR_BAD_PATH: u32 = 1203;
pub const WN_BAD_PROVIDER: u32 = 1204;
pub const WN_CANNOT_OPEN_PROFILE: u32 = 1205;
pub const WN_BAD_PROFILE: u32 = 1206;
pub const WN_BAD_DEV_TYPE: u32 = 66;
pub const WN_DEVICE_ALREADY_REMEMBERED: u32 = 1202;
pub const WN_CONNECTED_OTHER_PASSWORD: u32 = 2108;
pub const WN_CONNECTED_OTHER_PASSWORD_DEFAULT: u32 = 2109;
pub const WN_NO_MORE_ENTRIES: u32 = 259;
pub const WN_NOT_CONTAINER: u32 = 1207;
pub const WN_NOT_AUTHENTICATED: u32 = 1244;
pub const WN_NOT_LOGGED_ON: u32 = 1245;
pub const WN_NOT_VALIDATED: u32 = 1311;
pub const WNCON_FORNETCARD: u32 = 1;
pub const WNCON_NOTROUTED: u32 = 2;
pub const WNCON_SLOWLINK: u32 = 4;
pub const WNCON_DYNAMIC: u32 = 8;
pub const CDERR_DIALOGFAILURE: u32 = 65535;
pub const CDERR_GENERALCODES: u32 = 0;
pub const CDERR_STRUCTSIZE: u32 = 1;
pub const CDERR_INITIALIZATION: u32 = 2;
pub const CDERR_NOTEMPLATE: u32 = 3;
pub const CDERR_NOHINSTANCE: u32 = 4;
pub const CDERR_LOADSTRFAILURE: u32 = 5;
pub const CDERR_FINDRESFAILURE: u32 = 6;
pub const CDERR_LOADRESFAILURE: u32 = 7;
pub const CDERR_LOCKRESFAILURE: u32 = 8;
pub const CDERR_MEMALLOCFAILURE: u32 = 9;
pub const CDERR_MEMLOCKFAILURE: u32 = 10;
pub const CDERR_NOHOOK: u32 = 11;
pub const CDERR_REGISTERMSGFAIL: u32 = 12;
pub const PDERR_PRINTERCODES: u32 = 4096;
pub const PDERR_SETUPFAILURE: u32 = 4097;
pub const PDERR_PARSEFAILURE: u32 = 4098;
pub const PDERR_RETDEFFAILURE: u32 = 4099;
pub const PDERR_LOADDRVFAILURE: u32 = 4100;
pub const PDERR_GETDEVMODEFAIL: u32 = 4101;
pub const PDERR_INITFAILURE: u32 = 4102;
pub const PDERR_NODEVICES: u32 = 4103;
pub const PDERR_NODEFAULTPRN: u32 = 4104;
pub const PDERR_DNDMMISMATCH: u32 = 4105;
pub const PDERR_CREATEICFAILURE: u32 = 4106;
pub const PDERR_PRINTERNOTFOUND: u32 = 4107;
pub const PDERR_DEFAULTDIFFERENT: u32 = 4108;
pub const CFERR_CHOOSEFONTCODES: u32 = 8192;
pub const CFERR_NOFONTS: u32 = 8193;
pub const CFERR_MAXLESSTHANMIN: u32 = 8194;
pub const FNERR_FILENAMECODES: u32 = 12288;
pub const FNERR_SUBCLASSFAILURE: u32 = 12289;
pub const FNERR_INVALIDFILENAME: u32 = 12290;
pub const FNERR_BUFFERTOOSMALL: u32 = 12291;
pub const FRERR_FINDREPLACECODES: u32 = 16384;
pub const FRERR_BUFFERLENGTHZERO: u32 = 16385;
pub const CCERR_CHOOSECOLORCODES: u32 = 20480;
pub const WM_DDE_FIRST: u32 = 992;
pub const WM_DDE_INITIATE: u32 = 992;
pub const WM_DDE_TERMINATE: u32 = 993;
pub const WM_DDE_ADVISE: u32 = 994;
pub const WM_DDE_UNADVISE: u32 = 995;
pub const WM_DDE_ACK: u32 = 996;
pub const WM_DDE_DATA: u32 = 997;
pub const WM_DDE_REQUEST: u32 = 998;
pub const WM_DDE_POKE: u32 = 999;
pub const WM_DDE_EXECUTE: u32 = 1000;
pub const WM_DDE_LAST: u32 = 1000;
pub const XST_NULL: u32 = 0;
pub const XST_INCOMPLETE: u32 = 1;
pub const XST_CONNECTED: u32 = 2;
pub const XST_INIT1: u32 = 3;
pub const XST_INIT2: u32 = 4;
pub const XST_REQSENT: u32 = 5;
pub const XST_DATARCVD: u32 = 6;
pub const XST_POKESENT: u32 = 7;
pub const XST_POKEACKRCVD: u32 = 8;
pub const XST_EXECSENT: u32 = 9;
pub const XST_EXECACKRCVD: u32 = 10;
pub const XST_ADVSENT: u32 = 11;
pub const XST_UNADVSENT: u32 = 12;
pub const XST_ADVACKRCVD: u32 = 13;
pub const XST_UNADVACKRCVD: u32 = 14;
pub const XST_ADVDATASENT: u32 = 15;
pub const XST_ADVDATAACKRCVD: u32 = 16;
pub const CADV_LATEACK: u32 = 65535;
pub const ST_CONNECTED: u32 = 1;
pub const ST_ADVISE: u32 = 2;
pub const ST_ISLOCAL: u32 = 4;
pub const ST_BLOCKED: u32 = 8;
pub const ST_CLIENT: u32 = 16;
pub const ST_TERMINATED: u32 = 32;
pub const ST_INLIST: u32 = 64;
pub const ST_BLOCKNEXT: u32 = 128;
pub const ST_ISSELF: u32 = 256;
pub const DDE_FACK: u32 = 32768;
pub const DDE_FBUSY: u32 = 16384;
pub const DDE_FDEFERUPD: u32 = 16384;
pub const DDE_FACKREQ: u32 = 32768;
pub const DDE_FRELEASE: u32 = 8192;
pub const DDE_FREQUESTED: u32 = 4096;
pub const DDE_FAPPSTATUS: u32 = 255;
pub const DDE_FNOTPROCESSED: u32 = 0;
pub const DDE_FACKRESERVED: i32 = -49408;
pub const DDE_FADVRESERVED: i32 = -49153;
pub const DDE_FDATRESERVED: i32 = -45057;
pub const DDE_FPOKRESERVED: i32 = -8193;
pub const MSGF_DDEMGR: u32 = 32769;
pub const CP_WINANSI: u32 = 1004;
pub const CP_WINUNICODE: u32 = 1200;
pub const CP_WINNEUTRAL: u32 = 1004;
pub const XTYPF_NOBLOCK: u32 = 2;
pub const XTYPF_NODATA: u32 = 4;
pub const XTYPF_ACKREQ: u32 = 8;
pub const XCLASS_MASK: u32 = 64512;
pub const XCLASS_BOOL: u32 = 4096;
pub const XCLASS_DATA: u32 = 8192;
pub const XCLASS_FLAGS: u32 = 16384;
pub const XCLASS_NOTIFICATION: u32 = 32768;
pub const XTYP_ERROR: u32 = 32770;
pub const XTYP_ADVDATA: u32 = 16400;
pub const XTYP_ADVREQ: u32 = 8226;
pub const XTYP_ADVSTART: u32 = 4144;
pub const XTYP_ADVSTOP: u32 = 32832;
pub const XTYP_EXECUTE: u32 = 16464;
pub const XTYP_CONNECT: u32 = 4194;
pub const XTYP_CONNECT_CONFIRM: u32 = 32882;
pub const XTYP_XACT_COMPLETE: u32 = 32896;
pub const XTYP_POKE: u32 = 16528;
pub const XTYP_REGISTER: u32 = 32930;
pub const XTYP_REQUEST: u32 = 8368;
pub const XTYP_DISCONNECT: u32 = 32962;
pub const XTYP_UNREGISTER: u32 = 32978;
pub const XTYP_WILDCONNECT: u32 = 8418;
pub const XTYP_MASK: u32 = 240;
pub const XTYP_SHIFT: u32 = 4;
pub const TIMEOUT_ASYNC: u32 = 4294967295;
pub const QID_SYNC: u32 = 4294967295;
pub const SZDDESYS_TOPIC: &'static [u8; 7usize] = b"System\0";
pub const SZDDESYS_ITEM_TOPICS: &'static [u8; 7usize] = b"Topics\0";
pub const SZDDESYS_ITEM_SYSITEMS: &'static [u8; 9usize] = b"SysItems\0";
pub const SZDDESYS_ITEM_RTNMSG: &'static [u8; 14usize] = b"ReturnMessage\0";
pub const SZDDESYS_ITEM_STATUS: &'static [u8; 7usize] = b"Status\0";
pub const SZDDESYS_ITEM_FORMATS: &'static [u8; 8usize] = b"Formats\0";
pub const SZDDESYS_ITEM_HELP: &'static [u8; 5usize] = b"Help\0";
pub const SZDDE_ITEM_ITEMLIST: &'static [u8; 14usize] = b"TopicItemList\0";
pub const CBF_FAIL_SELFCONNECTIONS: u32 = 4096;
pub const CBF_FAIL_CONNECTIONS: u32 = 8192;
pub const CBF_FAIL_ADVISES: u32 = 16384;
pub const CBF_FAIL_EXECUTES: u32 = 32768;
pub const CBF_FAIL_POKES: u32 = 65536;
pub const CBF_FAIL_REQUESTS: u32 = 131072;
pub const CBF_FAIL_ALLSVRXACTIONS: u32 = 258048;
pub const CBF_SKIP_CONNECT_CONFIRMS: u32 = 262144;
pub const CBF_SKIP_REGISTRATIONS: u32 = 524288;
pub const CBF_SKIP_UNREGISTRATIONS: u32 = 1048576;
pub const CBF_SKIP_DISCONNECTS: u32 = 2097152;
pub const CBF_SKIP_ALLNOTIFICATIONS: u32 = 3932160;
pub const APPCMD_CLIENTONLY: u32 = 16;
pub const APPCMD_FILTERINITS: u32 = 32;
pub const APPCMD_MASK: u32 = 4080;
pub const APPCLASS_STANDARD: u32 = 0;
pub const APPCLASS_MASK: u32 = 15;
pub const EC_ENABLEALL: u32 = 0;
pub const EC_ENABLEONE: u32 = 128;
pub const EC_DISABLE: u32 = 8;
pub const EC_QUERYWAITING: u32 = 2;
pub const DNS_REGISTER: u32 = 1;
pub const DNS_UNREGISTER: u32 = 2;
pub const DNS_FILTERON: u32 = 4;
pub const DNS_FILTEROFF: u32 = 8;
pub const HDATA_APPOWNED: u32 = 1;
pub const DMLERR_NO_ERROR: u32 = 0;
pub const DMLERR_FIRST: u32 = 16384;
pub const DMLERR_ADVACKTIMEOUT: u32 = 16384;
pub const DMLERR_BUSY: u32 = 16385;
pub const DMLERR_DATAACKTIMEOUT: u32 = 16386;
pub const DMLERR_DLL_NOT_INITIALIZED: u32 = 16387;
pub const DMLERR_DLL_USAGE: u32 = 16388;
pub const DMLERR_EXECACKTIMEOUT: u32 = 16389;
pub const DMLERR_INVALIDPARAMETER: u32 = 16390;
pub const DMLERR_LOW_MEMORY: u32 = 16391;
pub const DMLERR_MEMORY_ERROR: u32 = 16392;
pub const DMLERR_NOTPROCESSED: u32 = 16393;
pub const DMLERR_NO_CONV_ESTABLISHED: u32 = 16394;
pub const DMLERR_POKEACKTIMEOUT: u32 = 16395;
pub const DMLERR_POSTMSG_FAILED: u32 = 16396;
pub const DMLERR_REENTRANCY: u32 = 16397;
pub const DMLERR_SERVER_DIED: u32 = 16398;
pub const DMLERR_SYS_ERROR: u32 = 16399;
pub const DMLERR_UNADVACKTIMEOUT: u32 = 16400;
pub const DMLERR_UNFOUND_QUEUE_ID: u32 = 16401;
pub const DMLERR_LAST: u32 = 16401;
pub const MH_CREATE: u32 = 1;
pub const MH_KEEP: u32 = 2;
pub const MH_DELETE: u32 = 3;
pub const MH_CLEANUP: u32 = 4;
pub const MAX_MONITORS: u32 = 4;
pub const APPCLASS_MONITOR: u32 = 1;
pub const XTYP_MONITOR: u32 = 33010;
pub const MF_HSZ_INFO: u32 = 16777216;
pub const MF_SENDMSGS: u32 = 33554432;
pub const MF_POSTMSGS: u32 = 67108864;
pub const MF_CALLBACKS: u32 = 134217728;
pub const MF_ERRORS: u32 = 268435456;
pub const MF_LINKS: u32 = 536870912;
pub const MF_CONV: u32 = 1073741824;
pub const MF_MASK: u32 = 4278190080;
pub const ctlFirst: u32 = 1024;
pub const ctlLast: u32 = 1279;
pub const psh1: u32 = 1024;
pub const psh2: u32 = 1025;
pub const psh3: u32 = 1026;
pub const psh4: u32 = 1027;
pub const psh5: u32 = 1028;
pub const psh6: u32 = 1029;
pub const psh7: u32 = 1030;
pub const psh8: u32 = 1031;
pub const psh9: u32 = 1032;
pub const psh10: u32 = 1033;
pub const psh11: u32 = 1034;
pub const psh12: u32 = 1035;
pub const psh13: u32 = 1036;
pub const psh14: u32 = 1037;
pub const psh15: u32 = 1038;
pub const pshHelp: u32 = 1038;
pub const psh16: u32 = 1039;
pub const chx1: u32 = 1040;
pub const chx2: u32 = 1041;
pub const chx3: u32 = 1042;
pub const chx4: u32 = 1043;
pub const chx5: u32 = 1044;
pub const chx6: u32 = 1045;
pub const chx7: u32 = 1046;
pub const chx8: u32 = 1047;
pub const chx9: u32 = 1048;
pub const chx10: u32 = 1049;
pub const chx11: u32 = 1050;
pub const chx12: u32 = 1051;
pub const chx13: u32 = 1052;
pub const chx14: u32 = 1053;
pub const chx15: u32 = 1054;
pub const chx16: u32 = 1055;
pub const rad1: u32 = 1056;
pub const rad2: u32 = 1057;
pub const rad3: u32 = 1058;
pub const rad4: u32 = 1059;
pub const rad5: u32 = 1060;
pub const rad6: u32 = 1061;
pub const rad7: u32 = 1062;
pub const rad8: u32 = 1063;
pub const rad9: u32 = 1064;
pub const rad10: u32 = 1065;
pub const rad11: u32 = 1066;
pub const rad12: u32 = 1067;
pub const rad13: u32 = 1068;
pub const rad14: u32 = 1069;
pub const rad15: u32 = 1070;
pub const rad16: u32 = 1071;
pub const grp1: u32 = 1072;
pub const grp2: u32 = 1073;
pub const grp3: u32 = 1074;
pub const grp4: u32 = 1075;
pub const frm1: u32 = 1076;
pub const frm2: u32 = 1077;
pub const frm3: u32 = 1078;
pub const frm4: u32 = 1079;
pub const rct1: u32 = 1080;
pub const rct2: u32 = 1081;
pub const rct3: u32 = 1082;
pub const rct4: u32 = 1083;
pub const ico1: u32 = 1084;
pub const ico2: u32 = 1085;
pub const ico3: u32 = 1086;
pub const ico4: u32 = 1087;
pub const stc1: u32 = 1088;
pub const stc2: u32 = 1089;
pub const stc3: u32 = 1090;
pub const stc4: u32 = 1091;
pub const stc5: u32 = 1092;
pub const stc6: u32 = 1093;
pub const stc7: u32 = 1094;
pub const stc8: u32 = 1095;
pub const stc9: u32 = 1096;
pub const stc10: u32 = 1097;
pub const stc11: u32 = 1098;
pub const stc12: u32 = 1099;
pub const stc13: u32 = 1100;
pub const stc14: u32 = 1101;
pub const stc15: u32 = 1102;
pub const stc16: u32 = 1103;
pub const stc17: u32 = 1104;
pub const stc18: u32 = 1105;
pub const stc19: u32 = 1106;
pub const stc20: u32 = 1107;
pub const stc21: u32 = 1108;
pub const stc22: u32 = 1109;
pub const stc23: u32 = 1110;
pub const stc24: u32 = 1111;
pub const stc25: u32 = 1112;
pub const stc26: u32 = 1113;
pub const stc27: u32 = 1114;
pub const stc28: u32 = 1115;
pub const stc29: u32 = 1116;
pub const stc30: u32 = 1117;
pub const stc31: u32 = 1118;
pub const stc32: u32 = 1119;
pub const lst1: u32 = 1120;
pub const lst2: u32 = 1121;
pub const lst3: u32 = 1122;
pub const lst4: u32 = 1123;
pub const lst5: u32 = 1124;
pub const lst6: u32 = 1125;
pub const lst7: u32 = 1126;
pub const lst8: u32 = 1127;
pub const lst9: u32 = 1128;
pub const lst10: u32 = 1129;
pub const lst11: u32 = 1130;
pub const lst12: u32 = 1131;
pub const lst13: u32 = 1132;
pub const lst14: u32 = 1133;
pub const lst15: u32 = 1134;
pub const lst16: u32 = 1135;
pub const cmb1: u32 = 1136;
pub const cmb2: u32 = 1137;
pub const cmb3: u32 = 1138;
pub const cmb4: u32 = 1139;
pub const cmb5: u32 = 1140;
pub const cmb6: u32 = 1141;
pub const cmb7: u32 = 1142;
pub const cmb8: u32 = 1143;
pub const cmb9: u32 = 1144;
pub const cmb10: u32 = 1145;
pub const cmb11: u32 = 1146;
pub const cmb12: u32 = 1147;
pub const cmb13: u32 = 1148;
pub const cmb14: u32 = 1149;
pub const cmb15: u32 = 1150;
pub const cmb16: u32 = 1151;
pub const edt1: u32 = 1152;
pub const edt2: u32 = 1153;
pub const edt3: u32 = 1154;
pub const edt4: u32 = 1155;
pub const edt5: u32 = 1156;
pub const edt6: u32 = 1157;
pub const edt7: u32 = 1158;
pub const edt8: u32 = 1159;
pub const edt9: u32 = 1160;
pub const edt10: u32 = 1161;
pub const edt11: u32 = 1162;
pub const edt12: u32 = 1163;
pub const edt13: u32 = 1164;
pub const edt14: u32 = 1165;
pub const edt15: u32 = 1166;
pub const edt16: u32 = 1167;
pub const scr1: u32 = 1168;
pub const scr2: u32 = 1169;
pub const scr3: u32 = 1170;
pub const scr4: u32 = 1171;
pub const scr5: u32 = 1172;
pub const scr6: u32 = 1173;
pub const scr7: u32 = 1174;
pub const scr8: u32 = 1175;
pub const ctl1: u32 = 1184;
pub const FILEOPENORD: u32 = 1536;
pub const MULTIFILEOPENORD: u32 = 1537;
pub const PRINTDLGORD: u32 = 1538;
pub const PRNSETUPDLGORD: u32 = 1539;
pub const FINDDLGORD: u32 = 1540;
pub const REPLACEDLGORD: u32 = 1541;
pub const FONTDLGORD: u32 = 1542;
pub const FORMATDLGORD31: u32 = 1543;
pub const FORMATDLGORD30: u32 = 1544;
pub const RUNDLGORD: u32 = 1545;
pub const PAGESETUPDLGORD: u32 = 1546;
pub const NEWFILEOPENORD: u32 = 1547;
pub const PRINTDLGEXORD: u32 = 1549;
pub const PAGESETUPDLGORDMOTIF: u32 = 1550;
pub const COLORMGMTDLGORD: u32 = 1551;
pub const NEWFILEOPENV2ORD: u32 = 1552;
pub const NEWFILEOPENV3ORD: u32 = 1553;
pub const NEWFORMATDLGWITHLINK: u32 = 1591;
pub const IDC_MANAGE_LINK: u32 = 1592;
pub const LZERROR_BADINHANDLE: i32 = -1;
pub const LZERROR_BADOUTHANDLE: i32 = -2;
pub const LZERROR_READ: i32 = -3;
pub const LZERROR_WRITE: i32 = -4;
pub const LZERROR_GLOBALLOC: i32 = -5;
pub const LZERROR_GLOBLOCK: i32 = -6;
pub const LZERROR_BADVALUE: i32 = -7;
pub const LZERROR_UNKNOWNALG: i32 = -8;
pub const MAXPNAMELEN: u32 = 32;
pub const MAXERRORLENGTH: u32 = 256;
pub const MAX_JOYSTICKOEMVXDNAME: u32 = 260;
pub const TIME_MS: u32 = 1;
pub const TIME_SAMPLES: u32 = 2;
pub const TIME_BYTES: u32 = 4;
pub const TIME_SMPTE: u32 = 8;
pub const TIME_MIDI: u32 = 16;
pub const TIME_TICKS: u32 = 32;
pub const MM_JOY1MOVE: u32 = 928;
pub const MM_JOY2MOVE: u32 = 929;
pub const MM_JOY1ZMOVE: u32 = 930;
pub const MM_JOY2ZMOVE: u32 = 931;
pub const MM_JOY1BUTTONDOWN: u32 = 949;
pub const MM_JOY2BUTTONDOWN: u32 = 950;
pub const MM_JOY1BUTTONUP: u32 = 951;
pub const MM_JOY2BUTTONUP: u32 = 952;
pub const MM_MCINOTIFY: u32 = 953;
pub const MM_WOM_OPEN: u32 = 955;
pub const MM_WOM_CLOSE: u32 = 956;
pub const MM_WOM_DONE: u32 = 957;
pub const MM_WIM_OPEN: u32 = 958;
pub const MM_WIM_CLOSE: u32 = 959;
pub const MM_WIM_DATA: u32 = 960;
pub const MM_MIM_OPEN: u32 = 961;
pub const MM_MIM_CLOSE: u32 = 962;
pub const MM_MIM_DATA: u32 = 963;
pub const MM_MIM_LONGDATA: u32 = 964;
pub const MM_MIM_ERROR: u32 = 965;
pub const MM_MIM_LONGERROR: u32 = 966;
pub const MM_MOM_OPEN: u32 = 967;
pub const MM_MOM_CLOSE: u32 = 968;
pub const MM_MOM_DONE: u32 = 969;
pub const MM_DRVM_OPEN: u32 = 976;
pub const MM_DRVM_CLOSE: u32 = 977;
pub const MM_DRVM_DATA: u32 = 978;
pub const MM_DRVM_ERROR: u32 = 979;
pub const MM_STREAM_OPEN: u32 = 980;
pub const MM_STREAM_CLOSE: u32 = 981;
pub const MM_STREAM_DONE: u32 = 982;
pub const MM_STREAM_ERROR: u32 = 983;
pub const MM_MOM_POSITIONCB: u32 = 970;
pub const MM_MCISIGNAL: u32 = 971;
pub const MM_MIM_MOREDATA: u32 = 972;
pub const MM_MIXM_LINE_CHANGE: u32 = 976;
pub const MM_MIXM_CONTROL_CHANGE: u32 = 977;
pub const MMSYSERR_BASE: u32 = 0;
pub const WAVERR_BASE: u32 = 32;
pub const MIDIERR_BASE: u32 = 64;
pub const TIMERR_BASE: u32 = 96;
pub const JOYERR_BASE: u32 = 160;
pub const MCIERR_BASE: u32 = 256;
pub const MIXERR_BASE: u32 = 1024;
pub const MCI_STRING_OFFSET: u32 = 512;
pub const MCI_VD_OFFSET: u32 = 1024;
pub const MCI_CD_OFFSET: u32 = 1088;
pub const MCI_WAVE_OFFSET: u32 = 1152;
pub const MCI_SEQ_OFFSET: u32 = 1216;
pub const MMSYSERR_NOERROR: u32 = 0;
pub const MMSYSERR_ERROR: u32 = 1;
pub const MMSYSERR_BADDEVICEID: u32 = 2;
pub const MMSYSERR_NOTENABLED: u32 = 3;
pub const MMSYSERR_ALLOCATED: u32 = 4;
pub const MMSYSERR_INVALHANDLE: u32 = 5;
pub const MMSYSERR_NODRIVER: u32 = 6;
pub const MMSYSERR_NOMEM: u32 = 7;
pub const MMSYSERR_NOTSUPPORTED: u32 = 8;
pub const MMSYSERR_BADERRNUM: u32 = 9;
pub const MMSYSERR_INVALFLAG: u32 = 10;
pub const MMSYSERR_INVALPARAM: u32 = 11;
pub const MMSYSERR_HANDLEBUSY: u32 = 12;
pub const MMSYSERR_INVALIDALIAS: u32 = 13;
pub const MMSYSERR_BADDB: u32 = 14;
pub const MMSYSERR_KEYNOTFOUND: u32 = 15;
pub const MMSYSERR_READERROR: u32 = 16;
pub const MMSYSERR_WRITEERROR: u32 = 17;
pub const MMSYSERR_DELETEERROR: u32 = 18;
pub const MMSYSERR_VALNOTFOUND: u32 = 19;
pub const MMSYSERR_NODRIVERCB: u32 = 20;
pub const MMSYSERR_MOREDATA: u32 = 21;
pub const MMSYSERR_LASTERROR: u32 = 21;
pub const CALLBACK_TYPEMASK: u32 = 458752;
pub const CALLBACK_NULL: u32 = 0;
pub const CALLBACK_WINDOW: u32 = 65536;
pub const CALLBACK_TASK: u32 = 131072;
pub const CALLBACK_FUNCTION: u32 = 196608;
pub const CALLBACK_THREAD: u32 = 131072;
pub const CALLBACK_EVENT: u32 = 327680;
pub const MCIERR_INVALID_DEVICE_ID: u32 = 257;
pub const MCIERR_UNRECOGNIZED_KEYWORD: u32 = 259;
pub const MCIERR_UNRECOGNIZED_COMMAND: u32 = 261;
pub const MCIERR_HARDWARE: u32 = 262;
pub const MCIERR_INVALID_DEVICE_NAME: u32 = 263;
pub const MCIERR_OUT_OF_MEMORY: u32 = 264;
pub const MCIERR_DEVICE_OPEN: u32 = 265;
pub const MCIERR_CANNOT_LOAD_DRIVER: u32 = 266;
pub const MCIERR_MISSING_COMMAND_STRING: u32 = 267;
pub const MCIERR_PARAM_OVERFLOW: u32 = 268;
pub const MCIERR_MISSING_STRING_ARGUMENT: u32 = 269;
pub const MCIERR_BAD_INTEGER: u32 = 270;
pub const MCIERR_PARSER_INTERNAL: u32 = 271;
pub const MCIERR_DRIVER_INTERNAL: u32 = 272;
pub const MCIERR_MISSING_PARAMETER: u32 = 273;
pub const MCIERR_UNSUPPORTED_FUNCTION: u32 = 274;
pub const MCIERR_FILE_NOT_FOUND: u32 = 275;
pub const MCIERR_DEVICE_NOT_READY: u32 = 276;
pub const MCIERR_INTERNAL: u32 = 277;
pub const MCIERR_DRIVER: u32 = 278;
pub const MCIERR_CANNOT_USE_ALL: u32 = 279;
pub const MCIERR_MULTIPLE: u32 = 280;
pub const MCIERR_EXTENSION_NOT_FOUND: u32 = 281;
pub const MCIERR_OUTOFRANGE: u32 = 282;
pub const MCIERR_FLAGS_NOT_COMPATIBLE: u32 = 284;
pub const MCIERR_FILE_NOT_SAVED: u32 = 286;
pub const MCIERR_DEVICE_TYPE_REQUIRED: u32 = 287;
pub const MCIERR_DEVICE_LOCKED: u32 = 288;
pub const MCIERR_DUPLICATE_ALIAS: u32 = 289;
pub const MCIERR_BAD_CONSTANT: u32 = 290;
pub const MCIERR_MUST_USE_SHAREABLE: u32 = 291;
pub const MCIERR_MISSING_DEVICE_NAME: u32 = 292;
pub const MCIERR_BAD_TIME_FORMAT: u32 = 293;
pub const MCIERR_NO_CLOSING_QUOTE: u32 = 294;
pub const MCIERR_DUPLICATE_FLAGS: u32 = 295;
pub const MCIERR_INVALID_FILE: u32 = 296;
pub const MCIERR_NULL_PARAMETER_BLOCK: u32 = 297;
pub const MCIERR_UNNAMED_RESOURCE: u32 = 298;
pub const MCIERR_NEW_REQUIRES_ALIAS: u32 = 299;
pub const MCIERR_NOTIFY_ON_AUTO_OPEN: u32 = 300;
pub const MCIERR_NO_ELEMENT_ALLOWED: u32 = 301;
pub const MCIERR_NONAPPLICABLE_FUNCTION: u32 = 302;
pub const MCIERR_ILLEGAL_FOR_AUTO_OPEN: u32 = 303;
pub const MCIERR_FILENAME_REQUIRED: u32 = 304;
pub const MCIERR_EXTRA_CHARACTERS: u32 = 305;
pub const MCIERR_DEVICE_NOT_INSTALLED: u32 = 306;
pub const MCIERR_GET_CD: u32 = 307;
pub const MCIERR_SET_CD: u32 = 308;
pub const MCIERR_SET_DRIVE: u32 = 309;
pub const MCIERR_DEVICE_LENGTH: u32 = 310;
pub const MCIERR_DEVICE_ORD_LENGTH: u32 = 311;
pub const MCIERR_NO_INTEGER: u32 = 312;
pub const MCIERR_WAVE_OUTPUTSINUSE: u32 = 320;
pub const MCIERR_WAVE_SETOUTPUTINUSE: u32 = 321;
pub const MCIERR_WAVE_INPUTSINUSE: u32 = 322;
pub const MCIERR_WAVE_SETINPUTINUSE: u32 = 323;
pub const MCIERR_WAVE_OUTPUTUNSPECIFIED: u32 = 324;
pub const MCIERR_WAVE_INPUTUNSPECIFIED: u32 = 325;
pub const MCIERR_WAVE_OUTPUTSUNSUITABLE: u32 = 326;
pub const MCIERR_WAVE_SETOUTPUTUNSUITABLE: u32 = 327;
pub const MCIERR_WAVE_INPUTSUNSUITABLE: u32 = 328;
pub const MCIERR_WAVE_SETINPUTUNSUITABLE: u32 = 329;
pub const MCIERR_SEQ_DIV_INCOMPATIBLE: u32 = 336;
pub const MCIERR_SEQ_PORT_INUSE: u32 = 337;
pub const MCIERR_SEQ_PORT_NONEXISTENT: u32 = 338;
pub const MCIERR_SEQ_PORT_MAPNODEVICE: u32 = 339;
pub const MCIERR_SEQ_PORT_MISCERROR: u32 = 340;
pub const MCIERR_SEQ_TIMER: u32 = 341;
pub const MCIERR_SEQ_PORTUNSPECIFIED: u32 = 342;
pub const MCIERR_SEQ_NOMIDIPRESENT: u32 = 343;
pub const MCIERR_NO_WINDOW: u32 = 346;
pub const MCIERR_CREATEWINDOW: u32 = 347;
pub const MCIERR_FILE_READ: u32 = 348;
pub const MCIERR_FILE_WRITE: u32 = 349;
pub const MCIERR_NO_IDENTITY: u32 = 350;
pub const MCIERR_CUSTOM_DRIVER_BASE: u32 = 512;
pub const MCI_OPEN: u32 = 2051;
pub const MCI_CLOSE: u32 = 2052;
pub const MCI_ESCAPE: u32 = 2053;
pub const MCI_PLAY: u32 = 2054;
pub const MCI_SEEK: u32 = 2055;
pub const MCI_STOP: u32 = 2056;
pub const MCI_PAUSE: u32 = 2057;
pub const MCI_INFO: u32 = 2058;
pub const MCI_GETDEVCAPS: u32 = 2059;
pub const MCI_SPIN: u32 = 2060;
pub const MCI_SET: u32 = 2061;
pub const MCI_STEP: u32 = 2062;
pub const MCI_RECORD: u32 = 2063;
pub const MCI_SYSINFO: u32 = 2064;
pub const MCI_BREAK: u32 = 2065;
pub const MCI_SAVE: u32 = 2067;
pub const MCI_STATUS: u32 = 2068;
pub const MCI_CUE: u32 = 2096;
pub const MCI_REALIZE: u32 = 2112;
pub const MCI_WINDOW: u32 = 2113;
pub const MCI_PUT: u32 = 2114;
pub const MCI_WHERE: u32 = 2115;
pub const MCI_FREEZE: u32 = 2116;
pub const MCI_UNFREEZE: u32 = 2117;
pub const MCI_LOAD: u32 = 2128;
pub const MCI_CUT: u32 = 2129;
pub const MCI_COPY: u32 = 2130;
pub const MCI_PASTE: u32 = 2131;
pub const MCI_UPDATE: u32 = 2132;
pub const MCI_RESUME: u32 = 2133;
pub const MCI_DELETE: u32 = 2134;
pub const MCI_LAST: u32 = 4095;
pub const MCI_DEVTYPE_VCR: u32 = 513;
pub const MCI_DEVTYPE_VIDEODISC: u32 = 514;
pub const MCI_DEVTYPE_OVERLAY: u32 = 515;
pub const MCI_DEVTYPE_CD_AUDIO: u32 = 516;
pub const MCI_DEVTYPE_DAT: u32 = 517;
pub const MCI_DEVTYPE_SCANNER: u32 = 518;
pub const MCI_DEVTYPE_ANIMATION: u32 = 519;
pub const MCI_DEVTYPE_DIGITAL_VIDEO: u32 = 520;
pub const MCI_DEVTYPE_OTHER: u32 = 521;
pub const MCI_DEVTYPE_WAVEFORM_AUDIO: u32 = 522;
pub const MCI_DEVTYPE_SEQUENCER: u32 = 523;
pub const MCI_DEVTYPE_FIRST: u32 = 513;
pub const MCI_DEVTYPE_LAST: u32 = 523;
pub const MCI_DEVTYPE_FIRST_USER: u32 = 4096;
pub const MCI_MODE_NOT_READY: u32 = 524;
pub const MCI_MODE_STOP: u32 = 525;
pub const MCI_MODE_PLAY: u32 = 526;
pub const MCI_MODE_RECORD: u32 = 527;
pub const MCI_MODE_SEEK: u32 = 528;
pub const MCI_MODE_PAUSE: u32 = 529;
pub const MCI_MODE_OPEN: u32 = 530;
pub const MCI_FORMAT_MILLISECONDS: u32 = 0;
pub const MCI_FORMAT_HMS: u32 = 1;
pub const MCI_FORMAT_MSF: u32 = 2;
pub const MCI_FORMAT_FRAMES: u32 = 3;
pub const MCI_FORMAT_SMPTE_24: u32 = 4;
pub const MCI_FORMAT_SMPTE_25: u32 = 5;
pub const MCI_FORMAT_SMPTE_30: u32 = 6;
pub const MCI_FORMAT_SMPTE_30DROP: u32 = 7;
pub const MCI_FORMAT_BYTES: u32 = 8;
pub const MCI_FORMAT_SAMPLES: u32 = 9;
pub const MCI_FORMAT_TMSF: u32 = 10;
pub const MCI_NOTIFY_SUCCESSFUL: u32 = 1;
pub const MCI_NOTIFY_SUPERSEDED: u32 = 2;
pub const MCI_NOTIFY_ABORTED: u32 = 4;
pub const MCI_NOTIFY_FAILURE: u32 = 8;
pub const MCI_NOTIFY: u32 = 1;
pub const MCI_WAIT: u32 = 2;
pub const MCI_FROM: u32 = 4;
pub const MCI_TO: u32 = 8;
pub const MCI_TRACK: u32 = 16;
pub const MCI_OPEN_SHAREABLE: u32 = 256;
pub const MCI_OPEN_ELEMENT: u32 = 512;
pub const MCI_OPEN_ALIAS: u32 = 1024;
pub const MCI_OPEN_ELEMENT_ID: u32 = 2048;
pub const MCI_OPEN_TYPE_ID: u32 = 4096;
pub const MCI_OPEN_TYPE: u32 = 8192;
pub const MCI_SEEK_TO_START: u32 = 256;
pub const MCI_SEEK_TO_END: u32 = 512;
pub const MCI_STATUS_ITEM: u32 = 256;
pub const MCI_STATUS_START: u32 = 512;
pub const MCI_STATUS_LENGTH: u32 = 1;
pub const MCI_STATUS_POSITION: u32 = 2;
pub const MCI_STATUS_NUMBER_OF_TRACKS: u32 = 3;
pub const MCI_STATUS_MODE: u32 = 4;
pub const MCI_STATUS_MEDIA_PRESENT: u32 = 5;
pub const MCI_STATUS_TIME_FORMAT: u32 = 6;
pub const MCI_STATUS_READY: u32 = 7;
pub const MCI_STATUS_CURRENT_TRACK: u32 = 8;
pub const MCI_INFO_PRODUCT: u32 = 256;
pub const MCI_INFO_FILE: u32 = 512;
pub const MCI_INFO_MEDIA_UPC: u32 = 1024;
pub const MCI_INFO_MEDIA_IDENTITY: u32 = 2048;
pub const MCI_INFO_NAME: u32 = 4096;
pub const MCI_INFO_COPYRIGHT: u32 = 8192;
pub const MCI_GETDEVCAPS_ITEM: u32 = 256;
pub const MCI_GETDEVCAPS_CAN_RECORD: u32 = 1;
pub const MCI_GETDEVCAPS_HAS_AUDIO: u32 = 2;
pub const MCI_GETDEVCAPS_HAS_VIDEO: u32 = 3;
pub const MCI_GETDEVCAPS_DEVICE_TYPE: u32 = 4;
pub const MCI_GETDEVCAPS_USES_FILES: u32 = 5;
pub const MCI_GETDEVCAPS_COMPOUND_DEVICE: u32 = 6;
pub const MCI_GETDEVCAPS_CAN_EJECT: u32 = 7;
pub const MCI_GETDEVCAPS_CAN_PLAY: u32 = 8;
pub const MCI_GETDEVCAPS_CAN_SAVE: u32 = 9;
pub const MCI_SYSINFO_QUANTITY: u32 = 256;
pub const MCI_SYSINFO_OPEN: u32 = 512;
pub const MCI_SYSINFO_NAME: u32 = 1024;
pub const MCI_SYSINFO_INSTALLNAME: u32 = 2048;
pub const MCI_SET_DOOR_OPEN: u32 = 256;
pub const MCI_SET_DOOR_CLOSED: u32 = 512;
pub const MCI_SET_TIME_FORMAT: u32 = 1024;
pub const MCI_SET_AUDIO: u32 = 2048;
pub const MCI_SET_VIDEO: u32 = 4096;
pub const MCI_SET_ON: u32 = 8192;
pub const MCI_SET_OFF: u32 = 16384;
pub const MCI_SET_AUDIO_ALL: u32 = 0;
pub const MCI_SET_AUDIO_LEFT: u32 = 1;
pub const MCI_SET_AUDIO_RIGHT: u32 = 2;
pub const MCI_BREAK_KEY: u32 = 256;
pub const MCI_BREAK_HWND: u32 = 512;
pub const MCI_BREAK_OFF: u32 = 1024;
pub const MCI_RECORD_INSERT: u32 = 256;
pub const MCI_RECORD_OVERWRITE: u32 = 512;
pub const MCI_SAVE_FILE: u32 = 256;
pub const MCI_LOAD_FILE: u32 = 256;
pub const MCI_VD_MODE_PARK: u32 = 1025;
pub const MCI_VD_MEDIA_CLV: u32 = 1026;
pub const MCI_VD_MEDIA_CAV: u32 = 1027;
pub const MCI_VD_MEDIA_OTHER: u32 = 1028;
pub const MCI_VD_FORMAT_TRACK: u32 = 16385;
pub const MCI_VD_PLAY_REVERSE: u32 = 65536;
pub const MCI_VD_PLAY_FAST: u32 = 131072;
pub const MCI_VD_PLAY_SPEED: u32 = 262144;
pub const MCI_VD_PLAY_SCAN: u32 = 524288;
pub const MCI_VD_PLAY_SLOW: u32 = 1048576;
pub const MCI_VD_SEEK_REVERSE: u32 = 65536;
pub const MCI_VD_STATUS_SPEED: u32 = 16386;
pub const MCI_VD_STATUS_FORWARD: u32 = 16387;
pub const MCI_VD_STATUS_MEDIA_TYPE: u32 = 16388;
pub const MCI_VD_STATUS_SIDE: u32 = 16389;
pub const MCI_VD_STATUS_DISC_SIZE: u32 = 16390;
pub const MCI_VD_GETDEVCAPS_CLV: u32 = 65536;
pub const MCI_VD_GETDEVCAPS_CAV: u32 = 131072;
pub const MCI_VD_SPIN_UP: u32 = 65536;
pub const MCI_VD_SPIN_DOWN: u32 = 131072;
pub const MCI_VD_GETDEVCAPS_CAN_REVERSE: u32 = 16386;
pub const MCI_VD_GETDEVCAPS_FAST_RATE: u32 = 16387;
pub const MCI_VD_GETDEVCAPS_SLOW_RATE: u32 = 16388;
pub const MCI_VD_GETDEVCAPS_NORMAL_RATE: u32 = 16389;
pub const MCI_VD_STEP_FRAMES: u32 = 65536;
pub const MCI_VD_STEP_REVERSE: u32 = 131072;
pub const MCI_VD_ESCAPE_STRING: u32 = 256;
pub const MCI_CDA_STATUS_TYPE_TRACK: u32 = 16385;
pub const MCI_CDA_TRACK_AUDIO: u32 = 1088;
pub const MCI_CDA_TRACK_OTHER: u32 = 1089;
pub const MCI_WAVE_PCM: u32 = 1152;
pub const MCI_WAVE_MAPPER: u32 = 1153;
pub const MCI_WAVE_OPEN_BUFFER: u32 = 65536;
pub const MCI_WAVE_SET_FORMATTAG: u32 = 65536;
pub const MCI_WAVE_SET_CHANNELS: u32 = 131072;
pub const MCI_WAVE_SET_SAMPLESPERSEC: u32 = 262144;
pub const MCI_WAVE_SET_AVGBYTESPERSEC: u32 = 524288;
pub const MCI_WAVE_SET_BLOCKALIGN: u32 = 1048576;
pub const MCI_WAVE_SET_BITSPERSAMPLE: u32 = 2097152;
pub const MCI_WAVE_INPUT: u32 = 4194304;
pub const MCI_WAVE_OUTPUT: u32 = 8388608;
pub const MCI_WAVE_STATUS_FORMATTAG: u32 = 16385;
pub const MCI_WAVE_STATUS_CHANNELS: u32 = 16386;
pub const MCI_WAVE_STATUS_SAMPLESPERSEC: u32 = 16387;
pub const MCI_WAVE_STATUS_AVGBYTESPERSEC: u32 = 16388;
pub const MCI_WAVE_STATUS_BLOCKALIGN: u32 = 16389;
pub const MCI_WAVE_STATUS_BITSPERSAMPLE: u32 = 16390;
pub const MCI_WAVE_STATUS_LEVEL: u32 = 16391;
pub const MCI_WAVE_SET_ANYINPUT: u32 = 67108864;
pub const MCI_WAVE_SET_ANYOUTPUT: u32 = 134217728;
pub const MCI_WAVE_GETDEVCAPS_INPUTS: u32 = 16385;
pub const MCI_WAVE_GETDEVCAPS_OUTPUTS: u32 = 16386;
pub const MCI_SEQ_DIV_PPQN: u32 = 1216;
pub const MCI_SEQ_DIV_SMPTE_24: u32 = 1217;
pub const MCI_SEQ_DIV_SMPTE_25: u32 = 1218;
pub const MCI_SEQ_DIV_SMPTE_30DROP: u32 = 1219;
pub const MCI_SEQ_DIV_SMPTE_30: u32 = 1220;
pub const MCI_SEQ_FORMAT_SONGPTR: u32 = 16385;
pub const MCI_SEQ_FILE: u32 = 16386;
pub const MCI_SEQ_MIDI: u32 = 16387;
pub const MCI_SEQ_SMPTE: u32 = 16388;
pub const MCI_SEQ_NONE: u32 = 65533;
pub const MCI_SEQ_MAPPER: u32 = 65535;
pub const MCI_SEQ_STATUS_TEMPO: u32 = 16386;
pub const MCI_SEQ_STATUS_PORT: u32 = 16387;
pub const MCI_SEQ_STATUS_SLAVE: u32 = 16391;
pub const MCI_SEQ_STATUS_MASTER: u32 = 16392;
pub const MCI_SEQ_STATUS_OFFSET: u32 = 16393;
pub const MCI_SEQ_STATUS_DIVTYPE: u32 = 16394;
pub const MCI_SEQ_STATUS_NAME: u32 = 16395;
pub const MCI_SEQ_STATUS_COPYRIGHT: u32 = 16396;
pub const MCI_SEQ_SET_TEMPO: u32 = 65536;
pub const MCI_SEQ_SET_PORT: u32 = 131072;
pub const MCI_SEQ_SET_SLAVE: u32 = 262144;
pub const MCI_SEQ_SET_MASTER: u32 = 524288;
pub const MCI_SEQ_SET_OFFSET: u32 = 16777216;
pub const MCI_ANIM_OPEN_WS: u32 = 65536;
pub const MCI_ANIM_OPEN_PARENT: u32 = 131072;
pub const MCI_ANIM_OPEN_NOSTATIC: u32 = 262144;
pub const MCI_ANIM_PLAY_SPEED: u32 = 65536;
pub const MCI_ANIM_PLAY_REVERSE: u32 = 131072;
pub const MCI_ANIM_PLAY_FAST: u32 = 262144;
pub const MCI_ANIM_PLAY_SLOW: u32 = 524288;
pub const MCI_ANIM_PLAY_SCAN: u32 = 1048576;
pub const MCI_ANIM_STEP_REVERSE: u32 = 65536;
pub const MCI_ANIM_STEP_FRAMES: u32 = 131072;
pub const MCI_ANIM_STATUS_SPEED: u32 = 16385;
pub const MCI_ANIM_STATUS_FORWARD: u32 = 16386;
pub const MCI_ANIM_STATUS_HWND: u32 = 16387;
pub const MCI_ANIM_STATUS_HPAL: u32 = 16388;
pub const MCI_ANIM_STATUS_STRETCH: u32 = 16389;
pub const MCI_ANIM_INFO_TEXT: u32 = 65536;
pub const MCI_ANIM_GETDEVCAPS_CAN_REVERSE: u32 = 16385;
pub const MCI_ANIM_GETDEVCAPS_FAST_RATE: u32 = 16386;
pub const MCI_ANIM_GETDEVCAPS_SLOW_RATE: u32 = 16387;
pub const MCI_ANIM_GETDEVCAPS_NORMAL_RATE: u32 = 16388;
pub const MCI_ANIM_GETDEVCAPS_PALETTES: u32 = 16390;
pub const MCI_ANIM_GETDEVCAPS_CAN_STRETCH: u32 = 16391;
pub const MCI_ANIM_GETDEVCAPS_MAX_WINDOWS: u32 = 16392;
pub const MCI_ANIM_REALIZE_NORM: u32 = 65536;
pub const MCI_ANIM_REALIZE_BKGD: u32 = 131072;
pub const MCI_ANIM_WINDOW_HWND: u32 = 65536;
pub const MCI_ANIM_WINDOW_STATE: u32 = 262144;
pub const MCI_ANIM_WINDOW_TEXT: u32 = 524288;
pub const MCI_ANIM_WINDOW_ENABLE_STRETCH: u32 = 1048576;
pub const MCI_ANIM_WINDOW_DISABLE_STRETCH: u32 = 2097152;
pub const MCI_ANIM_WINDOW_DEFAULT: u32 = 0;
pub const MCI_ANIM_RECT: u32 = 65536;
pub const MCI_ANIM_PUT_SOURCE: u32 = 131072;
pub const MCI_ANIM_PUT_DESTINATION: u32 = 262144;
pub const MCI_ANIM_WHERE_SOURCE: u32 = 131072;
pub const MCI_ANIM_WHERE_DESTINATION: u32 = 262144;
pub const MCI_ANIM_UPDATE_HDC: u32 = 131072;
pub const MCI_OVLY_OPEN_WS: u32 = 65536;
pub const MCI_OVLY_OPEN_PARENT: u32 = 131072;
pub const MCI_OVLY_STATUS_HWND: u32 = 16385;
pub const MCI_OVLY_STATUS_STRETCH: u32 = 16386;
pub const MCI_OVLY_INFO_TEXT: u32 = 65536;
pub const MCI_OVLY_GETDEVCAPS_CAN_STRETCH: u32 = 16385;
pub const MCI_OVLY_GETDEVCAPS_CAN_FREEZE: u32 = 16386;
pub const MCI_OVLY_GETDEVCAPS_MAX_WINDOWS: u32 = 16387;
pub const MCI_OVLY_WINDOW_HWND: u32 = 65536;
pub const MCI_OVLY_WINDOW_STATE: u32 = 262144;
pub const MCI_OVLY_WINDOW_TEXT: u32 = 524288;
pub const MCI_OVLY_WINDOW_ENABLE_STRETCH: u32 = 1048576;
pub const MCI_OVLY_WINDOW_DISABLE_STRETCH: u32 = 2097152;
pub const MCI_OVLY_WINDOW_DEFAULT: u32 = 0;
pub const MCI_OVLY_RECT: u32 = 65536;
pub const MCI_OVLY_PUT_SOURCE: u32 = 131072;
pub const MCI_OVLY_PUT_DESTINATION: u32 = 262144;
pub const MCI_OVLY_PUT_FRAME: u32 = 524288;
pub const MCI_OVLY_PUT_VIDEO: u32 = 1048576;
pub const MCI_OVLY_WHERE_SOURCE: u32 = 131072;
pub const MCI_OVLY_WHERE_DESTINATION: u32 = 262144;
pub const MCI_OVLY_WHERE_FRAME: u32 = 524288;
pub const MCI_OVLY_WHERE_VIDEO: u32 = 1048576;
pub const DRV_LOAD: u32 = 1;
pub const DRV_ENABLE: u32 = 2;
pub const DRV_OPEN: u32 = 3;
pub const DRV_CLOSE: u32 = 4;
pub const DRV_DISABLE: u32 = 5;
pub const DRV_FREE: u32 = 6;
pub const DRV_CONFIGURE: u32 = 7;
pub const DRV_QUERYCONFIGURE: u32 = 8;
pub const DRV_INSTALL: u32 = 9;
pub const DRV_REMOVE: u32 = 10;
pub const DRV_EXITSESSION: u32 = 11;
pub const DRV_POWER: u32 = 15;
pub const DRV_RESERVED: u32 = 2048;
pub const DRV_USER: u32 = 16384;
pub const DRVCNF_CANCEL: u32 = 0;
pub const DRVCNF_OK: u32 = 1;
pub const DRVCNF_RESTART: u32 = 2;
pub const DRV_CANCEL: u32 = 0;
pub const DRV_OK: u32 = 1;
pub const DRV_RESTART: u32 = 2;
pub const DRV_MCI_FIRST: u32 = 2048;
pub const DRV_MCI_LAST: u32 = 6143;
pub const MMIOERR_BASE: u32 = 256;
pub const MMIOERR_FILENOTFOUND: u32 = 257;
pub const MMIOERR_OUTOFMEMORY: u32 = 258;
pub const MMIOERR_CANNOTOPEN: u32 = 259;
pub const MMIOERR_CANNOTCLOSE: u32 = 260;
pub const MMIOERR_CANNOTREAD: u32 = 261;
pub const MMIOERR_CANNOTWRITE: u32 = 262;
pub const MMIOERR_CANNOTSEEK: u32 = 263;
pub const MMIOERR_CANNOTEXPAND: u32 = 264;
pub const MMIOERR_CHUNKNOTFOUND: u32 = 265;
pub const MMIOERR_UNBUFFERED: u32 = 266;
pub const MMIOERR_PATHNOTFOUND: u32 = 267;
pub const MMIOERR_ACCESSDENIED: u32 = 268;
pub const MMIOERR_SHARINGVIOLATION: u32 = 269;
pub const MMIOERR_NETWORKERROR: u32 = 270;
pub const MMIOERR_TOOMANYOPENFILES: u32 = 271;
pub const MMIOERR_INVALIDFILE: u32 = 272;
pub const CFSEPCHAR: u8 = 43u8;
pub const MMIO_RWMODE: u32 = 3;
pub const MMIO_SHAREMODE: u32 = 112;
pub const MMIO_CREATE: u32 = 4096;
pub const MMIO_PARSE: u32 = 256;
pub const MMIO_DELETE: u32 = 512;
pub const MMIO_EXIST: u32 = 16384;
pub const MMIO_ALLOCBUF: u32 = 65536;
pub const MMIO_GETTEMP: u32 = 131072;
pub const MMIO_DIRTY: u32 = 268435456;
pub const MMIO_READ: u32 = 0;
pub const MMIO_WRITE: u32 = 1;
pub const MMIO_READWRITE: u32 = 2;
pub const MMIO_COMPAT: u32 = 0;
pub const MMIO_EXCLUSIVE: u32 = 16;
pub const MMIO_DENYWRITE: u32 = 32;
pub const MMIO_DENYREAD: u32 = 48;
pub const MMIO_DENYNONE: u32 = 64;
pub const MMIO_FHOPEN: u32 = 16;
pub const MMIO_EMPTYBUF: u32 = 16;
pub const MMIO_TOUPPER: u32 = 16;
pub const MMIO_INSTALLPROC: u32 = 65536;
pub const MMIO_GLOBALPROC: u32 = 268435456;
pub const MMIO_REMOVEPROC: u32 = 131072;
pub const MMIO_UNICODEPROC: u32 = 16777216;
pub const MMIO_FINDPROC: u32 = 262144;
pub const MMIO_FINDCHUNK: u32 = 16;
pub const MMIO_FINDRIFF: u32 = 32;
pub const MMIO_FINDLIST: u32 = 64;
pub const MMIO_CREATERIFF: u32 = 32;
pub const MMIO_CREATELIST: u32 = 64;
pub const MMIOM_READ: u32 = 0;
pub const MMIOM_WRITE: u32 = 1;
pub const MMIOM_SEEK: u32 = 2;
pub const MMIOM_OPEN: u32 = 3;
pub const MMIOM_CLOSE: u32 = 4;
pub const MMIOM_WRITEFLUSH: u32 = 5;
pub const MMIOM_RENAME: u32 = 6;
pub const MMIOM_USER: u32 = 32768;
pub const MMIO_DEFAULTBUFFER: u32 = 8192;
pub const TIME_ONESHOT: u32 = 0;
pub const TIME_PERIODIC: u32 = 1;
pub const TIME_CALLBACK_FUNCTION: u32 = 0;
pub const TIME_CALLBACK_EVENT_SET: u32 = 16;
pub const TIME_CALLBACK_EVENT_PULSE: u32 = 32;
pub const TIME_KILL_SYNCHRONOUS: u32 = 256;
pub const SND_SYNC: u32 = 0;
pub const SND_ASYNC: u32 = 1;
pub const SND_NODEFAULT: u32 = 2;
pub const SND_MEMORY: u32 = 4;
pub const SND_LOOP: u32 = 8;
pub const SND_NOSTOP: u32 = 16;
pub const SND_NOWAIT: u32 = 8192;
pub const SND_ALIAS: u32 = 65536;
pub const SND_ALIAS_ID: u32 = 1114112;
pub const SND_FILENAME: u32 = 131072;
pub const SND_RESOURCE: u32 = 262148;
pub const SND_PURGE: u32 = 64;
pub const SND_APPLICATION: u32 = 128;
pub const SND_SENTRY: u32 = 524288;
pub const SND_RING: u32 = 1048576;
pub const SND_SYSTEM: u32 = 2097152;
pub const SND_ALIAS_START: u32 = 0;
pub const WAVERR_BADFORMAT: u32 = 32;
pub const WAVERR_STILLPLAYING: u32 = 33;
pub const WAVERR_UNPREPARED: u32 = 34;
pub const WAVERR_SYNC: u32 = 35;
pub const WAVERR_LASTERROR: u32 = 35;
pub const WOM_OPEN: u32 = 955;
pub const WOM_CLOSE: u32 = 956;
pub const WOM_DONE: u32 = 957;
pub const WIM_OPEN: u32 = 958;
pub const WIM_CLOSE: u32 = 959;
pub const WIM_DATA: u32 = 960;
pub const WAVE_FORMAT_QUERY: u32 = 1;
pub const WAVE_ALLOWSYNC: u32 = 2;
pub const WAVE_MAPPED: u32 = 4;
pub const WAVE_FORMAT_DIRECT: u32 = 8;
pub const WAVE_FORMAT_DIRECT_QUERY: u32 = 9;
pub const WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE: u32 = 16;
pub const WHDR_DONE: u32 = 1;
pub const WHDR_PREPARED: u32 = 2;
pub const WHDR_BEGINLOOP: u32 = 4;
pub const WHDR_ENDLOOP: u32 = 8;
pub const WHDR_INQUEUE: u32 = 16;
pub const WAVECAPS_PITCH: u32 = 1;
pub const WAVECAPS_PLAYBACKRATE: u32 = 2;
pub const WAVECAPS_VOLUME: u32 = 4;
pub const WAVECAPS_LRVOLUME: u32 = 8;
pub const WAVECAPS_SYNC: u32 = 16;
pub const WAVECAPS_SAMPLEACCURATE: u32 = 32;
pub const WAVE_INVALIDFORMAT: u32 = 0;
pub const WAVE_FORMAT_1M08: u32 = 1;
pub const WAVE_FORMAT_1S08: u32 = 2;
pub const WAVE_FORMAT_1M16: u32 = 4;
pub const WAVE_FORMAT_1S16: u32 = 8;
pub const WAVE_FORMAT_2M08: u32 = 16;
pub const WAVE_FORMAT_2S08: u32 = 32;
pub const WAVE_FORMAT_2M16: u32 = 64;
pub const WAVE_FORMAT_2S16: u32 = 128;
pub const WAVE_FORMAT_4M08: u32 = 256;
pub const WAVE_FORMAT_4S08: u32 = 512;
pub const WAVE_FORMAT_4M16: u32 = 1024;
pub const WAVE_FORMAT_4S16: u32 = 2048;
pub const WAVE_FORMAT_44M08: u32 = 256;
pub const WAVE_FORMAT_44S08: u32 = 512;
pub const WAVE_FORMAT_44M16: u32 = 1024;
pub const WAVE_FORMAT_44S16: u32 = 2048;
pub const WAVE_FORMAT_48M08: u32 = 4096;
pub const WAVE_FORMAT_48S08: u32 = 8192;
pub const WAVE_FORMAT_48M16: u32 = 16384;
pub const WAVE_FORMAT_48S16: u32 = 32768;
pub const WAVE_FORMAT_96M08: u32 = 65536;
pub const WAVE_FORMAT_96S08: u32 = 131072;
pub const WAVE_FORMAT_96M16: u32 = 262144;
pub const WAVE_FORMAT_96S16: u32 = 524288;
pub const WAVE_FORMAT_PCM: u32 = 1;
pub const MIDIERR_UNPREPARED: u32 = 64;
pub const MIDIERR_STILLPLAYING: u32 = 65;
pub const MIDIERR_NOMAP: u32 = 66;
pub const MIDIERR_NOTREADY: u32 = 67;
pub const MIDIERR_NODEVICE: u32 = 68;
pub const MIDIERR_INVALIDSETUP: u32 = 69;
pub const MIDIERR_BADOPENMODE: u32 = 70;
pub const MIDIERR_DONT_CONTINUE: u32 = 71;
pub const MIDIERR_LASTERROR: u32 = 71;
pub const MIDIPATCHSIZE: u32 = 128;
pub const MIM_OPEN: u32 = 961;
pub const MIM_CLOSE: u32 = 962;
pub const MIM_DATA: u32 = 963;
pub const MIM_LONGDATA: u32 = 964;
pub const MIM_ERROR: u32 = 965;
pub const MIM_LONGERROR: u32 = 966;
pub const MOM_OPEN: u32 = 967;
pub const MOM_CLOSE: u32 = 968;
pub const MOM_DONE: u32 = 969;
pub const MIM_MOREDATA: u32 = 972;
pub const MOM_POSITIONCB: u32 = 970;
pub const MIDI_IO_STATUS: u32 = 32;
pub const MIDI_CACHE_ALL: u32 = 1;
pub const MIDI_CACHE_BESTFIT: u32 = 2;
pub const MIDI_CACHE_QUERY: u32 = 3;
pub const MIDI_UNCACHE: u32 = 4;
pub const MOD_MIDIPORT: u32 = 1;
pub const MOD_SYNTH: u32 = 2;
pub const MOD_SQSYNTH: u32 = 3;
pub const MOD_FMSYNTH: u32 = 4;
pub const MOD_MAPPER: u32 = 5;
pub const MOD_WAVETABLE: u32 = 6;
pub const MOD_SWSYNTH: u32 = 7;
pub const MIDICAPS_VOLUME: u32 = 1;
pub const MIDICAPS_LRVOLUME: u32 = 2;
pub const MIDICAPS_CACHE: u32 = 4;
pub const MIDICAPS_STREAM: u32 = 8;
pub const MHDR_DONE: u32 = 1;
pub const MHDR_PREPARED: u32 = 2;
pub const MHDR_INQUEUE: u32 = 4;
pub const MHDR_ISSTRM: u32 = 8;
pub const MEVT_F_SHORT: u32 = 0;
pub const MEVT_F_LONG: u32 = 2147483648;
pub const MEVT_F_CALLBACK: u32 = 1073741824;
pub const MIDISTRM_ERROR: i32 = -2;
pub const MIDIPROP_SET: u32 = 2147483648;
pub const MIDIPROP_GET: u32 = 1073741824;
pub const MIDIPROP_TIMEDIV: u32 = 1;
pub const MIDIPROP_TEMPO: u32 = 2;
pub const AUXCAPS_CDAUDIO: u32 = 1;
pub const AUXCAPS_AUXIN: u32 = 2;
pub const AUXCAPS_VOLUME: u32 = 1;
pub const AUXCAPS_LRVOLUME: u32 = 2;
pub const MIXER_SHORT_NAME_CHARS: u32 = 16;
pub const MIXER_LONG_NAME_CHARS: u32 = 64;
pub const MIXERR_INVALLINE: u32 = 1024;
pub const MIXERR_INVALCONTROL: u32 = 1025;
pub const MIXERR_INVALVALUE: u32 = 1026;
pub const MIXERR_LASTERROR: u32 = 1026;
pub const MIXER_OBJECTF_HANDLE: u32 = 2147483648;
pub const MIXER_OBJECTF_MIXER: u32 = 0;
pub const MIXER_OBJECTF_HMIXER: u32 = 2147483648;
pub const MIXER_OBJECTF_WAVEOUT: u32 = 268435456;
pub const MIXER_OBJECTF_HWAVEOUT: u32 = 2415919104;
pub const MIXER_OBJECTF_WAVEIN: u32 = 536870912;
pub const MIXER_OBJECTF_HWAVEIN: u32 = 2684354560;
pub const MIXER_OBJECTF_MIDIOUT: u32 = 805306368;
pub const MIXER_OBJECTF_HMIDIOUT: u32 = 2952790016;
pub const MIXER_OBJECTF_MIDIIN: u32 = 1073741824;
pub const MIXER_OBJECTF_HMIDIIN: u32 = 3221225472;
pub const MIXER_OBJECTF_AUX: u32 = 1342177280;
pub const MIXERLINE_LINEF_ACTIVE: u32 = 1;
pub const MIXERLINE_LINEF_DISCONNECTED: u32 = 32768;
pub const MIXERLINE_LINEF_SOURCE: u32 = 2147483648;
pub const MIXERLINE_COMPONENTTYPE_DST_FIRST: u32 = 0;
pub const MIXERLINE_COMPONENTTYPE_DST_UNDEFINED: u32 = 0;
pub const MIXERLINE_COMPONENTTYPE_DST_DIGITAL: u32 = 1;
pub const MIXERLINE_COMPONENTTYPE_DST_LINE: u32 = 2;
pub const MIXERLINE_COMPONENTTYPE_DST_MONITOR: u32 = 3;
pub const MIXERLINE_COMPONENTTYPE_DST_SPEAKERS: u32 = 4;
pub const MIXERLINE_COMPONENTTYPE_DST_HEADPHONES: u32 = 5;
pub const MIXERLINE_COMPONENTTYPE_DST_TELEPHONE: u32 = 6;
pub const MIXERLINE_COMPONENTTYPE_DST_WAVEIN: u32 = 7;
pub const MIXERLINE_COMPONENTTYPE_DST_VOICEIN: u32 = 8;
pub const MIXERLINE_COMPONENTTYPE_DST_LAST: u32 = 8;
pub const MIXERLINE_COMPONENTTYPE_SRC_FIRST: u32 = 4096;
pub const MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED: u32 = 4096;
pub const MIXERLINE_COMPONENTTYPE_SRC_DIGITAL: u32 = 4097;
pub const MIXERLINE_COMPONENTTYPE_SRC_LINE: u32 = 4098;
pub const MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE: u32 = 4099;
pub const MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER: u32 = 4100;
pub const MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC: u32 = 4101;
pub const MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE: u32 = 4102;
pub const MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER: u32 = 4103;
pub const MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT: u32 = 4104;
pub const MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY: u32 = 4105;
pub const MIXERLINE_COMPONENTTYPE_SRC_ANALOG: u32 = 4106;
pub const MIXERLINE_COMPONENTTYPE_SRC_LAST: u32 = 4106;
pub const MIXERLINE_TARGETTYPE_UNDEFINED: u32 = 0;
pub const MIXERLINE_TARGETTYPE_WAVEOUT: u32 = 1;
pub const MIXERLINE_TARGETTYPE_WAVEIN: u32 = 2;
pub const MIXERLINE_TARGETTYPE_MIDIOUT: u32 = 3;
pub const MIXERLINE_TARGETTYPE_MIDIIN: u32 = 4;
pub const MIXERLINE_TARGETTYPE_AUX: u32 = 5;
pub const MIXER_GETLINEINFOF_DESTINATION: u32 = 0;
pub const MIXER_GETLINEINFOF_SOURCE: u32 = 1;
pub const MIXER_GETLINEINFOF_LINEID: u32 = 2;
pub const MIXER_GETLINEINFOF_COMPONENTTYPE: u32 = 3;
pub const MIXER_GETLINEINFOF_TARGETTYPE: u32 = 4;
pub const MIXER_GETLINEINFOF_QUERYMASK: u32 = 15;
pub const MIXERCONTROL_CONTROLF_UNIFORM: u32 = 1;
pub const MIXERCONTROL_CONTROLF_MULTIPLE: u32 = 2;
pub const MIXERCONTROL_CONTROLF_DISABLED: u32 = 2147483648;
pub const MIXERCONTROL_CT_CLASS_MASK: u32 = 4026531840;
pub const MIXERCONTROL_CT_CLASS_CUSTOM: u32 = 0;
pub const MIXERCONTROL_CT_CLASS_METER: u32 = 268435456;
pub const MIXERCONTROL_CT_CLASS_SWITCH: u32 = 536870912;
pub const MIXERCONTROL_CT_CLASS_NUMBER: u32 = 805306368;
pub const MIXERCONTROL_CT_CLASS_SLIDER: u32 = 1073741824;
pub const MIXERCONTROL_CT_CLASS_FADER: u32 = 1342177280;
pub const MIXERCONTROL_CT_CLASS_TIME: u32 = 1610612736;
pub const MIXERCONTROL_CT_CLASS_LIST: u32 = 1879048192;
pub const MIXERCONTROL_CT_SUBCLASS_MASK: u32 = 251658240;
pub const MIXERCONTROL_CT_SC_SWITCH_BOOLEAN: u32 = 0;
pub const MIXERCONTROL_CT_SC_SWITCH_BUTTON: u32 = 16777216;
pub const MIXERCONTROL_CT_SC_METER_POLLED: u32 = 0;
pub const MIXERCONTROL_CT_SC_TIME_MICROSECS: u32 = 0;
pub const MIXERCONTROL_CT_SC_TIME_MILLISECS: u32 = 16777216;
pub const MIXERCONTROL_CT_SC_LIST_SINGLE: u32 = 0;
pub const MIXERCONTROL_CT_SC_LIST_MULTIPLE: u32 = 16777216;
pub const MIXERCONTROL_CT_UNITS_MASK: u32 = 16711680;
pub const MIXERCONTROL_CT_UNITS_CUSTOM: u32 = 0;
pub const MIXERCONTROL_CT_UNITS_BOOLEAN: u32 = 65536;
pub const MIXERCONTROL_CT_UNITS_SIGNED: u32 = 131072;
pub const MIXERCONTROL_CT_UNITS_UNSIGNED: u32 = 196608;
pub const MIXERCONTROL_CT_UNITS_DECIBELS: u32 = 262144;
pub const MIXERCONTROL_CT_UNITS_PERCENT: u32 = 327680;
pub const MIXERCONTROL_CONTROLTYPE_CUSTOM: u32 = 0;
pub const MIXERCONTROL_CONTROLTYPE_BOOLEANMETER: u32 = 268500992;
pub const MIXERCONTROL_CONTROLTYPE_SIGNEDMETER: u32 = 268566528;
pub const MIXERCONTROL_CONTROLTYPE_PEAKMETER: u32 = 268566529;
pub const MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER: u32 = 268632064;
pub const MIXERCONTROL_CONTROLTYPE_BOOLEAN: u32 = 536936448;
pub const MIXERCONTROL_CONTROLTYPE_ONOFF: u32 = 536936449;
pub const MIXERCONTROL_CONTROLTYPE_MUTE: u32 = 536936450;
pub const MIXERCONTROL_CONTROLTYPE_MONO: u32 = 536936451;
pub const MIXERCONTROL_CONTROLTYPE_LOUDNESS: u32 = 536936452;
pub const MIXERCONTROL_CONTROLTYPE_STEREOENH: u32 = 536936453;
pub const MIXERCONTROL_CONTROLTYPE_BASS_BOOST: u32 = 536945271;
pub const MIXERCONTROL_CONTROLTYPE_BUTTON: u32 = 553713664;
pub const MIXERCONTROL_CONTROLTYPE_DECIBELS: u32 = 805568512;
pub const MIXERCONTROL_CONTROLTYPE_SIGNED: u32 = 805437440;
pub const MIXERCONTROL_CONTROLTYPE_UNSIGNED: u32 = 805502976;
pub const MIXERCONTROL_CONTROLTYPE_PERCENT: u32 = 805634048;
pub const MIXERCONTROL_CONTROLTYPE_SLIDER: u32 = 1073872896;
pub const MIXERCONTROL_CONTROLTYPE_PAN: u32 = 1073872897;
pub const MIXERCONTROL_CONTROLTYPE_QSOUNDPAN: u32 = 1073872898;
pub const MIXERCONTROL_CONTROLTYPE_FADER: u32 = 1342373888;
pub const MIXERCONTROL_CONTROLTYPE_VOLUME: u32 = 1342373889;
pub const MIXERCONTROL_CONTROLTYPE_BASS: u32 = 1342373890;
pub const MIXERCONTROL_CONTROLTYPE_TREBLE: u32 = 1342373891;
pub const MIXERCONTROL_CONTROLTYPE_EQUALIZER: u32 = 1342373892;
pub const MIXERCONTROL_CONTROLTYPE_SINGLESELECT: u32 = 1879113728;
pub const MIXERCONTROL_CONTROLTYPE_MUX: u32 = 1879113729;
pub const MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT: u32 = 1895890944;
pub const MIXERCONTROL_CONTROLTYPE_MIXER: u32 = 1895890945;
pub const MIXERCONTROL_CONTROLTYPE_MICROTIME: u32 = 1610809344;
pub const MIXERCONTROL_CONTROLTYPE_MILLITIME: u32 = 1627586560;
pub const MIXER_GETLINECONTROLSF_ALL: u32 = 0;
pub const MIXER_GETLINECONTROLSF_ONEBYID: u32 = 1;
pub const MIXER_GETLINECONTROLSF_ONEBYTYPE: u32 = 2;
pub const MIXER_GETLINECONTROLSF_QUERYMASK: u32 = 15;
pub const MIXER_GETCONTROLDETAILSF_VALUE: u32 = 0;
pub const MIXER_GETCONTROLDETAILSF_LISTTEXT: u32 = 1;
pub const MIXER_GETCONTROLDETAILSF_QUERYMASK: u32 = 15;
pub const MIXER_SETCONTROLDETAILSF_VALUE: u32 = 0;
pub const MIXER_SETCONTROLDETAILSF_CUSTOM: u32 = 1;
pub const MIXER_SETCONTROLDETAILSF_QUERYMASK: u32 = 15;
pub const TIMERR_NOERROR: u32 = 0;
pub const TIMERR_NOCANDO: u32 = 97;
pub const TIMERR_STRUCT: u32 = 129;
pub const JOYERR_NOERROR: u32 = 0;
pub const JOYERR_PARMS: u32 = 165;
pub const JOYERR_NOCANDO: u32 = 166;
pub const JOYERR_UNPLUGGED: u32 = 167;
pub const JOY_BUTTON1: u32 = 1;
pub const JOY_BUTTON2: u32 = 2;
pub const JOY_BUTTON3: u32 = 4;
pub const JOY_BUTTON4: u32 = 8;
pub const JOY_BUTTON1CHG: u32 = 256;
pub const JOY_BUTTON2CHG: u32 = 512;
pub const JOY_BUTTON3CHG: u32 = 1024;
pub const JOY_BUTTON4CHG: u32 = 2048;
pub const JOY_BUTTON5: u32 = 16;
pub const JOY_BUTTON6: u32 = 32;
pub const JOY_BUTTON7: u32 = 64;
pub const JOY_BUTTON8: u32 = 128;
pub const JOY_BUTTON9: u32 = 256;
pub const JOY_BUTTON10: u32 = 512;
pub const JOY_BUTTON11: u32 = 1024;
pub const JOY_BUTTON12: u32 = 2048;
pub const JOY_BUTTON13: u32 = 4096;
pub const JOY_BUTTON14: u32 = 8192;
pub const JOY_BUTTON15: u32 = 16384;
pub const JOY_BUTTON16: u32 = 32768;
pub const JOY_BUTTON17: u32 = 65536;
pub const JOY_BUTTON18: u32 = 131072;
pub const JOY_BUTTON19: u32 = 262144;
pub const JOY_BUTTON20: u32 = 524288;
pub const JOY_BUTTON21: u32 = 1048576;
pub const JOY_BUTTON22: u32 = 2097152;
pub const JOY_BUTTON23: u32 = 4194304;
pub const JOY_BUTTON24: u32 = 8388608;
pub const JOY_BUTTON25: u32 = 16777216;
pub const JOY_BUTTON26: u32 = 33554432;
pub const JOY_BUTTON27: u32 = 67108864;
pub const JOY_BUTTON28: u32 = 134217728;
pub const JOY_BUTTON29: u32 = 268435456;
pub const JOY_BUTTON30: u32 = 536870912;
pub const JOY_BUTTON31: u32 = 1073741824;
pub const JOY_BUTTON32: u32 = 2147483648;
pub const JOY_POVFORWARD: u32 = 0;
pub const JOY_POVRIGHT: u32 = 9000;
pub const JOY_POVBACKWARD: u32 = 18000;
pub const JOY_POVLEFT: u32 = 27000;
pub const JOY_RETURNX: u32 = 1;
pub const JOY_RETURNY: u32 = 2;
pub const JOY_RETURNZ: u32 = 4;
pub const JOY_RETURNR: u32 = 8;
pub const JOY_RETURNU: u32 = 16;
pub const JOY_RETURNV: u32 = 32;
pub const JOY_RETURNPOV: u32 = 64;
pub const JOY_RETURNBUTTONS: u32 = 128;
pub const JOY_RETURNRAWDATA: u32 = 256;
pub const JOY_RETURNPOVCTS: u32 = 512;
pub const JOY_RETURNCENTERED: u32 = 1024;
pub const JOY_USEDEADZONE: u32 = 2048;
pub const JOY_RETURNALL: u32 = 255;
pub const JOY_CAL_READALWAYS: u32 = 65536;
pub const JOY_CAL_READXYONLY: u32 = 131072;
pub const JOY_CAL_READ3: u32 = 262144;
pub const JOY_CAL_READ4: u32 = 524288;
pub const JOY_CAL_READXONLY: u32 = 1048576;
pub const JOY_CAL_READYONLY: u32 = 2097152;
pub const JOY_CAL_READ5: u32 = 4194304;
pub const JOY_CAL_READ6: u32 = 8388608;
pub const JOY_CAL_READZONLY: u32 = 16777216;
pub const JOY_CAL_READRONLY: u32 = 33554432;
pub const JOY_CAL_READUONLY: u32 = 67108864;
pub const JOY_CAL_READVONLY: u32 = 134217728;
pub const JOYSTICKID1: u32 = 0;
pub const JOYSTICKID2: u32 = 1;
pub const JOYCAPS_HASZ: u32 = 1;
pub const JOYCAPS_HASR: u32 = 2;
pub const JOYCAPS_HASU: u32 = 4;
pub const JOYCAPS_HASV: u32 = 8;
pub const JOYCAPS_HASPOV: u32 = 16;
pub const JOYCAPS_POV4DIR: u32 = 32;
pub const JOYCAPS_POVCTS: u32 = 64;
pub const NEWTRANSPARENT: u32 = 3;
pub const QUERYROPSUPPORT: u32 = 40;
pub const SELECTDIB: u32 = 41;
pub const NCBNAMSZ: u32 = 16;
pub const MAX_LANA: u32 = 254;
pub const NAME_FLAGS_MASK: u32 = 135;
pub const GROUP_NAME: u32 = 128;
pub const UNIQUE_NAME: u32 = 0;
pub const REGISTERING: u32 = 0;
pub const REGISTERED: u32 = 4;
pub const DEREGISTERED: u32 = 5;
pub const DUPLICATE: u32 = 6;
pub const DUPLICATE_DEREG: u32 = 7;
pub const LISTEN_OUTSTANDING: u32 = 1;
pub const CALL_PENDING: u32 = 2;
pub const SESSION_ESTABLISHED: u32 = 3;
pub const HANGUP_PENDING: u32 = 4;
pub const HANGUP_COMPLETE: u32 = 5;
pub const SESSION_ABORTED: u32 = 6;
pub const ALL_TRANSPORTS: &'static [u8; 5usize] = b"M\0\0\0\0";
pub const MS_NBF: &'static [u8; 5usize] = b"MNBF\0";
pub const NCBCALL: u32 = 16;
pub const NCBLISTEN: u32 = 17;
pub const NCBHANGUP: u32 = 18;
pub const NCBSEND: u32 = 20;
pub const NCBRECV: u32 = 21;
pub const NCBRECVANY: u32 = 22;
pub const NCBCHAINSEND: u32 = 23;
pub const NCBDGSEND: u32 = 32;
pub const NCBDGRECV: u32 = 33;
pub const NCBDGSENDBC: u32 = 34;
pub const NCBDGRECVBC: u32 = 35;
pub const NCBADDNAME: u32 = 48;
pub const NCBDELNAME: u32 = 49;
pub const NCBRESET: u32 = 50;
pub const NCBASTAT: u32 = 51;
pub const NCBSSTAT: u32 = 52;
pub const NCBCANCEL: u32 = 53;
pub const NCBADDGRNAME: u32 = 54;
pub const NCBENUM: u32 = 55;
pub const NCBUNLINK: u32 = 112;
pub const NCBSENDNA: u32 = 113;
pub const NCBCHAINSENDNA: u32 = 114;
pub const NCBLANSTALERT: u32 = 115;
pub const NCBACTION: u32 = 119;
pub const NCBFINDNAME: u32 = 120;
pub const NCBTRACE: u32 = 121;
pub const ASYNCH: u32 = 128;
pub const NRC_GOODRET: u32 = 0;
pub const NRC_BUFLEN: u32 = 1;
pub const NRC_ILLCMD: u32 = 3;
pub const NRC_CMDTMO: u32 = 5;
pub const NRC_INCOMP: u32 = 6;
pub const NRC_BADDR: u32 = 7;
pub const NRC_SNUMOUT: u32 = 8;
pub const NRC_NORES: u32 = 9;
pub const NRC_SCLOSED: u32 = 10;
pub const NRC_CMDCAN: u32 = 11;
pub const NRC_DUPNAME: u32 = 13;
pub const NRC_NAMTFUL: u32 = 14;
pub const NRC_ACTSES: u32 = 15;
pub const NRC_LOCTFUL: u32 = 17;
pub const NRC_REMTFUL: u32 = 18;
pub const NRC_ILLNN: u32 = 19;
pub const NRC_NOCALL: u32 = 20;
pub const NRC_NOWILD: u32 = 21;
pub const NRC_INUSE: u32 = 22;
pub const NRC_NAMERR: u32 = 23;
pub const NRC_SABORT: u32 = 24;
pub const NRC_NAMCONF: u32 = 25;
pub const NRC_IFBUSY: u32 = 33;
pub const NRC_TOOMANY: u32 = 34;
pub const NRC_BRIDGE: u32 = 35;
pub const NRC_CANOCCR: u32 = 36;
pub const NRC_CANCEL: u32 = 38;
pub const NRC_DUPENV: u32 = 48;
pub const NRC_ENVNOTDEF: u32 = 52;
pub const NRC_OSRESNOTAV: u32 = 53;
pub const NRC_MAXAPPS: u32 = 54;
pub const NRC_NOSAPS: u32 = 55;
pub const NRC_NORESOURCES: u32 = 56;
pub const NRC_INVADDRESS: u32 = 57;
pub const NRC_INVDDID: u32 = 59;
pub const NRC_LOCKFAIL: u32 = 60;
pub const NRC_OPENERR: u32 = 63;
pub const NRC_SYSTEM: u32 = 64;
pub const NRC_PENDING: u32 = 255;
pub const RPC_C_BINDING_INFINITE_TIMEOUT: u32 = 10;
pub const RPC_C_BINDING_MIN_TIMEOUT: u32 = 0;
pub const RPC_C_BINDING_DEFAULT_TIMEOUT: u32 = 5;
pub const RPC_C_BINDING_MAX_TIMEOUT: u32 = 9;
pub const RPC_C_CANCEL_INFINITE_TIMEOUT: i32 = -1;
pub const RPC_C_LISTEN_MAX_CALLS_DEFAULT: u32 = 1234;
pub const RPC_C_PROTSEQ_MAX_REQS_DEFAULT: u32 = 10;
pub const RPC_C_BIND_TO_ALL_NICS: u32 = 1;
pub const RPC_C_USE_INTERNET_PORT: u32 = 1;
pub const RPC_C_USE_INTRANET_PORT: u32 = 2;
pub const RPC_C_DONT_FAIL: u32 = 4;
pub const RPC_C_RPCHTTP_USE_LOAD_BALANCE: u32 = 8;
pub const RPC_C_OPT_BINDING_NONCAUSAL: u32 = 9;
pub const RPC_C_OPT_SECURITY_CALLBACK: u32 = 10;
pub const RPC_C_OPT_UNIQUE_BINDING: u32 = 11;
pub const RPC_C_OPT_TRANS_SEND_BUFFER_SIZE: u32 = 5;
pub const RPC_C_OPT_CALL_TIMEOUT: u32 = 12;
pub const RPC_C_OPT_DONT_LINGER: u32 = 13;
pub const RPC_C_OPT_TRUST_PEER: u32 = 14;
pub const RPC_C_OPT_ASYNC_BLOCK: u32 = 15;
pub const RPC_C_OPT_OPTIMIZE_TIME: u32 = 16;
pub const RPC_C_OPT_MAX_OPTIONS: u32 = 17;
pub const RPC_C_FULL_CERT_CHAIN: u32 = 1;
pub const RPC_C_STATS_CALLS_IN: u32 = 0;
pub const RPC_C_STATS_CALLS_OUT: u32 = 1;
pub const RPC_C_STATS_PKTS_IN: u32 = 2;
pub const RPC_C_STATS_PKTS_OUT: u32 = 3;
pub const RPC_C_AUTHN_LEVEL_DEFAULT: u32 = 0;
pub const RPC_C_AUTHN_LEVEL_NONE: u32 = 1;
pub const RPC_C_AUTHN_LEVEL_CONNECT: u32 = 2;
pub const RPC_C_AUTHN_LEVEL_CALL: u32 = 3;
pub const RPC_C_AUTHN_LEVEL_PKT: u32 = 4;
pub const RPC_C_AUTHN_LEVEL_PKT_INTEGRITY: u32 = 5;
pub const RPC_C_AUTHN_LEVEL_PKT_PRIVACY: u32 = 6;
pub const RPC_C_IMP_LEVEL_DEFAULT: u32 = 0;
pub const RPC_C_IMP_LEVEL_ANONYMOUS: u32 = 1;
pub const RPC_C_IMP_LEVEL_IDENTIFY: u32 = 2;
pub const RPC_C_IMP_LEVEL_IMPERSONATE: u32 = 3;
pub const RPC_C_IMP_LEVEL_DELEGATE: u32 = 4;
pub const RPC_C_QOS_IDENTITY_STATIC: u32 = 0;
pub const RPC_C_QOS_IDENTITY_DYNAMIC: u32 = 1;
pub const RPC_C_QOS_CAPABILITIES_DEFAULT: u32 = 0;
pub const RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH: u32 = 1;
pub const RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC: u32 = 2;
pub const RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY: u32 = 4;
pub const RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE: u32 = 8;
pub const RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT: u32 = 16;
pub const RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY: u32 = 32;
pub const RPC_C_PROTECT_LEVEL_DEFAULT: u32 = 0;
pub const RPC_C_PROTECT_LEVEL_NONE: u32 = 1;
pub const RPC_C_PROTECT_LEVEL_CONNECT: u32 = 2;
pub const RPC_C_PROTECT_LEVEL_CALL: u32 = 3;
pub const RPC_C_PROTECT_LEVEL_PKT: u32 = 4;
pub const RPC_C_PROTECT_LEVEL_PKT_INTEGRITY: u32 = 5;
pub const RPC_C_PROTECT_LEVEL_PKT_PRIVACY: u32 = 6;
pub const RPC_C_AUTHN_NONE: u32 = 0;
pub const RPC_C_AUTHN_DCE_PRIVATE: u32 = 1;
pub const RPC_C_AUTHN_DCE_PUBLIC: u32 = 2;
pub const RPC_C_AUTHN_DEC_PUBLIC: u32 = 4;
pub const RPC_C_AUTHN_GSS_NEGOTIATE: u32 = 9;
pub const RPC_C_AUTHN_WINNT: u32 = 10;
pub const RPC_C_AUTHN_GSS_SCHANNEL: u32 = 14;
pub const RPC_C_AUTHN_GSS_KERBEROS: u32 = 16;
pub const RPC_C_AUTHN_DPA: u32 = 17;
pub const RPC_C_AUTHN_MSN: u32 = 18;
pub const RPC_C_AUTHN_DIGEST: u32 = 21;
pub const RPC_C_AUTHN_KERNEL: u32 = 20;
pub const RPC_C_AUTHN_NEGO_EXTENDER: u32 = 30;
pub const RPC_C_AUTHN_PKU2U: u32 = 31;
pub const RPC_C_AUTHN_LIVE_SSP: u32 = 32;
pub const RPC_C_AUTHN_LIVEXP_SSP: u32 = 35;
pub const RPC_C_AUTHN_CLOUD_AP: u32 = 36;
pub const RPC_C_AUTHN_MSONLINE: u32 = 82;
pub const RPC_C_AUTHN_MQ: u32 = 100;
pub const RPC_C_AUTHN_DEFAULT: u32 = 4294967295;
pub const RPC_C_SECURITY_QOS_VERSION: u32 = 1;
pub const RPC_C_SECURITY_QOS_VERSION_1: u32 = 1;
pub const SEC_WINNT_AUTH_IDENTITY_ANSI: u32 = 1;
pub const SEC_WINNT_AUTH_IDENTITY_UNICODE: u32 = 2;
pub const RPC_C_SECURITY_QOS_VERSION_2: u32 = 2;
pub const RPC_C_AUTHN_INFO_TYPE_HTTP: u32 = 1;
pub const RPC_C_HTTP_AUTHN_TARGET_SERVER: u32 = 1;
pub const RPC_C_HTTP_AUTHN_TARGET_PROXY: u32 = 2;
pub const RPC_C_HTTP_AUTHN_SCHEME_BASIC: u32 = 1;
pub const RPC_C_HTTP_AUTHN_SCHEME_NTLM: u32 = 2;
pub const RPC_C_HTTP_AUTHN_SCHEME_PASSPORT: u32 = 4;
pub const RPC_C_HTTP_AUTHN_SCHEME_DIGEST: u32 = 8;
pub const RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE: u32 = 16;
pub const RPC_C_HTTP_AUTHN_SCHEME_CERT: u32 = 65536;
pub const RPC_C_HTTP_FLAG_USE_SSL: u32 = 1;
pub const RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME: u32 = 2;
pub const RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID: u32 = 8;
pub const RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK: u32 = 16;
pub const RPC_C_SECURITY_QOS_VERSION_3: u32 = 3;
pub const RPC_C_SECURITY_QOS_VERSION_4: u32 = 4;
pub const RPC_C_SECURITY_QOS_VERSION_5: u32 = 5;
pub const RPC_PROTSEQ_TCP: u32 = 1;
pub const RPC_PROTSEQ_NMP: u32 = 2;
pub const RPC_PROTSEQ_LRPC: u32 = 3;
pub const RPC_PROTSEQ_HTTP: u32 = 4;
pub const RPC_BHT_OBJECT_UUID_VALID: u32 = 1;
pub const RPC_BHO_NONCAUSAL: u32 = 1;
pub const RPC_BHO_DONTLINGER: u32 = 2;
pub const RPC_BHO_EXCLUSIVE_AND_GUARANTEED: u32 = 4;
pub const RPC_C_AUTHZ_NONE: u32 = 0;
pub const RPC_C_AUTHZ_NAME: u32 = 1;
pub const RPC_C_AUTHZ_DCE: u32 = 2;
pub const RPC_C_AUTHZ_DEFAULT: u32 = 4294967295;
pub const DCE_C_ERROR_STRING_LEN: u32 = 256;
pub const RPC_C_EP_ALL_ELTS: u32 = 0;
pub const RPC_C_EP_MATCH_BY_IF: u32 = 1;
pub const RPC_C_EP_MATCH_BY_OBJ: u32 = 2;
pub const RPC_C_EP_MATCH_BY_BOTH: u32 = 3;
pub const RPC_C_VERS_ALL: u32 = 1;
pub const RPC_C_VERS_COMPATIBLE: u32 = 2;
pub const RPC_C_VERS_EXACT: u32 = 3;
pub const RPC_C_VERS_MAJOR_ONLY: u32 = 4;
pub const RPC_C_VERS_UPTO: u32 = 5;
pub const RPC_C_MGMT_INQ_IF_IDS: u32 = 0;
pub const RPC_C_MGMT_INQ_PRINC_NAME: u32 = 1;
pub const RPC_C_MGMT_INQ_STATS: u32 = 2;
pub const RPC_C_MGMT_IS_SERVER_LISTEN: u32 = 3;
pub const RPC_C_MGMT_STOP_SERVER_LISTEN: u32 = 4;
pub const RPC_C_PARM_MAX_PACKET_LENGTH: u32 = 1;
pub const RPC_C_PARM_BUFFER_LENGTH: u32 = 2;
pub const RPC_IF_AUTOLISTEN: u32 = 1;
pub const RPC_IF_OLE: u32 = 2;
pub const RPC_IF_ALLOW_UNKNOWN_AUTHORITY: u32 = 4;
pub const RPC_IF_ALLOW_SECURE_ONLY: u32 = 8;
pub const RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH: u32 = 16;
pub const RPC_IF_ALLOW_LOCAL_ONLY: u32 = 32;
pub const RPC_IF_SEC_NO_CACHE: u32 = 64;
pub const RPC_IF_SEC_CACHE_PER_PROC: u32 = 128;
pub const RPC_IF_ASYNC_CALLBACK: u32 = 256;
pub const RPC_FW_IF_FLAG_DCOM: u32 = 1;
pub const RPC_CONTEXT_HANDLE_DEFAULT_FLAGS: u32 = 0;
pub const RPC_CONTEXT_HANDLE_FLAGS: u32 = 805306368;
pub const RPC_CONTEXT_HANDLE_SERIALIZE: u32 = 268435456;
pub const RPC_CONTEXT_HANDLE_DONT_SERIALIZE: u32 = 536870912;
pub const RPC_TYPE_STRICT_CONTEXT_HANDLE: u32 = 1073741824;
pub const RPC_NCA_FLAGS_DEFAULT: u32 = 0;
pub const RPC_NCA_FLAGS_IDEMPOTENT: u32 = 1;
pub const RPC_NCA_FLAGS_BROADCAST: u32 = 2;
pub const RPC_NCA_FLAGS_MAYBE: u32 = 4;
pub const RPCFLG_HAS_GUARANTEE: u32 = 16;
pub const RPCFLG_WINRT_REMOTE_ASYNC: u32 = 32;
pub const RPC_BUFFER_COMPLETE: u32 = 4096;
pub const RPC_BUFFER_PARTIAL: u32 = 8192;
pub const RPC_BUFFER_EXTRA: u32 = 16384;
pub const RPC_BUFFER_ASYNC: u32 = 32768;
pub const RPC_BUFFER_NONOTIFY: u32 = 65536;
pub const RPCFLG_MESSAGE: u32 = 16777216;
pub const RPCFLG_AUTO_COMPLETE: u32 = 134217728;
pub const RPCFLG_LOCAL_CALL: u32 = 268435456;
pub const RPCFLG_INPUT_SYNCHRONOUS: u32 = 536870912;
pub const RPCFLG_ASYNCHRONOUS: u32 = 1073741824;
pub const RPCFLG_NON_NDR: u32 = 2147483648;
pub const RPCFLG_HAS_MULTI_SYNTAXES: u32 = 33554432;
pub const RPCFLG_HAS_CALLBACK: u32 = 67108864;
pub const RPCFLG_ACCESSIBILITY_BIT1: u32 = 1048576;
pub const RPCFLG_ACCESSIBILITY_BIT2: u32 = 2097152;
pub const RPCFLG_ACCESS_LOCAL: u32 = 4194304;
pub const NDR_CUSTOM_OR_DEFAULT_ALLOCATOR: u32 = 268435456;
pub const NDR_DEFAULT_ALLOCATOR: u32 = 536870912;
pub const RPCFLG_NDR64_CONTAINS_ARM_LAYOUT: u32 = 67108864;
pub const RPCFLG_SENDER_WAITING_FOR_REPLY: u32 = 8388608;
pub const RPC_FLAGS_VALID_BIT: u32 = 32768;
pub const NT351_INTERFACE_SIZE: u32 = 64;
pub const RPC_INTERFACE_HAS_PIPES: u32 = 1;
pub const RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED: u32 = 1;
pub const RPC_SYSTEM_HANDLE_FREE_RETRIEVED: u32 = 2;
pub const RPC_SYSTEM_HANDLE_FREE_ALL: u32 = 3;
pub const RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE: u32 = 4;
pub const TRANSPORT_TYPE_CN: u32 = 1;
pub const TRANSPORT_TYPE_DG: u32 = 2;
pub const TRANSPORT_TYPE_LPC: u32 = 4;
pub const TRANSPORT_TYPE_WMSG: u32 = 8;
pub const RPC_P_ADDR_FORMAT_TCP_IPV4: u32 = 1;
pub const RPC_P_ADDR_FORMAT_TCP_IPV6: u32 = 2;
pub const RPC_C_OPT_SESSION_ID: u32 = 6;
pub const RPC_C_OPT_COOKIE_AUTH: u32 = 7;
pub const RPC_C_OPT_RESOURCE_TYPE_UUID: u32 = 8;
pub const RPC_PROXY_CONNECTION_TYPE_IN_PROXY: u32 = 0;
pub const RPC_PROXY_CONNECTION_TYPE_OUT_PROXY: u32 = 1;
pub const RPC_C_OPT_PRIVATE_SUPPRESS_WAKE: u32 = 1;
pub const RPC_C_OPT_PRIVATE_DO_NOT_DISTURB: u32 = 2;
pub const RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND: u32 = 3;
pub const RPC_C_NS_SYNTAX_DEFAULT: u32 = 0;
pub const RPC_C_NS_SYNTAX_DCE: u32 = 3;
pub const RPC_C_PROFILE_DEFAULT_ELT: u32 = 0;
pub const RPC_C_PROFILE_ALL_ELT: u32 = 1;
pub const RPC_C_PROFILE_ALL_ELTS: u32 = 1;
pub const RPC_C_PROFILE_MATCH_BY_IF: u32 = 2;
pub const RPC_C_PROFILE_MATCH_BY_MBR: u32 = 3;
pub const RPC_C_PROFILE_MATCH_BY_BOTH: u32 = 4;
pub const RPC_C_NS_DEFAULT_EXP_AGE: i32 = -1;
pub const RPC_S_OK: u32 = 0;
pub const RPC_S_INVALID_ARG: u32 = 87;
pub const RPC_S_OUT_OF_MEMORY: u32 = 14;
pub const RPC_S_OUT_OF_THREADS: u32 = 164;
pub const RPC_S_INVALID_LEVEL: u32 = 87;
pub const RPC_S_BUFFER_TOO_SMALL: u32 = 122;
pub const RPC_S_INVALID_SECURITY_DESC: u32 = 1338;
pub const RPC_S_ACCESS_DENIED: u32 = 5;
pub const RPC_S_SERVER_OUT_OF_MEMORY: u32 = 1130;
pub const RPC_S_ASYNC_CALL_PENDING: u32 = 997;
pub const RPC_S_UNKNOWN_PRINCIPAL: u32 = 1332;
pub const RPC_S_TIMEOUT: u32 = 1460;
pub const RPC_S_NOT_ENOUGH_QUOTA: u32 = 1816;
pub const RPC_X_NO_MEMORY: u32 = 14;
pub const RPC_X_INVALID_BOUND: u32 = 1734;
pub const RPC_X_INVALID_TAG: u32 = 1733;
pub const RPC_X_ENUM_VALUE_TOO_LARGE: u32 = 1781;
pub const RPC_X_SS_CONTEXT_MISMATCH: u32 = 6;
pub const RPC_X_INVALID_BUFFER: u32 = 1784;
pub const RPC_X_PIPE_APP_MEMORY: u32 = 14;
pub const RPC_X_INVALID_PIPE_OPERATION: u32 = 1831;
pub const RPC_C_NOTIFY_ON_SEND_COMPLETE: u32 = 1;
pub const RPC_C_INFINITE_TIMEOUT: u32 = 4294967295;
pub const MaxNumberOfEEInfoParams: u32 = 4;
pub const RPC_EEINFO_VERSION: u32 = 1;
pub const EEInfoPreviousRecordsMissing: u32 = 1;
pub const EEInfoNextRecordsMissing: u32 = 2;
pub const EEInfoUseFileTime: u32 = 4;
pub const EEInfoGCCOM: u32 = 11;
pub const EEInfoGCFRS: u32 = 12;
pub const RPC_QUERY_SERVER_PRINCIPAL_NAME: u32 = 2;
pub const RPC_QUERY_CLIENT_PRINCIPAL_NAME: u32 = 4;
pub const RPC_QUERY_CALL_LOCAL_ADDRESS: u32 = 8;
pub const RPC_QUERY_CLIENT_PID: u32 = 16;
pub const RPC_QUERY_IS_CLIENT_LOCAL: u32 = 32;
pub const RPC_QUERY_NO_AUTH_REQUIRED: u32 = 64;
pub const RPC_CALL_ATTRIBUTES_VERSION: u32 = 3;
pub const RPC_QUERY_CLIENT_ID: u32 = 128;
pub const RPC_CALL_STATUS_CANCELLED: u32 = 1;
pub const RPC_CALL_STATUS_DISCONNECTED: u32 = 2;
pub const ABM_NEW: u32 = 0;
pub const ABM_REMOVE: u32 = 1;
pub const ABM_QUERYPOS: u32 = 2;
pub const ABM_SETPOS: u32 = 3;
pub const ABM_GETSTATE: u32 = 4;
pub const ABM_GETTASKBARPOS: u32 = 5;
pub const ABM_ACTIVATE: u32 = 6;
pub const ABM_GETAUTOHIDEBAR: u32 = 7;
pub const ABM_SETAUTOHIDEBAR: u32 = 8;
pub const ABM_WINDOWPOSCHANGED: u32 = 9;
pub const ABM_SETSTATE: u32 = 10;
pub const ABM_GETAUTOHIDEBAREX: u32 = 11;
pub const ABM_SETAUTOHIDEBAREX: u32 = 12;
pub const ABN_STATECHANGE: u32 = 0;
pub const ABN_POSCHANGED: u32 = 1;
pub const ABN_FULLSCREENAPP: u32 = 2;
pub const ABN_WINDOWARRANGE: u32 = 3;
pub const ABS_AUTOHIDE: u32 = 1;
pub const ABS_ALWAYSONTOP: u32 = 2;
pub const ABE_LEFT: u32 = 0;
pub const ABE_TOP: u32 = 1;
pub const ABE_RIGHT: u32 = 2;
pub const ABE_BOTTOM: u32 = 3;
pub const FO_MOVE: u32 = 1;
pub const FO_COPY: u32 = 2;
pub const FO_DELETE: u32 = 3;
pub const FO_RENAME: u32 = 4;
pub const FOF_MULTIDESTFILES: u32 = 1;
pub const FOF_CONFIRMMOUSE: u32 = 2;
pub const FOF_SILENT: u32 = 4;
pub const FOF_RENAMEONCOLLISION: u32 = 8;
pub const FOF_NOCONFIRMATION: u32 = 16;
pub const FOF_WANTMAPPINGHANDLE: u32 = 32;
pub const FOF_ALLOWUNDO: u32 = 64;
pub const FOF_FILESONLY: u32 = 128;
pub const FOF_SIMPLEPROGRESS: u32 = 256;
pub const FOF_NOCONFIRMMKDIR: u32 = 512;
pub const FOF_NOERRORUI: u32 = 1024;
pub const FOF_NOCOPYSECURITYATTRIBS: u32 = 2048;
pub const FOF_NORECURSION: u32 = 4096;
pub const FOF_NO_CONNECTED_ELEMENTS: u32 = 8192;
pub const FOF_WANTNUKEWARNING: u32 = 16384;
pub const FOF_NORECURSEREPARSE: u32 = 32768;
pub const FOF_NO_UI: u32 = 1556;
pub const PO_DELETE: u32 = 19;
pub const PO_RENAME: u32 = 20;
pub const PO_PORTCHANGE: u32 = 32;
pub const PO_REN_PORT: u32 = 52;
pub const SE_ERR_FNF: u32 = 2;
pub const SE_ERR_PNF: u32 = 3;
pub const SE_ERR_ACCESSDENIED: u32 = 5;
pub const SE_ERR_OOM: u32 = 8;
pub const SE_ERR_DLLNOTFOUND: u32 = 32;
pub const SE_ERR_SHARE: u32 = 26;
pub const SE_ERR_ASSOCINCOMPLETE: u32 = 27;
pub const SE_ERR_DDETIMEOUT: u32 = 28;
pub const SE_ERR_DDEFAIL: u32 = 29;
pub const SE_ERR_DDEBUSY: u32 = 30;
pub const SE_ERR_NOASSOC: u32 = 31;
pub const SEE_MASK_DEFAULT: u32 = 0;
pub const SEE_MASK_CLASSNAME: u32 = 1;
pub const SEE_MASK_CLASSKEY: u32 = 3;
pub const SEE_MASK_IDLIST: u32 = 4;
pub const SEE_MASK_INVOKEIDLIST: u32 = 12;
pub const SEE_MASK_HOTKEY: u32 = 32;
pub const SEE_MASK_NOCLOSEPROCESS: u32 = 64;
pub const SEE_MASK_CONNECTNETDRV: u32 = 128;
pub const SEE_MASK_NOASYNC: u32 = 256;
pub const SEE_MASK_FLAG_DDEWAIT: u32 = 256;
pub const SEE_MASK_DOENVSUBST: u32 = 512;
pub const SEE_MASK_FLAG_NO_UI: u32 = 1024;
pub const SEE_MASK_UNICODE: u32 = 16384;
pub const SEE_MASK_NO_CONSOLE: u32 = 32768;
pub const SEE_MASK_ASYNCOK: u32 = 1048576;
pub const SEE_MASK_HMONITOR: u32 = 2097152;
pub const SEE_MASK_NOZONECHECKS: u32 = 8388608;
pub const SEE_MASK_NOQUERYCLASSSTORE: u32 = 16777216;
pub const SEE_MASK_WAITFORINPUTIDLE: u32 = 33554432;
pub const SEE_MASK_FLAG_LOG_USAGE: u32 = 67108864;
pub const SEE_MASK_FLAG_HINST_IS_SITE: u32 = 134217728;
pub const SHERB_NOCONFIRMATION: u32 = 1;
pub const SHERB_NOPROGRESSUI: u32 = 2;
pub const SHERB_NOSOUND: u32 = 4;
pub const NIN_SELECT: u32 = 1024;
pub const NINF_KEY: u32 = 1;
pub const NIN_KEYSELECT: u32 = 1025;
pub const NIN_BALLOONSHOW: u32 = 1026;
pub const NIN_BALLOONHIDE: u32 = 1027;
pub const NIN_BALLOONTIMEOUT: u32 = 1028;
pub const NIN_BALLOONUSERCLICK: u32 = 1029;
pub const NIN_POPUPOPEN: u32 = 1030;
pub const NIN_POPUPCLOSE: u32 = 1031;
pub const NIM_ADD: u32 = 0;
pub const NIM_MODIFY: u32 = 1;
pub const NIM_DELETE: u32 = 2;
pub const NIM_SETFOCUS: u32 = 3;
pub const NIM_SETVERSION: u32 = 4;
pub const NOTIFYICON_VERSION: u32 = 3;
pub const NOTIFYICON_VERSION_4: u32 = 4;
pub const NIF_MESSAGE: u32 = 1;
pub const NIF_ICON: u32 = 2;
pub const NIF_TIP: u32 = 4;
pub const NIF_STATE: u32 = 8;
pub const NIF_INFO: u32 = 16;
pub const NIF_GUID: u32 = 32;
pub const NIF_REALTIME: u32 = 64;
pub const NIF_SHOWTIP: u32 = 128;
pub const NIS_HIDDEN: u32 = 1;
pub const NIS_SHAREDICON: u32 = 2;
pub const NIIF_NONE: u32 = 0;
pub const NIIF_INFO: u32 = 1;
pub const NIIF_WARNING: u32 = 2;
pub const NIIF_ERROR: u32 = 3;
pub const NIIF_USER: u32 = 4;
pub const NIIF_ICON_MASK: u32 = 15;
pub const NIIF_NOSOUND: u32 = 16;
pub const NIIF_LARGE_ICON: u32 = 32;
pub const NIIF_RESPECT_QUIET_TIME: u32 = 128;
pub const SHGFI_ICON: u32 = 256;
pub const SHGFI_DISPLAYNAME: u32 = 512;
pub const SHGFI_TYPENAME: u32 = 1024;
pub const SHGFI_ATTRIBUTES: u32 = 2048;
pub const SHGFI_ICONLOCATION: u32 = 4096;
pub const SHGFI_EXETYPE: u32 = 8192;
pub const SHGFI_SYSICONINDEX: u32 = 16384;
pub const SHGFI_LINKOVERLAY: u32 = 32768;
pub const SHGFI_SELECTED: u32 = 65536;
pub const SHGFI_ATTR_SPECIFIED: u32 = 131072;
pub const SHGFI_LARGEICON: u32 = 0;
pub const SHGFI_SMALLICON: u32 = 1;
pub const SHGFI_OPENICON: u32 = 2;
pub const SHGFI_SHELLICONSIZE: u32 = 4;
pub const SHGFI_PIDL: u32 = 8;
pub const SHGFI_USEFILEATTRIBUTES: u32 = 16;
pub const SHGFI_ADDOVERLAYS: u32 = 32;
pub const SHGFI_OVERLAYINDEX: u32 = 64;
pub const SHGSI_ICONLOCATION: u32 = 0;
pub const SHGSI_ICON: u32 = 256;
pub const SHGSI_SYSICONINDEX: u32 = 16384;
pub const SHGSI_LINKOVERLAY: u32 = 32768;
pub const SHGSI_SELECTED: u32 = 65536;
pub const SHGSI_LARGEICON: u32 = 0;
pub const SHGSI_SMALLICON: u32 = 1;
pub const SHGSI_SHELLICONSIZE: u32 = 4;
pub const SHGNLI_PIDL: u32 = 1;
pub const SHGNLI_PREFIXNAME: u32 = 2;
pub const SHGNLI_NOUNIQUE: u32 = 4;
pub const SHGNLI_NOLNK: u32 = 8;
pub const SHGNLI_NOLOCNAME: u32 = 16;
pub const SHGNLI_USEURLEXT: u32 = 32;
pub const PRINTACTION_OPEN: u32 = 0;
pub const PRINTACTION_PROPERTIES: u32 = 1;
pub const PRINTACTION_NETINSTALL: u32 = 2;
pub const PRINTACTION_NETINSTALLLINK: u32 = 3;
pub const PRINTACTION_TESTPAGE: u32 = 4;
pub const PRINTACTION_OPENNETPRN: u32 = 5;
pub const PRINTACTION_DOCUMENTDEFAULTS: u32 = 6;
pub const PRINTACTION_SERVERPROPERTIES: u32 = 7;
pub const PRINT_PROP_FORCE_NAME: u32 = 1;
pub const OFFLINE_STATUS_LOCAL: u32 = 1;
pub const OFFLINE_STATUS_REMOTE: u32 = 2;
pub const OFFLINE_STATUS_INCOMPLETE: u32 = 4;
pub const SHIL_LARGE: u32 = 0;
pub const SHIL_SMALL: u32 = 1;
pub const SHIL_EXTRALARGE: u32 = 2;
pub const SHIL_SYSSMALL: u32 = 3;
pub const SHIL_JUMBO: u32 = 4;
pub const SHIL_LAST: u32 = 4;
pub const WC_NETADDRESS: &'static [u8; 18usize] = b"msctls_netaddress\0";
pub const NCM_GETADDRESS: u32 = 1025;
pub const NCM_SETALLOWTYPE: u32 = 1026;
pub const NCM_GETALLOWTYPE: u32 = 1027;
pub const NCM_DISPLAYERRORTIP: u32 = 1028;
pub const PERF_DATA_VERSION: u32 = 1;
pub const PERF_DATA_REVISION: u32 = 1;
pub const PERF_NO_INSTANCES: i32 = -1;
pub const PERF_SIZE_DWORD: u32 = 0;
pub const PERF_SIZE_LARGE: u32 = 256;
pub const PERF_SIZE_ZERO: u32 = 512;
pub const PERF_SIZE_VARIABLE_LEN: u32 = 768;
pub const PERF_TYPE_NUMBER: u32 = 0;
pub const PERF_TYPE_COUNTER: u32 = 1024;
pub const PERF_TYPE_TEXT: u32 = 2048;
pub const PERF_TYPE_ZERO: u32 = 3072;
pub const PERF_NUMBER_HEX: u32 = 0;
pub const PERF_NUMBER_DECIMAL: u32 = 65536;
pub const PERF_NUMBER_DEC_1000: u32 = 131072;
pub const PERF_COUNTER_VALUE: u32 = 0;
pub const PERF_COUNTER_RATE: u32 = 65536;
pub const PERF_COUNTER_FRACTION: u32 = 131072;
pub const PERF_COUNTER_BASE: u32 = 196608;
pub const PERF_COUNTER_ELAPSED: u32 = 262144;
pub const PERF_COUNTER_QUEUELEN: u32 = 327680;
pub const PERF_COUNTER_HISTOGRAM: u32 = 393216;
pub const PERF_COUNTER_PRECISION: u32 = 458752;
pub const PERF_TEXT_UNICODE: u32 = 0;
pub const PERF_TEXT_ASCII: u32 = 65536;
pub const PERF_TIMER_TICK: u32 = 0;
pub const PERF_TIMER_100NS: u32 = 1048576;
pub const PERF_OBJECT_TIMER: u32 = 2097152;
pub const PERF_DELTA_COUNTER: u32 = 4194304;
pub const PERF_DELTA_BASE: u32 = 8388608;
pub const PERF_INVERSE_COUNTER: u32 = 16777216;
pub const PERF_MULTI_COUNTER: u32 = 33554432;
pub const PERF_DISPLAY_NO_SUFFIX: u32 = 0;
pub const PERF_DISPLAY_PER_SEC: u32 = 268435456;
pub const PERF_DISPLAY_PERCENT: u32 = 536870912;
pub const PERF_DISPLAY_SECONDS: u32 = 805306368;
pub const PERF_DISPLAY_NOSHOW: u32 = 1073741824;
pub const PERF_COUNTER_COUNTER: u32 = 272696320;
pub const PERF_COUNTER_TIMER: u32 = 541132032;
pub const PERF_COUNTER_QUEUELEN_TYPE: u32 = 4523008;
pub const PERF_COUNTER_LARGE_QUEUELEN_TYPE: u32 = 4523264;
pub const PERF_COUNTER_100NS_QUEUELEN_TYPE: u32 = 5571840;
pub const PERF_COUNTER_OBJ_TIME_QUEUELEN_TYPE: u32 = 6620416;
pub const PERF_COUNTER_BULK_COUNT: u32 = 272696576;
pub const PERF_COUNTER_TEXT: u32 = 2816;
pub const PERF_COUNTER_RAWCOUNT: u32 = 65536;
pub const PERF_COUNTER_LARGE_RAWCOUNT: u32 = 65792;
pub const PERF_COUNTER_RAWCOUNT_HEX: u32 = 0;
pub const PERF_COUNTER_LARGE_RAWCOUNT_HEX: u32 = 256;
pub const PERF_SAMPLE_FRACTION: u32 = 549585920;
pub const PERF_SAMPLE_COUNTER: u32 = 4260864;
pub const PERF_COUNTER_NODATA: u32 = 1073742336;
pub const PERF_COUNTER_TIMER_INV: u32 = 557909248;
pub const PERF_SAMPLE_BASE: u32 = 1073939457;
pub const PERF_AVERAGE_TIMER: u32 = 805438464;
pub const PERF_AVERAGE_BASE: u32 = 1073939458;
pub const PERF_AVERAGE_BULK: u32 = 1073874176;
pub const PERF_OBJ_TIME_TIMER: u32 = 543229184;
pub const PERF_100NSEC_TIMER: u32 = 542180608;
pub const PERF_100NSEC_TIMER_INV: u32 = 558957824;
pub const PERF_COUNTER_MULTI_TIMER: u32 = 574686464;
pub const PERF_COUNTER_MULTI_TIMER_INV: u32 = 591463680;
pub const PERF_COUNTER_MULTI_BASE: u32 = 1107494144;
pub const PERF_100NSEC_MULTI_TIMER: u32 = 575735040;
pub const PERF_100NSEC_MULTI_TIMER_INV: u32 = 592512256;
pub const PERF_RAW_FRACTION: u32 = 537003008;
pub const PERF_LARGE_RAW_FRACTION: u32 = 537003264;
pub const PERF_RAW_BASE: u32 = 1073939459;
pub const PERF_LARGE_RAW_BASE: u32 = 1073939712;
pub const PERF_ELAPSED_TIME: u32 = 807666944;
pub const PERF_COUNTER_HISTOGRAM_TYPE: u32 = 2147483648;
pub const PERF_COUNTER_DELTA: u32 = 4195328;
pub const PERF_COUNTER_LARGE_DELTA: u32 = 4195584;
pub const PERF_PRECISION_SYSTEM_TIMER: u32 = 541525248;
pub const PERF_PRECISION_100NS_TIMER: u32 = 542573824;
pub const PERF_PRECISION_OBJECT_TIMER: u32 = 543622400;
pub const PERF_PRECISION_TIMESTAMP: u32 = 1073939712;
pub const PERF_DETAIL_NOVICE: u32 = 100;
pub const PERF_DETAIL_ADVANCED: u32 = 200;
pub const PERF_DETAIL_EXPERT: u32 = 300;
pub const PERF_DETAIL_WIZARD: u32 = 400;
pub const PERF_NO_UNIQUE_ID: i32 = -1;
pub const MAX_PERF_OBJECTS_IN_QUERY_FUNCTION: u32 = 64;
pub const WINPERF_LOG_NONE: u32 = 0;
pub const WINPERF_LOG_USER: u32 = 1;
pub const WINPERF_LOG_DEBUG: u32 = 2;
pub const WINPERF_LOG_VERBOSE: u32 = 3;
pub const FD_SETSIZE: u32 = 64;
pub const IOCPARM_MASK: u32 = 127;
pub const IOC_VOID: u32 = 536870912;
pub const IOC_OUT: u32 = 1073741824;
pub const IOC_IN: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPORT_ECHO: u32 = 7;
pub const IPPORT_DISCARD: u32 = 9;
pub const IPPORT_SYSTAT: u32 = 11;
pub const IPPORT_DAYTIME: u32 = 13;
pub const IPPORT_NETSTAT: u32 = 15;
pub const IPPORT_FTP: u32 = 21;
pub const IPPORT_TELNET: u32 = 23;
pub const IPPORT_SMTP: u32 = 25;
pub const IPPORT_TIMESERVER: u32 = 37;
pub const IPPORT_NAMESERVER: u32 = 42;
pub const IPPORT_WHOIS: u32 = 43;
pub const IPPORT_MTP: u32 = 57;
pub const IPPORT_TFTP: u32 = 69;
pub const IPPORT_RJE: u32 = 77;
pub const IPPORT_FINGER: u32 = 79;
pub const IPPORT_TTYLINK: u32 = 87;
pub const IPPORT_SUPDUP: u32 = 95;
pub const IPPORT_EXECSERVER: u32 = 512;
pub const IPPORT_LOGINSERVER: u32 = 513;
pub const IPPORT_CMDSERVER: u32 = 514;
pub const IPPORT_EFSSERVER: u32 = 520;
pub const IPPORT_BIFFUDP: u32 = 512;
pub const IPPORT_WHOSERVER: u32 = 513;
pub const IPPORT_ROUTESERVER: u32 = 520;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IMPLINK_IP: u32 = 155;
pub const IMPLINK_LOWEXPER: u32 = 156;
pub const IMPLINK_HIGHEXPER: u32 = 158;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const INADDR_LOOPBACK: u32 = 2130706433;
pub const INADDR_NONE: u32 = 4294967295;
pub const WSADESCRIPTION_LEN: u32 = 256;
pub const WSASYS_STATUS_LEN: u32 = 128;
pub const IP_OPTIONS: u32 = 1;
pub const IP_MULTICAST_IF: u32 = 2;
pub const IP_MULTICAST_TTL: u32 = 3;
pub const IP_MULTICAST_LOOP: u32 = 4;
pub const IP_ADD_MEMBERSHIP: u32 = 5;
pub const IP_DROP_MEMBERSHIP: u32 = 6;
pub const IP_TTL: u32 = 7;
pub const IP_TOS: u32 = 8;
pub const IP_DONTFRAGMENT: u32 = 9;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const SOCKET_ERROR: i32 = -1;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_CONNDATA: u32 = 28672;
pub const SO_CONNOPT: u32 = 28673;
pub const SO_DISCDATA: u32 = 28674;
pub const SO_DISCOPT: u32 = 28675;
pub const SO_CONNDATALEN: u32 = 28676;
pub const SO_CONNOPTLEN: u32 = 28677;
pub const SO_DISCDATALEN: u32 = 28678;
pub const SO_DISCOPTLEN: u32 = 28679;
pub const SO_OPENTYPE: u32 = 28680;
pub const SO_SYNCHRONOUS_ALERT: u32 = 16;
pub const SO_SYNCHRONOUS_NONALERT: u32 = 32;
pub const SO_MAXDG: u32 = 28681;
pub const SO_MAXPATHDG: u32 = 28682;
pub const SO_UPDATE_ACCEPT_CONTEXT: u32 = 28683;
pub const SO_CONNECT_TIME: u32 = 28684;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_BSDURGENT: u32 = 28672;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_IPX: u32 = 6;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_NETBIOS: u32 = 17;
pub const AF_VOICEVIEW: u32 = 18;
pub const AF_FIREFOX: u32 = 19;
pub const AF_UNKNOWN1: u32 = 20;
pub const AF_BAN: u32 = 21;
pub const AF_MAX: u32 = 22;
pub const PF_UNSPEC: u32 = 0;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_IPX: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_VOICEVIEW: u32 = 18;
pub const PF_FIREFOX: u32 = 19;
pub const PF_UNKNOWN1: u32 = 20;
pub const PF_BAN: u32 = 21;
pub const PF_MAX: u32 = 22;
pub const SOL_SOCKET: u32 = 65535;
pub const SOMAXCONN: u32 = 5;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_MAXIOVLEN: u32 = 16;
pub const MSG_PARTIAL: u32 = 32768;
pub const MAXGETHOSTSTRUCT: u32 = 1024;
pub const FD_READ: u32 = 1;
pub const FD_WRITE: u32 = 2;
pub const FD_OOB: u32 = 4;
pub const FD_ACCEPT: u32 = 8;
pub const FD_CONNECT: u32 = 16;
pub const FD_CLOSE: u32 = 32;
pub const HOST_NOT_FOUND: u32 = 11001;
pub const TRY_AGAIN: u32 = 11002;
pub const NO_RECOVERY: u32 = 11003;
pub const NO_DATA: u32 = 11004;
pub const WSANO_ADDRESS: u32 = 11004;
pub const NO_ADDRESS: u32 = 11004;
pub const TF_DISCONNECT: u32 = 1;
pub const TF_REUSE_SOCKET: u32 = 2;
pub const TF_WRITE_BEHIND: u32 = 4;
pub const ALG_CLASS_ANY: u32 = 0;
pub const ALG_CLASS_SIGNATURE: u32 = 8192;
pub const ALG_CLASS_MSG_ENCRYPT: u32 = 16384;
pub const ALG_CLASS_DATA_ENCRYPT: u32 = 24576;
pub const ALG_CLASS_HASH: u32 = 32768;
pub const ALG_CLASS_KEY_EXCHANGE: u32 = 40960;
pub const ALG_CLASS_ALL: u32 = 57344;
pub const ALG_TYPE_ANY: u32 = 0;
pub const ALG_TYPE_DSS: u32 = 512;
pub const ALG_TYPE_RSA: u32 = 1024;
pub const ALG_TYPE_BLOCK: u32 = 1536;
pub const ALG_TYPE_STREAM: u32 = 2048;
pub const ALG_TYPE_DH: u32 = 2560;
pub const ALG_TYPE_SECURECHANNEL: u32 = 3072;
pub const ALG_TYPE_ECDH: u32 = 3584;
pub const ALG_TYPE_THIRDPARTY: u32 = 4096;
pub const ALG_SID_ANY: u32 = 0;
pub const ALG_SID_THIRDPARTY_ANY: u32 = 0;
pub const ALG_SID_RSA_ANY: u32 = 0;
pub const ALG_SID_RSA_PKCS: u32 = 1;
pub const ALG_SID_RSA_MSATWORK: u32 = 2;
pub const ALG_SID_RSA_ENTRUST: u32 = 3;
pub const ALG_SID_RSA_PGP: u32 = 4;
pub const ALG_SID_DSS_ANY: u32 = 0;
pub const ALG_SID_DSS_PKCS: u32 = 1;
pub const ALG_SID_DSS_DMS: u32 = 2;
pub const ALG_SID_ECDSA: u32 = 3;
pub const ALG_SID_DES: u32 = 1;
pub const ALG_SID_3DES: u32 = 3;
pub const ALG_SID_DESX: u32 = 4;
pub const ALG_SID_IDEA: u32 = 5;
pub const ALG_SID_CAST: u32 = 6;
pub const ALG_SID_SAFERSK64: u32 = 7;
pub const ALG_SID_SAFERSK128: u32 = 8;
pub const ALG_SID_3DES_112: u32 = 9;
pub const ALG_SID_CYLINK_MEK: u32 = 12;
pub const ALG_SID_RC5: u32 = 13;
pub const ALG_SID_AES_128: u32 = 14;
pub const ALG_SID_AES_192: u32 = 15;
pub const ALG_SID_AES_256: u32 = 16;
pub const ALG_SID_AES: u32 = 17;
pub const ALG_SID_SKIPJACK: u32 = 10;
pub const ALG_SID_TEK: u32 = 11;
pub const CRYPT_MODE_CBCI: u32 = 6;
pub const CRYPT_MODE_CFBP: u32 = 7;
pub const CRYPT_MODE_OFBP: u32 = 8;
pub const CRYPT_MODE_CBCOFM: u32 = 9;
pub const CRYPT_MODE_CBCOFMI: u32 = 10;
pub const ALG_SID_RC2: u32 = 2;
pub const ALG_SID_RC4: u32 = 1;
pub const ALG_SID_SEAL: u32 = 2;
pub const ALG_SID_DH_SANDF: u32 = 1;
pub const ALG_SID_DH_EPHEM: u32 = 2;
pub const ALG_SID_AGREED_KEY_ANY: u32 = 3;
pub const ALG_SID_KEA: u32 = 4;
pub const ALG_SID_ECDH: u32 = 5;
pub const ALG_SID_ECDH_EPHEM: u32 = 6;
pub const ALG_SID_MD2: u32 = 1;
pub const ALG_SID_MD4: u32 = 2;
pub const ALG_SID_MD5: u32 = 3;
pub const ALG_SID_SHA: u32 = 4;
pub const ALG_SID_SHA1: u32 = 4;
pub const ALG_SID_MAC: u32 = 5;
pub const ALG_SID_RIPEMD: u32 = 6;
pub const ALG_SID_RIPEMD160: u32 = 7;
pub const ALG_SID_SSL3SHAMD5: u32 = 8;
pub const ALG_SID_HMAC: u32 = 9;
pub const ALG_SID_TLS1PRF: u32 = 10;
pub const ALG_SID_HASH_REPLACE_OWF: u32 = 11;
pub const ALG_SID_SHA_256: u32 = 12;
pub const ALG_SID_SHA_384: u32 = 13;
pub const ALG_SID_SHA_512: u32 = 14;
pub const ALG_SID_SSL3_MASTER: u32 = 1;
pub const ALG_SID_SCHANNEL_MASTER_HASH: u32 = 2;
pub const ALG_SID_SCHANNEL_MAC_KEY: u32 = 3;
pub const ALG_SID_PCT1_MASTER: u32 = 4;
pub const ALG_SID_SSL2_MASTER: u32 = 5;
pub const ALG_SID_TLS1_MASTER: u32 = 6;
pub const ALG_SID_SCHANNEL_ENC_KEY: u32 = 7;
pub const ALG_SID_ECMQV: u32 = 1;
pub const ALG_SID_EXAMPLE: u32 = 80;
pub const CALG_MD2: u32 = 32769;
pub const CALG_MD4: u32 = 32770;
pub const CALG_MD5: u32 = 32771;
pub const CALG_SHA: u32 = 32772;
pub const CALG_SHA1: u32 = 32772;
pub const CALG_MAC: u32 = 32773;
pub const CALG_RSA_SIGN: u32 = 9216;
pub const CALG_DSS_SIGN: u32 = 8704;
pub const CALG_NO_SIGN: u32 = 8192;
pub const CALG_RSA_KEYX: u32 = 41984;
pub const CALG_DES: u32 = 26113;
pub const CALG_3DES_112: u32 = 26121;
pub const CALG_3DES: u32 = 26115;
pub const CALG_DESX: u32 = 26116;
pub const CALG_RC2: u32 = 26114;
pub const CALG_RC4: u32 = 26625;
pub const CALG_SEAL: u32 = 26626;
pub const CALG_DH_SF: u32 = 43521;
pub const CALG_DH_EPHEM: u32 = 43522;
pub const CALG_AGREEDKEY_ANY: u32 = 43523;
pub const CALG_KEA_KEYX: u32 = 43524;
pub const CALG_HUGHES_MD5: u32 = 40963;
pub const CALG_SKIPJACK: u32 = 26122;
pub const CALG_TEK: u32 = 26123;
pub const CALG_CYLINK_MEK: u32 = 26124;
pub const CALG_SSL3_SHAMD5: u32 = 32776;
pub const CALG_SSL3_MASTER: u32 = 19457;
pub const CALG_SCHANNEL_MASTER_HASH: u32 = 19458;
pub const CALG_SCHANNEL_MAC_KEY: u32 = 19459;
pub const CALG_SCHANNEL_ENC_KEY: u32 = 19463;
pub const CALG_PCT1_MASTER: u32 = 19460;
pub const CALG_SSL2_MASTER: u32 = 19461;
pub const CALG_TLS1_MASTER: u32 = 19462;
pub const CALG_RC5: u32 = 26125;
pub const CALG_HMAC: u32 = 32777;
pub const CALG_TLS1PRF: u32 = 32778;
pub const CALG_HASH_REPLACE_OWF: u32 = 32779;
pub const CALG_AES_128: u32 = 26126;
pub const CALG_AES_192: u32 = 26127;
pub const CALG_AES_256: u32 = 26128;
pub const CALG_AES: u32 = 26129;
pub const CALG_SHA_256: u32 = 32780;
pub const CALG_SHA_384: u32 = 32781;
pub const CALG_SHA_512: u32 = 32782;
pub const CALG_ECDH: u32 = 43525;
pub const CALG_ECDH_EPHEM: u32 = 44550;
pub const CALG_ECMQV: u32 = 40961;
pub const CALG_ECDSA: u32 = 8707;
pub const CALG_NULLCIPHER: u32 = 24576;
pub const CALG_THIRDPARTY_KEY_EXCHANGE: u32 = 45056;
pub const CALG_THIRDPARTY_SIGNATURE: u32 = 12288;
pub const CALG_THIRDPARTY_CIPHER: u32 = 28672;
pub const CALG_THIRDPARTY_HASH: u32 = 36864;
pub const CRYPT_VERIFYCONTEXT: u32 = 4026531840;
pub const CRYPT_NEWKEYSET: u32 = 8;
pub const CRYPT_DELETEKEYSET: u32 = 16;
pub const CRYPT_MACHINE_KEYSET: u32 = 32;
pub const CRYPT_SILENT: u32 = 64;
pub const CRYPT_DEFAULT_CONTAINER_OPTIONAL: u32 = 128;
pub const CRYPT_EXPORTABLE: u32 = 1;
pub const CRYPT_USER_PROTECTED: u32 = 2;
pub const CRYPT_CREATE_SALT: u32 = 4;
pub const CRYPT_UPDATE_KEY: u32 = 8;
pub const CRYPT_NO_SALT: u32 = 16;
pub const CRYPT_PREGEN: u32 = 64;
pub const CRYPT_RECIPIENT: u32 = 16;
pub const CRYPT_INITIATOR: u32 = 64;
pub const CRYPT_ONLINE: u32 = 128;
pub const CRYPT_SF: u32 = 256;
pub const CRYPT_CREATE_IV: u32 = 512;
pub const CRYPT_KEK: u32 = 1024;
pub const CRYPT_DATA_KEY: u32 = 2048;
pub const CRYPT_VOLATILE: u32 = 4096;
pub const CRYPT_SGCKEY: u32 = 8192;
pub const CRYPT_USER_PROTECTED_STRONG: u32 = 1048576;
pub const CRYPT_ARCHIVABLE: u32 = 16384;
pub const CRYPT_FORCE_KEY_PROTECTION_HIGH: u32 = 32768;
pub const RSA1024BIT_KEY: u32 = 67108864;
pub const CRYPT_SERVER: u32 = 1024;
pub const KEY_LENGTH_MASK: u32 = 4294901760;
pub const CRYPT_Y_ONLY: u32 = 1;
pub const CRYPT_SSL2_FALLBACK: u32 = 2;
pub const CRYPT_DESTROYKEY: u32 = 4;
pub const CRYPT_OAEP: u32 = 64;
pub const CRYPT_BLOB_VER3: u32 = 128;
pub const CRYPT_IPSEC_HMAC_KEY: u32 = 256;
pub const CRYPT_DECRYPT_RSA_NO_PADDING_CHECK: u32 = 32;
pub const CRYPT_SECRETDIGEST: u32 = 1;
pub const CRYPT_OWF_REPL_LM_HASH: u32 = 1;
pub const CRYPT_LITTLE_ENDIAN: u32 = 1;
pub const CRYPT_NOHASHOID: u32 = 1;
pub const CRYPT_TYPE2_FORMAT: u32 = 2;
pub const CRYPT_X931_FORMAT: u32 = 4;
pub const CRYPT_MACHINE_DEFAULT: u32 = 1;
pub const CRYPT_USER_DEFAULT: u32 = 2;
pub const CRYPT_DELETE_DEFAULT: u32 = 4;
pub const SIMPLEBLOB: u32 = 1;
pub const PUBLICKEYBLOB: u32 = 6;
pub const PRIVATEKEYBLOB: u32 = 7;
pub const PLAINTEXTKEYBLOB: u32 = 8;
pub const OPAQUEKEYBLOB: u32 = 9;
pub const PUBLICKEYBLOBEX: u32 = 10;
pub const SYMMETRICWRAPKEYBLOB: u32 = 11;
pub const KEYSTATEBLOB: u32 = 12;
pub const AT_KEYEXCHANGE: u32 = 1;
pub const AT_SIGNATURE: u32 = 2;
pub const CRYPT_USERDATA: u32 = 1;
pub const KP_IV: u32 = 1;
pub const KP_SALT: u32 = 2;
pub const KP_PADDING: u32 = 3;
pub const KP_MODE: u32 = 4;
pub const KP_MODE_BITS: u32 = 5;
pub const KP_PERMISSIONS: u32 = 6;
pub const KP_ALGID: u32 = 7;
pub const KP_BLOCKLEN: u32 = 8;
pub const KP_KEYLEN: u32 = 9;
pub const KP_SALT_EX: u32 = 10;
pub const KP_P: u32 = 11;
pub const KP_G: u32 = 12;
pub const KP_Q: u32 = 13;
pub const KP_X: u32 = 14;
pub const KP_Y: u32 = 15;
pub const KP_RA: u32 = 16;
pub const KP_RB: u32 = 17;
pub const KP_INFO: u32 = 18;
pub const KP_EFFECTIVE_KEYLEN: u32 = 19;
pub const KP_SCHANNEL_ALG: u32 = 20;
pub const KP_CLIENT_RANDOM: u32 = 21;
pub const KP_SERVER_RANDOM: u32 = 22;
pub const KP_RP: u32 = 23;
pub const KP_PRECOMP_MD5: u32 = 24;
pub const KP_PRECOMP_SHA: u32 = 25;
pub const KP_CERTIFICATE: u32 = 26;
pub const KP_CLEAR_KEY: u32 = 27;
pub const KP_PUB_EX_LEN: u32 = 28;
pub const KP_PUB_EX_VAL: u32 = 29;
pub const KP_KEYVAL: u32 = 30;
pub const KP_ADMIN_PIN: u32 = 31;
pub const KP_KEYEXCHANGE_PIN: u32 = 32;
pub const KP_SIGNATURE_PIN: u32 = 33;
pub const KP_PREHASH: u32 = 34;
pub const KP_ROUNDS: u32 = 35;
pub const KP_OAEP_PARAMS: u32 = 36;
pub const KP_CMS_KEY_INFO: u32 = 37;
pub const KP_CMS_DH_KEY_INFO: u32 = 38;
pub const KP_PUB_PARAMS: u32 = 39;
pub const KP_VERIFY_PARAMS: u32 = 40;
pub const KP_HIGHEST_VERSION: u32 = 41;
pub const KP_GET_USE_COUNT: u32 = 42;
pub const KP_PIN_ID: u32 = 43;
pub const KP_PIN_INFO: u32 = 44;
pub const PKCS5_PADDING: u32 = 1;
pub const RANDOM_PADDING: u32 = 2;
pub const ZERO_PADDING: u32 = 3;
pub const CRYPT_MODE_CBC: u32 = 1;
pub const CRYPT_MODE_ECB: u32 = 2;
pub const CRYPT_MODE_OFB: u32 = 3;
pub const CRYPT_MODE_CFB: u32 = 4;
pub const CRYPT_MODE_CTS: u32 = 5;
pub const CRYPT_ENCRYPT: u32 = 1;
pub const CRYPT_DECRYPT: u32 = 2;
pub const CRYPT_EXPORT: u32 = 4;
pub const CRYPT_READ: u32 = 8;
pub const CRYPT_WRITE: u32 = 16;
pub const CRYPT_MAC: u32 = 32;
pub const CRYPT_EXPORT_KEY: u32 = 64;
pub const CRYPT_IMPORT_KEY: u32 = 128;
pub const CRYPT_ARCHIVE: u32 = 256;
pub const HP_ALGID: u32 = 1;
pub const HP_HASHVAL: u32 = 2;
pub const HP_HASHSIZE: u32 = 4;
pub const HP_HMAC_INFO: u32 = 5;
pub const HP_TLS1PRF_LABEL: u32 = 6;
pub const HP_TLS1PRF_SEED: u32 = 7;
pub const CRYPT_FAILED: u32 = 0;
pub const CRYPT_SUCCEED: u32 = 1;
pub const PP_ENUMALGS: u32 = 1;
pub const PP_ENUMCONTAINERS: u32 = 2;
pub const PP_IMPTYPE: u32 = 3;
pub const PP_NAME: u32 = 4;
pub const PP_VERSION: u32 = 5;
pub const PP_CONTAINER: u32 = 6;
pub const PP_CHANGE_PASSWORD: u32 = 7;
pub const PP_KEYSET_SEC_DESCR: u32 = 8;
pub const PP_CERTCHAIN: u32 = 9;
pub const PP_KEY_TYPE_SUBTYPE: u32 = 10;
pub const PP_PROVTYPE: u32 = 16;
pub const PP_KEYSTORAGE: u32 = 17;
pub const PP_APPLI_CERT: u32 = 18;
pub const PP_SYM_KEYSIZE: u32 = 19;
pub const PP_SESSION_KEYSIZE: u32 = 20;
pub const PP_UI_PROMPT: u32 = 21;
pub const PP_ENUMALGS_EX: u32 = 22;
pub const PP_ENUMMANDROOTS: u32 = 25;
pub const PP_ENUMELECTROOTS: u32 = 26;
pub const PP_KEYSET_TYPE: u32 = 27;
pub const PP_ADMIN_PIN: u32 = 31;
pub const PP_KEYEXCHANGE_PIN: u32 = 32;
pub const PP_SIGNATURE_PIN: u32 = 33;
pub const PP_SIG_KEYSIZE_INC: u32 = 34;
pub const PP_KEYX_KEYSIZE_INC: u32 = 35;
pub const PP_UNIQUE_CONTAINER: u32 = 36;
pub const PP_SGC_INFO: u32 = 37;
pub const PP_USE_HARDWARE_RNG: u32 = 38;
pub const PP_KEYSPEC: u32 = 39;
pub const PP_ENUMEX_SIGNING_PROT: u32 = 40;
pub const PP_CRYPT_COUNT_KEY_USE: u32 = 41;
pub const PP_USER_CERTSTORE: u32 = 42;
pub const PP_SMARTCARD_READER: u32 = 43;
pub const PP_SMARTCARD_GUID: u32 = 45;
pub const PP_ROOT_CERTSTORE: u32 = 46;
pub const PP_SMARTCARD_READER_ICON: u32 = 47;
pub const CRYPT_FIRST: u32 = 1;
pub const CRYPT_NEXT: u32 = 2;
pub const CRYPT_SGC_ENUM: u32 = 4;
pub const CRYPT_IMPL_HARDWARE: u32 = 1;
pub const CRYPT_IMPL_SOFTWARE: u32 = 2;
pub const CRYPT_IMPL_MIXED: u32 = 3;
pub const CRYPT_IMPL_UNKNOWN: u32 = 4;
pub const CRYPT_IMPL_REMOVABLE: u32 = 8;
pub const CRYPT_SEC_DESCR: u32 = 1;
pub const CRYPT_PSTORE: u32 = 2;
pub const CRYPT_UI_PROMPT: u32 = 4;
pub const CRYPT_FLAG_PCT1: u32 = 1;
pub const CRYPT_FLAG_SSL2: u32 = 2;
pub const CRYPT_FLAG_SSL3: u32 = 4;
pub const CRYPT_FLAG_TLS1: u32 = 8;
pub const CRYPT_FLAG_IPSEC: u32 = 16;
pub const CRYPT_FLAG_SIGNING: u32 = 32;
pub const CRYPT_SGC: u32 = 1;
pub const CRYPT_FASTSGC: u32 = 2;
pub const PP_CLIENT_HWND: u32 = 1;
pub const PP_CONTEXT_INFO: u32 = 11;
pub const PP_KEYEXCHANGE_KEYSIZE: u32 = 12;
pub const PP_SIGNATURE_KEYSIZE: u32 = 13;
pub const PP_KEYEXCHANGE_ALG: u32 = 14;
pub const PP_SIGNATURE_ALG: u32 = 15;
pub const PP_DELETEKEY: u32 = 24;
pub const PP_PIN_PROMPT_STRING: u32 = 44;
pub const PP_SECURE_KEYEXCHANGE_PIN: u32 = 47;
pub const PP_SECURE_SIGNATURE_PIN: u32 = 48;
pub const PP_DISMISS_PIN_UI_SEC: u32 = 49;
pub const PROV_RSA_FULL: u32 = 1;
pub const PROV_RSA_SIG: u32 = 2;
pub const PROV_DSS: u32 = 3;
pub const PROV_FORTEZZA: u32 = 4;
pub const PROV_MS_EXCHANGE: u32 = 5;
pub const PROV_SSL: u32 = 6;
pub const PROV_RSA_SCHANNEL: u32 = 12;
pub const PROV_DSS_DH: u32 = 13;
pub const PROV_EC_ECDSA_SIG: u32 = 14;
pub const PROV_EC_ECNRA_SIG: u32 = 15;
pub const PROV_EC_ECDSA_FULL: u32 = 16;
pub const PROV_EC_ECNRA_FULL: u32 = 17;
pub const PROV_DH_SCHANNEL: u32 = 18;
pub const PROV_SPYRUS_LYNKS: u32 = 20;
pub const PROV_RNG: u32 = 21;
pub const PROV_INTEL_SEC: u32 = 22;
pub const PROV_REPLACE_OWF: u32 = 23;
pub const PROV_RSA_AES: u32 = 24;
pub const MS_DEF_PROV_A: &'static [u8; 43usize] = b"Microsoft Base Cryptographic Provider v1.0\0";
pub const MS_DEF_PROV_W: &'static [u8; 43usize] = b"Microsoft Base Cryptographic Provider v1.0\0";
pub const MS_DEF_PROV: &'static [u8; 43usize] = b"Microsoft Base Cryptographic Provider v1.0\0";
pub const MS_ENHANCED_PROV_A: &'static [u8; 47usize] =
    b"Microsoft Enhanced Cryptographic Provider v1.0\0";
pub const MS_ENHANCED_PROV_W: &'static [u8; 47usize] =
    b"Microsoft Enhanced Cryptographic Provider v1.0\0";
pub const MS_ENHANCED_PROV: &'static [u8; 47usize] =
    b"Microsoft Enhanced Cryptographic Provider v1.0\0";
pub const MS_STRONG_PROV_A: &'static [u8; 40usize] = b"Microsoft Strong Cryptographic Provider\0";
pub const MS_STRONG_PROV_W: &'static [u8; 40usize] = b"Microsoft Strong Cryptographic Provider\0";
pub const MS_STRONG_PROV: &'static [u8; 40usize] = b"Microsoft Strong Cryptographic Provider\0";
pub const MS_DEF_RSA_SIG_PROV_A: &'static [u8; 47usize] =
    b"Microsoft RSA Signature Cryptographic Provider\0";
pub const MS_DEF_RSA_SIG_PROV_W: &'static [u8; 47usize] =
    b"Microsoft RSA Signature Cryptographic Provider\0";
pub const MS_DEF_RSA_SIG_PROV: &'static [u8; 47usize] =
    b"Microsoft RSA Signature Cryptographic Provider\0";
pub const MS_DEF_RSA_SCHANNEL_PROV_A: &'static [u8; 46usize] =
    b"Microsoft RSA SChannel Cryptographic Provider\0";
pub const MS_DEF_RSA_SCHANNEL_PROV_W: &'static [u8; 46usize] =
    b"Microsoft RSA SChannel Cryptographic Provider\0";
pub const MS_DEF_RSA_SCHANNEL_PROV: &'static [u8; 46usize] =
    b"Microsoft RSA SChannel Cryptographic Provider\0";
pub const MS_DEF_DSS_PROV_A: &'static [u8; 42usize] =
    b"Microsoft Base DSS Cryptographic Provider\0";
pub const MS_DEF_DSS_PROV_W: &'static [u8; 42usize] =
    b"Microsoft Base DSS Cryptographic Provider\0";
pub const MS_DEF_DSS_PROV: &'static [u8; 42usize] = b"Microsoft Base DSS Cryptographic Provider\0";
pub const MS_DEF_DSS_DH_PROV_A: &'static [u8; 61usize] =
    b"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\0";
pub const MS_DEF_DSS_DH_PROV_W: &'static [u8; 61usize] =
    b"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\0";
pub const MS_DEF_DSS_DH_PROV: &'static [u8; 61usize] =
    b"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\0";
pub const MS_ENH_DSS_DH_PROV_A: &'static [u8; 65usize] =
    b"Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider\0";
pub const MS_ENH_DSS_DH_PROV_W: &'static [u8; 65usize] =
    b"Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider\0";
pub const MS_ENH_DSS_DH_PROV: &'static [u8; 65usize] =
    b"Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider\0";
pub const MS_DEF_DH_SCHANNEL_PROV_A: &'static [u8; 45usize] =
    b"Microsoft DH SChannel Cryptographic Provider\0";
pub const MS_DEF_DH_SCHANNEL_PROV_W: &'static [u8; 45usize] =
    b"Microsoft DH SChannel Cryptographic Provider\0";
pub const MS_DEF_DH_SCHANNEL_PROV: &'static [u8; 45usize] =
    b"Microsoft DH SChannel Cryptographic Provider\0";
pub const MS_SCARD_PROV_A: &'static [u8; 42usize] = b"Microsoft Base Smart Card Crypto Provider\0";
pub const MS_SCARD_PROV_W: &'static [u8; 42usize] = b"Microsoft Base Smart Card Crypto Provider\0";
pub const MS_SCARD_PROV: &'static [u8; 42usize] = b"Microsoft Base Smart Card Crypto Provider\0";
pub const MS_ENH_RSA_AES_PROV_A: &'static [u8; 54usize] =
    b"Microsoft Enhanced RSA and AES Cryptographic Provider\0";
pub const MS_ENH_RSA_AES_PROV_W: &'static [u8; 54usize] =
    b"Microsoft Enhanced RSA and AES Cryptographic Provider\0";
pub const MS_ENH_RSA_AES_PROV_XP_A: &'static [u8; 66usize] =
    b"Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)\0";
pub const MS_ENH_RSA_AES_PROV_XP_W: &'static [u8; 66usize] =
    b"Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)\0";
pub const MS_ENH_RSA_AES_PROV_XP: &'static [u8; 66usize] =
    b"Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)\0";
pub const MS_ENH_RSA_AES_PROV: &'static [u8; 54usize] =
    b"Microsoft Enhanced RSA and AES Cryptographic Provider\0";
pub const MAXUIDLEN: u32 = 64;
pub const EXPO_OFFLOAD_REG_VALUE: &'static [u8; 12usize] = b"ExpoOffload\0";
pub const EXPO_OFFLOAD_FUNC_NAME: &'static [u8; 15usize] = b"OffloadModExpo\0";
pub const szKEY_CRYPTOAPI_PRIVATE_KEY_OPTIONS: &'static [u8; 41usize] =
    b"Software\\Policies\\Microsoft\\Cryptography\0";
pub const szKEY_CACHE_ENABLED: &'static [u8; 17usize] = b"CachePrivateKeys\0";
pub const szKEY_CACHE_SECONDS: &'static [u8; 26usize] = b"PrivateKeyLifetimeSeconds\0";
pub const szPRIV_KEY_CACHE_MAX_ITEMS: &'static [u8; 21usize] = b"PrivKeyCacheMaxItems\0";
pub const cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT: u32 = 20;
pub const szPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS: &'static [u8; 33usize] =
    b"PrivKeyCachePurgeIntervalSeconds\0";
pub const cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT: u32 = 86400;
pub const CUR_BLOB_VERSION: u32 = 2;
pub const SCHANNEL_MAC_KEY: u32 = 0;
pub const SCHANNEL_ENC_KEY: u32 = 1;
pub const INTERNATIONAL_USAGE: u32 = 1;
pub const BCRYPT_OBJECT_ALIGNMENT: u32 = 16;
pub const BCRYPT_KDF_HASH: &'static [u8; 5usize] = b"HASH\0";
pub const BCRYPT_KDF_HMAC: &'static [u8; 5usize] = b"HMAC\0";
pub const BCRYPT_KDF_TLS_PRF: &'static [u8; 8usize] = b"TLS_PRF\0";
pub const BCRYPT_KDF_SP80056A_CONCAT: &'static [u8; 17usize] = b"SP800_56A_CONCAT\0";
pub const BCRYPT_KDF_RAW_SECRET: &'static [u8; 9usize] = b"TRUNCATE\0";
pub const BCRYPT_KDF_HKDF: &'static [u8; 5usize] = b"HKDF\0";
pub const KDF_HASH_ALGORITHM: u32 = 0;
pub const KDF_SECRET_PREPEND: u32 = 1;
pub const KDF_SECRET_APPEND: u32 = 2;
pub const KDF_HMAC_KEY: u32 = 3;
pub const KDF_TLS_PRF_LABEL: u32 = 4;
pub const KDF_TLS_PRF_SEED: u32 = 5;
pub const KDF_SECRET_HANDLE: u32 = 6;
pub const KDF_TLS_PRF_PROTOCOL: u32 = 7;
pub const KDF_ALGORITHMID: u32 = 8;
pub const KDF_PARTYUINFO: u32 = 9;
pub const KDF_PARTYVINFO: u32 = 10;
pub const KDF_SUPPPUBINFO: u32 = 11;
pub const KDF_SUPPPRIVINFO: u32 = 12;
pub const KDF_LABEL: u32 = 13;
pub const KDF_CONTEXT: u32 = 14;
pub const KDF_SALT: u32 = 15;
pub const KDF_ITERATION_COUNT: u32 = 16;
pub const KDF_GENERIC_PARAMETER: u32 = 17;
pub const KDF_KEYBITLENGTH: u32 = 18;
pub const KDF_HKDF_SALT: u32 = 19;
pub const KDF_HKDF_INFO: u32 = 20;
pub const KDF_USE_SECRET_AS_HMAC_KEY_FLAG: u32 = 1;
pub const BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION: u32 = 1;
pub const BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG: u32 = 1;
pub const BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG: u32 = 2;
pub const BCRYPT_OPAQUE_KEY_BLOB: &'static [u8; 14usize] = b"OpaqueKeyBlob\0";
pub const BCRYPT_KEY_DATA_BLOB: &'static [u8; 12usize] = b"KeyDataBlob\0";
pub const BCRYPT_AES_WRAP_KEY_BLOB: &'static [u8; 19usize] = b"Rfc3565KeyWrapBlob\0";
pub const BCRYPT_OBJECT_LENGTH: &'static [u8; 13usize] = b"ObjectLength\0";
pub const BCRYPT_ALGORITHM_NAME: &'static [u8; 14usize] = b"AlgorithmName\0";
pub const BCRYPT_PROVIDER_HANDLE: &'static [u8; 15usize] = b"ProviderHandle\0";
pub const BCRYPT_CHAINING_MODE: &'static [u8; 13usize] = b"ChainingMode\0";
pub const BCRYPT_BLOCK_LENGTH: &'static [u8; 12usize] = b"BlockLength\0";
pub const BCRYPT_KEY_LENGTH: &'static [u8; 10usize] = b"KeyLength\0";
pub const BCRYPT_KEY_OBJECT_LENGTH: &'static [u8; 16usize] = b"KeyObjectLength\0";
pub const BCRYPT_KEY_STRENGTH: &'static [u8; 12usize] = b"KeyStrength\0";
pub const BCRYPT_KEY_LENGTHS: &'static [u8; 11usize] = b"KeyLengths\0";
pub const BCRYPT_BLOCK_SIZE_LIST: &'static [u8; 14usize] = b"BlockSizeList\0";
pub const BCRYPT_EFFECTIVE_KEY_LENGTH: &'static [u8; 19usize] = b"EffectiveKeyLength\0";
pub const BCRYPT_HASH_LENGTH: &'static [u8; 17usize] = b"HashDigestLength\0";
pub const BCRYPT_HASH_OID_LIST: &'static [u8; 12usize] = b"HashOIDList\0";
pub const BCRYPT_PADDING_SCHEMES: &'static [u8; 15usize] = b"PaddingSchemes\0";
pub const BCRYPT_SIGNATURE_LENGTH: &'static [u8; 16usize] = b"SignatureLength\0";
pub const BCRYPT_HASH_BLOCK_LENGTH: &'static [u8; 16usize] = b"HashBlockLength\0";
pub const BCRYPT_AUTH_TAG_LENGTH: &'static [u8; 14usize] = b"AuthTagLength\0";
pub const BCRYPT_PRIMITIVE_TYPE: &'static [u8; 14usize] = b"PrimitiveType\0";
pub const BCRYPT_IS_KEYED_HASH: &'static [u8; 12usize] = b"IsKeyedHash\0";
pub const BCRYPT_IS_REUSABLE_HASH: &'static [u8; 15usize] = b"IsReusableHash\0";
pub const BCRYPT_MESSAGE_BLOCK_LENGTH: &'static [u8; 19usize] = b"MessageBlockLength\0";
pub const BCRYPT_PUBLIC_KEY_LENGTH: &'static [u8; 16usize] = b"PublicKeyLength\0";
pub const BCRYPT_PCP_PLATFORM_TYPE_PROPERTY: &'static [u8; 18usize] = b"PCP_PLATFORM_TYPE\0";
pub const BCRYPT_PCP_PROVIDER_VERSION_PROPERTY: &'static [u8; 21usize] = b"PCP_PROVIDER_VERSION\0";
pub const BCRYPT_MULTI_OBJECT_LENGTH: &'static [u8; 18usize] = b"MultiObjectLength\0";
pub const BCRYPT_IS_IFX_TPM_WEAK_KEY: &'static [u8; 16usize] = b"IsIfxTpmWeakKey\0";
pub const BCRYPT_HKDF_HASH_ALGORITHM: &'static [u8; 18usize] = b"HkdfHashAlgorithm\0";
pub const BCRYPT_HKDF_SALT_AND_FINALIZE: &'static [u8; 20usize] = b"HkdfSaltAndFinalize\0";
pub const BCRYPT_HKDF_PRK_AND_FINALIZE: &'static [u8; 19usize] = b"HkdfPrkAndFinalize\0";
pub const BCRYPT_INITIALIZATION_VECTOR: &'static [u8; 3usize] = b"IV\0";
pub const BCRYPT_CHAIN_MODE_NA: &'static [u8; 16usize] = b"ChainingModeN/A\0";
pub const BCRYPT_CHAIN_MODE_CBC: &'static [u8; 16usize] = b"ChainingModeCBC\0";
pub const BCRYPT_CHAIN_MODE_ECB: &'static [u8; 16usize] = b"ChainingModeECB\0";
pub const BCRYPT_CHAIN_MODE_CFB: &'static [u8; 16usize] = b"ChainingModeCFB\0";
pub const BCRYPT_CHAIN_MODE_CCM: &'static [u8; 16usize] = b"ChainingModeCCM\0";
pub const BCRYPT_CHAIN_MODE_GCM: &'static [u8; 16usize] = b"ChainingModeGCM\0";
pub const BCRYPT_SUPPORTED_PAD_ROUTER: u32 = 1;
pub const BCRYPT_SUPPORTED_PAD_PKCS1_ENC: u32 = 2;
pub const BCRYPT_SUPPORTED_PAD_PKCS1_SIG: u32 = 4;
pub const BCRYPT_SUPPORTED_PAD_OAEP: u32 = 8;
pub const BCRYPT_SUPPORTED_PAD_PSS: u32 = 16;
pub const BCRYPT_PROV_DISPATCH: u32 = 1;
pub const BCRYPT_BLOCK_PADDING: u32 = 1;
pub const BCRYPT_PAD_NONE: u32 = 1;
pub const BCRYPT_PAD_PKCS1: u32 = 2;
pub const BCRYPT_PAD_OAEP: u32 = 4;
pub const BCRYPT_PAD_PSS: u32 = 8;
pub const BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID: u32 = 16;
pub const BCRYPTBUFFER_VERSION: u32 = 0;
pub const BCRYPT_PUBLIC_KEY_BLOB: &'static [u8; 11usize] = b"PUBLICBLOB\0";
pub const BCRYPT_PRIVATE_KEY_BLOB: &'static [u8; 12usize] = b"PRIVATEBLOB\0";
pub const BCRYPT_RSAPUBLIC_BLOB: &'static [u8; 14usize] = b"RSAPUBLICBLOB\0";
pub const BCRYPT_RSAPRIVATE_BLOB: &'static [u8; 15usize] = b"RSAPRIVATEBLOB\0";
pub const LEGACY_RSAPUBLIC_BLOB: &'static [u8; 15usize] = b"CAPIPUBLICBLOB\0";
pub const LEGACY_RSAPRIVATE_BLOB: &'static [u8; 16usize] = b"CAPIPRIVATEBLOB\0";
pub const BCRYPT_RSAPUBLIC_MAGIC: u32 = 826364754;
pub const BCRYPT_RSAPRIVATE_MAGIC: u32 = 843141970;
pub const BCRYPT_RSAFULLPRIVATE_BLOB: &'static [u8; 19usize] = b"RSAFULLPRIVATEBLOB\0";
pub const BCRYPT_RSAFULLPRIVATE_MAGIC: u32 = 859919186;
pub const BCRYPT_GLOBAL_PARAMETERS: &'static [u8; 21usize] = b"SecretAgreementParam\0";
pub const BCRYPT_PRIVATE_KEY: &'static [u8; 11usize] = b"PrivKeyVal\0";
pub const BCRYPT_ECCPUBLIC_BLOB: &'static [u8; 14usize] = b"ECCPUBLICBLOB\0";
pub const BCRYPT_ECCPRIVATE_BLOB: &'static [u8; 15usize] = b"ECCPRIVATEBLOB\0";
pub const BCRYPT_ECCFULLPUBLIC_BLOB: &'static [u8; 18usize] = b"ECCFULLPUBLICBLOB\0";
pub const BCRYPT_ECCFULLPRIVATE_BLOB: &'static [u8; 19usize] = b"ECCFULLPRIVATEBLOB\0";
pub const SSL_ECCPUBLIC_BLOB: &'static [u8; 17usize] = b"SSLECCPUBLICBLOB\0";
pub const BCRYPT_ECDH_PUBLIC_P256_MAGIC: u32 = 827016005;
pub const BCRYPT_ECDH_PRIVATE_P256_MAGIC: u32 = 843793221;
pub const BCRYPT_ECDH_PUBLIC_P384_MAGIC: u32 = 860570437;
pub const BCRYPT_ECDH_PRIVATE_P384_MAGIC: u32 = 877347653;
pub const BCRYPT_ECDH_PUBLIC_P521_MAGIC: u32 = 894124869;
pub const BCRYPT_ECDH_PRIVATE_P521_MAGIC: u32 = 910902085;
pub const BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC: u32 = 1347109701;
pub const BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC: u32 = 1447772997;
pub const BCRYPT_ECDSA_PUBLIC_P256_MAGIC: u32 = 827540293;
pub const BCRYPT_ECDSA_PRIVATE_P256_MAGIC: u32 = 844317509;
pub const BCRYPT_ECDSA_PUBLIC_P384_MAGIC: u32 = 861094725;
pub const BCRYPT_ECDSA_PRIVATE_P384_MAGIC: u32 = 877871941;
pub const BCRYPT_ECDSA_PUBLIC_P521_MAGIC: u32 = 894649157;
pub const BCRYPT_ECDSA_PRIVATE_P521_MAGIC: u32 = 911426373;
pub const BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC: u32 = 1346650949;
pub const BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC: u32 = 1447314245;
pub const BCRYPT_ECC_FULLKEY_BLOB_V1: u32 = 1;
pub const BCRYPT_DH_PUBLIC_BLOB: &'static [u8; 13usize] = b"DHPUBLICBLOB\0";
pub const BCRYPT_DH_PRIVATE_BLOB: &'static [u8; 14usize] = b"DHPRIVATEBLOB\0";
pub const LEGACY_DH_PUBLIC_BLOB: &'static [u8; 17usize] = b"CAPIDHPUBLICBLOB\0";
pub const LEGACY_DH_PRIVATE_BLOB: &'static [u8; 18usize] = b"CAPIDHPRIVATEBLOB\0";
pub const BCRYPT_DH_PUBLIC_MAGIC: u32 = 1112557636;
pub const BCRYPT_DH_PRIVATE_MAGIC: u32 = 1448101956;
pub const BCRYPT_DH_PARAMETERS: &'static [u8; 13usize] = b"DHParameters\0";
pub const BCRYPT_DH_PARAMETERS_MAGIC: u32 = 1297107012;
pub const BCRYPT_DSA_PUBLIC_BLOB: &'static [u8; 14usize] = b"DSAPUBLICBLOB\0";
pub const BCRYPT_DSA_PRIVATE_BLOB: &'static [u8; 15usize] = b"DSAPRIVATEBLOB\0";
pub const LEGACY_DSA_PUBLIC_BLOB: &'static [u8; 18usize] = b"CAPIDSAPUBLICBLOB\0";
pub const LEGACY_DSA_PRIVATE_BLOB: &'static [u8; 19usize] = b"CAPIDSAPRIVATEBLOB\0";
pub const LEGACY_DSA_V2_PUBLIC_BLOB: &'static [u8; 20usize] = b"V2CAPIDSAPUBLICBLOB\0";
pub const LEGACY_DSA_V2_PRIVATE_BLOB: &'static [u8; 21usize] = b"V2CAPIDSAPRIVATEBLOB\0";
pub const BCRYPT_DSA_PUBLIC_MAGIC: u32 = 1112560452;
pub const BCRYPT_DSA_PRIVATE_MAGIC: u32 = 1448104772;
pub const BCRYPT_DSA_PUBLIC_MAGIC_V2: u32 = 843206724;
pub const BCRYPT_DSA_PRIVATE_MAGIC_V2: u32 = 844517444;
pub const BCRYPT_KEY_DATA_BLOB_MAGIC: u32 = 1296188491;
pub const BCRYPT_KEY_DATA_BLOB_VERSION1: u32 = 1;
pub const BCRYPT_DSA_PARAMETERS: &'static [u8; 14usize] = b"DSAParameters\0";
pub const BCRYPT_DSA_PARAMETERS_MAGIC: u32 = 1297109828;
pub const BCRYPT_DSA_PARAMETERS_MAGIC_V2: u32 = 843927620;
pub const BCRYPT_ECC_PARAMETERS: &'static [u8; 14usize] = b"ECCParameters\0";
pub const BCRYPT_ECC_CURVE_NAME: &'static [u8; 13usize] = b"ECCCurveName\0";
pub const BCRYPT_ECC_CURVE_NAME_LIST: &'static [u8; 17usize] = b"ECCCurveNameList\0";
pub const BCRYPT_ECC_PARAMETERS_MAGIC: u32 = 1346585413;
pub const BCRYPT_ECC_CURVE_BRAINPOOLP160R1: &'static [u8; 16usize] = b"brainpoolP160r1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP160T1: &'static [u8; 16usize] = b"brainpoolP160t1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP192R1: &'static [u8; 16usize] = b"brainpoolP192r1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP192T1: &'static [u8; 16usize] = b"brainpoolP192t1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP224R1: &'static [u8; 16usize] = b"brainpoolP224r1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP224T1: &'static [u8; 16usize] = b"brainpoolP224t1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP256R1: &'static [u8; 16usize] = b"brainpoolP256r1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP256T1: &'static [u8; 16usize] = b"brainpoolP256t1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP320R1: &'static [u8; 16usize] = b"brainpoolP320r1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP320T1: &'static [u8; 16usize] = b"brainpoolP320t1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP384R1: &'static [u8; 16usize] = b"brainpoolP384r1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP384T1: &'static [u8; 16usize] = b"brainpoolP384t1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP512R1: &'static [u8; 16usize] = b"brainpoolP512r1\0";
pub const BCRYPT_ECC_CURVE_BRAINPOOLP512T1: &'static [u8; 16usize] = b"brainpoolP512t1\0";
pub const BCRYPT_ECC_CURVE_25519: &'static [u8; 11usize] = b"curve25519\0";
pub const BCRYPT_ECC_CURVE_EC192WAPI: &'static [u8; 10usize] = b"ec192wapi\0";
pub const BCRYPT_ECC_CURVE_NISTP192: &'static [u8; 9usize] = b"nistP192\0";
pub const BCRYPT_ECC_CURVE_NISTP224: &'static [u8; 9usize] = b"nistP224\0";
pub const BCRYPT_ECC_CURVE_NISTP256: &'static [u8; 9usize] = b"nistP256\0";
pub const BCRYPT_ECC_CURVE_NISTP384: &'static [u8; 9usize] = b"nistP384\0";
pub const BCRYPT_ECC_CURVE_NISTP521: &'static [u8; 9usize] = b"nistP521\0";
pub const BCRYPT_ECC_CURVE_NUMSP256T1: &'static [u8; 11usize] = b"numsP256t1\0";
pub const BCRYPT_ECC_CURVE_NUMSP384T1: &'static [u8; 11usize] = b"numsP384t1\0";
pub const BCRYPT_ECC_CURVE_NUMSP512T1: &'static [u8; 11usize] = b"numsP512t1\0";
pub const BCRYPT_ECC_CURVE_SECP160K1: &'static [u8; 10usize] = b"secP160k1\0";
pub const BCRYPT_ECC_CURVE_SECP160R1: &'static [u8; 10usize] = b"secP160r1\0";
pub const BCRYPT_ECC_CURVE_SECP160R2: &'static [u8; 10usize] = b"secP160r2\0";
pub const BCRYPT_ECC_CURVE_SECP192K1: &'static [u8; 10usize] = b"secP192k1\0";
pub const BCRYPT_ECC_CURVE_SECP192R1: &'static [u8; 10usize] = b"secP192r1\0";
pub const BCRYPT_ECC_CURVE_SECP224K1: &'static [u8; 10usize] = b"secP224k1\0";
pub const BCRYPT_ECC_CURVE_SECP224R1: &'static [u8; 10usize] = b"secP224r1\0";
pub const BCRYPT_ECC_CURVE_SECP256K1: &'static [u8; 10usize] = b"secP256k1\0";
pub const BCRYPT_ECC_CURVE_SECP256R1: &'static [u8; 10usize] = b"secP256r1\0";
pub const BCRYPT_ECC_CURVE_SECP384R1: &'static [u8; 10usize] = b"secP384r1\0";
pub const BCRYPT_ECC_CURVE_SECP521R1: &'static [u8; 10usize] = b"secP521r1\0";
pub const BCRYPT_ECC_CURVE_WTLS7: &'static [u8; 6usize] = b"wtls7\0";
pub const BCRYPT_ECC_CURVE_WTLS9: &'static [u8; 6usize] = b"wtls9\0";
pub const BCRYPT_ECC_CURVE_WTLS12: &'static [u8; 7usize] = b"wtls12\0";
pub const BCRYPT_ECC_CURVE_X962P192V1: &'static [u8; 11usize] = b"x962P192v1\0";
pub const BCRYPT_ECC_CURVE_X962P192V2: &'static [u8; 11usize] = b"x962P192v2\0";
pub const BCRYPT_ECC_CURVE_X962P192V3: &'static [u8; 11usize] = b"x962P192v3\0";
pub const BCRYPT_ECC_CURVE_X962P239V1: &'static [u8; 11usize] = b"x962P239v1\0";
pub const BCRYPT_ECC_CURVE_X962P239V2: &'static [u8; 11usize] = b"x962P239v2\0";
pub const BCRYPT_ECC_CURVE_X962P239V3: &'static [u8; 11usize] = b"x962P239v3\0";
pub const BCRYPT_ECC_CURVE_X962P256V1: &'static [u8; 11usize] = b"x962P256v1\0";
pub const MS_PRIMITIVE_PROVIDER: &'static [u8; 29usize] = b"Microsoft Primitive Provider\0";
pub const MS_PLATFORM_CRYPTO_PROVIDER: &'static [u8; 35usize] =
    b"Microsoft Platform Crypto Provider\0";
pub const BCRYPT_RSA_ALGORITHM: &'static [u8; 4usize] = b"RSA\0";
pub const BCRYPT_RSA_SIGN_ALGORITHM: &'static [u8; 9usize] = b"RSA_SIGN\0";
pub const BCRYPT_DH_ALGORITHM: &'static [u8; 3usize] = b"DH\0";
pub const BCRYPT_DSA_ALGORITHM: &'static [u8; 4usize] = b"DSA\0";
pub const BCRYPT_RC2_ALGORITHM: &'static [u8; 4usize] = b"RC2\0";
pub const BCRYPT_RC4_ALGORITHM: &'static [u8; 4usize] = b"RC4\0";
pub const BCRYPT_AES_ALGORITHM: &'static [u8; 4usize] = b"AES\0";
pub const BCRYPT_DES_ALGORITHM: &'static [u8; 4usize] = b"DES\0";
pub const BCRYPT_DESX_ALGORITHM: &'static [u8; 5usize] = b"DESX\0";
pub const BCRYPT_3DES_ALGORITHM: &'static [u8; 5usize] = b"3DES\0";
pub const BCRYPT_3DES_112_ALGORITHM: &'static [u8; 9usize] = b"3DES_112\0";
pub const BCRYPT_MD2_ALGORITHM: &'static [u8; 4usize] = b"MD2\0";
pub const BCRYPT_MD4_ALGORITHM: &'static [u8; 4usize] = b"MD4\0";
pub const BCRYPT_MD5_ALGORITHM: &'static [u8; 4usize] = b"MD5\0";
pub const BCRYPT_SHA1_ALGORITHM: &'static [u8; 5usize] = b"SHA1\0";
pub const BCRYPT_SHA256_ALGORITHM: &'static [u8; 7usize] = b"SHA256\0";
pub const BCRYPT_SHA384_ALGORITHM: &'static [u8; 7usize] = b"SHA384\0";
pub const BCRYPT_SHA512_ALGORITHM: &'static [u8; 7usize] = b"SHA512\0";
pub const BCRYPT_AES_GMAC_ALGORITHM: &'static [u8; 9usize] = b"AES-GMAC\0";
pub const BCRYPT_AES_CMAC_ALGORITHM: &'static [u8; 9usize] = b"AES-CMAC\0";
pub const BCRYPT_ECDSA_P256_ALGORITHM: &'static [u8; 11usize] = b"ECDSA_P256\0";
pub const BCRYPT_ECDSA_P384_ALGORITHM: &'static [u8; 11usize] = b"ECDSA_P384\0";
pub const BCRYPT_ECDSA_P521_ALGORITHM: &'static [u8; 11usize] = b"ECDSA_P521\0";
pub const BCRYPT_ECDH_P256_ALGORITHM: &'static [u8; 10usize] = b"ECDH_P256\0";
pub const BCRYPT_ECDH_P384_ALGORITHM: &'static [u8; 10usize] = b"ECDH_P384\0";
pub const BCRYPT_ECDH_P521_ALGORITHM: &'static [u8; 10usize] = b"ECDH_P521\0";
pub const BCRYPT_RNG_ALGORITHM: &'static [u8; 4usize] = b"RNG\0";
pub const BCRYPT_RNG_FIPS186_DSA_ALGORITHM: &'static [u8; 14usize] = b"FIPS186DSARNG\0";
pub const BCRYPT_RNG_DUAL_EC_ALGORITHM: &'static [u8; 10usize] = b"DUALECRNG\0";
pub const BCRYPT_SP800108_CTR_HMAC_ALGORITHM: &'static [u8; 19usize] = b"SP800_108_CTR_HMAC\0";
pub const BCRYPT_SP80056A_CONCAT_ALGORITHM: &'static [u8; 17usize] = b"SP800_56A_CONCAT\0";
pub const BCRYPT_PBKDF2_ALGORITHM: &'static [u8; 7usize] = b"PBKDF2\0";
pub const BCRYPT_CAPI_KDF_ALGORITHM: &'static [u8; 9usize] = b"CAPI_KDF\0";
pub const BCRYPT_TLS1_1_KDF_ALGORITHM: &'static [u8; 11usize] = b"TLS1_1_KDF\0";
pub const BCRYPT_TLS1_2_KDF_ALGORITHM: &'static [u8; 11usize] = b"TLS1_2_KDF\0";
pub const BCRYPT_ECDSA_ALGORITHM: &'static [u8; 6usize] = b"ECDSA\0";
pub const BCRYPT_ECDH_ALGORITHM: &'static [u8; 5usize] = b"ECDH\0";
pub const BCRYPT_XTS_AES_ALGORITHM: &'static [u8; 8usize] = b"XTS-AES\0";
pub const BCRYPT_HKDF_ALGORITHM: &'static [u8; 5usize] = b"HKDF\0";
pub const BCRYPT_CIPHER_INTERFACE: u32 = 1;
pub const BCRYPT_HASH_INTERFACE: u32 = 2;
pub const BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE: u32 = 3;
pub const BCRYPT_SECRET_AGREEMENT_INTERFACE: u32 = 4;
pub const BCRYPT_SIGNATURE_INTERFACE: u32 = 5;
pub const BCRYPT_RNG_INTERFACE: u32 = 6;
pub const BCRYPT_KEY_DERIVATION_INTERFACE: u32 = 7;
pub const BCRYPT_ALG_HANDLE_HMAC_FLAG: u32 = 8;
pub const BCRYPT_HASH_REUSABLE_FLAG: u32 = 32;
pub const BCRYPT_CAPI_AES_FLAG: u32 = 16;
pub const BCRYPT_MULTI_FLAG: u32 = 64;
pub const BCRYPT_BUFFERS_LOCKED_FLAG: u32 = 64;
pub const BCRYPT_EXTENDED_KEYSIZE: u32 = 128;
pub const BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS: u32 = 256;
pub const BCRYPT_CIPHER_OPERATION: u32 = 1;
pub const BCRYPT_HASH_OPERATION: u32 = 2;
pub const BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION: u32 = 4;
pub const BCRYPT_SECRET_AGREEMENT_OPERATION: u32 = 8;
pub const BCRYPT_SIGNATURE_OPERATION: u32 = 16;
pub const BCRYPT_RNG_OPERATION: u32 = 32;
pub const BCRYPT_KEY_DERIVATION_OPERATION: u32 = 64;
pub const BCRYPT_PUBLIC_KEY_FLAG: u32 = 1;
pub const BCRYPT_PRIVATE_KEY_FLAG: u32 = 2;
pub const BCRYPT_NO_KEY_VALIDATION: u32 = 8;
pub const BCRYPT_RNG_USE_ENTROPY_IN_BUFFER: u32 = 1;
pub const BCRYPT_USE_SYSTEM_PREFERRED_RNG: u32 = 2;
pub const BCRYPT_HASH_INTERFACE_MAJORVERSION_2: u32 = 2;
pub const CRYPT_MIN_DEPENDENCIES: u32 = 1;
pub const CRYPT_PROCESS_ISOLATE: u32 = 65536;
pub const CRYPT_UM: u32 = 1;
pub const CRYPT_KM: u32 = 2;
pub const CRYPT_MM: u32 = 3;
pub const CRYPT_ANY: u32 = 4;
pub const CRYPT_OVERWRITE: u32 = 1;
pub const CRYPT_LOCAL: u32 = 1;
pub const CRYPT_DOMAIN: u32 = 2;
pub const CRYPT_EXCLUSIVE: u32 = 1;
pub const CRYPT_OVERRIDE: u32 = 65536;
pub const CRYPT_ALL_FUNCTIONS: u32 = 1;
pub const CRYPT_ALL_PROVIDERS: u32 = 2;
pub const CRYPT_PRIORITY_TOP: u32 = 0;
pub const CRYPT_PRIORITY_BOTTOM: u32 = 4294967295;
pub const CRYPT_DEFAULT_CONTEXT: &'static [u8; 8usize] = b"Default\0";
pub const NCRYPT_MAX_KEY_NAME_LENGTH: u32 = 512;
pub const NCRYPT_MAX_ALG_ID_LENGTH: u32 = 512;
pub const MS_KEY_STORAGE_PROVIDER: &'static [u8; 40usize] =
    b"Microsoft Software Key Storage Provider\0";
pub const MS_SMART_CARD_KEY_STORAGE_PROVIDER: &'static [u8; 42usize] =
    b"Microsoft Smart Card Key Storage Provider\0";
pub const MS_PLATFORM_KEY_STORAGE_PROVIDER: &'static [u8; 35usize] =
    b"Microsoft Platform Crypto Provider\0";
pub const MS_NGC_KEY_STORAGE_PROVIDER: &'static [u8; 40usize] =
    b"Microsoft Passport Key Storage Provider\0";
pub const TPM_RSA_SRK_SEAL_KEY: &'static [u8; 68usize] =
    b"MICROSOFT_PCP_KSP_RSA_SEAL_KEY_3BD1C4BF-004E-4E2F-8A4D-0BF633DCB074\0";
pub const NCRYPT_RSA_ALGORITHM: &'static [u8; 4usize] = b"RSA\0";
pub const NCRYPT_RSA_SIGN_ALGORITHM: &'static [u8; 9usize] = b"RSA_SIGN\0";
pub const NCRYPT_DH_ALGORITHM: &'static [u8; 3usize] = b"DH\0";
pub const NCRYPT_DSA_ALGORITHM: &'static [u8; 4usize] = b"DSA\0";
pub const NCRYPT_MD2_ALGORITHM: &'static [u8; 4usize] = b"MD2\0";
pub const NCRYPT_MD4_ALGORITHM: &'static [u8; 4usize] = b"MD4\0";
pub const NCRYPT_MD5_ALGORITHM: &'static [u8; 4usize] = b"MD5\0";
pub const NCRYPT_SHA1_ALGORITHM: &'static [u8; 5usize] = b"SHA1\0";
pub const NCRYPT_SHA256_ALGORITHM: &'static [u8; 7usize] = b"SHA256\0";
pub const NCRYPT_SHA384_ALGORITHM: &'static [u8; 7usize] = b"SHA384\0";
pub const NCRYPT_SHA512_ALGORITHM: &'static [u8; 7usize] = b"SHA512\0";
pub const NCRYPT_ECDSA_P256_ALGORITHM: &'static [u8; 11usize] = b"ECDSA_P256\0";
pub const NCRYPT_ECDSA_P384_ALGORITHM: &'static [u8; 11usize] = b"ECDSA_P384\0";
pub const NCRYPT_ECDSA_P521_ALGORITHM: &'static [u8; 11usize] = b"ECDSA_P521\0";
pub const NCRYPT_ECDH_P256_ALGORITHM: &'static [u8; 10usize] = b"ECDH_P256\0";
pub const NCRYPT_ECDH_P384_ALGORITHM: &'static [u8; 10usize] = b"ECDH_P384\0";
pub const NCRYPT_ECDH_P521_ALGORITHM: &'static [u8; 10usize] = b"ECDH_P521\0";
pub const NCRYPT_AES_ALGORITHM: &'static [u8; 4usize] = b"AES\0";
pub const NCRYPT_RC2_ALGORITHM: &'static [u8; 4usize] = b"RC2\0";
pub const NCRYPT_3DES_ALGORITHM: &'static [u8; 5usize] = b"3DES\0";
pub const NCRYPT_DES_ALGORITHM: &'static [u8; 4usize] = b"DES\0";
pub const NCRYPT_DESX_ALGORITHM: &'static [u8; 5usize] = b"DESX\0";
pub const NCRYPT_3DES_112_ALGORITHM: &'static [u8; 9usize] = b"3DES_112\0";
pub const NCRYPT_SP800108_CTR_HMAC_ALGORITHM: &'static [u8; 19usize] = b"SP800_108_CTR_HMAC\0";
pub const NCRYPT_SP80056A_CONCAT_ALGORITHM: &'static [u8; 17usize] = b"SP800_56A_CONCAT\0";
pub const NCRYPT_PBKDF2_ALGORITHM: &'static [u8; 7usize] = b"PBKDF2\0";
pub const NCRYPT_CAPI_KDF_ALGORITHM: &'static [u8; 9usize] = b"CAPI_KDF\0";
pub const NCRYPT_ECDSA_ALGORITHM: &'static [u8; 6usize] = b"ECDSA\0";
pub const NCRYPT_ECDH_ALGORITHM: &'static [u8; 5usize] = b"ECDH\0";
pub const NCRYPT_KEY_STORAGE_ALGORITHM: &'static [u8; 12usize] = b"KEY_STORAGE\0";
pub const NCRYPT_HMAC_SHA256_ALGORITHM: &'static [u8; 12usize] = b"HMAC-SHA256\0";
pub const NCRYPT_CIPHER_INTERFACE: u32 = 1;
pub const NCRYPT_HASH_INTERFACE: u32 = 2;
pub const NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE: u32 = 3;
pub const NCRYPT_SECRET_AGREEMENT_INTERFACE: u32 = 4;
pub const NCRYPT_SIGNATURE_INTERFACE: u32 = 5;
pub const NCRYPT_KEY_DERIVATION_INTERFACE: u32 = 7;
pub const NCRYPT_KEY_STORAGE_INTERFACE: u32 = 65537;
pub const NCRYPT_SCHANNEL_INTERFACE: u32 = 65538;
pub const NCRYPT_SCHANNEL_SIGNATURE_INTERFACE: u32 = 65539;
pub const NCRYPT_KEY_PROTECTION_INTERFACE: u32 = 65540;
pub const NCRYPT_RSA_ALGORITHM_GROUP: &'static [u8; 4usize] = b"RSA\0";
pub const NCRYPT_DH_ALGORITHM_GROUP: &'static [u8; 3usize] = b"DH\0";
pub const NCRYPT_DSA_ALGORITHM_GROUP: &'static [u8; 4usize] = b"DSA\0";
pub const NCRYPT_ECDSA_ALGORITHM_GROUP: &'static [u8; 6usize] = b"ECDSA\0";
pub const NCRYPT_ECDH_ALGORITHM_GROUP: &'static [u8; 5usize] = b"ECDH\0";
pub const NCRYPT_AES_ALGORITHM_GROUP: &'static [u8; 4usize] = b"AES\0";
pub const NCRYPT_RC2_ALGORITHM_GROUP: &'static [u8; 4usize] = b"RC2\0";
pub const NCRYPT_DES_ALGORITHM_GROUP: &'static [u8; 4usize] = b"DES\0";
pub const NCRYPT_KEY_DERIVATION_GROUP: &'static [u8; 15usize] = b"KEY_DERIVATION\0";
pub const NCRYPTBUFFER_VERSION: u32 = 0;
pub const NCRYPTBUFFER_EMPTY: u32 = 0;
pub const NCRYPTBUFFER_DATA: u32 = 1;
pub const NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING: u32 = 3;
pub const NCRYPTBUFFER_PROTECTION_FLAGS: u32 = 4;
pub const NCRYPTBUFFER_SSL_CLIENT_RANDOM: u32 = 20;
pub const NCRYPTBUFFER_SSL_SERVER_RANDOM: u32 = 21;
pub const NCRYPTBUFFER_SSL_HIGHEST_VERSION: u32 = 22;
pub const NCRYPTBUFFER_SSL_CLEAR_KEY: u32 = 23;
pub const NCRYPTBUFFER_SSL_KEY_ARG_DATA: u32 = 24;
pub const NCRYPTBUFFER_SSL_SESSION_HASH: u32 = 25;
pub const NCRYPTBUFFER_PKCS_OID: u32 = 40;
pub const NCRYPTBUFFER_PKCS_ALG_OID: u32 = 41;
pub const NCRYPTBUFFER_PKCS_ALG_PARAM: u32 = 42;
pub const NCRYPTBUFFER_PKCS_ALG_ID: u32 = 43;
pub const NCRYPTBUFFER_PKCS_ATTRS: u32 = 44;
pub const NCRYPTBUFFER_PKCS_KEY_NAME: u32 = 45;
pub const NCRYPTBUFFER_PKCS_SECRET: u32 = 46;
pub const NCRYPTBUFFER_CERT_BLOB: u32 = 47;
pub const NCRYPTBUFFER_CLAIM_IDBINDING_NONCE: u32 = 48;
pub const NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE: u32 = 49;
pub const NCRYPTBUFFER_KEY_PROPERTY_FLAGS: u32 = 50;
pub const NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB: u32 = 51;
pub const NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE: u32 = 52;
pub const NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED: u32 = 53;
pub const NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS: u32 = 54;
pub const NCRYPTBUFFER_ECC_CURVE_NAME: u32 = 60;
pub const NCRYPTBUFFER_ECC_PARAMETERS: u32 = 61;
pub const NCRYPTBUFFER_TPM_SEAL_PASSWORD: u32 = 70;
pub const NCRYPTBUFFER_TPM_SEAL_POLICYINFO: u32 = 71;
pub const NCRYPTBUFFER_TPM_SEAL_TICKET: u32 = 72;
pub const NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION: u32 = 73;
pub const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK: u32 = 80;
pub const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE: u32 = 81;
pub const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE: u32 = 82;
pub const NCRYPT_CIPHER_NO_PADDING_FLAG: u32 = 0;
pub const NCRYPT_CIPHER_BLOCK_PADDING_FLAG: u32 = 1;
pub const NCRYPT_CIPHER_OTHER_PADDING_FLAG: u32 = 2;
pub const NCRYPT_PLATFORM_ATTEST_MAGIC: u32 = 1146110288;
pub const NCRYPT_KEY_ATTEST_MAGIC: u32 = 1146110283;
pub const NCRYPT_CLAIM_AUTHORITY_ONLY: u32 = 1;
pub const NCRYPT_CLAIM_SUBJECT_ONLY: u32 = 2;
pub const NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY: u32 = 258;
pub const NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT: u32 = 3;
pub const NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT: u32 = 4;
pub const NCRYPT_CLAIM_UNKNOWN: u32 = 4096;
pub const NCRYPT_CLAIM_PLATFORM: u32 = 65536;
pub const NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION: u32 = 1;
pub const NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY: u32 = 2;
pub const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0: u32 = 0;
pub const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION: u32 = 0;
pub const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0: u32 = 0;
pub const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION: u32 = 0;
pub const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0: u32 = 0;
pub const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION: u32 = 0;
pub const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0: u32 = 0;
pub const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION: u32 = 0;
pub const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0: u32 = 0;
pub const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION: u32 = 0;
pub const NCRYPT_NO_PADDING_FLAG: u32 = 1;
pub const NCRYPT_PAD_PKCS1_FLAG: u32 = 2;
pub const NCRYPT_PAD_OAEP_FLAG: u32 = 4;
pub const NCRYPT_PAD_PSS_FLAG: u32 = 8;
pub const NCRYPT_PAD_CIPHER_FLAG: u32 = 16;
pub const NCRYPT_ATTESTATION_FLAG: u32 = 32;
pub const NCRYPT_SEALING_FLAG: u32 = 256;
pub const NCRYPT_REGISTER_NOTIFY_FLAG: u32 = 1;
pub const NCRYPT_UNREGISTER_NOTIFY_FLAG: u32 = 2;
pub const NCRYPT_NO_KEY_VALIDATION: u32 = 8;
pub const NCRYPT_MACHINE_KEY_FLAG: u32 = 32;
pub const NCRYPT_SILENT_FLAG: u32 = 64;
pub const NCRYPT_OVERWRITE_KEY_FLAG: u32 = 128;
pub const NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG: u32 = 512;
pub const NCRYPT_DO_NOT_FINALIZE_FLAG: u32 = 1024;
pub const NCRYPT_EXPORT_LEGACY_FLAG: u32 = 2048;
pub const NCRYPT_IGNORE_DEVICE_STATE_FLAG: u32 = 4096;
pub const NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG: u32 = 8192;
pub const NCRYPT_NO_CACHED_PASSWORD: u32 = 16384;
pub const NCRYPT_PROTECT_TO_LOCAL_SYSTEM: u32 = 32768;
pub const NCRYPT_PERSIST_ONLY_FLAG: u32 = 1073741824;
pub const NCRYPT_PERSIST_FLAG: u32 = 2147483648;
pub const NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG: u32 = 65536;
pub const NCRYPT_USE_VIRTUAL_ISOLATION_FLAG: u32 = 131072;
pub const NCRYPT_USE_PER_BOOT_KEY_FLAG: u32 = 262144;
pub const NCRYPT_CIPHER_OPERATION: u32 = 1;
pub const NCRYPT_HASH_OPERATION: u32 = 2;
pub const NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION: u32 = 4;
pub const NCRYPT_SECRET_AGREEMENT_OPERATION: u32 = 8;
pub const NCRYPT_SIGNATURE_OPERATION: u32 = 16;
pub const NCRYPT_RNG_OPERATION: u32 = 32;
pub const NCRYPT_KEY_DERIVATION_OPERATION: u32 = 64;
pub const NCRYPT_AUTHORITY_KEY_FLAG: u32 = 256;
pub const NCRYPT_NAME_PROPERTY: &'static [u8; 5usize] = b"Name\0";
pub const NCRYPT_UNIQUE_NAME_PROPERTY: &'static [u8; 12usize] = b"Unique Name\0";
pub const NCRYPT_ALGORITHM_PROPERTY: &'static [u8; 15usize] = b"Algorithm Name\0";
pub const NCRYPT_LENGTH_PROPERTY: &'static [u8; 7usize] = b"Length\0";
pub const NCRYPT_LENGTHS_PROPERTY: &'static [u8; 8usize] = b"Lengths\0";
pub const NCRYPT_BLOCK_LENGTH_PROPERTY: &'static [u8; 13usize] = b"Block Length\0";
pub const NCRYPT_PUBLIC_LENGTH_PROPERTY: &'static [u8; 16usize] = b"PublicKeyLength\0";
pub const NCRYPT_SIGNATURE_LENGTH_PROPERTY: &'static [u8; 16usize] = b"SignatureLength\0";
pub const NCRYPT_CHAINING_MODE_PROPERTY: &'static [u8; 14usize] = b"Chaining Mode\0";
pub const NCRYPT_AUTH_TAG_LENGTH: &'static [u8; 14usize] = b"AuthTagLength\0";
pub const NCRYPT_UI_POLICY_PROPERTY: &'static [u8; 10usize] = b"UI Policy\0";
pub const NCRYPT_EXPORT_POLICY_PROPERTY: &'static [u8; 14usize] = b"Export Policy\0";
pub const NCRYPT_WINDOW_HANDLE_PROPERTY: &'static [u8; 12usize] = b"HWND Handle\0";
pub const NCRYPT_USE_CONTEXT_PROPERTY: &'static [u8; 12usize] = b"Use Context\0";
pub const NCRYPT_IMPL_TYPE_PROPERTY: &'static [u8; 10usize] = b"Impl Type\0";
pub const NCRYPT_KEY_USAGE_PROPERTY: &'static [u8; 10usize] = b"Key Usage\0";
pub const NCRYPT_KEY_TYPE_PROPERTY: &'static [u8; 9usize] = b"Key Type\0";
pub const NCRYPT_VERSION_PROPERTY: &'static [u8; 8usize] = b"Version\0";
pub const NCRYPT_SECURITY_DESCR_SUPPORT_PROPERTY: &'static [u8; 23usize] =
    b"Security Descr Support\0";
pub const NCRYPT_SECURITY_DESCR_PROPERTY: &'static [u8; 15usize] = b"Security Descr\0";
pub const NCRYPT_USE_COUNT_ENABLED_PROPERTY: &'static [u8; 18usize] = b"Enabled Use Count\0";
pub const NCRYPT_USE_COUNT_PROPERTY: &'static [u8; 10usize] = b"Use Count\0";
pub const NCRYPT_LAST_MODIFIED_PROPERTY: &'static [u8; 9usize] = b"Modified\0";
pub const NCRYPT_MAX_NAME_LENGTH_PROPERTY: &'static [u8; 16usize] = b"Max Name Length\0";
pub const NCRYPT_ALGORITHM_GROUP_PROPERTY: &'static [u8; 16usize] = b"Algorithm Group\0";
pub const NCRYPT_DH_PARAMETERS_PROPERTY: &'static [u8; 13usize] = b"DHParameters\0";
pub const NCRYPT_ECC_PARAMETERS_PROPERTY: &'static [u8; 14usize] = b"ECCParameters\0";
pub const NCRYPT_ECC_CURVE_NAME_PROPERTY: &'static [u8; 13usize] = b"ECCCurveName\0";
pub const NCRYPT_ECC_CURVE_NAME_LIST_PROPERTY: &'static [u8; 17usize] = b"ECCCurveNameList\0";
pub const NCRYPT_USE_VIRTUAL_ISOLATION_PROPERTY: &'static [u8; 12usize] = b"Virtual Iso\0";
pub const NCRYPT_USE_PER_BOOT_KEY_PROPERTY: &'static [u8; 13usize] = b"Per Boot Key\0";
pub const NCRYPT_PROVIDER_HANDLE_PROPERTY: &'static [u8; 16usize] = b"Provider Handle\0";
pub const NCRYPT_PIN_PROPERTY: &'static [u8; 13usize] = b"SmartCardPin\0";
pub const NCRYPT_READER_PROPERTY: &'static [u8; 16usize] = b"SmartCardReader\0";
pub const NCRYPT_SMARTCARD_GUID_PROPERTY: &'static [u8; 14usize] = b"SmartCardGuid\0";
pub const NCRYPT_CERTIFICATE_PROPERTY: &'static [u8; 24usize] = b"SmartCardKeyCertificate\0";
pub const NCRYPT_PIN_PROMPT_PROPERTY: &'static [u8; 19usize] = b"SmartCardPinPrompt\0";
pub const NCRYPT_USER_CERTSTORE_PROPERTY: &'static [u8; 23usize] = b"SmartCardUserCertStore\0";
pub const NCRYPT_ROOT_CERTSTORE_PROPERTY: &'static [u8; 23usize] = b"SmartcardRootCertStore\0";
pub const NCRYPT_SECURE_PIN_PROPERTY: &'static [u8; 19usize] = b"SmartCardSecurePin\0";
pub const NCRYPT_ASSOCIATED_ECDH_KEY: &'static [u8; 27usize] = b"SmartCardAssociatedECDHKey\0";
pub const NCRYPT_SCARD_PIN_ID: &'static [u8; 15usize] = b"SmartCardPinId\0";
pub const NCRYPT_SCARD_PIN_INFO: &'static [u8; 17usize] = b"SmartCardPinInfo\0";
pub const NCRYPT_READER_ICON_PROPERTY: &'static [u8; 20usize] = b"SmartCardReaderIcon\0";
pub const NCRYPT_KDF_SECRET_VALUE: &'static [u8; 13usize] = b"KDFKeySecret\0";
pub const NCRYPT_DISMISS_UI_TIMEOUT_SEC_PROPERTY: &'static [u8; 33usize] =
    b"SmartCardDismissUITimeoutSeconds\0";
pub const NCRYPT_PCP_PLATFORM_TYPE_PROPERTY: &'static [u8; 18usize] = b"PCP_PLATFORM_TYPE\0";
pub const NCRYPT_PCP_PROVIDER_VERSION_PROPERTY: &'static [u8; 21usize] = b"PCP_PROVIDER_VERSION\0";
pub const NCRYPT_PCP_EKPUB_PROPERTY: &'static [u8; 10usize] = b"PCP_EKPUB\0";
pub const NCRYPT_PCP_EKCERT_PROPERTY: &'static [u8; 11usize] = b"PCP_EKCERT\0";
pub const NCRYPT_PCP_EKNVCERT_PROPERTY: &'static [u8; 13usize] = b"PCP_EKNVCERT\0";
pub const NCRYPT_PCP_RSA_EKPUB_PROPERTY: &'static [u8; 14usize] = b"PCP_RSA_EKPUB\0";
pub const NCRYPT_PCP_RSA_EKCERT_PROPERTY: &'static [u8; 15usize] = b"PCP_RSA_EKCERT\0";
pub const NCRYPT_PCP_RSA_EKNVCERT_PROPERTY: &'static [u8; 17usize] = b"PCP_RSA_EKNVCERT\0";
pub const NCRYPT_PCP_ECC_EKPUB_PROPERTY: &'static [u8; 14usize] = b"PCP_ECC_EKPUB\0";
pub const NCRYPT_PCP_ECC_EKCERT_PROPERTY: &'static [u8; 15usize] = b"PCP_ECC_EKCERT\0";
pub const NCRYPT_PCP_ECC_EKNVCERT_PROPERTY: &'static [u8; 17usize] = b"PCP_ECC_EKNVCERT\0";
pub const NCRYPT_PCP_SRKPUB_PROPERTY: &'static [u8; 11usize] = b"PCP_SRKPUB\0";
pub const NCRYPT_PCP_PCRTABLE_PROPERTY: &'static [u8; 13usize] = b"PCP_PCRTABLE\0";
pub const NCRYPT_PCP_CHANGEPASSWORD_PROPERTY: &'static [u8; 19usize] = b"PCP_CHANGEPASSWORD\0";
pub const NCRYPT_PCP_PASSWORD_REQUIRED_PROPERTY: &'static [u8; 22usize] =
    b"PCP_PASSWORD_REQUIRED\0";
pub const NCRYPT_PCP_USAGEAUTH_PROPERTY: &'static [u8; 14usize] = b"PCP_USAGEAUTH\0";
pub const NCRYPT_PCP_MIGRATIONPASSWORD_PROPERTY: &'static [u8; 22usize] =
    b"PCP_MIGRATIONPASSWORD\0";
pub const NCRYPT_PCP_EXPORT_ALLOWED_PROPERTY: &'static [u8; 19usize] = b"PCP_EXPORT_ALLOWED\0";
pub const NCRYPT_PCP_STORAGEPARENT_PROPERTY: &'static [u8; 18usize] = b"PCP_STORAGEPARENT\0";
pub const NCRYPT_PCP_PROVIDERHANDLE_PROPERTY: &'static [u8; 20usize] = b"PCP_PROVIDERMHANDLE\0";
pub const NCRYPT_PCP_PLATFORMHANDLE_PROPERTY: &'static [u8; 19usize] = b"PCP_PLATFORMHANDLE\0";
pub const NCRYPT_PCP_PLATFORM_BINDING_PCRMASK_PROPERTY: &'static [u8; 29usize] =
    b"PCP_PLATFORM_BINDING_PCRMASK\0";
pub const NCRYPT_PCP_PLATFORM_BINDING_PCRDIGESTLIST_PROPERTY: &'static [u8; 35usize] =
    b"PCP_PLATFORM_BINDING_PCRDIGESTLIST\0";
pub const NCRYPT_PCP_PLATFORM_BINDING_PCRDIGEST_PROPERTY: &'static [u8; 31usize] =
    b"PCP_PLATFORM_BINDING_PCRDIGEST\0";
pub const NCRYPT_PCP_KEY_USAGE_POLICY_PROPERTY: &'static [u8; 21usize] = b"PCP_KEY_USAGE_POLICY\0";
pub const NCRYPT_PCP_RSA_SCHEME_PROPERTY: &'static [u8; 15usize] = b"PCP_RSA_SCHEME\0";
pub const NCRYPT_PCP_RSA_SCHEME_HASH_ALG_PROPERTY: &'static [u8; 24usize] =
    b"PCP_RSA_SCHEME_HASH_ALG\0";
pub const NCRYPT_PCP_TPM12_IDBINDING_PROPERTY: &'static [u8; 20usize] = b"PCP_TPM12_IDBINDING\0";
pub const NCRYPT_PCP_TPM12_IDBINDING_DYNAMIC_PROPERTY: &'static [u8; 28usize] =
    b"PCP_TPM12_IDBINDING_DYNAMIC\0";
pub const NCRYPT_PCP_TPM12_IDACTIVATION_PROPERTY: &'static [u8; 23usize] =
    b"PCP_TPM12_IDACTIVATION\0";
pub const NCRYPT_PCP_KEYATTESTATION_PROPERTY: &'static [u8; 25usize] =
    b"PCP_TPM12_KEYATTESTATION\0";
pub const NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY: &'static [u8; 35usize] =
    b"PCP_ALTERNATE_KEY_STORAGE_LOCATION\0";
pub const NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED_PROPERTY: &'static [u8; 34usize] =
    b"PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED\0";
pub const NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY_PROPERTY: &'static [u8; 37usize] =
    b"PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY\0";
pub const NCRYPT_PCP_HMAC_AUTH_POLICYREF: &'static [u8; 24usize] = b"PCP_HMAC_AUTH_POLICYREF\0";
pub const NCRYPT_PCP_HMAC_AUTH_POLICYINFO: &'static [u8; 25usize] = b"PCP_HMAC_AUTH_POLICYINFO\0";
pub const NCRYPT_PCP_HMAC_AUTH_NONCE: &'static [u8; 20usize] = b"PCP_HMAC_AUTH_NONCE\0";
pub const NCRYPT_PCP_HMAC_AUTH_SIGNATURE: &'static [u8; 24usize] = b"PCP_HMAC_AUTH_SIGNATURE\0";
pub const NCRYPT_PCP_HMAC_AUTH_TICKET: &'static [u8; 21usize] = b"PCP_HMAC_AUTH_TICKET\0";
pub const NCRYPT_PCP_NO_DA_PROTECTION_PROPERTY: &'static [u8; 21usize] = b"PCP_NO_DA_PROTECTION\0";
pub const NCRYPT_PCP_TPM_MANUFACTURER_ID_PROPERTY: &'static [u8; 24usize] =
    b"PCP_TPM_MANUFACTURER_ID\0";
pub const NCRYPT_PCP_TPM_FW_VERSION_PROPERTY: &'static [u8; 19usize] = b"PCP_TPM_FW_VERSION\0";
pub const NCRYPT_PCP_TPM2BNAME_PROPERTY: &'static [u8; 14usize] = b"PCP_TPM2BNAME\0";
pub const NCRYPT_PCP_TPM_VERSION_PROPERTY: &'static [u8; 16usize] = b"PCP_TPM_VERSION\0";
pub const NCRYPT_PCP_RAW_POLICYDIGEST_PROPERTY: &'static [u8; 21usize] = b"PCP_RAW_POLICYDIGEST\0";
pub const NCRYPT_PCP_KEY_CREATIONHASH_PROPERTY: &'static [u8; 21usize] = b"PCP_KEY_CREATIONHASH\0";
pub const NCRYPT_PCP_KEY_CREATIONTICKET_PROPERTY: &'static [u8; 23usize] =
    b"PCP_KEY_CREATIONTICKET\0";
pub const NCRYPT_PCP_SESSIONID_PROPERTY: &'static [u8; 14usize] = b"PCP_SESSIONID\0";
pub const NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN: u32 = 0;
pub const NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM: u32 = 1;
pub const NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE: u32 = 2;
pub const NCRYPT_TPM_PAD_PSS_IGNORE_SALT: u32 = 32;
pub const IFX_RSA_KEYGEN_VUL_NOT_AFFECTED: u32 = 0;
pub const IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1: u32 = 1;
pub const IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2: u32 = 2;
pub const NCRYPT_TPM12_PROVIDER: u32 = 65536;
pub const NCRYPT_PCP_SIGNATURE_KEY: u32 = 1;
pub const NCRYPT_PCP_ENCRYPTION_KEY: u32 = 2;
pub const NCRYPT_PCP_GENERIC_KEY: u32 = 3;
pub const NCRYPT_PCP_STORAGE_KEY: u32 = 4;
pub const NCRYPT_PCP_IDENTITY_KEY: u32 = 8;
pub const NCRYPT_PCP_HMACVERIFICATION_KEY: u32 = 16;
pub const NCRYPT_SCARD_NGC_KEY_NAME: &'static [u8; 20usize] = b"SmartCardNgcKeyName\0";
pub const NCRYPT_PCP_PLATFORM_BINDING_PCRALGID_PROPERTY: &'static [u8; 30usize] =
    b"PCP_PLATFORM_BINDING_PCRALGID\0";
pub const NCRYPT_INITIALIZATION_VECTOR: &'static [u8; 3usize] = b"IV\0";
pub const NCRYPT_CHANGEPASSWORD_PROPERTY: &'static [u8; 19usize] = b"PCP_CHANGEPASSWORD\0";
pub const NCRYPT_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY: &'static [u8; 35usize] =
    b"PCP_ALTERNATE_KEY_STORAGE_LOCATION\0";
pub const NCRYPT_KEY_ACCESS_POLICY_PROPERTY: &'static [u8; 18usize] = b"Key Access Policy\0";
pub const NCRYPT_MAX_PROPERTY_NAME: u32 = 64;
pub const NCRYPT_MAX_PROPERTY_DATA: u32 = 1048576;
pub const NCRYPT_ALLOW_EXPORT_FLAG: u32 = 1;
pub const NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG: u32 = 2;
pub const NCRYPT_ALLOW_ARCHIVING_FLAG: u32 = 4;
pub const NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG: u32 = 8;
pub const NCRYPT_IMPL_HARDWARE_FLAG: u32 = 1;
pub const NCRYPT_IMPL_SOFTWARE_FLAG: u32 = 2;
pub const NCRYPT_IMPL_REMOVABLE_FLAG: u32 = 8;
pub const NCRYPT_IMPL_HARDWARE_RNG_FLAG: u32 = 16;
pub const NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG: u32 = 32;
pub const NCRYPT_ALLOW_DECRYPT_FLAG: u32 = 1;
pub const NCRYPT_ALLOW_SIGNING_FLAG: u32 = 2;
pub const NCRYPT_ALLOW_KEY_AGREEMENT_FLAG: u32 = 4;
pub const NCRYPT_ALLOW_KEY_IMPORT_FLAG: u32 = 8;
pub const NCRYPT_ALLOW_ALL_USAGES: u32 = 16777215;
pub const NCRYPT_UI_PROTECT_KEY_FLAG: u32 = 1;
pub const NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG: u32 = 2;
pub const NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG: u32 = 4;
pub const NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG: u32 = 8;
pub const NCRYPT_PIN_CACHE_FREE_APPLICATION_TICKET_PROPERTY: &'static [u8; 30usize] =
    b"PinCacheFreeApplicationTicket\0";
pub const NCRYPT_PIN_CACHE_FLAGS_PROPERTY: &'static [u8; 14usize] = b"PinCacheFlags\0";
pub const NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG: u32 = 1;
pub const NCRYPT_PIN_CACHE_APPLICATION_TICKET_PROPERTY: &'static [u8; 26usize] =
    b"PinCacheApplicationTicket\0";
pub const NCRYPT_PIN_CACHE_APPLICATION_IMAGE_PROPERTY: &'static [u8; 25usize] =
    b"PinCacheApplicationImage\0";
pub const NCRYPT_PIN_CACHE_APPLICATION_STATUS_PROPERTY: &'static [u8; 26usize] =
    b"PinCacheApplicationStatus\0";
pub const NCRYPT_PIN_CACHE_PIN_PROPERTY: &'static [u8; 12usize] = b"PinCachePin\0";
pub const NCRYPT_PIN_CACHE_IS_GESTURE_REQUIRED_PROPERTY: &'static [u8; 26usize] =
    b"PinCacheIsGestureRequired\0";
pub const NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG: u32 = 1;
pub const NCRYPT_PIN_CACHE_PIN_BYTE_LENGTH: u32 = 90;
pub const NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH: u32 = 90;
pub const NCRYPT_PIN_CACHE_CLEAR_PROPERTY: &'static [u8; 14usize] = b"PinCacheClear\0";
pub const NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION: u32 = 1;
pub const NCRYPT_KEY_ACCESS_POLICY_VERSION: u32 = 1;
pub const NCRYPT_ALLOW_SILENT_KEY_ACCESS: u32 = 1;
pub const NCRYPT_CIPHER_KEY_BLOB_MAGIC: u32 = 1380470851;
pub const NCRYPT_KDF_KEY_BLOB_MAGIC: u32 = 826688587;
pub const NCRYPT_PROTECTED_KEY_BLOB_MAGIC: u32 = 1263817296;
pub const NCRYPT_CIPHER_KEY_BLOB: &'static [u8; 14usize] = b"CipherKeyBlob\0";
pub const NCRYPT_KDF_KEY_BLOB: &'static [u8; 11usize] = b"KDFKeyBlob\0";
pub const NCRYPT_PROTECTED_KEY_BLOB: &'static [u8; 17usize] = b"ProtectedKeyBlob\0";
pub const NCRYPT_TPM_LOADABLE_KEY_BLOB: &'static [u8; 23usize] = b"PcpTpmProtectedKeyBlob\0";
pub const NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC: u32 = 1297371211;
pub const NCRYPT_PKCS7_ENVELOPE_BLOB: &'static [u8; 15usize] = b"PKCS7_ENVELOPE\0";
pub const NCRYPT_PKCS8_PRIVATE_KEY_BLOB: &'static [u8; 17usize] = b"PKCS8_PRIVATEKEY\0";
pub const NCRYPT_OPAQUETRANSPORT_BLOB: &'static [u8; 16usize] = b"OpaqueTransport\0";
pub const NCRYPT_ISOLATED_KEY_ENVELOPE_BLOB: &'static [u8; 22usize] = b"ISOLATED_KEY_ENVELOPE\0";
pub const szOID_RSA: &'static [u8; 15usize] = b"1.2.840.113549\0";
pub const szOID_PKCS: &'static [u8; 17usize] = b"1.2.840.113549.1\0";
pub const szOID_RSA_HASH: &'static [u8; 17usize] = b"1.2.840.113549.2\0";
pub const szOID_RSA_ENCRYPT: &'static [u8; 17usize] = b"1.2.840.113549.3\0";
pub const szOID_PKCS_1: &'static [u8; 19usize] = b"1.2.840.113549.1.1\0";
pub const szOID_PKCS_2: &'static [u8; 19usize] = b"1.2.840.113549.1.2\0";
pub const szOID_PKCS_3: &'static [u8; 19usize] = b"1.2.840.113549.1.3\0";
pub const szOID_PKCS_4: &'static [u8; 19usize] = b"1.2.840.113549.1.4\0";
pub const szOID_PKCS_5: &'static [u8; 19usize] = b"1.2.840.113549.1.5\0";
pub const szOID_PKCS_6: &'static [u8; 19usize] = b"1.2.840.113549.1.6\0";
pub const szOID_PKCS_7: &'static [u8; 19usize] = b"1.2.840.113549.1.7\0";
pub const szOID_PKCS_8: &'static [u8; 19usize] = b"1.2.840.113549.1.8\0";
pub const szOID_PKCS_9: &'static [u8; 19usize] = b"1.2.840.113549.1.9\0";
pub const szOID_PKCS_10: &'static [u8; 20usize] = b"1.2.840.113549.1.10\0";
pub const szOID_PKCS_12: &'static [u8; 20usize] = b"1.2.840.113549.1.12\0";
pub const szOID_RSA_RSA: &'static [u8; 21usize] = b"1.2.840.113549.1.1.1\0";
pub const szOID_RSA_MD2RSA: &'static [u8; 21usize] = b"1.2.840.113549.1.1.2\0";
pub const szOID_RSA_MD4RSA: &'static [u8; 21usize] = b"1.2.840.113549.1.1.3\0";
pub const szOID_RSA_MD5RSA: &'static [u8; 21usize] = b"1.2.840.113549.1.1.4\0";
pub const szOID_RSA_SHA1RSA: &'static [u8; 21usize] = b"1.2.840.113549.1.1.5\0";
pub const szOID_RSA_SETOAEP_RSA: &'static [u8; 21usize] = b"1.2.840.113549.1.1.6\0";
pub const szOID_RSAES_OAEP: &'static [u8; 21usize] = b"1.2.840.113549.1.1.7\0";
pub const szOID_RSA_MGF1: &'static [u8; 21usize] = b"1.2.840.113549.1.1.8\0";
pub const szOID_RSA_PSPECIFIED: &'static [u8; 21usize] = b"1.2.840.113549.1.1.9\0";
pub const szOID_RSA_SSA_PSS: &'static [u8; 22usize] = b"1.2.840.113549.1.1.10\0";
pub const szOID_RSA_SHA256RSA: &'static [u8; 22usize] = b"1.2.840.113549.1.1.11\0";
pub const szOID_RSA_SHA384RSA: &'static [u8; 22usize] = b"1.2.840.113549.1.1.12\0";
pub const szOID_RSA_SHA512RSA: &'static [u8; 22usize] = b"1.2.840.113549.1.1.13\0";
pub const szOID_RSA_DH: &'static [u8; 21usize] = b"1.2.840.113549.1.3.1\0";
pub const szOID_RSA_data: &'static [u8; 21usize] = b"1.2.840.113549.1.7.1\0";
pub const szOID_RSA_signedData: &'static [u8; 21usize] = b"1.2.840.113549.1.7.2\0";
pub const szOID_RSA_envelopedData: &'static [u8; 21usize] = b"1.2.840.113549.1.7.3\0";
pub const szOID_RSA_signEnvData: &'static [u8; 21usize] = b"1.2.840.113549.1.7.4\0";
pub const szOID_RSA_digestedData: &'static [u8; 21usize] = b"1.2.840.113549.1.7.5\0";
pub const szOID_RSA_hashedData: &'static [u8; 21usize] = b"1.2.840.113549.1.7.5\0";
pub const szOID_RSA_encryptedData: &'static [u8; 21usize] = b"1.2.840.113549.1.7.6\0";
pub const szOID_RSA_emailAddr: &'static [u8; 21usize] = b"1.2.840.113549.1.9.1\0";
pub const szOID_RSA_unstructName: &'static [u8; 21usize] = b"1.2.840.113549.1.9.2\0";
pub const szOID_RSA_contentType: &'static [u8; 21usize] = b"1.2.840.113549.1.9.3\0";
pub const szOID_RSA_messageDigest: &'static [u8; 21usize] = b"1.2.840.113549.1.9.4\0";
pub const szOID_RSA_signingTime: &'static [u8; 21usize] = b"1.2.840.113549.1.9.5\0";
pub const szOID_RSA_counterSign: &'static [u8; 21usize] = b"1.2.840.113549.1.9.6\0";
pub const szOID_RSA_challengePwd: &'static [u8; 21usize] = b"1.2.840.113549.1.9.7\0";
pub const szOID_RSA_unstructAddr: &'static [u8; 21usize] = b"1.2.840.113549.1.9.8\0";
pub const szOID_RSA_extCertAttrs: &'static [u8; 21usize] = b"1.2.840.113549.1.9.9\0";
pub const szOID_RSA_certExtensions: &'static [u8; 22usize] = b"1.2.840.113549.1.9.14\0";
pub const szOID_RSA_SMIMECapabilities: &'static [u8; 22usize] = b"1.2.840.113549.1.9.15\0";
pub const szOID_RSA_preferSignedData: &'static [u8; 24usize] = b"1.2.840.113549.1.9.15.1\0";
pub const szOID_TIMESTAMP_TOKEN: &'static [u8; 26usize] = b"1.2.840.113549.1.9.16.1.4\0";
pub const szOID_RFC3161_counterSign: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.3.3.1\0";
pub const szOID_RSA_SMIMEalg: &'static [u8; 24usize] = b"1.2.840.113549.1.9.16.3\0";
pub const szOID_RSA_SMIMEalgESDH: &'static [u8; 26usize] = b"1.2.840.113549.1.9.16.3.5\0";
pub const szOID_RSA_SMIMEalgCMS3DESwrap: &'static [u8; 26usize] = b"1.2.840.113549.1.9.16.3.6\0";
pub const szOID_RSA_SMIMEalgCMSRC2wrap: &'static [u8; 26usize] = b"1.2.840.113549.1.9.16.3.7\0";
pub const szOID_RSA_MD2: &'static [u8; 19usize] = b"1.2.840.113549.2.2\0";
pub const szOID_RSA_MD4: &'static [u8; 19usize] = b"1.2.840.113549.2.4\0";
pub const szOID_RSA_MD5: &'static [u8; 19usize] = b"1.2.840.113549.2.5\0";
pub const szOID_RSA_RC2CBC: &'static [u8; 19usize] = b"1.2.840.113549.3.2\0";
pub const szOID_RSA_RC4: &'static [u8; 19usize] = b"1.2.840.113549.3.4\0";
pub const szOID_RSA_DES_EDE3_CBC: &'static [u8; 19usize] = b"1.2.840.113549.3.7\0";
pub const szOID_RSA_RC5_CBCPad: &'static [u8; 19usize] = b"1.2.840.113549.3.9\0";
pub const szOID_ANSI_X942: &'static [u8; 14usize] = b"1.2.840.10046\0";
pub const szOID_ANSI_X942_DH: &'static [u8; 18usize] = b"1.2.840.10046.2.1\0";
pub const szOID_X957: &'static [u8; 14usize] = b"1.2.840.10040\0";
pub const szOID_X957_DSA: &'static [u8; 18usize] = b"1.2.840.10040.4.1\0";
pub const szOID_X957_SHA1DSA: &'static [u8; 18usize] = b"1.2.840.10040.4.3\0";
pub const szOID_ECC_PUBLIC_KEY: &'static [u8; 18usize] = b"1.2.840.10045.2.1\0";
pub const szOID_ECC_CURVE_P256: &'static [u8; 20usize] = b"1.2.840.10045.3.1.7\0";
pub const szOID_ECC_CURVE_P384: &'static [u8; 13usize] = b"1.3.132.0.34\0";
pub const szOID_ECC_CURVE_P521: &'static [u8; 13usize] = b"1.3.132.0.35\0";
pub const szOID_ECC_CURVE_BRAINPOOLP160R1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.1\0";
pub const szOID_ECC_CURVE_BRAINPOOLP160T1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.2\0";
pub const szOID_ECC_CURVE_BRAINPOOLP192R1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.3\0";
pub const szOID_ECC_CURVE_BRAINPOOLP192T1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.4\0";
pub const szOID_ECC_CURVE_BRAINPOOLP224R1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.5\0";
pub const szOID_ECC_CURVE_BRAINPOOLP224T1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.6\0";
pub const szOID_ECC_CURVE_BRAINPOOLP256R1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.7\0";
pub const szOID_ECC_CURVE_BRAINPOOLP256T1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.8\0";
pub const szOID_ECC_CURVE_BRAINPOOLP320R1: &'static [u8; 21usize] = b"1.3.36.3.3.2.8.1.1.9\0";
pub const szOID_ECC_CURVE_BRAINPOOLP320T1: &'static [u8; 22usize] = b"1.3.36.3.3.2.8.1.1.10\0";
pub const szOID_ECC_CURVE_BRAINPOOLP384R1: &'static [u8; 22usize] = b"1.3.36.3.3.2.8.1.1.11\0";
pub const szOID_ECC_CURVE_BRAINPOOLP384T1: &'static [u8; 22usize] = b"1.3.36.3.3.2.8.1.1.12\0";
pub const szOID_ECC_CURVE_BRAINPOOLP512R1: &'static [u8; 22usize] = b"1.3.36.3.3.2.8.1.1.13\0";
pub const szOID_ECC_CURVE_BRAINPOOLP512T1: &'static [u8; 22usize] = b"1.3.36.3.3.2.8.1.1.14\0";
pub const szOID_ECC_CURVE_EC192WAPI: &'static [u8; 22usize] = b"1.2.156.11235.1.1.2.1\0";
pub const szOID_CN_ECDSA_SHA256: &'static [u8; 20usize] = b"1.2.156.11235.1.1.1\0";
pub const szOID_ECC_CURVE_NISTP192: &'static [u8; 20usize] = b"1.2.840.10045.3.1.1\0";
pub const szOID_ECC_CURVE_NISTP224: &'static [u8; 13usize] = b"1.3.132.0.33\0";
pub const szOID_ECC_CURVE_NISTP256: &'static [u8; 20usize] = b"1.2.840.10045.3.1.7\0";
pub const szOID_ECC_CURVE_NISTP384: &'static [u8; 13usize] = b"1.3.132.0.34\0";
pub const szOID_ECC_CURVE_NISTP521: &'static [u8; 13usize] = b"1.3.132.0.35\0";
pub const szOID_ECC_CURVE_SECP160K1: &'static [u8; 12usize] = b"1.3.132.0.9\0";
pub const szOID_ECC_CURVE_SECP160R1: &'static [u8; 12usize] = b"1.3.132.0.8\0";
pub const szOID_ECC_CURVE_SECP160R2: &'static [u8; 13usize] = b"1.3.132.0.30\0";
pub const szOID_ECC_CURVE_SECP192K1: &'static [u8; 13usize] = b"1.3.132.0.31\0";
pub const szOID_ECC_CURVE_SECP192R1: &'static [u8; 20usize] = b"1.2.840.10045.3.1.1\0";
pub const szOID_ECC_CURVE_SECP224K1: &'static [u8; 13usize] = b"1.3.132.0.32\0";
pub const szOID_ECC_CURVE_SECP224R1: &'static [u8; 13usize] = b"1.3.132.0.33\0";
pub const szOID_ECC_CURVE_SECP256K1: &'static [u8; 13usize] = b"1.3.132.0.10\0";
pub const szOID_ECC_CURVE_SECP256R1: &'static [u8; 20usize] = b"1.2.840.10045.3.1.7\0";
pub const szOID_ECC_CURVE_SECP384R1: &'static [u8; 13usize] = b"1.3.132.0.34\0";
pub const szOID_ECC_CURVE_SECP521R1: &'static [u8; 13usize] = b"1.3.132.0.35\0";
pub const szOID_ECC_CURVE_WTLS7: &'static [u8; 13usize] = b"1.3.132.0.30\0";
pub const szOID_ECC_CURVE_WTLS9: &'static [u8; 14usize] = b"2.23.43.1.4.9\0";
pub const szOID_ECC_CURVE_WTLS12: &'static [u8; 13usize] = b"1.3.132.0.33\0";
pub const szOID_ECC_CURVE_X962P192V1: &'static [u8; 20usize] = b"1.2.840.10045.3.1.1\0";
pub const szOID_ECC_CURVE_X962P192V2: &'static [u8; 20usize] = b"1.2.840.10045.3.1.2\0";
pub const szOID_ECC_CURVE_X962P192V3: &'static [u8; 20usize] = b"1.2.840.10045.3.1.3\0";
pub const szOID_ECC_CURVE_X962P239V1: &'static [u8; 20usize] = b"1.2.840.10045.3.1.4\0";
pub const szOID_ECC_CURVE_X962P239V2: &'static [u8; 20usize] = b"1.2.840.10045.3.1.5\0";
pub const szOID_ECC_CURVE_X962P239V3: &'static [u8; 20usize] = b"1.2.840.10045.3.1.6\0";
pub const szOID_ECC_CURVE_X962P256V1: &'static [u8; 20usize] = b"1.2.840.10045.3.1.7\0";
pub const szOID_ECDSA_SHA1: &'static [u8; 18usize] = b"1.2.840.10045.4.1\0";
pub const szOID_ECDSA_SPECIFIED: &'static [u8; 18usize] = b"1.2.840.10045.4.3\0";
pub const szOID_ECDSA_SHA256: &'static [u8; 20usize] = b"1.2.840.10045.4.3.2\0";
pub const szOID_ECDSA_SHA384: &'static [u8; 20usize] = b"1.2.840.10045.4.3.3\0";
pub const szOID_ECDSA_SHA512: &'static [u8; 20usize] = b"1.2.840.10045.4.3.4\0";
pub const szOID_NIST_AES128_CBC: &'static [u8; 23usize] = b"2.16.840.1.101.3.4.1.2\0";
pub const szOID_NIST_AES192_CBC: &'static [u8; 24usize] = b"2.16.840.1.101.3.4.1.22\0";
pub const szOID_NIST_AES256_CBC: &'static [u8; 24usize] = b"2.16.840.1.101.3.4.1.42\0";
pub const szOID_NIST_AES128_WRAP: &'static [u8; 23usize] = b"2.16.840.1.101.3.4.1.5\0";
pub const szOID_NIST_AES192_WRAP: &'static [u8; 24usize] = b"2.16.840.1.101.3.4.1.25\0";
pub const szOID_NIST_AES256_WRAP: &'static [u8; 24usize] = b"2.16.840.1.101.3.4.1.45\0";
pub const szOID_DH_SINGLE_PASS_STDDH_SHA1_KDF: &'static [u8; 22usize] = b"1.3.133.16.840.63.0.2\0";
pub const szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF: &'static [u8; 15usize] = b"1.3.132.1.11.1\0";
pub const szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF: &'static [u8; 15usize] = b"1.3.132.1.11.2\0";
pub const szOID_DS: &'static [u8; 4usize] = b"2.5\0";
pub const szOID_DSALG: &'static [u8; 6usize] = b"2.5.8\0";
pub const szOID_DSALG_CRPT: &'static [u8; 8usize] = b"2.5.8.1\0";
pub const szOID_DSALG_HASH: &'static [u8; 8usize] = b"2.5.8.2\0";
pub const szOID_DSALG_SIGN: &'static [u8; 8usize] = b"2.5.8.3\0";
pub const szOID_DSALG_RSA: &'static [u8; 10usize] = b"2.5.8.1.1\0";
pub const szOID_OIW: &'static [u8; 7usize] = b"1.3.14\0";
pub const szOID_OIWSEC: &'static [u8; 11usize] = b"1.3.14.3.2\0";
pub const szOID_OIWSEC_md4RSA: &'static [u8; 13usize] = b"1.3.14.3.2.2\0";
pub const szOID_OIWSEC_md5RSA: &'static [u8; 13usize] = b"1.3.14.3.2.3\0";
pub const szOID_OIWSEC_md4RSA2: &'static [u8; 13usize] = b"1.3.14.3.2.4\0";
pub const szOID_OIWSEC_desECB: &'static [u8; 13usize] = b"1.3.14.3.2.6\0";
pub const szOID_OIWSEC_desCBC: &'static [u8; 13usize] = b"1.3.14.3.2.7\0";
pub const szOID_OIWSEC_desOFB: &'static [u8; 13usize] = b"1.3.14.3.2.8\0";
pub const szOID_OIWSEC_desCFB: &'static [u8; 13usize] = b"1.3.14.3.2.9\0";
pub const szOID_OIWSEC_desMAC: &'static [u8; 14usize] = b"1.3.14.3.2.10\0";
pub const szOID_OIWSEC_rsaSign: &'static [u8; 14usize] = b"1.3.14.3.2.11\0";
pub const szOID_OIWSEC_dsa: &'static [u8; 14usize] = b"1.3.14.3.2.12\0";
pub const szOID_OIWSEC_shaDSA: &'static [u8; 14usize] = b"1.3.14.3.2.13\0";
pub const szOID_OIWSEC_mdc2RSA: &'static [u8; 14usize] = b"1.3.14.3.2.14\0";
pub const szOID_OIWSEC_shaRSA: &'static [u8; 14usize] = b"1.3.14.3.2.15\0";
pub const szOID_OIWSEC_dhCommMod: &'static [u8; 14usize] = b"1.3.14.3.2.16\0";
pub const szOID_OIWSEC_desEDE: &'static [u8; 14usize] = b"1.3.14.3.2.17\0";
pub const szOID_OIWSEC_sha: &'static [u8; 14usize] = b"1.3.14.3.2.18\0";
pub const szOID_OIWSEC_mdc2: &'static [u8; 14usize] = b"1.3.14.3.2.19\0";
pub const szOID_OIWSEC_dsaComm: &'static [u8; 14usize] = b"1.3.14.3.2.20\0";
pub const szOID_OIWSEC_dsaCommSHA: &'static [u8; 14usize] = b"1.3.14.3.2.21\0";
pub const szOID_OIWSEC_rsaXchg: &'static [u8; 14usize] = b"1.3.14.3.2.22\0";
pub const szOID_OIWSEC_keyHashSeal: &'static [u8; 14usize] = b"1.3.14.3.2.23\0";
pub const szOID_OIWSEC_md2RSASign: &'static [u8; 14usize] = b"1.3.14.3.2.24\0";
pub const szOID_OIWSEC_md5RSASign: &'static [u8; 14usize] = b"1.3.14.3.2.25\0";
pub const szOID_OIWSEC_sha1: &'static [u8; 14usize] = b"1.3.14.3.2.26\0";
pub const szOID_OIWSEC_dsaSHA1: &'static [u8; 14usize] = b"1.3.14.3.2.27\0";
pub const szOID_OIWSEC_dsaCommSHA1: &'static [u8; 14usize] = b"1.3.14.3.2.28\0";
pub const szOID_OIWSEC_sha1RSASign: &'static [u8; 14usize] = b"1.3.14.3.2.29\0";
pub const szOID_OIWDIR: &'static [u8; 11usize] = b"1.3.14.7.2\0";
pub const szOID_OIWDIR_CRPT: &'static [u8; 13usize] = b"1.3.14.7.2.1\0";
pub const szOID_OIWDIR_HASH: &'static [u8; 13usize] = b"1.3.14.7.2.2\0";
pub const szOID_OIWDIR_SIGN: &'static [u8; 13usize] = b"1.3.14.7.2.3\0";
pub const szOID_OIWDIR_md2: &'static [u8; 15usize] = b"1.3.14.7.2.2.1\0";
pub const szOID_OIWDIR_md2RSA: &'static [u8; 15usize] = b"1.3.14.7.2.3.1\0";
pub const szOID_INFOSEC: &'static [u8; 19usize] = b"2.16.840.1.101.2.1\0";
pub const szOID_INFOSEC_sdnsSignature: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.1\0";
pub const szOID_INFOSEC_mosaicSignature: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.2\0";
pub const szOID_INFOSEC_sdnsConfidentiality: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.3\0";
pub const szOID_INFOSEC_mosaicConfidentiality: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.4\0";
pub const szOID_INFOSEC_sdnsIntegrity: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.5\0";
pub const szOID_INFOSEC_mosaicIntegrity: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.6\0";
pub const szOID_INFOSEC_sdnsTokenProtection: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.7\0";
pub const szOID_INFOSEC_mosaicTokenProtection: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.8\0";
pub const szOID_INFOSEC_sdnsKeyManagement: &'static [u8; 23usize] = b"2.16.840.1.101.2.1.1.9\0";
pub const szOID_INFOSEC_mosaicKeyManagement: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.10\0";
pub const szOID_INFOSEC_sdnsKMandSig: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.11\0";
pub const szOID_INFOSEC_mosaicKMandSig: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.12\0";
pub const szOID_INFOSEC_SuiteASignature: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.13\0";
pub const szOID_INFOSEC_SuiteAConfidentiality: &'static [u8; 24usize] =
    b"2.16.840.1.101.2.1.1.14\0";
pub const szOID_INFOSEC_SuiteAIntegrity: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.15\0";
pub const szOID_INFOSEC_SuiteATokenProtection: &'static [u8; 24usize] =
    b"2.16.840.1.101.2.1.1.16\0";
pub const szOID_INFOSEC_SuiteAKeyManagement: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.17\0";
pub const szOID_INFOSEC_SuiteAKMandSig: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.18\0";
pub const szOID_INFOSEC_mosaicUpdatedSig: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.19\0";
pub const szOID_INFOSEC_mosaicKMandUpdSig: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.20\0";
pub const szOID_INFOSEC_mosaicUpdatedInteg: &'static [u8; 24usize] = b"2.16.840.1.101.2.1.1.21\0";
pub const szOID_NIST_sha256: &'static [u8; 23usize] = b"2.16.840.1.101.3.4.2.1\0";
pub const szOID_NIST_sha384: &'static [u8; 23usize] = b"2.16.840.1.101.3.4.2.2\0";
pub const szOID_NIST_sha512: &'static [u8; 23usize] = b"2.16.840.1.101.3.4.2.3\0";
pub const szOID_COMMON_NAME: &'static [u8; 8usize] = b"2.5.4.3\0";
pub const szOID_SUR_NAME: &'static [u8; 8usize] = b"2.5.4.4\0";
pub const szOID_DEVICE_SERIAL_NUMBER: &'static [u8; 8usize] = b"2.5.4.5\0";
pub const szOID_COUNTRY_NAME: &'static [u8; 8usize] = b"2.5.4.6\0";
pub const szOID_LOCALITY_NAME: &'static [u8; 8usize] = b"2.5.4.7\0";
pub const szOID_STATE_OR_PROVINCE_NAME: &'static [u8; 8usize] = b"2.5.4.8\0";
pub const szOID_STREET_ADDRESS: &'static [u8; 8usize] = b"2.5.4.9\0";
pub const szOID_ORGANIZATION_NAME: &'static [u8; 9usize] = b"2.5.4.10\0";
pub const szOID_ORGANIZATIONAL_UNIT_NAME: &'static [u8; 9usize] = b"2.5.4.11\0";
pub const szOID_TITLE: &'static [u8; 9usize] = b"2.5.4.12\0";
pub const szOID_DESCRIPTION: &'static [u8; 9usize] = b"2.5.4.13\0";
pub const szOID_SEARCH_GUIDE: &'static [u8; 9usize] = b"2.5.4.14\0";
pub const szOID_BUSINESS_CATEGORY: &'static [u8; 9usize] = b"2.5.4.15\0";
pub const szOID_POSTAL_ADDRESS: &'static [u8; 9usize] = b"2.5.4.16\0";
pub const szOID_POSTAL_CODE: &'static [u8; 9usize] = b"2.5.4.17\0";
pub const szOID_POST_OFFICE_BOX: &'static [u8; 9usize] = b"2.5.4.18\0";
pub const szOID_PHYSICAL_DELIVERY_OFFICE_NAME: &'static [u8; 9usize] = b"2.5.4.19\0";
pub const szOID_TELEPHONE_NUMBER: &'static [u8; 9usize] = b"2.5.4.20\0";
pub const szOID_TELEX_NUMBER: &'static [u8; 9usize] = b"2.5.4.21\0";
pub const szOID_TELETEXT_TERMINAL_IDENTIFIER: &'static [u8; 9usize] = b"2.5.4.22\0";
pub const szOID_FACSIMILE_TELEPHONE_NUMBER: &'static [u8; 9usize] = b"2.5.4.23\0";
pub const szOID_X21_ADDRESS: &'static [u8; 9usize] = b"2.5.4.24\0";
pub const szOID_INTERNATIONAL_ISDN_NUMBER: &'static [u8; 9usize] = b"2.5.4.25\0";
pub const szOID_REGISTERED_ADDRESS: &'static [u8; 9usize] = b"2.5.4.26\0";
pub const szOID_DESTINATION_INDICATOR: &'static [u8; 9usize] = b"2.5.4.27\0";
pub const szOID_PREFERRED_DELIVERY_METHOD: &'static [u8; 9usize] = b"2.5.4.28\0";
pub const szOID_PRESENTATION_ADDRESS: &'static [u8; 9usize] = b"2.5.4.29\0";
pub const szOID_SUPPORTED_APPLICATION_CONTEXT: &'static [u8; 9usize] = b"2.5.4.30\0";
pub const szOID_MEMBER: &'static [u8; 9usize] = b"2.5.4.31\0";
pub const szOID_OWNER: &'static [u8; 9usize] = b"2.5.4.32\0";
pub const szOID_ROLE_OCCUPANT: &'static [u8; 9usize] = b"2.5.4.33\0";
pub const szOID_SEE_ALSO: &'static [u8; 9usize] = b"2.5.4.34\0";
pub const szOID_USER_PASSWORD: &'static [u8; 9usize] = b"2.5.4.35\0";
pub const szOID_USER_CERTIFICATE: &'static [u8; 9usize] = b"2.5.4.36\0";
pub const szOID_CA_CERTIFICATE: &'static [u8; 9usize] = b"2.5.4.37\0";
pub const szOID_AUTHORITY_REVOCATION_LIST: &'static [u8; 9usize] = b"2.5.4.38\0";
pub const szOID_CERTIFICATE_REVOCATION_LIST: &'static [u8; 9usize] = b"2.5.4.39\0";
pub const szOID_CROSS_CERTIFICATE_PAIR: &'static [u8; 9usize] = b"2.5.4.40\0";
pub const szOID_GIVEN_NAME: &'static [u8; 9usize] = b"2.5.4.42\0";
pub const szOID_INITIALS: &'static [u8; 9usize] = b"2.5.4.43\0";
pub const szOID_DN_QUALIFIER: &'static [u8; 9usize] = b"2.5.4.46\0";
pub const szOID_DOMAIN_COMPONENT: &'static [u8; 27usize] = b"0.9.2342.19200300.100.1.25\0";
pub const szOID_PKCS_12_FRIENDLY_NAME_ATTR: &'static [u8; 22usize] = b"1.2.840.113549.1.9.20\0";
pub const szOID_PKCS_12_LOCAL_KEY_ID: &'static [u8; 22usize] = b"1.2.840.113549.1.9.21\0";
pub const szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.17.1\0";
pub const szOID_LOCAL_MACHINE_KEYSET: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.17.2\0";
pub const szOID_PKCS_12_EXTENDED_ATTRIBUTES: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.17.3\0";
pub const szOID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID: &'static [u8; 21usize] =
    b"1.3.6.1.4.1.311.17.4\0";
pub const szOID_KEYID_RDN: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.7.1\0";
pub const szOID_EV_RDN_LOCALE: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.60.2.1.1\0";
pub const szOID_EV_RDN_STATE_OR_PROVINCE: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.60.2.1.2\0";
pub const szOID_EV_RDN_COUNTRY: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.60.2.1.3\0";
pub const CERT_RDN_ANY_TYPE: u32 = 0;
pub const CERT_RDN_ENCODED_BLOB: u32 = 1;
pub const CERT_RDN_OCTET_STRING: u32 = 2;
pub const CERT_RDN_NUMERIC_STRING: u32 = 3;
pub const CERT_RDN_PRINTABLE_STRING: u32 = 4;
pub const CERT_RDN_TELETEX_STRING: u32 = 5;
pub const CERT_RDN_T61_STRING: u32 = 5;
pub const CERT_RDN_VIDEOTEX_STRING: u32 = 6;
pub const CERT_RDN_IA5_STRING: u32 = 7;
pub const CERT_RDN_GRAPHIC_STRING: u32 = 8;
pub const CERT_RDN_VISIBLE_STRING: u32 = 9;
pub const CERT_RDN_ISO646_STRING: u32 = 9;
pub const CERT_RDN_GENERAL_STRING: u32 = 10;
pub const CERT_RDN_UNIVERSAL_STRING: u32 = 11;
pub const CERT_RDN_INT4_STRING: u32 = 11;
pub const CERT_RDN_BMP_STRING: u32 = 12;
pub const CERT_RDN_UNICODE_STRING: u32 = 12;
pub const CERT_RDN_UTF8_STRING: u32 = 13;
pub const CERT_RDN_TYPE_MASK: u32 = 255;
pub const CERT_RDN_FLAGS_MASK: u32 = 4278190080;
pub const CERT_RDN_ENABLE_T61_UNICODE_FLAG: u32 = 2147483648;
pub const CERT_RDN_ENABLE_UTF8_UNICODE_FLAG: u32 = 536870912;
pub const CERT_RDN_FORCE_UTF8_UNICODE_FLAG: u32 = 268435456;
pub const CERT_RDN_DISABLE_CHECK_TYPE_FLAG: u32 = 1073741824;
pub const CERT_RDN_DISABLE_IE4_UTF8_FLAG: u32 = 16777216;
pub const CERT_RDN_ENABLE_PUNYCODE_FLAG: u32 = 33554432;
pub const CERT_RSA_PUBLIC_KEY_OBJID: &'static [u8; 21usize] = b"1.2.840.113549.1.1.1\0";
pub const CERT_DEFAULT_OID_PUBLIC_KEY_SIGN: &'static [u8; 21usize] = b"1.2.840.113549.1.1.1\0";
pub const CERT_DEFAULT_OID_PUBLIC_KEY_XCHG: &'static [u8; 21usize] = b"1.2.840.113549.1.1.1\0";
pub const CRYPT_ECC_PRIVATE_KEY_INFO_v1: u32 = 1;
pub const CERT_V1: u32 = 0;
pub const CERT_V2: u32 = 1;
pub const CERT_V3: u32 = 2;
pub const CERT_INFO_VERSION_FLAG: u32 = 1;
pub const CERT_INFO_SERIAL_NUMBER_FLAG: u32 = 2;
pub const CERT_INFO_SIGNATURE_ALGORITHM_FLAG: u32 = 3;
pub const CERT_INFO_ISSUER_FLAG: u32 = 4;
pub const CERT_INFO_NOT_BEFORE_FLAG: u32 = 5;
pub const CERT_INFO_NOT_AFTER_FLAG: u32 = 6;
pub const CERT_INFO_SUBJECT_FLAG: u32 = 7;
pub const CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG: u32 = 8;
pub const CERT_INFO_ISSUER_UNIQUE_ID_FLAG: u32 = 9;
pub const CERT_INFO_SUBJECT_UNIQUE_ID_FLAG: u32 = 10;
pub const CERT_INFO_EXTENSION_FLAG: u32 = 11;
pub const CRL_V1: u32 = 0;
pub const CRL_V2: u32 = 1;
pub const CERT_BUNDLE_CERTIFICATE: u32 = 0;
pub const CERT_BUNDLE_CRL: u32 = 1;
pub const CERT_REQUEST_V1: u32 = 0;
pub const CERT_KEYGEN_REQUEST_V1: u32 = 0;
pub const CTL_V1: u32 = 0;
pub const CERT_ENCODING_TYPE_MASK: u32 = 65535;
pub const CMSG_ENCODING_TYPE_MASK: u32 = 4294901760;
pub const CRYPT_ASN_ENCODING: u32 = 1;
pub const CRYPT_NDR_ENCODING: u32 = 2;
pub const X509_ASN_ENCODING: u32 = 1;
pub const X509_NDR_ENCODING: u32 = 2;
pub const PKCS_7_ASN_ENCODING: u32 = 65536;
pub const PKCS_7_NDR_ENCODING: u32 = 131072;
pub const CRYPT_FORMAT_STR_MULTI_LINE: u32 = 1;
pub const CRYPT_FORMAT_STR_NO_HEX: u32 = 16;
pub const CRYPT_FORMAT_SIMPLE: u32 = 1;
pub const CRYPT_FORMAT_X509: u32 = 2;
pub const CRYPT_FORMAT_OID: u32 = 4;
pub const CRYPT_FORMAT_RDN_SEMICOLON: u32 = 256;
pub const CRYPT_FORMAT_RDN_CRLF: u32 = 512;
pub const CRYPT_FORMAT_RDN_UNQUOTE: u32 = 1024;
pub const CRYPT_FORMAT_RDN_REVERSE: u32 = 2048;
pub const CRYPT_FORMAT_COMMA: u32 = 4096;
pub const CRYPT_FORMAT_SEMICOLON: u32 = 256;
pub const CRYPT_FORMAT_CRLF: u32 = 512;
pub const CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG: u32 = 8;
pub const CRYPT_ENCODE_ALLOC_FLAG: u32 = 32768;
pub const CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG: u32 = 2147483648;
pub const CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG: u32 = 536870912;
pub const CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG: u32 = 268435456;
pub const CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG: u32 = 1073741824;
pub const CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG: u32 = 65536;
pub const CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG: u32 = 131072;
pub const CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG: u32 = 262144;
pub const CRYPT_ENCODE_ENABLE_IA5CONVERSION_FLAG: u32 = 393216;
pub const CRYPT_DECODE_NOCOPY_FLAG: u32 = 1;
pub const CRYPT_DECODE_TO_BE_SIGNED_FLAG: u32 = 2;
pub const CRYPT_DECODE_SHARE_OID_STRING_FLAG: u32 = 4;
pub const CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG: u32 = 8;
pub const CRYPT_DECODE_ALLOC_FLAG: u32 = 32768;
pub const CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG: u32 = 16777216;
pub const CRYPT_DECODE_ENABLE_PUNYCODE_FLAG: u32 = 33554432;
pub const CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG: u32 = 67108864;
pub const CRYPT_DECODE_ENABLE_IA5CONVERSION_FLAG: u32 = 100663296;
pub const CRYPT_ENCODE_DECODE_NONE: u32 = 0;
pub const szOID_AUTHORITY_KEY_IDENTIFIER: &'static [u8; 9usize] = b"2.5.29.1\0";
pub const szOID_KEY_ATTRIBUTES: &'static [u8; 9usize] = b"2.5.29.2\0";
pub const szOID_CERT_POLICIES_95: &'static [u8; 9usize] = b"2.5.29.3\0";
pub const szOID_KEY_USAGE_RESTRICTION: &'static [u8; 9usize] = b"2.5.29.4\0";
pub const szOID_SUBJECT_ALT_NAME: &'static [u8; 9usize] = b"2.5.29.7\0";
pub const szOID_ISSUER_ALT_NAME: &'static [u8; 9usize] = b"2.5.29.8\0";
pub const szOID_BASIC_CONSTRAINTS: &'static [u8; 10usize] = b"2.5.29.10\0";
pub const szOID_KEY_USAGE: &'static [u8; 10usize] = b"2.5.29.15\0";
pub const szOID_PRIVATEKEY_USAGE_PERIOD: &'static [u8; 10usize] = b"2.5.29.16\0";
pub const szOID_BASIC_CONSTRAINTS2: &'static [u8; 10usize] = b"2.5.29.19\0";
pub const szOID_CERT_POLICIES: &'static [u8; 10usize] = b"2.5.29.32\0";
pub const szOID_ANY_CERT_POLICY: &'static [u8; 12usize] = b"2.5.29.32.0\0";
pub const szOID_INHIBIT_ANY_POLICY: &'static [u8; 10usize] = b"2.5.29.54\0";
pub const szOID_AUTHORITY_KEY_IDENTIFIER2: &'static [u8; 10usize] = b"2.5.29.35\0";
pub const szOID_SUBJECT_KEY_IDENTIFIER: &'static [u8; 10usize] = b"2.5.29.14\0";
pub const szOID_SUBJECT_ALT_NAME2: &'static [u8; 10usize] = b"2.5.29.17\0";
pub const szOID_ISSUER_ALT_NAME2: &'static [u8; 10usize] = b"2.5.29.18\0";
pub const szOID_CRL_REASON_CODE: &'static [u8; 10usize] = b"2.5.29.21\0";
pub const szOID_REASON_CODE_HOLD: &'static [u8; 10usize] = b"2.5.29.23\0";
pub const szOID_CRL_DIST_POINTS: &'static [u8; 10usize] = b"2.5.29.31\0";
pub const szOID_ENHANCED_KEY_USAGE: &'static [u8; 10usize] = b"2.5.29.37\0";
pub const szOID_ANY_ENHANCED_KEY_USAGE: &'static [u8; 12usize] = b"2.5.29.37.0\0";
pub const szOID_CRL_NUMBER: &'static [u8; 10usize] = b"2.5.29.20\0";
pub const szOID_DELTA_CRL_INDICATOR: &'static [u8; 10usize] = b"2.5.29.27\0";
pub const szOID_ISSUING_DIST_POINT: &'static [u8; 10usize] = b"2.5.29.28\0";
pub const szOID_FRESHEST_CRL: &'static [u8; 10usize] = b"2.5.29.46\0";
pub const szOID_NAME_CONSTRAINTS: &'static [u8; 10usize] = b"2.5.29.30\0";
pub const szOID_POLICY_MAPPINGS: &'static [u8; 10usize] = b"2.5.29.33\0";
pub const szOID_LEGACY_POLICY_MAPPINGS: &'static [u8; 9usize] = b"2.5.29.5\0";
pub const szOID_POLICY_CONSTRAINTS: &'static [u8; 10usize] = b"2.5.29.36\0";
pub const szOID_RENEWAL_CERTIFICATE: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.13.1\0";
pub const szOID_ENROLLMENT_NAME_VALUE_PAIR: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.13.2.1\0";
pub const szOID_ENROLLMENT_CSP_PROVIDER: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.13.2.2\0";
pub const szOID_OS_VERSION: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.13.2.3\0";
pub const szOID_ENROLLMENT_AGENT: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.20.2.1\0";
pub const szOID_PKIX: &'static [u8; 14usize] = b"1.3.6.1.5.5.7\0";
pub const szOID_PKIX_PE: &'static [u8; 16usize] = b"1.3.6.1.5.5.7.1\0";
pub const szOID_AUTHORITY_INFO_ACCESS: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.1.1\0";
pub const szOID_SUBJECT_INFO_ACCESS: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.1.11\0";
pub const szOID_BIOMETRIC_EXT: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.1.2\0";
pub const szOID_QC_STATEMENTS_EXT: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.1.3\0";
pub const szOID_LOGOTYPE_EXT: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.1.12\0";
pub const szOID_TLS_FEATURES_EXT: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.1.24\0";
pub const szOID_CERT_EXTENSIONS: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.2.1.14\0";
pub const szOID_NEXT_UPDATE_LOCATION: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.10.2\0";
pub const szOID_REMOVE_CERTIFICATE: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.8.1\0";
pub const szOID_CROSS_CERT_DIST_POINTS: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.9.1\0";
pub const szOID_CTL: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.10.1\0";
pub const szOID_SORTED_CTL: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.1.1\0";
pub const szOID_SERIALIZED: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.10.3.3.1\0";
pub const szOID_NT_PRINCIPAL_NAME: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.20.2.3\0";
pub const szOID_INTERNATIONALIZED_EMAIL_ADDRESS: &'static [u8; 23usize] =
    b"1.3.6.1.4.1.311.20.2.4\0";
pub const szOID_PRODUCT_UPDATE: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.31.1\0";
pub const szOID_ANY_APPLICATION_POLICY: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.12.1\0";
pub const szOID_AUTO_ENROLL_CTL_USAGE: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.20.1\0";
pub const szOID_ENROLL_CERTTYPE_EXTENSION: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.20.2\0";
pub const szOID_CERT_MANIFOLD: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.20.3\0";
pub const szOID_CERTSRV_CA_VERSION: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.1\0";
pub const szOID_CERTSRV_PREVIOUS_CERT_HASH: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.2\0";
pub const szOID_CRL_VIRTUAL_BASE: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.3\0";
pub const szOID_CRL_NEXT_PUBLISH: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.4\0";
pub const szOID_KP_CA_EXCHANGE: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.5\0";
pub const szOID_KP_PRIVACY_CA: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.36\0";
pub const szOID_KP_KEY_RECOVERY_AGENT: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.6\0";
pub const szOID_CERTIFICATE_TEMPLATE: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.7\0";
pub const szOID_ENTERPRISE_OID_ROOT: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.8\0";
pub const szOID_RDN_DUMMY_SIGNER: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.21.9\0";
pub const szOID_APPLICATION_CERT_POLICIES: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.10\0";
pub const szOID_APPLICATION_POLICY_MAPPINGS: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.11\0";
pub const szOID_APPLICATION_POLICY_CONSTRAINTS: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.12\0";
pub const szOID_ARCHIVED_KEY_ATTR: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.13\0";
pub const szOID_CRL_SELF_CDP: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.14\0";
pub const szOID_REQUIRE_CERT_CHAIN_POLICY: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.15\0";
pub const szOID_ARCHIVED_KEY_CERT_HASH: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.16\0";
pub const szOID_ISSUED_CERT_HASH: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.17\0";
pub const szOID_DS_EMAIL_REPLICATION: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.19\0";
pub const szOID_REQUEST_CLIENT_INFO: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.20\0";
pub const szOID_ENCRYPTED_KEY_HASH: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.21\0";
pub const szOID_CERTSRV_CROSSCA_VERSION: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.22\0";
pub const szOID_NTDS_REPLICATION: &'static [u8; 21usize] = b"1.3.6.1.4.1.311.25.1\0";
pub const szOID_SUBJECT_DIR_ATTRS: &'static [u8; 9usize] = b"2.5.29.9\0";
pub const szOID_PKIX_KP: &'static [u8; 16usize] = b"1.3.6.1.5.5.7.3\0";
pub const szOID_PKIX_KP_SERVER_AUTH: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.1\0";
pub const szOID_PKIX_KP_CLIENT_AUTH: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.2\0";
pub const szOID_PKIX_KP_CODE_SIGNING: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.3\0";
pub const szOID_PKIX_KP_EMAIL_PROTECTION: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.4\0";
pub const szOID_PKIX_KP_IPSEC_END_SYSTEM: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.5\0";
pub const szOID_PKIX_KP_IPSEC_TUNNEL: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.6\0";
pub const szOID_PKIX_KP_IPSEC_USER: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.7\0";
pub const szOID_PKIX_KP_TIMESTAMP_SIGNING: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.8\0";
pub const szOID_PKIX_KP_OCSP_SIGNING: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.3.9\0";
pub const szOID_PKIX_OCSP_NOCHECK: &'static [u8; 21usize] = b"1.3.6.1.5.5.7.48.1.5\0";
pub const szOID_PKIX_OCSP_NONCE: &'static [u8; 21usize] = b"1.3.6.1.5.5.7.48.1.2\0";
pub const szOID_IPSEC_KP_IKE_INTERMEDIATE: &'static [u8; 18usize] = b"1.3.6.1.5.5.8.2.2\0";
pub const szOID_PKINIT_KP_KDC: &'static [u8; 16usize] = b"1.3.6.1.5.2.3.5\0";
pub const szOID_KP_CTL_USAGE_SIGNING: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.1\0";
pub const szOID_KP_TIME_STAMP_SIGNING: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.2\0";
pub const szOID_SERVER_GATED_CRYPTO: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.3\0";
pub const szOID_SGC_NETSCAPE: &'static [u8; 22usize] = b"2.16.840.1.113730.4.1\0";
pub const szOID_KP_EFS: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.4\0";
pub const szOID_EFS_RECOVERY: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.10.3.4.1\0";
pub const szOID_WHQL_CRYPTO: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.5\0";
pub const szOID_ATTEST_WHQL_CRYPTO: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.10.3.5.1\0";
pub const szOID_NT5_CRYPTO: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.6\0";
pub const szOID_OEM_WHQL_CRYPTO: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.7\0";
pub const szOID_EMBEDDED_NT_CRYPTO: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.8\0";
pub const szOID_ROOT_LIST_SIGNER: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.3.9\0";
pub const szOID_KP_QUALIFIED_SUBORDINATION: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.10\0";
pub const szOID_KP_KEY_RECOVERY: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.11\0";
pub const szOID_KP_DOCUMENT_SIGNING: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.12\0";
pub const szOID_KP_LIFETIME_SIGNING: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.13\0";
pub const szOID_KP_MOBILE_DEVICE_SOFTWARE: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.14\0";
pub const szOID_KP_SMART_DISPLAY: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.15\0";
pub const szOID_KP_CSP_SIGNATURE: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.16\0";
pub const szOID_KP_FLIGHT_SIGNING: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.27\0";
pub const szOID_PLATFORM_MANIFEST_BINARY_ID: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.28\0";
pub const szOID_DRM: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.5.1\0";
pub const szOID_DRM_INDIVIDUALIZATION: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.5.2\0";
pub const szOID_LICENSES: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.6.1\0";
pub const szOID_LICENSE_SERVER: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.6.2\0";
pub const szOID_KP_SMARTCARD_LOGON: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.20.2.2\0";
pub const szOID_KP_KERNEL_MODE_CODE_SIGNING: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.61.1.1\0";
pub const szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING: &'static [u8; 23usize] =
    b"1.3.6.1.4.1.311.61.4.1\0";
pub const szOID_REVOKED_LIST_SIGNER: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.19\0";
pub const szOID_WINDOWS_KITS_SIGNER: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.20\0";
pub const szOID_WINDOWS_RT_SIGNER: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.21\0";
pub const szOID_PROTECTED_PROCESS_LIGHT_SIGNER: &'static [u8; 24usize] =
    b"1.3.6.1.4.1.311.10.3.22\0";
pub const szOID_WINDOWS_TCB_SIGNER: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.23\0";
pub const szOID_PROTECTED_PROCESS_SIGNER: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.24\0";
pub const szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER: &'static [u8; 24usize] =
    b"1.3.6.1.4.1.311.10.3.25\0";
pub const szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER: &'static [u8; 24usize] =
    b"1.3.6.1.4.1.311.10.3.26\0";
pub const szOID_DISALLOWED_LIST: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.30\0";
pub const szOID_PIN_RULES_SIGNER: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.31\0";
pub const szOID_PIN_RULES_CTL: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.32\0";
pub const szOID_PIN_RULES_EXT: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.33\0";
pub const szOID_PIN_RULES_DOMAIN_NAME: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.34\0";
pub const szOID_PIN_RULES_LOG_END_DATE_EXT: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.35\0";
pub const szOID_IUM_SIGNING: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.37\0";
pub const szOID_EV_WHQL_CRYPTO: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.39\0";
pub const szOID_BIOMETRIC_SIGNING: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.41\0";
pub const szOID_ENCLAVE_SIGNING: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.42\0";
pub const szOID_SYNC_ROOT_CTL_EXT: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.50\0";
pub const szOID_HPKP_DOMAIN_NAME_CTL: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.60\0";
pub const szOID_HPKP_HEADER_VALUE_CTL: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.3.61\0";
pub const szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING: &'static [u8; 23usize] =
    b"1.3.6.1.4.1.311.61.5.1\0";
pub const szOID_WINDOWS_STORE_SIGNER: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.76.3.1\0";
pub const szOID_DYNAMIC_CODE_GEN_SIGNER: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.76.5.1\0";
pub const szOID_MICROSOFT_PUBLISHER_SIGNER: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.76.8.1\0";
pub const szOID_YESNO_TRUST_ATTR: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.4.1\0";
pub const szOID_SITE_PIN_RULES_INDEX_ATTR: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.4.2\0";
pub const szOID_SITE_PIN_RULES_FLAGS_ATTR: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.4.3\0";
pub const SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG: u32 = 1;
pub const szOID_PKIX_POLICY_QUALIFIER_CPS: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.2.1\0";
pub const szOID_PKIX_POLICY_QUALIFIER_USERNOTICE: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.2.2\0";
pub const szOID_ROOT_PROGRAM_FLAGS: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.60.1.1\0";
pub const CERT_ROOT_PROGRAM_FLAG_ORG: u32 = 128;
pub const CERT_ROOT_PROGRAM_FLAG_LSC: u32 = 64;
pub const CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO: u32 = 32;
pub const CERT_ROOT_PROGRAM_FLAG_OU: u32 = 16;
pub const CERT_ROOT_PROGRAM_FLAG_ADDRESS: u32 = 8;
pub const szOID_CERT_POLICIES_95_QUALIFIER1: &'static [u8; 26usize] =
    b"2.16.840.1.113733.1.7.1.1\0";
pub const szOID_RDN_TPM_MANUFACTURER: &'static [u8; 13usize] = b"2.23.133.2.1\0";
pub const szOID_RDN_TPM_MODEL: &'static [u8; 13usize] = b"2.23.133.2.2\0";
pub const szOID_RDN_TPM_VERSION: &'static [u8; 13usize] = b"2.23.133.2.3\0";
pub const szOID_RDN_TCG_PLATFORM_MANUFACTURER: &'static [u8; 13usize] = b"2.23.133.2.4\0";
pub const szOID_RDN_TCG_PLATFORM_MODEL: &'static [u8; 13usize] = b"2.23.133.2.5\0";
pub const szOID_RDN_TCG_PLATFORM_VERSION: &'static [u8; 13usize] = b"2.23.133.2.6\0";
pub const szOID_CT_CERT_SCTLIST: &'static [u8; 24usize] = b"1.3.6.1.4.1.11129.2.4.2\0";
pub const szOID_ENROLL_EK_INFO: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.23\0";
pub const szOID_ENROLL_AIK_INFO: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.39\0";
pub const szOID_ENROLL_ATTESTATION_STATEMENT: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.24\0";
pub const szOID_ENROLL_KSP_NAME: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.25\0";
pub const szOID_ENROLL_EKPUB_CHALLENGE: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.26\0";
pub const szOID_ENROLL_CAXCHGCERT_HASH: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.27\0";
pub const szOID_ENROLL_ATTESTATION_CHALLENGE: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.28\0";
pub const szOID_ENROLL_ENCRYPTION_ALGORITHM: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.29\0";
pub const szOID_KP_TPM_EK_CERTIFICATE: &'static [u8; 13usize] = b"2.23.133.8.1\0";
pub const szOID_KP_TPM_PLATFORM_CERTIFICATE: &'static [u8; 13usize] = b"2.23.133.8.2\0";
pub const szOID_KP_TPM_AIK_CERTIFICATE: &'static [u8; 13usize] = b"2.23.133.8.3\0";
pub const szOID_ENROLL_EKVERIFYKEY: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.30\0";
pub const szOID_ENROLL_EKVERIFYCERT: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.31\0";
pub const szOID_ENROLL_EKVERIFYCREDS: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.32\0";
pub const szOID_ENROLL_SCEP_ERROR: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.33\0";
pub const szOID_ENROLL_SCEP_SERVER_STATE: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.34\0";
pub const szOID_ENROLL_SCEP_CHALLENGE_ANSWER: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.35\0";
pub const szOID_ENROLL_SCEP_CLIENT_REQUEST: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.37\0";
pub const szOID_ENROLL_SCEP_SERVER_MESSAGE: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.38\0";
pub const szOID_ENROLL_SCEP_SERVER_SECRET: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.40\0";
pub const szOID_ENROLL_KEY_AFFINITY: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.41\0";
pub const szOID_ENROLL_SCEP_SIGNER_HASH: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.42\0";
pub const szOID_ENROLL_EK_CA_KEYID: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.21.43\0";
pub const szOID_ATTR_SUPPORTED_ALGORITHMS: &'static [u8; 9usize] = b"2.5.4.52\0";
pub const szOID_ATTR_TPM_SPECIFICATION: &'static [u8; 14usize] = b"2.23.133.2.16\0";
pub const szOID_ATTR_PLATFORM_SPECIFICATION: &'static [u8; 14usize] = b"2.23.133.2.17\0";
pub const szOID_ATTR_TPM_SECURITY_ASSERTIONS: &'static [u8; 14usize] = b"2.23.133.2.18\0";
pub const CERT_UNICODE_RDN_ERR_INDEX_MASK: u32 = 1023;
pub const CERT_UNICODE_RDN_ERR_INDEX_SHIFT: u32 = 22;
pub const CERT_UNICODE_ATTR_ERR_INDEX_MASK: u32 = 63;
pub const CERT_UNICODE_ATTR_ERR_INDEX_SHIFT: u32 = 16;
pub const CERT_UNICODE_VALUE_ERR_INDEX_MASK: u32 = 65535;
pub const CERT_UNICODE_VALUE_ERR_INDEX_SHIFT: u32 = 0;
pub const CERT_DIGITAL_SIGNATURE_KEY_USAGE: u32 = 128;
pub const CERT_NON_REPUDIATION_KEY_USAGE: u32 = 64;
pub const CERT_KEY_ENCIPHERMENT_KEY_USAGE: u32 = 32;
pub const CERT_DATA_ENCIPHERMENT_KEY_USAGE: u32 = 16;
pub const CERT_KEY_AGREEMENT_KEY_USAGE: u32 = 8;
pub const CERT_KEY_CERT_SIGN_KEY_USAGE: u32 = 4;
pub const CERT_OFFLINE_CRL_SIGN_KEY_USAGE: u32 = 2;
pub const CERT_CRL_SIGN_KEY_USAGE: u32 = 2;
pub const CERT_ENCIPHER_ONLY_KEY_USAGE: u32 = 1;
pub const CERT_DECIPHER_ONLY_KEY_USAGE: u32 = 128;
pub const CERT_ALT_NAME_OTHER_NAME: u32 = 1;
pub const CERT_ALT_NAME_RFC822_NAME: u32 = 2;
pub const CERT_ALT_NAME_DNS_NAME: u32 = 3;
pub const CERT_ALT_NAME_X400_ADDRESS: u32 = 4;
pub const CERT_ALT_NAME_DIRECTORY_NAME: u32 = 5;
pub const CERT_ALT_NAME_EDI_PARTY_NAME: u32 = 6;
pub const CERT_ALT_NAME_URL: u32 = 7;
pub const CERT_ALT_NAME_IP_ADDRESS: u32 = 8;
pub const CERT_ALT_NAME_REGISTERED_ID: u32 = 9;
pub const CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK: u32 = 255;
pub const CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT: u32 = 16;
pub const CERT_ALT_NAME_VALUE_ERR_INDEX_MASK: u32 = 65535;
pub const CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT: u32 = 0;
pub const CERT_CA_SUBJECT_FLAG: u32 = 128;
pub const CERT_END_ENTITY_SUBJECT_FLAG: u32 = 64;
pub const szOID_PKIX_ACC_DESCR: &'static [u8; 17usize] = b"1.3.6.1.5.5.7.48\0";
pub const szOID_PKIX_OCSP: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.48.1\0";
pub const szOID_PKIX_CA_ISSUERS: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.48.2\0";
pub const szOID_PKIX_TIME_STAMPING: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.48.3\0";
pub const szOID_PKIX_CA_REPOSITORY: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.48.5\0";
pub const CRL_REASON_UNSPECIFIED: u32 = 0;
pub const CRL_REASON_KEY_COMPROMISE: u32 = 1;
pub const CRL_REASON_CA_COMPROMISE: u32 = 2;
pub const CRL_REASON_AFFILIATION_CHANGED: u32 = 3;
pub const CRL_REASON_SUPERSEDED: u32 = 4;
pub const CRL_REASON_CESSATION_OF_OPERATION: u32 = 5;
pub const CRL_REASON_CERTIFICATE_HOLD: u32 = 6;
pub const CRL_REASON_REMOVE_FROM_CRL: u32 = 8;
pub const CRL_REASON_PRIVILEGE_WITHDRAWN: u32 = 9;
pub const CRL_REASON_AA_COMPROMISE: u32 = 10;
pub const CRL_DIST_POINT_NO_NAME: u32 = 0;
pub const CRL_DIST_POINT_FULL_NAME: u32 = 1;
pub const CRL_DIST_POINT_ISSUER_RDN_NAME: u32 = 2;
pub const CRL_REASON_UNUSED_FLAG: u32 = 128;
pub const CRL_REASON_KEY_COMPROMISE_FLAG: u32 = 64;
pub const CRL_REASON_CA_COMPROMISE_FLAG: u32 = 32;
pub const CRL_REASON_AFFILIATION_CHANGED_FLAG: u32 = 16;
pub const CRL_REASON_SUPERSEDED_FLAG: u32 = 8;
pub const CRL_REASON_CESSATION_OF_OPERATION_FLAG: u32 = 4;
pub const CRL_REASON_CERTIFICATE_HOLD_FLAG: u32 = 2;
pub const CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG: u32 = 1;
pub const CRL_REASON_AA_COMPROMISE_FLAG: u32 = 128;
pub const CRL_DIST_POINT_ERR_INDEX_MASK: u32 = 127;
pub const CRL_DIST_POINT_ERR_INDEX_SHIFT: u32 = 24;
pub const CRL_DIST_POINT_ERR_CRL_ISSUER_BIT: u32 = 2147483648;
pub const CROSS_CERT_DIST_POINT_ERR_INDEX_MASK: u32 = 255;
pub const CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT: u32 = 24;
pub const CERT_EXCLUDED_SUBTREE_BIT: u32 = 2147483648;
pub const SORTED_CTL_EXT_FLAGS_OFFSET: u32 = 0;
pub const SORTED_CTL_EXT_COUNT_OFFSET: u32 = 4;
pub const SORTED_CTL_EXT_MAX_COLLISION_OFFSET: u32 = 8;
pub const SORTED_CTL_EXT_HASH_BUCKET_OFFSET: u32 = 12;
pub const SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG: u32 = 1;
pub const CERT_DSS_R_LEN: u32 = 20;
pub const CERT_DSS_S_LEN: u32 = 20;
pub const CERT_DSS_SIGNATURE_LEN: u32 = 40;
pub const CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN: u32 = 48;
pub const CRYPT_X942_COUNTER_BYTE_LENGTH: u32 = 4;
pub const CRYPT_X942_KEY_LENGTH_BYTE_LENGTH: u32 = 4;
pub const CRYPT_X942_PUB_INFO_BYTE_LENGTH: u32 = 64;
pub const CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH: u32 = 4;
pub const CRYPT_RC2_40BIT_VERSION: u32 = 160;
pub const CRYPT_RC2_56BIT_VERSION: u32 = 52;
pub const CRYPT_RC2_64BIT_VERSION: u32 = 120;
pub const CRYPT_RC2_128BIT_VERSION: u32 = 58;
pub const szOID_QC_EU_COMPLIANCE: &'static [u8; 15usize] = b"0.4.0.1862.1.1\0";
pub const szOID_QC_SSCD: &'static [u8; 15usize] = b"0.4.0.1862.1.4\0";
pub const PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC: u32 = 1;
pub const szOID_VERISIGN_PRIVATE_6_9: &'static [u8; 24usize] = b"2.16.840.1.113733.1.6.9\0";
pub const szOID_VERISIGN_ONSITE_JURISDICTION_HASH: &'static [u8; 25usize] =
    b"2.16.840.1.113733.1.6.11\0";
pub const szOID_VERISIGN_BITSTRING_6_13: &'static [u8; 25usize] = b"2.16.840.1.113733.1.6.13\0";
pub const szOID_VERISIGN_ISS_STRONG_CRYPTO: &'static [u8; 24usize] = b"2.16.840.1.113733.1.8.1\0";
pub const szOIDVerisign_MessageType: &'static [u8; 24usize] = b"2.16.840.1.113733.1.9.2\0";
pub const szOIDVerisign_PkiStatus: &'static [u8; 24usize] = b"2.16.840.1.113733.1.9.3\0";
pub const szOIDVerisign_FailInfo: &'static [u8; 24usize] = b"2.16.840.1.113733.1.9.4\0";
pub const szOIDVerisign_SenderNonce: &'static [u8; 24usize] = b"2.16.840.1.113733.1.9.5\0";
pub const szOIDVerisign_RecipientNonce: &'static [u8; 24usize] = b"2.16.840.1.113733.1.9.6\0";
pub const szOIDVerisign_TransactionID: &'static [u8; 24usize] = b"2.16.840.1.113733.1.9.7\0";
pub const szOID_NETSCAPE: &'static [u8; 18usize] = b"2.16.840.1.113730\0";
pub const szOID_NETSCAPE_CERT_EXTENSION: &'static [u8; 20usize] = b"2.16.840.1.113730.1\0";
pub const szOID_NETSCAPE_CERT_TYPE: &'static [u8; 22usize] = b"2.16.840.1.113730.1.1\0";
pub const szOID_NETSCAPE_BASE_URL: &'static [u8; 22usize] = b"2.16.840.1.113730.1.2\0";
pub const szOID_NETSCAPE_REVOCATION_URL: &'static [u8; 22usize] = b"2.16.840.1.113730.1.3\0";
pub const szOID_NETSCAPE_CA_REVOCATION_URL: &'static [u8; 22usize] = b"2.16.840.1.113730.1.4\0";
pub const szOID_NETSCAPE_CERT_RENEWAL_URL: &'static [u8; 22usize] = b"2.16.840.1.113730.1.7\0";
pub const szOID_NETSCAPE_CA_POLICY_URL: &'static [u8; 22usize] = b"2.16.840.1.113730.1.8\0";
pub const szOID_NETSCAPE_SSL_SERVER_NAME: &'static [u8; 23usize] = b"2.16.840.1.113730.1.12\0";
pub const szOID_NETSCAPE_COMMENT: &'static [u8; 23usize] = b"2.16.840.1.113730.1.13\0";
pub const szOID_NETSCAPE_DATA_TYPE: &'static [u8; 20usize] = b"2.16.840.1.113730.2\0";
pub const szOID_NETSCAPE_CERT_SEQUENCE: &'static [u8; 22usize] = b"2.16.840.1.113730.2.5\0";
pub const NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE: u32 = 128;
pub const NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE: u32 = 64;
pub const NETSCAPE_SMIME_CERT_TYPE: u32 = 32;
pub const NETSCAPE_SIGN_CERT_TYPE: u32 = 16;
pub const NETSCAPE_SSL_CA_CERT_TYPE: u32 = 4;
pub const NETSCAPE_SMIME_CA_CERT_TYPE: u32 = 2;
pub const NETSCAPE_SIGN_CA_CERT_TYPE: u32 = 1;
pub const szOID_CT_PKI_DATA: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.12.2\0";
pub const szOID_CT_PKI_RESPONSE: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.12.3\0";
pub const szOID_PKIX_NO_SIGNATURE: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.6.2\0";
pub const szOID_CMC: &'static [u8; 16usize] = b"1.3.6.1.5.5.7.7\0";
pub const szOID_CMC_STATUS_INFO: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.1\0";
pub const szOID_CMC_IDENTIFICATION: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.2\0";
pub const szOID_CMC_IDENTITY_PROOF: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.3\0";
pub const szOID_CMC_DATA_RETURN: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.4\0";
pub const szOID_CMC_TRANSACTION_ID: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.5\0";
pub const szOID_CMC_SENDER_NONCE: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.6\0";
pub const szOID_CMC_RECIPIENT_NONCE: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.7\0";
pub const szOID_CMC_ADD_EXTENSIONS: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.8\0";
pub const szOID_CMC_ENCRYPTED_POP: &'static [u8; 18usize] = b"1.3.6.1.5.5.7.7.9\0";
pub const szOID_CMC_DECRYPTED_POP: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.10\0";
pub const szOID_CMC_LRA_POP_WITNESS: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.11\0";
pub const szOID_CMC_GET_CERT: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.15\0";
pub const szOID_CMC_GET_CRL: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.16\0";
pub const szOID_CMC_REVOKE_REQUEST: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.17\0";
pub const szOID_CMC_REG_INFO: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.18\0";
pub const szOID_CMC_RESPONSE_INFO: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.19\0";
pub const szOID_CMC_QUERY_PENDING: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.21\0";
pub const szOID_CMC_ID_POP_LINK_RANDOM: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.22\0";
pub const szOID_CMC_ID_POP_LINK_WITNESS: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.23\0";
pub const szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.7.24\0";
pub const szOID_CMC_ADD_ATTRIBUTES: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.10.1\0";
pub const CMC_TAGGED_CERT_REQUEST_CHOICE: u32 = 1;
pub const CMC_OTHER_INFO_NO_CHOICE: u32 = 0;
pub const CMC_OTHER_INFO_FAIL_CHOICE: u32 = 1;
pub const CMC_OTHER_INFO_PEND_CHOICE: u32 = 2;
pub const CMC_STATUS_SUCCESS: u32 = 0;
pub const CMC_STATUS_FAILED: u32 = 2;
pub const CMC_STATUS_PENDING: u32 = 3;
pub const CMC_STATUS_NO_SUPPORT: u32 = 4;
pub const CMC_STATUS_CONFIRM_REQUIRED: u32 = 5;
pub const CMC_FAIL_BAD_ALG: u32 = 0;
pub const CMC_FAIL_BAD_MESSAGE_CHECK: u32 = 1;
pub const CMC_FAIL_BAD_REQUEST: u32 = 2;
pub const CMC_FAIL_BAD_TIME: u32 = 3;
pub const CMC_FAIL_BAD_CERT_ID: u32 = 4;
pub const CMC_FAIL_UNSUPORTED_EXT: u32 = 5;
pub const CMC_FAIL_MUST_ARCHIVE_KEYS: u32 = 6;
pub const CMC_FAIL_BAD_IDENTITY: u32 = 7;
pub const CMC_FAIL_POP_REQUIRED: u32 = 8;
pub const CMC_FAIL_POP_FAILED: u32 = 9;
pub const CMC_FAIL_NO_KEY_REUSE: u32 = 10;
pub const CMC_FAIL_INTERNAL_CA_ERROR: u32 = 11;
pub const CMC_FAIL_TRY_LATER: u32 = 12;
pub const CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE: u32 = 1;
pub const CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE: u32 = 2;
pub const CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE: u32 = 0;
pub const CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE: u32 = 1;
pub const CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE: u32 = 2;
pub const CERT_LOGOTYPE_DIRECT_INFO_CHOICE: u32 = 1;
pub const CERT_LOGOTYPE_INDIRECT_INFO_CHOICE: u32 = 2;
pub const szOID_LOYALTY_OTHER_LOGOTYPE: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.20.1\0";
pub const szOID_BACKGROUND_OTHER_LOGOTYPE: &'static [u8; 19usize] = b"1.3.6.1.5.5.7.20.2\0";
pub const CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE: u32 = 1;
pub const CERT_BIOMETRIC_OID_DATA_CHOICE: u32 = 2;
pub const CERT_BIOMETRIC_PICTURE_TYPE: u32 = 0;
pub const CERT_BIOMETRIC_SIGNATURE_TYPE: u32 = 1;
pub const OCSP_REQUEST_V1: u32 = 0;
pub const OCSP_SUCCESSFUL_RESPONSE: u32 = 0;
pub const OCSP_MALFORMED_REQUEST_RESPONSE: u32 = 1;
pub const OCSP_INTERNAL_ERROR_RESPONSE: u32 = 2;
pub const OCSP_TRY_LATER_RESPONSE: u32 = 3;
pub const OCSP_SIG_REQUIRED_RESPONSE: u32 = 5;
pub const OCSP_UNAUTHORIZED_RESPONSE: u32 = 6;
pub const szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE: &'static [u8; 21usize] = b"1.3.6.1.5.5.7.48.1.1\0";
pub const OCSP_BASIC_GOOD_CERT_STATUS: u32 = 0;
pub const OCSP_BASIC_REVOKED_CERT_STATUS: u32 = 1;
pub const OCSP_BASIC_UNKNOWN_CERT_STATUS: u32 = 2;
pub const OCSP_BASIC_RESPONSE_V1: u32 = 0;
pub const OCSP_BASIC_BY_NAME_RESPONDER_ID: u32 = 1;
pub const OCSP_BASIC_BY_KEY_RESPONDER_ID: u32 = 2;
pub const CRYPT_OID_ENCODE_OBJECT_FUNC: &'static [u8; 21usize] = b"CryptDllEncodeObject\0";
pub const CRYPT_OID_DECODE_OBJECT_FUNC: &'static [u8; 21usize] = b"CryptDllDecodeObject\0";
pub const CRYPT_OID_ENCODE_OBJECT_EX_FUNC: &'static [u8; 23usize] = b"CryptDllEncodeObjectEx\0";
pub const CRYPT_OID_DECODE_OBJECT_EX_FUNC: &'static [u8; 23usize] = b"CryptDllDecodeObjectEx\0";
pub const CRYPT_OID_CREATE_COM_OBJECT_FUNC: &'static [u8; 24usize] = b"CryptDllCreateCOMObject\0";
pub const CRYPT_OID_VERIFY_REVOCATION_FUNC: &'static [u8; 24usize] = b"CertDllVerifyRevocation\0";
pub const CRYPT_OID_VERIFY_CTL_USAGE_FUNC: &'static [u8; 22usize] = b"CertDllVerifyCTLUsage\0";
pub const CRYPT_OID_FORMAT_OBJECT_FUNC: &'static [u8; 21usize] = b"CryptDllFormatObject\0";
pub const CRYPT_OID_FIND_OID_INFO_FUNC: &'static [u8; 20usize] = b"CryptDllFindOIDInfo\0";
pub const CRYPT_OID_FIND_LOCALIZED_NAME_FUNC: &'static [u8; 26usize] =
    b"CryptDllFindLocalizedName\0";
pub const CRYPT_OID_REGPATH: &'static [u8; 36usize] = b"Software\\Microsoft\\Cryptography\\OID\0";
pub const CRYPT_OID_REG_ENCODING_TYPE_PREFIX: &'static [u8; 14usize] = b"EncodingType \0";
pub const CRYPT_OID_REG_DLL_VALUE_NAME: &'static [u8; 4usize] = b"Dll\0";
pub const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME: &'static [u8; 9usize] = b"FuncName\0";
pub const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A: &'static [u8; 9usize] = b"FuncName\0";
pub const CRYPT_OID_REG_FLAGS_VALUE_NAME: &'static [u8; 11usize] = b"CryptFlags\0";
pub const CRYPT_DEFAULT_OID: &'static [u8; 8usize] = b"DEFAULT\0";
pub const CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG: u32 = 1;
pub const CRYPT_GET_INSTALLED_OID_FUNC_FLAG: u32 = 1;
pub const CRYPT_REGISTER_FIRST_INDEX: u32 = 0;
pub const CRYPT_REGISTER_LAST_INDEX: u32 = 4294967295;
pub const CRYPT_MATCH_ANY_ENCODING_TYPE: u32 = 4294967295;
pub const CALG_OID_INFO_CNG_ONLY: u32 = 4294967295;
pub const CALG_OID_INFO_PARAMETERS: u32 = 4294967294;
pub const CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM: &'static [u8; 27usize] =
    b"CryptOIDInfoHashParameters\0";
pub const CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM: &'static [u8; 26usize] =
    b"CryptOIDInfoECCParameters\0";
pub const CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM: &'static [u8; 27usize] =
    b"CryptOIDInfoMgf1Parameters\0";
pub const CRYPT_OID_INFO_NO_SIGN_ALGORITHM: &'static [u8; 19usize] = b"CryptOIDInfoNoSign\0";
pub const CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM: &'static [u8; 27usize] =
    b"CryptOIDInfoOAEPParameters\0";
pub const CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM: &'static [u8; 30usize] =
    b"CryptOIDInfoECCWrapParameters\0";
pub const CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM: &'static [u8; 25usize] =
    b"CryptOIDInfoNoParameters\0";
pub const CRYPT_HASH_ALG_OID_GROUP_ID: u32 = 1;
pub const CRYPT_ENCRYPT_ALG_OID_GROUP_ID: u32 = 2;
pub const CRYPT_PUBKEY_ALG_OID_GROUP_ID: u32 = 3;
pub const CRYPT_SIGN_ALG_OID_GROUP_ID: u32 = 4;
pub const CRYPT_RDN_ATTR_OID_GROUP_ID: u32 = 5;
pub const CRYPT_EXT_OR_ATTR_OID_GROUP_ID: u32 = 6;
pub const CRYPT_ENHKEY_USAGE_OID_GROUP_ID: u32 = 7;
pub const CRYPT_POLICY_OID_GROUP_ID: u32 = 8;
pub const CRYPT_TEMPLATE_OID_GROUP_ID: u32 = 9;
pub const CRYPT_KDF_OID_GROUP_ID: u32 = 10;
pub const CRYPT_LAST_OID_GROUP_ID: u32 = 10;
pub const CRYPT_FIRST_ALG_OID_GROUP_ID: u32 = 1;
pub const CRYPT_LAST_ALG_OID_GROUP_ID: u32 = 4;
pub const CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG: u32 = 1;
pub const CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG: u32 = 2;
pub const CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG: u32 = 4;
pub const CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG: u32 = 2147483648;
pub const CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG: u32 = 1073741824;
pub const CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG: u32 = 536870912;
pub const CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG: u32 = 268435456;
pub const CRYPT_OID_INFO_OID_KEY: u32 = 1;
pub const CRYPT_OID_INFO_NAME_KEY: u32 = 2;
pub const CRYPT_OID_INFO_ALGID_KEY: u32 = 3;
pub const CRYPT_OID_INFO_SIGN_KEY: u32 = 4;
pub const CRYPT_OID_INFO_CNG_ALGID_KEY: u32 = 5;
pub const CRYPT_OID_INFO_CNG_SIGN_KEY: u32 = 6;
pub const CRYPT_OID_INFO_OID_KEY_FLAGS_MASK: u32 = 4294901760;
pub const CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG: u32 = 2147483648;
pub const CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG: u32 = 1073741824;
pub const CRYPT_OID_DISABLE_SEARCH_DS_FLAG: u32 = 2147483648;
pub const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK: u32 = 268369920;
pub const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT: u32 = 16;
pub const CRYPT_INSTALL_OID_INFO_BEFORE_FLAG: u32 = 1;
pub const CRYPT_LOCALIZED_NAME_ENCODING_TYPE: u32 = 0;
pub const CRYPT_LOCALIZED_NAME_OID: &'static [u8; 15usize] = b"LocalizedNames\0";
pub const CERT_STRONG_SIGN_ECDSA_ALGORITHM: &'static [u8; 6usize] = b"ECDSA\0";
pub const CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE: u32 = 1;
pub const CERT_STRONG_SIGN_OID_INFO_CHOICE: u32 = 2;
pub const CERT_STRONG_SIGN_ENABLE_CRL_CHECK: u32 = 1;
pub const CERT_STRONG_SIGN_ENABLE_OCSP_CHECK: u32 = 2;
pub const szOID_CERT_STRONG_SIGN_OS_PREFIX: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.72.1.\0";
pub const szOID_CERT_STRONG_SIGN_OS_1: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.72.1.1\0";
pub const szOID_CERT_STRONG_SIGN_OS_CURRENT: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.72.1.1\0";
pub const szOID_CERT_STRONG_KEY_OS_PREFIX: &'static [u8; 22usize] = b"1.3.6.1.4.1.311.72.2.\0";
pub const szOID_CERT_STRONG_KEY_OS_1: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.72.2.1\0";
pub const szOID_CERT_STRONG_KEY_OS_CURRENT: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.72.2.1\0";
pub const szOID_PKCS_7_DATA: &'static [u8; 21usize] = b"1.2.840.113549.1.7.1\0";
pub const szOID_PKCS_7_SIGNED: &'static [u8; 21usize] = b"1.2.840.113549.1.7.2\0";
pub const szOID_PKCS_7_ENVELOPED: &'static [u8; 21usize] = b"1.2.840.113549.1.7.3\0";
pub const szOID_PKCS_7_SIGNEDANDENVELOPED: &'static [u8; 21usize] = b"1.2.840.113549.1.7.4\0";
pub const szOID_PKCS_7_DIGESTED: &'static [u8; 21usize] = b"1.2.840.113549.1.7.5\0";
pub const szOID_PKCS_7_ENCRYPTED: &'static [u8; 21usize] = b"1.2.840.113549.1.7.6\0";
pub const szOID_PKCS_9_CONTENT_TYPE: &'static [u8; 21usize] = b"1.2.840.113549.1.9.3\0";
pub const szOID_PKCS_9_MESSAGE_DIGEST: &'static [u8; 21usize] = b"1.2.840.113549.1.9.4\0";
pub const CMSG_DATA: u32 = 1;
pub const CMSG_SIGNED: u32 = 2;
pub const CMSG_ENVELOPED: u32 = 3;
pub const CMSG_SIGNED_AND_ENVELOPED: u32 = 4;
pub const CMSG_HASHED: u32 = 5;
pub const CMSG_ENCRYPTED: u32 = 6;
pub const CMSG_ALL_FLAGS: i32 = -1;
pub const CMSG_DATA_FLAG: u32 = 2;
pub const CMSG_SIGNED_FLAG: u32 = 4;
pub const CMSG_ENVELOPED_FLAG: u32 = 8;
pub const CMSG_SIGNED_AND_ENVELOPED_FLAG: u32 = 16;
pub const CMSG_HASHED_FLAG: u32 = 32;
pub const CMSG_ENCRYPTED_FLAG: u32 = 64;
pub const CERT_ID_ISSUER_SERIAL_NUMBER: u32 = 1;
pub const CERT_ID_KEY_IDENTIFIER: u32 = 2;
pub const CERT_ID_SHA1_HASH: u32 = 3;
pub const CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE: u32 = 1;
pub const CMSG_KEY_AGREE_STATIC_KEY_CHOICE: u32 = 2;
pub const CMSG_MAIL_LIST_HANDLE_KEY_CHOICE: u32 = 1;
pub const CMSG_KEY_TRANS_RECIPIENT: u32 = 1;
pub const CMSG_KEY_AGREE_RECIPIENT: u32 = 2;
pub const CMSG_MAIL_LIST_RECIPIENT: u32 = 3;
pub const CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG: u32 = 2147483648;
pub const CMSG_RC4_NO_SALT_FLAG: u32 = 1073741824;
pub const CMSG_INDEFINITE_LENGTH: u32 = 4294967295;
pub const CMSG_BARE_CONTENT_FLAG: u32 = 1;
pub const CMSG_LENGTH_ONLY_FLAG: u32 = 2;
pub const CMSG_DETACHED_FLAG: u32 = 4;
pub const CMSG_AUTHENTICATED_ATTRIBUTES_FLAG: u32 = 8;
pub const CMSG_CONTENTS_OCTETS_FLAG: u32 = 16;
pub const CMSG_MAX_LENGTH_FLAG: u32 = 32;
pub const CMSG_CMS_ENCAPSULATED_CONTENT_FLAG: u32 = 64;
pub const CMSG_SIGNED_DATA_NO_SIGN_FLAG: u32 = 128;
pub const CMSG_CRYPT_RELEASE_CONTEXT_FLAG: u32 = 32768;
pub const CMSG_TYPE_PARAM: u32 = 1;
pub const CMSG_CONTENT_PARAM: u32 = 2;
pub const CMSG_BARE_CONTENT_PARAM: u32 = 3;
pub const CMSG_INNER_CONTENT_TYPE_PARAM: u32 = 4;
pub const CMSG_SIGNER_COUNT_PARAM: u32 = 5;
pub const CMSG_SIGNER_INFO_PARAM: u32 = 6;
pub const CMSG_SIGNER_CERT_INFO_PARAM: u32 = 7;
pub const CMSG_SIGNER_HASH_ALGORITHM_PARAM: u32 = 8;
pub const CMSG_SIGNER_AUTH_ATTR_PARAM: u32 = 9;
pub const CMSG_SIGNER_UNAUTH_ATTR_PARAM: u32 = 10;
pub const CMSG_CERT_COUNT_PARAM: u32 = 11;
pub const CMSG_CERT_PARAM: u32 = 12;
pub const CMSG_CRL_COUNT_PARAM: u32 = 13;
pub const CMSG_CRL_PARAM: u32 = 14;
pub const CMSG_ENVELOPE_ALGORITHM_PARAM: u32 = 15;
pub const CMSG_RECIPIENT_COUNT_PARAM: u32 = 17;
pub const CMSG_RECIPIENT_INDEX_PARAM: u32 = 18;
pub const CMSG_RECIPIENT_INFO_PARAM: u32 = 19;
pub const CMSG_HASH_ALGORITHM_PARAM: u32 = 20;
pub const CMSG_HASH_DATA_PARAM: u32 = 21;
pub const CMSG_COMPUTED_HASH_PARAM: u32 = 22;
pub const CMSG_ENCRYPT_PARAM: u32 = 26;
pub const CMSG_ENCRYPTED_DIGEST: u32 = 27;
pub const CMSG_ENCODED_SIGNER: u32 = 28;
pub const CMSG_ENCODED_MESSAGE: u32 = 29;
pub const CMSG_VERSION_PARAM: u32 = 30;
pub const CMSG_ATTR_CERT_COUNT_PARAM: u32 = 31;
pub const CMSG_ATTR_CERT_PARAM: u32 = 32;
pub const CMSG_CMS_RECIPIENT_COUNT_PARAM: u32 = 33;
pub const CMSG_CMS_RECIPIENT_INDEX_PARAM: u32 = 34;
pub const CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM: u32 = 35;
pub const CMSG_CMS_RECIPIENT_INFO_PARAM: u32 = 36;
pub const CMSG_UNPROTECTED_ATTR_PARAM: u32 = 37;
pub const CMSG_SIGNER_CERT_ID_PARAM: u32 = 38;
pub const CMSG_CMS_SIGNER_INFO_PARAM: u32 = 39;
pub const CMSG_SIGNED_DATA_V1: u32 = 1;
pub const CMSG_SIGNED_DATA_V3: u32 = 3;
pub const CMSG_SIGNED_DATA_PKCS_1_5_VERSION: u32 = 1;
pub const CMSG_SIGNED_DATA_CMS_VERSION: u32 = 3;
pub const CMSG_SIGNER_INFO_V1: u32 = 1;
pub const CMSG_SIGNER_INFO_V3: u32 = 3;
pub const CMSG_SIGNER_INFO_PKCS_1_5_VERSION: u32 = 1;
pub const CMSG_SIGNER_INFO_CMS_VERSION: u32 = 3;
pub const CMSG_HASHED_DATA_V0: u32 = 0;
pub const CMSG_HASHED_DATA_V2: u32 = 2;
pub const CMSG_HASHED_DATA_PKCS_1_5_VERSION: u32 = 0;
pub const CMSG_HASHED_DATA_CMS_VERSION: u32 = 2;
pub const CMSG_ENVELOPED_DATA_V0: u32 = 0;
pub const CMSG_ENVELOPED_DATA_V2: u32 = 2;
pub const CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION: u32 = 0;
pub const CMSG_ENVELOPED_DATA_CMS_VERSION: u32 = 2;
pub const CMSG_KEY_AGREE_ORIGINATOR_CERT: u32 = 1;
pub const CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY: u32 = 2;
pub const CMSG_ENVELOPED_RECIPIENT_V0: u32 = 0;
pub const CMSG_ENVELOPED_RECIPIENT_V2: u32 = 2;
pub const CMSG_ENVELOPED_RECIPIENT_V3: u32 = 3;
pub const CMSG_ENVELOPED_RECIPIENT_V4: u32 = 4;
pub const CMSG_KEY_TRANS_PKCS_1_5_VERSION: u32 = 0;
pub const CMSG_KEY_TRANS_CMS_VERSION: u32 = 2;
pub const CMSG_KEY_AGREE_VERSION: u32 = 3;
pub const CMSG_MAIL_LIST_VERSION: u32 = 4;
pub const CMSG_CTRL_VERIFY_SIGNATURE: u32 = 1;
pub const CMSG_CTRL_DECRYPT: u32 = 2;
pub const CMSG_CTRL_VERIFY_HASH: u32 = 5;
pub const CMSG_CTRL_ADD_SIGNER: u32 = 6;
pub const CMSG_CTRL_DEL_SIGNER: u32 = 7;
pub const CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR: u32 = 8;
pub const CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR: u32 = 9;
pub const CMSG_CTRL_ADD_CERT: u32 = 10;
pub const CMSG_CTRL_DEL_CERT: u32 = 11;
pub const CMSG_CTRL_ADD_CRL: u32 = 12;
pub const CMSG_CTRL_DEL_CRL: u32 = 13;
pub const CMSG_CTRL_ADD_ATTR_CERT: u32 = 14;
pub const CMSG_CTRL_DEL_ATTR_CERT: u32 = 15;
pub const CMSG_CTRL_KEY_TRANS_DECRYPT: u32 = 16;
pub const CMSG_CTRL_KEY_AGREE_DECRYPT: u32 = 17;
pub const CMSG_CTRL_MAIL_LIST_DECRYPT: u32 = 18;
pub const CMSG_CTRL_VERIFY_SIGNATURE_EX: u32 = 19;
pub const CMSG_CTRL_ADD_CMS_SIGNER_INFO: u32 = 20;
pub const CMSG_CTRL_ENABLE_STRONG_SIGNATURE: u32 = 21;
pub const CMSG_VERIFY_SIGNER_PUBKEY: u32 = 1;
pub const CMSG_VERIFY_SIGNER_CERT: u32 = 2;
pub const CMSG_VERIFY_SIGNER_CHAIN: u32 = 3;
pub const CMSG_VERIFY_SIGNER_NULL: u32 = 4;
pub const CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG: u32 = 1;
pub const CMSG_OID_GEN_ENCRYPT_KEY_FUNC: &'static [u8; 25usize] = b"CryptMsgDllGenEncryptKey\0";
pub const CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC: &'static [u8; 28usize] =
    b"CryptMsgDllExportEncryptKey\0";
pub const CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC: &'static [u8; 28usize] =
    b"CryptMsgDllImportEncryptKey\0";
pub const CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG: u32 = 1;
pub const CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG: u32 = 1;
pub const CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG: u32 = 2;
pub const CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG: u32 = 32768;
pub const CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC: &'static [u8; 32usize] =
    b"CryptMsgDllGenContentEncryptKey\0";
pub const CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC: &'static [u8; 32usize] =
    b"CryptMsgDllGenContentEncryptKey\0";
pub const CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC: &'static [u8; 35usize] =
    b"CryptMsgDllCNGGenContentEncryptKey\0";
pub const CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG: u32 = 1;
pub const CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG: u32 = 2;
pub const CMSG_OID_EXPORT_KEY_TRANS_FUNC: &'static [u8; 26usize] = b"CryptMsgDllExportKeyTrans\0";
pub const CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC: &'static [u8; 26usize] =
    b"CryptMsgDllExportKeyTrans\0";
pub const CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC: &'static [u8; 29usize] =
    b"CryptMsgDllCNGExportKeyTrans\0";
pub const CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG: u32 = 1;
pub const CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG: u32 = 2;
pub const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG: u32 = 4;
pub const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG: u32 = 8;
pub const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG: u32 = 16;
pub const CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG: u32 = 32;
pub const CMSG_OID_EXPORT_KEY_AGREE_FUNC: &'static [u8; 26usize] = b"CryptMsgDllExportKeyAgree\0";
pub const CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC: &'static [u8; 26usize] =
    b"CryptMsgDllExportKeyAgree\0";
pub const CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC: &'static [u8; 29usize] =
    b"CryptMsgDllCNGExportKeyAgree\0";
pub const CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG: u32 = 1;
pub const CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG: u32 = 2;
pub const CMSG_OID_EXPORT_MAIL_LIST_FUNC: &'static [u8; 26usize] = b"CryptMsgDllExportMailList\0";
pub const CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC: &'static [u8; 26usize] =
    b"CryptMsgDllExportMailList\0";
pub const CMSG_OID_IMPORT_KEY_TRANS_FUNC: &'static [u8; 26usize] = b"CryptMsgDllImportKeyTrans\0";
pub const CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC: &'static [u8; 26usize] =
    b"CryptMsgDllImportKeyTrans\0";
pub const CMSG_OID_IMPORT_KEY_AGREE_FUNC: &'static [u8; 26usize] = b"CryptMsgDllImportKeyAgree\0";
pub const CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC: &'static [u8; 26usize] =
    b"CryptMsgDllImportKeyAgree\0";
pub const CMSG_OID_IMPORT_MAIL_LIST_FUNC: &'static [u8; 26usize] = b"CryptMsgDllImportMailList\0";
pub const CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC: &'static [u8; 26usize] =
    b"CryptMsgDllImportMailList\0";
pub const CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC: &'static [u8; 29usize] =
    b"CryptMsgDllCNGImportKeyTrans\0";
pub const CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC: &'static [u8; 29usize] =
    b"CryptMsgDllCNGImportKeyAgree\0";
pub const CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC: &'static [u8; 38usize] =
    b"CryptMsgDllCNGImportContentEncryptKey\0";
pub const CERT_KEY_PROV_HANDLE_PROP_ID: u32 = 1;
pub const CERT_KEY_PROV_INFO_PROP_ID: u32 = 2;
pub const CERT_SHA1_HASH_PROP_ID: u32 = 3;
pub const CERT_MD5_HASH_PROP_ID: u32 = 4;
pub const CERT_HASH_PROP_ID: u32 = 3;
pub const CERT_KEY_CONTEXT_PROP_ID: u32 = 5;
pub const CERT_KEY_SPEC_PROP_ID: u32 = 6;
pub const CERT_IE30_RESERVED_PROP_ID: u32 = 7;
pub const CERT_PUBKEY_HASH_RESERVED_PROP_ID: u32 = 8;
pub const CERT_ENHKEY_USAGE_PROP_ID: u32 = 9;
pub const CERT_CTL_USAGE_PROP_ID: u32 = 9;
pub const CERT_NEXT_UPDATE_LOCATION_PROP_ID: u32 = 10;
pub const CERT_FRIENDLY_NAME_PROP_ID: u32 = 11;
pub const CERT_PVK_FILE_PROP_ID: u32 = 12;
pub const CERT_DESCRIPTION_PROP_ID: u32 = 13;
pub const CERT_ACCESS_STATE_PROP_ID: u32 = 14;
pub const CERT_SIGNATURE_HASH_PROP_ID: u32 = 15;
pub const CERT_SMART_CARD_DATA_PROP_ID: u32 = 16;
pub const CERT_EFS_PROP_ID: u32 = 17;
pub const CERT_FORTEZZA_DATA_PROP_ID: u32 = 18;
pub const CERT_ARCHIVED_PROP_ID: u32 = 19;
pub const CERT_KEY_IDENTIFIER_PROP_ID: u32 = 20;
pub const CERT_AUTO_ENROLL_PROP_ID: u32 = 21;
pub const CERT_PUBKEY_ALG_PARA_PROP_ID: u32 = 22;
pub const CERT_CROSS_CERT_DIST_POINTS_PROP_ID: u32 = 23;
pub const CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID: u32 = 24;
pub const CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID: u32 = 25;
pub const CERT_ENROLLMENT_PROP_ID: u32 = 26;
pub const CERT_DATE_STAMP_PROP_ID: u32 = 27;
pub const CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: u32 = 28;
pub const CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: u32 = 29;
pub const CERT_EXTENDED_ERROR_INFO_PROP_ID: u32 = 30;
pub const CERT_RENEWAL_PROP_ID: u32 = 64;
pub const CERT_ARCHIVED_KEY_HASH_PROP_ID: u32 = 65;
pub const CERT_AUTO_ENROLL_RETRY_PROP_ID: u32 = 66;
pub const CERT_AIA_URL_RETRIEVED_PROP_ID: u32 = 67;
pub const CERT_AUTHORITY_INFO_ACCESS_PROP_ID: u32 = 68;
pub const CERT_BACKED_UP_PROP_ID: u32 = 69;
pub const CERT_OCSP_RESPONSE_PROP_ID: u32 = 70;
pub const CERT_REQUEST_ORIGINATOR_PROP_ID: u32 = 71;
pub const CERT_SOURCE_LOCATION_PROP_ID: u32 = 72;
pub const CERT_SOURCE_URL_PROP_ID: u32 = 73;
pub const CERT_NEW_KEY_PROP_ID: u32 = 74;
pub const CERT_OCSP_CACHE_PREFIX_PROP_ID: u32 = 75;
pub const CERT_SMART_CARD_ROOT_INFO_PROP_ID: u32 = 76;
pub const CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID: u32 = 77;
pub const CERT_NCRYPT_KEY_HANDLE_PROP_ID: u32 = 78;
pub const CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID: u32 = 79;
pub const CERT_SUBJECT_INFO_ACCESS_PROP_ID: u32 = 80;
pub const CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: u32 = 81;
pub const CERT_CA_DISABLE_CRL_PROP_ID: u32 = 82;
pub const CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID: u32 = 83;
pub const CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID: u32 = 84;
pub const CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: u32 = 85;
pub const CERT_SUBJECT_DISABLE_CRL_PROP_ID: u32 = 86;
pub const CERT_CEP_PROP_ID: u32 = 87;
pub const CERT_SIGN_HASH_CNG_ALG_PROP_ID: u32 = 89;
pub const CERT_SCARD_PIN_ID_PROP_ID: u32 = 90;
pub const CERT_SCARD_PIN_INFO_PROP_ID: u32 = 91;
pub const CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID: u32 = 92;
pub const CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: u32 = 93;
pub const CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID: u32 = 94;
pub const CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID: u32 = 95;
pub const CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: u32 = 96;
pub const CERT_NO_EXPIRE_NOTIFICATION_PROP_ID: u32 = 97;
pub const CERT_AUTH_ROOT_SHA256_HASH_PROP_ID: u32 = 98;
pub const CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID: u32 = 99;
pub const CERT_HCRYPTPROV_TRANSFER_PROP_ID: u32 = 100;
pub const CERT_SMART_CARD_READER_PROP_ID: u32 = 101;
pub const CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID: u32 = 102;
pub const CERT_KEY_REPAIR_ATTEMPTED_PROP_ID: u32 = 103;
pub const CERT_DISALLOWED_FILETIME_PROP_ID: u32 = 104;
pub const CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID: u32 = 105;
pub const CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID: u32 = 106;
pub const CERT_SHA256_HASH_PROP_ID: u32 = 107;
pub const CERT_SCEP_SERVER_CERTS_PROP_ID: u32 = 108;
pub const CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID: u32 = 109;
pub const CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID: u32 = 110;
pub const CERT_SCEP_CA_CERT_PROP_ID: u32 = 111;
pub const CERT_SCEP_SIGNER_CERT_PROP_ID: u32 = 112;
pub const CERT_SCEP_NONCE_PROP_ID: u32 = 113;
pub const CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID: u32 = 114;
pub const CERT_SCEP_FLAGS_PROP_ID: u32 = 115;
pub const CERT_SCEP_GUID_PROP_ID: u32 = 116;
pub const CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID: u32 = 117;
pub const CERT_ISOLATED_KEY_PROP_ID: u32 = 118;
pub const CERT_SERIAL_CHAIN_PROP_ID: u32 = 119;
pub const CERT_KEY_CLASSIFICATION_PROP_ID: u32 = 120;
pub const CERT_OCSP_MUST_STAPLE_PROP_ID: u32 = 121;
pub const CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID: u32 = 122;
pub const CERT_NONCOMPLIANT_ROOT_URL_PROP_ID: u32 = 123;
pub const CERT_PIN_SHA256_HASH_PROP_ID: u32 = 124;
pub const CERT_CLR_DELETE_KEY_PROP_ID: u32 = 125;
pub const CERT_NOT_BEFORE_FILETIME_PROP_ID: u32 = 126;
pub const CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID: u32 = 127;
pub const CERT_FIRST_RESERVED_PROP_ID: u32 = 128;
pub const CERT_LAST_RESERVED_PROP_ID: u32 = 32767;
pub const CERT_FIRST_USER_PROP_ID: u32 = 32768;
pub const CERT_LAST_USER_PROP_ID: u32 = 65535;
pub const szOID_CERT_PROP_ID_PREFIX: &'static [u8; 23usize] = b"1.3.6.1.4.1.311.10.11.\0";
pub const szOID_CERT_KEY_IDENTIFIER_PROP_ID: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.10.11.20\0";
pub const szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: &'static [u8; 25usize] =
    b"1.3.6.1.4.1.311.10.11.28\0";
pub const szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: &'static [u8; 25usize] =
    b"1.3.6.1.4.1.311.10.11.29\0";
pub const szOID_CERT_MD5_HASH_PROP_ID: &'static [u8; 24usize] = b"1.3.6.1.4.1.311.10.11.4\0";
pub const szOID_CERT_SIGNATURE_HASH_PROP_ID: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.10.11.15\0";
pub const szOID_DISALLOWED_HASH: &'static [u8; 25usize] = b"1.3.6.1.4.1.311.10.11.15\0";
pub const szOID_CERT_DISALLOWED_FILETIME_PROP_ID: &'static [u8; 26usize] =
    b"1.3.6.1.4.1.311.10.11.104\0";
pub const CERT_ACCESS_STATE_WRITE_PERSIST_FLAG: u32 = 1;
pub const CERT_ACCESS_STATE_SYSTEM_STORE_FLAG: u32 = 2;
pub const CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG: u32 = 4;
pub const CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG: u32 = 8;
pub const CERT_ACCESS_STATE_SHARED_USER_FLAG: u32 = 16;
pub const szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION: &'static [u8; 23usize] =
    b"1.3.6.1.4.1.311.60.3.1\0";
pub const szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION: &'static [u8; 23usize] =
    b"1.3.6.1.4.1.311.60.3.2\0";
pub const szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL: &'static [u8; 23usize] =
    b"1.3.6.1.4.1.311.60.3.3\0";
pub const CERT_SET_KEY_PROV_HANDLE_PROP_ID: u32 = 1;
pub const CERT_SET_KEY_CONTEXT_PROP_ID: u32 = 1;
pub const CERT_NCRYPT_KEY_SPEC: u32 = 4294967295;
pub const sz_CERT_STORE_PROV_MEMORY: &'static [u8; 7usize] = b"Memory\0";
pub const sz_CERT_STORE_PROV_FILENAME_W: &'static [u8; 5usize] = b"File\0";
pub const sz_CERT_STORE_PROV_FILENAME: &'static [u8; 5usize] = b"File\0";
pub const sz_CERT_STORE_PROV_SYSTEM_W: &'static [u8; 7usize] = b"System\0";
pub const sz_CERT_STORE_PROV_SYSTEM: &'static [u8; 7usize] = b"System\0";
pub const sz_CERT_STORE_PROV_PKCS7: &'static [u8; 6usize] = b"PKCS7\0";
pub const sz_CERT_STORE_PROV_PKCS12: &'static [u8; 7usize] = b"PKCS12\0";
pub const sz_CERT_STORE_PROV_SERIALIZED: &'static [u8; 11usize] = b"Serialized\0";
pub const sz_CERT_STORE_PROV_COLLECTION: &'static [u8; 11usize] = b"Collection\0";
pub const sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W: &'static [u8; 15usize] = b"SystemRegistry\0";
pub const sz_CERT_STORE_PROV_SYSTEM_REGISTRY: &'static [u8; 15usize] = b"SystemRegistry\0";
pub const sz_CERT_STORE_PROV_PHYSICAL_W: &'static [u8; 9usize] = b"Physical\0";
pub const sz_CERT_STORE_PROV_PHYSICAL: &'static [u8; 9usize] = b"Physical\0";
pub const sz_CERT_STORE_PROV_SMART_CARD_W: &'static [u8; 10usize] = b"SmartCard\0";
pub const sz_CERT_STORE_PROV_SMART_CARD: &'static [u8; 10usize] = b"SmartCard\0";
pub const sz_CERT_STORE_PROV_LDAP_W: &'static [u8; 5usize] = b"Ldap\0";
pub const sz_CERT_STORE_PROV_LDAP: &'static [u8; 5usize] = b"Ldap\0";
pub const CERT_STORE_SIGNATURE_FLAG: u32 = 1;
pub const CERT_STORE_TIME_VALIDITY_FLAG: u32 = 2;
pub const CERT_STORE_REVOCATION_FLAG: u32 = 4;
pub const CERT_STORE_NO_CRL_FLAG: u32 = 65536;
pub const CERT_STORE_NO_ISSUER_FLAG: u32 = 131072;
pub const CERT_STORE_BASE_CRL_FLAG: u32 = 256;
pub const CERT_STORE_DELTA_CRL_FLAG: u32 = 512;
pub const CERT_STORE_NO_CRYPT_RELEASE_FLAG: u32 = 1;
pub const CERT_STORE_SET_LOCALIZED_NAME_FLAG: u32 = 2;
pub const CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG: u32 = 4;
pub const CERT_STORE_DELETE_FLAG: u32 = 16;
pub const CERT_STORE_UNSAFE_PHYSICAL_FLAG: u32 = 32;
pub const CERT_STORE_SHARE_STORE_FLAG: u32 = 64;
pub const CERT_STORE_SHARE_CONTEXT_FLAG: u32 = 128;
pub const CERT_STORE_MANIFOLD_FLAG: u32 = 256;
pub const CERT_STORE_ENUM_ARCHIVED_FLAG: u32 = 512;
pub const CERT_STORE_UPDATE_KEYID_FLAG: u32 = 1024;
pub const CERT_STORE_BACKUP_RESTORE_FLAG: u32 = 2048;
pub const CERT_STORE_READONLY_FLAG: u32 = 32768;
pub const CERT_STORE_OPEN_EXISTING_FLAG: u32 = 16384;
pub const CERT_STORE_CREATE_NEW_FLAG: u32 = 8192;
pub const CERT_STORE_MAXIMUM_ALLOWED_FLAG: u32 = 4096;
pub const CERT_SYSTEM_STORE_MASK: u32 = 4294901760;
pub const CERT_SYSTEM_STORE_RELOCATE_FLAG: u32 = 2147483648;
pub const CERT_SYSTEM_STORE_UNPROTECTED_FLAG: u32 = 1073741824;
pub const CERT_SYSTEM_STORE_DEFER_READ_FLAG: u32 = 536870912;
pub const CERT_SYSTEM_STORE_LOCATION_MASK: u32 = 16711680;
pub const CERT_SYSTEM_STORE_LOCATION_SHIFT: u32 = 16;
pub const CERT_SYSTEM_STORE_CURRENT_USER_ID: u32 = 1;
pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_ID: u32 = 2;
pub const CERT_SYSTEM_STORE_CURRENT_SERVICE_ID: u32 = 4;
pub const CERT_SYSTEM_STORE_SERVICES_ID: u32 = 5;
pub const CERT_SYSTEM_STORE_USERS_ID: u32 = 6;
pub const CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID: u32 = 7;
pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID: u32 = 8;
pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID: u32 = 9;
pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID: u32 = 10;
pub const CERT_SYSTEM_STORE_CURRENT_USER: u32 = 65536;
pub const CERT_SYSTEM_STORE_LOCAL_MACHINE: u32 = 131072;
pub const CERT_SYSTEM_STORE_CURRENT_SERVICE: u32 = 262144;
pub const CERT_SYSTEM_STORE_SERVICES: u32 = 327680;
pub const CERT_SYSTEM_STORE_USERS: u32 = 393216;
pub const CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY: u32 = 458752;
pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY: u32 = 524288;
pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE: u32 = 589824;
pub const CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS: u32 = 655360;
pub const CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH: &'static [u8; 47usize] =
    b"Software\\Policies\\Microsoft\\SystemCertificates\0";
pub const CERT_EFSBLOB_REGPATH: &'static [u8; 51usize] =
    b"Software\\Policies\\Microsoft\\SystemCertificates\\EFS\0";
pub const CERT_EFSBLOB_VALUE_NAME: &'static [u8; 8usize] = b"EFSBlob\0";
pub const CERT_PROT_ROOT_FLAGS_REGPATH: &'static [u8; 67usize] =
    b"Software\\Policies\\Microsoft\\SystemCertificates\\Root\\ProtectedRoots\0";
pub const CERT_PROT_ROOT_FLAGS_VALUE_NAME: &'static [u8; 6usize] = b"Flags\0";
pub const CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG: u32 = 1;
pub const CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG: u32 = 2;
pub const CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG: u32 = 4;
pub const CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG: u32 = 8;
pub const CERT_PROT_ROOT_ONLY_LM_GPT_FLAG: u32 = 8;
pub const CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG: u32 = 16;
pub const CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG: u32 = 32;
pub const CERT_PROT_ROOT_DISABLE_PEER_TRUST: u32 = 65536;
pub const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME: &'static [u8; 11usize] = b"PeerUsages\0";
pub const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A: &'static [u8; 11usize] = b"PeerUsages\0";
pub const CERT_PROT_ROOT_PEER_USAGES_DEFAULT_A: &'static [u8; 60usize] =
    b"1.3.6.1.5.5.7.3.2\01.3.6.1.5.5.7.3.4\01.3.6.1.4.1.311.10.3.4\0\0";
pub const CERT_TRUST_PUB_SAFER_GROUP_POLICY_REGPATH: &'static [u8; 70usize] =
    b"Software\\Policies\\Microsoft\\SystemCertificates\\TrustedPublisher\\Safer\0";
pub const CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH: &'static [u8; 38usize] =
    b"Software\\Microsoft\\SystemCertificates\0";
pub const CERT_TRUST_PUB_SAFER_LOCAL_MACHINE_REGPATH: &'static [u8; 61usize] =
    b"Software\\Microsoft\\SystemCertificates\\TrustedPublisher\\Safer\0";
pub const CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME: &'static [u8; 18usize] =
    b"AuthenticodeFlags\0";
pub const CERT_TRUST_PUB_ALLOW_TRUST_MASK: u32 = 3;
pub const CERT_TRUST_PUB_ALLOW_END_USER_TRUST: u32 = 0;
pub const CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST: u32 = 1;
pub const CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST: u32 = 2;
pub const CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG: u32 = 256;
pub const CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG: u32 = 512;
pub const CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH: &'static [u8; 73usize] =
    b"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\OC Manager\\Subcomponents\0";
pub const CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME: &'static [u8; 15usize] =
    b"RootAutoUpdate\0";
pub const CERT_DISABLE_ROOT_AUTO_UPDATE_REGPATH: &'static [u8; 56usize] =
    b"Software\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\0";
pub const CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME: &'static [u8; 22usize] =
    b"DisableRootAutoUpdate\0";
pub const CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME: &'static [u8; 31usize] =
    b"EnableDisallowedCertAutoUpdate\0";
pub const CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME: &'static [u8; 26usize] =
    b"DisablePinRulesAutoUpdate\0";
pub const CERT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH: &'static [u8; 58usize] =
    b"Software\\Microsoft\\SystemCertificates\\AuthRoot\\AutoUpdate\0";
pub const CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME: &'static [u8; 11usize] = b"RootDirUrl\0";
pub const CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME: &'static [u8; 15usize] =
    b"SyncFromDirUrl\0";
pub const CERT_AUTH_ROOT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH: &'static [u8; 58usize] =
    b"Software\\Microsoft\\SystemCertificates\\AuthRoot\\AutoUpdate\0";
pub const CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME: &'static [u8; 11usize] =
    b"RootDirUrl\0";
pub const CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME: &'static [u8; 14usize] =
    b"SyncDeltaTime\0";
pub const CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME: &'static [u8; 6usize] = b"Flags\0";
pub const CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG: u32 = 1;
pub const CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG: u32 = 2;
pub const CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG: u32 = 4;
pub const CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME: &'static [u8; 13usize] =
    b"LastSyncTime\0";
pub const CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME: &'static [u8; 11usize] =
    b"EncodedCtl\0";
pub const CERT_AUTH_ROOT_CTL_FILENAME: &'static [u8; 13usize] = b"authroot.stl\0";
pub const CERT_AUTH_ROOT_CTL_FILENAME_A: &'static [u8; 13usize] = b"authroot.stl\0";
pub const CERT_AUTH_ROOT_CAB_FILENAME: &'static [u8; 16usize] = b"authrootstl.cab\0";
pub const CERT_AUTH_ROOT_SEQ_FILENAME: &'static [u8; 16usize] = b"authrootseq.txt\0";
pub const CERT_AUTH_ROOT_CERT_EXT: &'static [u8; 5usize] = b".crt\0";
pub const CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME: &'static [u8; 28usize] =
    b"DisallowedCertSyncDeltaTime\0";
pub const CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME: &'static [u8; 27usize] =
    b"DisallowedCertLastSyncTime\0";
pub const CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME: &'static [u8; 25usize] =
    b"DisallowedCertEncodedCtl\0";
pub const CERT_DISALLOWED_CERT_CTL_FILENAME: &'static [u8; 19usize] = b"disallowedcert.stl\0";
pub const CERT_DISALLOWED_CERT_CTL_FILENAME_A: &'static [u8; 19usize] = b"disallowedcert.stl\0";
pub const CERT_DISALLOWED_CERT_CAB_FILENAME: &'static [u8; 22usize] = b"disallowedcertstl.cab\0";
pub const CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER: &'static [u8; 28usize] =
    b"DisallowedCert_AutoUpdate_1\0";
pub const CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME: &'static [u8; 22usize] =
    b"PinRulesSyncDeltaTime\0";
pub const CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME: &'static [u8; 21usize] =
    b"PinRulesLastSyncTime\0";
pub const CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME: &'static [u8; 19usize] =
    b"PinRulesEncodedCtl\0";
pub const CERT_PIN_RULES_CTL_FILENAME: &'static [u8; 13usize] = b"pinrules.stl\0";
pub const CERT_PIN_RULES_CTL_FILENAME_A: &'static [u8; 13usize] = b"pinrules.stl\0";
pub const CERT_PIN_RULES_CAB_FILENAME: &'static [u8; 16usize] = b"pinrulesstl.cab\0";
pub const CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER: &'static [u8; 22usize] =
    b"PinRules_AutoUpdate_1\0";
pub const CERT_REGISTRY_STORE_REMOTE_FLAG: u32 = 65536;
pub const CERT_REGISTRY_STORE_SERIALIZED_FLAG: u32 = 131072;
pub const CERT_REGISTRY_STORE_CLIENT_GPT_FLAG: u32 = 2147483648;
pub const CERT_REGISTRY_STORE_LM_GPT_FLAG: u32 = 16777216;
pub const CERT_REGISTRY_STORE_ROAMING_FLAG: u32 = 262144;
pub const CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG: u32 = 524288;
pub const CERT_REGISTRY_STORE_EXTERNAL_FLAG: u32 = 1048576;
pub const CERT_IE_DIRTY_FLAGS_REGPATH: &'static [u8; 45usize] =
    b"Software\\Microsoft\\Cryptography\\IEDirtyFlags\0";
pub const CERT_FILE_STORE_COMMIT_ENABLE_FLAG: u32 = 65536;
pub const CERT_LDAP_STORE_SIGN_FLAG: u32 = 65536;
pub const CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG: u32 = 131072;
pub const CERT_LDAP_STORE_OPENED_FLAG: u32 = 262144;
pub const CERT_LDAP_STORE_UNBIND_FLAG: u32 = 524288;
pub const CRYPT_OID_OPEN_STORE_PROV_FUNC: &'static [u8; 21usize] = b"CertDllOpenStoreProv\0";
pub const CERT_STORE_PROV_EXTERNAL_FLAG: u32 = 1;
pub const CERT_STORE_PROV_DELETED_FLAG: u32 = 2;
pub const CERT_STORE_PROV_NO_PERSIST_FLAG: u32 = 4;
pub const CERT_STORE_PROV_SYSTEM_STORE_FLAG: u32 = 8;
pub const CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG: u32 = 16;
pub const CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG: u32 = 32;
pub const CERT_STORE_PROV_SHARED_USER_FLAG: u32 = 64;
pub const CERT_STORE_PROV_CLOSE_FUNC: u32 = 0;
pub const CERT_STORE_PROV_READ_CERT_FUNC: u32 = 1;
pub const CERT_STORE_PROV_WRITE_CERT_FUNC: u32 = 2;
pub const CERT_STORE_PROV_DELETE_CERT_FUNC: u32 = 3;
pub const CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC: u32 = 4;
pub const CERT_STORE_PROV_READ_CRL_FUNC: u32 = 5;
pub const CERT_STORE_PROV_WRITE_CRL_FUNC: u32 = 6;
pub const CERT_STORE_PROV_DELETE_CRL_FUNC: u32 = 7;
pub const CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC: u32 = 8;
pub const CERT_STORE_PROV_READ_CTL_FUNC: u32 = 9;
pub const CERT_STORE_PROV_WRITE_CTL_FUNC: u32 = 10;
pub const CERT_STORE_PROV_DELETE_CTL_FUNC: u32 = 11;
pub const CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC: u32 = 12;
pub const CERT_STORE_PROV_CONTROL_FUNC: u32 = 13;
pub const CERT_STORE_PROV_FIND_CERT_FUNC: u32 = 14;
pub const CERT_STORE_PROV_FREE_FIND_CERT_FUNC: u32 = 15;
pub const CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC: u32 = 16;
pub const CERT_STORE_PROV_FIND_CRL_FUNC: u32 = 17;
pub const CERT_STORE_PROV_FREE_FIND_CRL_FUNC: u32 = 18;
pub const CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC: u32 = 19;
pub const CERT_STORE_PROV_FIND_CTL_FUNC: u32 = 20;
pub const CERT_STORE_PROV_FREE_FIND_CTL_FUNC: u32 = 21;
pub const CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC: u32 = 22;
pub const CERT_STORE_PROV_WRITE_ADD_FLAG: u32 = 1;
pub const CERT_STORE_SAVE_AS_STORE: u32 = 1;
pub const CERT_STORE_SAVE_AS_PKCS7: u32 = 2;
pub const CERT_STORE_SAVE_AS_PKCS12: u32 = 3;
pub const CERT_STORE_SAVE_TO_FILE: u32 = 1;
pub const CERT_STORE_SAVE_TO_MEMORY: u32 = 2;
pub const CERT_STORE_SAVE_TO_FILENAME_A: u32 = 3;
pub const CERT_STORE_SAVE_TO_FILENAME_W: u32 = 4;
pub const CERT_STORE_SAVE_TO_FILENAME: u32 = 4;
pub const CERT_CLOSE_STORE_FORCE_FLAG: u32 = 1;
pub const CERT_CLOSE_STORE_CHECK_FLAG: u32 = 2;
pub const CERT_COMPARE_MASK: u32 = 65535;
pub const CERT_COMPARE_SHIFT: u32 = 16;
pub const CERT_COMPARE_ANY: u32 = 0;
pub const CERT_COMPARE_SHA1_HASH: u32 = 1;
pub const CERT_COMPARE_NAME: u32 = 2;
pub const CERT_COMPARE_ATTR: u32 = 3;
pub const CERT_COMPARE_MD5_HASH: u32 = 4;
pub const CERT_COMPARE_PROPERTY: u32 = 5;
pub const CERT_COMPARE_PUBLIC_KEY: u32 = 6;
pub const CERT_COMPARE_HASH: u32 = 1;
pub const CERT_COMPARE_NAME_STR_A: u32 = 7;
pub const CERT_COMPARE_NAME_STR_W: u32 = 8;
pub const CERT_COMPARE_KEY_SPEC: u32 = 9;
pub const CERT_COMPARE_ENHKEY_USAGE: u32 = 10;
pub const CERT_COMPARE_CTL_USAGE: u32 = 10;
pub const CERT_COMPARE_SUBJECT_CERT: u32 = 11;
pub const CERT_COMPARE_ISSUER_OF: u32 = 12;
pub const CERT_COMPARE_EXISTING: u32 = 13;
pub const CERT_COMPARE_SIGNATURE_HASH: u32 = 14;
pub const CERT_COMPARE_KEY_IDENTIFIER: u32 = 15;
pub const CERT_COMPARE_CERT_ID: u32 = 16;
pub const CERT_COMPARE_CROSS_CERT_DIST_POINTS: u32 = 17;
pub const CERT_COMPARE_PUBKEY_MD5_HASH: u32 = 18;
pub const CERT_COMPARE_SUBJECT_INFO_ACCESS: u32 = 19;
pub const CERT_COMPARE_HASH_STR: u32 = 20;
pub const CERT_COMPARE_HAS_PRIVATE_KEY: u32 = 21;
pub const CERT_FIND_ANY: u32 = 0;
pub const CERT_FIND_SHA1_HASH: u32 = 65536;
pub const CERT_FIND_MD5_HASH: u32 = 262144;
pub const CERT_FIND_SIGNATURE_HASH: u32 = 917504;
pub const CERT_FIND_KEY_IDENTIFIER: u32 = 983040;
pub const CERT_FIND_HASH: u32 = 65536;
pub const CERT_FIND_PROPERTY: u32 = 327680;
pub const CERT_FIND_PUBLIC_KEY: u32 = 393216;
pub const CERT_FIND_SUBJECT_NAME: u32 = 131079;
pub const CERT_FIND_SUBJECT_ATTR: u32 = 196615;
pub const CERT_FIND_ISSUER_NAME: u32 = 131076;
pub const CERT_FIND_ISSUER_ATTR: u32 = 196612;
pub const CERT_FIND_SUBJECT_STR_A: u32 = 458759;
pub const CERT_FIND_SUBJECT_STR_W: u32 = 524295;
pub const CERT_FIND_SUBJECT_STR: u32 = 524295;
pub const CERT_FIND_ISSUER_STR_A: u32 = 458756;
pub const CERT_FIND_ISSUER_STR_W: u32 = 524292;
pub const CERT_FIND_ISSUER_STR: u32 = 524292;
pub const CERT_FIND_KEY_SPEC: u32 = 589824;
pub const CERT_FIND_ENHKEY_USAGE: u32 = 655360;
pub const CERT_FIND_CTL_USAGE: u32 = 655360;
pub const CERT_FIND_SUBJECT_CERT: u32 = 720896;
pub const CERT_FIND_ISSUER_OF: u32 = 786432;
pub const CERT_FIND_EXISTING: u32 = 851968;
pub const CERT_FIND_CERT_ID: u32 = 1048576;
pub const CERT_FIND_CROSS_CERT_DIST_POINTS: u32 = 1114112;
pub const CERT_FIND_PUBKEY_MD5_HASH: u32 = 1179648;
pub const CERT_FIND_SUBJECT_INFO_ACCESS: u32 = 1245184;
pub const CERT_FIND_HASH_STR: u32 = 1310720;
pub const CERT_FIND_HAS_PRIVATE_KEY: u32 = 1376256;
pub const CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG: u32 = 1;
pub const CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG: u32 = 2;
pub const CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG: u32 = 4;
pub const CERT_FIND_NO_ENHKEY_USAGE_FLAG: u32 = 8;
pub const CERT_FIND_OR_ENHKEY_USAGE_FLAG: u32 = 16;
pub const CERT_FIND_VALID_ENHKEY_USAGE_FLAG: u32 = 32;
pub const CERT_FIND_OPTIONAL_CTL_USAGE_FLAG: u32 = 1;
pub const CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG: u32 = 2;
pub const CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG: u32 = 4;
pub const CERT_FIND_NO_CTL_USAGE_FLAG: u32 = 8;
pub const CERT_FIND_OR_CTL_USAGE_FLAG: u32 = 16;
pub const CERT_FIND_VALID_CTL_USAGE_FLAG: u32 = 32;
pub const CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG: u32 = 2147483648;
pub const CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG: u32 = 1073741824;
pub const CTL_ENTRY_FROM_PROP_CHAIN_FLAG: u32 = 1;
pub const CRL_FIND_ANY: u32 = 0;
pub const CRL_FIND_ISSUED_BY: u32 = 1;
pub const CRL_FIND_EXISTING: u32 = 2;
pub const CRL_FIND_ISSUED_FOR: u32 = 3;
pub const CRL_FIND_ISSUED_BY_AKI_FLAG: u32 = 1;
pub const CRL_FIND_ISSUED_BY_SIGNATURE_FLAG: u32 = 2;
pub const CRL_FIND_ISSUED_BY_DELTA_FLAG: u32 = 4;
pub const CRL_FIND_ISSUED_BY_BASE_FLAG: u32 = 8;
pub const CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG: u32 = 16;
pub const CERT_STORE_ADD_NEW: u32 = 1;
pub const CERT_STORE_ADD_USE_EXISTING: u32 = 2;
pub const CERT_STORE_ADD_REPLACE_EXISTING: u32 = 3;
pub const CERT_STORE_ADD_ALWAYS: u32 = 4;
pub const CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES: u32 = 5;
pub const CERT_STORE_ADD_NEWER: u32 = 6;
pub const CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES: u32 = 7;
pub const CERT_STORE_CERTIFICATE_CONTEXT: u32 = 1;
pub const CERT_STORE_CRL_CONTEXT: u32 = 2;
pub const CERT_STORE_CTL_CONTEXT: u32 = 3;
pub const CERT_STORE_ALL_CONTEXT_FLAG: i32 = -1;
pub const CERT_STORE_CERTIFICATE_CONTEXT_FLAG: u32 = 2;
pub const CERT_STORE_CRL_CONTEXT_FLAG: u32 = 4;
pub const CERT_STORE_CTL_CONTEXT_FLAG: u32 = 8;
pub const CTL_ANY_SUBJECT_TYPE: u32 = 1;
pub const CTL_CERT_SUBJECT_TYPE: u32 = 2;
pub const CTL_FIND_ANY: u32 = 0;
pub const CTL_FIND_SHA1_HASH: u32 = 1;
pub const CTL_FIND_MD5_HASH: u32 = 2;
pub const CTL_FIND_USAGE: u32 = 3;
pub const CTL_FIND_SUBJECT: u32 = 4;
pub const CTL_FIND_EXISTING: u32 = 5;
pub const CTL_FIND_NO_LIST_ID_CBDATA: u32 = 4294967295;
pub const CTL_FIND_SAME_USAGE_FLAG: u32 = 1;
pub const CERT_STORE_CTRL_RESYNC: u32 = 1;
pub const CERT_STORE_CTRL_NOTIFY_CHANGE: u32 = 2;
pub const CERT_STORE_CTRL_COMMIT: u32 = 3;
pub const CERT_STORE_CTRL_AUTO_RESYNC: u32 = 4;
pub const CERT_STORE_CTRL_CANCEL_NOTIFY: u32 = 5;
pub const CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG: u32 = 1;
pub const CERT_STORE_CTRL_COMMIT_FORCE_FLAG: u32 = 1;
pub const CERT_STORE_CTRL_COMMIT_CLEAR_FLAG: u32 = 2;
pub const CERT_STORE_LOCALIZED_NAME_PROP_ID: u32 = 4096;
pub const CERT_CREATE_CONTEXT_NOCOPY_FLAG: u32 = 1;
pub const CERT_CREATE_CONTEXT_SORTED_FLAG: u32 = 2;
pub const CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG: u32 = 4;
pub const CERT_CREATE_CONTEXT_NO_ENTRY_FLAG: u32 = 8;
pub const CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG: u32 = 1;
pub const CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG: u32 = 2;
pub const CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG: u32 = 4;
pub const CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG: u32 = 8;
pub const CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG: u32 = 1;
pub const CERT_PHYSICAL_STORE_DEFAULT_NAME: &'static [u8; 9usize] = b".Default\0";
pub const CERT_PHYSICAL_STORE_GROUP_POLICY_NAME: &'static [u8; 13usize] = b".GroupPolicy\0";
pub const CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME: &'static [u8; 14usize] = b".LocalMachine\0";
pub const CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME: &'static [u8; 17usize] =
    b".UserCertificate\0";
pub const CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME: &'static [u8; 25usize] =
    b".LocalMachineGroupPolicy\0";
pub const CERT_PHYSICAL_STORE_ENTERPRISE_NAME: &'static [u8; 12usize] = b".Enterprise\0";
pub const CERT_PHYSICAL_STORE_AUTH_ROOT_NAME: &'static [u8; 10usize] = b".AuthRoot\0";
pub const CERT_PHYSICAL_STORE_SMART_CARD_NAME: &'static [u8; 11usize] = b".SmartCard\0";
pub const CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC: &'static [u8; 27usize] =
    b"CertDllOpenSystemStoreProv\0";
pub const CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC: &'static [u8; 27usize] =
    b"CertDllRegisterSystemStore\0";
pub const CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC: &'static [u8; 29usize] =
    b"CertDllUnregisterSystemStore\0";
pub const CRYPT_OID_ENUM_SYSTEM_STORE_FUNC: &'static [u8; 23usize] = b"CertDllEnumSystemStore\0";
pub const CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC: &'static [u8; 29usize] =
    b"CertDllRegisterPhysicalStore\0";
pub const CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC: &'static [u8; 31usize] =
    b"CertDllUnregisterPhysicalStore\0";
pub const CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC: &'static [u8; 25usize] =
    b"CertDllEnumPhysicalStore\0";
pub const CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME: &'static [u8; 20usize] =
    b"SystemStoreLocation\0";
pub const CMSG_TRUSTED_SIGNER_FLAG: u32 = 1;
pub const CMSG_SIGNER_ONLY_FLAG: u32 = 2;
pub const CMSG_USE_SIGNER_INDEX_FLAG: u32 = 4;
pub const CMSG_CMS_ENCAPSULATED_CTL_FLAG: u32 = 32768;
pub const CMSG_ENCODE_SORTED_CTL_FLAG: u32 = 1;
pub const CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG: u32 = 2;
pub const CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG: u32 = 1;
pub const CERT_VERIFY_TRUSTED_SIGNERS_FLAG: u32 = 2;
pub const CERT_VERIFY_NO_TIME_CHECK_FLAG: u32 = 4;
pub const CERT_VERIFY_ALLOW_MORE_USAGE_FLAG: u32 = 8;
pub const CERT_VERIFY_UPDATED_CTL_FLAG: u32 = 1;
pub const CERT_CONTEXT_REVOCATION_TYPE: u32 = 1;
pub const CERT_VERIFY_REV_CHAIN_FLAG: u32 = 1;
pub const CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION: u32 = 2;
pub const CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG: u32 = 4;
pub const CERT_VERIFY_REV_SERVER_OCSP_FLAG: u32 = 8;
pub const CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG: u32 = 16;
pub const CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG: u32 = 32;
pub const CERT_UNICODE_IS_RDN_ATTRS_FLAG: u32 = 1;
pub const CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG: u32 = 2;
pub const CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB: u32 = 1;
pub const CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT: u32 = 2;
pub const CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL: u32 = 3;
pub const CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE: u32 = 4;
pub const CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY: u32 = 1;
pub const CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT: u32 = 2;
pub const CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN: u32 = 3;
pub const CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL: u32 = 4;
pub const CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG: u32 = 1;
pub const CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG: u32 = 2;
pub const CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG: u32 = 4;
pub const CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG: u32 = 8;
pub const CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC: &'static [u8; 42usize] =
    b"CryptDllExtractEncodedSignatureParameters\0";
pub const CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC: &'static [u8; 26usize] =
    b"CryptDllSignAndEncodeHash\0";
pub const CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC: &'static [u8; 31usize] =
    b"CryptDllVerifyEncodedSignature\0";
pub const CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG: u32 = 1;
pub const CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG: u32 = 2;
pub const CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID: u32 = 1;
pub const CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID: u32 = 2;
pub const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC: &'static [u8; 30usize] =
    b"CryptDllExportPublicKeyInfoEx\0";
pub const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC: &'static [u8; 31usize] =
    b"CryptDllExportPublicKeyInfoEx2\0";
pub const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC: &'static [u8; 47usize] =
    b"CryptDllExportPublicKeyInfoFromBCryptKeyHandle\0";
pub const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC: &'static [u8; 30usize] =
    b"CryptDllImportPublicKeyInfoEx\0";
pub const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC: &'static [u8; 31usize] =
    b"CryptDllImportPublicKeyInfoEx2\0";
pub const CRYPT_ACQUIRE_CACHE_FLAG: u32 = 1;
pub const CRYPT_ACQUIRE_USE_PROV_INFO_FLAG: u32 = 2;
pub const CRYPT_ACQUIRE_COMPARE_KEY_FLAG: u32 = 4;
pub const CRYPT_ACQUIRE_NO_HEALING: u32 = 8;
pub const CRYPT_ACQUIRE_SILENT_FLAG: u32 = 64;
pub const CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG: u32 = 128;
pub const CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK: u32 = 458752;
pub const CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG: u32 = 65536;
pub const CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG: u32 = 131072;
pub const CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG: u32 = 262144;
pub const CRYPT_FIND_USER_KEYSET_FLAG: u32 = 1;
pub const CRYPT_FIND_MACHINE_KEYSET_FLAG: u32 = 2;
pub const CRYPT_FIND_SILENT_KEYSET_FLAG: u32 = 64;
pub const CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC: &'static [u8; 31usize] =
    b"CryptDllImportPrivateKeyInfoEx\0";
pub const CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC: &'static [u8; 31usize] =
    b"CryptDllExportPrivateKeyInfoEx\0";
pub const CRYPT_DELETE_KEYSET: u32 = 16;
pub const CERT_SIMPLE_NAME_STR: u32 = 1;
pub const CERT_OID_NAME_STR: u32 = 2;
pub const CERT_X500_NAME_STR: u32 = 3;
pub const CERT_XML_NAME_STR: u32 = 4;
pub const CERT_NAME_STR_SEMICOLON_FLAG: u32 = 1073741824;
pub const CERT_NAME_STR_NO_PLUS_FLAG: u32 = 536870912;
pub const CERT_NAME_STR_NO_QUOTING_FLAG: u32 = 268435456;
pub const CERT_NAME_STR_CRLF_FLAG: u32 = 134217728;
pub const CERT_NAME_STR_COMMA_FLAG: u32 = 67108864;
pub const CERT_NAME_STR_REVERSE_FLAG: u32 = 33554432;
pub const CERT_NAME_STR_FORWARD_FLAG: u32 = 16777216;
pub const CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG: u32 = 65536;
pub const CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG: u32 = 131072;
pub const CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG: u32 = 262144;
pub const CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG: u32 = 524288;
pub const CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG: u32 = 1048576;
pub const CERT_NAME_STR_ENABLE_PUNYCODE_FLAG: u32 = 2097152;
pub const CERT_NAME_EMAIL_TYPE: u32 = 1;
pub const CERT_NAME_RDN_TYPE: u32 = 2;
pub const CERT_NAME_ATTR_TYPE: u32 = 3;
pub const CERT_NAME_SIMPLE_DISPLAY_TYPE: u32 = 4;
pub const CERT_NAME_FRIENDLY_DISPLAY_TYPE: u32 = 5;
pub const CERT_NAME_DNS_TYPE: u32 = 6;
pub const CERT_NAME_URL_TYPE: u32 = 7;
pub const CERT_NAME_UPN_TYPE: u32 = 8;
pub const CERT_NAME_ISSUER_FLAG: u32 = 1;
pub const CERT_NAME_DISABLE_IE4_UTF8_FLAG: u32 = 65536;
pub const CERT_NAME_SEARCH_ALL_NAMES_FLAG: u32 = 2;
pub const CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG: u32 = 1;
pub const CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG: u32 = 2;
pub const CRYPT_MESSAGE_KEYID_SIGNER_FLAG: u32 = 4;
pub const CRYPT_MESSAGE_SILENT_KEYSET_FLAG: u32 = 64;
pub const CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG: u32 = 4;
pub const CERT_QUERY_OBJECT_FILE: u32 = 1;
pub const CERT_QUERY_OBJECT_BLOB: u32 = 2;
pub const CERT_QUERY_CONTENT_CERT: u32 = 1;
pub const CERT_QUERY_CONTENT_CTL: u32 = 2;
pub const CERT_QUERY_CONTENT_CRL: u32 = 3;
pub const CERT_QUERY_CONTENT_SERIALIZED_STORE: u32 = 4;
pub const CERT_QUERY_CONTENT_SERIALIZED_CERT: u32 = 5;
pub const CERT_QUERY_CONTENT_SERIALIZED_CTL: u32 = 6;
pub const CERT_QUERY_CONTENT_SERIALIZED_CRL: u32 = 7;
pub const CERT_QUERY_CONTENT_PKCS7_SIGNED: u32 = 8;
pub const CERT_QUERY_CONTENT_PKCS7_UNSIGNED: u32 = 9;
pub const CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED: u32 = 10;
pub const CERT_QUERY_CONTENT_PKCS10: u32 = 11;
pub const CERT_QUERY_CONTENT_PFX: u32 = 12;
pub const CERT_QUERY_CONTENT_CERT_PAIR: u32 = 13;
pub const CERT_QUERY_CONTENT_PFX_AND_LOAD: u32 = 14;
pub const CERT_QUERY_CONTENT_FLAG_CERT: u32 = 2;
pub const CERT_QUERY_CONTENT_FLAG_CTL: u32 = 4;
pub const CERT_QUERY_CONTENT_FLAG_CRL: u32 = 8;
pub const CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE: u32 = 16;
pub const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT: u32 = 32;
pub const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL: u32 = 64;
pub const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL: u32 = 128;
pub const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED: u32 = 256;
pub const CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED: u32 = 512;
pub const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED: u32 = 1024;
pub const CERT_QUERY_CONTENT_FLAG_PKCS10: u32 = 2048;
pub const CERT_QUERY_CONTENT_FLAG_PFX: u32 = 4096;
pub const CERT_QUERY_CONTENT_FLAG_CERT_PAIR: u32 = 8192;
pub const CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD: u32 = 16384;
pub const CERT_QUERY_CONTENT_FLAG_ALL: u32 = 16382;
pub const CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT: u32 = 818;
pub const CERT_QUERY_FORMAT_BINARY: u32 = 1;
pub const CERT_QUERY_FORMAT_BASE64_ENCODED: u32 = 2;
pub const CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED: u32 = 3;
pub const CERT_QUERY_FORMAT_FLAG_BINARY: u32 = 2;
pub const CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED: u32 = 4;
pub const CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED: u32 = 8;
pub const CERT_QUERY_FORMAT_FLAG_ALL: u32 = 14;
pub const SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC: &'static [u8; 31usize] =
    b"SchemeDllRetrieveEncodedObject\0";
pub const SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC: &'static [u8; 32usize] =
    b"SchemeDllRetrieveEncodedObjectW\0";
pub const CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC: &'static [u8; 30usize] =
    b"ContextDllCreateObjectContext\0";
pub const CRYPT_RETRIEVE_MULTIPLE_OBJECTS: u32 = 1;
pub const CRYPT_CACHE_ONLY_RETRIEVAL: u32 = 2;
pub const CRYPT_WIRE_ONLY_RETRIEVAL: u32 = 4;
pub const CRYPT_DONT_CACHE_RESULT: u32 = 8;
pub const CRYPT_ASYNC_RETRIEVAL: u32 = 16;
pub const CRYPT_STICKY_CACHE_RETRIEVAL: u32 = 4096;
pub const CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL: u32 = 8192;
pub const CRYPT_OFFLINE_CHECK_RETRIEVAL: u32 = 16384;
pub const CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE: u32 = 32768;
pub const CRYPT_LDAP_SIGN_RETRIEVAL: u32 = 65536;
pub const CRYPT_NO_AUTH_RETRIEVAL: u32 = 131072;
pub const CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL: u32 = 262144;
pub const CRYPT_AIA_RETRIEVAL: u32 = 524288;
pub const CRYPT_HTTP_POST_RETRIEVAL: u32 = 1048576;
pub const CRYPT_PROXY_CACHE_RETRIEVAL: u32 = 2097152;
pub const CRYPT_NOT_MODIFIED_RETRIEVAL: u32 = 4194304;
pub const CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL: u32 = 8388608;
pub const CRYPT_RANDOM_QUERY_STRING_RETRIEVAL: u32 = 67108864;
pub const CRYPT_ENABLE_FILE_RETRIEVAL: u32 = 134217728;
pub const CRYPT_CREATE_NEW_FLUSH_ENTRY: u32 = 268435456;
pub const CRYPT_VERIFY_CONTEXT_SIGNATURE: u32 = 32;
pub const CRYPT_VERIFY_DATA_HASH: u32 = 64;
pub const CRYPT_KEEP_TIME_VALID: u32 = 128;
pub const CRYPT_DONT_VERIFY_SIGNATURE: u32 = 256;
pub const CRYPT_DONT_CHECK_TIME_VALIDITY: u32 = 512;
pub const CRYPT_CHECK_FRESHNESS_TIME_VALIDITY: u32 = 1024;
pub const CRYPT_ACCUMULATIVE_TIMEOUT: u32 = 2048;
pub const CRYPT_OCSP_ONLY_RETRIEVAL: u32 = 16777216;
pub const CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL: u32 = 33554432;
pub const CRYPTNET_URL_CACHE_PRE_FETCH_NONE: u32 = 0;
pub const CRYPTNET_URL_CACHE_PRE_FETCH_BLOB: u32 = 1;
pub const CRYPTNET_URL_CACHE_PRE_FETCH_CRL: u32 = 2;
pub const CRYPTNET_URL_CACHE_PRE_FETCH_OCSP: u32 = 3;
pub const CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB: u32 = 5;
pub const CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB: u32 = 6;
pub const CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB: u32 = 7;
pub const CRYPTNET_URL_CACHE_DEFAULT_FLUSH: u32 = 0;
pub const CRYPTNET_URL_CACHE_DISABLE_FLUSH: u32 = 4294967295;
pub const CRYPTNET_URL_CACHE_RESPONSE_NONE: u32 = 0;
pub const CRYPTNET_URL_CACHE_RESPONSE_HTTP: u32 = 1;
pub const CRYPTNET_URL_CACHE_RESPONSE_VALIDATED: u32 = 32768;
pub const CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH: u32 = 4096;
pub const CRYPT_GET_URL_FROM_PROPERTY: u32 = 1;
pub const CRYPT_GET_URL_FROM_EXTENSION: u32 = 2;
pub const CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE: u32 = 4;
pub const CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE: u32 = 8;
pub const URL_OID_GET_OBJECT_URL_FUNC: &'static [u8; 19usize] = b"UrlDllGetObjectUrl\0";
pub const TIME_VALID_OID_GET_OBJECT_FUNC: &'static [u8; 22usize] = b"TimeValidDllGetObject\0";
pub const TIME_VALID_OID_FLUSH_OBJECT_FUNC: &'static [u8; 24usize] = b"TimeValidDllFlushObject\0";
pub const CERT_CREATE_SELFSIGN_NO_SIGN: u32 = 1;
pub const CERT_CREATE_SELFSIGN_NO_KEY_INFO: u32 = 2;
pub const CRYPT_KEYID_MACHINE_FLAG: u32 = 32;
pub const CRYPT_KEYID_ALLOC_FLAG: u32 = 32768;
pub const CRYPT_KEYID_DELETE_FLAG: u32 = 16;
pub const CRYPT_KEYID_SET_NEW_FLAG: u32 = 8192;
pub const CERT_CHAIN_CONFIG_REGPATH : & 'static [ u8 ; 94usize ] = b"Software\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllCreateCertificateChainEngine\\Config\0" ;
pub const CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME: &'static [u8; 25usize] =
    b"MaxUrlRetrievalByteCount\0";
pub const CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_DEFAULT: u32 = 104857600;
pub const CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME: &'static [u8; 25usize] =
    b"ChainCacheResyncFiletime\0";
pub const CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME: &'static [u8; 33usize] =
    b"DisableMandatoryBasicConstraints\0";
pub const CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME: &'static [u8; 25usize] =
    b"DisableCANameConstraints\0";
pub const CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME: &'static [u8; 37usize] =
    b"DisableUnsupportedCriticalExtensions\0";
pub const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME: &'static [u8; 21usize] =
    b"MaxAIAUrlCountInCert\0";
pub const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT: u32 = 5;
pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME: &'static [u8; 32usize] =
    b"MaxAIAUrlRetrievalCountPerChain\0";
pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT: u32 = 3;
pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME: &'static [u8; 28usize] =
    b"MaxAIAUrlRetrievalByteCount\0";
pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT: u32 = 100000;
pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME: &'static [u8; 28usize] =
    b"MaxAIAUrlRetrievalCertCount\0";
pub const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT: u32 = 10;
pub const CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME: &'static [u8; 20usize] =
    b"OcspValiditySeconds\0";
pub const CERT_CHAIN_OCSP_VALIDITY_SECONDS_DEFAULT: u32 = 43200;
pub const CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME: &'static [u8; 19usize] =
    b"DisableSerialChain\0";
pub const CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME: &'static [u8; 23usize] =
    b"SerialChainLogFileName\0";
pub const CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME: &'static [u8; 23usize] =
    b"DisableSyncWithSslTime\0";
pub const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME: &'static [u8; 28usize] =
    b"MaxSslTimeUpdatedEventCount\0";
pub const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT: u32 = 5;
pub const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE: u32 = 4294967295;
pub const CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME: &'static [u8; 24usize] =
    b"SslHandshakeLogFileName\0";
pub const CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME: &'static [u8; 25usize] =
    b"EnableWeakSignatureFlags\0";
pub const CERT_CHAIN_ENABLE_MD2_MD4_FLAG: u32 = 1;
pub const CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG: u32 = 2;
pub const CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG: u32 = 4;
pub const CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG: u32 = 8;
pub const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME: &'static [u8; 22usize] =
    b"MinRsaPubKeyBitLength\0";
pub const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT: u32 = 1023;
pub const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE: u32 = 4294967295;
pub const CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME: &'static [u8; 18usize] =
    b"WeakRsaPubKeyTime\0";
pub const CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME: &'static [u8; 20usize] =
    b"WeakSignatureLogDir\0";
pub const CERT_CHAIN_DEFAULT_CONFIG_SUBDIR: &'static [u8; 8usize] = b"Default\0";
pub const CERT_CHAIN_WEAK_PREFIX_NAME: &'static [u8; 5usize] = b"Weak\0";
pub const CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME: &'static [u8; 11usize] = b"ThirdParty\0";
pub const CERT_CHAIN_WEAK_ALL_CONFIG_NAME: &'static [u8; 4usize] = b"All\0";
pub const CERT_CHAIN_WEAK_FLAGS_NAME: &'static [u8; 6usize] = b"Flags\0";
pub const CERT_CHAIN_WEAK_HYGIENE_NAME: &'static [u8; 8usize] = b"Hygiene\0";
pub const CERT_CHAIN_WEAK_AFTER_TIME_NAME: &'static [u8; 10usize] = b"AfterTime\0";
pub const CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME: &'static [u8; 18usize] =
    b"FileHashAfterTime\0";
pub const CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME: &'static [u8; 23usize] =
    b"TimestampHashAfterTime\0";
pub const CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME: &'static [u8; 13usize] = b"MinBitLength\0";
pub const CERT_CHAIN_WEAK_SHA256_ALLOW_NAME: &'static [u8; 12usize] = b"Sha256Allow\0";
pub const CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE: u32 = 4294967295;
pub const CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG: u32 = 2147483648;
pub const CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG: u32 = 65536;
pub const CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG: u32 = 131072;
pub const CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG: u32 = 262144;
pub const CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG: u32 = 1048576;
pub const CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG: u32 = 2097152;
pub const CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG: u32 = 4194304;
pub const CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG: u32 = 8388608;
pub const CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG: u32 = 16777216;
pub const CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG: u32 = 33554432;
pub const CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG: u32 = 67108864;
pub const CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG: u32 = 134217728;
pub const CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG: u32 = 268435456;
pub const CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG: u32 = 536870912;
pub const CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG: u32 = 1073741824;
pub const CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG: u32 = 4096;
pub const CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG: u32 = 8192;
pub const CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG: u32 = 16384;
pub const CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG: u32 = 32768;
pub const CERT_CHAIN_DISABLE_WEAK_FLAGS: u32 = 215285760;
pub const CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAGS: u32 = 12288;
pub const CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAGS: u32 = 49152;
pub const CERT_CHAIN_ENABLE_HYGIENE_FLAGS: u32 = 857866240;
pub const CERT_CHAIN_MOTW_WEAK_FLAGS: u32 = 1786773504;
pub const CERT_CHAIN_OPT_IN_WEAK_FLAGS: u32 = 262144;
pub const CERT_CHAIN_AUTO_CURRENT_USER: u32 = 1;
pub const CERT_CHAIN_AUTO_LOCAL_MACHINE: u32 = 2;
pub const CERT_CHAIN_AUTO_IMPERSONATED: u32 = 3;
pub const CERT_CHAIN_AUTO_PROCESS_INFO: u32 = 4;
pub const CERT_CHAIN_AUTO_PINRULE_INFO: u32 = 5;
pub const CERT_CHAIN_AUTO_NETWORK_INFO: u32 = 6;
pub const CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE: u32 = 7;
pub const CERT_CHAIN_AUTO_HPKP_RULE_INFO: u32 = 8;
pub const CERT_CHAIN_AUTO_FLAGS_VALUE_NAME: &'static [u8; 10usize] = b"AutoFlags\0";
pub const CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG: u32 = 1;
pub const CERT_CHAIN_AUTO_LOG_CREATE_FLAG: u32 = 2;
pub const CERT_CHAIN_AUTO_LOG_FREE_FLAG: u32 = 4;
pub const CERT_CHAIN_AUTO_LOG_FLUSH_FLAG: u32 = 8;
pub const CERT_CHAIN_AUTO_LOG_FLAGS: u32 = 14;
pub const CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME: &'static [u8; 27usize] =
    b"AutoFlushFirstDeltaSeconds\0";
pub const CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_DEFAULT: u32 = 300;
pub const CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME: &'static [u8; 26usize] =
    b"AutoFlushNextDeltaSeconds\0";
pub const CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_DEFAULT: u32 = 1800;
pub const CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME: &'static [u8; 16usize] = b"AutoLogFileName\0";
pub const CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME: &'static [u8; 32usize] =
    b"DisableAutoFlushProcessNameList\0";
pub const CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME: &'static [u8; 30usize] =
    b"SrvOcspRespMinValiditySeconds\0";
pub const CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT: u32 = 600;
pub const CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME: &'static [u8; 43usize] =
    b"SrvOcspRespUrlRetrievalTimeoutMilliseconds\0";
pub const CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: u32 = 15000;
pub const CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME: &'static [u8; 38usize] =
    b"SrvOcspRespMaxBeforeNextUpdateSeconds\0";
pub const CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 14400;
pub const CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME: &'static [u8; 38usize] =
    b"SrvOcspRespMinBeforeNextUpdateSeconds\0";
pub const CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 120;
pub const CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME: &'static [u8; 37usize] =
    b"SrvOcspRespMinAfterNextUpdateSeconds\0";
pub const CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 60;
pub const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME: &'static [u8; 34usize] =
    b"SrvOcspRespMinSyncCertFileSeconds\0";
pub const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT: u32 = 5;
pub const CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME: &'static [u8; 34usize] =
    b"SrvOcspRespMaxSyncCertFileSeconds\0";
pub const CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_DEFAULT: u32 = 3600;
pub const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME: &'static [u8; 33usize] =
    b"CryptnetMaxCachedOcspPerCrlCount\0";
pub const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT: u32 = 500;
pub const CRYPTNET_OCSP_AFTER_CRL_DISABLE: u32 = 4294967295;
pub const CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME: &'static [u8; 34usize] =
    b"CryptnetDefaultFlushExemptSeconds\0";
pub const CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_DEFAULT: u32 = 2419200;
pub const CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME: &'static [u8; 33usize] =
    b"CryptnetPreFetchMinMaxAgeSeconds\0";
pub const CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_DEFAULT: u32 = 3600;
pub const CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME: &'static [u8; 33usize] =
    b"CryptnetPreFetchMaxMaxAgeSeconds\0";
pub const CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_DEFAULT: u32 = 1209600;
pub const CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME: &'static [u8; 45usize] =
    b"CryptnetPreFetchMinOcspValidityPeriodSeconds\0";
pub const CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_DEFAULT: u32 = 1209600;
pub const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME: &'static [u8; 44usize] =
    b"CryptnetPreFetchAfterPublishPreFetchDivisor\0";
pub const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT: u32 = 10;
pub const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME: &'static [u8;
             48usize] = b"CryptnetPreFetchBeforeNextUpdatePreFetchDivisor\0";
pub const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT: u32 = 20;
pub const CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME:
    &'static [u8; 51usize] = b"CryptnetPreFetchMinBeforeNextUpdatePreFetchSeconds\0";
pub const CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: u32 = 3600;
pub const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME:
    &'static [u8; 61usize] = b"CryptnetPreFetchValidityPeriodAfterNextUpdatePreFetchDivisor\0";
pub const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT: u32 = 10;
pub const CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME:
    &'static [u8; 56usize] = b"CryptnetPreFetchMaxAfterNextUpdatePreFetchPeriodSeconds\0";
pub const CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: u32 = 14400;
pub const CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME:
    &'static [u8; 56usize] = b"CryptnetPreFetchMinAfterNextUpdatePreFetchPeriodSeconds\0";
pub const CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: u32 = 1800;
pub const CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME:
    &'static [u8; 54usize] = b"CryptnetPreFetchAfterCurrentTimePreFetchPeriodSeconds\0";
pub const CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_DEFAULT: u32 = 1800;
pub const CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME: &'static [u8; 37usize] =
    b"CryptnetPreFetchTriggerPeriodSeconds\0";
pub const CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_DEFAULT: u32 = 600;
pub const CRYPTNET_PRE_FETCH_TRIGGER_DISABLE: u32 = 4294967295;
pub const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME: &'static [u8; 45usize] =
    b"CryptnetPreFetchScanAfterTriggerDelaySeconds\0";
pub const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT: u32 = 60;
pub const CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME: &'static [u8; 40usize] =
    b"CryptnetPreFetchRetrievalTimeoutSeconds\0";
pub const CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_DEFAULT: u32 = 300;
pub const CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH : & 'static [ u8 ; 106usize ] = b"Software\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllCreateCertificateChainEngine\\Config\\CrlPreFetch\0" ;
pub const CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME: &'static [u8; 16usize] =
    b"ProcessNameList\0";
pub const CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME: &'static [u8; 16usize] = b"PreFetchUrlList\0";
pub const CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME: &'static [u8; 25usize] =
    b"DisableInformationEvents\0";
pub const CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME: &'static [u8; 12usize] =
    b"LogFileName\0";
pub const CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME: &'static [u8; 15usize] =
    b"TimeoutSeconds\0";
pub const CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_DEFAULT: u32 = 300;
pub const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME: &'static [u8; 14usize] =
    b"MaxAgeSeconds\0";
pub const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_DEFAULT: u32 = 7200;
pub const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_MIN: u32 = 300;
pub const CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME:
    &'static [u8; 31usize] = b"PublishBeforeNextUpdateSeconds\0";
pub const CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 3600;
pub const CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME: &'static [u8;
             29usize] = b"PublishRandomIntervalSeconds\0";
pub const CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_DEFAULT: u32 = 300;
pub const CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME: &'static [u8; 27usize] =
    b"MinBeforeNextUpdateSeconds\0";
pub const CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 300;
pub const CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME: &'static [u8; 26usize] =
    b"MinAfterNextUpdateSeconds\0";
pub const CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT: u32 = 300;
pub const CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH: &'static [u8; 66usize] =
    b"Software\\Policies\\Microsoft\\SystemCertificates\\ChainEngine\\Config\0";
pub const CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME: &'static [u8; 37usize] =
    b"ChainUrlRetrievalTimeoutMilliseconds\0";
pub const CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: u32 = 15000;
pub const CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME:
    &'static [u8; 52usize] = b"ChainRevAccumulativeUrlRetrievalTimeoutMilliseconds\0";
pub const CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: u32 = 20000;
pub const CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME: &'static [u8; 22usize] =
    b"EnableInetUnknownAuth\0";
pub const CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME: &'static [u8; 16usize] = b"EnableInetLocal\0";
pub const CERT_RETR_BEHAVIOR_FILE_VALUE_NAME: &'static [u8; 19usize] = b"AllowFileUrlScheme\0";
pub const CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME: &'static [u8; 26usize] =
    b"DisableLDAPSignAndEncrypt\0";
pub const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME: &'static [u8; 35usize] =
    b"CryptnetCachedOcspSwitchToCrlCount\0";
pub const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT: u32 = 50;
pub const CRYPTNET_CRL_BEFORE_OCSP_ENABLE: u32 = 4294967295;
pub const CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME: &'static [u8; 23usize] =
    b"DisableAIAUrlRetrieval\0";
pub const CERT_CHAIN_OPTIONS_VALUE_NAME: &'static [u8; 8usize] = b"Options\0";
pub const CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL: u32 = 2;
pub const CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL: u32 = 4;
pub const CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME: &'static [u8; 31usize] =
    b"CrossCertDownloadIntervalHours\0";
pub const CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_DEFAULT: u32 = 168;
pub const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME: &'static [u8; 27usize] =
    b"CRLValidityExtensionPeriod\0";
pub const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT: u32 = 12;
pub const CERT_CHAIN_CACHE_END_CERT: u32 = 1;
pub const CERT_CHAIN_THREAD_STORE_SYNC: u32 = 2;
pub const CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL: u32 = 4;
pub const CERT_CHAIN_USE_LOCAL_MACHINE_STORE: u32 = 8;
pub const CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE: u32 = 16;
pub const CERT_CHAIN_ENABLE_SHARE_STORE: u32 = 32;
pub const CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG: u32 = 1;
pub const CERT_TRUST_NO_ERROR: u32 = 0;
pub const CERT_TRUST_IS_NOT_TIME_VALID: u32 = 1;
pub const CERT_TRUST_IS_NOT_TIME_NESTED: u32 = 2;
pub const CERT_TRUST_IS_REVOKED: u32 = 4;
pub const CERT_TRUST_IS_NOT_SIGNATURE_VALID: u32 = 8;
pub const CERT_TRUST_IS_NOT_VALID_FOR_USAGE: u32 = 16;
pub const CERT_TRUST_IS_UNTRUSTED_ROOT: u32 = 32;
pub const CERT_TRUST_REVOCATION_STATUS_UNKNOWN: u32 = 64;
pub const CERT_TRUST_IS_CYCLIC: u32 = 128;
pub const CERT_TRUST_INVALID_EXTENSION: u32 = 256;
pub const CERT_TRUST_INVALID_POLICY_CONSTRAINTS: u32 = 512;
pub const CERT_TRUST_INVALID_BASIC_CONSTRAINTS: u32 = 1024;
pub const CERT_TRUST_INVALID_NAME_CONSTRAINTS: u32 = 2048;
pub const CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT: u32 = 4096;
pub const CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT: u32 = 8192;
pub const CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT: u32 = 16384;
pub const CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT: u32 = 32768;
pub const CERT_TRUST_IS_OFFLINE_REVOCATION: u32 = 16777216;
pub const CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY: u32 = 33554432;
pub const CERT_TRUST_IS_EXPLICIT_DISTRUST: u32 = 67108864;
pub const CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT: u32 = 134217728;
pub const CERT_TRUST_HAS_WEAK_SIGNATURE: u32 = 1048576;
pub const CERT_TRUST_HAS_WEAK_HYGIENE: u32 = 2097152;
pub const CERT_TRUST_IS_PARTIAL_CHAIN: u32 = 65536;
pub const CERT_TRUST_CTL_IS_NOT_TIME_VALID: u32 = 131072;
pub const CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID: u32 = 262144;
pub const CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE: u32 = 524288;
pub const CERT_TRUST_HAS_EXACT_MATCH_ISSUER: u32 = 1;
pub const CERT_TRUST_HAS_KEY_MATCH_ISSUER: u32 = 2;
pub const CERT_TRUST_HAS_NAME_MATCH_ISSUER: u32 = 4;
pub const CERT_TRUST_IS_SELF_SIGNED: u32 = 8;
pub const CERT_TRUST_AUTO_UPDATE_CA_REVOCATION: u32 = 16;
pub const CERT_TRUST_AUTO_UPDATE_END_REVOCATION: u32 = 32;
pub const CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL: u32 = 64;
pub const CERT_TRUST_IS_KEY_ROLLOVER: u32 = 128;
pub const CERT_TRUST_SSL_HANDSHAKE_OCSP: u32 = 262144;
pub const CERT_TRUST_SSL_TIME_VALID_OCSP: u32 = 524288;
pub const CERT_TRUST_SSL_RECONNECT_OCSP: u32 = 1048576;
pub const CERT_TRUST_HAS_PREFERRED_ISSUER: u32 = 256;
pub const CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY: u32 = 512;
pub const CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS: u32 = 1024;
pub const CERT_TRUST_IS_PEER_TRUSTED: u32 = 2048;
pub const CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED: u32 = 4096;
pub const CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE: u32 = 8192;
pub const CERT_TRUST_IS_CA_TRUSTED: u32 = 16384;
pub const CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE: u32 = 32768;
pub const CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE: u32 = 131072;
pub const CERT_TRUST_IS_COMPLEX_CHAIN: u32 = 65536;
pub const CERT_TRUST_SSL_TIME_VALID: u32 = 16777216;
pub const CERT_TRUST_NO_TIME_CHECK: u32 = 33554432;
pub const USAGE_MATCH_TYPE_AND: u32 = 0;
pub const USAGE_MATCH_TYPE_OR: u32 = 1;
pub const CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG: u32 = 1;
pub const CERT_CHAIN_REVOCATION_CHECK_END_CERT: u32 = 268435456;
pub const CERT_CHAIN_REVOCATION_CHECK_CHAIN: u32 = 536870912;
pub const CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT: u32 = 1073741824;
pub const CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY: u32 = 2147483648;
pub const CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT: u32 = 134217728;
pub const CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT: u32 = 67108864;
pub const CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING: u32 = 64;
pub const CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS: u32 = 128;
pub const CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE: u32 = 256;
pub const CERT_CHAIN_TIMESTAMP_TIME: u32 = 512;
pub const CERT_CHAIN_ENABLE_PEER_TRUST: u32 = 1024;
pub const CERT_CHAIN_DISABLE_MY_PEER_TRUST: u32 = 2048;
pub const CERT_CHAIN_DISABLE_MD2_MD4: u32 = 4096;
pub const CERT_CHAIN_DISABLE_AIA: u32 = 8192;
pub const CERT_CHAIN_HAS_MOTW: u32 = 16384;
pub const CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT: u32 = 32768;
pub const CERT_CHAIN_OPT_IN_WEAK_SIGNATURE: u32 = 65536;
pub const CERT_CHAIN_FIND_BY_ISSUER: u32 = 1;
pub const CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG: u32 = 1;
pub const CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG: u32 = 2;
pub const CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG: u32 = 4;
pub const CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG: u32 = 8;
pub const CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG: u32 = 16384;
pub const CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG: u32 = 32768;
pub const CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG: u32 = 1;
pub const CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG: u32 = 2;
pub const CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG: u32 = 4;
pub const CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG: u32 = 8;
pub const CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS: u32 = 7;
pub const CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG: u32 = 16;
pub const CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG: u32 = 32;
pub const CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG: u32 = 64;
pub const CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG: u32 = 128;
pub const CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG: u32 = 256;
pub const CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG: u32 = 512;
pub const CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG: u32 = 1024;
pub const CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG: u32 = 2048;
pub const CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS: u32 = 3840;
pub const CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG: u32 = 32768;
pub const CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG: u32 = 16384;
pub const CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG: u32 = 8192;
pub const CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG: u32 = 4096;
pub const CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG: u32 = 134217728;
pub const CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC: &'static [u8; 36usize] =
    b"CertDllVerifyCertificateChainPolicy\0";
pub const AUTHTYPE_CLIENT: u32 = 1;
pub const AUTHTYPE_SERVER: u32 = 2;
pub const BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG: u32 = 2147483648;
pub const BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG: u32 = 1073741824;
pub const MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG: u32 = 65536;
pub const MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG: u32 = 131072;
pub const MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG: u32 = 262144;
pub const SSL_F12_ERROR_TEXT_LENGTH: u32 = 256;
pub const CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL: u32 = 0;
pub const CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL: u32 = 1;
pub const CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL: u32 = 2;
pub const CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY: u32 = 0;
pub const CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY: u32 = 1;
pub const CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY: u32 = 2;
pub const SSL_HPKP_PKP_HEADER_INDEX: u32 = 0;
pub const SSL_HPKP_PKP_RO_HEADER_INDEX: u32 = 1;
pub const SSL_HPKP_HEADER_COUNT: u32 = 2;
pub const SSL_KEY_PIN_ERROR_TEXT_LENGTH: u32 = 512;
pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR: i32 = -2;
pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR: i32 = -1;
pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS: u32 = 0;
pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING: u32 = 1;
pub const CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING: u32 = 2;
pub const CRYPT_STRING_BASE64HEADER: u32 = 0;
pub const CRYPT_STRING_BASE64: u32 = 1;
pub const CRYPT_STRING_BINARY: u32 = 2;
pub const CRYPT_STRING_BASE64REQUESTHEADER: u32 = 3;
pub const CRYPT_STRING_HEX: u32 = 4;
pub const CRYPT_STRING_HEXASCII: u32 = 5;
pub const CRYPT_STRING_BASE64_ANY: u32 = 6;
pub const CRYPT_STRING_ANY: u32 = 7;
pub const CRYPT_STRING_HEX_ANY: u32 = 8;
pub const CRYPT_STRING_BASE64X509CRLHEADER: u32 = 9;
pub const CRYPT_STRING_HEXADDR: u32 = 10;
pub const CRYPT_STRING_HEXASCIIADDR: u32 = 11;
pub const CRYPT_STRING_HEXRAW: u32 = 12;
pub const CRYPT_STRING_BASE64URI: u32 = 13;
pub const CRYPT_STRING_ENCODEMASK: u32 = 255;
pub const CRYPT_STRING_RESERVED100: u32 = 256;
pub const CRYPT_STRING_RESERVED200: u32 = 512;
pub const CRYPT_STRING_PERCENTESCAPE: u32 = 134217728;
pub const CRYPT_STRING_HASHDATA: u32 = 268435456;
pub const CRYPT_STRING_STRICT: u32 = 536870912;
pub const CRYPT_STRING_NOCRLF: u32 = 1073741824;
pub const CRYPT_STRING_NOCR: u32 = 2147483648;
pub const szOID_PKCS_12_PbeIds: &'static [u8; 22usize] = b"1.2.840.113549.1.12.1\0";
pub const szOID_PKCS_12_pbeWithSHA1And128BitRC4: &'static [u8; 24usize] =
    b"1.2.840.113549.1.12.1.1\0";
pub const szOID_PKCS_12_pbeWithSHA1And40BitRC4: &'static [u8; 24usize] =
    b"1.2.840.113549.1.12.1.2\0";
pub const szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES: &'static [u8; 24usize] =
    b"1.2.840.113549.1.12.1.3\0";
pub const szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES: &'static [u8; 24usize] =
    b"1.2.840.113549.1.12.1.4\0";
pub const szOID_PKCS_12_pbeWithSHA1And128BitRC2: &'static [u8; 24usize] =
    b"1.2.840.113549.1.12.1.5\0";
pub const szOID_PKCS_12_pbeWithSHA1And40BitRC2: &'static [u8; 24usize] =
    b"1.2.840.113549.1.12.1.6\0";
pub const szOID_PKCS_5_PBKDF2: &'static [u8; 22usize] = b"1.2.840.113549.1.5.12\0";
pub const szOID_PKCS_5_PBES2: &'static [u8; 22usize] = b"1.2.840.113549.1.5.13\0";
pub const PKCS12_IMPORT_SILENT: u32 = 64;
pub const CRYPT_USER_KEYSET: u32 = 4096;
pub const PKCS12_PREFER_CNG_KSP: u32 = 256;
pub const PKCS12_ALWAYS_CNG_KSP: u32 = 512;
pub const PKCS12_ONLY_CERTIFICATES: u32 = 1024;
pub const PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES: u32 = 2048;
pub const PKCS12_ALLOW_OVERWRITE_KEY: u32 = 16384;
pub const PKCS12_NO_PERSIST_KEY: u32 = 32768;
pub const PKCS12_VIRTUAL_ISOLATION_KEY: u32 = 65536;
pub const PKCS12_IMPORT_RESERVED_MASK: u32 = 4294901760;
pub const PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE: u32 = 0;
pub const PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME: &'static [u8; 12usize] = b"PfxProvider\0";
pub const PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME: &'static [u8; 13usize] = b"PfxContainer\0";
pub const REPORT_NO_PRIVATE_KEY: u32 = 1;
pub const REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY: u32 = 2;
pub const EXPORT_PRIVATE_KEYS: u32 = 4;
pub const PKCS12_INCLUDE_EXTENDED_PROPERTIES: u32 = 16;
pub const PKCS12_PROTECT_TO_DOMAIN_SIDS: u32 = 32;
pub const PKCS12_EXPORT_SILENT: u32 = 64;
pub const PKCS12_EXPORT_PBES2_PARAMS: u32 = 128;
pub const PKCS12_DISABLE_ENCRYPT_CERTIFICATES: u32 = 256;
pub const PKCS12_ENCRYPT_CERTIFICATES: u32 = 512;
pub const PKCS12_EXPORT_ECC_CURVE_PARAMETERS: u32 = 4096;
pub const PKCS12_EXPORT_ECC_CURVE_OID: u32 = 8192;
pub const PKCS12_EXPORT_RESERVED_MASK: u32 = 4294901760;
pub const PKCS12_PBKDF2_ID_HMAC_SHA1: &'static [u8; 19usize] = b"1.2.840.113549.2.7\0";
pub const PKCS12_PBKDF2_ID_HMAC_SHA256: &'static [u8; 19usize] = b"1.2.840.113549.2.9\0";
pub const PKCS12_PBKDF2_ID_HMAC_SHA384: &'static [u8; 20usize] = b"1.2.840.113549.2.10\0";
pub const PKCS12_PBKDF2_ID_HMAC_SHA512: &'static [u8; 20usize] = b"1.2.840.113549.2.11\0";
pub const PKCS12_PBES2_ALG_AES256_SHA256: &'static [u8; 14usize] = b"AES256-SHA256\0";
pub const PKCS12_CONFIG_REGPATH: &'static [u8; 46usize] =
    b"Software\\Microsoft\\Windows\\CurrentVersion\\PFX\0";
pub const PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME: &'static [u8; 20usize] = b"EncryptCertificates\0";
pub const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG: u32 = 1;
pub const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG: u32 = 2;
pub const CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG: u32 = 1;
pub const CERT_SELECT_MAX_PARA: u32 = 500;
pub const CERT_SELECT_BY_ENHKEY_USAGE: u32 = 1;
pub const CERT_SELECT_BY_KEY_USAGE: u32 = 2;
pub const CERT_SELECT_BY_POLICY_OID: u32 = 3;
pub const CERT_SELECT_BY_PROV_NAME: u32 = 4;
pub const CERT_SELECT_BY_EXTENSION: u32 = 5;
pub const CERT_SELECT_BY_SUBJECT_HOST_NAME: u32 = 6;
pub const CERT_SELECT_BY_ISSUER_ATTR: u32 = 7;
pub const CERT_SELECT_BY_SUBJECT_ATTR: u32 = 8;
pub const CERT_SELECT_BY_ISSUER_NAME: u32 = 9;
pub const CERT_SELECT_BY_PUBLIC_KEY: u32 = 10;
pub const CERT_SELECT_BY_TLS_SIGNATURES: u32 = 11;
pub const CERT_SELECT_BY_ISSUER_DISPLAYNAME: u32 = 12;
pub const CERT_SELECT_BY_FRIENDLYNAME: u32 = 13;
pub const CERT_SELECT_BY_THUMBPRINT: u32 = 14;
pub const CERT_SELECT_LAST: u32 = 11;
pub const CERT_SELECT_MAX: u32 = 33;
pub const CERT_SELECT_ALLOW_EXPIRED: u32 = 1;
pub const CERT_SELECT_TRUSTED_ROOT: u32 = 2;
pub const CERT_SELECT_DISALLOW_SELFSIGNED: u32 = 4;
pub const CERT_SELECT_HAS_PRIVATE_KEY: u32 = 8;
pub const CERT_SELECT_HAS_KEY_FOR_SIGNATURE: u32 = 16;
pub const CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE: u32 = 32;
pub const CERT_SELECT_HARDWARE_ONLY: u32 = 64;
pub const CERT_SELECT_ALLOW_DUPLICATES: u32 = 128;
pub const CERT_SELECT_IGNORE_AUTOSELECT: u32 = 256;
pub const TIMESTAMP_VERSION: u32 = 1;
pub const TIMESTAMP_STATUS_GRANTED: u32 = 0;
pub const TIMESTAMP_STATUS_GRANTED_WITH_MODS: u32 = 1;
pub const TIMESTAMP_STATUS_REJECTED: u32 = 2;
pub const TIMESTAMP_STATUS_WAITING: u32 = 3;
pub const TIMESTAMP_STATUS_REVOCATION_WARNING: u32 = 4;
pub const TIMESTAMP_STATUS_REVOKED: u32 = 5;
pub const TIMESTAMP_FAILURE_BAD_ALG: u32 = 0;
pub const TIMESTAMP_FAILURE_BAD_REQUEST: u32 = 2;
pub const TIMESTAMP_FAILURE_BAD_FORMAT: u32 = 5;
pub const TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE: u32 = 14;
pub const TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED: u32 = 15;
pub const TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED: u32 = 16;
pub const TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE: u32 = 17;
pub const TIMESTAMP_FAILURE_SYSTEM_FAILURE: u32 = 25;
pub const TIMESTAMP_DONT_HASH_DATA: u32 = 1;
pub const TIMESTAMP_VERIFY_CONTEXT_SIGNATURE: u32 = 32;
pub const TIMESTAMP_NO_AUTH_RETRIEVAL: u32 = 131072;
pub const CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE: u32 = 1;
pub const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE: u32 = 32;
pub const CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE: u32 = 33;
pub const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE: u32 = 65535;
pub const SSL_OBJECT_LOCATOR_PFX_FUNC: &'static [u8; 30usize] = b"SslObjectLocatorInitializePfx\0";
pub const SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC: &'static [u8; 37usize] =
    b"SslObjectLocatorInitializeIssuerList\0";
pub const SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC: &'static [u8; 47usize] =
    b"SslObjectLocatorInitializeCertValidationConfig\0";
pub const CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN: u32 = 1;
pub const CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP: u32 = 2;
pub const CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT: u32 = 3;
pub const CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD: u32 = 4;
pub const CERT_FILE_HASH_USE_TYPE: u32 = 1;
pub const CERT_TIMESTAMP_HASH_USE_TYPE: u32 = 2;
pub const szFORCE_KEY_PROTECTION: &'static [u8; 19usize] = b"ForceKeyProtection\0";
pub const dwFORCE_KEY_PROTECTION_DISABLED: u32 = 0;
pub const dwFORCE_KEY_PROTECTION_USER_SELECT: u32 = 1;
pub const dwFORCE_KEY_PROTECTION_HIGH: u32 = 2;
pub const CRYPTPROTECT_PROMPT_ON_UNPROTECT: u32 = 1;
pub const CRYPTPROTECT_PROMPT_ON_PROTECT: u32 = 2;
pub const CRYPTPROTECT_PROMPT_RESERVED: u32 = 4;
pub const CRYPTPROTECT_PROMPT_STRONG: u32 = 8;
pub const CRYPTPROTECT_PROMPT_REQUIRE_STRONG: u32 = 16;
pub const CRYPTPROTECT_UI_FORBIDDEN: u32 = 1;
pub const CRYPTPROTECT_LOCAL_MACHINE: u32 = 4;
pub const CRYPTPROTECT_CRED_SYNC: u32 = 8;
pub const CRYPTPROTECT_AUDIT: u32 = 16;
pub const CRYPTPROTECT_NO_RECOVERY: u32 = 32;
pub const CRYPTPROTECT_VERIFY_PROTECTION: u32 = 64;
pub const CRYPTPROTECT_CRED_REGENERATE: u32 = 128;
pub const CRYPTPROTECT_FIRST_RESERVED_FLAGVAL: u32 = 268435455;
pub const CRYPTPROTECT_LAST_RESERVED_FLAGVAL: u32 = 4294967295;
pub const CRYPTPROTECTMEMORY_BLOCK_SIZE: u32 = 16;
pub const CRYPTPROTECTMEMORY_SAME_PROCESS: u32 = 0;
pub const CRYPTPROTECTMEMORY_CROSS_PROCESS: u32 = 1;
pub const CRYPTPROTECTMEMORY_SAME_LOGON: u32 = 2;
pub const WINEFS_SETUSERKEY_SET_CAPABILITIES: u32 = 1;
pub const EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR: u32 = 5;
pub const EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR: u32 = 6;
pub const EFS_SUBVER_UNKNOWN: u32 = 0;
pub const EFS_EFS_SUBVER_EFS_CERT: u32 = 1;
pub const EFS_PFILE_SUBVER_RMS: u32 = 2;
pub const EFS_PFILE_SUBVER_APPX: u32 = 3;
pub const MAX_SID_SIZE: u32 = 256;
pub const EFS_METADATA_ADD_USER: u32 = 1;
pub const EFS_METADATA_REMOVE_USER: u32 = 2;
pub const EFS_METADATA_REPLACE_USER: u32 = 4;
pub const EFS_METADATA_GENERAL_OP: u32 = 8;
pub const __REQUIRED_RPCNDR_H_VERSION__: u32 = 500;
pub const __REQUIRED_RPCSAL_H_VERSION__: u32 = 100;
pub const __RPCNDR_H_VERSION__: u32 = 500;
pub const __RPCSAL_H_VERSION__: u32 = 100;
pub const TARGET_IS_NT100_OR_LATER: u32 = 1;
pub const TARGET_IS_NT63_OR_LATER: u32 = 1;
pub const TARGET_IS_NT62_OR_LATER: u32 = 1;
pub const TARGET_IS_NT61_OR_LATER: u32 = 1;
pub const TARGET_IS_NT60_OR_LATER: u32 = 1;
pub const TARGET_IS_NT51_OR_LATER: u32 = 1;
pub const TARGET_IS_NT50_OR_LATER: u32 = 1;
pub const TARGET_IS_NT40_OR_LATER: u32 = 1;
pub const TARGET_IS_NT351_OR_WIN95_OR_LATER: u32 = 1;
pub const cbNDRContext: u32 = 20;
pub const USER_CALL_IS_ASYNC: u32 = 256;
pub const USER_CALL_NEW_CORRELATION_DESC: u32 = 512;
pub const USER_MARSHAL_FC_BYTE: u32 = 1;
pub const USER_MARSHAL_FC_CHAR: u32 = 2;
pub const USER_MARSHAL_FC_SMALL: u32 = 3;
pub const USER_MARSHAL_FC_USMALL: u32 = 4;
pub const USER_MARSHAL_FC_WCHAR: u32 = 5;
pub const USER_MARSHAL_FC_SHORT: u32 = 6;
pub const USER_MARSHAL_FC_USHORT: u32 = 7;
pub const USER_MARSHAL_FC_LONG: u32 = 8;
pub const USER_MARSHAL_FC_ULONG: u32 = 9;
pub const USER_MARSHAL_FC_FLOAT: u32 = 10;
pub const USER_MARSHAL_FC_HYPER: u32 = 11;
pub const USER_MARSHAL_FC_DOUBLE: u32 = 12;
pub const ROTREGFLAGS_ALLOWANYCLIENT: u32 = 1;
pub const APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP: u32 = 1;
pub const APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND: u32 = 2;
pub const APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY: u32 = 4;
pub const APPIDREGFLAGS_IUSERVER_UNMODIFIED_LOGON_TOKEN: u32 = 8;
pub const APPIDREGFLAGS_IUSERVER_SELF_SID_IN_LAUNCH_PERMISSION: u32 = 16;
pub const APPIDREGFLAGS_IUSERVER_ACTIVATE_IN_CLIENT_SESSION_ONLY: u32 = 32;
pub const APPIDREGFLAGS_RESERVED1: u32 = 64;
pub const APPIDREGFLAGS_RESERVED2: u32 = 128;
pub const APPIDREGFLAGS_RESERVED3: u32 = 256;
pub const APPIDREGFLAGS_RESERVED4: u32 = 512;
pub const APPIDREGFLAGS_RESERVED5: u32 = 1024;
pub const APPIDREGFLAGS_AAA_NO_IMPLICIT_ACTIVATE_AS_IU: u32 = 2048;
pub const APPIDREGFLAGS_RESERVED7: u32 = 4096;
pub const APPIDREGFLAGS_RESERVED8: u32 = 8192;
pub const DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES: u32 = 1;
pub const DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL: u32 = 2;
pub const DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES: u32 = 4;
pub const DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL: u32 = 8;
pub const DCOMSCM_PING_USE_MID_AUTHNSERVICE: u32 = 16;
pub const DCOMSCM_PING_DISALLOW_UNSECURE_CALL: u32 = 32;
pub const ROTFLAGS_REGISTRATIONKEEPSALIVE: u32 = 1;
pub const ROTFLAGS_ALLOWANYCLIENT: u32 = 2;
pub const ROT_COMPARE_MAX: u32 = 2048;
pub const WDT_INPROC_CALL: u32 = 1215587415;
pub const WDT_REMOTE_CALL: u32 = 1383359575;
pub const WDT_INPROC64_CALL: u32 = 1349805143;
pub const FILE_DEVICE_BEEP: u32 = 1;
pub const FILE_DEVICE_CD_ROM: u32 = 2;
pub const FILE_DEVICE_CD_ROM_FILE_SYSTEM: u32 = 3;
pub const FILE_DEVICE_CONTROLLER: u32 = 4;
pub const FILE_DEVICE_DATALINK: u32 = 5;
pub const FILE_DEVICE_DFS: u32 = 6;
pub const FILE_DEVICE_DISK: u32 = 7;
pub const FILE_DEVICE_DISK_FILE_SYSTEM: u32 = 8;
pub const FILE_DEVICE_FILE_SYSTEM: u32 = 9;
pub const FILE_DEVICE_INPORT_PORT: u32 = 10;
pub const FILE_DEVICE_KEYBOARD: u32 = 11;
pub const FILE_DEVICE_MAILSLOT: u32 = 12;
pub const FILE_DEVICE_MIDI_IN: u32 = 13;
pub const FILE_DEVICE_MIDI_OUT: u32 = 14;
pub const FILE_DEVICE_MOUSE: u32 = 15;
pub const FILE_DEVICE_MULTI_UNC_PROVIDER: u32 = 16;
pub const FILE_DEVICE_NAMED_PIPE: u32 = 17;
pub const FILE_DEVICE_NETWORK: u32 = 18;
pub const FILE_DEVICE_NETWORK_BROWSER: u32 = 19;
pub const FILE_DEVICE_NETWORK_FILE_SYSTEM: u32 = 20;
pub const FILE_DEVICE_NULL: u32 = 21;
pub const FILE_DEVICE_PARALLEL_PORT: u32 = 22;
pub const FILE_DEVICE_PHYSICAL_NETCARD: u32 = 23;
pub const FILE_DEVICE_PRINTER: u32 = 24;
pub const FILE_DEVICE_SCANNER: u32 = 25;
pub const FILE_DEVICE_SERIAL_MOUSE_PORT: u32 = 26;
pub const FILE_DEVICE_SERIAL_PORT: u32 = 27;
pub const FILE_DEVICE_SCREEN: u32 = 28;
pub const FILE_DEVICE_SOUND: u32 = 29;
pub const FILE_DEVICE_STREAMS: u32 = 30;
pub const FILE_DEVICE_TAPE: u32 = 31;
pub const FILE_DEVICE_TAPE_FILE_SYSTEM: u32 = 32;
pub const FILE_DEVICE_TRANSPORT: u32 = 33;
pub const FILE_DEVICE_UNKNOWN: u32 = 34;
pub const FILE_DEVICE_VIDEO: u32 = 35;
pub const FILE_DEVICE_VIRTUAL_DISK: u32 = 36;
pub const FILE_DEVICE_WAVE_IN: u32 = 37;
pub const FILE_DEVICE_WAVE_OUT: u32 = 38;
pub const FILE_DEVICE_8042_PORT: u32 = 39;
pub const FILE_DEVICE_NETWORK_REDIRECTOR: u32 = 40;
pub const FILE_DEVICE_BATTERY: u32 = 41;
pub const FILE_DEVICE_BUS_EXTENDER: u32 = 42;
pub const FILE_DEVICE_MODEM: u32 = 43;
pub const FILE_DEVICE_VDM: u32 = 44;
pub const FILE_DEVICE_MASS_STORAGE: u32 = 45;
pub const FILE_DEVICE_SMB: u32 = 46;
pub const FILE_DEVICE_KS: u32 = 47;
pub const FILE_DEVICE_CHANGER: u32 = 48;
pub const FILE_DEVICE_SMARTCARD: u32 = 49;
pub const FILE_DEVICE_ACPI: u32 = 50;
pub const FILE_DEVICE_DVD: u32 = 51;
pub const FILE_DEVICE_FULLSCREEN_VIDEO: u32 = 52;
pub const FILE_DEVICE_DFS_FILE_SYSTEM: u32 = 53;
pub const FILE_DEVICE_DFS_VOLUME: u32 = 54;
pub const FILE_DEVICE_SERENUM: u32 = 55;
pub const FILE_DEVICE_TERMSRV: u32 = 56;
pub const FILE_DEVICE_KSEC: u32 = 57;
pub const FILE_DEVICE_FIPS: u32 = 58;
pub const FILE_DEVICE_INFINIBAND: u32 = 59;
pub const FILE_DEVICE_VMBUS: u32 = 62;
pub const FILE_DEVICE_CRYPT_PROVIDER: u32 = 63;
pub const FILE_DEVICE_WPD: u32 = 64;
pub const FILE_DEVICE_BLUETOOTH: u32 = 65;
pub const FILE_DEVICE_MT_COMPOSITE: u32 = 66;
pub const FILE_DEVICE_MT_TRANSPORT: u32 = 67;
pub const FILE_DEVICE_BIOMETRIC: u32 = 68;
pub const FILE_DEVICE_PMI: u32 = 69;
pub const FILE_DEVICE_EHSTOR: u32 = 70;
pub const FILE_DEVICE_DEVAPI: u32 = 71;
pub const FILE_DEVICE_GPIO: u32 = 72;
pub const FILE_DEVICE_USBEX: u32 = 73;
pub const FILE_DEVICE_CONSOLE: u32 = 80;
pub const FILE_DEVICE_NFP: u32 = 81;
pub const FILE_DEVICE_SYSENV: u32 = 82;
pub const FILE_DEVICE_VIRTUAL_BLOCK: u32 = 83;
pub const FILE_DEVICE_POINT_OF_SERVICE: u32 = 84;
pub const FILE_DEVICE_STORAGE_REPLICATION: u32 = 85;
pub const FILE_DEVICE_TRUST_ENV: u32 = 86;
pub const FILE_DEVICE_UCM: u32 = 87;
pub const FILE_DEVICE_UCMTCPCI: u32 = 88;
pub const FILE_DEVICE_PERSISTENT_MEMORY: u32 = 89;
pub const FILE_DEVICE_NVDIMM: u32 = 90;
pub const FILE_DEVICE_HOLOGRAPHIC: u32 = 91;
pub const FILE_DEVICE_SDFXHCI: u32 = 92;
pub const FILE_DEVICE_UCMUCSI: u32 = 93;
pub const METHOD_BUFFERED: u32 = 0;
pub const METHOD_IN_DIRECT: u32 = 1;
pub const METHOD_OUT_DIRECT: u32 = 2;
pub const METHOD_NEITHER: u32 = 3;
pub const METHOD_DIRECT_TO_HARDWARE: u32 = 1;
pub const METHOD_DIRECT_FROM_HARDWARE: u32 = 2;
pub const FILE_ANY_ACCESS: u32 = 0;
pub const FILE_SPECIAL_ACCESS: u32 = 0;
pub const FILE_READ_ACCESS: u32 = 1;
pub const FILE_WRITE_ACCESS: u32 = 2;
pub const IOCTL_STORAGE_BASE: u32 = 45;
pub const STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_CONFLICT: u32 = 1;
pub const STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_NOHWID: u32 = 2;
pub const STORAGE_DEVICE_FLAGS_PAGE_83_DEVICEGUID: u32 = 4;
pub const RECOVERED_WRITES_VALID: u32 = 1;
pub const UNRECOVERED_WRITES_VALID: u32 = 2;
pub const RECOVERED_READS_VALID: u32 = 4;
pub const UNRECOVERED_READS_VALID: u32 = 8;
pub const WRITE_COMPRESSION_INFO_VALID: u32 = 16;
pub const READ_COMPRESSION_INFO_VALID: u32 = 32;
pub const TAPE_RETURN_STATISTICS: u32 = 0;
pub const TAPE_RETURN_ENV_INFO: u32 = 1;
pub const TAPE_RESET_STATISTICS: u32 = 2;
pub const MEDIA_ERASEABLE: u32 = 1;
pub const MEDIA_WRITE_ONCE: u32 = 2;
pub const MEDIA_READ_ONLY: u32 = 4;
pub const MEDIA_READ_WRITE: u32 = 8;
pub const MEDIA_WRITE_PROTECTED: u32 = 256;
pub const MEDIA_CURRENTLY_MOUNTED: u32 = 2147483648;
pub const STORAGE_FAILURE_PREDICTION_CONFIG_V1: u32 = 1;
pub const SRB_TYPE_SCSI_REQUEST_BLOCK: u32 = 0;
pub const SRB_TYPE_STORAGE_REQUEST_BLOCK: u32 = 1;
pub const STORAGE_ADDRESS_TYPE_BTL8: u32 = 0;
pub const STORAGE_RPMB_DESCRIPTOR_VERSION_1: u32 = 1;
pub const STORAGE_RPMB_MINIMUM_RELIABLE_WRITE_SIZE: u32 = 512;
pub const STORAGE_CRYPTO_CAPABILITY_VERSION_1: u32 = 1;
pub const STORAGE_CRYPTO_DESCRIPTOR_VERSION_1: u32 = 1;
pub const STORAGE_TIER_NAME_LENGTH: u32 = 256;
pub const STORAGE_TIER_DESCRIPTION_LENGTH: u32 = 512;
pub const STORAGE_TIER_FLAG_NO_SEEK_PENALTY: u32 = 131072;
pub const STORAGE_TIER_FLAG_WRITE_BACK_CACHE: u32 = 2097152;
pub const STORAGE_TIER_FLAG_READ_CACHE: u32 = 4194304;
pub const STORAGE_TIER_FLAG_PARITY: u32 = 8388608;
pub const STORAGE_TIER_FLAG_SMR: u32 = 16777216;
pub const STORAGE_TEMPERATURE_VALUE_NOT_REPORTED: u32 = 32768;
pub const STORAGE_TEMPERATURE_THRESHOLD_FLAG_ADAPTER_REQUEST: u32 = 1;
pub const STORAGE_COMPONENT_ROLE_CACHE: u32 = 1;
pub const STORAGE_COMPONENT_ROLE_TIERING: u32 = 2;
pub const STORAGE_COMPONENT_ROLE_DATA: u32 = 4;
pub const STORAGE_ATTRIBUTE_BYTE_ADDRESSABLE_IO: u32 = 1;
pub const STORAGE_ATTRIBUTE_BLOCK_IO: u32 = 2;
pub const STORAGE_ATTRIBUTE_DYNAMIC_PERSISTENCE: u32 = 4;
pub const STORAGE_ATTRIBUTE_VOLATILE: u32 = 8;
pub const STORAGE_ATTRIBUTE_ASYNC_EVENT_NOTIFICATION: u32 = 16;
pub const STORAGE_ATTRIBUTE_PERF_SIZE_INDEPENDENT: u32 = 32;
pub const STORAGE_DEVICE_MAX_OPERATIONAL_STATUS: u32 = 16;
pub const STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH: u32 = 128;
pub const STORAGE_DEVICE_NUMA_NODE_UNKNOWN: u32 = 4294967295;
pub const DeviceDsmActionFlag_NonDestructive: u32 = 2147483648;
pub const DeviceDsmAction_None: u32 = 0;
pub const DeviceDsmAction_Trim: u32 = 1;
pub const DeviceDsmAction_Notification: u32 = 2147483650;
pub const DeviceDsmAction_OffloadRead: u32 = 2147483651;
pub const DeviceDsmAction_OffloadWrite: u32 = 4;
pub const DeviceDsmAction_Allocation: u32 = 2147483653;
pub const DeviceDsmAction_Repair: u32 = 2147483654;
pub const DeviceDsmAction_Scrub: u32 = 2147483655;
pub const DeviceDsmAction_DrtQuery: u32 = 2147483656;
pub const DeviceDsmAction_DrtClear: u32 = 2147483657;
pub const DeviceDsmAction_DrtDisable: u32 = 2147483658;
pub const DeviceDsmAction_TieringQuery: u32 = 2147483659;
pub const DeviceDsmAction_Map: u32 = 2147483660;
pub const DeviceDsmAction_RegenerateParity: u32 = 2147483661;
pub const DeviceDsmAction_NvCache_Change_Priority: u32 = 2147483662;
pub const DeviceDsmAction_NvCache_Evict: u32 = 2147483663;
pub const DeviceDsmAction_TopologyIdQuery: u32 = 2147483664;
pub const DeviceDsmAction_GetPhysicalAddresses: u32 = 2147483665;
pub const DeviceDsmAction_ScopeRegen: u32 = 2147483666;
pub const DeviceDsmAction_ReportZones: u32 = 2147483667;
pub const DeviceDsmAction_OpenZone: u32 = 2147483668;
pub const DeviceDsmAction_FinishZone: u32 = 2147483669;
pub const DeviceDsmAction_CloseZone: u32 = 2147483670;
pub const DeviceDsmAction_ResetWritePointer: u32 = 23;
pub const DeviceDsmAction_GetRangeErrorInfo: u32 = 2147483672;
pub const DeviceDsmAction_WriteZeroes: u32 = 25;
pub const DeviceDsmAction_LostQuery: u32 = 2147483674;
pub const DeviceDsmAction_GetFreeSpace: u32 = 2147483675;
pub const DEVICE_DSM_FLAG_ENTIRE_DATA_SET_RANGE: u32 = 1;
pub const DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED: u32 = 2147483648;
pub const DEVICE_DSM_FLAG_TRIM_BYPASS_RZAT: u32 = 1073741824;
pub const DEVICE_DSM_NOTIFY_FLAG_BEGIN: u32 = 1;
pub const DEVICE_DSM_NOTIFY_FLAG_END: u32 = 2;
pub const STORAGE_OFFLOAD_MAX_TOKEN_LENGTH: u32 = 512;
pub const STORAGE_OFFLOAD_TOKEN_ID_LENGTH: u32 = 504;
pub const STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA: u32 = 4294901761;
pub const STORAGE_OFFLOAD_READ_RANGE_TRUNCATED: u32 = 1;
pub const STORAGE_OFFLOAD_WRITE_RANGE_TRUNCATED: u32 = 1;
pub const STORAGE_OFFLOAD_TOKEN_INVALID: u32 = 2;
pub const DEVICE_DSM_FLAG_ALLOCATION_CONSOLIDATEABLE_ONLY: u32 = 1073741824;
pub const DEVICE_DSM_PARAMETERS_V1: u32 = 1;
pub const DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1: u32 = 1;
pub const DEVICE_DSM_FLAG_REPAIR_INPUT_TOPOLOGY_ID_PRESENT: u32 = 1073741824;
pub const DEVICE_DSM_FLAG_REPAIR_OUTPUT_PARITY_EXTENT: u32 = 536870912;
pub const DEVICE_DSM_FLAG_SCRUB_SKIP_IN_SYNC: u32 = 268435456;
pub const DEVICE_DSM_FLAG_SCRUB_OUTPUT_PARITY_EXTENT: u32 = 536870912;
pub const DEVICE_DSM_FLAG_PHYSICAL_ADDRESSES_OMIT_TOTAL_RANGES: u32 = 268435456;
pub const DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1: u32 = 1;
pub const DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1: u32 = 1;
pub const DEVICE_STORAGE_NO_ERRORS: u32 = 1;
pub const DEVICE_DSM_RANGE_ERROR_OUTPUT_V1: u32 = 1;
pub const DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1: u32 = 1;
pub const IOCTL_STORAGE_BC_VERSION: u32 = 1;
pub const STORAGE_PRIORITY_HINT_SUPPORTED: u32 = 1;
pub const DEVICEDUMP_STRUCTURE_VERSION_V1: u32 = 1;
pub const DEVICEDUMP_MAX_IDSTRING: u32 = 32;
pub const MAX_FW_BUCKET_ID_LENGTH: u32 = 132;
pub const STORAGE_CRASH_TELEMETRY_REGKEY: &'static [u8; 81usize] =
    b"\\Registry\\Machine\\System\\CurrentControlSet\\Control\\CrashControl\\StorageTelemetry\0";
pub const STORAGE_DEVICE_TELEMETRY_REGKEY: &'static [u8; 76usize] =
    b"\\Registry\\Machine\\System\\CurrentControlSet\\Control\\Storage\\StorageTelemetry\0";
pub const DDUMP_FLAG_DATA_READ_FROM_DEVICE: u32 = 1;
pub const FW_ISSUEID_NO_ISSUE: u32 = 0;
pub const FW_ISSUEID_UNKNOWN: u32 = 4294967295;
pub const TC_PUBLIC_DEVICEDUMP_CONTENT_SMART: u32 = 1;
pub const TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG: u32 = 2;
pub const TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX: u32 = 16;
pub const TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH: u32 = 16;
pub const TC_PUBLIC_DATA_TYPE_ATAGP: &'static [u8; 14usize] = b"ATAGPLogPages\0";
pub const TC_PUBLIC_DATA_TYPE_ATASMART: &'static [u8; 14usize] = b"ATASMARTPages\0";
pub const CDB_SIZE: u32 = 16;
pub const TELEMETRY_COMMAND_SIZE: u32 = 16;
pub const DEVICEDUMP_CAP_PRIVATE_SECTION: u32 = 1;
pub const DEVICEDUMP_CAP_RESTRICTED_SECTION: u32 = 2;
pub const STORAGE_IDLE_POWERUP_REASON_VERSION_V1: u32 = 1;
pub const STORAGE_DEVICE_POWER_CAP_VERSION_V1: u32 = 1;
pub const STORAGE_EVENT_NOTIFICATION_VERSION_V1: u32 = 1;
pub const STORAGE_EVENT_MEDIA_STATUS: u32 = 1;
pub const STORAGE_EVENT_DEVICE_STATUS: u32 = 2;
pub const STORAGE_EVENT_DEVICE_OPERATION: u32 = 4;
pub const STORAGE_EVENT_ALL: u32 = 7;
pub const READ_COPY_NUMBER_KEY: u32 = 1380142592;
pub const STORAGE_HW_FIRMWARE_REQUEST_FLAG_CONTROLLER: u32 = 1;
pub const STORAGE_HW_FIRMWARE_REQUEST_FLAG_LAST_SEGMENT: u32 = 2;
pub const STORAGE_HW_FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT: u32 = 4;
pub const STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE: u32 = 2147483648;
pub const STORAGE_HW_FIRMWARE_INVALID_SLOT: u32 = 255;
pub const STORAGE_HW_FIRMWARE_REVISION_LENGTH: u32 = 16;
pub const STORAGE_PROTOCOL_STRUCTURE_VERSION: u32 = 1;
pub const STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST: u32 = 2147483648;
pub const STORAGE_PROTOCOL_STATUS_PENDING: u32 = 0;
pub const STORAGE_PROTOCOL_STATUS_SUCCESS: u32 = 1;
pub const STORAGE_PROTOCOL_STATUS_ERROR: u32 = 2;
pub const STORAGE_PROTOCOL_STATUS_INVALID_REQUEST: u32 = 3;
pub const STORAGE_PROTOCOL_STATUS_NO_DEVICE: u32 = 4;
pub const STORAGE_PROTOCOL_STATUS_BUSY: u32 = 5;
pub const STORAGE_PROTOCOL_STATUS_DATA_OVERRUN: u32 = 6;
pub const STORAGE_PROTOCOL_STATUS_INSUFFICIENT_RESOURCES: u32 = 7;
pub const STORAGE_PROTOCOL_STATUS_NOT_SUPPORTED: u32 = 255;
pub const STORAGE_PROTOCOL_COMMAND_LENGTH_NVME: u32 = 64;
pub const STORAGE_PROTOCOL_SPECIFIC_NVME_ADMIN_COMMAND: u32 = 1;
pub const STORAGE_PROTOCOL_SPECIFIC_NVME_NVM_COMMAND: u32 = 2;
pub const STORATTRIBUTE_NONE: u32 = 0;
pub const STORATTRIBUTE_MANAGEMENT_STATE: u32 = 1;
pub const IOCTL_SCMBUS_BASE: u32 = 89;
pub const IOCTL_SCMBUS_DEVICE_FUNCTION_BASE: u32 = 0;
pub const IOCTL_SCM_LOGICAL_DEVICE_FUNCTION_BASE: u32 = 768;
pub const IOCTL_SCM_PHYSICAL_DEVICE_FUNCTION_BASE: u32 = 1536;
pub const SCM_MAX_SYMLINK_LEN_IN_CHARS: u32 = 256;
pub const MAX_INTERFACE_CODES: u32 = 8;
pub const SCM_PD_FIRMWARE_REVISION_LENGTH_BYTES: u32 = 32;
pub const SCM_PD_PROPERTY_NAME_LENGTH_IN_CHARS: u32 = 128;
pub const SCM_PD_MAX_OPERATIONAL_STATUS: u32 = 16;
pub const SCM_PD_FIRMWARE_LAST_DOWNLOAD: u32 = 1;
pub const IOCTL_DISK_BASE: u32 = 7;
pub const PARTITION_ENTRY_UNUSED: u32 = 0;
pub const PARTITION_FAT_12: u32 = 1;
pub const PARTITION_XENIX_1: u32 = 2;
pub const PARTITION_XENIX_2: u32 = 3;
pub const PARTITION_FAT_16: u32 = 4;
pub const PARTITION_EXTENDED: u32 = 5;
pub const PARTITION_HUGE: u32 = 6;
pub const PARTITION_IFS: u32 = 7;
pub const PARTITION_OS2BOOTMGR: u32 = 10;
pub const PARTITION_FAT32: u32 = 11;
pub const PARTITION_FAT32_XINT13: u32 = 12;
pub const PARTITION_XINT13: u32 = 14;
pub const PARTITION_XINT13_EXTENDED: u32 = 15;
pub const PARTITION_MSFT_RECOVERY: u32 = 39;
pub const PARTITION_MAIN_OS: u32 = 40;
pub const PARTIITON_OS_DATA: u32 = 41;
pub const PARTITION_PRE_INSTALLED: u32 = 42;
pub const PARTITION_BSP: u32 = 43;
pub const PARTITION_DPP: u32 = 44;
pub const PARTITION_WINDOWS_SYSTEM: u32 = 45;
pub const PARTITION_PREP: u32 = 65;
pub const PARTITION_LDM: u32 = 66;
pub const PARTITION_DM: u32 = 84;
pub const PARTITION_EZDRIVE: u32 = 85;
pub const PARTITION_UNIX: u32 = 99;
pub const PARTITION_SPACES: u32 = 231;
pub const PARTITION_GPT: u32 = 238;
pub const PARTITION_SYSTEM: u32 = 239;
pub const VALID_NTFT: u32 = 192;
pub const PARTITION_NTFT: u32 = 128;
pub const GPT_ATTRIBUTE_PLATFORM_REQUIRED: u32 = 1;
pub const GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER: i64 = -9223372036854775808;
pub const GPT_BASIC_DATA_ATTRIBUTE_HIDDEN: u64 = 4611686018427387904;
pub const GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY: u64 = 2305843009213693952;
pub const GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY: u64 = 1152921504606846976;
pub const GPT_BASIC_DATA_ATTRIBUTE_OFFLINE: u64 = 576460752303423488;
pub const GPT_BASIC_DATA_ATTRIBUTE_DAX: u64 = 288230376151711744;
pub const GPT_BASIC_DATA_ATTRIBUTE_SERVICE: u64 = 144115188075855872;
pub const GPT_SPACES_ATTRIBUTE_NO_METADATA: i64 = -9223372036854775808;
pub const HIST_NO_OF_BUCKETS: u32 = 24;
pub const DISK_LOGGING_START: u32 = 0;
pub const DISK_LOGGING_STOP: u32 = 1;
pub const DISK_LOGGING_DUMP: u32 = 2;
pub const DISK_BINNING: u32 = 3;
pub const CAP_ATA_ID_CMD: u32 = 1;
pub const CAP_ATAPI_ID_CMD: u32 = 2;
pub const CAP_SMART_CMD: u32 = 4;
pub const ATAPI_ID_CMD: u32 = 161;
pub const ID_CMD: u32 = 236;
pub const SMART_CMD: u32 = 176;
pub const SMART_CYL_LOW: u32 = 79;
pub const SMART_CYL_HI: u32 = 194;
pub const SMART_NO_ERROR: u32 = 0;
pub const SMART_IDE_ERROR: u32 = 1;
pub const SMART_INVALID_FLAG: u32 = 2;
pub const SMART_INVALID_COMMAND: u32 = 3;
pub const SMART_INVALID_BUFFER: u32 = 4;
pub const SMART_INVALID_DRIVE: u32 = 5;
pub const SMART_INVALID_IOCTL: u32 = 6;
pub const SMART_ERROR_NO_MEM: u32 = 7;
pub const SMART_INVALID_REGISTER: u32 = 8;
pub const SMART_NOT_SUPPORTED: u32 = 9;
pub const SMART_NO_IDE_DEVICE: u32 = 10;
pub const SMART_OFFLINE_ROUTINE_OFFLINE: u32 = 0;
pub const SMART_SHORT_SELFTEST_OFFLINE: u32 = 1;
pub const SMART_EXTENDED_SELFTEST_OFFLINE: u32 = 2;
pub const SMART_ABORT_OFFLINE_SELFTEST: u32 = 127;
pub const SMART_SHORT_SELFTEST_CAPTIVE: u32 = 129;
pub const SMART_EXTENDED_SELFTEST_CAPTIVE: u32 = 130;
pub const READ_ATTRIBUTE_BUFFER_SIZE: u32 = 512;
pub const IDENTIFY_BUFFER_SIZE: u32 = 512;
pub const READ_THRESHOLD_BUFFER_SIZE: u32 = 512;
pub const SMART_LOG_SECTOR_SIZE: u32 = 512;
pub const READ_ATTRIBUTES: u32 = 208;
pub const READ_THRESHOLDS: u32 = 209;
pub const ENABLE_DISABLE_AUTOSAVE: u32 = 210;
pub const SAVE_ATTRIBUTE_VALUES: u32 = 211;
pub const EXECUTE_OFFLINE_DIAGS: u32 = 212;
pub const SMART_READ_LOG: u32 = 213;
pub const SMART_WRITE_LOG: u32 = 214;
pub const ENABLE_SMART: u32 = 216;
pub const DISABLE_SMART: u32 = 217;
pub const RETURN_SMART_STATUS: u32 = 218;
pub const ENABLE_DISABLE_AUTO_OFFLINE: u32 = 219;
pub const DISK_ATTRIBUTE_OFFLINE: u32 = 1;
pub const DISK_ATTRIBUTE_READ_ONLY: u32 = 2;
pub const IOCTL_CHANGER_BASE: u32 = 48;
pub const MAX_VOLUME_ID_SIZE: u32 = 36;
pub const MAX_VOLUME_TEMPLATE_SIZE: u32 = 40;
pub const VENDOR_ID_LENGTH: u32 = 8;
pub const PRODUCT_ID_LENGTH: u32 = 16;
pub const REVISION_LENGTH: u32 = 4;
pub const SERIAL_NUMBER_LENGTH: u32 = 32;
pub const CHANGER_BAR_CODE_SCANNER_INSTALLED: u32 = 1;
pub const CHANGER_INIT_ELEM_STAT_WITH_RANGE: u32 = 2;
pub const CHANGER_CLOSE_IEPORT: u32 = 4;
pub const CHANGER_OPEN_IEPORT: u32 = 8;
pub const CHANGER_STATUS_NON_VOLATILE: u32 = 16;
pub const CHANGER_EXCHANGE_MEDIA: u32 = 32;
pub const CHANGER_CLEANER_SLOT: u32 = 64;
pub const CHANGER_LOCK_UNLOCK: u32 = 128;
pub const CHANGER_CARTRIDGE_MAGAZINE: u32 = 256;
pub const CHANGER_MEDIUM_FLIP: u32 = 512;
pub const CHANGER_POSITION_TO_ELEMENT: u32 = 1024;
pub const CHANGER_REPORT_IEPORT_STATE: u32 = 2048;
pub const CHANGER_STORAGE_DRIVE: u32 = 4096;
pub const CHANGER_STORAGE_IEPORT: u32 = 8192;
pub const CHANGER_STORAGE_SLOT: u32 = 16384;
pub const CHANGER_STORAGE_TRANSPORT: u32 = 32768;
pub const CHANGER_DRIVE_CLEANING_REQUIRED: u32 = 65536;
pub const CHANGER_PREDISMOUNT_EJECT_REQUIRED: u32 = 131072;
pub const CHANGER_CLEANER_ACCESS_NOT_VALID: u32 = 262144;
pub const CHANGER_PREMOUNT_EJECT_REQUIRED: u32 = 524288;
pub const CHANGER_VOLUME_IDENTIFICATION: u32 = 1048576;
pub const CHANGER_VOLUME_SEARCH: u32 = 2097152;
pub const CHANGER_VOLUME_ASSERT: u32 = 4194304;
pub const CHANGER_VOLUME_REPLACE: u32 = 8388608;
pub const CHANGER_VOLUME_UNDEFINE: u32 = 16777216;
pub const CHANGER_SERIAL_NUMBER_VALID: u32 = 67108864;
pub const CHANGER_DEVICE_REINITIALIZE_CAPABLE: u32 = 134217728;
pub const CHANGER_KEYPAD_ENABLE_DISABLE: u32 = 268435456;
pub const CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS: u32 = 536870912;
pub const CHANGER_RESERVED_BIT: u32 = 2147483648;
pub const CHANGER_PREDISMOUNT_ALIGN_TO_SLOT: u32 = 2147483649;
pub const CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE: u32 = 2147483650;
pub const CHANGER_CLEANER_AUTODISMOUNT: u32 = 2147483652;
pub const CHANGER_TRUE_EXCHANGE_CAPABLE: u32 = 2147483656;
pub const CHANGER_SLOTS_USE_TRAYS: u32 = 2147483664;
pub const CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR: u32 = 2147483680;
pub const CHANGER_CLEANER_OPS_NOT_SUPPORTED: u32 = 2147483712;
pub const CHANGER_IEPORT_USER_CONTROL_OPEN: u32 = 2147483776;
pub const CHANGER_IEPORT_USER_CONTROL_CLOSE: u32 = 2147483904;
pub const CHANGER_MOVE_EXTENDS_IEPORT: u32 = 2147484160;
pub const CHANGER_MOVE_RETRACTS_IEPORT: u32 = 2147484672;
pub const CHANGER_TO_TRANSPORT: u32 = 1;
pub const CHANGER_TO_SLOT: u32 = 2;
pub const CHANGER_TO_IEPORT: u32 = 4;
pub const CHANGER_TO_DRIVE: u32 = 8;
pub const LOCK_UNLOCK_IEPORT: u32 = 1;
pub const LOCK_UNLOCK_DOOR: u32 = 2;
pub const LOCK_UNLOCK_KEYPAD: u32 = 4;
pub const LOCK_ELEMENT: u32 = 0;
pub const UNLOCK_ELEMENT: u32 = 1;
pub const EXTEND_IEPORT: u32 = 2;
pub const RETRACT_IEPORT: u32 = 3;
pub const ELEMENT_STATUS_FULL: u32 = 1;
pub const ELEMENT_STATUS_IMPEXP: u32 = 2;
pub const ELEMENT_STATUS_EXCEPT: u32 = 4;
pub const ELEMENT_STATUS_ACCESS: u32 = 8;
pub const ELEMENT_STATUS_EXENAB: u32 = 16;
pub const ELEMENT_STATUS_INENAB: u32 = 32;
pub const ELEMENT_STATUS_PRODUCT_DATA: u32 = 64;
pub const ELEMENT_STATUS_LUN_VALID: u32 = 4096;
pub const ELEMENT_STATUS_ID_VALID: u32 = 8192;
pub const ELEMENT_STATUS_NOT_BUS: u32 = 32768;
pub const ELEMENT_STATUS_INVERT: u32 = 4194304;
pub const ELEMENT_STATUS_SVALID: u32 = 8388608;
pub const ELEMENT_STATUS_PVOLTAG: u32 = 268435456;
pub const ELEMENT_STATUS_AVOLTAG: u32 = 536870912;
pub const ERROR_LABEL_UNREADABLE: u32 = 1;
pub const ERROR_LABEL_QUESTIONABLE: u32 = 2;
pub const ERROR_SLOT_NOT_PRESENT: u32 = 4;
pub const ERROR_DRIVE_NOT_INSTALLED: u32 = 8;
pub const ERROR_TRAY_MALFUNCTION: u32 = 16;
pub const ERROR_INIT_STATUS_NEEDED: u32 = 17;
pub const ERROR_UNHANDLED_ERROR: u32 = 4294967295;
pub const SEARCH_ALL: u32 = 0;
pub const SEARCH_PRIMARY: u32 = 1;
pub const SEARCH_ALTERNATE: u32 = 2;
pub const SEARCH_ALL_NO_SEQ: u32 = 4;
pub const SEARCH_PRI_NO_SEQ: u32 = 5;
pub const SEARCH_ALT_NO_SEQ: u32 = 6;
pub const ASSERT_PRIMARY: u32 = 8;
pub const ASSERT_ALTERNATE: u32 = 9;
pub const REPLACE_PRIMARY: u32 = 10;
pub const REPLACE_ALTERNATE: u32 = 11;
pub const UNDEFINE_PRIMARY: u32 = 12;
pub const UNDEFINE_ALTERNATE: u32 = 13;
pub const GET_VOLUME_BITMAP_FLAG_MASK_METADATA: u32 = 1;
pub const FLAG_USN_TRACK_MODIFIED_RANGES_ENABLE: u32 = 1;
pub const USN_PAGE_SIZE: u32 = 4096;
pub const USN_REASON_DATA_OVERWRITE: u32 = 1;
pub const USN_REASON_DATA_EXTEND: u32 = 2;
pub const USN_REASON_DATA_TRUNCATION: u32 = 4;
pub const USN_REASON_NAMED_DATA_OVERWRITE: u32 = 16;
pub const USN_REASON_NAMED_DATA_EXTEND: u32 = 32;
pub const USN_REASON_NAMED_DATA_TRUNCATION: u32 = 64;
pub const USN_REASON_FILE_CREATE: u32 = 256;
pub const USN_REASON_FILE_DELETE: u32 = 512;
pub const USN_REASON_EA_CHANGE: u32 = 1024;
pub const USN_REASON_SECURITY_CHANGE: u32 = 2048;
pub const USN_REASON_RENAME_OLD_NAME: u32 = 4096;
pub const USN_REASON_RENAME_NEW_NAME: u32 = 8192;
pub const USN_REASON_INDEXABLE_CHANGE: u32 = 16384;
pub const USN_REASON_BASIC_INFO_CHANGE: u32 = 32768;
pub const USN_REASON_HARD_LINK_CHANGE: u32 = 65536;
pub const USN_REASON_COMPRESSION_CHANGE: u32 = 131072;
pub const USN_REASON_ENCRYPTION_CHANGE: u32 = 262144;
pub const USN_REASON_OBJECT_ID_CHANGE: u32 = 524288;
pub const USN_REASON_REPARSE_POINT_CHANGE: u32 = 1048576;
pub const USN_REASON_STREAM_CHANGE: u32 = 2097152;
pub const USN_REASON_TRANSACTED_CHANGE: u32 = 4194304;
pub const USN_REASON_INTEGRITY_CHANGE: u32 = 8388608;
pub const USN_REASON_DESIRED_STORAGE_CLASS_CHANGE: u32 = 16777216;
pub const USN_REASON_CLOSE: u32 = 2147483648;
pub const USN_DELETE_FLAG_DELETE: u32 = 1;
pub const USN_DELETE_FLAG_NOTIFY: u32 = 2;
pub const USN_DELETE_VALID_FLAGS: u32 = 3;
pub const USN_SOURCE_DATA_MANAGEMENT: u32 = 1;
pub const USN_SOURCE_AUXILIARY_DATA: u32 = 2;
pub const USN_SOURCE_REPLICATION_MANAGEMENT: u32 = 4;
pub const USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT: u32 = 8;
pub const USN_SOURCE_VALID_FLAGS: u32 = 15;
pub const MARK_HANDLE_PROTECT_CLUSTERS: u32 = 1;
pub const MARK_HANDLE_TXF_SYSTEM_LOG: u32 = 4;
pub const MARK_HANDLE_NOT_TXF_SYSTEM_LOG: u32 = 8;
pub const MARK_HANDLE_REALTIME: u32 = 32;
pub const MARK_HANDLE_NOT_REALTIME: u32 = 64;
pub const MARK_HANDLE_FILTER_METADATA: u32 = 512;
pub const MARK_HANDLE_READ_COPY: u32 = 128;
pub const MARK_HANDLE_NOT_READ_COPY: u32 = 256;
pub const MARK_HANDLE_RETURN_PURGE_FAILURE: u32 = 1024;
pub const MARK_HANDLE_CLOUD_SYNC: u32 = 2048;
pub const MARK_HANDLE_DISABLE_FILE_METADATA_OPTIMIZATION: u32 = 4096;
pub const MARK_HANDLE_ENABLE_USN_SOURCE_ON_PAGING_IO: u32 = 8192;
pub const MARK_HANDLE_SKIP_COHERENCY_SYNC_DISALLOW_WRITES: u32 = 16384;
pub const MARK_HANDLE_ENABLE_CPU_CACHE: u32 = 268435456;
pub const NO_8DOT3_NAME_PRESENT: u32 = 1;
pub const REMOVED_8DOT3_NAME: u32 = 2;
pub const VOLUME_IS_DIRTY: u32 = 1;
pub const VOLUME_UPGRADE_SCHEDULED: u32 = 2;
pub const VOLUME_SESSION_OPEN: u32 = 4;
pub const FILE_PREFETCH_TYPE_FOR_CREATE: u32 = 1;
pub const FILE_PREFETCH_TYPE_FOR_DIRENUM: u32 = 2;
pub const FILE_PREFETCH_TYPE_FOR_CREATE_EX: u32 = 3;
pub const FILE_PREFETCH_TYPE_FOR_DIRENUM_EX: u32 = 4;
pub const FILE_PREFETCH_TYPE_MAX: u32 = 4;
pub const FILESYSTEM_STATISTICS_TYPE_NTFS: u32 = 1;
pub const FILESYSTEM_STATISTICS_TYPE_FAT: u32 = 2;
pub const FILESYSTEM_STATISTICS_TYPE_EXFAT: u32 = 3;
pub const FILESYSTEM_STATISTICS_TYPE_REFS: u32 = 4;
pub const FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA: u32 = 1;
pub const FILE_SET_ENCRYPTION: u32 = 1;
pub const FILE_CLEAR_ENCRYPTION: u32 = 2;
pub const STREAM_SET_ENCRYPTION: u32 = 3;
pub const STREAM_CLEAR_ENCRYPTION: u32 = 4;
pub const MAXIMUM_ENCRYPTION_VALUE: u32 = 4;
pub const ENCRYPTION_FORMAT_DEFAULT: u32 = 1;
pub const ENCRYPTED_DATA_INFO_SPARSE_FILE: u32 = 1;
pub const COPYFILE_SIS_LINK: u32 = 1;
pub const COPYFILE_SIS_REPLACE: u32 = 2;
pub const COPYFILE_SIS_FLAGS: u32 = 3;
pub const SET_REPAIR_ENABLED: u32 = 1;
pub const SET_REPAIR_WARN_ABOUT_DATA_LOSS: u32 = 8;
pub const SET_REPAIR_DISABLED_AND_BUGCHECK_ON_CORRUPT: u32 = 16;
pub const SET_REPAIR_VALID_MASK: u32 = 25;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE: u32 = 1;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED: u32 = 2;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST: u32 = 4;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD: u32 = 8;
pub const FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE: u32 = 16;
pub const FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED: u32 = 32;
pub const FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR: u32 = 64;
pub const FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED: u32 = 128;
pub const FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED: u32 = 256;
pub const FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED: u32 = 512;
pub const FILE_INITIATE_REPAIR_HINT1_REPAIRED: u32 = 1024;
pub const FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG: u32 = 2048;
pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND: u32 = 4096;
pub const FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK: u32 = 8192;
pub const FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION: u32 = 16384;
pub const FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE: u32 = 32768;
pub const FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST: u32 = 65536;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH: u32 = 131072;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN: u32 = 262144;
pub const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD: u32 = 524288;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT: u32 = 1048576;
pub const FILE_INITIATE_REPAIR_HINT1_SID_VALID: u32 = 2097152;
pub const FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH: u32 = 4194304;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT: u32 = 8388608;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE: u32 = 16777216;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED: u32 = 33554432;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST: u32 = 67108864;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD: u32 = 134217728;
pub const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX: u32 = 268435456;
pub const FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY: u32 = 536870912;
pub const FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES: u32 = 1073741824;
pub const FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE: u32 = 2147483648;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_LCN: u64 = 4294967296;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_VCN: u64 = 8589934592;
pub const FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT: u64 = 17179869184;
pub const FILE_INITIATE_REPAIR_HINT1_ORPHAN: u64 = 34359738368;
pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL: u64 = 68719476736;
pub const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT: u64 = 137438953472;
pub const FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG: u64 = 274877906944;
pub const FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID: u64 = 549755813888;
pub const FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH: u64 = 1099511627776;
pub const FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME: u64 = 2199023255552;
pub const FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES: u64 = 4398046511104;
pub const TXFS_RM_FLAG_LOGGING_MODE: u32 = 1;
pub const TXFS_RM_FLAG_RENAME_RM: u32 = 2;
pub const TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX: u32 = 4;
pub const TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN: u32 = 8;
pub const TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS: u32 = 16;
pub const TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT: u32 = 32;
pub const TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE: u32 = 64;
pub const TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX: u32 = 128;
pub const TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN: u32 = 256;
pub const TXFS_RM_FLAG_GROW_LOG: u32 = 1024;
pub const TXFS_RM_FLAG_SHRINK_LOG: u32 = 2048;
pub const TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE: u32 = 4096;
pub const TXFS_RM_FLAG_PRESERVE_CHANGES: u32 = 8192;
pub const TXFS_RM_FLAG_RESET_RM_AT_NEXT_START: u32 = 16384;
pub const TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START: u32 = 32768;
pub const TXFS_RM_FLAG_PREFER_CONSISTENCY: u32 = 65536;
pub const TXFS_RM_FLAG_PREFER_AVAILABILITY: u32 = 131072;
pub const TXFS_LOGGING_MODE_SIMPLE: u32 = 1;
pub const TXFS_LOGGING_MODE_FULL: u32 = 2;
pub const TXFS_TRANSACTION_STATE_NONE: u32 = 0;
pub const TXFS_TRANSACTION_STATE_ACTIVE: u32 = 1;
pub const TXFS_TRANSACTION_STATE_PREPARED: u32 = 2;
pub const TXFS_TRANSACTION_STATE_NOTACTIVE: u32 = 3;
pub const TXFS_MODIFY_RM_VALID_FLAGS: u32 = 261631;
pub const TXFS_RM_STATE_NOT_STARTED: u32 = 0;
pub const TXFS_RM_STATE_STARTING: u32 = 1;
pub const TXFS_RM_STATE_ACTIVE: u32 = 2;
pub const TXFS_RM_STATE_SHUTTING_DOWN: u32 = 3;
pub const TXFS_QUERY_RM_INFORMATION_VALID_FLAGS: u32 = 246192;
pub const TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN: u32 = 1;
pub const TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK: u32 = 2;
pub const TXFS_ROLLFORWARD_REDO_VALID_FLAGS: u32 = 3;
pub const TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX: u32 = 1;
pub const TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN: u32 = 2;
pub const TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE: u32 = 4;
pub const TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS: u32 = 8;
pub const TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT: u32 = 16;
pub const TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE: u32 = 32;
pub const TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX: u32 = 64;
pub const TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN: u32 = 128;
pub const TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT: u32 = 512;
pub const TXFS_START_RM_FLAG_LOGGING_MODE: u32 = 1024;
pub const TXFS_START_RM_FLAG_PRESERVE_CHANGES: u32 = 2048;
pub const TXFS_START_RM_FLAG_PREFER_CONSISTENCY: u32 = 4096;
pub const TXFS_START_RM_FLAG_PREFER_AVAILABILITY: u32 = 8192;
pub const TXFS_START_RM_VALID_FLAGS: u32 = 15999;
pub const TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_CREATED: u32 = 1;
pub const TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_DELETED: u32 = 2;
pub const TXFS_TRANSACTED_VERSION_NONTRANSACTED: u32 = 4294967294;
pub const TXFS_TRANSACTED_VERSION_UNCOMMITTED: u32 = 4294967295;
pub const TXFS_SAVEPOINT_SET: u32 = 1;
pub const TXFS_SAVEPOINT_ROLLBACK: u32 = 2;
pub const TXFS_SAVEPOINT_CLEAR: u32 = 4;
pub const TXFS_SAVEPOINT_CLEAR_ALL: u32 = 16;
pub const PERSISTENT_VOLUME_STATE_SHORT_NAME_CREATION_DISABLED: u32 = 1;
pub const PERSISTENT_VOLUME_STATE_VOLUME_SCRUB_DISABLED: u32 = 2;
pub const PERSISTENT_VOLUME_STATE_GLOBAL_METADATA_NO_SEEK_PENALTY: u32 = 4;
pub const PERSISTENT_VOLUME_STATE_LOCAL_METADATA_NO_SEEK_PENALTY: u32 = 8;
pub const PERSISTENT_VOLUME_STATE_NO_HEAT_GATHERING: u32 = 16;
pub const PERSISTENT_VOLUME_STATE_CONTAINS_BACKING_WIM: u32 = 32;
pub const PERSISTENT_VOLUME_STATE_BACKED_BY_WIM: u32 = 64;
pub const PERSISTENT_VOLUME_STATE_NO_WRITE_AUTO_TIERING: u32 = 128;
pub const PERSISTENT_VOLUME_STATE_TXF_DISABLED: u32 = 256;
pub const OPLOCK_LEVEL_CACHE_READ: u32 = 1;
pub const OPLOCK_LEVEL_CACHE_HANDLE: u32 = 2;
pub const OPLOCK_LEVEL_CACHE_WRITE: u32 = 4;
pub const REQUEST_OPLOCK_INPUT_FLAG_REQUEST: u32 = 1;
pub const REQUEST_OPLOCK_INPUT_FLAG_ACK: u32 = 2;
pub const REQUEST_OPLOCK_INPUT_FLAG_COMPLETE_ACK_ON_CLOSE: u32 = 4;
pub const REQUEST_OPLOCK_CURRENT_VERSION: u32 = 1;
pub const REQUEST_OPLOCK_OUTPUT_FLAG_ACK_REQUIRED: u32 = 1;
pub const REQUEST_OPLOCK_OUTPUT_FLAG_MODES_PROVIDED: u32 = 2;
pub const QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_HOST_VOLUMES: u32 = 1;
pub const QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_GUEST_VOLUMES: u32 = 2;
pub const SD_GLOBAL_CHANGE_TYPE_MACHINE_SID: u32 = 1;
pub const SD_GLOBAL_CHANGE_TYPE_QUERY_STATS: u32 = 65536;
pub const SD_GLOBAL_CHANGE_TYPE_ENUM_SDS: u32 = 131072;
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_PAGE_FILE: u32 = 1;
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_DENY_DEFRAG_SET: u32 = 2;
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_FS_SYSTEM_FILE: u32 = 4;
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_TXF_SYSTEM_FILE: u32 = 8;
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_MASK: u32 = 4278190080;
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_DATA: u32 = 16777216;
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_INDEX: u32 = 33554432;
pub const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_SYSTEM: u32 = 50331648;
pub const FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN: u32 = 1;
pub const FILE_TYPE_NOTIFICATION_FLAG_USAGE_END: u32 = 2;
pub const CSV_MGMTLOCK_CHECK_VOLUME_REDIRECTED: u32 = 1;
pub const CSV_INVALID_DEVICE_NUMBER: u32 = 4294967295;
pub const CSV_QUERY_MDS_PATH_V2_VERSION_1: u32 = 1;
pub const CSV_QUERY_MDS_PATH_FLAG_STORAGE_ON_THIS_NODE_IS_CONNECTED: u32 = 1;
pub const CSV_QUERY_MDS_PATH_FLAG_CSV_DIRECT_IO_ENABLED: u32 = 2;
pub const CSV_QUERY_MDS_PATH_FLAG_SMB_BYPASS_CSV_ENABLED: u32 = 4;
pub const QUERY_FILE_LAYOUT_RESTART: u32 = 1;
pub const QUERY_FILE_LAYOUT_INCLUDE_NAMES: u32 = 2;
pub const QUERY_FILE_LAYOUT_INCLUDE_STREAMS: u32 = 4;
pub const QUERY_FILE_LAYOUT_INCLUDE_EXTENTS: u32 = 8;
pub const QUERY_FILE_LAYOUT_INCLUDE_EXTRA_INFO: u32 = 16;
pub const QUERY_FILE_LAYOUT_INCLUDE_STREAMS_WITH_NO_CLUSTERS_ALLOCATED: u32 = 32;
pub const QUERY_FILE_LAYOUT_INCLUDE_FULL_PATH_IN_NAMES: u32 = 64;
pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION: u32 = 128;
pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DSC_ATTRIBUTE: u32 = 256;
pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_TXF_ATTRIBUTE: u32 = 512;
pub const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EFS_ATTRIBUTE: u32 = 1024;
pub const QUERY_FILE_LAYOUT_INCLUDE_ONLY_FILES_WITH_SPECIFIC_ATTRIBUTES: u32 = 2048;
pub const QUERY_FILE_LAYOUT_INCLUDE_FILES_WITH_DSC_ATTRIBUTE: u32 = 4096;
pub const QUERY_FILE_LAYOUT_SINGLE_INSTANCED: u32 = 1;
pub const FILE_LAYOUT_NAME_ENTRY_PRIMARY: u32 = 1;
pub const FILE_LAYOUT_NAME_ENTRY_DOS: u32 = 2;
pub const STREAM_LAYOUT_ENTRY_IMMOVABLE: u32 = 1;
pub const STREAM_LAYOUT_ENTRY_PINNED: u32 = 2;
pub const STREAM_LAYOUT_ENTRY_RESIDENT: u32 = 4;
pub const STREAM_LAYOUT_ENTRY_NO_CLUSTERS_ALLOCATED: u32 = 8;
pub const STREAM_LAYOUT_ENTRY_HAS_INFORMATION: u32 = 16;
pub const STREAM_EXTENT_ENTRY_AS_RETRIEVAL_POINTERS: u32 = 1;
pub const STREAM_EXTENT_ENTRY_ALL_EXTENTS: u32 = 2;
pub const CHECKSUM_TYPE_UNCHANGED: i32 = -1;
pub const CHECKSUM_TYPE_NONE: u32 = 0;
pub const CHECKSUM_TYPE_CRC32: u32 = 1;
pub const CHECKSUM_TYPE_CRC64: u32 = 2;
pub const CHECKSUM_TYPE_ECC: u32 = 3;
pub const CHECKSUM_TYPE_FIRST_UNUSED_TYPE: u32 = 4;
pub const FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF: u32 = 1;
pub const OFFLOAD_READ_FLAG_ALL_ZERO_BEYOND_CURRENT_RANGE: u32 = 1;
pub const SET_PURGE_FAILURE_MODE_ENABLED: u32 = 1;
pub const SET_PURGE_FAILURE_MODE_DISABLED: u32 = 2;
pub const FILE_REGION_USAGE_VALID_CACHED_DATA: u32 = 1;
pub const FILE_REGION_USAGE_VALID_NONCACHED_DATA: u32 = 2;
pub const FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT: u32 = 4;
pub const FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT: u32 = 8;
pub const FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT: u32 = 16;
pub const FILE_REGION_USAGE_QUERY_ALIGNMENT: u32 = 24;
pub const VALID_WRITE_USN_REASON_MASK: u32 = 2147483649;
pub const FILE_STORAGE_TIER_NAME_LENGTH: u32 = 256;
pub const FILE_STORAGE_TIER_DESCRIPTION_LENGTH: u32 = 512;
pub const FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY: u32 = 131072;
pub const FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE: u32 = 2097152;
pub const FILE_STORAGE_TIER_FLAG_READ_CACHE: u32 = 4194304;
pub const FILE_STORAGE_TIER_FLAG_PARITY: u32 = 8388608;
pub const FILE_STORAGE_TIER_FLAG_SMR: u32 = 16777216;
pub const QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE: u32 = 2147483648;
pub const QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ: u32 = 1073741824;
pub const QUERY_STORAGE_CLASSES_FLAGS_NO_DEFRAG_VOLUME: u32 = 536870912;
pub const DUPLICATE_EXTENTS_DATA_EX_SOURCE_ATOMIC: u32 = 1;
pub const REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1: u32 = 1;
pub const REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1: u32 = 1;
pub const STREAMS_INVALID_ID: u32 = 0;
pub const STREAMS_MAX_ID: u32 = 65535;
pub const STREAMS_ASSOCIATE_ID_CLEAR: u32 = 1;
pub const STREAMS_ASSOCIATE_ID_SET: u32 = 2;
pub const DAX_ALLOC_ALIGNMENT_FLAG_MANDATORY: u32 = 1;
pub const DAX_ALLOC_ALIGNMENT_FLAG_FALLBACK_SPECIFIED: u32 = 2;
pub const WOF_CURRENT_VERSION: u32 = 1;
pub const WOF_PROVIDER_WIM: u32 = 1;
pub const WOF_PROVIDER_FILE: u32 = 2;
pub const WOF_PROVIDER_CLOUD: u32 = 3;
pub const WIM_PROVIDER_HASH_SIZE: u32 = 20;
pub const WIM_PROVIDER_CURRENT_VERSION: u32 = 1;
pub const WIM_PROVIDER_EXTERNAL_FLAG_NOT_ACTIVE: u32 = 1;
pub const WIM_PROVIDER_EXTERNAL_FLAG_SUSPENDED: u32 = 2;
pub const WIM_BOOT_OS_WIM: u32 = 1;
pub const WIM_BOOT_NOT_OS_WIM: u32 = 0;
pub const FILE_PROVIDER_CURRENT_VERSION: u32 = 1;
pub const FILE_PROVIDER_SINGLE_FILE: u32 = 1;
pub const FILE_PROVIDER_COMPRESSION_XPRESS4K: u32 = 0;
pub const FILE_PROVIDER_COMPRESSION_LZX: u32 = 1;
pub const FILE_PROVIDER_COMPRESSION_XPRESS8K: u32 = 2;
pub const FILE_PROVIDER_COMPRESSION_XPRESS16K: u32 = 3;
pub const FILE_PROVIDER_COMPRESSION_MAXIMUM: u32 = 4;
pub const FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE: u32 = 1;
pub const CONTAINER_VOLUME_STATE_HOSTING_CONTAINER: u32 = 1;
pub const CONTAINER_ROOT_INFO_FLAG_SCRATCH_ROOT: u32 = 1;
pub const CONTAINER_ROOT_INFO_FLAG_LAYER_ROOT: u32 = 2;
pub const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_ROOT: u32 = 4;
pub const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_TARGET_ROOT: u32 = 8;
pub const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_EXCEPTION_ROOT: u32 = 16;
pub const CONTAINER_ROOT_INFO_FLAG_BIND_ROOT: u32 = 32;
pub const CONTAINER_ROOT_INFO_FLAG_BIND_TARGET_ROOT: u32 = 64;
pub const CONTAINER_ROOT_INFO_FLAG_BIND_EXCEPTION_ROOT: u32 = 128;
pub const CONTAINER_ROOT_INFO_FLAG_BIND_DO_NOT_MAP_NAME: u32 = 256;
pub const CONTAINER_ROOT_INFO_VALID_FLAGS: u32 = 511;
pub const PROJFS_PROTOCOL_VERSION: u32 = 3;
pub const IOCTL_VOLUME_BASE: u32 = 86;
pub const EFS_TRACKED_OFFSET_HEADER_FLAG: u32 = 1;
pub const SPACES_TRACKED_OFFSET_HEADER_FLAG: u32 = 2;
pub const SCARD_ATR_LENGTH: u32 = 33;
pub const SCARD_PROTOCOL_UNDEFINED: u32 = 0;
pub const SCARD_PROTOCOL_T0: u32 = 1;
pub const SCARD_PROTOCOL_T1: u32 = 2;
pub const SCARD_PROTOCOL_RAW: u32 = 65536;
pub const SCARD_PROTOCOL_Tx: u32 = 3;
pub const SCARD_PROTOCOL_DEFAULT: u32 = 2147483648;
pub const SCARD_PROTOCOL_OPTIMAL: u32 = 0;
pub const SCARD_POWER_DOWN: u32 = 0;
pub const SCARD_COLD_RESET: u32 = 1;
pub const SCARD_WARM_RESET: u32 = 2;
pub const MAXIMUM_ATTR_STRING_LENGTH: u32 = 32;
pub const MAXIMUM_SMARTCARD_READERS: u32 = 10;
pub const SCARD_CLASS_VENDOR_INFO: u32 = 1;
pub const SCARD_CLASS_COMMUNICATIONS: u32 = 2;
pub const SCARD_CLASS_PROTOCOL: u32 = 3;
pub const SCARD_CLASS_POWER_MGMT: u32 = 4;
pub const SCARD_CLASS_SECURITY: u32 = 5;
pub const SCARD_CLASS_MECHANICAL: u32 = 6;
pub const SCARD_CLASS_VENDOR_DEFINED: u32 = 7;
pub const SCARD_CLASS_IFD_PROTOCOL: u32 = 8;
pub const SCARD_CLASS_ICC_STATE: u32 = 9;
pub const SCARD_CLASS_PERF: u32 = 32766;
pub const SCARD_CLASS_SYSTEM: u32 = 32767;
pub const SCARD_T0_HEADER_LENGTH: u32 = 7;
pub const SCARD_T0_CMD_LENGTH: u32 = 5;
pub const SCARD_T1_PROLOGUE_LENGTH: u32 = 3;
pub const SCARD_T1_EPILOGUE_LENGTH: u32 = 2;
pub const SCARD_T1_EPILOGUE_LENGTH_LRC: u32 = 1;
pub const SCARD_T1_MAX_IFS: u32 = 254;
pub const SCARD_UNKNOWN: u32 = 0;
pub const SCARD_ABSENT: u32 = 1;
pub const SCARD_PRESENT: u32 = 2;
pub const SCARD_SWALLOWED: u32 = 3;
pub const SCARD_POWERED: u32 = 4;
pub const SCARD_NEGOTIABLE: u32 = 5;
pub const SCARD_SPECIFIC: u32 = 6;
pub const SCARD_READER_SWALLOWS: u32 = 1;
pub const SCARD_READER_EJECTS: u32 = 2;
pub const SCARD_READER_CONFISCATES: u32 = 4;
pub const SCARD_READER_CONTACTLESS: u32 = 8;
pub const SCARD_READER_TYPE_SERIAL: u32 = 1;
pub const SCARD_READER_TYPE_PARALELL: u32 = 2;
pub const SCARD_READER_TYPE_KEYBOARD: u32 = 4;
pub const SCARD_READER_TYPE_SCSI: u32 = 8;
pub const SCARD_READER_TYPE_IDE: u32 = 16;
pub const SCARD_READER_TYPE_USB: u32 = 32;
pub const SCARD_READER_TYPE_PCMCIA: u32 = 64;
pub const SCARD_READER_TYPE_TPM: u32 = 128;
pub const SCARD_READER_TYPE_NFC: u32 = 256;
pub const SCARD_READER_TYPE_UICC: u32 = 512;
pub const SCARD_READER_TYPE_NGC: u32 = 1024;
pub const SCARD_READER_TYPE_EMBEDDEDSE: u32 = 2048;
pub const SCARD_READER_TYPE_VENDOR: u32 = 240;
pub const SCARD_SCOPE_USER: u32 = 0;
pub const SCARD_SCOPE_TERMINAL: u32 = 1;
pub const SCARD_SCOPE_SYSTEM: u32 = 2;
pub const SCARD_PROVIDER_PRIMARY: u32 = 1;
pub const SCARD_PROVIDER_CSP: u32 = 2;
pub const SCARD_PROVIDER_KSP: u32 = 3;
pub const SCARD_STATE_UNAWARE: u32 = 0;
pub const SCARD_STATE_IGNORE: u32 = 1;
pub const SCARD_STATE_CHANGED: u32 = 2;
pub const SCARD_STATE_UNKNOWN: u32 = 4;
pub const SCARD_STATE_UNAVAILABLE: u32 = 8;
pub const SCARD_STATE_EMPTY: u32 = 16;
pub const SCARD_STATE_PRESENT: u32 = 32;
pub const SCARD_STATE_ATRMATCH: u32 = 64;
pub const SCARD_STATE_EXCLUSIVE: u32 = 128;
pub const SCARD_STATE_INUSE: u32 = 256;
pub const SCARD_STATE_MUTE: u32 = 512;
pub const SCARD_STATE_UNPOWERED: u32 = 1024;
pub const SCARD_SHARE_EXCLUSIVE: u32 = 1;
pub const SCARD_SHARE_SHARED: u32 = 2;
pub const SCARD_SHARE_DIRECT: u32 = 3;
pub const SCARD_LEAVE_CARD: u32 = 0;
pub const SCARD_RESET_CARD: u32 = 1;
pub const SCARD_UNPOWER_CARD: u32 = 2;
pub const SCARD_EJECT_CARD: u32 = 3;
pub const SC_DLG_MINIMAL_UI: u32 = 1;
pub const SC_DLG_NO_UI: u32 = 2;
pub const SC_DLG_FORCE_UI: u32 = 4;
pub const SCERR_NOCARDNAME: u32 = 16384;
pub const SCERR_NOGUIDS: u32 = 32768;
pub const SCARD_AUDIT_CHV_FAILURE: u32 = 0;
pub const SCARD_AUDIT_CHV_SUCCESS: u32 = 1;
pub const MAXPROPPAGES: u32 = 100;
pub const PSP_DEFAULT: u32 = 0;
pub const PSP_DLGINDIRECT: u32 = 1;
pub const PSP_USEHICON: u32 = 2;
pub const PSP_USEICONID: u32 = 4;
pub const PSP_USETITLE: u32 = 8;
pub const PSP_RTLREADING: u32 = 16;
pub const PSP_HASHELP: u32 = 32;
pub const PSP_USEREFPARENT: u32 = 64;
pub const PSP_USECALLBACK: u32 = 128;
pub const PSP_PREMATURE: u32 = 1024;
pub const PSP_HIDEHEADER: u32 = 2048;
pub const PSP_USEHEADERTITLE: u32 = 4096;
pub const PSP_USEHEADERSUBTITLE: u32 = 8192;
pub const PSP_USEFUSIONCONTEXT: u32 = 16384;
pub const PSPCB_ADDREF: u32 = 0;
pub const PSPCB_RELEASE: u32 = 1;
pub const PSPCB_CREATE: u32 = 2;
pub const PSH_DEFAULT: u32 = 0;
pub const PSH_PROPTITLE: u32 = 1;
pub const PSH_USEHICON: u32 = 2;
pub const PSH_USEICONID: u32 = 4;
pub const PSH_PROPSHEETPAGE: u32 = 8;
pub const PSH_WIZARDHASFINISH: u32 = 16;
pub const PSH_WIZARD: u32 = 32;
pub const PSH_USEPSTARTPAGE: u32 = 64;
pub const PSH_NOAPPLYNOW: u32 = 128;
pub const PSH_USECALLBACK: u32 = 256;
pub const PSH_HASHELP: u32 = 512;
pub const PSH_MODELESS: u32 = 1024;
pub const PSH_RTLREADING: u32 = 2048;
pub const PSH_WIZARDCONTEXTHELP: u32 = 4096;
pub const PSH_WIZARD97: u32 = 16777216;
pub const PSH_WATERMARK: u32 = 32768;
pub const PSH_USEHBMWATERMARK: u32 = 65536;
pub const PSH_USEHPLWATERMARK: u32 = 131072;
pub const PSH_STRETCHWATERMARK: u32 = 262144;
pub const PSH_HEADER: u32 = 524288;
pub const PSH_USEHBMHEADER: u32 = 1048576;
pub const PSH_USEPAGELANG: u32 = 2097152;
pub const PSH_WIZARD_LITE: u32 = 4194304;
pub const PSH_NOCONTEXTHELP: u32 = 33554432;
pub const PSH_AEROWIZARD: u32 = 16384;
pub const PSH_RESIZABLE: u32 = 67108864;
pub const PSH_HEADERBITMAP: u32 = 134217728;
pub const PSH_NOMARGIN: u32 = 268435456;
pub const PSCB_INITIALIZED: u32 = 1;
pub const PSCB_PRECREATE: u32 = 2;
pub const PSCB_BUTTONPRESSED: u32 = 3;
pub const PSN_FIRST: i32 = -200;
pub const PSN_LAST: i32 = -299;
pub const PSN_SETACTIVE: i32 = -200;
pub const PSN_KILLACTIVE: i32 = -201;
pub const PSN_APPLY: i32 = -202;
pub const PSN_RESET: i32 = -203;
pub const PSN_HELP: i32 = -205;
pub const PSN_WIZBACK: i32 = -206;
pub const PSN_WIZNEXT: i32 = -207;
pub const PSN_WIZFINISH: i32 = -208;
pub const PSN_QUERYCANCEL: i32 = -209;
pub const PSN_GETOBJECT: i32 = -210;
pub const PSN_TRANSLATEACCELERATOR: i32 = -212;
pub const PSN_QUERYINITIALFOCUS: i32 = -213;
pub const PSNRET_NOERROR: u32 = 0;
pub const PSNRET_INVALID: u32 = 1;
pub const PSNRET_INVALID_NOCHANGEPAGE: u32 = 2;
pub const PSNRET_MESSAGEHANDLED: u32 = 3;
pub const PSM_SETCURSEL: u32 = 1125;
pub const PSM_REMOVEPAGE: u32 = 1126;
pub const PSM_ADDPAGE: u32 = 1127;
pub const PSM_CHANGED: u32 = 1128;
pub const PSM_RESTARTWINDOWS: u32 = 1129;
pub const PSM_REBOOTSYSTEM: u32 = 1130;
pub const PSM_CANCELTOCLOSE: u32 = 1131;
pub const PSM_QUERYSIBLINGS: u32 = 1132;
pub const PSM_UNCHANGED: u32 = 1133;
pub const PSM_APPLY: u32 = 1134;
pub const PSM_SETTITLEA: u32 = 1135;
pub const PSM_SETTITLEW: u32 = 1144;
pub const PSM_SETTITLE: u32 = 1135;
pub const PSM_SETWIZBUTTONS: u32 = 1136;
pub const PSWIZB_BACK: u32 = 1;
pub const PSWIZB_NEXT: u32 = 2;
pub const PSWIZB_FINISH: u32 = 4;
pub const PSWIZB_DISABLEDFINISH: u32 = 8;
pub const PSWIZBF_ELEVATIONREQUIRED: u32 = 1;
pub const PSWIZB_CANCEL: u32 = 16;
pub const PSM_PRESSBUTTON: u32 = 1137;
pub const PSBTN_BACK: u32 = 0;
pub const PSBTN_NEXT: u32 = 1;
pub const PSBTN_FINISH: u32 = 2;
pub const PSBTN_OK: u32 = 3;
pub const PSBTN_APPLYNOW: u32 = 4;
pub const PSBTN_CANCEL: u32 = 5;
pub const PSBTN_HELP: u32 = 6;
pub const PSBTN_MAX: u32 = 6;
pub const PSM_SETCURSELID: u32 = 1138;
pub const PSM_SETFINISHTEXTA: u32 = 1139;
pub const PSM_SETFINISHTEXTW: u32 = 1145;
pub const PSM_SETFINISHTEXT: u32 = 1139;
pub const PSM_GETTABCONTROL: u32 = 1140;
pub const PSM_ISDIALOGMESSAGE: u32 = 1141;
pub const PSM_GETCURRENTPAGEHWND: u32 = 1142;
pub const PSM_INSERTPAGE: u32 = 1143;
pub const PSM_SETHEADERTITLEA: u32 = 1149;
pub const PSM_SETHEADERTITLEW: u32 = 1150;
pub const PSM_SETHEADERTITLE: u32 = 1149;
pub const PSM_SETHEADERSUBTITLEA: u32 = 1151;
pub const PSM_SETHEADERSUBTITLEW: u32 = 1152;
pub const PSM_SETHEADERSUBTITLE: u32 = 1151;
pub const PSM_HWNDTOINDEX: u32 = 1153;
pub const PSM_INDEXTOHWND: u32 = 1154;
pub const PSM_PAGETOINDEX: u32 = 1155;
pub const PSM_INDEXTOPAGE: u32 = 1156;
pub const PSM_IDTOINDEX: u32 = 1157;
pub const PSM_INDEXTOID: u32 = 1158;
pub const PSM_GETRESULT: u32 = 1159;
pub const PSM_RECALCPAGESIZES: u32 = 1160;
pub const PSM_SETNEXTTEXTW: u32 = 1161;
pub const PSM_SETNEXTTEXT: u32 = 1161;
pub const PSWIZB_SHOW: u32 = 0;
pub const PSWIZB_RESTORE: u32 = 1;
pub const PSM_SHOWWIZBUTTONS: u32 = 1162;
pub const PSM_ENABLEWIZBUTTONS: u32 = 1163;
pub const PSM_SETBUTTONTEXTW: u32 = 1164;
pub const PSM_SETBUTTONTEXT: u32 = 1164;
pub const ID_PSRESTARTWINDOWS: u32 = 2;
pub const ID_PSREBOOTSYSTEM: u32 = 3;
pub const WIZ_CXDLG: u32 = 276;
pub const WIZ_CYDLG: u32 = 140;
pub const WIZ_CXBMP: u32 = 80;
pub const WIZ_BODYX: u32 = 92;
pub const WIZ_BODYCX: u32 = 184;
pub const PROP_SM_CXDLG: u32 = 212;
pub const PROP_SM_CYDLG: u32 = 188;
pub const PROP_MED_CXDLG: u32 = 227;
pub const PROP_MED_CYDLG: u32 = 215;
pub const PROP_LG_CXDLG: u32 = 252;
pub const PROP_LG_CYDLG: u32 = 218;
pub const DSPRINT_PUBLISH: u32 = 1;
pub const DSPRINT_UPDATE: u32 = 2;
pub const DSPRINT_UNPUBLISH: u32 = 4;
pub const DSPRINT_REPUBLISH: u32 = 8;
pub const DSPRINT_PENDING: u32 = 2147483648;
pub const PRINTER_CONTROL_PAUSE: u32 = 1;
pub const PRINTER_CONTROL_RESUME: u32 = 2;
pub const PRINTER_CONTROL_PURGE: u32 = 3;
pub const PRINTER_CONTROL_SET_STATUS: u32 = 4;
pub const PRINTER_STATUS_PAUSED: u32 = 1;
pub const PRINTER_STATUS_ERROR: u32 = 2;
pub const PRINTER_STATUS_PENDING_DELETION: u32 = 4;
pub const PRINTER_STATUS_PAPER_JAM: u32 = 8;
pub const PRINTER_STATUS_PAPER_OUT: u32 = 16;
pub const PRINTER_STATUS_MANUAL_FEED: u32 = 32;
pub const PRINTER_STATUS_PAPER_PROBLEM: u32 = 64;
pub const PRINTER_STATUS_OFFLINE: u32 = 128;
pub const PRINTER_STATUS_IO_ACTIVE: u32 = 256;
pub const PRINTER_STATUS_BUSY: u32 = 512;
pub const PRINTER_STATUS_PRINTING: u32 = 1024;
pub const PRINTER_STATUS_OUTPUT_BIN_FULL: u32 = 2048;
pub const PRINTER_STATUS_NOT_AVAILABLE: u32 = 4096;
pub const PRINTER_STATUS_WAITING: u32 = 8192;
pub const PRINTER_STATUS_PROCESSING: u32 = 16384;
pub const PRINTER_STATUS_INITIALIZING: u32 = 32768;
pub const PRINTER_STATUS_WARMING_UP: u32 = 65536;
pub const PRINTER_STATUS_TONER_LOW: u32 = 131072;
pub const PRINTER_STATUS_NO_TONER: u32 = 262144;
pub const PRINTER_STATUS_PAGE_PUNT: u32 = 524288;
pub const PRINTER_STATUS_USER_INTERVENTION: u32 = 1048576;
pub const PRINTER_STATUS_OUT_OF_MEMORY: u32 = 2097152;
pub const PRINTER_STATUS_DOOR_OPEN: u32 = 4194304;
pub const PRINTER_STATUS_SERVER_UNKNOWN: u32 = 8388608;
pub const PRINTER_STATUS_POWER_SAVE: u32 = 16777216;
pub const PRINTER_STATUS_SERVER_OFFLINE: u32 = 33554432;
pub const PRINTER_STATUS_DRIVER_UPDATE_NEEDED: u32 = 67108864;
pub const PRINTER_ATTRIBUTE_QUEUED: u32 = 1;
pub const PRINTER_ATTRIBUTE_DIRECT: u32 = 2;
pub const PRINTER_ATTRIBUTE_DEFAULT: u32 = 4;
pub const PRINTER_ATTRIBUTE_SHARED: u32 = 8;
pub const PRINTER_ATTRIBUTE_NETWORK: u32 = 16;
pub const PRINTER_ATTRIBUTE_HIDDEN: u32 = 32;
pub const PRINTER_ATTRIBUTE_LOCAL: u32 = 64;
pub const PRINTER_ATTRIBUTE_ENABLE_DEVQ: u32 = 128;
pub const PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS: u32 = 256;
pub const PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST: u32 = 512;
pub const PRINTER_ATTRIBUTE_WORK_OFFLINE: u32 = 1024;
pub const PRINTER_ATTRIBUTE_ENABLE_BIDI: u32 = 2048;
pub const PRINTER_ATTRIBUTE_RAW_ONLY: u32 = 4096;
pub const PRINTER_ATTRIBUTE_PUBLISHED: u32 = 8192;
pub const PRINTER_ATTRIBUTE_FAX: u32 = 16384;
pub const PRINTER_ATTRIBUTE_TS: u32 = 32768;
pub const PRINTER_ATTRIBUTE_PUSHED_USER: u32 = 131072;
pub const PRINTER_ATTRIBUTE_PUSHED_MACHINE: u32 = 262144;
pub const PRINTER_ATTRIBUTE_MACHINE: u32 = 524288;
pub const PRINTER_ATTRIBUTE_FRIENDLY_NAME: u32 = 1048576;
pub const PRINTER_ATTRIBUTE_TS_GENERIC_DRIVER: u32 = 2097152;
pub const PRINTER_ATTRIBUTE_PER_USER: u32 = 4194304;
pub const PRINTER_ATTRIBUTE_ENTERPRISE_CLOUD: u32 = 8388608;
pub const NO_PRIORITY: u32 = 0;
pub const MAX_PRIORITY: u32 = 99;
pub const MIN_PRIORITY: u32 = 1;
pub const DEF_PRIORITY: u32 = 1;
pub const JOB_CONTROL_PAUSE: u32 = 1;
pub const JOB_CONTROL_RESUME: u32 = 2;
pub const JOB_CONTROL_CANCEL: u32 = 3;
pub const JOB_CONTROL_RESTART: u32 = 4;
pub const JOB_CONTROL_DELETE: u32 = 5;
pub const JOB_CONTROL_SENT_TO_PRINTER: u32 = 6;
pub const JOB_CONTROL_LAST_PAGE_EJECTED: u32 = 7;
pub const JOB_CONTROL_RETAIN: u32 = 8;
pub const JOB_CONTROL_RELEASE: u32 = 9;
pub const JOB_STATUS_PAUSED: u32 = 1;
pub const JOB_STATUS_ERROR: u32 = 2;
pub const JOB_STATUS_DELETING: u32 = 4;
pub const JOB_STATUS_SPOOLING: u32 = 8;
pub const JOB_STATUS_PRINTING: u32 = 16;
pub const JOB_STATUS_OFFLINE: u32 = 32;
pub const JOB_STATUS_PAPEROUT: u32 = 64;
pub const JOB_STATUS_PRINTED: u32 = 128;
pub const JOB_STATUS_DELETED: u32 = 256;
pub const JOB_STATUS_BLOCKED_DEVQ: u32 = 512;
pub const JOB_STATUS_USER_INTERVENTION: u32 = 1024;
pub const JOB_STATUS_RESTART: u32 = 2048;
pub const JOB_STATUS_COMPLETE: u32 = 4096;
pub const JOB_STATUS_RETAINED: u32 = 8192;
pub const JOB_STATUS_RENDERING_LOCALLY: u32 = 16384;
pub const JOB_POSITION_UNSPECIFIED: u32 = 0;
pub const PRINTER_DRIVER_PACKAGE_AWARE: u32 = 1;
pub const PRINTER_DRIVER_XPS: u32 = 2;
pub const PRINTER_DRIVER_SANDBOX_ENABLED: u32 = 4;
pub const PRINTER_DRIVER_CLASS: u32 = 8;
pub const PRINTER_DRIVER_DERIVED: u32 = 16;
pub const PRINTER_DRIVER_NOT_SHAREABLE: u32 = 32;
pub const PRINTER_DRIVER_CATEGORY_FAX: u32 = 64;
pub const PRINTER_DRIVER_CATEGORY_FILE: u32 = 128;
pub const PRINTER_DRIVER_CATEGORY_VIRTUAL: u32 = 256;
pub const PRINTER_DRIVER_CATEGORY_SERVICE: u32 = 512;
pub const PRINTER_DRIVER_SOFT_RESET_REQUIRED: u32 = 1024;
pub const PRINTER_DRIVER_SANDBOX_DISABLED: u32 = 2048;
pub const PRINTER_DRIVER_CATEGORY_3D: u32 = 4096;
pub const PRINTER_DRIVER_CATEGORY_CLOUD: u32 = 8192;
pub const DRIVER_KERNELMODE: u32 = 1;
pub const DRIVER_USERMODE: u32 = 2;
pub const DPD_DELETE_UNUSED_FILES: u32 = 1;
pub const DPD_DELETE_SPECIFIC_VERSION: u32 = 2;
pub const DPD_DELETE_ALL_FILES: u32 = 4;
pub const APD_STRICT_UPGRADE: u32 = 1;
pub const APD_STRICT_DOWNGRADE: u32 = 2;
pub const APD_COPY_ALL_FILES: u32 = 4;
pub const APD_COPY_NEW_FILES: u32 = 8;
pub const APD_COPY_FROM_DIRECTORY: u32 = 16;
pub const STRING_NONE: u32 = 1;
pub const STRING_MUIDLL: u32 = 2;
pub const STRING_LANGPAIR: u32 = 4;
pub const MAX_FORM_KEYWORD_LENGTH: u32 = 64;
pub const DI_CHANNEL: u32 = 1;
pub const DI_READ_SPOOL_JOB: u32 = 3;
pub const DI_MEMORYMAP_WRITE: u32 = 1;
pub const FORM_USER: u32 = 0;
pub const FORM_BUILTIN: u32 = 1;
pub const FORM_PRINTER: u32 = 2;
pub const NORMAL_PRINT: u32 = 0;
pub const REVERSE_PRINT: u32 = 1;
pub const PPCAPS_RIGHT_THEN_DOWN: u32 = 1;
pub const PPCAPS_DOWN_THEN_RIGHT: u32 = 2;
pub const PPCAPS_LEFT_THEN_DOWN: u32 = 4;
pub const PPCAPS_DOWN_THEN_LEFT: u32 = 8;
pub const PPCAPS_BORDER_PRINT: u32 = 1;
pub const PPCAPS_BOOKLET_EDGE: u32 = 1;
pub const PPCAPS_REVERSE_PAGES_FOR_REVERSE_DUPLEX: u32 = 1;
pub const PPCAPS_DONT_SEND_EXTRA_PAGES_FOR_DUPLEX: u32 = 2;
pub const PPCAPS_SQUARE_SCALING: u32 = 1;
pub const PORT_TYPE_WRITE: u32 = 1;
pub const PORT_TYPE_READ: u32 = 2;
pub const PORT_TYPE_REDIRECTED: u32 = 4;
pub const PORT_TYPE_NET_ATTACHED: u32 = 8;
pub const PORT_STATUS_TYPE_ERROR: u32 = 1;
pub const PORT_STATUS_TYPE_WARNING: u32 = 2;
pub const PORT_STATUS_TYPE_INFO: u32 = 3;
pub const PORT_STATUS_OFFLINE: u32 = 1;
pub const PORT_STATUS_PAPER_JAM: u32 = 2;
pub const PORT_STATUS_PAPER_OUT: u32 = 3;
pub const PORT_STATUS_OUTPUT_BIN_FULL: u32 = 4;
pub const PORT_STATUS_PAPER_PROBLEM: u32 = 5;
pub const PORT_STATUS_NO_TONER: u32 = 6;
pub const PORT_STATUS_DOOR_OPEN: u32 = 7;
pub const PORT_STATUS_USER_INTERVENTION: u32 = 8;
pub const PORT_STATUS_OUT_OF_MEMORY: u32 = 9;
pub const PORT_STATUS_TONER_LOW: u32 = 10;
pub const PORT_STATUS_WARMING_UP: u32 = 11;
pub const PORT_STATUS_POWER_SAVE: u32 = 12;
pub const PRINTER_ENUM_DEFAULT: u32 = 1;
pub const PRINTER_ENUM_LOCAL: u32 = 2;
pub const PRINTER_ENUM_CONNECTIONS: u32 = 4;
pub const PRINTER_ENUM_FAVORITE: u32 = 4;
pub const PRINTER_ENUM_NAME: u32 = 8;
pub const PRINTER_ENUM_REMOTE: u32 = 16;
pub const PRINTER_ENUM_SHARED: u32 = 32;
pub const PRINTER_ENUM_NETWORK: u32 = 64;
pub const PRINTER_ENUM_EXPAND: u32 = 16384;
pub const PRINTER_ENUM_CONTAINER: u32 = 32768;
pub const PRINTER_ENUM_ICONMASK: u32 = 16711680;
pub const PRINTER_ENUM_ICON1: u32 = 65536;
pub const PRINTER_ENUM_ICON2: u32 = 131072;
pub const PRINTER_ENUM_ICON3: u32 = 262144;
pub const PRINTER_ENUM_ICON4: u32 = 524288;
pub const PRINTER_ENUM_ICON5: u32 = 1048576;
pub const PRINTER_ENUM_ICON6: u32 = 2097152;
pub const PRINTER_ENUM_ICON7: u32 = 4194304;
pub const PRINTER_ENUM_ICON8: u32 = 8388608;
pub const PRINTER_ENUM_HIDE: u32 = 16777216;
pub const PRINTER_ENUM_CATEGORY_ALL: u32 = 33554432;
pub const PRINTER_ENUM_CATEGORY_3D: u32 = 67108864;
pub const SPOOL_FILE_PERSISTENT: u32 = 1;
pub const SPOOL_FILE_TEMPORARY: u32 = 2;
pub const PRINTER_NOTIFY_TYPE: u32 = 0;
pub const JOB_NOTIFY_TYPE: u32 = 1;
pub const SERVER_NOTIFY_TYPE: u32 = 2;
pub const PRINTER_NOTIFY_FIELD_SERVER_NAME: u32 = 0;
pub const PRINTER_NOTIFY_FIELD_PRINTER_NAME: u32 = 1;
pub const PRINTER_NOTIFY_FIELD_SHARE_NAME: u32 = 2;
pub const PRINTER_NOTIFY_FIELD_PORT_NAME: u32 = 3;
pub const PRINTER_NOTIFY_FIELD_DRIVER_NAME: u32 = 4;
pub const PRINTER_NOTIFY_FIELD_COMMENT: u32 = 5;
pub const PRINTER_NOTIFY_FIELD_LOCATION: u32 = 6;
pub const PRINTER_NOTIFY_FIELD_DEVMODE: u32 = 7;
pub const PRINTER_NOTIFY_FIELD_SEPFILE: u32 = 8;
pub const PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR: u32 = 9;
pub const PRINTER_NOTIFY_FIELD_PARAMETERS: u32 = 10;
pub const PRINTER_NOTIFY_FIELD_DATATYPE: u32 = 11;
pub const PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR: u32 = 12;
pub const PRINTER_NOTIFY_FIELD_ATTRIBUTES: u32 = 13;
pub const PRINTER_NOTIFY_FIELD_PRIORITY: u32 = 14;
pub const PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY: u32 = 15;
pub const PRINTER_NOTIFY_FIELD_START_TIME: u32 = 16;
pub const PRINTER_NOTIFY_FIELD_UNTIL_TIME: u32 = 17;
pub const PRINTER_NOTIFY_FIELD_STATUS: u32 = 18;
pub const PRINTER_NOTIFY_FIELD_STATUS_STRING: u32 = 19;
pub const PRINTER_NOTIFY_FIELD_CJOBS: u32 = 20;
pub const PRINTER_NOTIFY_FIELD_AVERAGE_PPM: u32 = 21;
pub const PRINTER_NOTIFY_FIELD_TOTAL_PAGES: u32 = 22;
pub const PRINTER_NOTIFY_FIELD_PAGES_PRINTED: u32 = 23;
pub const PRINTER_NOTIFY_FIELD_TOTAL_BYTES: u32 = 24;
pub const PRINTER_NOTIFY_FIELD_BYTES_PRINTED: u32 = 25;
pub const PRINTER_NOTIFY_FIELD_OBJECT_GUID: u32 = 26;
pub const PRINTER_NOTIFY_FIELD_FRIENDLY_NAME: u32 = 27;
pub const PRINTER_NOTIFY_FIELD_BRANCH_OFFICE_PRINTING: u32 = 28;
pub const JOB_NOTIFY_FIELD_PRINTER_NAME: u32 = 0;
pub const JOB_NOTIFY_FIELD_MACHINE_NAME: u32 = 1;
pub const JOB_NOTIFY_FIELD_PORT_NAME: u32 = 2;
pub const JOB_NOTIFY_FIELD_USER_NAME: u32 = 3;
pub const JOB_NOTIFY_FIELD_NOTIFY_NAME: u32 = 4;
pub const JOB_NOTIFY_FIELD_DATATYPE: u32 = 5;
pub const JOB_NOTIFY_FIELD_PRINT_PROCESSOR: u32 = 6;
pub const JOB_NOTIFY_FIELD_PARAMETERS: u32 = 7;
pub const JOB_NOTIFY_FIELD_DRIVER_NAME: u32 = 8;
pub const JOB_NOTIFY_FIELD_DEVMODE: u32 = 9;
pub const JOB_NOTIFY_FIELD_STATUS: u32 = 10;
pub const JOB_NOTIFY_FIELD_STATUS_STRING: u32 = 11;
pub const JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR: u32 = 12;
pub const JOB_NOTIFY_FIELD_DOCUMENT: u32 = 13;
pub const JOB_NOTIFY_FIELD_PRIORITY: u32 = 14;
pub const JOB_NOTIFY_FIELD_POSITION: u32 = 15;
pub const JOB_NOTIFY_FIELD_SUBMITTED: u32 = 16;
pub const JOB_NOTIFY_FIELD_START_TIME: u32 = 17;
pub const JOB_NOTIFY_FIELD_UNTIL_TIME: u32 = 18;
pub const JOB_NOTIFY_FIELD_TIME: u32 = 19;
pub const JOB_NOTIFY_FIELD_TOTAL_PAGES: u32 = 20;
pub const JOB_NOTIFY_FIELD_PAGES_PRINTED: u32 = 21;
pub const JOB_NOTIFY_FIELD_TOTAL_BYTES: u32 = 22;
pub const JOB_NOTIFY_FIELD_BYTES_PRINTED: u32 = 23;
pub const JOB_NOTIFY_FIELD_REMOTE_JOB_ID: u32 = 24;
pub const SERVER_NOTIFY_FIELD_PRINT_DRIVER_ISOLATION_GROUP: u32 = 0;
pub const PRINTER_NOTIFY_CATEGORY_ALL: u32 = 4096;
pub const PRINTER_NOTIFY_CATEGORY_3D: u32 = 8192;
pub const PRINTER_NOTIFY_OPTIONS_REFRESH: u32 = 1;
pub const PRINTER_NOTIFY_INFO_DISCARDED: u32 = 1;
pub const BIDI_ACTION_ENUM_SCHEMA: &'static [u8; 11usize] = b"EnumSchema\0";
pub const BIDI_ACTION_GET: &'static [u8; 4usize] = b"Get\0";
pub const BIDI_ACTION_SET: &'static [u8; 4usize] = b"Set\0";
pub const BIDI_ACTION_GET_ALL: &'static [u8; 7usize] = b"GetAll\0";
pub const BIDI_ACTION_GET_WITH_ARGUMENT: &'static [u8; 16usize] = b"GetWithArgument\0";
pub const BIDI_ACCESS_ADMINISTRATOR: u32 = 1;
pub const BIDI_ACCESS_USER: u32 = 2;
pub const ERROR_BIDI_STATUS_OK: u32 = 0;
pub const ERROR_BIDI_NOT_SUPPORTED: u32 = 50;
pub const ERROR_BIDI_ERROR_BASE: u32 = 13000;
pub const ERROR_BIDI_STATUS_WARNING: u32 = 13001;
pub const ERROR_BIDI_SCHEMA_READ_ONLY: u32 = 13002;
pub const ERROR_BIDI_SERVER_OFFLINE: u32 = 13003;
pub const ERROR_BIDI_DEVICE_OFFLINE: u32 = 13004;
pub const ERROR_BIDI_SCHEMA_NOT_SUPPORTED: u32 = 13005;
pub const ERROR_BIDI_SET_DIFFERENT_TYPE: u32 = 13006;
pub const ERROR_BIDI_SET_MULTIPLE_SCHEMAPATH: u32 = 13007;
pub const ERROR_BIDI_SET_INVALID_SCHEMAPATH: u32 = 13008;
pub const ERROR_BIDI_SET_UNKNOWN_FAILURE: u32 = 13009;
pub const ERROR_BIDI_SCHEMA_WRITE_ONLY: u32 = 13010;
pub const ERROR_BIDI_GET_REQUIRES_ARGUMENT: u32 = 13011;
pub const ERROR_BIDI_GET_ARGUMENT_NOT_SUPPORTED: u32 = 13012;
pub const ERROR_BIDI_GET_MISSING_ARGUMENT: u32 = 13013;
pub const ERROR_BIDI_DEVICE_CONFIG_UNCHANGED: u32 = 13014;
pub const ERROR_BIDI_NO_LOCALIZED_RESOURCES: u32 = 13015;
pub const ERROR_BIDI_NO_BIDI_SCHEMA_EXTENSIONS: u32 = 13016;
pub const ERROR_BIDI_UNSUPPORTED_CLIENT_LANGUAGE: u32 = 13017;
pub const ERROR_BIDI_UNSUPPORTED_RESOURCE_FORMAT: u32 = 13018;
pub const PRINTER_CHANGE_ADD_PRINTER: u32 = 1;
pub const PRINTER_CHANGE_SET_PRINTER: u32 = 2;
pub const PRINTER_CHANGE_DELETE_PRINTER: u32 = 4;
pub const PRINTER_CHANGE_FAILED_CONNECTION_PRINTER: u32 = 8;
pub const PRINTER_CHANGE_PRINTER: u32 = 255;
pub const PRINTER_CHANGE_ADD_JOB: u32 = 256;
pub const PRINTER_CHANGE_SET_JOB: u32 = 512;
pub const PRINTER_CHANGE_DELETE_JOB: u32 = 1024;
pub const PRINTER_CHANGE_WRITE_JOB: u32 = 2048;
pub const PRINTER_CHANGE_JOB: u32 = 65280;
pub const PRINTER_CHANGE_ADD_FORM: u32 = 65536;
pub const PRINTER_CHANGE_SET_FORM: u32 = 131072;
pub const PRINTER_CHANGE_DELETE_FORM: u32 = 262144;
pub const PRINTER_CHANGE_FORM: u32 = 458752;
pub const PRINTER_CHANGE_ADD_PORT: u32 = 1048576;
pub const PRINTER_CHANGE_CONFIGURE_PORT: u32 = 2097152;
pub const PRINTER_CHANGE_DELETE_PORT: u32 = 4194304;
pub const PRINTER_CHANGE_PORT: u32 = 7340032;
pub const PRINTER_CHANGE_ADD_PRINT_PROCESSOR: u32 = 16777216;
pub const PRINTER_CHANGE_DELETE_PRINT_PROCESSOR: u32 = 67108864;
pub const PRINTER_CHANGE_PRINT_PROCESSOR: u32 = 117440512;
pub const PRINTER_CHANGE_SERVER: u32 = 134217728;
pub const PRINTER_CHANGE_ADD_PRINTER_DRIVER: u32 = 268435456;
pub const PRINTER_CHANGE_SET_PRINTER_DRIVER: u32 = 536870912;
pub const PRINTER_CHANGE_DELETE_PRINTER_DRIVER: u32 = 1073741824;
pub const PRINTER_CHANGE_PRINTER_DRIVER: u32 = 1879048192;
pub const PRINTER_CHANGE_TIMEOUT: u32 = 2147483648;
pub const PRINTER_CHANGE_ALL: u32 = 2138570751;
pub const PRINTER_ERROR_INFORMATION: u32 = 2147483648;
pub const PRINTER_ERROR_WARNING: u32 = 1073741824;
pub const PRINTER_ERROR_SEVERE: u32 = 536870912;
pub const PRINTER_ERROR_OUTOFPAPER: u32 = 1;
pub const PRINTER_ERROR_JAM: u32 = 2;
pub const PRINTER_ERROR_OUTOFTONER: u32 = 4;
pub const SPLREG_PRINT_DRIVER_ISOLATION_GROUPS_SEPARATOR: u8 = 92u8;
pub const SERVER_ACCESS_ADMINISTER: u32 = 1;
pub const SERVER_ACCESS_ENUMERATE: u32 = 2;
pub const PRINTER_ACCESS_ADMINISTER: u32 = 4;
pub const PRINTER_ACCESS_USE: u32 = 8;
pub const JOB_ACCESS_ADMINISTER: u32 = 16;
pub const JOB_ACCESS_READ: u32 = 32;
pub const PRINTER_ACCESS_MANAGE_LIMITED: u32 = 64;
pub const SERVER_ALL_ACCESS: u32 = 983043;
pub const SERVER_READ: u32 = 131074;
pub const SERVER_WRITE: u32 = 131075;
pub const SERVER_EXECUTE: u32 = 131074;
pub const PRINTER_ALL_ACCESS: u32 = 983052;
pub const PRINTER_READ: u32 = 131080;
pub const PRINTER_WRITE: u32 = 131080;
pub const PRINTER_EXECUTE: u32 = 131080;
pub const JOB_ALL_ACCESS: u32 = 983088;
pub const JOB_READ: u32 = 131104;
pub const JOB_WRITE: u32 = 131088;
pub const JOB_EXECUTE: u32 = 131088;
pub const PRINTER_CONNECTION_MISMATCH: u32 = 32;
pub const PRINTER_CONNECTION_NO_UI: u32 = 64;
pub const IPDFP_COPY_ALL_FILES: u32 = 1;
pub const UPDP_SILENT_UPLOAD: u32 = 1;
pub const UPDP_UPLOAD_ALWAYS: u32 = 2;
pub const UPDP_CHECK_DRIVERSTORE: u32 = 4;
pub const MS_PRINT_JOB_OUTPUT_FILE: &'static [u8; 21usize] = b"MsPrintJobOutputFile\0";
pub const _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const COM_RIGHTS_EXECUTE: u32 = 1;
pub const COM_RIGHTS_EXECUTE_LOCAL: u32 = 2;
pub const COM_RIGHTS_EXECUTE_REMOTE: u32 = 4;
pub const COM_RIGHTS_ACTIVATE_LOCAL: u32 = 8;
pub const COM_RIGHTS_ACTIVATE_REMOTE: u32 = 16;
pub const COM_RIGHTS_RESERVED1: u32 = 32;
pub const COM_RIGHTS_RESERVED2: u32 = 64;
pub const CWMO_MAX_HANDLES: u32 = 56;
pub const FADF_AUTO: u32 = 1;
pub const FADF_STATIC: u32 = 2;
pub const FADF_EMBEDDED: u32 = 4;
pub const FADF_FIXEDSIZE: u32 = 16;
pub const FADF_RECORD: u32 = 32;
pub const FADF_HAVEIID: u32 = 64;
pub const FADF_HAVEVARTYPE: u32 = 128;
pub const FADF_BSTR: u32 = 256;
pub const FADF_UNKNOWN: u32 = 512;
pub const FADF_DISPATCH: u32 = 1024;
pub const FADF_VARIANT: u32 = 2048;
pub const FADF_RESERVED: u32 = 61448;
pub const PARAMFLAG_NONE: u32 = 0;
pub const PARAMFLAG_FIN: u32 = 1;
pub const PARAMFLAG_FOUT: u32 = 2;
pub const PARAMFLAG_FLCID: u32 = 4;
pub const PARAMFLAG_FRETVAL: u32 = 8;
pub const PARAMFLAG_FOPT: u32 = 16;
pub const PARAMFLAG_FHASDEFAULT: u32 = 32;
pub const PARAMFLAG_FHASCUSTDATA: u32 = 64;
pub const IDLFLAG_NONE: u32 = 0;
pub const IDLFLAG_FIN: u32 = 1;
pub const IDLFLAG_FOUT: u32 = 2;
pub const IDLFLAG_FLCID: u32 = 4;
pub const IDLFLAG_FRETVAL: u32 = 8;
pub const IMPLTYPEFLAG_FDEFAULT: u32 = 1;
pub const IMPLTYPEFLAG_FSOURCE: u32 = 2;
pub const IMPLTYPEFLAG_FRESTRICTED: u32 = 4;
pub const IMPLTYPEFLAG_FDEFAULTVTABLE: u32 = 8;
pub const DISPID_UNKNOWN: i32 = -1;
pub const DISPID_VALUE: u32 = 0;
pub const DISPID_PROPERTYPUT: i32 = -3;
pub const DISPID_NEWENUM: i32 = -4;
pub const DISPID_EVALUATE: i32 = -5;
pub const DISPID_CONSTRUCTOR: i32 = -6;
pub const DISPID_DESTRUCTOR: i32 = -7;
pub const DISPID_COLLECT: i32 = -8;
pub const PROPSETFLAG_DEFAULT: u32 = 0;
pub const PROPSETFLAG_NONSIMPLE: u32 = 1;
pub const PROPSETFLAG_ANSI: u32 = 2;
pub const PROPSETFLAG_UNBUFFERED: u32 = 4;
pub const PROPSETFLAG_CASE_SENSITIVE: u32 = 8;
pub const PROPSET_BEHAVIOR_CASE_SENSITIVE: u32 = 1;
pub const PID_DICTIONARY: u32 = 0;
pub const PID_CODEPAGE: u32 = 1;
pub const PID_FIRST_USABLE: u32 = 2;
pub const PID_FIRST_NAME_DEFAULT: u32 = 4095;
pub const PID_LOCALE: u32 = 2147483648;
pub const PID_MODIFY_TIME: u32 = 2147483649;
pub const PID_SECURITY: u32 = 2147483650;
pub const PID_BEHAVIOR: u32 = 2147483651;
pub const PID_ILLEGAL: u32 = 4294967295;
pub const PID_MIN_READONLY: u32 = 2147483648;
pub const PID_MAX_READONLY: u32 = 3221225471;
pub const PRSPEC_INVALID: u32 = 4294967295;
pub const PRSPEC_LPWSTR: u32 = 0;
pub const PRSPEC_PROPID: u32 = 1;
pub const PROPSETHDR_OSVERSION_UNKNOWN: u32 = 4294967295;
pub const CWCSTORAGENAME: u32 = 32;
pub const STGM_DIRECT: u32 = 0;
pub const STGM_TRANSACTED: u32 = 65536;
pub const STGM_SIMPLE: u32 = 134217728;
pub const STGM_READ: u32 = 0;
pub const STGM_WRITE: u32 = 1;
pub const STGM_READWRITE: u32 = 2;
pub const STGM_SHARE_DENY_NONE: u32 = 64;
pub const STGM_SHARE_DENY_READ: u32 = 48;
pub const STGM_SHARE_DENY_WRITE: u32 = 32;
pub const STGM_SHARE_EXCLUSIVE: u32 = 16;
pub const STGM_PRIORITY: u32 = 262144;
pub const STGM_DELETEONRELEASE: u32 = 67108864;
pub const STGM_NOSCRATCH: u32 = 1048576;
pub const STGM_CREATE: u32 = 4096;
pub const STGM_CONVERT: u32 = 131072;
pub const STGM_FAILIFTHERE: u32 = 0;
pub const STGM_NOSNAPSHOT: u32 = 2097152;
pub const STGM_DIRECT_SWMR: u32 = 4194304;
pub const STGFMT_STORAGE: u32 = 0;
pub const STGFMT_NATIVE: u32 = 1;
pub const STGFMT_FILE: u32 = 3;
pub const STGFMT_ANY: u32 = 4;
pub const STGFMT_DOCFILE: u32 = 5;
pub const STGFMT_DOCUMENT: u32 = 0;
pub const STGOPTIONS_VERSION: u32 = 2;
pub const CCH_MAX_PROPSTG_NAME: u32 = 31;
pub const MARSHALINTERFACE_MIN: u32 = 500;
pub const ASYNC_MODE_COMPATIBILITY: u32 = 1;
pub const ASYNC_MODE_DEFAULT: u32 = 0;
pub const STGTY_REPEAT: u32 = 256;
pub const STG_TOEND: u32 = 4294967295;
pub const STG_LAYOUT_SEQUENTIAL: u32 = 0;
pub const STG_LAYOUT_INTERLEAVED: u32 = 1;
pub const UPDFCACHE_NODATACACHE: u32 = 1;
pub const UPDFCACHE_ONSAVECACHE: u32 = 2;
pub const UPDFCACHE_ONSTOPCACHE: u32 = 4;
pub const UPDFCACHE_NORMALCACHE: u32 = 8;
pub const UPDFCACHE_IFBLANK: u32 = 16;
pub const UPDFCACHE_ONLYIFBLANK: u32 = 2147483648;
pub const UPDFCACHE_IFBLANKORONSAVECACHE: u32 = 18;
pub const MK_ALT: u32 = 32;
pub const DROPEFFECT_NONE: u32 = 0;
pub const DROPEFFECT_COPY: u32 = 1;
pub const DROPEFFECT_MOVE: u32 = 2;
pub const DROPEFFECT_LINK: u32 = 4;
pub const DROPEFFECT_SCROLL: u32 = 2147483648;
pub const DD_DEFSCROLLINSET: u32 = 11;
pub const DD_DEFSCROLLDELAY: u32 = 50;
pub const DD_DEFSCROLLINTERVAL: u32 = 50;
pub const DD_DEFDRAGDELAY: u32 = 200;
pub const DD_DEFDRAGMINDIST: u32 = 2;
pub const MKSYS_URLMONIKER: u32 = 6;
pub const URL_MK_LEGACY: u32 = 0;
pub const URL_MK_UNIFORM: u32 = 1;
pub const URL_MK_NO_CANONICALIZE: u32 = 2;
pub const FIEF_FLAG_FORCE_JITUI: u32 = 1;
pub const FIEF_FLAG_PEEK: u32 = 2;
pub const FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK: u32 = 4;
pub const FIEF_FLAG_RESERVED_0: u32 = 8;
pub const FMFD_DEFAULT: u32 = 0;
pub const FMFD_URLASFILENAME: u32 = 1;
pub const FMFD_ENABLEMIMESNIFFING: u32 = 2;
pub const FMFD_IGNOREMIMETEXTPLAIN: u32 = 4;
pub const FMFD_SERVERMIME: u32 = 8;
pub const FMFD_RESPECTTEXTPLAIN: u32 = 16;
pub const FMFD_RETURNUPDATEDIMGMIMES: u32 = 32;
pub const FMFD_RESERVED_1: u32 = 64;
pub const UAS_EXACTLEGACY: u32 = 4096;
pub const URLMON_OPTION_USERAGENT: u32 = 268435457;
pub const URLMON_OPTION_USERAGENT_REFRESH: u32 = 268435458;
pub const URLMON_OPTION_URL_ENCODING: u32 = 268435460;
pub const URLMON_OPTION_USE_BINDSTRINGCREDS: u32 = 268435464;
pub const URLMON_OPTION_USE_BROWSERAPPSDOCUMENTS: u32 = 268435472;
pub const CF_NULL: u32 = 0;
pub const CFSTR_MIME_NULL: u32 = 0;
pub const Uri_CREATE_ALLOW_RELATIVE: u32 = 1;
pub const Uri_CREATE_ALLOW_IMPLICIT_WILDCARD_SCHEME: u32 = 2;
pub const Uri_CREATE_ALLOW_IMPLICIT_FILE_SCHEME: u32 = 4;
pub const Uri_CREATE_NOFRAG: u32 = 8;
pub const Uri_CREATE_NO_CANONICALIZE: u32 = 16;
pub const Uri_CREATE_CANONICALIZE: u32 = 256;
pub const Uri_CREATE_FILE_USE_DOS_PATH: u32 = 32;
pub const Uri_CREATE_DECODE_EXTRA_INFO: u32 = 64;
pub const Uri_CREATE_NO_DECODE_EXTRA_INFO: u32 = 128;
pub const Uri_CREATE_CRACK_UNKNOWN_SCHEMES: u32 = 512;
pub const Uri_CREATE_NO_CRACK_UNKNOWN_SCHEMES: u32 = 1024;
pub const Uri_CREATE_PRE_PROCESS_HTML_URI: u32 = 2048;
pub const Uri_CREATE_NO_PRE_PROCESS_HTML_URI: u32 = 4096;
pub const Uri_CREATE_IE_SETTINGS: u32 = 8192;
pub const Uri_CREATE_NO_IE_SETTINGS: u32 = 16384;
pub const Uri_CREATE_NO_ENCODE_FORBIDDEN_CHARACTERS: u32 = 32768;
pub const Uri_CREATE_NORMALIZE_INTL_CHARACTERS: u32 = 65536;
pub const Uri_CREATE_CANONICALIZE_ABSOLUTE: u32 = 131072;
pub const Uri_DISPLAY_NO_FRAGMENT: u32 = 1;
pub const Uri_PUNYCODE_IDN_HOST: u32 = 2;
pub const Uri_DISPLAY_IDN_HOST: u32 = 4;
pub const Uri_DISPLAY_NO_PUNYCODE: u32 = 8;
pub const Uri_ENCODING_USER_INFO_AND_PATH_IS_PERCENT_ENCODED_UTF8: u32 = 1;
pub const Uri_ENCODING_USER_INFO_AND_PATH_IS_CP: u32 = 2;
pub const Uri_ENCODING_HOST_IS_IDN: u32 = 4;
pub const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_UTF8: u32 = 8;
pub const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_CP: u32 = 16;
pub const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_PERCENT_ENCODED_UTF8: u32 = 32;
pub const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_CP: u32 = 64;
pub const Uri_ENCODING_RFC: u32 = 41;
pub const UriBuilder_USE_ORIGINAL_FLAGS: u32 = 1;
pub const WININETINFO_OPTION_LOCK_HANDLE: u32 = 65534;
pub const URLOSTRM_USECACHEDCOPY_ONLY: u32 = 1;
pub const URLOSTRM_USECACHEDCOPY: u32 = 2;
pub const URLOSTRM_GETNEWESTVERSION: u32 = 3;
pub const SET_FEATURE_ON_THREAD: u32 = 1;
pub const SET_FEATURE_ON_PROCESS: u32 = 2;
pub const SET_FEATURE_IN_REGISTRY: u32 = 4;
pub const SET_FEATURE_ON_THREAD_LOCALMACHINE: u32 = 8;
pub const SET_FEATURE_ON_THREAD_INTRANET: u32 = 16;
pub const SET_FEATURE_ON_THREAD_TRUSTED: u32 = 32;
pub const SET_FEATURE_ON_THREAD_INTERNET: u32 = 64;
pub const SET_FEATURE_ON_THREAD_RESTRICTED: u32 = 128;
pub const GET_FEATURE_FROM_THREAD: u32 = 1;
pub const GET_FEATURE_FROM_PROCESS: u32 = 2;
pub const GET_FEATURE_FROM_REGISTRY: u32 = 4;
pub const GET_FEATURE_FROM_THREAD_LOCALMACHINE: u32 = 8;
pub const GET_FEATURE_FROM_THREAD_INTRANET: u32 = 16;
pub const GET_FEATURE_FROM_THREAD_TRUSTED: u32 = 32;
pub const GET_FEATURE_FROM_THREAD_INTERNET: u32 = 64;
pub const GET_FEATURE_FROM_THREAD_RESTRICTED: u32 = 128;
pub const PROTOCOLFLAG_NO_PICS_CHECK: u32 = 1;
pub const MUTZ_NOSAVEDFILECHECK: u32 = 1;
pub const MUTZ_ISFILE: u32 = 2;
pub const MUTZ_ACCEPT_WILDCARD_SCHEME: u32 = 128;
pub const MUTZ_ENFORCERESTRICTED: u32 = 256;
pub const MUTZ_RESERVED: u32 = 512;
pub const MUTZ_REQUIRESAVEDFILECHECK: u32 = 1024;
pub const MUTZ_DONT_UNESCAPE: u32 = 2048;
pub const MUTZ_DONT_USE_CACHE: u32 = 4096;
pub const MUTZ_FORCE_INTRANET_FLAGS: u32 = 8192;
pub const MUTZ_IGNORE_ZONE_MAPPINGS: u32 = 16384;
pub const MAX_SIZE_SECURITY_ID: u32 = 512;
pub const URLACTION_MIN: u32 = 4096;
pub const URLACTION_DOWNLOAD_MIN: u32 = 4096;
pub const URLACTION_DOWNLOAD_SIGNED_ACTIVEX: u32 = 4097;
pub const URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX: u32 = 4100;
pub const URLACTION_DOWNLOAD_CURR_MAX: u32 = 4100;
pub const URLACTION_DOWNLOAD_MAX: u32 = 4607;
pub const URLACTION_ACTIVEX_MIN: u32 = 4608;
pub const URLACTION_ACTIVEX_RUN: u32 = 4608;
pub const URLPOLICY_ACTIVEX_CHECK_LIST: u32 = 65536;
pub const URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY: u32 = 4609;
pub const URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY: u32 = 4610;
pub const URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY: u32 = 4611;
pub const URLACTION_SCRIPT_OVERRIDE_SAFETY: u32 = 5121;
pub const URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY: u32 = 4612;
pub const URLACTION_ACTIVEX_TREATASUNTRUSTED: u32 = 4613;
pub const URLACTION_ACTIVEX_NO_WEBOC_SCRIPT: u32 = 4614;
pub const URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION: u32 = 4615;
pub const URLACTION_ACTIVEX_OVERRIDE_OPTIN: u32 = 4616;
pub const URLACTION_ACTIVEX_SCRIPTLET_RUN: u32 = 4617;
pub const URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION: u32 = 4618;
pub const URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST: u32 = 4619;
pub const URLACTION_ACTIVEX_ALLOW_TDC: u32 = 4620;
pub const URLACTION_ACTIVEX_CURR_MAX: u32 = 4620;
pub const URLACTION_ACTIVEX_MAX: u32 = 5119;
pub const URLACTION_SCRIPT_MIN: u32 = 5120;
pub const URLACTION_SCRIPT_RUN: u32 = 5120;
pub const URLACTION_SCRIPT_JAVA_USE: u32 = 5122;
pub const URLACTION_SCRIPT_SAFE_ACTIVEX: u32 = 5125;
pub const URLACTION_CROSS_DOMAIN_DATA: u32 = 5126;
pub const URLACTION_SCRIPT_PASTE: u32 = 5127;
pub const URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE: u32 = 5128;
pub const URLACTION_SCRIPT_XSSFILTER: u32 = 5129;
pub const URLACTION_SCRIPT_NAVIGATE: u32 = 5130;
pub const URLACTION_PLUGGABLE_PROTOCOL_XHR: u32 = 5131;
pub const URLACTION_ALLOW_VBSCRIPT_IE: u32 = 5132;
pub const URLACTION_SCRIPT_CURR_MAX: u32 = 5132;
pub const URLACTION_SCRIPT_MAX: u32 = 5631;
pub const URLACTION_HTML_MIN: u32 = 5632;
pub const URLACTION_HTML_SUBMIT_FORMS: u32 = 5633;
pub const URLACTION_HTML_SUBMIT_FORMS_FROM: u32 = 5634;
pub const URLACTION_HTML_SUBMIT_FORMS_TO: u32 = 5635;
pub const URLACTION_HTML_FONT_DOWNLOAD: u32 = 5636;
pub const URLACTION_HTML_JAVA_RUN: u32 = 5637;
pub const URLACTION_HTML_USERDATA_SAVE: u32 = 5638;
pub const URLACTION_HTML_SUBFRAME_NAVIGATE: u32 = 5639;
pub const URLACTION_HTML_META_REFRESH: u32 = 5640;
pub const URLACTION_HTML_MIXED_CONTENT: u32 = 5641;
pub const URLACTION_HTML_INCLUDE_FILE_PATH: u32 = 5642;
pub const URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML: u32 = 5643;
pub const URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE: u32 = 5644;
pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS: u32 = 5645;
pub const URLACTION_HTML_ALLOW_WINDOW_CLOSE: u32 = 5646;
pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER: u32 = 5647;
pub const URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK: u32 = 5648;
pub const URLACTION_HTML_ALLOW_INDEXEDDB: u32 = 5649;
pub const URLACTION_HTML_MAX: u32 = 6143;
pub const URLACTION_SHELL_MIN: u32 = 6144;
pub const URLACTION_SHELL_INSTALL_DTITEMS: u32 = 6144;
pub const URLACTION_SHELL_MOVE_OR_COPY: u32 = 6146;
pub const URLACTION_SHELL_FILE_DOWNLOAD: u32 = 6147;
pub const URLACTION_SHELL_VERB: u32 = 6148;
pub const URLACTION_SHELL_WEBVIEW_VERB: u32 = 6149;
pub const URLACTION_SHELL_SHELLEXECUTE: u32 = 6150;
pub const URLACTION_SHELL_EXECUTE_HIGHRISK: u32 = 6150;
pub const URLACTION_SHELL_EXECUTE_MODRISK: u32 = 6151;
pub const URLACTION_SHELL_EXECUTE_LOWRISK: u32 = 6152;
pub const URLACTION_SHELL_POPUPMGR: u32 = 6153;
pub const URLACTION_SHELL_RTF_OBJECTS_LOAD: u32 = 6154;
pub const URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY: u32 = 6155;
pub const URLACTION_SHELL_EXTENSIONSECURITY: u32 = 6156;
pub const URLACTION_SHELL_SECURE_DRAGSOURCE: u32 = 6157;
pub const URLACTION_SHELL_REMOTEQUERY: u32 = 6158;
pub const URLACTION_SHELL_PREVIEW: u32 = 6159;
pub const URLACTION_SHELL_SHARE: u32 = 6160;
pub const URLACTION_SHELL_ALLOW_CROSS_SITE_SHARE: u32 = 6161;
pub const URLACTION_SHELL_TOCTOU_RISK: u32 = 6162;
pub const URLACTION_SHELL_CURR_MAX: u32 = 6162;
pub const URLACTION_SHELL_MAX: u32 = 6655;
pub const URLACTION_NETWORK_MIN: u32 = 6656;
pub const URLACTION_CREDENTIALS_USE: u32 = 6656;
pub const URLPOLICY_CREDENTIALS_SILENT_LOGON_OK: u32 = 0;
pub const URLPOLICY_CREDENTIALS_MUST_PROMPT_USER: u32 = 65536;
pub const URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT: u32 = 131072;
pub const URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY: u32 = 196608;
pub const URLACTION_AUTHENTICATE_CLIENT: u32 = 6657;
pub const URLPOLICY_AUTHENTICATE_CLEARTEXT_OK: u32 = 0;
pub const URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE: u32 = 65536;
pub const URLPOLICY_AUTHENTICATE_MUTUAL_ONLY: u32 = 196608;
pub const URLACTION_COOKIES: u32 = 6658;
pub const URLACTION_COOKIES_SESSION: u32 = 6659;
pub const URLACTION_CLIENT_CERT_PROMPT: u32 = 6660;
pub const URLACTION_COOKIES_THIRD_PARTY: u32 = 6661;
pub const URLACTION_COOKIES_SESSION_THIRD_PARTY: u32 = 6662;
pub const URLACTION_COOKIES_ENABLED: u32 = 6672;
pub const URLACTION_NETWORK_CURR_MAX: u32 = 6672;
pub const URLACTION_NETWORK_MAX: u32 = 7167;
pub const URLACTION_JAVA_MIN: u32 = 7168;
pub const URLACTION_JAVA_PERMISSIONS: u32 = 7168;
pub const URLPOLICY_JAVA_PROHIBIT: u32 = 0;
pub const URLPOLICY_JAVA_HIGH: u32 = 65536;
pub const URLPOLICY_JAVA_MEDIUM: u32 = 131072;
pub const URLPOLICY_JAVA_LOW: u32 = 196608;
pub const URLPOLICY_JAVA_CUSTOM: u32 = 8388608;
pub const URLACTION_JAVA_CURR_MAX: u32 = 7168;
pub const URLACTION_JAVA_MAX: u32 = 7423;
pub const URLACTION_INFODELIVERY_MIN: u32 = 7424;
pub const URLACTION_INFODELIVERY_NO_ADDING_CHANNELS: u32 = 7424;
pub const URLACTION_INFODELIVERY_NO_EDITING_CHANNELS: u32 = 7425;
pub const URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS: u32 = 7426;
pub const URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS: u32 = 7427;
pub const URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS: u32 = 7428;
pub const URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS: u32 = 7429;
pub const URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING: u32 = 7430;
pub const URLACTION_INFODELIVERY_CURR_MAX: u32 = 7430;
pub const URLACTION_INFODELIVERY_MAX: u32 = 7679;
pub const URLACTION_CHANNEL_SOFTDIST_MIN: u32 = 7680;
pub const URLACTION_CHANNEL_SOFTDIST_PERMISSIONS: u32 = 7685;
pub const URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT: u32 = 65536;
pub const URLPOLICY_CHANNEL_SOFTDIST_PRECACHE: u32 = 131072;
pub const URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL: u32 = 196608;
pub const URLACTION_CHANNEL_SOFTDIST_MAX: u32 = 7935;
pub const URLACTION_DOTNET_USERCONTROLS: u32 = 8197;
pub const URLACTION_BEHAVIOR_MIN: u32 = 8192;
pub const URLACTION_BEHAVIOR_RUN: u32 = 8192;
pub const URLPOLICY_BEHAVIOR_CHECK_LIST: u32 = 65536;
pub const URLACTION_FEATURE_MIN: u32 = 8448;
pub const URLACTION_FEATURE_MIME_SNIFFING: u32 = 8448;
pub const URLACTION_FEATURE_ZONE_ELEVATION: u32 = 8449;
pub const URLACTION_FEATURE_WINDOW_RESTRICTIONS: u32 = 8450;
pub const URLACTION_FEATURE_SCRIPT_STATUS_BAR: u32 = 8451;
pub const URLACTION_FEATURE_FORCE_ADDR_AND_STATUS: u32 = 8452;
pub const URLACTION_FEATURE_BLOCK_INPUT_PROMPTS: u32 = 8453;
pub const URLACTION_FEATURE_DATA_BINDING: u32 = 8454;
pub const URLACTION_FEATURE_CROSSDOMAIN_FOCUS_CHANGE: u32 = 8455;
pub const URLACTION_AUTOMATIC_DOWNLOAD_UI_MIN: u32 = 8704;
pub const URLACTION_AUTOMATIC_DOWNLOAD_UI: u32 = 8704;
pub const URLACTION_AUTOMATIC_ACTIVEX_UI: u32 = 8705;
pub const URLACTION_ALLOW_RESTRICTEDPROTOCOLS: u32 = 8960;
pub const URLACTION_ALLOW_APEVALUATION: u32 = 8961;
pub const URLACTION_ALLOW_XHR_EVALUATION: u32 = 8962;
pub const URLACTION_WINDOWS_BROWSER_APPLICATIONS: u32 = 9216;
pub const URLACTION_XPS_DOCUMENTS: u32 = 9217;
pub const URLACTION_LOOSE_XAML: u32 = 9218;
pub const URLACTION_LOWRIGHTS: u32 = 9472;
pub const URLACTION_WINFX_SETUP: u32 = 9728;
pub const URLACTION_INPRIVATE_BLOCKING: u32 = 9984;
pub const URLACTION_ALLOW_AUDIO_VIDEO: u32 = 9985;
pub const URLACTION_ALLOW_ACTIVEX_FILTERING: u32 = 9986;
pub const URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING: u32 = 9987;
pub const URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS: u32 = 9988;
pub const URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT: u32 = 9989;
pub const URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION: u32 = 9990;
pub const URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW: u32 = 9992;
pub const URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS: u32 = 9993;
pub const URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST: u32 = 9994;
pub const URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS: u32 = 9995;
pub const URLACTION_ALLOW_ANTIMALWARE_SCANNING_OF_ACTIVEX: u32 = 9996;
pub const URLACTION_ALLOW_CSS_EXPRESSIONS: u32 = 9997;
pub const URLPOLICY_ALLOW: u32 = 0;
pub const URLPOLICY_QUERY: u32 = 1;
pub const URLPOLICY_DISALLOW: u32 = 3;
pub const URLPOLICY_NOTIFY_ON_ALLOW: u32 = 16;
pub const URLPOLICY_NOTIFY_ON_DISALLOW: u32 = 32;
pub const URLPOLICY_LOG_ON_ALLOW: u32 = 64;
pub const URLPOLICY_LOG_ON_DISALLOW: u32 = 128;
pub const URLPOLICY_MASK_PERMISSIONS: u32 = 15;
pub const URLPOLICY_DONTCHECKDLGBOX: u32 = 256;
pub const URLZONE_ESC_FLAG: u32 = 256;
pub const SECURITY_IE_STATE_GREEN: u32 = 0;
pub const SECURITY_IE_STATE_RED: u32 = 1;
pub const SOFTDIST_FLAG_USAGE_EMAIL: u32 = 1;
pub const SOFTDIST_FLAG_USAGE_PRECACHE: u32 = 2;
pub const SOFTDIST_FLAG_USAGE_AUTOINSTALL: u32 = 4;
pub const SOFTDIST_FLAG_DELETE_SUBSCRIPTION: u32 = 8;
pub const SOFTDIST_ADSTATE_NONE: u32 = 0;
pub const SOFTDIST_ADSTATE_AVAILABLE: u32 = 1;
pub const SOFTDIST_ADSTATE_DOWNLOADED: u32 = 2;
pub const SOFTDIST_ADSTATE_INSTALLED: u32 = 3;
pub const CONFIRMSAFETYACTION_LOADOBJECT: u32 = 1;
pub const PIDDI_THUMBNAIL: u32 = 2;
pub const PIDSI_TITLE: u32 = 2;
pub const PIDSI_SUBJECT: u32 = 3;
pub const PIDSI_AUTHOR: u32 = 4;
pub const PIDSI_KEYWORDS: u32 = 5;
pub const PIDSI_COMMENTS: u32 = 6;
pub const PIDSI_TEMPLATE: u32 = 7;
pub const PIDSI_LASTAUTHOR: u32 = 8;
pub const PIDSI_REVNUMBER: u32 = 9;
pub const PIDSI_EDITTIME: u32 = 10;
pub const PIDSI_LASTPRINTED: u32 = 11;
pub const PIDSI_CREATE_DTM: u32 = 12;
pub const PIDSI_LASTSAVE_DTM: u32 = 13;
pub const PIDSI_PAGECOUNT: u32 = 14;
pub const PIDSI_WORDCOUNT: u32 = 15;
pub const PIDSI_CHARCOUNT: u32 = 16;
pub const PIDSI_THUMBNAIL: u32 = 17;
pub const PIDSI_APPNAME: u32 = 18;
pub const PIDSI_DOC_SECURITY: u32 = 19;
pub const PIDDSI_CATEGORY: u32 = 2;
pub const PIDDSI_PRESFORMAT: u32 = 3;
pub const PIDDSI_BYTECOUNT: u32 = 4;
pub const PIDDSI_LINECOUNT: u32 = 5;
pub const PIDDSI_PARCOUNT: u32 = 6;
pub const PIDDSI_SLIDECOUNT: u32 = 7;
pub const PIDDSI_NOTECOUNT: u32 = 8;
pub const PIDDSI_HIDDENCOUNT: u32 = 9;
pub const PIDDSI_MMCLIPCOUNT: u32 = 10;
pub const PIDDSI_SCALE: u32 = 11;
pub const PIDDSI_HEADINGPAIR: u32 = 12;
pub const PIDDSI_DOCPARTS: u32 = 13;
pub const PIDDSI_MANAGER: u32 = 14;
pub const PIDDSI_COMPANY: u32 = 15;
pub const PIDDSI_LINKSDIRTY: u32 = 16;
pub const PIDMSI_EDITOR: u32 = 2;
pub const PIDMSI_SUPPLIER: u32 = 3;
pub const PIDMSI_SOURCE: u32 = 4;
pub const PIDMSI_SEQUENCE_NO: u32 = 5;
pub const PIDMSI_PROJECT: u32 = 6;
pub const PIDMSI_STATUS: u32 = 7;
pub const PIDMSI_OWNER: u32 = 8;
pub const PIDMSI_RATING: u32 = 9;
pub const PIDMSI_PRODUCTION: u32 = 10;
pub const PIDMSI_COPYRIGHT: u32 = 11;
pub const STDOLE_MAJORVERNUM: u32 = 1;
pub const STDOLE_MINORVERNUM: u32 = 0;
pub const STDOLE_LCID: u32 = 0;
pub const STDOLE2_MAJORVERNUM: u32 = 2;
pub const STDOLE2_MINORVERNUM: u32 = 0;
pub const STDOLE2_LCID: u32 = 0;
pub const VARIANT_NOVALUEPROP: u32 = 1;
pub const VARIANT_ALPHABOOL: u32 = 2;
pub const VARIANT_NOUSEROVERRIDE: u32 = 4;
pub const VARIANT_CALENDAR_HIJRI: u32 = 8;
pub const VARIANT_LOCALBOOL: u32 = 16;
pub const VARIANT_CALENDAR_THAI: u32 = 32;
pub const VARIANT_CALENDAR_GREGORIAN: u32 = 64;
pub const VARIANT_USE_NLS: u32 = 128;
pub const LOCALE_USE_NLS: u32 = 268435456;
pub const VTDATEGRE_MAX: u32 = 2958465;
pub const VTDATEGRE_MIN: i32 = -657434;
pub const NUMPRS_LEADING_WHITE: u32 = 1;
pub const NUMPRS_TRAILING_WHITE: u32 = 2;
pub const NUMPRS_LEADING_PLUS: u32 = 4;
pub const NUMPRS_TRAILING_PLUS: u32 = 8;
pub const NUMPRS_LEADING_MINUS: u32 = 16;
pub const NUMPRS_TRAILING_MINUS: u32 = 32;
pub const NUMPRS_HEX_OCT: u32 = 64;
pub const NUMPRS_PARENS: u32 = 128;
pub const NUMPRS_DECIMAL: u32 = 256;
pub const NUMPRS_THOUSANDS: u32 = 512;
pub const NUMPRS_CURRENCY: u32 = 1024;
pub const NUMPRS_EXPONENT: u32 = 2048;
pub const NUMPRS_USE_ALL: u32 = 4096;
pub const NUMPRS_STD: u32 = 8191;
pub const NUMPRS_NEG: u32 = 65536;
pub const NUMPRS_INEXACT: u32 = 131072;
pub const VARCMP_LT: u32 = 0;
pub const VARCMP_EQ: u32 = 1;
pub const VARCMP_GT: u32 = 2;
pub const VARCMP_NULL: u32 = 3;
pub const MEMBERID_NIL: i32 = -1;
pub const ID_DEFAULTINST: i32 = -2;
pub const DISPATCH_METHOD: u32 = 1;
pub const DISPATCH_PROPERTYGET: u32 = 2;
pub const DISPATCH_PROPERTYPUT: u32 = 4;
pub const DISPATCH_PROPERTYPUTREF: u32 = 8;
pub const LOAD_TLB_AS_32BIT: u32 = 32;
pub const LOAD_TLB_AS_64BIT: u32 = 64;
pub const MASK_TO_RESET_TLB_BITS: i32 = -97;
pub const ACTIVEOBJECT_STRONG: u32 = 0;
pub const ACTIVEOBJECT_WEAK: u32 = 1;
pub const OLEIVERB_PRIMARY: u32 = 0;
pub const OLEIVERB_SHOW: i32 = -1;
pub const OLEIVERB_OPEN: i32 = -2;
pub const OLEIVERB_HIDE: i32 = -3;
pub const OLEIVERB_UIACTIVATE: i32 = -4;
pub const OLEIVERB_INPLACEACTIVATE: i32 = -5;
pub const OLEIVERB_DISCARDUNDOSTATE: i32 = -6;
pub const EMBDHLP_INPROC_HANDLER: u32 = 0;
pub const EMBDHLP_INPROC_SERVER: u32 = 1;
pub const EMBDHLP_CREATENOW: u32 = 0;
pub const EMBDHLP_DELAYCREATE: u32 = 65536;
pub const OLECREATE_LEAVERUNNING: u32 = 1;
pub const OFN_READONLY: u32 = 1;
pub const OFN_OVERWRITEPROMPT: u32 = 2;
pub const OFN_HIDEREADONLY: u32 = 4;
pub const OFN_NOCHANGEDIR: u32 = 8;
pub const OFN_SHOWHELP: u32 = 16;
pub const OFN_ENABLEHOOK: u32 = 32;
pub const OFN_ENABLETEMPLATE: u32 = 64;
pub const OFN_ENABLETEMPLATEHANDLE: u32 = 128;
pub const OFN_NOVALIDATE: u32 = 256;
pub const OFN_ALLOWMULTISELECT: u32 = 512;
pub const OFN_EXTENSIONDIFFERENT: u32 = 1024;
pub const OFN_PATHMUSTEXIST: u32 = 2048;
pub const OFN_FILEMUSTEXIST: u32 = 4096;
pub const OFN_CREATEPROMPT: u32 = 8192;
pub const OFN_SHAREAWARE: u32 = 16384;
pub const OFN_NOREADONLYRETURN: u32 = 32768;
pub const OFN_NOTESTFILECREATE: u32 = 65536;
pub const OFN_NONETWORKBUTTON: u32 = 131072;
pub const OFN_NOLONGNAMES: u32 = 262144;
pub const OFN_EXPLORER: u32 = 524288;
pub const OFN_NODEREFERENCELINKS: u32 = 1048576;
pub const OFN_LONGNAMES: u32 = 2097152;
pub const OFN_ENABLEINCLUDENOTIFY: u32 = 4194304;
pub const OFN_ENABLESIZING: u32 = 8388608;
pub const OFN_DONTADDTORECENT: u32 = 33554432;
pub const OFN_FORCESHOWHIDDEN: u32 = 268435456;
pub const OFN_EX_NOPLACESBAR: u32 = 1;
pub const OFN_SHAREFALLTHROUGH: u32 = 2;
pub const OFN_SHARENOWARN: u32 = 1;
pub const OFN_SHAREWARN: u32 = 0;
pub const CDN_FIRST: i32 = -601;
pub const CDN_LAST: i32 = -699;
pub const CDN_INITDONE: i32 = -601;
pub const CDN_SELCHANGE: i32 = -602;
pub const CDN_FOLDERCHANGE: i32 = -603;
pub const CDN_SHAREVIOLATION: i32 = -604;
pub const CDN_HELP: i32 = -605;
pub const CDN_FILEOK: i32 = -606;
pub const CDN_TYPECHANGE: i32 = -607;
pub const CDN_INCLUDEITEM: i32 = -608;
pub const CDM_FIRST: u32 = 1124;
pub const CDM_LAST: u32 = 1224;
pub const CDM_GETSPEC: u32 = 1124;
pub const CDM_GETFILEPATH: u32 = 1125;
pub const CDM_GETFOLDERPATH: u32 = 1126;
pub const CDM_GETFOLDERIDLIST: u32 = 1127;
pub const CDM_SETCONTROLTEXT: u32 = 1128;
pub const CDM_HIDECONTROL: u32 = 1129;
pub const CDM_SETDEFEXT: u32 = 1130;
pub const CC_RGBINIT: u32 = 1;
pub const CC_FULLOPEN: u32 = 2;
pub const CC_PREVENTFULLOPEN: u32 = 4;
pub const CC_SHOWHELP: u32 = 8;
pub const CC_ENABLEHOOK: u32 = 16;
pub const CC_ENABLETEMPLATE: u32 = 32;
pub const CC_ENABLETEMPLATEHANDLE: u32 = 64;
pub const CC_SOLIDCOLOR: u32 = 128;
pub const CC_ANYCOLOR: u32 = 256;
pub const FR_DOWN: u32 = 1;
pub const FR_WHOLEWORD: u32 = 2;
pub const FR_MATCHCASE: u32 = 4;
pub const FR_FINDNEXT: u32 = 8;
pub const FR_REPLACE: u32 = 16;
pub const FR_REPLACEALL: u32 = 32;
pub const FR_DIALOGTERM: u32 = 64;
pub const FR_SHOWHELP: u32 = 128;
pub const FR_ENABLEHOOK: u32 = 256;
pub const FR_ENABLETEMPLATE: u32 = 512;
pub const FR_NOUPDOWN: u32 = 1024;
pub const FR_NOMATCHCASE: u32 = 2048;
pub const FR_NOWHOLEWORD: u32 = 4096;
pub const FR_ENABLETEMPLATEHANDLE: u32 = 8192;
pub const FR_HIDEUPDOWN: u32 = 16384;
pub const FR_HIDEMATCHCASE: u32 = 32768;
pub const FR_HIDEWHOLEWORD: u32 = 65536;
pub const FR_RAW: u32 = 131072;
pub const FR_SHOWWRAPAROUND: u32 = 262144;
pub const FR_NOWRAPAROUND: u32 = 524288;
pub const FR_WRAPAROUND: u32 = 1048576;
pub const FR_MATCHDIAC: u32 = 536870912;
pub const FR_MATCHKASHIDA: u32 = 1073741824;
pub const FR_MATCHALEFHAMZA: u32 = 2147483648;
pub const FRM_FIRST: u32 = 1124;
pub const FRM_LAST: u32 = 1224;
pub const FRM_SETOPERATIONRESULT: u32 = 1124;
pub const FRM_SETOPERATIONRESULTTEXT: u32 = 1125;
pub const CF_SCREENFONTS: u32 = 1;
pub const CF_PRINTERFONTS: u32 = 2;
pub const CF_BOTH: u32 = 3;
pub const CF_SHOWHELP: u32 = 4;
pub const CF_ENABLEHOOK: u32 = 8;
pub const CF_ENABLETEMPLATE: u32 = 16;
pub const CF_ENABLETEMPLATEHANDLE: u32 = 32;
pub const CF_INITTOLOGFONTSTRUCT: u32 = 64;
pub const CF_USESTYLE: u32 = 128;
pub const CF_EFFECTS: u32 = 256;
pub const CF_APPLY: u32 = 512;
pub const CF_ANSIONLY: u32 = 1024;
pub const CF_SCRIPTSONLY: u32 = 1024;
pub const CF_NOVECTORFONTS: u32 = 2048;
pub const CF_NOOEMFONTS: u32 = 2048;
pub const CF_NOSIMULATIONS: u32 = 4096;
pub const CF_LIMITSIZE: u32 = 8192;
pub const CF_FIXEDPITCHONLY: u32 = 16384;
pub const CF_WYSIWYG: u32 = 32768;
pub const CF_FORCEFONTEXIST: u32 = 65536;
pub const CF_SCALABLEONLY: u32 = 131072;
pub const CF_TTONLY: u32 = 262144;
pub const CF_NOFACESEL: u32 = 524288;
pub const CF_NOSTYLESEL: u32 = 1048576;
pub const CF_NOSIZESEL: u32 = 2097152;
pub const CF_SELECTSCRIPT: u32 = 4194304;
pub const CF_NOSCRIPTSEL: u32 = 8388608;
pub const CF_NOVERTFONTS: u32 = 16777216;
pub const CF_INACTIVEFONTS: u32 = 33554432;
pub const SIMULATED_FONTTYPE: u32 = 32768;
pub const PRINTER_FONTTYPE: u32 = 16384;
pub const SCREEN_FONTTYPE: u32 = 8192;
pub const BOLD_FONTTYPE: u32 = 256;
pub const ITALIC_FONTTYPE: u32 = 512;
pub const REGULAR_FONTTYPE: u32 = 1024;
pub const PS_OPENTYPE_FONTTYPE: u32 = 65536;
pub const TT_OPENTYPE_FONTTYPE: u32 = 131072;
pub const TYPE1_FONTTYPE: u32 = 262144;
pub const SYMBOL_FONTTYPE: u32 = 524288;
pub const WM_CHOOSEFONT_GETLOGFONT: u32 = 1025;
pub const WM_CHOOSEFONT_SETLOGFONT: u32 = 1125;
pub const WM_CHOOSEFONT_SETFLAGS: u32 = 1126;
pub const LBSELCHSTRINGA: &'static [u8; 27usize] = b"commdlg_LBSelChangedNotify\0";
pub const SHAREVISTRINGA: &'static [u8; 23usize] = b"commdlg_ShareViolation\0";
pub const FILEOKSTRINGA: &'static [u8; 19usize] = b"commdlg_FileNameOK\0";
pub const COLOROKSTRINGA: &'static [u8; 16usize] = b"commdlg_ColorOK\0";
pub const SETRGBSTRINGA: &'static [u8; 20usize] = b"commdlg_SetRGBColor\0";
pub const HELPMSGSTRINGA: &'static [u8; 13usize] = b"commdlg_help\0";
pub const FINDMSGSTRINGA: &'static [u8; 20usize] = b"commdlg_FindReplace\0";
pub const LBSELCHSTRINGW: &'static [u8; 27usize] = b"commdlg_LBSelChangedNotify\0";
pub const SHAREVISTRINGW: &'static [u8; 23usize] = b"commdlg_ShareViolation\0";
pub const FILEOKSTRINGW: &'static [u8; 19usize] = b"commdlg_FileNameOK\0";
pub const COLOROKSTRINGW: &'static [u8; 16usize] = b"commdlg_ColorOK\0";
pub const SETRGBSTRINGW: &'static [u8; 20usize] = b"commdlg_SetRGBColor\0";
pub const HELPMSGSTRINGW: &'static [u8; 13usize] = b"commdlg_help\0";
pub const FINDMSGSTRINGW: &'static [u8; 20usize] = b"commdlg_FindReplace\0";
pub const LBSELCHSTRING: &'static [u8; 27usize] = b"commdlg_LBSelChangedNotify\0";
pub const SHAREVISTRING: &'static [u8; 23usize] = b"commdlg_ShareViolation\0";
pub const FILEOKSTRING: &'static [u8; 19usize] = b"commdlg_FileNameOK\0";
pub const COLOROKSTRING: &'static [u8; 16usize] = b"commdlg_ColorOK\0";
pub const SETRGBSTRING: &'static [u8; 20usize] = b"commdlg_SetRGBColor\0";
pub const HELPMSGSTRING: &'static [u8; 13usize] = b"commdlg_help\0";
pub const FINDMSGSTRING: &'static [u8; 20usize] = b"commdlg_FindReplace\0";
pub const CD_LBSELNOITEMS: i32 = -1;
pub const CD_LBSELCHANGE: u32 = 0;
pub const CD_LBSELSUB: u32 = 1;
pub const CD_LBSELADD: u32 = 2;
pub const PD_ALLPAGES: u32 = 0;
pub const PD_SELECTION: u32 = 1;
pub const PD_PAGENUMS: u32 = 2;
pub const PD_NOSELECTION: u32 = 4;
pub const PD_NOPAGENUMS: u32 = 8;
pub const PD_COLLATE: u32 = 16;
pub const PD_PRINTTOFILE: u32 = 32;
pub const PD_PRINTSETUP: u32 = 64;
pub const PD_NOWARNING: u32 = 128;
pub const PD_RETURNDC: u32 = 256;
pub const PD_RETURNIC: u32 = 512;
pub const PD_RETURNDEFAULT: u32 = 1024;
pub const PD_SHOWHELP: u32 = 2048;
pub const PD_ENABLEPRINTHOOK: u32 = 4096;
pub const PD_ENABLESETUPHOOK: u32 = 8192;
pub const PD_ENABLEPRINTTEMPLATE: u32 = 16384;
pub const PD_ENABLESETUPTEMPLATE: u32 = 32768;
pub const PD_ENABLEPRINTTEMPLATEHANDLE: u32 = 65536;
pub const PD_ENABLESETUPTEMPLATEHANDLE: u32 = 131072;
pub const PD_USEDEVMODECOPIES: u32 = 262144;
pub const PD_USEDEVMODECOPIESANDCOLLATE: u32 = 262144;
pub const PD_DISABLEPRINTTOFILE: u32 = 524288;
pub const PD_HIDEPRINTTOFILE: u32 = 1048576;
pub const PD_NONETWORKBUTTON: u32 = 2097152;
pub const PD_CURRENTPAGE: u32 = 4194304;
pub const PD_NOCURRENTPAGE: u32 = 8388608;
pub const PD_EXCLUSIONFLAGS: u32 = 16777216;
pub const PD_USELARGETEMPLATE: u32 = 268435456;
pub const PD_EXCL_COPIESANDCOLLATE: u32 = 33024;
pub const START_PAGE_GENERAL: u32 = 4294967295;
pub const PD_RESULT_CANCEL: u32 = 0;
pub const PD_RESULT_PRINT: u32 = 1;
pub const PD_RESULT_APPLY: u32 = 2;
pub const DN_DEFAULTPRN: u32 = 1;
pub const WM_PSD_PAGESETUPDLG: u32 = 1024;
pub const WM_PSD_FULLPAGERECT: u32 = 1025;
pub const WM_PSD_MINMARGINRECT: u32 = 1026;
pub const WM_PSD_MARGINRECT: u32 = 1027;
pub const WM_PSD_GREEKTEXTRECT: u32 = 1028;
pub const WM_PSD_ENVSTAMPRECT: u32 = 1029;
pub const WM_PSD_YAFULLPAGERECT: u32 = 1030;
pub const PSD_DEFAULTMINMARGINS: u32 = 0;
pub const PSD_INWININIINTLMEASURE: u32 = 0;
pub const PSD_MINMARGINS: u32 = 1;
pub const PSD_MARGINS: u32 = 2;
pub const PSD_INTHOUSANDTHSOFINCHES: u32 = 4;
pub const PSD_INHUNDREDTHSOFMILLIMETERS: u32 = 8;
pub const PSD_DISABLEMARGINS: u32 = 16;
pub const PSD_DISABLEPRINTER: u32 = 32;
pub const PSD_NOWARNING: u32 = 128;
pub const PSD_DISABLEORIENTATION: u32 = 256;
pub const PSD_RETURNDEFAULT: u32 = 1024;
pub const PSD_DISABLEPAPER: u32 = 512;
pub const PSD_SHOWHELP: u32 = 2048;
pub const PSD_ENABLEPAGESETUPHOOK: u32 = 8192;
pub const PSD_ENABLEPAGESETUPTEMPLATE: u32 = 32768;
pub const PSD_ENABLEPAGESETUPTEMPLATEHANDLE: u32 = 131072;
pub const PSD_ENABLEPAGEPAINTHOOK: u32 = 262144;
pub const PSD_DISABLEPAGEPAINTING: u32 = 524288;
pub const PSD_NONETWORKBUTTON: u32 = 2097152;
pub const _STRALIGN_USE_SECURE_CRT: u32 = 1;
pub const SERVICES_ACTIVE_DATABASEW: &'static [u8; 15usize] = b"ServicesActive\0";
pub const SERVICES_FAILED_DATABASEW: &'static [u8; 15usize] = b"ServicesFailed\0";
pub const SERVICES_ACTIVE_DATABASEA: &'static [u8; 15usize] = b"ServicesActive\0";
pub const SERVICES_FAILED_DATABASEA: &'static [u8; 15usize] = b"ServicesFailed\0";
pub const SC_GROUP_IDENTIFIERW: u8 = 43u8;
pub const SC_GROUP_IDENTIFIERA: u8 = 43u8;
pub const SERVICES_ACTIVE_DATABASE: &'static [u8; 15usize] = b"ServicesActive\0";
pub const SERVICES_FAILED_DATABASE: &'static [u8; 15usize] = b"ServicesFailed\0";
pub const SC_GROUP_IDENTIFIER: u8 = 43u8;
pub const SERVICE_NO_CHANGE: u32 = 4294967295;
pub const SERVICE_ACTIVE: u32 = 1;
pub const SERVICE_INACTIVE: u32 = 2;
pub const SERVICE_STATE_ALL: u32 = 3;
pub const SERVICE_CONTROL_STOP: u32 = 1;
pub const SERVICE_CONTROL_PAUSE: u32 = 2;
pub const SERVICE_CONTROL_CONTINUE: u32 = 3;
pub const SERVICE_CONTROL_INTERROGATE: u32 = 4;
pub const SERVICE_CONTROL_SHUTDOWN: u32 = 5;
pub const SERVICE_CONTROL_PARAMCHANGE: u32 = 6;
pub const SERVICE_CONTROL_NETBINDADD: u32 = 7;
pub const SERVICE_CONTROL_NETBINDREMOVE: u32 = 8;
pub const SERVICE_CONTROL_NETBINDENABLE: u32 = 9;
pub const SERVICE_CONTROL_NETBINDDISABLE: u32 = 10;
pub const SERVICE_CONTROL_DEVICEEVENT: u32 = 11;
pub const SERVICE_CONTROL_HARDWAREPROFILECHANGE: u32 = 12;
pub const SERVICE_CONTROL_POWEREVENT: u32 = 13;
pub const SERVICE_CONTROL_SESSIONCHANGE: u32 = 14;
pub const SERVICE_CONTROL_PRESHUTDOWN: u32 = 15;
pub const SERVICE_CONTROL_TIMECHANGE: u32 = 16;
pub const SERVICE_CONTROL_TRIGGEREVENT: u32 = 32;
pub const SERVICE_CONTROL_LOWRESOURCES: u32 = 96;
pub const SERVICE_CONTROL_SYSTEMLOWRESOURCES: u32 = 97;
pub const SERVICE_STOPPED: u32 = 1;
pub const SERVICE_START_PENDING: u32 = 2;
pub const SERVICE_STOP_PENDING: u32 = 3;
pub const SERVICE_RUNNING: u32 = 4;
pub const SERVICE_CONTINUE_PENDING: u32 = 5;
pub const SERVICE_PAUSE_PENDING: u32 = 6;
pub const SERVICE_PAUSED: u32 = 7;
pub const SERVICE_ACCEPT_STOP: u32 = 1;
pub const SERVICE_ACCEPT_PAUSE_CONTINUE: u32 = 2;
pub const SERVICE_ACCEPT_SHUTDOWN: u32 = 4;
pub const SERVICE_ACCEPT_PARAMCHANGE: u32 = 8;
pub const SERVICE_ACCEPT_NETBINDCHANGE: u32 = 16;
pub const SERVICE_ACCEPT_HARDWAREPROFILECHANGE: u32 = 32;
pub const SERVICE_ACCEPT_POWEREVENT: u32 = 64;
pub const SERVICE_ACCEPT_SESSIONCHANGE: u32 = 128;
pub const SERVICE_ACCEPT_PRESHUTDOWN: u32 = 256;
pub const SERVICE_ACCEPT_TIMECHANGE: u32 = 512;
pub const SERVICE_ACCEPT_TRIGGEREVENT: u32 = 1024;
pub const SERVICE_ACCEPT_USER_LOGOFF: u32 = 2048;
pub const SERVICE_ACCEPT_LOWRESOURCES: u32 = 8192;
pub const SERVICE_ACCEPT_SYSTEMLOWRESOURCES: u32 = 16384;
pub const SC_MANAGER_CONNECT: u32 = 1;
pub const SC_MANAGER_CREATE_SERVICE: u32 = 2;
pub const SC_MANAGER_ENUMERATE_SERVICE: u32 = 4;
pub const SC_MANAGER_LOCK: u32 = 8;
pub const SC_MANAGER_QUERY_LOCK_STATUS: u32 = 16;
pub const SC_MANAGER_MODIFY_BOOT_CONFIG: u32 = 32;
pub const SC_MANAGER_ALL_ACCESS: u32 = 983103;
pub const SERVICE_QUERY_CONFIG: u32 = 1;
pub const SERVICE_CHANGE_CONFIG: u32 = 2;
pub const SERVICE_QUERY_STATUS: u32 = 4;
pub const SERVICE_ENUMERATE_DEPENDENTS: u32 = 8;
pub const SERVICE_START: u32 = 16;
pub const SERVICE_STOP: u32 = 32;
pub const SERVICE_PAUSE_CONTINUE: u32 = 64;
pub const SERVICE_INTERROGATE: u32 = 128;
pub const SERVICE_USER_DEFINED_CONTROL: u32 = 256;
pub const SERVICE_ALL_ACCESS: u32 = 983551;
pub const SERVICE_RUNS_IN_SYSTEM_PROCESS: u32 = 1;
pub const SERVICE_CONFIG_DESCRIPTION: u32 = 1;
pub const SERVICE_CONFIG_FAILURE_ACTIONS: u32 = 2;
pub const SERVICE_CONFIG_DELAYED_AUTO_START_INFO: u32 = 3;
pub const SERVICE_CONFIG_FAILURE_ACTIONS_FLAG: u32 = 4;
pub const SERVICE_CONFIG_SERVICE_SID_INFO: u32 = 5;
pub const SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO: u32 = 6;
pub const SERVICE_CONFIG_PRESHUTDOWN_INFO: u32 = 7;
pub const SERVICE_CONFIG_TRIGGER_INFO: u32 = 8;
pub const SERVICE_CONFIG_PREFERRED_NODE: u32 = 9;
pub const SERVICE_CONFIG_LAUNCH_PROTECTED: u32 = 12;
pub const SERVICE_NOTIFY_STATUS_CHANGE_1: u32 = 1;
pub const SERVICE_NOTIFY_STATUS_CHANGE_2: u32 = 2;
pub const SERVICE_NOTIFY_STATUS_CHANGE: u32 = 2;
pub const SERVICE_NOTIFY_STOPPED: u32 = 1;
pub const SERVICE_NOTIFY_START_PENDING: u32 = 2;
pub const SERVICE_NOTIFY_STOP_PENDING: u32 = 4;
pub const SERVICE_NOTIFY_RUNNING: u32 = 8;
pub const SERVICE_NOTIFY_CONTINUE_PENDING: u32 = 16;
pub const SERVICE_NOTIFY_PAUSE_PENDING: u32 = 32;
pub const SERVICE_NOTIFY_PAUSED: u32 = 64;
pub const SERVICE_NOTIFY_CREATED: u32 = 128;
pub const SERVICE_NOTIFY_DELETED: u32 = 256;
pub const SERVICE_NOTIFY_DELETE_PENDING: u32 = 512;
pub const SERVICE_STOP_REASON_FLAG_MIN: u32 = 0;
pub const SERVICE_STOP_REASON_FLAG_UNPLANNED: u32 = 268435456;
pub const SERVICE_STOP_REASON_FLAG_CUSTOM: u32 = 536870912;
pub const SERVICE_STOP_REASON_FLAG_PLANNED: u32 = 1073741824;
pub const SERVICE_STOP_REASON_FLAG_MAX: u32 = 2147483648;
pub const SERVICE_STOP_REASON_MAJOR_MIN: u32 = 0;
pub const SERVICE_STOP_REASON_MAJOR_OTHER: u32 = 65536;
pub const SERVICE_STOP_REASON_MAJOR_HARDWARE: u32 = 131072;
pub const SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM: u32 = 196608;
pub const SERVICE_STOP_REASON_MAJOR_SOFTWARE: u32 = 262144;
pub const SERVICE_STOP_REASON_MAJOR_APPLICATION: u32 = 327680;
pub const SERVICE_STOP_REASON_MAJOR_NONE: u32 = 393216;
pub const SERVICE_STOP_REASON_MAJOR_MAX: u32 = 458752;
pub const SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM: u32 = 4194304;
pub const SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM: u32 = 16711680;
pub const SERVICE_STOP_REASON_MINOR_MIN: u32 = 0;
pub const SERVICE_STOP_REASON_MINOR_OTHER: u32 = 1;
pub const SERVICE_STOP_REASON_MINOR_MAINTENANCE: u32 = 2;
pub const SERVICE_STOP_REASON_MINOR_INSTALLATION: u32 = 3;
pub const SERVICE_STOP_REASON_MINOR_UPGRADE: u32 = 4;
pub const SERVICE_STOP_REASON_MINOR_RECONFIG: u32 = 5;
pub const SERVICE_STOP_REASON_MINOR_HUNG: u32 = 6;
pub const SERVICE_STOP_REASON_MINOR_UNSTABLE: u32 = 7;
pub const SERVICE_STOP_REASON_MINOR_DISK: u32 = 8;
pub const SERVICE_STOP_REASON_MINOR_NETWORKCARD: u32 = 9;
pub const SERVICE_STOP_REASON_MINOR_ENVIRONMENT: u32 = 10;
pub const SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER: u32 = 11;
pub const SERVICE_STOP_REASON_MINOR_OTHERDRIVER: u32 = 12;
pub const SERVICE_STOP_REASON_MINOR_SERVICEPACK: u32 = 13;
pub const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE: u32 = 14;
pub const SERVICE_STOP_REASON_MINOR_SECURITYFIX: u32 = 15;
pub const SERVICE_STOP_REASON_MINOR_SECURITY: u32 = 16;
pub const SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY: u32 = 17;
pub const SERVICE_STOP_REASON_MINOR_WMI: u32 = 18;
pub const SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL: u32 = 19;
pub const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL: u32 = 20;
pub const SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL: u32 = 21;
pub const SERVICE_STOP_REASON_MINOR_MMC: u32 = 22;
pub const SERVICE_STOP_REASON_MINOR_NONE: u32 = 23;
pub const SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT: u32 = 24;
pub const SERVICE_STOP_REASON_MINOR_MAX: u32 = 25;
pub const SERVICE_STOP_REASON_MINOR_MIN_CUSTOM: u32 = 256;
pub const SERVICE_STOP_REASON_MINOR_MAX_CUSTOM: u32 = 65535;
pub const SERVICE_CONTROL_STATUS_REASON_INFO: u32 = 1;
pub const SERVICE_SID_TYPE_NONE: u32 = 0;
pub const SERVICE_SID_TYPE_UNRESTRICTED: u32 = 1;
pub const SERVICE_SID_TYPE_RESTRICTED: u32 = 3;
pub const SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL: u32 = 1;
pub const SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY: u32 = 2;
pub const SERVICE_TRIGGER_TYPE_DOMAIN_JOIN: u32 = 3;
pub const SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT: u32 = 4;
pub const SERVICE_TRIGGER_TYPE_GROUP_POLICY: u32 = 5;
pub const SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT: u32 = 6;
pub const SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE: u32 = 7;
pub const SERVICE_TRIGGER_TYPE_CUSTOM: u32 = 20;
pub const SERVICE_TRIGGER_TYPE_AGGREGATE: u32 = 30;
pub const SERVICE_TRIGGER_DATA_TYPE_BINARY: u32 = 1;
pub const SERVICE_TRIGGER_DATA_TYPE_STRING: u32 = 2;
pub const SERVICE_TRIGGER_DATA_TYPE_LEVEL: u32 = 3;
pub const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY: u32 = 4;
pub const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL: u32 = 5;
pub const SERVICE_START_REASON_DEMAND: u32 = 1;
pub const SERVICE_START_REASON_AUTO: u32 = 2;
pub const SERVICE_START_REASON_TRIGGER: u32 = 4;
pub const SERVICE_START_REASON_RESTART_ON_FAILURE: u32 = 8;
pub const SERVICE_START_REASON_DELAYEDAUTO: u32 = 16;
pub const SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON: u32 = 1;
pub const SERVICE_LAUNCH_PROTECTED_NONE: u32 = 0;
pub const SERVICE_LAUNCH_PROTECTED_WINDOWS: u32 = 1;
pub const SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT: u32 = 2;
pub const SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT: u32 = 3;
pub const SERVICE_TRIGGER_ACTION_SERVICE_START: u32 = 1;
pub const SERVICE_TRIGGER_ACTION_SERVICE_STOP: u32 = 2;
pub const SERVICE_TRIGGER_STARTED_ARGUMENT: &'static [u8; 15usize] = b"TriggerStarted\0";
pub const SC_AGGREGATE_STORAGE_KEY: &'static [u8; 57usize] =
    b"System\\CurrentControlSet\\Control\\ServiceAggregatedEvents\0";
pub const DIALOPTION_BILLING: u32 = 64;
pub const DIALOPTION_QUIET: u32 = 128;
pub const DIALOPTION_DIALTONE: u32 = 256;
pub const MDMVOLFLAG_LOW: u32 = 1;
pub const MDMVOLFLAG_MEDIUM: u32 = 2;
pub const MDMVOLFLAG_HIGH: u32 = 4;
pub const MDMVOL_LOW: u32 = 0;
pub const MDMVOL_MEDIUM: u32 = 1;
pub const MDMVOL_HIGH: u32 = 2;
pub const MDMSPKRFLAG_OFF: u32 = 1;
pub const MDMSPKRFLAG_DIAL: u32 = 2;
pub const MDMSPKRFLAG_ON: u32 = 4;
pub const MDMSPKRFLAG_CALLSETUP: u32 = 8;
pub const MDMSPKR_OFF: u32 = 0;
pub const MDMSPKR_DIAL: u32 = 1;
pub const MDMSPKR_ON: u32 = 2;
pub const MDMSPKR_CALLSETUP: u32 = 3;
pub const MDM_COMPRESSION: u32 = 1;
pub const MDM_ERROR_CONTROL: u32 = 2;
pub const MDM_FORCED_EC: u32 = 4;
pub const MDM_CELLULAR: u32 = 8;
pub const MDM_FLOWCONTROL_HARD: u32 = 16;
pub const MDM_FLOWCONTROL_SOFT: u32 = 32;
pub const MDM_CCITT_OVERRIDE: u32 = 64;
pub const MDM_SPEED_ADJUST: u32 = 128;
pub const MDM_TONE_DIAL: u32 = 256;
pub const MDM_BLIND_DIAL: u32 = 512;
pub const MDM_V23_OVERRIDE: u32 = 1024;
pub const MDM_DIAGNOSTICS: u32 = 2048;
pub const MDM_MASK_BEARERMODE: u32 = 61440;
pub const MDM_SHIFT_BEARERMODE: u32 = 12;
pub const MDM_MASK_PROTOCOLID: u32 = 983040;
pub const MDM_SHIFT_PROTOCOLID: u32 = 16;
pub const MDM_MASK_PROTOCOLDATA: u32 = 267386880;
pub const MDM_SHIFT_PROTOCOLDATA: u32 = 20;
pub const MDM_MASK_PROTOCOLINFO: u32 = 268369920;
pub const MDM_SHIFT_PROTOCOLINFO: u32 = 16;
pub const MDM_MASK_EXTENDEDINFO: u32 = 268431360;
pub const MDM_SHIFT_EXTENDEDINFO: u32 = 12;
pub const MDM_BEARERMODE_ANALOG: u32 = 0;
pub const MDM_BEARERMODE_ISDN: u32 = 1;
pub const MDM_BEARERMODE_GSM: u32 = 2;
pub const MDM_PROTOCOLID_DEFAULT: u32 = 0;
pub const MDM_PROTOCOLID_HDLCPPP: u32 = 1;
pub const MDM_PROTOCOLID_V128: u32 = 2;
pub const MDM_PROTOCOLID_X75: u32 = 3;
pub const MDM_PROTOCOLID_V110: u32 = 4;
pub const MDM_PROTOCOLID_V120: u32 = 5;
pub const MDM_PROTOCOLID_AUTO: u32 = 6;
pub const MDM_PROTOCOLID_ANALOG: u32 = 7;
pub const MDM_PROTOCOLID_GPRS: u32 = 8;
pub const MDM_PROTOCOLID_PIAFS: u32 = 9;
pub const MDM_SHIFT_HDLCPPP_SPEED: u32 = 0;
pub const MDM_MASK_HDLCPPP_SPEED: u32 = 7;
pub const MDM_HDLCPPP_SPEED_DEFAULT: u32 = 0;
pub const MDM_HDLCPPP_SPEED_64K: u32 = 1;
pub const MDM_HDLCPPP_SPEED_56K: u32 = 2;
pub const MDM_SHIFT_HDLCPPP_AUTH: u32 = 3;
pub const MDM_MASK_HDLCPPP_AUTH: u32 = 56;
pub const MDM_HDLCPPP_AUTH_DEFAULT: u32 = 0;
pub const MDM_HDLCPPP_AUTH_NONE: u32 = 1;
pub const MDM_HDLCPPP_AUTH_PAP: u32 = 2;
pub const MDM_HDLCPPP_AUTH_CHAP: u32 = 3;
pub const MDM_HDLCPPP_AUTH_MSCHAP: u32 = 4;
pub const MDM_SHIFT_HDLCPPP_ML: u32 = 6;
pub const MDM_MASK_HDLCPPP_ML: u32 = 192;
pub const MDM_HDLCPPP_ML_DEFAULT: u32 = 0;
pub const MDM_HDLCPPP_ML_NONE: u32 = 1;
pub const MDM_HDLCPPP_ML_2: u32 = 2;
pub const MDM_SHIFT_V120_SPEED: u32 = 0;
pub const MDM_MASK_V120_SPEED: u32 = 7;
pub const MDM_V120_SPEED_DEFAULT: u32 = 0;
pub const MDM_V120_SPEED_64K: u32 = 1;
pub const MDM_V120_SPEED_56K: u32 = 2;
pub const MDM_SHIFT_V120_ML: u32 = 6;
pub const MDM_MASK_V120_ML: u32 = 192;
pub const MDM_V120_ML_DEFAULT: u32 = 0;
pub const MDM_V120_ML_NONE: u32 = 1;
pub const MDM_V120_ML_2: u32 = 2;
pub const MDM_SHIFT_X75_DATA: u32 = 0;
pub const MDM_MASK_X75_DATA: u32 = 7;
pub const MDM_X75_DATA_DEFAULT: u32 = 0;
pub const MDM_X75_DATA_64K: u32 = 1;
pub const MDM_X75_DATA_128K: u32 = 2;
pub const MDM_X75_DATA_T_70: u32 = 3;
pub const MDM_X75_DATA_BTX: u32 = 4;
pub const MDM_SHIFT_V110_SPEED: u32 = 0;
pub const MDM_MASK_V110_SPEED: u32 = 15;
pub const MDM_V110_SPEED_DEFAULT: u32 = 0;
pub const MDM_V110_SPEED_1DOT2K: u32 = 1;
pub const MDM_V110_SPEED_2DOT4K: u32 = 2;
pub const MDM_V110_SPEED_4DOT8K: u32 = 3;
pub const MDM_V110_SPEED_9DOT6K: u32 = 4;
pub const MDM_V110_SPEED_12DOT0K: u32 = 5;
pub const MDM_V110_SPEED_14DOT4K: u32 = 6;
pub const MDM_V110_SPEED_19DOT2K: u32 = 7;
pub const MDM_V110_SPEED_28DOT8K: u32 = 8;
pub const MDM_V110_SPEED_38DOT4K: u32 = 9;
pub const MDM_V110_SPEED_57DOT6K: u32 = 10;
pub const MDM_SHIFT_AUTO_SPEED: u32 = 0;
pub const MDM_MASK_AUTO_SPEED: u32 = 7;
pub const MDM_AUTO_SPEED_DEFAULT: u32 = 0;
pub const MDM_SHIFT_AUTO_ML: u32 = 6;
pub const MDM_MASK_AUTO_ML: u32 = 192;
pub const MDM_AUTO_ML_DEFAULT: u32 = 0;
pub const MDM_AUTO_ML_NONE: u32 = 1;
pub const MDM_AUTO_ML_2: u32 = 2;
pub const MDM_ANALOG_RLP_ON: u32 = 0;
pub const MDM_ANALOG_RLP_OFF: u32 = 1;
pub const MDM_ANALOG_V34: u32 = 2;
pub const MDM_PIAFS_INCOMING: u32 = 0;
pub const MDM_PIAFS_OUTGOING: u32 = 1;
pub const STYLE_DESCRIPTION_SIZE: u32 = 32;
pub const IMEMENUITEM_STRING_SIZE: u32 = 80;
pub const IMC_GETCANDIDATEPOS: u32 = 7;
pub const IMC_SETCANDIDATEPOS: u32 = 8;
pub const IMC_GETCOMPOSITIONFONT: u32 = 9;
pub const IMC_SETCOMPOSITIONFONT: u32 = 10;
pub const IMC_GETCOMPOSITIONWINDOW: u32 = 11;
pub const IMC_SETCOMPOSITIONWINDOW: u32 = 12;
pub const IMC_GETSTATUSWINDOWPOS: u32 = 15;
pub const IMC_SETSTATUSWINDOWPOS: u32 = 16;
pub const IMC_CLOSESTATUSWINDOW: u32 = 33;
pub const IMC_OPENSTATUSWINDOW: u32 = 34;
pub const NI_OPENCANDIDATE: u32 = 16;
pub const NI_CLOSECANDIDATE: u32 = 17;
pub const NI_SELECTCANDIDATESTR: u32 = 18;
pub const NI_CHANGECANDIDATELIST: u32 = 19;
pub const NI_FINALIZECONVERSIONRESULT: u32 = 20;
pub const NI_COMPOSITIONSTR: u32 = 21;
pub const NI_SETCANDIDATE_PAGESTART: u32 = 22;
pub const NI_SETCANDIDATE_PAGESIZE: u32 = 23;
pub const NI_IMEMENUSELECTED: u32 = 24;
pub const ISC_SHOWUICANDIDATEWINDOW: u32 = 1;
pub const ISC_SHOWUICOMPOSITIONWINDOW: u32 = 2147483648;
pub const ISC_SHOWUIGUIDELINE: u32 = 1073741824;
pub const ISC_SHOWUIALLCANDIDATEWINDOW: u32 = 15;
pub const ISC_SHOWUIALL: u32 = 3221225487;
pub const CPS_COMPLETE: u32 = 1;
pub const CPS_CONVERT: u32 = 2;
pub const CPS_REVERT: u32 = 3;
pub const CPS_CANCEL: u32 = 4;
pub const MOD_LEFT: u32 = 32768;
pub const MOD_RIGHT: u32 = 16384;
pub const MOD_ON_KEYUP: u32 = 2048;
pub const MOD_IGNORE_ALL_MODIFIER: u32 = 1024;
pub const IME_CHOTKEY_IME_NONIME_TOGGLE: u32 = 16;
pub const IME_CHOTKEY_SHAPE_TOGGLE: u32 = 17;
pub const IME_CHOTKEY_SYMBOL_TOGGLE: u32 = 18;
pub const IME_JHOTKEY_CLOSE_OPEN: u32 = 48;
pub const IME_KHOTKEY_SHAPE_TOGGLE: u32 = 80;
pub const IME_KHOTKEY_HANJACONVERT: u32 = 81;
pub const IME_KHOTKEY_ENGLISH: u32 = 82;
pub const IME_THOTKEY_IME_NONIME_TOGGLE: u32 = 112;
pub const IME_THOTKEY_SHAPE_TOGGLE: u32 = 113;
pub const IME_THOTKEY_SYMBOL_TOGGLE: u32 = 114;
pub const IME_HOTKEY_DSWITCH_FIRST: u32 = 256;
pub const IME_HOTKEY_DSWITCH_LAST: u32 = 287;
pub const IME_HOTKEY_PRIVATE_FIRST: u32 = 512;
pub const IME_ITHOTKEY_RESEND_RESULTSTR: u32 = 512;
pub const IME_ITHOTKEY_PREVIOUS_COMPOSITION: u32 = 513;
pub const IME_ITHOTKEY_UISTYLE_TOGGLE: u32 = 514;
pub const IME_ITHOTKEY_RECONVERTSTRING: u32 = 515;
pub const IME_HOTKEY_PRIVATE_LAST: u32 = 543;
pub const GCS_COMPREADSTR: u32 = 1;
pub const GCS_COMPREADATTR: u32 = 2;
pub const GCS_COMPREADCLAUSE: u32 = 4;
pub const GCS_COMPSTR: u32 = 8;
pub const GCS_COMPATTR: u32 = 16;
pub const GCS_COMPCLAUSE: u32 = 32;
pub const GCS_CURSORPOS: u32 = 128;
pub const GCS_DELTASTART: u32 = 256;
pub const GCS_RESULTREADSTR: u32 = 512;
pub const GCS_RESULTREADCLAUSE: u32 = 1024;
pub const GCS_RESULTSTR: u32 = 2048;
pub const GCS_RESULTCLAUSE: u32 = 4096;
pub const CS_INSERTCHAR: u32 = 8192;
pub const CS_NOMOVECARET: u32 = 16384;
pub const IMEVER_0310: u32 = 196618;
pub const IMEVER_0400: u32 = 262144;
pub const IME_PROP_AT_CARET: u32 = 65536;
pub const IME_PROP_SPECIAL_UI: u32 = 131072;
pub const IME_PROP_CANDLIST_START_FROM_1: u32 = 262144;
pub const IME_PROP_UNICODE: u32 = 524288;
pub const IME_PROP_COMPLETE_ON_UNSELECT: u32 = 1048576;
pub const UI_CAP_2700: u32 = 1;
pub const UI_CAP_ROT90: u32 = 2;
pub const UI_CAP_ROTANY: u32 = 4;
pub const SCS_CAP_COMPSTR: u32 = 1;
pub const SCS_CAP_MAKEREAD: u32 = 2;
pub const SCS_CAP_SETRECONVERTSTRING: u32 = 4;
pub const SELECT_CAP_CONVERSION: u32 = 1;
pub const SELECT_CAP_SENTENCE: u32 = 2;
pub const GGL_LEVEL: u32 = 1;
pub const GGL_INDEX: u32 = 2;
pub const GGL_STRING: u32 = 3;
pub const GGL_PRIVATE: u32 = 4;
pub const GL_LEVEL_NOGUIDELINE: u32 = 0;
pub const GL_LEVEL_FATAL: u32 = 1;
pub const GL_LEVEL_ERROR: u32 = 2;
pub const GL_LEVEL_WARNING: u32 = 3;
pub const GL_LEVEL_INFORMATION: u32 = 4;
pub const GL_ID_UNKNOWN: u32 = 0;
pub const GL_ID_NOMODULE: u32 = 1;
pub const GL_ID_NODICTIONARY: u32 = 16;
pub const GL_ID_CANNOTSAVE: u32 = 17;
pub const GL_ID_NOCONVERT: u32 = 32;
pub const GL_ID_TYPINGERROR: u32 = 33;
pub const GL_ID_TOOMANYSTROKE: u32 = 34;
pub const GL_ID_READINGCONFLICT: u32 = 35;
pub const GL_ID_INPUTREADING: u32 = 36;
pub const GL_ID_INPUTRADICAL: u32 = 37;
pub const GL_ID_INPUTCODE: u32 = 38;
pub const GL_ID_INPUTSYMBOL: u32 = 39;
pub const GL_ID_CHOOSECANDIDATE: u32 = 40;
pub const GL_ID_REVERSECONVERSION: u32 = 41;
pub const GL_ID_PRIVATE_FIRST: u32 = 32768;
pub const GL_ID_PRIVATE_LAST: u32 = 65535;
pub const IGP_PROPERTY: u32 = 4;
pub const IGP_CONVERSION: u32 = 8;
pub const IGP_SENTENCE: u32 = 12;
pub const IGP_UI: u32 = 16;
pub const IGP_SETCOMPSTR: u32 = 20;
pub const IGP_SELECT: u32 = 24;
pub const SCS_SETSTR: u32 = 9;
pub const SCS_CHANGEATTR: u32 = 18;
pub const SCS_CHANGECLAUSE: u32 = 36;
pub const SCS_SETRECONVERTSTRING: u32 = 65536;
pub const SCS_QUERYRECONVERTSTRING: u32 = 131072;
pub const ATTR_INPUT: u32 = 0;
pub const ATTR_TARGET_CONVERTED: u32 = 1;
pub const ATTR_CONVERTED: u32 = 2;
pub const ATTR_TARGET_NOTCONVERTED: u32 = 3;
pub const ATTR_INPUT_ERROR: u32 = 4;
pub const ATTR_FIXEDCONVERTED: u32 = 5;
pub const CFS_DEFAULT: u32 = 0;
pub const CFS_RECT: u32 = 1;
pub const CFS_POINT: u32 = 2;
pub const CFS_FORCE_POSITION: u32 = 32;
pub const CFS_CANDIDATEPOS: u32 = 64;
pub const CFS_EXCLUDE: u32 = 128;
pub const GCL_CONVERSION: u32 = 1;
pub const GCL_REVERSECONVERSION: u32 = 2;
pub const GCL_REVERSE_LENGTH: u32 = 3;
pub const IME_CMODE_ALPHANUMERIC: u32 = 0;
pub const IME_CMODE_NATIVE: u32 = 1;
pub const IME_CMODE_CHINESE: u32 = 1;
pub const IME_CMODE_HANGUL: u32 = 1;
pub const IME_CMODE_JAPANESE: u32 = 1;
pub const IME_CMODE_KATAKANA: u32 = 2;
pub const IME_CMODE_LANGUAGE: u32 = 3;
pub const IME_CMODE_FULLSHAPE: u32 = 8;
pub const IME_CMODE_ROMAN: u32 = 16;
pub const IME_CMODE_CHARCODE: u32 = 32;
pub const IME_CMODE_HANJACONVERT: u32 = 64;
pub const IME_CMODE_NATIVESYMBOL: u32 = 128;
pub const IME_CMODE_HANGEUL: u32 = 1;
pub const IME_CMODE_SOFTKBD: u32 = 128;
pub const IME_CMODE_NOCONVERSION: u32 = 256;
pub const IME_CMODE_EUDC: u32 = 512;
pub const IME_CMODE_SYMBOL: u32 = 1024;
pub const IME_CMODE_FIXED: u32 = 2048;
pub const IME_CMODE_RESERVED: u32 = 4026531840;
pub const IME_SMODE_NONE: u32 = 0;
pub const IME_SMODE_PLAURALCLAUSE: u32 = 1;
pub const IME_SMODE_SINGLECONVERT: u32 = 2;
pub const IME_SMODE_AUTOMATIC: u32 = 4;
pub const IME_SMODE_PHRASEPREDICT: u32 = 8;
pub const IME_SMODE_CONVERSATION: u32 = 16;
pub const IME_SMODE_RESERVED: u32 = 61440;
pub const IME_CAND_UNKNOWN: u32 = 0;
pub const IME_CAND_READ: u32 = 1;
pub const IME_CAND_CODE: u32 = 2;
pub const IME_CAND_MEANING: u32 = 3;
pub const IME_CAND_RADICAL: u32 = 4;
pub const IME_CAND_STROKE: u32 = 5;
pub const IMN_CLOSESTATUSWINDOW: u32 = 1;
pub const IMN_OPENSTATUSWINDOW: u32 = 2;
pub const IMN_CHANGECANDIDATE: u32 = 3;
pub const IMN_CLOSECANDIDATE: u32 = 4;
pub const IMN_OPENCANDIDATE: u32 = 5;
pub const IMN_SETCONVERSIONMODE: u32 = 6;
pub const IMN_SETSENTENCEMODE: u32 = 7;
pub const IMN_SETOPENSTATUS: u32 = 8;
pub const IMN_SETCANDIDATEPOS: u32 = 9;
pub const IMN_SETCOMPOSITIONFONT: u32 = 10;
pub const IMN_SETCOMPOSITIONWINDOW: u32 = 11;
pub const IMN_SETSTATUSWINDOWPOS: u32 = 12;
pub const IMN_GUIDELINE: u32 = 13;
pub const IMN_PRIVATE: u32 = 14;
pub const IMR_COMPOSITIONWINDOW: u32 = 1;
pub const IMR_CANDIDATEWINDOW: u32 = 2;
pub const IMR_COMPOSITIONFONT: u32 = 3;
pub const IMR_RECONVERTSTRING: u32 = 4;
pub const IMR_CONFIRMRECONVERTSTRING: u32 = 5;
pub const IMR_QUERYCHARPOSITION: u32 = 6;
pub const IMR_DOCUMENTFEED: u32 = 7;
pub const IMM_ERROR_NODATA: i32 = -1;
pub const IMM_ERROR_GENERAL: i32 = -2;
pub const IME_CONFIG_GENERAL: u32 = 1;
pub const IME_CONFIG_REGISTERWORD: u32 = 2;
pub const IME_CONFIG_SELECTDICTIONARY: u32 = 3;
pub const IME_ESC_QUERY_SUPPORT: u32 = 3;
pub const IME_ESC_RESERVED_FIRST: u32 = 4;
pub const IME_ESC_RESERVED_LAST: u32 = 2047;
pub const IME_ESC_PRIVATE_FIRST: u32 = 2048;
pub const IME_ESC_PRIVATE_LAST: u32 = 4095;
pub const IME_ESC_SEQUENCE_TO_INTERNAL: u32 = 4097;
pub const IME_ESC_GET_EUDC_DICTIONARY: u32 = 4099;
pub const IME_ESC_SET_EUDC_DICTIONARY: u32 = 4100;
pub const IME_ESC_MAX_KEY: u32 = 4101;
pub const IME_ESC_IME_NAME: u32 = 4102;
pub const IME_ESC_SYNC_HOTKEY: u32 = 4103;
pub const IME_ESC_HANJA_MODE: u32 = 4104;
pub const IME_ESC_AUTOMATA: u32 = 4105;
pub const IME_ESC_PRIVATE_HOTKEY: u32 = 4106;
pub const IME_ESC_GETHELPFILENAME: u32 = 4107;
pub const IME_REGWORD_STYLE_EUDC: u32 = 1;
pub const IME_REGWORD_STYLE_USER_FIRST: u32 = 2147483648;
pub const IME_REGWORD_STYLE_USER_LAST: u32 = 4294967295;
pub const IACE_CHILDREN: u32 = 1;
pub const IACE_DEFAULT: u32 = 16;
pub const IACE_IGNORENOCONTEXT: u32 = 32;
pub const IGIMIF_RIGHTMENU: u32 = 1;
pub const IGIMII_CMODE: u32 = 1;
pub const IGIMII_SMODE: u32 = 2;
pub const IGIMII_CONFIGURE: u32 = 4;
pub const IGIMII_TOOLS: u32 = 8;
pub const IGIMII_HELP: u32 = 16;
pub const IGIMII_OTHER: u32 = 32;
pub const IGIMII_INPUTTOOLS: u32 = 64;
pub const IMFT_RADIOCHECK: u32 = 1;
pub const IMFT_SEPARATOR: u32 = 2;
pub const IMFT_SUBMENU: u32 = 4;
pub const IMFS_GRAYED: u32 = 3;
pub const IMFS_DISABLED: u32 = 3;
pub const IMFS_CHECKED: u32 = 8;
pub const IMFS_HILITE: u32 = 128;
pub const IMFS_ENABLED: u32 = 0;
pub const IMFS_UNCHECKED: u32 = 0;
pub const IMFS_UNHILITE: u32 = 0;
pub const IMFS_DEFAULT: u32 = 4096;
pub const SOFTKEYBOARD_TYPE_T1: u32 = 1;
pub const SOFTKEYBOARD_TYPE_C1: u32 = 2;
pub const kNullCursorHandle: u32 = 0;
pub const kNullEventHandle: u32 = 0;
pub const kNullWindowHandle: u32 = 0;
pub const IDR_UASTYLE_HTML_CSS: u32 = 25500;
pub const IDR_UASTYLE_QUIRKS_CSS: u32 = 25501;
pub const IDR_UASTYLE_VIEW_SOURCE_CSS: u32 = 25502;
pub const IDR_UASTYLE_THEME_CHROMIUM_ANDROID_CSS: u32 = 25503;
pub const IDR_UASTYLE_FULLSCREEN_ANDROID_CSS: u32 = 25504;
pub const IDR_UASTYLE_THEME_CHROMIUM_LINUX_CSS: u32 = 25505;
pub const IDR_UASTYLE_THEME_INPUT_MULTIPLE_FIELDS_CSS: u32 = 25508;
pub const IDR_UASTYLE_THEME_WIN_CSS: u32 = 25509;
pub const IDR_UASTYLE_THEME_WIN_QUIRKS_CSS: u32 = 25510;
pub const IDR_UASTYLE_SVG_CSS: u32 = 25511;
pub const IDR_UASTYLE_MATHML_CSS: u32 = 25512;
pub const IDR_UASTYLE_FULLSCREEN_CSS: u32 = 25513;
pub const IDR_UASTYLE_XHTMLMP_CSS: u32 = 25514;
pub const IDR_UASTYLE_VIEWPORT_ANDROID_CSS: u32 = 25515;
pub const IDR_UASTYLE_VIEWPORT_TELEVISION_CSS: u32 = 25516;
pub const IDR_INSPECT_TOOL_COMMON_JS: u32 = 25517;
pub const IDR_INSPECT_TOOL_COMMON_CSS: u32 = 25518;
pub const IDR_INSPECT_TOOL_DISTANCES_HTML: u32 = 25519;
pub const IDR_INSPECT_TOOL_HIGHLIGHT_HTML: u32 = 25520;
pub const IDR_INSPECT_TOOL_PAUSED_HTML: u32 = 25521;
pub const IDR_INSPECT_TOOL_VIEWPORT_SIZE_HTML: u32 = 25522;
pub const IDR_INSPECT_TOOL_SCREENSHOT_HTML: u32 = 25523;
pub const IDR_DOCUMENTXMLTREEVIEWER_CSS: u32 = 25524;
pub const IDR_DOCUMENTXMLTREEVIEWER_JS: u32 = 25525;
pub const IDR_VALIDATION_BUBBLE_ICON: u32 = 25526;
pub const IDR_VALIDATION_BUBBLE_CSS: u32 = 25527;
pub const IDR_PICKER_COMMON_JS: u32 = 25528;
pub const IDR_PICKER_COMMON_CSS: u32 = 25529;
pub const IDR_CALENDAR_PICKER_CSS: u32 = 25530;
pub const IDR_CALENDAR_PICKER_JS: u32 = 25531;
pub const IDR_PICKER_BUTTON_CSS: u32 = 25532;
pub const IDR_SUGGESTION_PICKER_CSS: u32 = 25533;
pub const IDR_SUGGESTION_PICKER_JS: u32 = 25534;
pub const IDR_COLOR_SUGGESTION_PICKER_CSS: u32 = 25535;
pub const IDR_COLOR_SUGGESTION_PICKER_JS: u32 = 25536;
pub const IDR_LIST_PICKER_CSS: u32 = 25537;
pub const IDR_LIST_PICKER_JS: u32 = 25538;
pub const IDR_AUDIO_SPATIALIZATION_COMPOSITE: u32 = 25539;
pub const IDR_LAYERED_API_BLANK_INDEX_MJS: u32 = 25540;
pub const IDR_LAYERED_API_KV_STORAGE_ASYNC_ITERATOR_MJS: u32 = 25541;
pub const IDR_LAYERED_API_KV_STORAGE_IDB_UTILS_MJS: u32 = 25542;
pub const IDR_LAYERED_API_KV_STORAGE_INDEX_MJS: u32 = 25543;
pub const IDR_LAYERED_API_VIRTUAL_SCROLLER_INDEX_MJS: u32 = 25544;
pub const IDR_LAYERED_API_VIRTUAL_SCROLLER_ITEM_SOURCE_MJS: u32 = 25545;
pub const IDR_LAYERED_API_VIRTUAL_SCROLLER_VIRTUAL_REPEATER_MJS: u32 = 25546;
pub const IDR_LAYERED_API_VIRTUAL_SCROLLER_VIRTUAL_SCROLLER_MJS: u32 = 25547;
pub const IDR_LAYERED_API_VIRTUAL_SCROLLER_LAYOUTS_LAYOUT_1D_BASE_MJS: u32 = 25548;
pub const IDR_LAYERED_API_VIRTUAL_SCROLLER_LAYOUTS_LAYOUT_1D_GRID_MJS: u32 = 25549;
pub const IDR_LAYERED_API_VIRTUAL_SCROLLER_LAYOUTS_LAYOUT_1D_MJS: u32 = 25550;
pub const IDR_INCOGNITO_TAB_HTML: u32 = 11902;
pub const IDR_GUEST_TAB_HTML: u32 = 11903;
pub const IDR_NEW_INCOGNITO_TAB_THEME_CSS: u32 = 11906;
pub const IDR_NEW_TAB_4_HTML: u32 = 11907;
pub const IDR_NEW_TAB_4_THEME_CSS: u32 = 11908;
pub const IDR_SIGNIN_SHARED_CSS_HTML: u32 = 11921;
pub const IDR_WELCOME_CSS: u32 = 11922;
pub const IDR_WELCOME_HTML: u32 = 11923;
pub const IDR_WELCOME_JS: u32 = 11924;
pub const IDR_DICE_WELCOME_CSS: u32 = 11925;
pub const IDR_DICE_WELCOME_HTML: u32 = 11926;
pub const IDR_DICE_WELCOME_BROWSER_PROXY_HTML: u32 = 11927;
pub const IDR_DICE_WELCOME_BROWSER_PROXY_JS: u32 = 11928;
pub const IDR_DICE_WELCOME_APP_HTML: u32 = 11929;
pub const IDR_DICE_WELCOME_APP_JS: u32 = 11930;
pub const IDR_WELCOME_WIN10_CSS: u32 = 11931;
pub const IDR_WELCOME_WIN10_HTML: u32 = 11932;
pub const IDR_WELCOME_WIN10_JS: u32 = 11933;
pub const IDR_DISCARDS_MOJO_API_HTML: u32 = 11000;
pub const IDR_DISCARDS_DATABASE_TAB_HTML: u32 = 11001;
pub const IDR_DISCARDS_DATABASE_TAB_JS: u32 = 11002;
pub const IDR_DISCARDS_DISCARDS_MAIN_HTML: u32 = 11003;
pub const IDR_DISCARDS_DISCARDS_MAIN_JS: u32 = 11004;
pub const IDR_DISCARDS_DISCARDS_TAB_HTML: u32 = 11005;
pub const IDR_DISCARDS_DISCARDS_TAB_JS: u32 = 11006;
pub const IDR_DISCARDS_GRAPH_TAB_HTML: u32 = 11007;
pub const IDR_DISCARDS_GRAPH_TAB_JS: u32 = 11008;
pub const IDR_DISCARDS_HTML: u32 = 11009;
pub const IDR_DISCARDS_JS: u32 = 11010;
pub const IDR_DISCARDS_LIFECYCLE_UNIT_STATE_MOJOM_LITE_JS: u32 = 11011;
pub const IDR_DISCARDS_MOJOM_LITE_JS: u32 = 11012;
pub const IDR_DISCARDS_MOJO_PUBLIC_BASE_PROCESS_ID_MOJOM_LITE_JS: u32 = 11013;
pub const IDR_DISCARDS_SORTED_TABLE_BEHAVIOR_HTML: u32 = 11014;
pub const IDR_DISCARDS_SORTED_TABLE_BEHAVIOR_JS: u32 = 11015;
pub const IDR_DISCARDS_WEBUI_GRAPH_DUMP_MOJOM_LITE_JS: u32 = 11016;
pub const IDR_BROWSER_SWITCH_APP_HTML: u32 = 11017;
pub const IDR_BROWSER_SWITCH_APP_JS: u32 = 11018;
pub const IDR_BROWSER_SWITCH_PROXY_HTML: u32 = 11019;
pub const IDR_BROWSER_SWITCH_PROXY_JS: u32 = 11020;
pub const IDR_BROWSER_SWITCH_HTML: u32 = 11021;
pub const IDR_BROWSER_SWITCH_INTERNALS_HTML: u32 = 11022;
pub const IDR_BROWSER_SWITCH_INTERNALS_JS: u32 = 11023;
pub const IDR_ABOUT_CONFLICTS_HTML: u32 = 11024;
pub const IDR_ABOUT_CONFLICTS_JS: u32 = 11025;
pub const IDR_ABOUT_FLASH_HTML: u32 = 11026;
pub const IDR_ABOUT_FLASH_JS: u32 = 11027;
pub const IDR_ABOUT_NACL_HTML: u32 = 11028;
pub const IDR_ABOUT_NACL_CSS: u32 = 11029;
pub const IDR_ABOUT_NACL_JS: u32 = 11030;
pub const IDR_ABOUT_SYS_HTML: u32 = 11031;
pub const IDR_ABOUT_SYS_CSS: u32 = 11032;
pub const IDR_ABOUT_SYS_JS: u32 = 11033;
pub const IDR_ACCESSIBILITY_HTML: u32 = 11034;
pub const IDR_ACCESSIBILITY_CSS: u32 = 11035;
pub const IDR_ACCESSIBILITY_JS: u32 = 11036;
pub const IDR_AD_NETWORK_HASHES: u32 = 11037;
pub const IDR_BLUETOOTH_ADAPTER_MOJO_JS: u32 = 11038;
pub const IDR_BLUETOOTH_DEVICE_MOJO_JS: u32 = 11039;
pub const IDR_BLUETOOTH_UUID_MOJO_JS: u32 = 11040;
pub const IDR_BLUETOOTH_INTERNALS_CSS: u32 = 11041;
pub const IDR_BLUETOOTH_INTERNALS_ADAPTER_BROKER_JS: u32 = 11042;
pub const IDR_BLUETOOTH_INTERNALS_ADAPTER_PAGE_JS: u32 = 11043;
pub const IDR_BLUETOOTH_INTERNALS_CHARACTERISTIC_LIST_JS: u32 = 11044;
pub const IDR_BLUETOOTH_INTERNALS_DESCRIPTOR_LIST_JS: u32 = 11045;
pub const IDR_BLUETOOTH_INTERNALS_DEVICE_BROKER_JS: u32 = 11046;
pub const IDR_BLUETOOTH_INTERNALS_DEVICE_COLLECTION_JS: u32 = 11047;
pub const IDR_BLUETOOTH_INTERNALS_DEVICE_DETAILS_PAGE_JS: u32 = 11048;
pub const IDR_BLUETOOTH_INTERNALS_DEVICE_TABLE_JS: u32 = 11049;
pub const IDR_BLUETOOTH_INTERNALS_DEVICES_PAGE_JS: u32 = 11050;
pub const IDR_BLUETOOTH_INTERNALS_EXPANDABLE_LIST_JS: u32 = 11051;
pub const IDR_BLUETOOTH_INTERNALS_HTML: u32 = 11052;
pub const IDR_BLUETOOTH_INTERNALS_JS: u32 = 11053;
pub const IDR_BLUETOOTH_INTERNALS_MOJO_JS: u32 = 11054;
pub const IDR_BLUETOOTH_INTERNALS_OBJECT_FIELDSET_JS: u32 = 11055;
pub const IDR_BLUETOOTH_INTERNALS_SERVICE_LIST_JS: u32 = 11056;
pub const IDR_BLUETOOTH_INTERNALS_SIDEBAR_JS: u32 = 11057;
pub const IDR_BLUETOOTH_INTERNALS_SNACKBAR_JS: u32 = 11058;
pub const IDR_BLUETOOTH_INTERNALS_VALUE_CONTROL_JS: u32 = 11059;
pub const IDR_CLOUDPRINT_MANIFEST: u32 = 171;
pub const IDR_DEVTOOLS_DISCOVERY_PAGE_HTML: u32 = 11064;
pub const IDR_DOMAIN_RELIABILITY_INTERNALS_HTML: u32 = 11065;
pub const IDR_DOMAIN_RELIABILITY_INTERNALS_CSS: u32 = 11066;
pub const IDR_DOMAIN_RELIABILITY_INTERNALS_JS: u32 = 11067;
pub const IDR_DOWNLOAD_FILE_TYPES_PB: u32 = 120;
pub const IDR_DOWNLOAD_INTERNALS_HTML: u32 = 11068;
pub const IDR_DOWNLOAD_INTERNALS_CSS: u32 = 11069;
pub const IDR_DOWNLOAD_INTERNALS_JS: u32 = 11070;
pub const IDR_DOWNLOAD_INTERNALS_BROWSER_PROXY_JS: u32 = 11071;
pub const IDR_DOWNLOAD_INTERNALS_VISUALS_JS: u32 = 11072;
pub const IDR_UKM_INTERNALS_HTML: u32 = 11073;
pub const IDR_UKM_INTERNALS_JS: u32 = 11074;
pub const IDR_UKM_INTERNALS_CSS: u32 = 11075;
pub const IDR_TRANSLATE_INTERNALS_HTML: u32 = 11076;
pub const IDR_TRANSLATE_INTERNALS_JS: u32 = 11077;
pub const IDR_FEEDBACK_MANIFEST: u32 = 11078;
pub const IDR_SUPERVISED_USER_INTERNALS_HTML: u32 = 11095;
pub const IDR_SUPERVISED_USER_INTERNALS_CSS: u32 = 11096;
pub const IDR_SUPERVISED_USER_INTERNALS_JS: u32 = 11097;
pub const IDR_APP_MANAGEMENT_BITMAP_MOJO_LITE_JS: u32 = 11100;
pub const IDR_APP_MANAGEMENT_IMAGE_INFO_MOJO_LITE_JS: u32 = 11101;
pub const IDR_APP_MANAGEMENT_IMAGE_MOJO_LITE_JS: u32 = 11102;
pub const IDR_APP_MANAGEMENT_MOJO_LITE_JS: u32 = 11103;
pub const IDR_APP_MANAGEMENT_TYPES_MOJO_LITE_JS: u32 = 11104;
pub const IDR_APP_MANAGEMENT_ACTIONS_HTML: u32 = 11105;
pub const IDR_APP_MANAGEMENT_ACTIONS_JS: u32 = 11106;
pub const IDR_APP_MANAGEMENT_API_LISTENER_HTML: u32 = 11107;
pub const IDR_APP_MANAGEMENT_API_LISTENER_JS: u32 = 11108;
pub const IDR_APP_MANAGEMENT_APP_HTML: u32 = 11109;
pub const IDR_APP_MANAGEMENT_APP_ITEM_HTML: u32 = 11110;
pub const IDR_APP_MANAGEMENT_APP_ITEM_JS: u32 = 11111;
pub const IDR_APP_MANAGEMENT_APP_JS: u32 = 11112;
pub const IDR_APP_MANAGEMENT_ARC_PERMISSION_VIEW_HTML: u32 = 11113;
pub const IDR_APP_MANAGEMENT_ARC_PERMISSION_VIEW_JS: u32 = 11114;
pub const IDR_APP_MANAGEMENT_BROWSER_PROXY_HTML: u32 = 11115;
pub const IDR_APP_MANAGEMENT_BROWSER_PROXY_JS: u32 = 11116;
pub const IDR_APP_MANAGEMENT_CHROME_APP_PERMISSION_VIEW_HTML: u32 = 11117;
pub const IDR_APP_MANAGEMENT_CHROME_APP_PERMISSION_VIEW_JS: u32 = 11118;
pub const IDR_APP_MANAGEMENT_CONSTANTS_HTML: u32 = 11119;
pub const IDR_APP_MANAGEMENT_CONSTANTS_JS: u32 = 11120;
pub const IDR_APP_MANAGEMENT_EXPANDABLE_APP_LIST_HTML: u32 = 11121;
pub const IDR_APP_MANAGEMENT_EXPANDABLE_APP_LIST_JS: u32 = 11122;
pub const IDR_APP_MANAGEMENT_DOM_SWITCH_HTML: u32 = 11123;
pub const IDR_APP_MANAGEMENT_DOM_SWITCH_JS: u32 = 11124;
pub const IDR_APP_MANAGEMENT_FAKE_PAGE_HANDLER_JS: u32 = 11125;
pub const IDR_APP_MANAGEMENT_INDEX_HTML: u32 = 11126;
pub const IDR_APP_MANAGEMENT_MAIN_VIEW_HTML: u32 = 11127;
pub const IDR_APP_MANAGEMENT_MAIN_VIEW_JS: u32 = 11128;
pub const IDR_APP_MANAGEMENT_METADATA_VIEW_HTML: u32 = 11129;
pub const IDR_APP_MANAGEMENT_METADATA_VIEW_JS: u32 = 11130;
pub const IDR_APP_MANAGEMENT_NOTIFICATIONS_VIEW_HTML: u32 = 11131;
pub const IDR_APP_MANAGEMENT_NOTIFICATIONS_VIEW_JS: u32 = 11132;
pub const IDR_APP_MANAGEMENT_PERMISSION_ITEM_HTML: u32 = 11133;
pub const IDR_APP_MANAGEMENT_PERMISSION_ITEM_JS: u32 = 11134;
pub const IDR_APP_MANAGEMENT_PERMISSION_TOGGLE_HTML: u32 = 11135;
pub const IDR_APP_MANAGEMENT_PERMISSION_TOGGLE_JS: u32 = 11136;
pub const IDR_APP_MANAGEMENT_PERMISSION_VIEW_HEADER_HTML: u32 = 11137;
pub const IDR_APP_MANAGEMENT_PERMISSION_VIEW_HEADER_JS: u32 = 11138;
pub const IDR_APP_MANAGEMENT_PWA_PERMISSION_VIEW_HTML: u32 = 11139;
pub const IDR_APP_MANAGEMENT_PWA_PERMISSION_VIEW_JS: u32 = 11140;
pub const IDR_APP_MANAGEMENT_REDUCERS_HTML: u32 = 11141;
pub const IDR_APP_MANAGEMENT_REDUCERS_JS: u32 = 11142;
pub const IDR_APP_MANAGEMENT_ROUTER_HTML: u32 = 11143;
pub const IDR_APP_MANAGEMENT_ROUTER_JS: u32 = 11144;
pub const IDR_APP_MANAGEMENT_SEARCH_VIEW_HTML: u32 = 11145;
pub const IDR_APP_MANAGEMENT_SEARCH_VIEW_JS: u32 = 11146;
pub const IDR_APP_MANAGEMENT_SHARED_STYLE_HTML: u32 = 11147;
pub const IDR_APP_MANAGEMENT_SHARED_VARS_HTML: u32 = 11148;
pub const IDR_APP_MANAGEMENT_STORE_CLIENT_HTML: u32 = 11149;
pub const IDR_APP_MANAGEMENT_STORE_CLIENT_JS: u32 = 11150;
pub const IDR_APP_MANAGEMENT_STORE_HTML: u32 = 11151;
pub const IDR_APP_MANAGEMENT_STORE_JS: u32 = 11152;
pub const IDR_APP_MANAGEMENT_TYPES_JS: u32 = 11153;
pub const IDR_APP_MANAGEMENT_UTIL_HTML: u32 = 11154;
pub const IDR_APP_MANAGEMENT_UTIL_JS: u32 = 11155;
pub const IDR_BOOKMARKS_IMAGES_FOLDER_OPEN_SVG: u32 = 11156;
pub const IDR_BOOKMARKS_IMAGES_FOLDER_SVG: u32 = 11157;
pub const IDR_BOOKMARKS_VULCANIZED_HTML: u32 = 11158;
pub const IDR_BOOKMARKS_CRISPER_JS: u32 = 11159;
pub const IDR_HISTORY_CONSTANTS_HTML: u32 = 11202;
pub const IDR_HISTORY_CONSTANTS_JS: u32 = 11203;
pub const IDR_HISTORY_HISTORY_HTML: u32 = 11204;
pub const IDR_HISTORY_HISTORY_JS: u32 = 11205;
pub const IDR_HISTORY_IMAGES_SIGN_IN_PROMO_DARK_SVG: u32 = 11206;
pub const IDR_HISTORY_IMAGES_SIGN_IN_PROMO_SVG: u32 = 11207;
pub const IDR_HISTORY_STRINGS_HTML: u32 = 11208;
pub const IDR_HISTORY_APP_VULCANIZED_HTML: u32 = 11209;
pub const IDR_HISTORY_APP_CRISPER_JS: u32 = 11210;
pub const IDR_HISTORY_LAZY_LOAD_VULCANIZED_HTML: u32 = 11211;
pub const IDR_HISTORY_LAZY_LOAD_CRISPER_JS: u32 = 11212;
pub const IDR_PAGE_NOT_AVAILABLE_FOR_GUEST_APP_HTML: u32 = 11238;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_MANIFEST: u32 = 11239;
pub const IDR_INLINE_LOGIN_HTML: u32 = 11240;
pub const IDR_INLINE_LOGIN_CSS: u32 = 11241;
pub const IDR_INLINE_LOGIN_JS: u32 = 11242;
pub const IDR_GAIA_AUTH_AUTHENTICATOR_JS: u32 = 11243;
pub const IDR_INSPECT_CSS: u32 = 11244;
pub const IDR_INSPECT_HTML: u32 = 11245;
pub const IDR_INSPECT_JS: u32 = 11246;
pub const IDR_INTERVENTIONS_INTERNALS_INDEX_HTML: u32 = 11247;
pub const IDR_INTERVENTIONS_INTERNALS_INDEX_JS: u32 = 11248;
pub const IDR_INTERVENTIONS_INTERNALS_MOJOM_LITE_JS: u32 = 11249;
pub const IDR_INTERVENTIONS_INTERNALS_UNSUPPORTED_PAGE_HTML: u32 = 11250;
pub const IDR_NETWORK_SPEECH_SYNTHESIS_MANIFEST: u32 = 11251;
pub const IDR_PREDICTORS_HTML: u32 = 11252;
pub const IDR_PREDICTORS_JS: u32 = 11253;
pub const IDR_LOCAL_DISCOVERY_HTML: u32 = 11254;
pub const IDR_LOCAL_DISCOVERY_CSS: u32 = 11255;
pub const IDR_LOCAL_DISCOVERY_JS: u32 = 11256;
pub const IDR_LOCAL_STATE_HTML: u32 = 11257;
pub const IDR_LOCAL_STATE_JS: u32 = 11258;
pub const IDR_DESKTOP_HATS_HTML: u32 = 11259;
pub const IDR_DESKTOP_HATS_JS: u32 = 11260;
pub const IDR_OMNIBOX_HTML: u32 = 11261;
pub const IDR_OMNIBOX_CSS: u32 = 11262;
pub const IDR_OMNIBOX_INPUT_CSS: u32 = 11263;
pub const IDR_OUTPUT_RESULTS_GROUP_CSS: u32 = 11264;
pub const IDR_OMNIBOX_OUTPUT_COLUMN_WIDTHS_CSS: u32 = 11265;
pub const IDR_OMNIBOX_ELEMENT_JS: u32 = 11266;
pub const IDR_OMNIBOX_INPUT_JS: u32 = 11267;
pub const IDR_OMNIBOX_OUTPUT_JS: u32 = 11268;
pub const IDR_OMNIBOX_JS: u32 = 11269;
pub const IDR_OMNIBOX_MOJO_JS: u32 = 11270;
pub const IDR_ORIGIN_MOJO_JS: u32 = 11271;
pub const IDR_COMPONENTS_HTML: u32 = 11272;
pub const IDR_COMPONENTS_JS: u32 = 11273;
pub const IDR_MEMORY_INTERNALS_HTML: u32 = 11274;
pub const IDR_MEMORY_INTERNALS_JS: u32 = 11275;
pub const IDR_PDF_MANIFEST: u32 = 176;
pub const IDR_PLUGIN_DB_JSON: u32 = 121;
pub const IDR_POLICY_CSS: u32 = 11276;
pub const IDR_POLICY_HTML: u32 = 11277;
pub const IDR_POLICY_BASE_JS: u32 = 11278;
pub const IDR_POLICY_JS: u32 = 11279;
pub const IDR_MANAGEMENT_HTML: u32 = 11280;
pub const IDR_MANAGEMENT_UI_HTML: u32 = 11281;
pub const IDR_MANAGEMENT_UI_JS: u32 = 11282;
pub const IDR_MANAGEMENT_BROWSER_PROXY_HTML: u32 = 11283;
pub const IDR_MANAGEMENT_BROWSER_PROXY_JS: u32 = 11284;
pub const IDR_MANAGEMENT_ICONS_HTML: u32 = 11285;
pub const IDR_SITE_ENGAGEMENT_HTML: u32 = 11286;
pub const IDR_SITE_ENGAGEMENT_JS: u32 = 11287;
pub const IDR_SITE_ENGAGEMENT_DETAILS_MOJOM_LITE_JS: u32 = 11288;
pub const IDR_URL_MOJOM_LITE_JS: u32 = 11289;
pub const IDR_SYNC_CONFIRMATION_HTML: u32 = 11290;
pub const IDR_SYNC_CONFIRMATION_JS: u32 = 11291;
pub const IDR_DICE_SYNC_CONFIRMATION_HTML: u32 = 11292;
pub const IDR_DICE_SYNC_CONFIRMATION_JS: u32 = 11293;
pub const IDR_DICE_SYNC_CONFIRMATION_BROWSER_PROXY_HTML: u32 = 11294;
pub const IDR_DICE_SYNC_CONFIRMATION_BROWSER_PROXY_JS: u32 = 11295;
pub const IDR_DICE_SYNC_CONFIRMATION_APP_HTML: u32 = 11296;
pub const IDR_DICE_SYNC_CONFIRMATION_APP_JS: u32 = 11297;
pub const IDR_SIGNIN_EMAIL_CONFIRMATION_HTML: u32 = 11298;
pub const IDR_SIGNIN_EMAIL_CONFIRMATION_JS: u32 = 11299;
pub const IDR_SIGNIN_ERROR_HTML: u32 = 11300;
pub const IDR_SIGNIN_ERROR_JS: u32 = 11301;
pub const IDR_USB_ENUMERATION_OPTIONS_MOJOM_LITE_JS: u32 = 11302;
pub const IDR_USB_DEVICE_MANAGER_CLIENT_MOJOM_LITE_JS: u32 = 11303;
pub const IDR_USB_DEVICE_MANAGER_MOJOM_LITE_JS: u32 = 11304;
pub const IDR_USB_DEVICE_MANAGER_TEST_MOJOM_LITE_JS: u32 = 11305;
pub const IDR_USB_DEVICE_MOJOM_LITE_JS: u32 = 11306;
pub const IDR_USB_INTERNALS_CSS: u32 = 11307;
pub const IDR_USB_INTERNALS_DESCRIPTOR_PANEL_JS: u32 = 11308;
pub const IDR_USB_INTERNALS_DEVICES_PAGE_JS: u32 = 11309;
pub const IDR_USB_INTERNALS_HTML: u32 = 11310;
pub const IDR_USB_INTERNALS_JS: u32 = 11311;
pub const IDR_USB_INTERNALS_MOJOM_LITE_JS: u32 = 11312;
pub const IDR_WEBRTC_LOGS_HTML: u32 = 11313;
pub const IDR_WEBRTC_LOGS_JS: u32 = 11314;
pub const IDR_WEBSTORE_MANIFEST: u32 = 174;
pub const IDR_CRYPTOTOKEN_MANIFEST: u32 = 175;
pub const IDR_SET_AS_DEFAULT_BROWSER_JS: u32 = 11369;
pub const IDR_SET_AS_DEFAULT_BROWSER_HTML: u32 = 11370;
pub const IDR_CONTROL_BAR_HTML: u32 = 11371;
pub const IDR_CONTROL_BAR_JS: u32 = 11372;
pub const IDR_CREATE_PROFILE_HTML: u32 = 11373;
pub const IDR_CREATE_PROFILE_JS: u32 = 11374;
pub const IDR_ERROR_DIALOG_HTML: u32 = 11375;
pub const IDR_ERROR_DIALOG_JS: u32 = 11376;
pub const IDR_PROFILE_BROWSER_PROXY_HTML: u32 = 11377;
pub const IDR_PROFILE_BROWSER_PROXY_JS: u32 = 11378;
pub const IDR_USER_MANAGER_HTML: u32 = 11379;
pub const IDR_USER_MANAGER_JS: u32 = 11380;
pub const IDR_USER_MANAGER_PAGES_HTML: u32 = 11381;
pub const IDR_USER_MANAGER_PAGES_JS: u32 = 11382;
pub const IDR_USER_MANAGER_SHARED_STYLES_HTML: u32 = 11383;
pub const IDR_USER_MANAGER_STRINGS_HTML: u32 = 11384;
pub const IDR_USER_MANAGER_TUTORIAL_HTML: u32 = 11385;
pub const IDR_USER_MANAGER_TUTORIAL_JS: u32 = 11386;
pub const IDR_IDENTITY_INTERNALS_HTML: u32 = 11387;
pub const IDR_IDENTITY_INTERNALS_CSS: u32 = 11388;
pub const IDR_IDENTITY_INTERNALS_JS: u32 = 11389;
pub const IDR_DEVICE_LOG_UI_HTML: u32 = 11390;
pub const IDR_DEVICE_LOG_UI_JS: u32 = 11391;
pub const IDR_DEVICE_LOG_UI_CSS: u32 = 11392;
pub const IDR_MEDIA_ROUTER_COMMON_CSS: u32 = 11445;
pub const IDR_MEDIA_ROUTER_CSS: u32 = 11446;
pub const IDR_MEDIA_ROUTER_DATA_JS: u32 = 11447;
pub const IDR_MEDIA_ROUTER_JS: u32 = 11448;
pub const IDR_MEDIA_ROUTER_HTML: u32 = 11449;
pub const IDR_MEDIA_ROUTER_INTERNALS_HTML: u32 = 11450;
pub const IDR_MEDIA_ROUTER_INTERNALS_CSS: u32 = 11451;
pub const IDR_MEDIA_ROUTER_INTERNALS_JS: u32 = 11452;
pub const IDR_MEDIA_ROUTER_UI_INTERFACE_JS: u32 = 11453;
pub const IDR_MEDIA_ROUTER_ICONS_HTML: u32 = 11454;
pub const IDR_ISSUE_BANNER_HTML: u32 = 11455;
pub const IDR_ISSUE_BANNER_JS: u32 = 11456;
pub const IDR_ISSUE_BANNER_CSS: u32 = 11457;
pub const IDR_MEDIA_ROUTER_CONTAINER_HTML: u32 = 11458;
pub const IDR_MEDIA_ROUTER_CONTAINER_CSS: u32 = 11459;
pub const IDR_MEDIA_ROUTER_CONTAINER_JS: u32 = 11460;
pub const IDR_MEDIA_ROUTER_HEADER_HTML: u32 = 11461;
pub const IDR_MEDIA_ROUTER_HEADER_CSS: u32 = 11462;
pub const IDR_MEDIA_ROUTER_HEADER_JS: u32 = 11463;
pub const IDR_MEDIA_ROUTER_SEARCH_HIGHLIGHTER_CSS: u32 = 11464;
pub const IDR_MEDIA_ROUTER_SEARCH_HIGHLIGHTER_HTML: u32 = 11465;
pub const IDR_MEDIA_ROUTER_SEARCH_HIGHLIGHTER_JS: u32 = 11466;
pub const IDR_ROUTE_CONTROLS_HTML: u32 = 11467;
pub const IDR_ROUTE_CONTROLS_CSS: u32 = 11468;
pub const IDR_ROUTE_CONTROLS_JS: u32 = 11469;
pub const IDR_ROUTE_DETAILS_HTML: u32 = 11470;
pub const IDR_ROUTE_DETAILS_CSS: u32 = 11471;
pub const IDR_ROUTE_DETAILS_JS: u32 = 11472;
pub const IDR_PSEUDO_SINK_SEARCH_STATE_JS: u32 = 11473;
pub const IDR_CAST_HTML: u32 = 11474;
pub const IDR_CAST_CSS: u32 = 11475;
pub const IDR_CAST_JS: u32 = 11476;
pub const IDR_CAST_FAVICON: u32 = 11477;
pub const IDR_IME_WINDOW_CLOSE: u32 = 11478;
pub const IDR_IME_WINDOW_CLOSE_C: u32 = 11479;
pub const IDR_IME_WINDOW_CLOSE_H: u32 = 11480;
pub const IDR_WELCOME_WIN10_DEFAULT_WEBP: u32 = 11481;
pub const IDR_WELCOME_WIN10_PIN_WEBP: u32 = 11482;
pub const IDR_SSL_ERROR_ASSISTANT_PB: u32 = 288;
pub const IDR_MEDIA_ENGAGEMENT_HTML: u32 = 11485;
pub const IDR_MEDIA_ENGAGEMENT_JS: u32 = 11486;
pub const IDR_MEDIA_ENGAGEMENT_SCORE_DETAILS_MOJOM_LITE_JS: u32 = 11487;
pub const IDR_PWA_HTML: u32 = 11488;
pub const IDR_RESET_PASSWORD_HTML: u32 = 11513;
pub const IDR_RESET_PASSWORD_JS: u32 = 11514;
pub const IDR_RESET_PASSWORD_MOJOM_LITE_JS: u32 = 11515;
pub const IDR_TAB_RANKER_EXAMPLE_PREPROCESSOR_CONFIG_PB: u32 = 11516;
pub const IDR_CEF_DEVTOOLS_DISCOVERY_PAGE: u32 = 31500;
pub const IDR_CEF_LICENSE_TXT: u32 = 31501;
pub const IDR_CEF_VERSION_HTML: u32 = 31502;
pub const IDR_CEF_EXTENSION_API_FEATURES: u32 = 31503;
pub const IDR_CHROME_EXTENSION_API_FEATURES: u32 = 14160;
pub const IDR_CHROME_APP_API_FEATURES: u32 = 14161;
pub const IDR_NETWORK_SPEECH_SYNTHESIS_JS: u32 = 12000;
pub const IDR_COMPONENT_BOOKMARKS_BOOKMARKS_HTML: u32 = 12003;
pub const IDR_FEEDBACK_BLUETOOTHLOGSINFO_HTML: u32 = 12006;
pub const IDR_FEEDBACK_ASSISTANTLOGSINFO_HTML: u32 = 12007;
pub const IDR_FEEDBACK_DEFAULT_HTML: u32 = 12008;
pub const IDR_FEEDBACK_SYSINFO_HTML: u32 = 12009;
pub const IDR_FEEDBACK_ASSISTANT_LOGS_INFO_JS: u32 = 12010;
pub const IDR_FEEDBACK_FEEDBACK_UTIL_JS: u32 = 12011;
pub const IDR_FEEDBACK_EVENT_HANDLER_JS: u32 = 12012;
pub const IDR_FEEDBACK_FEEDBACK_JS: u32 = 12013;
pub const IDR_FEEDBACK_SYSINFO_JS: u32 = 12014;
pub const IDR_FEEDBACK_TAKE_SCREENSHOT_JS: u32 = 12015;
pub const IDR_FEEDBACK_TOPBAR_HANDLER_JS: u32 = 12016;
pub const IDR_FEEDBACK_ASSISTANT_LOGS_INFO_CSS: u32 = 12017;
pub const IDR_FEEDBACK_FEEDBACK_CSS: u32 = 12018;
pub const IDR_FEEDBACK_SYSINFO_CSS: u32 = 12019;
pub const IDR_FEEDBACK_ICON_48: u32 = 12020;
pub const IDR_FEEDBACK_ICON_192: u32 = 12021;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_BACKGROUND_JS: u32 = 12022;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_DIALOG_CSS: u32 = 12023;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_DIALOG: u32 = 12024;
pub const IDR_IDENTITY_API_SCOPE_APPROVAL_DIALOG_JS: u32 = 12025;
pub const IDR_PDF_INDEX_HTML: u32 = 12063;
pub const IDR_PDF_INDEX_CSS: u32 = 12064;
pub const IDR_PDF_MAIN_JS: u32 = 12065;
pub const IDR_PDF_PDF_VIEWER_JS: u32 = 12066;
pub const IDR_PDF_TOOLBAR_MANAGER_JS: u32 = 12067;
pub const IDR_PDF_PDF_FITTING_TYPE_JS: u32 = 12068;
pub const IDR_PDF_VIEWPORT_JS: u32 = 12069;
pub const IDR_PDF_VIEWPORT_INTERFACE_JS: u32 = 12070;
pub const IDR_PDF_OPEN_PDF_PARAMS_PARSER_JS: u32 = 12071;
pub const IDR_PDF_NAVIGATOR_JS: u32 = 12072;
pub const IDR_PDF_VIEWPORT_SCROLLER_JS: u32 = 12073;
pub const IDR_PDF_PDF_SCRIPTING_API_JS: u32 = 12074;
pub const IDR_PDF_ZOOM_MANAGER_JS: u32 = 12075;
pub const IDR_PDF_GESTURE_DETECTOR_JS: u32 = 12076;
pub const IDR_PDF_BROWSER_API_JS: u32 = 12077;
pub const IDR_PDF_METRICS_JS: u32 = 12078;
pub const IDR_PDF_SHARED_VARS_HTML: u32 = 12079;
pub const IDR_PDF_ICONS_HTML: u32 = 12080;
pub const IDR_PDF_VIEWER_BOOKMARK_HTML: u32 = 12081;
pub const IDR_PDF_VIEWER_BOOKMARK_JS: u32 = 12082;
pub const IDR_PDF_VIEWER_BOOKMARKS_CONTENT_HTML: u32 = 12083;
pub const IDR_PDF_VIEWER_BOOKMARKS_CONTENT_JS: u32 = 12084;
pub const IDR_PDF_VIEWER_ERROR_SCREEN_HTML: u32 = 12085;
pub const IDR_PDF_VIEWER_ERROR_SCREEN_JS: u32 = 12086;
pub const IDR_PDF_VIEWER_PAGE_INDICATOR_HTML: u32 = 12095;
pub const IDR_PDF_VIEWER_PAGE_INDICATOR_JS: u32 = 12096;
pub const IDR_PDF_VIEWER_PAGE_SELECTOR_HTML: u32 = 12097;
pub const IDR_PDF_VIEWER_PAGE_SELECTOR_JS: u32 = 12098;
pub const IDR_PDF_VIEWER_PASSWORD_SCREEN_HTML: u32 = 12099;
pub const IDR_PDF_VIEWER_PASSWORD_SCREEN_JS: u32 = 12100;
pub const IDR_PDF_VIEWER_PDF_TOOLBAR_HTML: u32 = 12101;
pub const IDR_PDF_VIEWER_PDF_TOOLBAR_JS: u32 = 12102;
pub const IDR_PDF_VIEWER_TOOLBAR_DROPDOWN_HTML: u32 = 12103;
pub const IDR_PDF_VIEWER_TOOLBAR_DROPDOWN_JS: u32 = 12104;
pub const IDR_PDF_VIEWER_ZOOM_BUTTON_HTML: u32 = 12105;
pub const IDR_PDF_VIEWER_ZOOM_BUTTON_JS: u32 = 12106;
pub const IDR_PDF_VIEWER_ZOOM_SELECTOR_HTML: u32 = 12107;
pub const IDR_PDF_VIEWER_ZOOM_SELECTOR_JS: u32 = 12108;
pub const IDR_CRYPTOTOKEN_UTIL_JS: u32 = 12109;
pub const IDR_CRYPTOTOKEN_B64_JS: u32 = 12110;
pub const IDR_CRYPTOTOKEN_COUNTDOWN_JS: u32 = 12111;
pub const IDR_CRYPTOTOKEN_COUNTDOWNTIMER_JS: u32 = 12112;
pub const IDR_CRYPTOTOKEN_SHA256_JS: u32 = 12113;
pub const IDR_CRYPTOTOKEN_TIMER_JS: u32 = 12114;
pub const IDR_CRYPTOTOKEN_DEVICESTATUSCODES_JS: u32 = 12115;
pub const IDR_CRYPTOTOKEN_ASN1_JS: u32 = 12116;
pub const IDR_CRYPTOTOKEN_CBOR_JS: u32 = 12117;
pub const IDR_CRYPTOTOKEN_ENROLLER_JS: u32 = 12118;
pub const IDR_CRYPTOTOKEN_REQUESTQUEUE_JS: u32 = 12119;
pub const IDR_CRYPTOTOKEN_SIGNER_JS: u32 = 12120;
pub const IDR_CRYPTOTOKEN_WEBREQUEST_JS: u32 = 12121;
pub const IDR_CRYPTOTOKEN_APPID_JS: u32 = 12122;
pub const IDR_CRYPTOTOKEN_TEXTFETCHER_JS: u32 = 12123;
pub const IDR_CRYPTOTOKEN_REQUESTHELPER_JS: u32 = 12124;
pub const IDR_CRYPTOTOKEN_MESSAGETYPES_JS: u32 = 12125;
pub const IDR_CRYPTOTOKEN_INHERITS_JS: u32 = 12126;
pub const IDR_CRYPTOTOKEN_FACTORYREGISTRY_JS: u32 = 12127;
pub const IDR_CRYPTOTOKEN_ERRORCODES_JS: u32 = 12128;
pub const IDR_CRYPTOTOKEN_ORIGINCHECK_JS: u32 = 12129;
pub const IDR_CRYPTOTOKEN_INDIVIDUALATTEST_JS: u32 = 12130;
pub const IDR_CRYPTOTOKEN_GOOGLECORPINDIVIDUALATTEST_JS: u32 = 12131;
pub const IDR_CRYPTOTOKEN_APPROVEDORIGINS_JS: u32 = 12132;
pub const IDR_CRYPTOTOKEN_WEBREQUESTSENDER_JS: u32 = 12133;
pub const IDR_CRYPTOTOKEN_WINDOW_TIMER_JS: u32 = 12134;
pub const IDR_CRYPTOTOKEN_WATCHDOG_JS: u32 = 12135;
pub const IDR_CRYPTOTOKEN_LOGGING_JS: u32 = 12136;
pub const IDR_CRYPTOTOKEN_CRYPTOTOKENAPPROVEDORIGIN_JS: u32 = 12137;
pub const IDR_CRYPTOTOKEN_CRYPTOTOKENORIGINCHECK_JS: u32 = 12138;
pub const IDR_CRYPTOTOKEN_CRYPTOTOKENBACKGROUND_JS: u32 = 12139;
pub const IDR_AUTOFILL_AND_PASSWORD_MANAGER_INTERNALS_HTML: u32 = 17210;
pub const IDR_AUTOFILL_AND_PASSWORD_MANAGER_INTERNALS_JS: u32 = 17211;
pub const IDR_AUTOFILL_AND_PASSWORD_MANAGER_INTERNALS_CSS: u32 = 17212;
pub const IDR_ABOUT_UI_CREDITS_HTML: u32 = 17213;
pub const IDR_ABOUT_UI_CREDITS_JS: u32 = 17214;
pub const IDR_CRASH_CRASHES_HTML: u32 = 17215;
pub const IDR_CRASH_CRASHES_JS: u32 = 17216;
pub const IDR_ABOUT_DOM_DISTILLER_HTML: u32 = 17217;
pub const IDR_ABOUT_DOM_DISTILLER_CSS: u32 = 17218;
pub const IDR_ABOUT_DOM_DISTILLER_JS: u32 = 17219;
pub const IDR_DOM_DISTILLER_VIEWER_HTML: u32 = 17220;
pub const IDR_DOM_DISTILLER_VIEWER_JS: u32 = 17221;
pub const IDR_DISTILLER_JS: u32 = 17222;
pub const IDR_DISTILLER_CSS: u32 = 17223;
pub const IDR_DISTILLER_DESKTOP_CSS: u32 = 17224;
pub const IDR_DISTILLER_IOS_CSS: u32 = 17225;
pub const IDR_DISTILLER_MOBILE_CSS: u32 = 17226;
pub const IDR_DISTILLER_LOADING_IMAGE: u32 = 17227;
pub const IDR_EXTRACT_PAGE_FEATURES_JS: u32 = 17228;
pub const IDR_DISTILLABLE_PAGE_SERIALIZED_MODEL_NEW: u32 = 17229;
pub const IDR_LONG_PAGE_SERIALIZED_MODEL: u32 = 17230;
pub const IDR_FLAGS_UI_FLAGS_HTML: u32 = 17231;
pub const IDR_FLAGS_UI_FLAGS_JS: u32 = 17232;
pub const IDR_GCM_DRIVER_GCM_INTERNALS_HTML: u32 = 17233;
pub const IDR_GCM_DRIVER_GCM_INTERNALS_CSS: u32 = 17234;
pub const IDR_GCM_DRIVER_GCM_INTERNALS_JS: u32 = 17235;
pub const IDR_NET_LOG_NET_EXPORT_HTML: u32 = 17236;
pub const IDR_NET_LOG_NET_EXPORT_JS: u32 = 17237;
pub const IDR_NET_ERROR_HTML: u32 = 17238;
pub const IDR_NTP_TILES_INTERNALS_HTML: u32 = 17248;
pub const IDR_NTP_TILES_INTERNALS_JS: u32 = 17249;
pub const IDR_NTP_TILES_INTERNALS_CSS: u32 = 17250;
pub const IDR_OFFLINE_PAGES_RENOVATIONS_JS: u32 = 17251;
pub const IDR_PRINT_HEADER_FOOTER_TEMPLATE_PAGE: u32 = 17252;
pub const IDR_SAFE_BROWSING_HTML: u32 = 17253;
pub const IDR_SAFE_BROWSING_CSS: u32 = 17254;
pub const IDR_SAFE_BROWSING_JS: u32 = 17255;
pub const IDR_SECURITY_INTERSTITIAL_COMMON_CSS: u32 = 17256;
pub const IDR_SECURITY_INTERSTITIAL_CORE_CSS: u32 = 17257;
pub const IDR_SECURITY_INTERSTITIAL_UI_HTML: u32 = 17258;
pub const IDR_SECURITY_INTERSTITIAL_HTML: u32 = 17259;
pub const IDR_SECURITY_INTERSTITIAL_QUIET_HTML: u32 = 17260;
pub const IDR_SECURITY_INTERSTITIAL_CONNECTION_HELP_HTML: u32 = 17261;
pub const IDR_SECURITY_INTERSTITIAL_CONNECTION_HELP_CSS: u32 = 17262;
pub const IDR_SECURITY_INTERSTITIAL_CONNECTION_HELP_JS: u32 = 17263;
pub const IDR_SIGNIN_INTERNALS_INDEX_HTML: u32 = 17264;
pub const IDR_SIGNIN_INTERNALS_INDEX_JS: u32 = 17265;
pub const IDR_SUPERVISED_USER_BLOCK_INTERSTITIAL_HTML: u32 = 17266;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_INDEX_HTML: u32 = 17267;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_INDEX_JS: u32 = 17268;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_CHROME_SYNC_JS: u32 = 17269;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_TYPES_JS: u32 = 17270;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_SYNC_LOG_JS: u32 = 17271;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_SYNC_NODE_BROWSER_JS: u32 = 17272;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_SYNC_SEARCH_JS: u32 = 17273;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_ABOUT_JS: u32 = 17274;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_DATA_JS: u32 = 17275;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_EVENTS_JS: u32 = 17276;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_SEARCH_JS: u32 = 17277;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_USER_EVENTS_JS: u32 = 17278;
pub const IDR_SYNC_DRIVER_SYNC_INTERNALS_TRAFFIC_LOG_JS: u32 = 17279;
pub const IDR_TRANSLATE_JS: u32 = 17280;
pub const IDR_USER_ACTIONS_CSS: u32 = 17281;
pub const IDR_USER_ACTIONS_HTML: u32 = 17282;
pub const IDR_USER_ACTIONS_JS: u32 = 17283;
pub const IDR_VERSION_UI_CSS: u32 = 17284;
pub const IDR_VERSION_UI_HTML: u32 = 17285;
pub const IDR_VERSION_UI_JS: u32 = 17286;
pub const IDR_APPCACHE_INTERNALS_HTML: u32 = 20400;
pub const IDR_APPCACHE_INTERNALS_JS: u32 = 20401;
pub const IDR_APPCACHE_INTERNALS_CSS: u32 = 20402;
pub const IDR_DEVTOOLS_PINCH_CURSOR_ICON: u32 = 20403;
pub const IDR_DEVTOOLS_PINCH_CURSOR_ICON_2X: u32 = 20404;
pub const IDR_DEVTOOLS_TOUCH_CURSOR_ICON: u32 = 20405;
pub const IDR_DEVTOOLS_TOUCH_CURSOR_ICON_2X: u32 = 20406;
pub const IDR_GPU_INTERNALS_HTML: u32 = 20407;
pub const IDR_GPU_INTERNALS_JS: u32 = 20408;
pub const IDR_HISTOGRAMS_INTERNALS_HTML: u32 = 20409;
pub const IDR_HISTOGRAMS_INTERNALS_JS: u32 = 20410;
pub const IDR_INDEXED_DB_INTERNALS_HTML: u32 = 20411;
pub const IDR_INDEXED_DB_INTERNALS_JS: u32 = 20412;
pub const IDR_INDEXED_DB_INTERNALS_CSS: u32 = 20413;
pub const IDR_MEDIA_INTERNALS_HTML: u32 = 20414;
pub const IDR_MEDIA_INTERNALS_JS: u32 = 20415;
pub const IDR_NETWORK_ERROR_LISTING_HTML: u32 = 20416;
pub const IDR_NETWORK_ERROR_LISTING_JS: u32 = 20417;
pub const IDR_NETWORK_ERROR_LISTING_CSS: u32 = 20418;
pub const IDR_ORIGIN_MOJO_HTML: u32 = 20419;
pub const IDR_ORIGIN_MOJO_JS_2: u32 = 20420;
pub const IDR_PROCESS_INTERNALS_HTML: u32 = 20421;
pub const IDR_PROCESS_INTERNALS_MOJO_JS: u32 = 20422;
pub const IDR_PROCESS_INTERNALS_CSS: u32 = 20423;
pub const IDR_PROCESS_INTERNALS_JS: u32 = 20424;
pub const IDR_SERVICE_WORKER_INTERNALS_HTML: u32 = 20425;
pub const IDR_SERVICE_WORKER_INTERNALS_JS: u32 = 20426;
pub const IDR_SERVICE_WORKER_INTERNALS_CSS: u32 = 20427;
pub const IDR_UNGUESSABLE_TOKEN_MOJO_HTML: u32 = 20428;
pub const IDR_UNGUESSABLE_TOKEN_MOJO_JS: u32 = 20429;
pub const IDR_URL_MOJO_HTML: u32 = 20430;
pub const IDR_URL_MOJO_JS: u32 = 20431;
pub const IDR_WEBRTC_INTERNALS_HTML: u32 = 20432;
pub const IDR_WEBRTC_INTERNALS_JS: u32 = 20433;
pub const COMPRESSED_PROTOCOL_JSON: u32 = 28880;
pub const AUDITS2_WORKER_JS: u32 = 28881;
pub const DEVTOOLS_APP_HTML: u32 = 28882;
pub const DEVTOOLS_APP_JS: u32 = 28883;
pub const FORMATTER_WORKER_JS: u32 = 28884;
pub const HEAP_SNAPSHOT_WORKER_JS: u32 = 28885;
pub const INSPECTOR_HTML: u32 = 28886;
pub const INSPECTOR_JS: u32 = 28887;
pub const JS_APP_HTML: u32 = 28888;
pub const JS_APP_JS: u32 = 28889;
pub const NODE_APP_HTML: u32 = 28890;
pub const NODE_APP_JS: u32 = 28891;
pub const SHELL_JS: u32 = 28892;
pub const TOOLBOX_HTML: u32 = 28893;
pub const TOOLBOX_JS: u32 = 28894;
pub const WORKER_APP_HTML: u32 = 28895;
pub const WORKER_APP_JS: u32 = 28896;
pub const ANIMATION_ANIMATION_MODULE_JS: u32 = 28897;
pub const AUDITS2_AUDITS2_MODULE_JS: u32 = 28898;
pub const BROWSER_DEBUGGER_BROWSER_DEBUGGER_MODULE_JS: u32 = 28899;
pub const CHANGES_CHANGES_MODULE_JS: u32 = 28900;
pub const PROTOCOL_MONITOR_PROTOCOL_MONITOR_MODULE_JS: u32 = 28901;
pub const CM_CM_MODULE_JS: u32 = 28902;
pub const COLOR_PICKER_COLOR_PICKER_MODULE_JS: u32 = 28903;
pub const CONSOLE_CONSOLE_MODULE_JS: u32 = 28904;
pub const COOKIE_TABLE_COOKIE_TABLE_MODULE_JS: u32 = 28905;
pub const COVERAGE_COVERAGE_MODULE_JS: u32 = 28906;
pub const DATA_GRID_DATA_GRID_MODULE_JS: u32 = 28907;
pub const DEVICES_DEVICES_MODULE_JS: u32 = 28908;
pub const DIFF_DIFF_MODULE_JS: u32 = 28909;
pub const ELEMENTS_ELEMENTS_MODULE_JS: u32 = 28910;
pub const EVENT_LISTENERS_EVENT_LISTENERS_MODULE_JS: u32 = 28911;
pub const FORMATTER_FORMATTER_MODULE_JS: u32 = 28912;
pub const HAR_IMPORTER_HAR_IMPORTER_MODULE_JS: u32 = 28913;
pub const HEAP_SNAPSHOT_MODEL_HEAP_SNAPSHOT_MODEL_MODULE_JS: u32 = 28914;
pub const HELP_HELP_MODULE_JS: u32 = 28915;
pub const INLINE_EDITOR_INLINE_EDITOR_MODULE_JS: u32 = 28916;
pub const JAVASCRIPT_METADATA_JAVASCRIPT_METADATA_MODULE_JS: u32 = 28917;
pub const JS_PROFILER_JS_PROFILER_MODULE_JS: u32 = 28918;
pub const LAYER_VIEWER_LAYER_VIEWER_MODULE_JS: u32 = 28919;
pub const LAYERS_LAYERS_MODULE_JS: u32 = 28920;
pub const NETWORK_NETWORK_MODULE_JS: u32 = 28921;
pub const NODE_DEBUGGER_NODE_DEBUGGER_MODULE_JS: u32 = 28922;
pub const OBJECT_UI_OBJECT_UI_MODULE_JS: u32 = 28923;
pub const PERF_UI_PERF_UI_MODULE_JS: u32 = 28924;
pub const PERFORMANCE_MONITOR_PERFORMANCE_MONITOR_MODULE_JS: u32 = 28925;
pub const PROFILER_PROFILER_MODULE_JS: u32 = 28926;
pub const QUICK_OPEN_QUICK_OPEN_MODULE_JS: u32 = 28927;
pub const RESOURCES_RESOURCES_MODULE_JS: u32 = 28928;
pub const SEARCH_SEARCH_MODULE_JS: u32 = 28929;
pub const SECURITY_SECURITY_MODULE_JS: u32 = 28930;
pub const SETTINGS_SETTINGS_MODULE_JS: u32 = 28931;
pub const SNIPPETS_SNIPPETS_MODULE_JS: u32 = 28932;
pub const SOURCE_FRAME_SOURCE_FRAME_MODULE_JS: u32 = 28933;
pub const SOURCES_SOURCES_MODULE_JS: u32 = 28934;
pub const TEXT_EDITOR_TEXT_EDITOR_MODULE_JS: u32 = 28935;
pub const TIMELINE_MODEL_TIMELINE_MODEL_MODULE_JS: u32 = 28936;
pub const TIMELINE_TIMELINE_MODULE_JS: u32 = 28937;
pub const WEB_AUDIO_WEB_AUDIO_MODULE_JS: u32 = 28938;
pub const WORKSPACE_DIFF_WORKSPACE_DIFF_MODULE_JS: u32 = 28939;
pub const DEVTOOLS_COMPATIBILITY_JS: u32 = 28940;
pub const TESTS_JS: u32 = 28941;
pub const DEVTOOLS_EXTENSION_API_JS: u32 = 28942;
pub const IMAGES_ACCELEROMETER_BACK_SVG: u32 = 28943;
pub const IMAGES_ACCELEROMETER_BOTTOM_PNG: u32 = 28944;
pub const IMAGES_ACCELEROMETER_FRONT_SVG: u32 = 28945;
pub const IMAGES_ACCELEROMETER_LEFT_PNG: u32 = 28946;
pub const IMAGES_ACCELEROMETER_RIGHT_PNG: u32 = 28947;
pub const IMAGES_ACCELEROMETER_TOP_PNG: u32 = 28948;
pub const IMAGES_AUDITS_LOGO_SVG: u32 = 28949;
pub const IMAGES_BREAKPOINT_PNG: u32 = 28950;
pub const IMAGES_BREAKPOINTCONDITIONAL_PNG: u32 = 28951;
pub const IMAGES_BREAKPOINTCONDITIONAL_2X_PNG: u32 = 28952;
pub const IMAGES_BREAKPOINT_2X_PNG: u32 = 28953;
pub const IMAGES_CHECKBOXCHECKMARK_PNG: u32 = 28954;
pub const IMAGES_CHECKBOXCHECKMARK_2X_PNG: u32 = 28955;
pub const IMAGES_CHECKER_PNG: u32 = 28956;
pub const IMAGES_CHEVRONS_PNG: u32 = 28957;
pub const IMAGES_CHEVRONS_2X_PNG: u32 = 28958;
pub const IMAGES_CHROMEDISABLEDSELECT_PNG: u32 = 28959;
pub const IMAGES_CHROMEDISABLEDSELECT_2X_PNG: u32 = 28960;
pub const IMAGES_CHROMELEFT_PNG: u32 = 28961;
pub const IMAGES_CHROMEMIDDLE_PNG: u32 = 28962;
pub const IMAGES_CHROMERIGHT_PNG: u32 = 28963;
pub const IMAGES_CHROMESELECT_PNG: u32 = 28964;
pub const IMAGES_CHROMESELECT_2X_PNG: u32 = 28965;
pub const IMAGES_ERRORWAVE_PNG: u32 = 28966;
pub const IMAGES_ERRORWAVE_2X_PNG: u32 = 28967;
pub const IMAGES_IC_INFO_BLACK_18DP_SVG: u32 = 28968;
pub const IMAGES_IC_WARNING_BLACK_18DP_SVG: u32 = 28969;
pub const IMAGES_LARGEICONS_PNG: u32 = 28970;
pub const IMAGES_LARGEICONS_2X_PNG: u32 = 28971;
pub const IMAGES_MEDIUMICONS_PNG: u32 = 28972;
pub const IMAGES_MEDIUMICONS_2X_PNG: u32 = 28973;
pub const IMAGES_NAVIGATIONCONTROLS_PNG: u32 = 28974;
pub const IMAGES_NAVIGATIONCONTROLS_2X_PNG: u32 = 28975;
pub const IMAGES_NODEICON_PNG: u32 = 28976;
pub const IMAGES_POPOVERARROWS_PNG: u32 = 28977;
pub const IMAGES_PROFILEGROUPICON_PNG: u32 = 28978;
pub const IMAGES_PROFILEICON_PNG: u32 = 28979;
pub const IMAGES_PROFILESMALLICON_PNG: u32 = 28980;
pub const IMAGES_RADIODOT_PNG: u32 = 28981;
pub const IMAGES_RESIZEDIAGONAL_PNG: u32 = 28982;
pub const IMAGES_RESIZEDIAGONAL_2X_PNG: u32 = 28983;
pub const IMAGES_RESIZEHORIZONTAL_PNG: u32 = 28984;
pub const IMAGES_RESIZEHORIZONTAL_2X_PNG: u32 = 28985;
pub const IMAGES_RESIZEVERTICAL_PNG: u32 = 28986;
pub const IMAGES_RESIZEVERTICAL_2X_PNG: u32 = 28987;
pub const IMAGES_RESOURCECSSICON_PNG: u32 = 28988;
pub const IMAGES_RESOURCEDOCUMENTICON_PNG: u32 = 28989;
pub const IMAGES_RESOURCEDOCUMENTICONSMALL_PNG: u32 = 28990;
pub const IMAGES_RESOURCEJSICON_PNG: u32 = 28991;
pub const IMAGES_RESOURCEPLAINICON_PNG: u32 = 28992;
pub const IMAGES_RESOURCEPLAINICONSMALL_PNG: u32 = 28993;
pub const IMAGES_RESOURCESTIMEGRAPHICON_PNG: u32 = 28994;
pub const IMAGES_SEARCHNEXT_PNG: u32 = 28995;
pub const IMAGES_SEARCHPREV_PNG: u32 = 28996;
pub const IMAGES_SECURITYICONS_PNG: u32 = 28997;
pub const IMAGES_SECURITYICONS_2X_PNG: u32 = 28998;
pub const IMAGES_SMALLICONS_PNG: u32 = 28999;
pub const IMAGES_SMALLICONS_2X_PNG: u32 = 29000;
pub const IMAGES_SPEECH_PNG: u32 = 29001;
pub const IMAGES_TOOLBARRESIZERVERTICAL_PNG: u32 = 29002;
pub const IMAGES_TOUCHCURSOR_PNG: u32 = 29003;
pub const IMAGES_TOUCHCURSOR_2X_PNG: u32 = 29004;
pub const IMAGES_TREEOUTLINETRIANGLES_PNG: u32 = 29005;
pub const IMAGES_TREEOUTLINETRIANGLES_2X_PNG: u32 = 29006;
pub const IMAGES_WHATSNEW_PNG: u32 = 29007;
pub const IDR_APP_DEFAULT_ICON: u32 = 24550;
pub const IDR_EXTENSION_DEFAULT_ICON: u32 = 24551;
pub const IDR_EXTENSION_ACTION_PLAIN_BACKGROUND: u32 = 24552;
pub const IDR_EXTENSION_ICON_PLAIN_BACKGROUND: u32 = 24553;
pub const IDR_APP_VIEW_JS: u32 = 24570;
pub const IDR_APP_VIEW_ELEMENT_JS: u32 = 24571;
pub const IDR_BROWSER_TEST_ENVIRONMENT_SPECIFIC_BINDINGS_JS: u32 = 24572;
pub const IDR_ENTRY_ID_MANAGER: u32 = 24573;
pub const IDR_EXTENSIONS_WEB_VIEW_ELEMENT_JS: u32 = 24574;
pub const IDR_EXTENSION_OPTIONS_JS: u32 = 24575;
pub const IDR_EXTENSION_OPTIONS_ELEMENT_JS: u32 = 24576;
pub const IDR_EXTENSION_OPTIONS_ATTRIBUTES_JS: u32 = 24577;
pub const IDR_EXTENSION_OPTIONS_CONSTANTS_JS: u32 = 24578;
pub const IDR_EXTENSION_OPTIONS_EVENTS_JS: u32 = 24579;
pub const IDR_EXTENSION_VIEW_JS: u32 = 24580;
pub const IDR_EXTENSION_VIEW_ELEMENT_JS: u32 = 24581;
pub const IDR_EXTENSION_VIEW_API_METHODS_JS: u32 = 24582;
pub const IDR_EXTENSION_VIEW_ATTRIBUTES_JS: u32 = 24583;
pub const IDR_EXTENSION_VIEW_CONSTANTS_JS: u32 = 24584;
pub const IDR_EXTENSION_VIEW_EVENTS_JS: u32 = 24585;
pub const IDR_EXTENSION_VIEW_INTERNAL_CUSTOM_BINDINGS_JS: u32 = 24586;
pub const IDR_FEEDBACK_PRIVATE_CUSTOM_BINDINGS_JS: u32 = 24587;
pub const IDR_GUEST_VIEW_ATTRIBUTES_JS: u32 = 24588;
pub const IDR_GUEST_VIEW_CONTAINER_JS: u32 = 24589;
pub const IDR_GUEST_VIEW_CONTAINER_ELEMENT_JS: u32 = 24590;
pub const IDR_GUEST_VIEW_DENY_JS: u32 = 24591;
pub const IDR_GUEST_VIEW_EVENTS_JS: u32 = 24592;
pub const IDR_GUEST_VIEW_IFRAME_CONTAINER_JS: u32 = 24593;
pub const IDR_GUEST_VIEW_IFRAME_JS: u32 = 24594;
pub const IDR_GUEST_VIEW_JS: u32 = 24595;
pub const IDR_IMAGE_UTIL_JS: u32 = 24596;
pub const IDR_KEEP_ALIVE_JS: u32 = 24597;
pub const IDR_KEEP_ALIVE_MOJOM_JS: u32 = 24598;
pub const IDR_MIME_HANDLER_PRIVATE_CUSTOM_BINDINGS_JS: u32 = 24599;
pub const IDR_MIME_HANDLER_MOJOM_JS: u32 = 24600;
pub const IDR_SAFE_METHODS_JS: u32 = 24601;
pub const IDR_SET_ICON_JS: u32 = 24602;
pub const IDR_TEST_CUSTOM_BINDINGS_JS: u32 = 24603;
pub const IDR_UNCAUGHT_EXCEPTION_HANDLER_JS: u32 = 24604;
pub const IDR_UTILS_JS: u32 = 24605;
pub const IDR_WEB_VIEW_ACTION_REQUESTS_JS: u32 = 24606;
pub const IDR_WEB_VIEW_API_METHODS_JS: u32 = 24607;
pub const IDR_WEB_VIEW_ATTRIBUTES_JS: u32 = 24608;
pub const IDR_WEB_VIEW_CONSTANTS_JS: u32 = 24609;
pub const IDR_WEB_VIEW_EVENTS_JS: u32 = 24610;
pub const IDR_WEB_VIEW_INTERNAL_CUSTOM_BINDINGS_JS: u32 = 24611;
pub const IDR_WEB_VIEW_JS: u32 = 24612;
pub const IDR_WEB_VIEW_ELEMENT_JS: u32 = 24613;
pub const IDR_AUTOMATION_CUSTOM_BINDINGS_JS: u32 = 24614;
pub const IDR_AUTOMATION_EVENT_JS: u32 = 24615;
pub const IDR_AUTOMATION_NODE_JS: u32 = 24616;
pub const IDR_APP_RUNTIME_CUSTOM_BINDINGS_JS: u32 = 24617;
pub const IDR_APP_WINDOW_CUSTOM_BINDINGS_JS: u32 = 24618;
pub const IDR_CONTEXT_MENUS_CUSTOM_BINDINGS_JS: u32 = 24619;
pub const IDR_CONTEXT_MENUS_HANDLERS_JS: u32 = 24620;
pub const IDR_DECLARATIVE_WEBREQUEST_CUSTOM_BINDINGS_JS: u32 = 24621;
pub const IDR_DISPLAY_SOURCE_CUSTOM_BINDINGS_JS: u32 = 24622;
pub const IDR_FILE_ENTRY_BINDING_UTIL_JS: u32 = 24623;
pub const IDR_FILE_SYSTEM_CUSTOM_BINDINGS_JS: u32 = 24624;
pub const IDR_GREASEMONKEY_API_JS: u32 = 24625;
pub const IDR_MOJO_PRIVATE_CUSTOM_BINDINGS_JS: u32 = 24626;
pub const IDR_PERMISSIONS_CUSTOM_BINDINGS_JS: u32 = 24627;
pub const IDR_PRINTER_PROVIDER_CUSTOM_BINDINGS_JS: u32 = 24628;
pub const IDR_SERVICE_WORKER_BINDINGS_JS: u32 = 24629;
pub const IDR_WEB_REQUEST_CUSTOM_BINDINGS_JS: u32 = 24630;
pub const IDR_WEB_REQUEST_EVENT_JS: u32 = 24631;
pub const IDR_WEB_VIEW_REQUEST_CUSTOM_BINDINGS_JS: u32 = 24632;
pub const IDR_PLATFORM_APP_JS: u32 = 24633;
pub const IDR_EXTENSION_FONTS_CSS: u32 = 24634;
pub const IDR_PLATFORM_APP_CSS: u32 = 24700;
pub const IDR_EXTENSION_CSS: u32 = 24701;
pub const IDR_EXTENSION_API_FEATURES: u32 = 24560;
pub const IDR_NET_INTERNALS_INDEX_HTML: u32 = 12600;
pub const IDR_NET_INTERNALS_INDEX_JS: u32 = 12601;
pub const IDR_DIR_HEADER_HTML: u32 = 24890;
pub const IDR_SAD_WEBVIEW: u32 = 14340;
pub const IDR_SAD_PLUGIN: u32 = 14341;
pub const IDR_BLOCKED_PLUGIN_HTML: u32 = 14230;
pub const IDR_DISABLED_PLUGIN_HTML: u32 = 14231;
pub const IDR_PDF_PLUGIN_HTML: u32 = 14232;
pub const IDR_PREFER_HTML_PLUGIN_HTML: u32 = 14233;
pub const IDR_PLUGIN_POSTER_HTML: u32 = 14234;
pub const IDR_BROWSER_ACTION_CUSTOM_BINDINGS_JS: u32 = 14235;
pub const IDR_CAST_STREAMING_RTP_STREAM_CUSTOM_BINDINGS_JS: u32 = 14236;
pub const IDR_CAST_STREAMING_SESSION_CUSTOM_BINDINGS_JS: u32 = 14237;
pub const IDR_CAST_STREAMING_UDP_TRANSPORT_CUSTOM_BINDINGS_JS: u32 = 14238;
pub const IDR_CAST_STREAMING_RECEIVER_SESSION_CUSTOM_BINDINGS_JS: u32 = 14239;
pub const IDR_CHROME_WEB_VIEW_INTERNAL_CUSTOM_BINDINGS_JS: u32 = 14240;
pub const IDR_CHROME_WEB_VIEW_JS: u32 = 14241;
pub const IDR_DECLARATIVE_CONTENT_CUSTOM_BINDINGS_JS: u32 = 14242;
pub const IDR_DESKTOP_CAPTURE_CUSTOM_BINDINGS_JS: u32 = 14243;
pub const IDR_DEVELOPER_PRIVATE_CUSTOM_BINDINGS_JS: u32 = 14244;
pub const IDR_DOWNLOADS_CUSTOM_BINDINGS_JS: u32 = 14245;
pub const IDR_GCM_CUSTOM_BINDINGS_JS: u32 = 14246;
pub const IDR_IDENTITY_CUSTOM_BINDINGS_JS: u32 = 14247;
pub const IDR_IMAGE_WRITER_PRIVATE_CUSTOM_BINDINGS_JS: u32 = 14248;
pub const IDR_INPUT_IME_CUSTOM_BINDINGS_JS: u32 = 14249;
pub const IDR_MEDIA_GALLERIES_CUSTOM_BINDINGS_JS: u32 = 14250;
pub const IDR_NOTIFICATIONS_CUSTOM_BINDINGS_JS: u32 = 14251;
pub const IDR_OMNIBOX_CUSTOM_BINDINGS_JS: u32 = 14252;
pub const IDR_PAGE_ACTION_CUSTOM_BINDINGS_JS: u32 = 14253;
pub const IDR_PAGE_CAPTURE_CUSTOM_BINDINGS_JS: u32 = 14254;
pub const IDR_SYNC_FILE_SYSTEM_CUSTOM_BINDINGS_JS: u32 = 14255;
pub const IDR_SYSTEM_INDICATOR_CUSTOM_BINDINGS_JS: u32 = 14256;
pub const IDR_TAB_CAPTURE_CUSTOM_BINDINGS_JS: u32 = 14257;
pub const IDR_TTS_CUSTOM_BINDINGS_JS: u32 = 14258;
pub const IDR_TTS_ENGINE_CUSTOM_BINDINGS_JS: u32 = 14259;
pub const IDR_WEBRTC_DESKTOP_CAPTURE_PRIVATE_CUSTOM_BINDINGS_JS: u32 = 14260;
pub const IDR_WEBRTC_LOGGING_PRIVATE_CUSTOM_BINDINGS_JS: u32 = 14261;
pub const IDR_MEDIA_CONTROLLER_MOJOM_JS: u32 = 14280;
pub const IDR_MEDIA_ROUTER_MOJOM_JS: u32 = 14281;
pub const IDR_MEDIA_ROUTER_BINDINGS_JS: u32 = 14282;
pub const IDR_MEDIA_STATUS_MOJOM_JS: u32 = 14283;
pub const IDR_MIRRORING_SERVICE_HOST_MOJOM_JS: u32 = 14284;
pub const IDR_MIRRORING_CAST_MESSAGE_CHANNEL_MOJOM_JS: u32 = 14285;
pub const IDR_MIRRORING_SESSION_OBSERVER_MOJOM_JS: u32 = 14286;
pub const IDR_MIRRORING_SESSION_PARAMETERS_JS: u32 = 14287;
pub const IDR_MOJO_TIME_MOJOM_JS: u32 = 14288;
pub const IDR_MOJO_UNGUESSABLE_TOKEN_MOJOM_JS: u32 = 14289;
pub const IDR_MOJO_IP_ADDRESS_MOJOM_JS: u32 = 14290;
pub const IDR_MOJO_IP_ENDPOINT_MOJOM_JS: u32 = 14291;
pub const IDR_ORIGIN_MOJOM_JS: u32 = 14292;
pub const IDR_MOJO_URL_MOJOM_JS: u32 = 14293;
pub const IDR_MEDIA_REMOTING_JS: u32 = 14294;
pub const IDR_REMOTING_COMMON_JS: u32 = 14295;
pub const IDR_TRACING_HTML: u32 = 20550;
pub const IDR_TRACING_JS: u32 = 20551;
pub const IDR_AURA_CURSOR_ALIAS: u32 = 27000;
pub const IDR_AURA_CURSOR_BIG_ALIAS: u32 = 27001;
pub const IDR_AURA_CURSOR_BIG_CELL: u32 = 27002;
pub const IDR_AURA_CURSOR_BIG_COL_RESIZE: u32 = 27003;
pub const IDR_AURA_CURSOR_BIG_CONTEXT_MENU: u32 = 27004;
pub const IDR_AURA_CURSOR_BIG_COPY: u32 = 27005;
pub const IDR_AURA_CURSOR_BIG_CROSSHAIR: u32 = 27006;
pub const IDR_AURA_CURSOR_BIG_EAST_RESIZE: u32 = 27007;
pub const IDR_AURA_CURSOR_BIG_EAST_WEST_RESIZE: u32 = 27008;
pub const IDR_AURA_CURSOR_BIG_GRAB: u32 = 27009;
pub const IDR_AURA_CURSOR_BIG_GRABBING: u32 = 27010;
pub const IDR_AURA_CURSOR_BIG_HAND: u32 = 27011;
pub const IDR_AURA_CURSOR_BIG_HELP: u32 = 27012;
pub const IDR_AURA_CURSOR_BIG_IBEAM: u32 = 27013;
pub const IDR_AURA_CURSOR_BIG_MOVE: u32 = 27014;
pub const IDR_AURA_CURSOR_BIG_NORTH_EAST_RESIZE: u32 = 27015;
pub const IDR_AURA_CURSOR_BIG_NORTH_EAST_SOUTH_WEST_RESIZE: u32 = 27016;
pub const IDR_AURA_CURSOR_BIG_NORTH_RESIZE: u32 = 27017;
pub const IDR_AURA_CURSOR_BIG_NORTH_SOUTH_RESIZE: u32 = 27018;
pub const IDR_AURA_CURSOR_BIG_NORTH_WEST_RESIZE: u32 = 27019;
pub const IDR_AURA_CURSOR_BIG_NORTH_WEST_SOUTH_EAST_RESIZE: u32 = 27020;
pub const IDR_AURA_CURSOR_BIG_NO_DROP: u32 = 27021;
pub const IDR_AURA_CURSOR_BIG_PTR: u32 = 27022;
pub const IDR_AURA_CURSOR_BIG_ROW_RESIZE: u32 = 27023;
pub const IDR_AURA_CURSOR_BIG_SOUTH_EAST_RESIZE: u32 = 27024;
pub const IDR_AURA_CURSOR_BIG_SOUTH_RESIZE: u32 = 27025;
pub const IDR_AURA_CURSOR_BIG_SOUTH_WEST_RESIZE: u32 = 27026;
pub const IDR_AURA_CURSOR_BIG_WEST_RESIZE: u32 = 27027;
pub const IDR_AURA_CURSOR_BIG_XTERM_HORIZ: u32 = 27028;
pub const IDR_AURA_CURSOR_BIG_ZOOM_IN: u32 = 27029;
pub const IDR_AURA_CURSOR_BIG_ZOOM_OUT: u32 = 27030;
pub const IDR_AURA_CURSOR_CELL: u32 = 27031;
pub const IDR_AURA_CURSOR_COL_RESIZE: u32 = 27032;
pub const IDR_AURA_CURSOR_CONTEXT_MENU: u32 = 27033;
pub const IDR_AURA_CURSOR_COPY: u32 = 27034;
pub const IDR_AURA_CURSOR_CROSSHAIR: u32 = 27035;
pub const IDR_AURA_CURSOR_EAST_RESIZE: u32 = 27036;
pub const IDR_AURA_CURSOR_EAST_WEST_RESIZE: u32 = 27037;
pub const IDR_AURA_CURSOR_GRAB: u32 = 27038;
pub const IDR_AURA_CURSOR_GRABBING: u32 = 27039;
pub const IDR_AURA_CURSOR_HAND: u32 = 27040;
pub const IDR_AURA_CURSOR_HELP: u32 = 27041;
pub const IDR_AURA_CURSOR_IBEAM: u32 = 27042;
pub const IDR_AURA_CURSOR_MOVE: u32 = 27043;
pub const IDR_AURA_CURSOR_NORTH_EAST_RESIZE: u32 = 27044;
pub const IDR_AURA_CURSOR_NORTH_EAST_SOUTH_WEST_RESIZE: u32 = 27045;
pub const IDR_AURA_CURSOR_NORTH_RESIZE: u32 = 27046;
pub const IDR_AURA_CURSOR_NORTH_SOUTH_RESIZE: u32 = 27047;
pub const IDR_AURA_CURSOR_NORTH_WEST_RESIZE: u32 = 27048;
pub const IDR_AURA_CURSOR_NORTH_WEST_SOUTH_EAST_RESIZE: u32 = 27049;
pub const IDR_AURA_CURSOR_NO_DROP: u32 = 27050;
pub const IDR_AURA_CURSOR_PTR: u32 = 27051;
pub const IDR_AURA_CURSOR_ROW_RESIZE: u32 = 27052;
pub const IDR_AURA_CURSOR_SOUTH_EAST_RESIZE: u32 = 27053;
pub const IDR_AURA_CURSOR_SOUTH_RESIZE: u32 = 27054;
pub const IDR_AURA_CURSOR_SOUTH_WEST_RESIZE: u32 = 27055;
pub const IDR_AURA_CURSOR_THROBBER: u32 = 27056;
pub const IDR_AURA_CURSOR_WEST_RESIZE: u32 = 27057;
pub const IDR_AURA_CURSOR_XTERM_HORIZ: u32 = 27058;
pub const IDR_AURA_CURSOR_ZOOM_IN: u32 = 27059;
pub const IDR_AURA_CURSOR_ZOOM_OUT: u32 = 27060;
pub const IDR_CLOSE_2: u32 = 27061;
pub const IDR_CLOSE_2_H: u32 = 27062;
pub const IDR_CLOSE_2_MASK: u32 = 27063;
pub const IDR_CLOSE_2_P: u32 = 27064;
pub const IDR_CLOSE_3_MASK: u32 = 27065;
pub const IDR_CLOSE_DIALOG: u32 = 27066;
pub const IDR_CLOSE_DIALOG_H: u32 = 27067;
pub const IDR_CLOSE_DIALOG_P: u32 = 27068;
pub const IDR_DISABLE: u32 = 27069;
pub const IDR_DISABLE_H: u32 = 27070;
pub const IDR_DISABLE_P: u32 = 27071;
pub const IDR_DEFAULT_FAVICON: u32 = 280;
pub const IDR_DEFAULT_FAVICON_DARK: u32 = 27072;
pub const IDR_DEFAULT_FAVICON_32: u32 = 27073;
pub const IDR_DEFAULT_FAVICON_DARK_32: u32 = 27074;
pub const IDR_DEFAULT_FAVICON_64: u32 = 27075;
pub const IDR_DEFAULT_FAVICON_DARK_64: u32 = 27076;
pub const IDR_EASY_UNLOCK_HARDLOCKED: u32 = 27077;
pub const IDR_EASY_UNLOCK_HARDLOCKED_HOVER: u32 = 27078;
pub const IDR_EASY_UNLOCK_HARDLOCKED_PRESSED: u32 = 27079;
pub const IDR_EASY_UNLOCK_LOCKED: u32 = 27080;
pub const IDR_EASY_UNLOCK_LOCKED_HOVER: u32 = 27081;
pub const IDR_EASY_UNLOCK_LOCKED_PRESSED: u32 = 27082;
pub const IDR_EASY_UNLOCK_LOCKED_TO_BE_ACTIVATED: u32 = 27083;
pub const IDR_EASY_UNLOCK_LOCKED_TO_BE_ACTIVATED_HOVER: u32 = 27084;
pub const IDR_EASY_UNLOCK_LOCKED_TO_BE_ACTIVATED_PRESSED: u32 = 27085;
pub const IDR_EASY_UNLOCK_LOCKED_WITH_PROXIMITY_HINT: u32 = 27086;
pub const IDR_EASY_UNLOCK_LOCKED_WITH_PROXIMITY_HINT_HOVER: u32 = 27087;
pub const IDR_EASY_UNLOCK_LOCKED_WITH_PROXIMITY_HINT_PRESSED: u32 = 27088;
pub const IDR_EASY_UNLOCK_SPINNER: u32 = 27089;
pub const IDR_EASY_UNLOCK_UNLOCKED: u32 = 27090;
pub const IDR_EASY_UNLOCK_UNLOCKED_HOVER: u32 = 27091;
pub const IDR_EASY_UNLOCK_UNLOCKED_PRESSED: u32 = 27092;
pub const IDR_FOLDER_CLOSED: u32 = 27093;
pub const IDR_FOLDER_CLOSED_RTL: u32 = 27094;
pub const IDR_SEND_TAB_TO_SELF_ICON_LIGHT: u32 = 27095;
pub const IDR_SEND_TAB_TO_SELF_ICON_DARK: u32 = 27096;
pub const IDR_NOTIFICATION_SETTINGS: u32 = 27097;
pub const IDR_NTP_DEFAULT_FAVICON: u32 = 27098;
pub const IDR_OOBE_ACTION_BOX_BUTTON_HOVER: u32 = 27099;
pub const IDR_OOBE_ACTION_BOX_BUTTON_NORMAL: u32 = 27100;
pub const IDR_OOBE_ACTION_BOX_BUTTON_PRESSED: u32 = 27101;
pub const IDR_SIGNAL_0_BAR: u32 = 27102;
pub const IDR_SIGNAL_1_BAR: u32 = 27103;
pub const IDR_SIGNAL_2_BAR: u32 = 27104;
pub const IDR_SIGNAL_3_BAR: u32 = 27105;
pub const IDR_SIGNAL_4_BAR: u32 = 27106;
pub const IDR_SIGNAL_0_BAR_SELECTED: u32 = 27107;
pub const IDR_SIGNAL_1_BAR_SELECTED: u32 = 27108;
pub const IDR_SIGNAL_2_BAR_SELECTED: u32 = 27109;
pub const IDR_SIGNAL_3_BAR_SELECTED: u32 = 27110;
pub const IDR_SIGNAL_4_BAR_SELECTED: u32 = 27111;
pub const IDR_TEXT_SELECTION_HANDLE_CENTER: u32 = 27112;
pub const IDR_TEXT_SELECTION_HANDLE_LEFT: u32 = 27113;
pub const IDR_TEXT_SELECTION_HANDLE_RIGHT: u32 = 27114;
pub const IDR_TOUCH_DRAG_TIP_COPY: u32 = 27115;
pub const IDR_TOUCH_DRAG_TIP_MOVE: u32 = 27116;
pub const IDR_TOUCH_DRAG_TIP_LINK: u32 = 27117;
pub const IDR_TOUCH_DRAG_TIP_NODROP: u32 = 27118;
pub const IDR_APP_TOP_CENTER: u32 = 27580;
pub const IDR_APP_TOP_LEFT: u32 = 27581;
pub const IDR_APP_TOP_RIGHT: u32 = 27582;
pub const IDR_BUTTON_DISABLED: u32 = 27583;
pub const IDR_BUTTON_FOCUSED_HOVER: u32 = 27584;
pub const IDR_BUTTON_FOCUSED_NORMAL: u32 = 27585;
pub const IDR_BUTTON_FOCUSED_PRESSED: u32 = 27586;
pub const IDR_BUTTON_HOVER: u32 = 27587;
pub const IDR_BUTTON_NORMAL: u32 = 27588;
pub const IDR_BUTTON_PRESSED: u32 = 27589;
pub const IDR_CHECKBOX: u32 = 27590;
pub const IDR_CHECKBOX_CHECKED: u32 = 27591;
pub const IDR_CHECKBOX_CHECKED_DISABLED: u32 = 27592;
pub const IDR_CHECKBOX_CHECKED_HOVER: u32 = 27593;
pub const IDR_CHECKBOX_CHECKED_PRESSED: u32 = 27594;
pub const IDR_CHECKBOX_DISABLED: u32 = 27595;
pub const IDR_CHECKBOX_FOCUSED: u32 = 27596;
pub const IDR_CHECKBOX_FOCUSED_CHECKED: u32 = 27597;
pub const IDR_CHECKBOX_FOCUSED_CHECKED_HOVER: u32 = 27598;
pub const IDR_CHECKBOX_FOCUSED_CHECKED_PRESSED: u32 = 27599;
pub const IDR_CHECKBOX_FOCUSED_HOVER: u32 = 27600;
pub const IDR_CHECKBOX_FOCUSED_PRESSED: u32 = 27601;
pub const IDR_CHECKBOX_HOVER: u32 = 27602;
pub const IDR_CHECKBOX_PRESSED: u32 = 27603;
pub const IDR_CLOSE: u32 = 27604;
pub const IDR_CLOSE_H: u32 = 27605;
pub const IDR_CLOSE_P: u32 = 27606;
pub const IDR_CONTENT_BOTTOM_CENTER: u32 = 27607;
pub const IDR_CONTENT_BOTTOM_LEFT_CORNER: u32 = 27608;
pub const IDR_CONTENT_BOTTOM_RIGHT_CORNER: u32 = 27609;
pub const IDR_CONTENT_LEFT_SIDE: u32 = 27610;
pub const IDR_CONTENT_RIGHT_SIDE: u32 = 27611;
pub const IDR_FOLDER_OPEN: u32 = 27612;
pub const IDR_FOLDER_OPEN_RTL: u32 = 27613;
pub const IDR_FRAME: u32 = 27614;
pub const IDR_FRAME_INACTIVE: u32 = 27615;
pub const IDR_MAXIMIZE: u32 = 27616;
pub const IDR_MAXIMIZE_H: u32 = 27617;
pub const IDR_MAXIMIZE_P: u32 = 27618;
pub const IDR_MINIMIZE: u32 = 27619;
pub const IDR_MINIMIZE_H: u32 = 27620;
pub const IDR_MINIMIZE_P: u32 = 27621;
pub const IDR_RESTORE: u32 = 27622;
pub const IDR_RESTORE_H: u32 = 27623;
pub const IDR_RESTORE_P: u32 = 27624;
pub const IDR_TEXTBUTTON_HOVER_BOTTOM: u32 = 27625;
pub const IDR_TEXTBUTTON_HOVER_BOTTOM_LEFT: u32 = 27626;
pub const IDR_TEXTBUTTON_HOVER_BOTTOM_RIGHT: u32 = 27627;
pub const IDR_TEXTBUTTON_HOVER_CENTER: u32 = 27628;
pub const IDR_TEXTBUTTON_HOVER_LEFT: u32 = 27629;
pub const IDR_TEXTBUTTON_HOVER_RIGHT: u32 = 27630;
pub const IDR_TEXTBUTTON_HOVER_TOP: u32 = 27631;
pub const IDR_TEXTBUTTON_HOVER_TOP_LEFT: u32 = 27632;
pub const IDR_TEXTBUTTON_HOVER_TOP_RIGHT: u32 = 27633;
pub const IDR_TEXTBUTTON_PRESSED_BOTTOM: u32 = 27634;
pub const IDR_TEXTBUTTON_PRESSED_BOTTOM_LEFT: u32 = 27635;
pub const IDR_TEXTBUTTON_PRESSED_BOTTOM_RIGHT: u32 = 27636;
pub const IDR_TEXTBUTTON_PRESSED_CENTER: u32 = 27637;
pub const IDR_TEXTBUTTON_PRESSED_LEFT: u32 = 27638;
pub const IDR_TEXTBUTTON_PRESSED_RIGHT: u32 = 27639;
pub const IDR_TEXTBUTTON_PRESSED_TOP: u32 = 27640;
pub const IDR_TEXTBUTTON_PRESSED_TOP_LEFT: u32 = 27641;
pub const IDR_TEXTBUTTON_PRESSED_TOP_RIGHT: u32 = 27642;
pub const IDR_WINDOW_BOTTOM_CENTER: u32 = 27643;
pub const IDR_WINDOW_BOTTOM_LEFT_CORNER: u32 = 27644;
pub const IDR_WINDOW_BOTTOM_RIGHT_CORNER: u32 = 27645;
pub const IDR_WINDOW_LEFT_SIDE: u32 = 27646;
pub const IDR_WINDOW_RIGHT_SIDE: u32 = 27647;
pub const IDR_WINDOW_TOP_CENTER: u32 = 27648;
pub const IDR_WINDOW_TOP_LEFT_CORNER: u32 = 27649;
pub const IDR_WINDOW_TOP_RIGHT_CORNER: u32 = 27650;
pub const IDR_WEBUI_JSTEMPLATE_JS: u32 = 27881;
pub const IDR_WEBUI_ROBOTO_ROBOTO_REGULAR_WOFF2: u32 = 27882;
pub const IDR_WEBUI_ROBOTO_ROBOTO_MEDIUM_WOFF2: u32 = 27883;
pub const IDR_WEBUI_ROBOTO_ROBOTO_BOLD_WOFF2: u32 = 27884;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON: u32 = 27885;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_PRESSED: u32 = 27886;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_HOVER: u32 = 27887;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_DISABLED: u32 = 27888;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_FOCUSED: u32 = 27889;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_FOCUSED_PRESSED: u32 = 27890;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_FOCUSED_HOVER: u32 = 27891;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON: u32 = 27892;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_PRESSED: u32 = 27893;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_HOVER: u32 = 27894;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_DISABLED: u32 = 27895;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_FOCUSED: u32 = 27896;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_FOCUSED_PRESSED: u32 = 27897;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_FOCUSED_HOVER: u32 = 27898;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX: u32 = 27899;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_HOVER: u32 = 27900;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_PRESSED: u32 = 27901;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED: u32 = 27902;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED_HOVER: u32 = 27903;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED_PRESSED: u32 = 27904;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_INACTIVE: u32 = 27905;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_CHECKED: u32 = 27906;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_CHECKED_HOVER: u32 = 27907;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_CHECKED_PRESSED: u32 = 27908;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED_CHECKED: u32 = 27909;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED_CHECKED_HOVER: u32 = 27910;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED_CHECKED_PRESSED: u32 = 27911;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_CHECKED_INACTIVE: u32 = 27912;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_CLOSE: u32 = 27913;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_MAXIMIZE: u32 = 27914;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_MINIMIZE: u32 = 27915;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE: u32 = 27916;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_HOVER: u32 = 27917;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_PRESSED: u32 = 27918;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_2X: u32 = 27919;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_2X_PRESSED: u32 = 27920;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_2X_HOVER: u32 = 27921;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_2X_DISABLED: u32 = 27922;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_2X_FOCUSED: u32 = 27923;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_2X_FOCUSED_PRESSED: u32 = 27924;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_2X_FOCUSED_HOVER: u32 = 27925;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_2X: u32 = 27926;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_2X_PRESSED: u32 = 27927;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_2X_HOVER: u32 = 27928;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_2X_DISABLED: u32 = 27929;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_2X_FOCUSED: u32 = 27930;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_2X_FOCUSED_PRESSED: u32 = 27931;
pub const IDR_WEBUI_IMAGES_APPS_BLUE_BUTTON_2X_FOCUSED_HOVER: u32 = 27932;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_2X: u32 = 27933;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_2X_HOVER: u32 = 27934;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_2X_PRESSED: u32 = 27935;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_2X_FOCUSED: u32 = 27936;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_2X_FOCUSED_HOVER: u32 = 27937;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_2X_FOCUSED_PRESSED: u32 = 27938;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_INACTIVE_2X: u32 = 27939;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_CHECKED_2X: u32 = 27940;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_CHECKED_2X_HOVER: u32 = 27941;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_CHECKED_2X_PRESSED: u32 = 27942;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED_CHECKED_2X: u32 = 27943;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED_CHECKED_2X_HOVER: u32 = 27944;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_FOCUSED_CHECKED_2X_PRESSED: u32 = 27945;
pub const IDR_WEBUI_IMAGES_APPS_CHECKBOX_CHECKED_INACTIVE_2X: u32 = 27946;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_2X_CLOSE: u32 = 27947;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_2X_MAXIMIZE: u32 = 27948;
pub const IDR_WEBUI_IMAGES_APPS_TOPBAR_BUTTON_2X_MINIMIZE: u32 = 27949;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_2X: u32 = 27950;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_HOVER_2X: u32 = 27951;
pub const IDR_WEBUI_IMAGES_APPS_BUTTON_BUTTER_BAR_CLOSE_PRESSED_2X: u32 = 27952;
pub const IDR_WEBUI_IMAGES_ADD: u32 = 27953;
pub const IDR_WEBUI_IMAGES_CHECK: u32 = 27954;
pub const IDR_WEBUI_IMAGES_CHECKBOX_BLACK: u32 = 27955;
pub const IDR_WEBUI_IMAGES_CHECKBOX_WHITE: u32 = 27956;
pub const IDR_WEBUI_IMAGES_DISABLED_SELECT: u32 = 27957;
pub const IDR_WEBUI_IMAGES_ERROR: u32 = 27958;
pub const IDR_WEBUI_IMAGES_ERROR_BADGE: u32 = 27959;
pub const IDR_WEBUI_IMAGES_GOOGLE_LOGO: u32 = 27960;
pub const IDR_WEBUI_IMAGES_SELECT: u32 = 27961;
pub const IDR_WEBUI_IMAGES_THROBBER_MEDIUM: u32 = 27962;
pub const IDR_WEBUI_IMAGES_THROBBER_SMALL: u32 = 27963;
pub const IDR_WEBUI_IMAGES_TRASH: u32 = 27964;
pub const IDR_WEBUI_IMAGES_ARROW_DOWN: u32 = 27969;
pub const IDR_WEBUI_IMAGES_ARROW_RIGHT: u32 = 27970;
pub const IDR_WEBUI_IMAGES_DARK_ARROW_DOWN: u32 = 27971;
pub const IDR_WEBUI_IMAGES_DARK_ARROW_RIGHT: u32 = 27972;
pub const IDR_WEBUI_IMAGES_DARK_ICON_ARROW_BACK: u32 = 27973;
pub const IDR_WEBUI_IMAGES_DARK_ICON_ARROW_DROPDOWN: u32 = 27974;
pub const IDR_WEBUI_IMAGES_DARK_ICON_CANCEL: u32 = 27975;
pub const IDR_WEBUI_IMAGES_DARK_ICON_CLEAR: u32 = 27976;
pub const IDR_WEBUI_IMAGES_DARK_ICON_DELETE_GRAY: u32 = 27977;
pub const IDR_WEBUI_IMAGES_DARK_ICON_EXPAND_LESS: u32 = 27978;
pub const IDR_WEBUI_IMAGES_DARK_ICON_EXPAND_MORE: u32 = 27979;
pub const IDR_WEBUI_IMAGES_DARK_ICON_MORE_VERT: u32 = 27980;
pub const IDR_WEBUI_IMAGES_DARK_ICON_PICTURE_DELETE: u32 = 27981;
pub const IDR_WEBUI_IMAGES_DARK_ICON_REFRESH: u32 = 27982;
pub const IDR_WEBUI_IMAGES_DARK_ICON_SETTINGS: u32 = 27983;
pub const IDR_WEBUI_IMAGES_DARK_ICON_SEARCH: u32 = 27984;
pub const IDR_WEBUI_IMAGES_DARK_ICON_TOOLBAR_CANCEL: u32 = 27985;
pub const IDR_WEBUI_IMAGES_DARK_ICON_VISIBILITY: u32 = 27986;
pub const IDR_WEBUI_IMAGES_DARK_ICON_VISIBILITY_OFF: u32 = 27987;
pub const IDR_WEBUI_IMAGES_ICON_ARROW_BACK: u32 = 27988;
pub const IDR_WEBUI_IMAGES_ICON_ARROW_DROPDOWN: u32 = 27989;
pub const IDR_WEBUI_IMAGES_ICON_CANCEL: u32 = 27990;
pub const IDR_WEBUI_IMAGES_ICON_CLEAR: u32 = 27991;
pub const IDR_WEBUI_IMAGES_ICON_DELETE_GRAY: u32 = 27992;
pub const IDR_WEBUI_IMAGES_ICON_EXPAND_LESS: u32 = 27993;
pub const IDR_WEBUI_IMAGES_ICON_EXPAND_MORE: u32 = 27994;
pub const IDR_WEBUI_IMAGES_ICON_EXTERNAL: u32 = 27995;
pub const IDR_WEBUI_IMAGES_ICON_MORE_VERT: u32 = 27996;
pub const IDR_WEBUI_IMAGES_ICON_PICTURE_DELETE: u32 = 27997;
pub const IDR_WEBUI_IMAGES_ICON_REFRESH: u32 = 27998;
pub const IDR_WEBUI_IMAGES_ICON_SEARCH: u32 = 27999;
pub const IDR_WEBUI_IMAGES_ICON_SETTINGS: u32 = 28000;
pub const IDR_WEBUI_IMAGES_ICON_TOOLBAR_CANCEL: u32 = 28001;
pub const IDR_WEBUI_IMAGES_ICON_VISIBILITY: u32 = 28002;
pub const IDR_WEBUI_IMAGES_ICON_VISIBILITY_OFF: u32 = 28003;
pub const IDR_WEBUI_IMAGES_OPEN_IN_NEW: u32 = 28004;
pub const IDR_WEBUI_CSS_ACTION_LINK: u32 = 28080;
pub const IDR_WEBUI_CSS_APPS_COMMON: u32 = 28081;
pub const IDR_WEBUI_CSS_APPS_TOPBUTTON_BAR: u32 = 28082;
pub const IDR_WEBUI_CSS_BUBBLE: u32 = 28083;
pub const IDR_WEBUI_CSS_BUBBLE_BUTTON: u32 = 28084;
pub const IDR_WEBUI_CSS_BUTTER_BAR: u32 = 28085;
pub const IDR_WEBUI_CSS_CHROME: u32 = 28086;
pub const IDR_WEBUI_CSS_CONTROLLED_INDICATOR: u32 = 28087;
pub const IDR_WEBUI_CSS_DIALOGS: u32 = 28088;
pub const IDR_WEBUI_CSS_I18N_PROCESS: u32 = 28089;
pub const IDR_WEBUI_CSS_LIST: u32 = 28090;
pub const IDR_WEBUI_CSS_MENU: u32 = 28091;
pub const IDR_WEBUI_CSS_MENU_BUTTON: u32 = 28092;
pub const IDR_WEBUI_CSS_TEXT_DEFAULTS: u32 = 28093;
pub const IDR_WEBUI_CSS_TEXT_DEFAULTS_MD: u32 = 28094;
pub const IDR_WEBUI_CSS_OVERLAY: u32 = 28095;
pub const IDR_WEBUI_CSS_ROBOTO: u32 = 28096;
pub const IDR_WEBUI_CSS_SPINNER: u32 = 28097;
pub const IDR_WEBUI_CSS_TABLE: u32 = 28098;
pub const IDR_WEBUI_CSS_TABS: u32 = 28099;
pub const IDR_WEBUI_CSS_THROBBER: u32 = 28100;
pub const IDR_WEBUI_CSS_TRASH: u32 = 28101;
pub const IDR_WEBUI_CSS_TREE: u32 = 28102;
pub const IDR_WEBUI_CSS_WIDGETS: u32 = 28103;
pub const IDR_WEBUI_HTML_ACTION_LINK: u32 = 28104;
pub const IDR_WEBUI_HTML_ASSERT: u32 = 28105;
pub const IDR_WEBUI_HTML_PROMISE_RESOLVER: u32 = 28106;
pub const IDR_WEBUI_HTML_CR: u32 = 28107;
pub const IDR_WEBUI_HTML_CR_EVENT_TARGET: u32 = 28108;
pub const IDR_WEBUI_HTML_CR_UI: u32 = 28109;
pub const IDR_WEBUI_HTML_CR_UI_ARRAY_DATA_MODEL: u32 = 28110;
pub const IDR_WEBUI_HTML_CR_UI_COMMAND: u32 = 28111;
pub const IDR_WEBUI_HTML_CR_UI_CONTEXT_MENU_HANDLER: u32 = 28112;
pub const IDR_WEBUI_HTML_CR_UI_DRAG_WRAPPER: u32 = 28113;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_GRID: u32 = 28114;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_MANAGER: u32 = 28115;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_OUTLINE_MANAGER: u32 = 28116;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_ROW: u32 = 28117;
pub const IDR_WEBUI_HTML_CR_UI_LIST: u32 = 28118;
pub const IDR_WEBUI_HTML_CR_UI_LIST_ITEM: u32 = 28119;
pub const IDR_WEBUI_HTML_CR_UI_LIST_SELECTION_CONTROLLER: u32 = 28120;
pub const IDR_WEBUI_HTML_CR_UI_LIST_SELECTION_MODEL: u32 = 28121;
pub const IDR_WEBUI_HTML_CR_UI_MENU: u32 = 28122;
pub const IDR_WEBUI_HTML_CR_UI_MENU_BUTTON: u32 = 28123;
pub const IDR_WEBUI_HTML_CR_UI_MENU_ITEM: u32 = 28124;
pub const IDR_WEBUI_HTML_CR_UI_OVERLAY: u32 = 28125;
pub const IDR_WEBUI_HTML_CR_UI_PAGE_MANAGER_PAGE: u32 = 28126;
pub const IDR_WEBUI_HTML_CR_UI_PAGE_MANAGER_PAGE_MANAGER: u32 = 28127;
pub const IDR_WEBUI_HTML_CR_UI_POSITION_UTIL: u32 = 28128;
pub const IDR_WEBUI_HTML_CR_UI_SPLITTER: u32 = 28129;
pub const IDR_WEBUI_HTML_CR_UI_STORE: u32 = 28130;
pub const IDR_WEBUI_HTML_CR_UI_STORE_CLIENT: u32 = 28131;
pub const IDR_WEBUI_HTML_DARK_MODE: u32 = 28132;
pub const IDR_WEBUI_HTML_EVENT_TRACKER: u32 = 28133;
pub const IDR_WEBUI_HTML_ICON: u32 = 28134;
pub const IDR_WEBUI_HTML_LOAD_TIME_DATA: u32 = 28135;
pub const IDR_WEBUI_HTML_PARSE_HTML_SUBSET: u32 = 28136;
pub const IDR_WEBUI_HTML_UTIL: u32 = 28137;
pub const IDR_WEBUI_JS_ACTION_LINK: u32 = 28138;
pub const IDR_WEBUI_JS_ASSERT: u32 = 28139;
pub const IDR_WEBUI_JS_PROMISE_RESOLVER: u32 = 28140;
pub const IDR_WEBUI_JS_CR: u32 = 28141;
pub const IDR_WEBUI_JS_CR_EVENT_TARGET: u32 = 28142;
pub const IDR_WEBUI_JS_CR_UI: u32 = 28143;
pub const IDR_WEBUI_JS_CR_UI_ARRAY_DATA_MODEL: u32 = 28144;
pub const IDR_WEBUI_JS_CR_UI_AUTOCOMPLETE_LIST: u32 = 28145;
pub const IDR_WEBUI_JS_CR_UI_BUBBLE: u32 = 28146;
pub const IDR_WEBUI_JS_CR_UI_BUBBLE_BUTTON: u32 = 28147;
pub const IDR_WEBUI_JS_CR_UI_CARD_SLIDER: u32 = 28148;
pub const IDR_WEBUI_JS_CR_UI_COMMAND: u32 = 28149;
pub const IDR_WEBUI_JS_CR_UI_CONTEXT_MENU_HANDLER: u32 = 28150;
pub const IDR_WEBUI_JS_CR_UI_CONTROLLED_INDICATOR: u32 = 28151;
pub const IDR_WEBUI_JS_CR_UI_DIALOGS: u32 = 28152;
pub const IDR_WEBUI_JS_CR_UI_DRAG_WRAPPER: u32 = 28153;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_GRID: u32 = 28154;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_MANAGER: u32 = 28155;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_OUTLINE_MANAGER: u32 = 28156;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_ROW: u32 = 28157;
pub const IDR_WEBUI_JS_CR_UI_LIST: u32 = 28158;
pub const IDR_WEBUI_JS_CR_UI_LIST_ITEM: u32 = 28159;
pub const IDR_WEBUI_JS_CR_UI_LIST_SELECTION_CONTROLLER: u32 = 28160;
pub const IDR_WEBUI_JS_CR_UI_LIST_SELECTION_MODEL: u32 = 28161;
pub const IDR_WEBUI_JS_CR_UI_LIST_SINGLE_SELECTION_MODEL: u32 = 28162;
pub const IDR_WEBUI_JS_CR_UI_MENU: u32 = 28163;
pub const IDR_WEBUI_JS_CR_UI_MENU_BUTTON: u32 = 28164;
pub const IDR_WEBUI_JS_CR_UI_MENU_ITEM: u32 = 28165;
pub const IDR_WEBUI_JS_CR_UI_NODE_UTILS: u32 = 28166;
pub const IDR_WEBUI_JS_CR_UI_OVERLAY: u32 = 28167;
pub const IDR_WEBUI_JS_CR_UI_PAGE_MANAGER_PAGE: u32 = 28168;
pub const IDR_WEBUI_JS_CR_UI_PAGE_MANAGER_PAGE_MANAGER: u32 = 28169;
pub const IDR_WEBUI_JS_CR_UI_POSITION_UTIL: u32 = 28170;
pub const IDR_WEBUI_JS_CR_UI_SPLITTER: u32 = 28171;
pub const IDR_WEBUI_JS_CR_UI_STORE: u32 = 28172;
pub const IDR_WEBUI_JS_CR_UI_STORE_CLENT: u32 = 28173;
pub const IDR_WEBUI_JS_CR_UI_GRID: u32 = 28174;
pub const IDR_WEBUI_JS_CR_UI_TABLE: u32 = 28175;
pub const IDR_WEBUI_JS_CR_UI_TABLE_COLUMN: u32 = 28176;
pub const IDR_WEBUI_JS_CR_UI_TABLE_COLUMN_MODEL: u32 = 28177;
pub const IDR_WEBUI_JS_CR_UI_TABLE_HEADER: u32 = 28178;
pub const IDR_WEBUI_JS_CR_UI_TABLE_LIST: u32 = 28179;
pub const IDR_WEBUI_JS_CR_UI_TABLE_SPLITTER: u32 = 28180;
pub const IDR_WEBUI_JS_CR_UI_TABS: u32 = 28181;
pub const IDR_WEBUI_JS_CR_UI_TREE: u32 = 28182;
pub const IDR_WEBUI_JS_CR_UI_TOUCH_HANDLER: u32 = 28183;
pub const IDR_WEBUI_JS_DARK_MODE: u32 = 28184;
pub const IDR_WEBUI_JS_EVENT_TRACKER: u32 = 28185;
pub const IDR_WEBUI_JS_ICON: u32 = 28186;
pub const IDR_WEBUI_JS_I18N_TEMPLATE_NO_PROCESS: u32 = 28187;
pub const IDR_WEBUI_JS_LOAD_TIME_DATA: u32 = 28188;
pub const IDR_WEBUI_JS_PARSE_HTML_SUBSET: u32 = 28189;
pub const IDR_WEBUI_JS_UTIL: u32 = 28190;
pub const IDR_WEBUI_JS_WEBUI_RESOURCE_TEST: u32 = 28191;
pub const IDR_WEBUI_MANAGED_FOOTNOTE_HTML: u32 = 28298;
pub const IDR_WEBUI_MANAGED_FOOTNOTE_JS: u32 = 28299;
pub const IDR_CR_ELEMENTS_CR_ACTION_MENU_HTML: u32 = 28300;
pub const IDR_CR_ELEMENTS_CR_ACTION_MENU_JS: u32 = 28301;
pub const IDR_CR_ELEMENTS_CR_CHECKBOX_HTML: u32 = 28302;
pub const IDR_CR_ELEMENTS_CR_CHECKBOX_JS: u32 = 28303;
pub const IDR_CR_ELEMENTS_CR_CONTAINER_SHADOW_BEHAVIOR_HTML: u32 = 28304;
pub const IDR_CR_ELEMENTS_CR_CONTAINER_SHADOW_BEHAVIOR_JS: u32 = 28305;
pub const IDR_CR_ELEMENTS_CR_INPUT_HTML: u32 = 28306;
pub const IDR_CR_ELEMENTS_CR_INPUT_JS: u32 = 28307;
pub const IDR_CR_ELEMENTS_CR_INPUT_STYLE_CSS_HTML: u32 = 28308;
pub const IDR_CR_ELEMENTS_CR_SCROLLABLE_BEHAVIOR_HTML: u32 = 28309;
pub const IDR_CR_ELEMENTS_CR_SCROLLABLE_BEHAVIOR_JS: u32 = 28310;
pub const IDR_CR_ELEMENTS_CR_DIALOG_HTML: u32 = 28311;
pub const IDR_CR_ELEMENTS_CR_DIALOG_JS: u32 = 28312;
pub const IDR_CR_ELEMENTS_CR_DRAWER_HTML: u32 = 28313;
pub const IDR_CR_ELEMENTS_CR_DRAWER_JS: u32 = 28314;
pub const IDR_CR_ELEMENTS_CR_EXPAND_BUTTON_HTML: u32 = 28315;
pub const IDR_CR_ELEMENTS_CR_EXPAND_BUTTON_JS: u32 = 28316;
pub const IDR_CR_ELEMENTS_CR_ICON_BUTTON_HTML: u32 = 28317;
pub const IDR_CR_ELEMENTS_CR_ICON_BUTTON_JS: u32 = 28318;
pub const IDR_CR_ELEMENTS_ICONS_HTML: u32 = 28319;
pub const IDR_CR_ELEMENTS_CR_LAZY_RENDER_HTML: u32 = 28320;
pub const IDR_CR_ELEMENTS_CR_LAZY_RENDER_JS: u32 = 28321;
pub const IDR_CR_ELEMENTS_CR_LINK_ROW_HTML: u32 = 28322;
pub const IDR_CR_ELEMENTS_CR_LINK_ROW_JS: u32 = 28323;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_HTML: u32 = 28324;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_JS: u32 = 28325;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_BEHAVIOR_HTML: u32 = 28326;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_BEHAVIOR_JS: u32 = 28327;
pub const IDR_CR_ELEMENTS_CR_RADIO_BUTTON_STYLE_CSS_HTML: u32 = 28328;
pub const IDR_CR_ELEMENTS_CR_RADIO_GROUP_HTML: u32 = 28329;
pub const IDR_CR_ELEMENTS_CR_RADIO_GROUP_JS: u32 = 28330;
pub const IDR_CR_ELEMENTS_CR_SLIDER_HTML: u32 = 28331;
pub const IDR_CR_ELEMENTS_CR_SLIDER_JS: u32 = 28332;
pub const IDR_CR_ELEMENTS_CR_VIEW_MANAGER_HTML: u32 = 28335;
pub const IDR_CR_ELEMENTS_CR_VIEW_MANAGER_JS: u32 = 28336;
pub const IDR_CR_ELEMENTS_CR_POLICY_INDICATOR_HTML: u32 = 28364;
pub const IDR_CR_ELEMENTS_CR_POLICY_INDICATOR_JS: u32 = 28365;
pub const IDR_CR_ELEMENTS_CR_POLICY_INDICATOR_BEHAVIOR_HTML: u32 = 28366;
pub const IDR_CR_ELEMENTS_CR_POLICY_INDICATOR_BEHAVIOR_JS: u32 = 28367;
pub const IDR_CR_ELEMENTS_CR_POLICY_PREF_BEHAVIOR_HTML: u32 = 28372;
pub const IDR_CR_ELEMENTS_CR_POLICY_PREF_BEHAVIOR_JS: u32 = 28373;
pub const IDR_CR_ELEMENTS_CR_POLICY_PREF_INDICATOR_JS: u32 = 28374;
pub const IDR_CR_ELEMENTS_CR_POLICY_PREF_INDICATOR_HTML: u32 = 28375;
pub const IDR_CR_ELEMENTS_CR_TOGGLE_HTML: u32 = 28376;
pub const IDR_CR_ELEMENTS_CR_TOGGLE_JS: u32 = 28377;
pub const IDR_CR_ELEMENTS_CR_TOOLTIP_ICON_HTML: u32 = 28378;
pub const IDR_CR_ELEMENTS_CR_TOOLTIP_ICON_JS: u32 = 28379;
pub const IDR_CR_ELEMENTS_CR_PROFILE_AVATAR_SELECTOR_HTML: u32 = 28380;
pub const IDR_CR_ELEMENTS_CR_PROFILE_AVATAR_SELECTOR_JS: u32 = 28381;
pub const IDR_CR_ELEMENTS_CR_PROFILE_AVATAR_ICON_SELECTOR_GRID_HTML: u32 = 28382;
pub const IDR_CR_ELEMENTS_CR_PROFILE_AVATAR_SELECTOR_GRID_JS: u32 = 28383;
pub const IDR_CR_ELEMENTS_CR_SEARCH_FIELD_HTML: u32 = 28384;
pub const IDR_CR_ELEMENTS_CR_SEARCH_FIELD_JS: u32 = 28385;
pub const IDR_CR_ELEMENTS_CR_SEARCH_FIELD_BEHAVIOR_HTML: u32 = 28386;
pub const IDR_CR_ELEMENTS_CR_SEARCH_FIELD_BEHAVIOR_JS: u32 = 28387;
pub const IDR_CR_ELEMENTS_CR_SHARED_STYLE_CSS_HTML: u32 = 28388;
pub const IDR_CR_ELEMENTS_CR_HIDDEN_STYLE_CSS_HTML: u32 = 28389;
pub const IDR_CR_ELEMENTS_CR_CR_ICONS_CSS_HTML: u32 = 28390;
pub const IDR_CR_ELEMENTS_PAPER_BUTTON_STYLE_CSS_HTML: u32 = 28391;
pub const IDR_CR_ELEMENTS_SEARCH_HIGHLIGHT_STYLE_CSS_HTML: u32 = 28392;
pub const IDR_CR_ELEMENTS_CR_SHARED_VARS_CSS_HTML: u32 = 28393;
pub const IDR_CR_ELEMENTS_CR_TABS_HTML: u32 = 28394;
pub const IDR_CR_ELEMENTS_CR_TABS_JS: u32 = 28395;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_HTML: u32 = 28396;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_JS: u32 = 28397;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_SEARCH_FIELD_HTML: u32 = 28398;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_SEARCH_FIELD_JS: u32 = 28399;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_SELECTION_OVERLAY_HTML: u32 = 28400;
pub const IDR_CR_ELEMENTS_CR_TOOLBAR_SELECTION_OVERLAY_JS: u32 = 28401;
pub const IDR_CR_ELEMENTS_CR_TOAST_HTML: u32 = 28402;
pub const IDR_CR_ELEMENTS_CR_TOAST_JS: u32 = 28403;
pub const IDR_CR_ELEMENTS_CR_TOAST_MANAGER_HTML: u32 = 28404;
pub const IDR_CR_ELEMENTS_CR_TOAST_MANAGER_JS: u32 = 28405;
pub const IDR_WEBUI_HTML_ACTION_LINK_CSS: u32 = 28406;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_ROW_BEHAVIOR: u32 = 28407;
pub const IDR_WEBUI_HTML_CR_UI_FOCUS_WITHOUT_INK: u32 = 28408;
pub const IDR_WEBUI_HTML_FIND_SHORTCUT_BEHAVIOR: u32 = 28409;
pub const IDR_WEBUI_HTML_I18N_BEHAVIOR: u32 = 28410;
pub const IDR_WEBUI_HTML_LIST_PROPERTY_UPDATE_BEHAVIOR: u32 = 28411;
pub const IDR_WEBUI_HTML_MD_SELECT_CSS_HTML: u32 = 28412;
pub const IDR_WEBUI_HTML_POLYMER: u32 = 28413;
pub const IDR_WEBUI_HTML_WEBUI_LISTENER_BEHAVIOR: u32 = 28414;
pub const IDR_WEBUI_HTML_SEARCH_HIGHLIGHT_UTILS: u32 = 28415;
pub const IDR_WEBUI_HTML_SUBPAGE_LOADER: u32 = 28416;
pub const IDR_WEBUI_CSS_MD_COLORS: u32 = 28417;
pub const IDR_WEBUI_JS_I18N_BEHAVIOR: u32 = 28418;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_ROW_BEHAVIOR: u32 = 28419;
pub const IDR_WEBUI_JS_CR_UI_FOCUS_WITHOUT_INK: u32 = 28420;
pub const IDR_WEBUI_JS_CRISPER_LOADER: u32 = 28421;
pub const IDR_WEBUI_JS_FIND_SHORTCUT_BEHAVIOR: u32 = 28422;
pub const IDR_WEBUI_JS_LIST_PROPERTY_UPDATE_BEHAVIOR: u32 = 28423;
pub const IDR_WEBUI_JS_POLYMER_CONFIG: u32 = 28424;
pub const IDR_WEBUI_JS_WEBUI_LISTENER_BEHAVIOR: u32 = 28425;
pub const IDR_WEBUI_JS_SEARCH_HIGHLIGHT_UTILS: u32 = 28426;
pub const IDR_WEBUI_JS_SUBPAGE_LOADER: u32 = 28427;
pub const IDR_POLYMER_1_0_FONT_ROBOTO_ROBOTO_HTML: u32 = 28428;
pub const IDR_POLYMER_1_0_HTML_IMPORTS_HTML_IMPORTS_MIN_JS: u32 = 28429;
pub const IDR_POLYMER_1_0_IRON_A11Y_ANNOUNCER_IRON_A11Y_ANNOUNCER_EXTRACTED_JS: u32 = 28431;
pub const IDR_POLYMER_1_0_IRON_A11Y_ANNOUNCER_IRON_A11Y_ANNOUNCER_HTML: u32 = 28432;
pub const IDR_POLYMER_1_0_IRON_A11Y_KEYS_BEHAVIOR_IRON_A11Y_KEYS_BEHAVIOR_EXTRACTED_JS: u32 = 28433;
pub const IDR_POLYMER_1_0_IRON_A11Y_KEYS_BEHAVIOR_IRON_A11Y_KEYS_BEHAVIOR_HTML: u32 = 28434;
pub const IDR_POLYMER_1_0_IRON_A11Y_KEYS_IRON_A11Y_KEYS_EXTRACTED_JS: u32 = 28435;
pub const IDR_POLYMER_1_0_IRON_A11Y_KEYS_IRON_A11Y_KEYS_HTML: u32 = 28436;
pub const IDR_POLYMER_1_0_IRON_BEHAVIORS_IRON_BUTTON_STATE_EXTRACTED_JS: u32 = 28437;
pub const IDR_POLYMER_1_0_IRON_BEHAVIORS_IRON_BUTTON_STATE_HTML: u32 = 28438;
pub const IDR_POLYMER_1_0_IRON_BEHAVIORS_IRON_CONTROL_STATE_EXTRACTED_JS: u32 = 28439;
pub const IDR_POLYMER_1_0_IRON_BEHAVIORS_IRON_CONTROL_STATE_HTML: u32 = 28440;
pub const IDR_POLYMER_1_0_IRON_COLLAPSE_IRON_COLLAPSE_EXTRACTED_JS: u32 = 28441;
pub const IDR_POLYMER_1_0_IRON_COLLAPSE_IRON_COLLAPSE_HTML: u32 = 28442;
pub const IDR_POLYMER_1_0_IRON_FIT_BEHAVIOR_IRON_FIT_BEHAVIOR_EXTRACTED_JS: u32 = 28447;
pub const IDR_POLYMER_1_0_IRON_FIT_BEHAVIOR_IRON_FIT_BEHAVIOR_HTML: u32 = 28448;
pub const IDR_POLYMER_1_0_IRON_FLEX_LAYOUT_IRON_FLEX_LAYOUT_CLASSES_HTML: u32 = 28449;
pub const IDR_POLYMER_1_0_IRON_FLEX_LAYOUT_IRON_FLEX_LAYOUT_HTML: u32 = 28450;
pub const IDR_POLYMER_1_0_IRON_ICON_IRON_ICON_EXTRACTED_JS: u32 = 28451;
pub const IDR_POLYMER_1_0_IRON_ICON_IRON_ICON_HTML: u32 = 28452;
pub const IDR_POLYMER_1_0_IRON_ICONSET_SVG_IRON_ICONSET_SVG_EXTRACTED_JS: u32 = 28453;
pub const IDR_POLYMER_1_0_IRON_ICONSET_SVG_IRON_ICONSET_SVG_HTML: u32 = 28454;
pub const IDR_POLYMER_1_0_IRON_LIST_IRON_LIST_EXTRACTED_JS: u32 = 28457;
pub const IDR_POLYMER_1_0_IRON_LIST_IRON_LIST_HTML: u32 = 28458;
pub const IDR_POLYMER_1_0_IRON_LOCATION_IRON_LOCATION_EXTRACTED_JS: u32 = 28459;
pub const IDR_POLYMER_1_0_IRON_LOCATION_IRON_LOCATION_HTML: u32 = 28460;
pub const IDR_POLYMER_1_0_IRON_LOCATION_IRON_QUERY_PARAMS_EXTRACTED_JS: u32 = 28461;
pub const IDR_POLYMER_1_0_IRON_LOCATION_IRON_QUERY_PARAMS_HTML: u32 = 28462;
pub const IDR_POLYMER_1_0_IRON_MEDIA_QUERY_IRON_MEDIA_QUERY_EXTRACTED_JS: u32 = 28463;
pub const IDR_POLYMER_1_0_IRON_MEDIA_QUERY_IRON_MEDIA_QUERY_HTML: u32 = 28464;
pub const IDR_POLYMER_1_0_IRON_META_IRON_META_EXTRACTED_JS: u32 = 28465;
pub const IDR_POLYMER_1_0_IRON_META_IRON_META_HTML: u32 = 28466;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_FOCUSABLES_HELPER_EXTRACTED_JS: u32 = 28467;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_FOCUSABLES_HELPER_HTML: u32 = 28468;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_OVERLAY_BACKDROP_EXTRACTED_JS: u32 = 28469;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_OVERLAY_BACKDROP_HTML: u32 = 28470;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_OVERLAY_BEHAVIOR_EXTRACTED_JS: u32 = 28471;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_OVERLAY_BEHAVIOR_HTML: u32 = 28472;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_OVERLAY_MANAGER_EXTRACTED_JS: u32 = 28473;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_OVERLAY_MANAGER_HTML: u32 = 28474;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_SCROLL_MANAGER_EXTRACTED_JS: u32 = 28475;
pub const IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_SCROLL_MANAGER_HTML: u32 = 28476;
pub const IDR_POLYMER_1_0_IRON_PAGES_IRON_PAGES_EXTRACTED_JS: u32 = 28477;
pub const IDR_POLYMER_1_0_IRON_PAGES_IRON_PAGES_HTML: u32 = 28478;
pub const IDR_POLYMER_1_0_IRON_RANGE_BEHAVIOR_IRON_RANGE_BEHAVIOR_EXTRACTED_JS: u32 = 28479;
pub const IDR_POLYMER_1_0_IRON_RANGE_BEHAVIOR_IRON_RANGE_BEHAVIOR_HTML: u32 = 28480;
pub const IDR_POLYMER_1_0_IRON_RESIZABLE_BEHAVIOR_IRON_RESIZABLE_BEHAVIOR_EXTRACTED_JS: u32 = 28481;
pub const IDR_POLYMER_1_0_IRON_RESIZABLE_BEHAVIOR_IRON_RESIZABLE_BEHAVIOR_HTML: u32 = 28482;
pub const IDR_POLYMER_1_0_IRON_SCROLL_TARGET_BEHAVIOR_IRON_SCROLL_TARGET_BEHAVIOR_EXTRACTED_JS:
    u32 = 28483;
pub const IDR_POLYMER_1_0_IRON_SCROLL_TARGET_BEHAVIOR_IRON_SCROLL_TARGET_BEHAVIOR_HTML: u32 = 28484;
pub const IDR_POLYMER_1_0_IRON_SCROLL_THRESHOLD_IRON_SCROLL_THRESHOLD_EXTRACTED_JS: u32 = 28485;
pub const IDR_POLYMER_1_0_IRON_SCROLL_THRESHOLD_IRON_SCROLL_THRESHOLD_HTML: u32 = 28486;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_MULTI_SELECTABLE_EXTRACTED_JS: u32 = 28487;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_MULTI_SELECTABLE_HTML: u32 = 28488;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTABLE_EXTRACTED_JS: u32 = 28489;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTABLE_HTML: u32 = 28490;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTION_EXTRACTED_JS: u32 = 28491;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTION_HTML: u32 = 28492;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTOR_EXTRACTED_JS: u32 = 28493;
pub const IDR_POLYMER_1_0_IRON_SELECTOR_IRON_SELECTOR_HTML: u32 = 28494;
pub const IDR_POLYMER_1_0_NEON_ANIMATION_WEB_ANIMATIONS_HTML: u32 = 28515;
pub const IDR_POLYMER_1_0_PAPER_BEHAVIORS_PAPER_BUTTON_BEHAVIOR_EXTRACTED_JS: u32 = 28516;
pub const IDR_POLYMER_1_0_PAPER_BEHAVIORS_PAPER_BUTTON_BEHAVIOR_HTML: u32 = 28517;
pub const IDR_POLYMER_1_0_PAPER_BEHAVIORS_PAPER_RIPPLE_BEHAVIOR_EXTRACTED_JS: u32 = 28518;
pub const IDR_POLYMER_1_0_PAPER_BEHAVIORS_PAPER_RIPPLE_BEHAVIOR_HTML: u32 = 28519;
pub const IDR_POLYMER_1_0_PAPER_BUTTON_PAPER_BUTTON_EXTRACTED_JS: u32 = 28520;
pub const IDR_POLYMER_1_0_PAPER_BUTTON_PAPER_BUTTON_HTML: u32 = 28521;
pub const IDR_POLYMER_1_0_PAPER_PROGRESS_PAPER_PROGRESS_EXTRACTED_JS: u32 = 28528;
pub const IDR_POLYMER_1_0_PAPER_PROGRESS_PAPER_PROGRESS_HTML: u32 = 28529;
pub const IDR_POLYMER_1_0_PAPER_RIPPLE_PAPER_RIPPLE_EXTRACTED_JS: u32 = 28530;
pub const IDR_POLYMER_1_0_PAPER_RIPPLE_PAPER_RIPPLE_HTML: u32 = 28531;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_BEHAVIOR_EXTRACTED_JS: u32 = 28532;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_BEHAVIOR_HTML: u32 = 28533;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_LITE_EXTRACTED_JS: u32 = 28534;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_LITE_HTML: u32 = 28535;
pub const IDR_POLYMER_1_0_PAPER_SPINNER_PAPER_SPINNER_STYLES_HTML: u32 = 28536;
pub const IDR_POLYMER_1_0_PAPER_STYLES_CLASSES_SHADOW_HTML: u32 = 28537;
pub const IDR_POLYMER_1_0_PAPER_STYLES_CLASSES_TYPOGRAPHY_HTML: u32 = 28538;
pub const IDR_POLYMER_1_0_PAPER_STYLES_COLOR_HTML: u32 = 28539;
pub const IDR_POLYMER_1_0_PAPER_STYLES_DEFAULT_THEME_HTML: u32 = 28540;
pub const IDR_POLYMER_1_0_PAPER_STYLES_ELEMENT_STYLES_PAPER_MATERIAL_STYLES_HTML: u32 = 28541;
pub const IDR_POLYMER_1_0_PAPER_STYLES_SHADOW_HTML: u32 = 28542;
pub const IDR_POLYMER_1_0_PAPER_STYLES_TYPOGRAPHY_HTML: u32 = 28543;
pub const IDR_POLYMER_1_0_PAPER_TOOLTIP_PAPER_TOOLTIP_EXTRACTED_JS: u32 = 28544;
pub const IDR_POLYMER_1_0_PAPER_TOOLTIP_PAPER_TOOLTIP_HTML: u32 = 28545;
pub const IDR_POLYMER_1_0_POLYMER2_POLYMER_EXTRACTED_JS: u32 = 28552;
pub const IDR_POLYMER_1_0_POLYMER2_POLYMER_HTML: u32 = 28553;
pub const IDR_POLYMER_1_0_WEB_ANIMATIONS_JS_WEB_ANIMATIONS_NEXT_LITE_MIN_JS: u32 = 28554;
pub const IDS_TEXT_FILES: u32 = 32000;
pub const IDS_CONTENT_CONTEXT_NO_SPELLING_SUGGESTIONS: u32 = 32001;
pub const IDS_SETTINGS_ABOUT_PROGRAM: u32 = 400;
pub const IDS_SETTINGS_GET_HELP_USING_CHROME: u32 = 401;
pub const IDS_SETTINGS_UPGRADE_UPDATING: u32 = 402;
pub const IDS_SETTINGS_UPGRADE_UPDATING_PERCENT: u32 = 403;
pub const IDS_SETTINGS_UPGRADE_SUCCESSFUL_RELAUNCH: u32 = 404;
pub const IDS_SETTINGS_UPGRADE_UP_TO_DATE: u32 = 405;
pub const IDS_SETTINGS_GOOGLE_PAYMENTS_CACHED: u32 = 406;
pub const IDS_SETTINGS_DEFAULT_BROWSER_DEFAULT: u32 = 407;
pub const IDS_SETTINGS_DEFAULT_BROWSER_MAKE_DEFAULT: u32 = 408;
pub const IDS_SETTINGS_DEFAULT_BROWSER_ERROR: u32 = 409;
pub const IDS_SETTINGS_DEFAULT_BROWSER_SECONDARY: u32 = 410;
pub const IDS_SETTINGS_IMPROVE_BROWSING_EXPERIENCE: u32 = 411;
pub const IDS_SETTINGS_SPELLING_DESCRIPTION_UNIFIED_CONSENT: u32 = 412;
pub const IDS_SETTINGS_RESTART_TO_APPLY_CHANGES: u32 = 413;
pub const IDS_SETTINGS_SIGNIN_ALLOWED: u32 = 414;
pub const IDS_SETTINGS_SIGNIN_ALLOWED_DESC: u32 = 415;
pub const IDS_SETTINGS_SYNC_DISCONNECT_DELETE_PROFILE_WARNING_WITH_COUNTS_SINGULAR: u32 = 416;
pub const IDS_SETTINGS_SYNC_DISCONNECT_DELETE_PROFILE_WARNING_WITH_COUNTS_PLURAL: u32 = 417;
pub const IDS_SETTINGS_SYNC_DISCONNECT_DELETE_PROFILE_WARNING_WITHOUT_COUNTS: u32 = 418;
pub const IDS_SETTINGS_PROFILE_NAME_AND_PICTURE: u32 = 419;
pub const IDS_SETTINGS_PEOPLE_SIGN_IN_PROMPT_SECONDARY_WITH_ACCOUNT: u32 = 420;
pub const IDS_SETTINGS_SYNC_SIGNIN: u32 = 421;
pub const IDS_SETTINGS_SYNC_DATA_ENCRYPTED_TEXT: u32 = 422;
pub const IDS_SETTINGS_SYNC_DISCONNECT_TITLE: u32 = 423;
pub const IDS_DRIVE_SUGGEST_PREF_DESC: u32 = 424;
pub const IDS_SETTINGS_SYNC_SIGN_IN_PROMPT_WITH_NO_ACCOUNT: u32 = 425;
pub const IDS_SETTINGS_SYNC_SIGN_IN_PROMPT_WITH_ACCOUNT: u32 = 426;
pub const IDS_SETTINGS_LANGUAGES_IS_DISPLAYED_IN_THIS_LANGUAGE: u32 = 427;
pub const IDS_SETTINGS_LANGUAGES_DISPLAY_IN_THIS_LANGUAGE: u32 = 428;
pub const IDS_SETTINGS_SYSTEM_BACKGROUND_APPS_LABEL: u32 = 429;
pub const IDS_SETTINGS_RESET_PROFILE_FEEDBACK: u32 = 430;
pub const IDS_PROFILES_DISCONNECT_MANAGED_PROFILE_TEXT: u32 = 431;
pub const IDS_PRODUCT_NAME: u32 = 169;
pub const IDS_SHORT_PRODUCT_NAME: u32 = 432;
pub const IDS_SXS_SHORTCUT_NAME: u32 = 433;
pub const IDS_SHORTCUT_NAME_BETA: u32 = 434;
pub const IDS_SHORTCUT_NAME_DEV: u32 = 435;
pub const IDS_PRODUCT_DESCRIPTION: u32 = 436;
pub const IDS_SHORT_PRODUCT_LOGO_ALT_TEXT: u32 = 439;
pub const IDS_PRODUCT_LOGO_ENTERPRISE_ALT_TEXT: u32 = 440;
pub const IDS_SHORTCUT_NEW_WINDOW: u32 = 441;
pub const IDS_BOOKMARK_SYNC_PROMO_LINK: u32 = 442;
pub const IDS_TASK_MANAGER_TITLE: u32 = 443;
pub const IDS_SESSION_CRASHED_VIEW_UMA_OPTIN: u32 = 444;
pub const IDS_BROWSER_WINDOW_TITLE_FORMAT: u32 = 222;
pub const IDS_ACCESSIBLE_BROWSER_WINDOW_TITLE_FORMAT: u32 = 445;
pub const IDS_ACCESSIBLE_BETA_BROWSER_WINDOW_TITLE_FORMAT: u32 = 446;
pub const IDS_ACCESSIBLE_DEV_BROWSER_WINDOW_TITLE_FORMAT: u32 = 447;
pub const IDS_ACCESSIBLE_CANARY_BROWSER_WINDOW_TITLE_FORMAT: u32 = 448;
pub const IDS_GET_HELP_USING_CHROME: u32 = 449;
pub const IDS_ABOUT_VERSION_COMPANY_NAME: u32 = 450;
pub const IDS_ABOUT_VERSION_COPYRIGHT: u32 = 451;
pub const IDS_ABOUT_TERMS_OF_SERVICE: u32 = 455;
pub const IDS_WIN_XP_VISTA_OBSOLETE: u32 = 457;
pub const IDS_ACCNAME_APP: u32 = 214;
pub const IDS_BROWSER_HUNGBROWSER_MESSAGE: u32 = 458;
pub const IDS_UNINSTALL_CLOSE_APP: u32 = 459;
pub const IDS_UNINSTALL_VERIFY: u32 = 460;
pub const IDS_UNINSTALL_CHROME: u32 = 461;
pub const IDS_FR_CUSTOMIZE_DEFAULT_BROWSER: u32 = 462;
pub const IDS_STATUS_TRAY_KEEP_CHROME_RUNNING_IN_BACKGROUND: u32 = 464;
pub const IDS_CANT_WRITE_USER_DIRECTORY_SUMMARY: u32 = 465;
pub const IDS_PROFILE_TOO_NEW_ERROR: u32 = 467;
pub const IDS_PREFERENCES_UNREADABLE_ERROR: u32 = 468;
pub const IDS_PREFERENCES_CORRUPT_ERROR: u32 = 469;
pub const IDS_CRASH_RECOVERY_TITLE: u32 = 178;
pub const IDS_CRASH_RECOVERY_CONTENT: u32 = 179;
pub const IDS_PASSWORD_GENERATION_PROMPT: u32 = 470;
pub const IDS_PASSWORD_MANAGER_TITLE_BRAND: u32 = 471;
pub const IDS_PASSWORDS_PAGE_AUTHENTICATION_PROMPT: u32 = 472;
pub const IDS_PASSWORDS_PAGE_EXPORT_AUTHENTICATION_PROMPT: u32 = 473;
pub const IDS_INSTALL_HIGHER_VERSION: u32 = 474;
pub const IDS_INSTALL_FAILED: u32 = 475;
pub const IDS_SAME_VERSION_REPAIR_FAILED: u32 = 476;
pub const IDS_SETUP_PATCH_FAILED: u32 = 477;
pub const IDS_INSTALL_OS_NOT_SUPPORTED: u32 = 478;
pub const IDS_INSTALL_OS_ERROR: u32 = 479;
pub const IDS_INSTALL_SINGLETON_ACQUISITION_FAILED: u32 = 480;
pub const IDS_INSTALL_TEMP_DIR_FAILED: u32 = 481;
pub const IDS_INSTALL_UNCOMPRESSION_FAILED: u32 = 482;
pub const IDS_INSTALL_INVALID_ARCHIVE: u32 = 483;
pub const IDS_INSTALL_INSUFFICIENT_RIGHTS: u32 = 484;
pub const IDS_INSTALL_EXISTING_VERSION_LAUNCHED: u32 = 485;
pub const IDS_SHORTCUT_TOOLTIP: u32 = 486;
pub const IDS_UNINSTALL_DELETE_PROFILE: u32 = 487;
pub const IDS_UNINSTALL_SET_DEFAULT_BROWSER: u32 = 488;
pub const IDS_UNINSTALL_BUTTON_TEXT: u32 = 489;
pub const IDS_DEFAULT_BROWSER_INFOBAR_TEXT: u32 = 490;
pub const IDS_TRY_TOAST_HEADING: u32 = 492;
pub const IDS_TRY_TOAST_HEADING2: u32 = 493;
pub const IDS_TRY_TOAST_HEADING3: u32 = 494;
pub const IDS_TRY_TOAST_HEADING4: u32 = 495;
pub const IDS_TRY_TOAST_HEADING_SKYPE: u32 = 496;
pub const IDS_PRINT_PREVIEW_NO_PLUGIN: u32 = 497;
pub const IDS_DOWNLOAD_STATUS_CRX_INSTALL_RUNNING: u32 = 498;
pub const IDS_PROMPT_DOWNLOAD_CHANGES_SETTINGS: u32 = 499;
pub const IDS_PROMPT_MALICIOUS_DOWNLOAD_URL: u32 = 500;
pub const IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT: u32 = 501;
pub const IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD: u32 = 502;
pub const IDS_BLOCK_REASON_UNWANTED_DOWNLOAD: u32 = 503;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_BROWSER_MESSAGE: u32 = 504;
pub const IDS_MISSING_GOOGLE_API_KEYS: u32 = 506;
pub const IDS_UPGRADE_SUCCESSFUL_RELAUNCH: u32 = 507;
pub const IDS_UPGRADE_UP_TO_DATE: u32 = 509;
pub const IDS_UPGRADE_UPDATING: u32 = 510;
pub const IDS_EXTENSION_INSTALLED_HEADING: u32 = 512;
pub const IDS_EXTENSION_INSTALLED_SYNC_PROMO_LINK_NEW: u32 = 513;
pub const IDS_EXTENSION_UNINSTALL_PROMPT_REMOVE_DATA_CHECKBOX: u32 = 514;
pub const IDS_EXTENSIONS_HIDE_BUTTON_IN_MENU: u32 = 515;
pub const IDS_REPORT_BUBBLE_TEXT: u32 = 516;
pub const IDS_EXTENSIONS_INCOGNITO_WARNING: u32 = 517;
pub const IDS_EXTENSIONS_UNINSTALL: u32 = 518;
pub const IDS_EXTENSIONS_SHORTCUT_SCOPE_IN_CHROME: u32 = 519;
pub const IDS_EXTENSIONS_MULTIPLE_UNSUPPORTED_DISABLED_BODY: u32 = 520;
pub const IDS_EXTENSIONS_SINGLE_UNSUPPORTED_DISABLED_BODY: u32 = 521;
pub const IDS_APPMENU_TOOLTIP: u32 = 215;
pub const IDS_APPMENU_TOOLTIP_UPDATE_AVAILABLE: u32 = 522;
pub const IDS_APPMENU_TOOLTIP_ALERT: u32 = 523;
pub const IDS_OPEN_IN_CHROME: u32 = 524;
pub const IDS_ABOUT: u32 = 525;
pub const IDS_UPDATE_NOW: u32 = 526;
pub const IDS_CHROME_SIGNIN_TITLE: u32 = 530;
pub const IDS_PROFILES_DICE_SIGNIN_PROMO: u32 = 531;
pub const IDS_PROFILES_DICE_SYNC_PROMO: u32 = 532;
pub const IDS_PROFILES_CONFIRM_SIGNIN_TUTORIAL_TITLE: u32 = 533;
pub const IDS_PROFILES_WELCOME_UPGRADE_TUTORIAL_TITLE: u32 = 534;
pub const IDS_PROFILES_WELCOME_UPGRADE_TUTORIAL_CONTENT_TEXT: u32 = 535;
pub const IDS_PROFILES_ACCOUNT_REMOVAL_TEXT: u32 = 536;
pub const IDS_PROFILES_PRIMARY_ACCOUNT_REMOVAL_TEXT: u32 = 537;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_TITLE_NEW: u32 = 538;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_MESSAGE_NEW: u32 = 539;
pub const IDS_ONE_CLICK_SIGNIN_BUBBLE_SYNC_DISABLED_MESSAGE: u32 = 540;
pub const IDS_SYNC_WRONG_EMAIL: u32 = 541;
pub const IDS_ONE_CLICK_SIGNIN_CONFIRM_EMAIL_DIALOG_MESSAGE: u32 = 542;
pub const IDS_SYNC_USED_PROFILE_ERROR: u32 = 543;
pub const IDS_ENTERPRISE_SIGNIN_TITLE: u32 = 544;
pub const IDS_ENTERPRISE_SIGNIN_EXPLANATION_WITHOUT_PROFILE_CREATION: u32 = 545;
pub const IDS_ENTERPRISE_SIGNIN_EXPLANATION_WITH_PROFILE_CREATION: u32 = 546;
pub const IDS_ABOUT_BROWSER_SWITCH_DESCRIPTION_UNKNOWN_BROWSER: u32 = 547;
pub const IDS_ABOUT_BROWSER_SWITCH_DESCRIPTION_KNOWN_BROWSER: u32 = 548;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_TITLE: u32 = 549;
pub const IDS_CHROME_CLEANUP_PROMPT_EXPLANATION: u32 = 550;
pub const IDS_SYNC_PASSPHRASE_ERROR_BUBBLE_VIEW_MESSAGE: u32 = 551;
pub const IDS_SYNC_SIGN_IN_ERROR_BUBBLE_VIEW_MESSAGE: u32 = 552;
pub const IDS_SYNC_UNAVAILABLE_ERROR_BUBBLE_VIEW_MESSAGE: u32 = 553;
pub const IDS_SYNC_OTHER_SIGN_IN_ERROR_BUBBLE_VIEW_MESSAGE: u32 = 554;
pub const IDS_APP_SHORTCUTS_SUBDIR_NAME: u32 = 562;
pub const IDS_APP_SHORTCUTS_SUBDIR_NAME_CANARY: u32 = 563;
pub const IDS_APP_SHORTCUTS_SUBDIR_NAME_BETA: u32 = 564;
pub const IDS_APP_SHORTCUTS_SUBDIR_NAME_DEV: u32 = 565;
pub const IDS_MEDIA_STREAM_STATUS_TRAY_TEXT_AUDIO_AND_VIDEO: u32 = 567;
pub const IDS_MEDIA_STREAM_STATUS_TRAY_TEXT_AUDIO_ONLY: u32 = 568;
pub const IDS_MEDIA_STREAM_STATUS_TRAY_TEXT_VIDEO_ONLY: u32 = 569;
pub const IDS_SUPERVISED_USER_CREATED_TEXT: u32 = 572;
pub const IDS_SUPERVISED_USERS_DEPRECATED_MESSAGE: u32 = 573;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_SYNC: u32 = 574;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_INTRO_TITLE: u32 = 575;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_INTRO_TEXT: u32 = 576;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_YOUR_CHROME_TITLE: u32 = 577;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_YOUR_CHROME_TEXT: u32 = 578;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_GUEST_TEXT: u32 = 579;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_FRIENDS_TEXT: u32 = 580;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_TEXT: u32 = 581;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_ADD_USER: u32 = 582;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_START_PAGES_SPECIFIC: u32 = 583;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_START_PAGES: u32 = 584;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_START_PAGES: u32 = 585;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_START_AND_HOME: u32 = 586;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_START_AND_SEARCH: u32 = 587;
pub const IDS_WEBSTORE_APP_DESCRIPTION: u32 = 172;
pub const IDS_INBOUND_MDNS_RULE_NAME: u32 = 588;
pub const IDS_INBOUND_MDNS_RULE_NAME_BETA: u32 = 589;
pub const IDS_INBOUND_MDNS_RULE_NAME_CANARY: u32 = 590;
pub const IDS_INBOUND_MDNS_RULE_NAME_DEV: u32 = 591;
pub const IDS_INBOUND_MDNS_RULE_DESCRIPTION: u32 = 592;
pub const IDS_INBOUND_MDNS_RULE_DESCRIPTION_BETA: u32 = 593;
pub const IDS_INBOUND_MDNS_RULE_DESCRIPTION_CANARY: u32 = 594;
pub const IDS_INBOUND_MDNS_RULE_DESCRIPTION_DEV: u32 = 595;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_BUBBLE_TEXT: u32 = 596;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_BUBBLE_TEXT_ONCE: u32 = 597;
pub const IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_TEXT: u32 = 598;
pub const IDS_CONTENT_CONTEXT_OPENLINKNEWTAB_INAPP: u32 = 599;
pub const IDS_CONTENT_CONTEXT_OPENLINKOFFTHERECORD_INAPP: u32 = 600;
pub const IDS_RESET_PROFILE_SETTINGS_FEEDBACK: u32 = 601;
pub const IDS_UPDATE_RECOMMENDED_DIALOG_TITLE: u32 = 602;
pub const IDS_UPDATE_RECOMMENDED: u32 = 603;
pub const IDS_RELAUNCH_AND_UPDATE: u32 = 604;
pub const IDS_UPDATE_OTHER_INSTANCES_SAME_USER_DIALOG_TITLE: u32 = 605;
pub const IDS_UPDATE_OTHER_INSTANCES_SAME_USER_DIALOG_MESSAGE: u32 = 606;
pub const IDS_UPDATE_OTHER_INSTANCES_OTHER_USER_AUTHENTICATION_PROMPT: u32 = 607;
pub const IDS_REINSTALL_APP: u32 = 608;
pub const IDS_UPGRADE_BUBBLE_MENU_ITEM: u32 = 609;
pub const IDS_UPGRADE_BUBBLE_TITLE: u32 = 610;
pub const IDS_UPGRADE_BUBBLE_TEXT: u32 = 611;
pub const IDS_SYNC_ERROR_USER_MENU_UPGRADE_MESSAGE: u32 = 612;
pub const IDS_SYNC_ERROR_USER_MENU_UPGRADE_BUTTON: u32 = 613;
pub const IDS_SYNC_UPGRADE_CLIENT: u32 = 614;
pub const IDS_SYNC_UPGRADE_CLIENT_LINK_LABEL: u32 = 615;
pub const IDS_RECOVERY_BUBBLE_TITLE: u32 = 616;
pub const IDS_RUN_RECOVERY: u32 = 617;
pub const IDS_RECOVERY_BUBBLE_TEXT: u32 = 618;
pub const IDS_CRITICAL_NOTIFICATION_TITLE: u32 = 619;
pub const IDS_CRITICAL_NOTIFICATION_TITLE_ALTERNATE: u32 = 620;
pub const IDS_CRITICAL_NOTIFICATION_TEXT: u32 = 621;
pub const IDS_FEEDBACK_SERVICE_DIALOG_TITLE: u32 = 622;
pub const IDS_FEEDBACK_SERVICE_DIALOG_EXPLANATION: u32 = 623;
pub const IDS_DESKTOP_MEDIA_PICKER_SOURCE_TYPE_TAB: u32 = 624;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TEXT: u32 = 626;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TEXT_WITH_PHONE_NUMBER: u32 = 627;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TEXT_V2: u32 = 628;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TEXT_WITH_PHONE_NUMBER_V2: u32 = 629;
pub const IDS_FOOTNOTE_DESKTOP_TO_IOS_PROMO_LINK: u32 = 630;
pub const IDS_METRO_FLOW_TAB_TITLE: u32 = 643;
pub const IDS_METRO_FLOW_TITLE_SHORT: u32 = 644;
pub const IDS_WELCOME_HEADER: u32 = 645;
pub const IDS_WELCOME_HEADER_AFTER_FIRST_RUN: u32 = 646;
pub const IDS_DICE_WELCOME_SECOND_HEADER: u32 = 647;
pub const IDS_DICE_WELCOME_DECLINE_BUTTON: u32 = 648;
pub const IDS_DICE_WELCOME_DESCRIPTION: u32 = 649;
pub const IDS_WIN10_WELCOME_HEADER: u32 = 650;
pub const IDS_WIN10_WELCOME_HEADER_AFTER_FIRST_RUN: u32 = 651;
pub const IDS_WIN10_WELCOME_MAKE_DEFAULT_SUBHEADING: u32 = 652;
pub const IDS_WIN10_WELCOME_PIN_SUBHEADING: u32 = 653;
pub const IDS_WIN10_WELCOME_SELECT: u32 = 654;
pub const IDS_WIN10_WELCOME_CLICK_SWITCH_ANYWAY: u32 = 655;
pub const IDS_WIN_NOTIFICATION_SETTINGS_CONTEXT_MENU_ITEM_NAME: u32 = 656;
pub const IDS_RELAUNCH_RECOMMENDED_TITLE: u32 = 657;
pub const IDS_RELAUNCH_RECOMMENDED_BODY: u32 = 658;
pub const IDS_RELAUNCH_REQUIRED_TITLE_DAYS: u32 = 659;
pub const IDS_RELAUNCH_REQUIRED_TITLE_HOURS: u32 = 660;
pub const IDS_RELAUNCH_REQUIRED_TITLE_MINUTES: u32 = 661;
pub const IDS_RELAUNCH_REQUIRED_TITLE_SECONDS: u32 = 662;
pub const IDS_RELAUNCH_REQUIRED_BODY: u32 = 663;
pub const IDS_ENTERPRISE_STARTUP_CLOUD_POLICY_ENROLLMENT_TOOLTIP: u32 = 664;
pub const IDS_ENTERPRISE_STARTUP_CLOUD_POLICY_ENROLLMENT_ERROR: u32 = 665;
pub const IDS_ENTERPRISE_STARTUP_RELAUNCH_BUTTON: u32 = 666;
pub const IDS_ENTERPRISE_STARTUP_CANCEL_BUTTON: u32 = 667;
pub const IDS_DESKTOP_MEDIA_PICKER_TITLE_WEB_CONTENTS_ONLY: u32 = 668;
pub const IDS_JAVASCRIPT_MESSAGEBOX_TITLE: u32 = 15100;
pub const IDS_JAVASCRIPT_MESSAGEBOX_TITLE_IFRAME: u32 = 15101;
pub const IDS_JAVASCRIPT_MESSAGEBOX_TITLE_NONSTANDARD_URL: u32 = 15102;
pub const IDS_JAVASCRIPT_MESSAGEBOX_TITLE_NONSTANDARD_URL_IFRAME: u32 = 15103;
pub const IDS_JAVASCRIPT_MESSAGEBOX_SUPPRESS_OPTION: u32 = 15104;
pub const IDS_BEFOREUNLOAD_MESSAGEBOX_TITLE: u32 = 15105;
pub const IDS_BEFOREUNLOAD_APP_MESSAGEBOX_TITLE: u32 = 15106;
pub const IDS_BEFOREUNLOAD_MESSAGEBOX_OK_BUTTON_LABEL: u32 = 15107;
pub const IDS_BEFOREUNLOAD_MESSAGEBOX_MESSAGE: u32 = 15108;
pub const IDS_BEFORERELOAD_MESSAGEBOX_TITLE: u32 = 15109;
pub const IDS_BEFORERELOAD_APP_MESSAGEBOX_TITLE: u32 = 15110;
pub const IDS_BEFORERELOAD_MESSAGEBOX_OK_BUTTON_LABEL: u32 = 15111;
pub const IDS_AUTOFILL_SIGNIN_PROMO_MESSAGE: u32 = 15120;
pub const IDS_AUTOFILL_SYNC_PROMO_MESSAGE: u32 = 15121;
pub const IDS_AUTOFILL_SIGNIN_PROMO_MESSAGE_DICE_DISABLED: u32 = 15122;
pub const IDS_AUTOFILL_SIGNIN_PROMO_LINK_DICE_DISABLED: u32 = 15123;
pub const IDS_AUTOFILL_NO_THANKS_DESKTOP_LOCAL_SAVE: u32 = 15124;
pub const IDS_AUTOFILL_NO_THANKS_DESKTOP_UPLOAD_SAVE: u32 = 15125;
pub const IDS_AUTOFILL_FIELD_LABEL_PHONE: u32 = 15130;
pub const IDS_AUTOFILL_FIELD_LABEL_BILLING_ADDRESS: u32 = 15131;
pub const IDS_AUTOFILL_SAVE_CARD_BUBBLE_LOCAL_SAVE_ACCEPT: u32 = 15133;
pub const IDS_AUTOFILL_SAVE_CARD_BUBBLE_UPLOAD_SAVE_ACCEPT: u32 = 15134;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_CONTINUE: u32 = 15136;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_LOCAL: u32 = 15137;
pub const IDS_AUTOFILL_FIX_FLOW_PROMPT_SAVE_CARD_LABEL: u32 = 15138;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD: u32 = 15139;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_V3: u32 = 15140;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_V4: u32 = 15141;
pub const IDS_AUTOFILL_CARD_SAVED: u32 = 15142;
pub const IDS_AUTOFILL_MANAGE_CARDS: u32 = 15143;
pub const IDS_AUTOFILL_DONE: u32 = 15144;
pub const IDS_AUTOFILL_FAILURE_BUBBLE_TITLE: u32 = 15145;
pub const IDS_AUTOFILL_FAILURE_BUBBLE_EXPLANATION: u32 = 15146;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION: u32 = 15147;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_V3: u32 = 15148;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_V3_WITH_DEVICE: u32 = 15149;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_V3_WITH_NAME: u32 = 15150;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_V3_WITH_NAME_AND_DEVICE: u32 = 15151;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_CARDHOLDER_NAME: u32 = 15152;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_CARDHOLDER_NAME_TOOLTIP: u32 = 15153;
pub const IDS_AUTOFILL_SAVE_CARD_CARDHOLDER_NAME_FIX_FLOW_HEADER: u32 = 15154;
pub const IDS_AUTOFILL_SAVE_CARD_UPDATE_EXPIRATION_DATE_TITLE: u32 = 15155;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_TOOLTIP: u32 = 15156;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_AND_CARDHOLDER_NAME_TOOLTIP: u32 = 15157;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_COPY_TEST_STORE_CARD: u32 = 15158;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_COPY_TEST_STORE_BILLING_DETAILS: u32 = 15159;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_COPY_TEST_ADD_CARD: u32 = 15160;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_TITLE_TO_CLOUD_COPY_TEST_CONFIRM_AND_SAVE_CARD: u32 = 15161;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_STORE_WITH_DEVICE: u32 = 15162;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_ADD_CARD_WITH_DEVICE: u32 =
    15163;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_CONFIRM_AND_SAVE_CARD_WITH_DEVICE : u32 = 15164 ;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_STORE: u32 = 15165;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_ADD_CARD: u32 = 15166;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_UPLOAD_EXPLANATION_COPY_TEST_CONFIRM_AND_SAVE_CARD: u32 =
    15167;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_ACCEPT_COPY_TEST_STORE: u32 = 15168;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_DECLINE_COPY_TEST_STORE: u32 = 15169;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_ACCEPT_COPY_TEST_ADD: u32 = 15170;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_DECLINE_COPY_TEST_ADD: u32 = 15171;
pub const IDS_AUTOFILL_SAVE_CARD_PROMPT_ACCEPT_COPY_TEST_CONFIRM_AND_SAVE: u32 = 15172;
pub const IDS_AUTOFILL_GOOGLE_PAY_LOGO_ACCESSIBLE_NAME: u32 = 15173;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_ANIMATION_LABEL: u32 = 15174;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_BUBBLE_TITLE: u32 = 15175;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_BUBBLE_BUTTON_LABEL: u32 = 15176;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_BUBBLE_BODY_TEXT: u32 = 15177;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TITLE_OFFER: u32 = 15178;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TITLE_DONE: u32 = 15179;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TITLE_FIX: u32 = 15180;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_CHECKBOX_UNCHECK_WARNING: u32 = 15181;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_OFFER: u32 = 15182;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_DONE: u32 = 15183;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_ERROR: u32 = 15184;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_FIX: u32 = 15185;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_MESSAGE_INVALID_CARD_REMOVED: u32 = 15186;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_SAVE: u32 = 15187;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_CANCEL: u32 = 15188;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_DONE: u32 = 15189;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_BUTTON_LABEL_VIEW_CARDS: u32 = 15190;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_LABEL_INVALID_CARDS: u32 = 15191;
pub const IDS_AUTOFILL_LOCAL_CARD_MIGRATION_DIALOG_TRASH_CAN_BUTTON_TOOLTIP: u32 = 15192;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_ERROR_TRY_AGAIN_CVC: u32 = 15193;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_ERROR_PERMANENT: u32 = 15198;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_ERROR_NETWORK: u32 = 15199;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_TITLE: u32 = 15200;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_EXPIRED_TITLE: u32 = 15201;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_INSTRUCTIONS: u32 = 15202;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_INSTRUCTIONS_LOCAL_CARD: u32 = 15203;
pub const IDS_AUTOFILL_CARD_UNMASK_CVC_IMAGE_DESCRIPTION: u32 = 15204;
pub const IDS_AUTOFILL_CARD_UNMASK_PROMPT_STORAGE_CHECKBOX: u32 = 15207;
pub const IDS_AUTOFILL_CARD_UNMASK_CONFIRM_BUTTON: u32 = 15209;
pub const IDS_AUTOFILL_CARD_UNMASK_EXPIRATION_MONTH: u32 = 15210;
pub const IDS_AUTOFILL_CARD_UNMASK_EXPIRATION_YEAR: u32 = 15211;
pub const IDS_AUTOFILL_CARD_UNMASK_VERIFICATION_IN_PROGRESS: u32 = 15212;
pub const IDS_AUTOFILL_CARD_UNMASK_VERIFICATION_SUCCESS: u32 = 15213;
pub const IDS_AUTOFILL_CARD_UNMASK_INVALID_EXPIRATION_DATE: u32 = 15214;
pub const IDS_AUTOFILL_EXPIRATION_DATE_SEPARATOR: u32 = 15215;
pub const IDS_AUTOFILL_CARD_UNMASK_NEW_CARD_LINK: u32 = 15216;
pub const IDS_AUTOFILL_DIALOG_PLACEHOLDER_CVC: u32 = 15217;
pub const IDS_AUTOFILL_WALLET_MANAGEMENT_LINK_TEXT: u32 = 15218;
pub const IDS_AUTOFILL_FROM_GOOGLE_ACCOUNT_LONG: u32 = 15219;
pub const IDS_AUTOFILL_CLEAR_FORM_MENU_ITEM: u32 = 15220;
pub const IDS_AUTOFILL_WARNING_INSECURE_CONNECTION: u32 = 15222;
pub const IDS_AUTOFILL_CREDIT_CARD_SIGNIN_PROMO: u32 = 15223;
pub const IDS_AUTOFILL_DELETE_AUTOCOMPLETE_SUGGESTION_CONFIRMATION_BODY: u32 = 15224;
pub const IDS_AUTOFILL_DELETE_CREDIT_CARD_SUGGESTION_CONFIRMATION_BODY: u32 = 15225;
pub const IDS_AUTOFILL_DELETE_PROFILE_SUGGESTION_CONFIRMATION_BODY: u32 = 15226;
pub const IDS_AUTOFILL_CC_AMEX: u32 = 15227;
pub const IDS_AUTOFILL_CC_AMEX_SHORT: u32 = 15228;
pub const IDS_AUTOFILL_CC_DINERS: u32 = 15229;
pub const IDS_AUTOFILL_CC_DISCOVER: u32 = 15230;
pub const IDS_AUTOFILL_CC_ELO: u32 = 15231;
pub const IDS_AUTOFILL_CC_GOOGLE_PAY: u32 = 15232;
pub const IDS_AUTOFILL_CC_JCB: u32 = 15233;
pub const IDS_AUTOFILL_CC_MASTERCARD: u32 = 15234;
pub const IDS_AUTOFILL_CC_MIR: u32 = 15235;
pub const IDS_AUTOFILL_CC_UNION_PAY: u32 = 15236;
pub const IDS_AUTOFILL_CC_VISA: u32 = 15237;
pub const IDS_AUTOFILL_CC_GENERIC: u32 = 15238;
pub const IDS_AUTOFILL_ADDRESS_SUMMARY_SEPARATOR: u32 = 15239;
pub const IDS_AUTOFILL_FIELD_LABEL_STATE: u32 = 15240;
pub const IDS_AUTOFILL_FIELD_LABEL_AREA: u32 = 15241;
pub const IDS_AUTOFILL_FIELD_LABEL_COUNTY: u32 = 15242;
pub const IDS_AUTOFILL_FIELD_LABEL_DEPARTMENT: u32 = 15243;
pub const IDS_AUTOFILL_FIELD_LABEL_DISTRICT: u32 = 15244;
pub const IDS_AUTOFILL_FIELD_LABEL_EMIRATE: u32 = 15245;
pub const IDS_AUTOFILL_FIELD_LABEL_ISLAND: u32 = 15246;
pub const IDS_AUTOFILL_FIELD_LABEL_PARISH: u32 = 15247;
pub const IDS_AUTOFILL_FIELD_LABEL_PREFECTURE: u32 = 15248;
pub const IDS_AUTOFILL_FIELD_LABEL_PROVINCE: u32 = 15249;
pub const IDS_AUTOFILL_FIELD_LABEL_ZIP_CODE: u32 = 15250;
pub const IDS_AUTOFILL_FIELD_LABEL_POSTAL_CODE: u32 = 15251;
pub const IDS_AUTOFILL_MANAGE: u32 = 15252;
pub const IDS_AUTOFILL_MANAGE_ADDRESSES: u32 = 15253;
pub const IDS_AUTOFILL_MANAGE_PAYMENT_METHODS: u32 = 15254;
pub const IDS_AUTOFILL_MANAGE_PASSWORDS: u32 = 15255;
pub const IDS_AUTOFILL_SCAN_CREDIT_CARD: u32 = 15256;
pub const IDS_AUTOFILL_SHOW_ALL_SAVED_FALLBACK: u32 = 15257;
pub const IDS_AUTOFILL_SHOW_ACCOUNT_CARDS: u32 = 15258;
pub const IDS_AUTOFILL_POPUP_ACCESSIBLE_NODE_DATA: u32 = 15259;
pub const IDS_AUTOFILL_SUGGESTION_LABEL_SEPARATOR: u32 = 15260;
pub const IDS_AUTOFILL_CREDIT_CARD_EXPIRATION_DATE_ABBR: u32 = 15261;
pub const IDS_AUTOFILL_CREDIT_CARD_EXPIRATION_DATE_ABBR_V2: u32 = 15262;
pub const IDS_AUTOFILL_CREDIT_CARD_TWO_LINE_LABEL_FROM_NAME: u32 = 15263;
pub const IDS_AUTOFILL_CREDIT_CARD_TWO_LINE_LABEL_FROM_CARD_NUMBER: u32 = 15264;
pub const IDS_AUTOFILL_LOADING_REGIONS: u32 = 15265;
pub const IDS_AUTOFILL_SELECT: u32 = 15266;
pub const IDS_AUTOFILL_NO_SAVED_ADDRESS: u32 = 15267;
pub const IDS_AUTOFILL_ADDRESSES: u32 = 15268;
pub const IDS_AUTOFILL_ENABLE_PROFILES_TOGGLE_SUBLABEL: u32 = 15269;
pub const IDS_AUTOFILL_ENABLE_CREDIT_CARDS_TOGGLE_SUBLABEL: u32 = 15270;
pub const IDS_AUTOFILL_ADDRESSES_SETTINGS_TITLE: u32 = 15271;
pub const IDS_AUTOFILL_PAYMENT_METHODS: u32 = 15272;
pub const IDS_AUTOFILL_ENABLE_PROFILES_TOGGLE_LABEL: u32 = 15273;
pub const IDS_AUTOFILL_ENABLE_CREDIT_CARDS_TOGGLE_LABEL: u32 = 15274;
pub const IDS_AUTOFILL_ENABLE_PAYMENTS_INTEGRATION_CHECKBOX_LABEL: u32 = 15275;
pub const IDS_BOOKMARK_BAR_FOLDER_NAME: u32 = 166;
pub const IDS_BOOKMARK_BAR_MOBILE_FOLDER_NAME: u32 = 168;
pub const IDS_BOOKMARK_BAR_OTHER_FOLDER_NAME: u32 = 167;
pub const IDS_BOOKMARK_BAR_MANAGED_FOLDER_DOMAIN_NAME: u32 = 15280;
pub const IDS_BOOKMARK_BAR_MANAGED_FOLDER_DEFAULT_NAME: u32 = 180;
pub const IDS_BOOKMARK_EDITOR_TITLE: u32 = 15281;
pub const IDS_BOOKMARK_EDITOR_NEW_FOLDER_NAME: u32 = 15282;
pub const IDS_BOOKMARK_BUBBLE_REMOVE_BOOKMARK: u32 = 15283;
pub const IDS_BOOKMARK_MANAGER_NAME_INPUT_PLACE_HOLDER: u32 = 15284;
pub const IDS_BOOKMARK_MANAGER_URL_INPUT_PLACE_HOLDER: u32 = 15285;
pub const IDS_TOOLTIP_STAR: u32 = 15287;
pub const IDS_CLEAR_BROWSING_DATA_CALCULATING: u32 = 15288;
pub const IDS_DEL_BROWSING_HISTORY_COUNTER: u32 = 15289;
pub const IDS_DEL_BROWSING_HISTORY_COUNTER_SYNCED: u32 = 15290;
pub const IDS_DEL_CACHE_COUNTER_UPPER_ESTIMATE: u32 = 15291;
pub const IDS_DEL_CACHE_COUNTER_ALMOST_EMPTY: u32 = 15292;
pub const IDS_DEL_CACHE_COUNTER_BASIC: u32 = 15293;
pub const IDS_DEL_CACHE_COUNTER_UPPER_ESTIMATE_BASIC: u32 = 15294;
pub const IDS_DEL_CACHE_COUNTER_ALMOST_EMPTY_BASIC: u32 = 15295;
pub const IDS_DEL_PASSWORDS_COUNTER: u32 = 15296;
pub const IDS_DEL_PASSWORDS_COUNTER_SYNCED: u32 = 15297;
pub const IDS_DEL_SIGNIN_DATA_COUNTER: u32 = 15298;
pub const IDS_DEL_PASSWORDS_AND_SIGNIN_DATA_COUNTER_NONE: u32 = 15299;
pub const IDS_DEL_PASSWORDS_AND_SIGNIN_DATA_COUNTER_COMBINATION: u32 = 15300;
pub const IDS_DEL_SITE_SETTINGS_COUNTER: u32 = 15301;
pub const IDS_DEL_AUTOFILL_COUNTER_EMPTY: u32 = 15302;
pub const IDS_DEL_AUTOFILL_COUNTER_CREDIT_CARDS: u32 = 15303;
pub const IDS_DEL_AUTOFILL_COUNTER_ADDRESSES: u32 = 15304;
pub const IDS_DEL_AUTOFILL_COUNTER_SUGGESTIONS: u32 = 15305;
pub const IDS_DEL_AUTOFILL_COUNTER_SUGGESTIONS_LONG: u32 = 15306;
pub const IDS_DEL_AUTOFILL_COUNTER_SUGGESTIONS_SHORT: u32 = 15307;
pub const IDS_DEL_AUTOFILL_COUNTER_ONE_TYPE_SYNCED: u32 = 15308;
pub const IDS_DEL_AUTOFILL_COUNTER_TWO_TYPES: u32 = 15309;
pub const IDS_DEL_AUTOFILL_COUNTER_TWO_TYPES_SYNCED: u32 = 15310;
pub const IDS_DEL_AUTOFILL_COUNTER_THREE_TYPES: u32 = 15311;
pub const IDS_DEL_AUTOFILL_COUNTER_THREE_TYPES_SYNCED: u32 = 15312;
pub const IDS_DEL_COOKIES_COUNTER: u32 = 15313;
pub const IDS_DEL_COOKIES_COUNTER_ADVANCED: u32 = 15314;
pub const IDS_DEL_COOKIES_COUNTER_ADVANCED_WITH_EXCEPTION: u32 = 15315;
pub const IDS_DEL_DOWNLOADS_COUNTER: u32 = 15316;
pub const IDS_DEL_HOSTED_APPS_COUNTER: u32 = 15317;
pub const IDS_DEL_HOSTED_APPS_COUNTER_AND_X_MORE: u32 = 15318;
pub const IDS_SETTINGS_TITLE: u32 = 15319;
pub const IDS_SETTINGS_HIDE_ADVANCED_SETTINGS: u32 = 15320;
pub const IDS_SETTINGS_SHOW_ADVANCED_SETTINGS: u32 = 15321;
pub const IDS_NETWORK_PREDICTION_ENABLED_DESCRIPTION: u32 = 15322;
pub const IDS_OPTIONS_PROXIES_CONFIGURE_BUTTON: u32 = 15323;
pub const IDS_CRASH_TITLE: u32 = 15324;
pub const IDS_CRASH_CRASH_COUNT_BANNER_FORMAT: u32 = 15325;
pub const IDS_CRASH_CRASH_HEADER_FORMAT: u32 = 15326;
pub const IDS_CRASH_CRASH_HEADER_FORMAT_LOCAL_ONLY: u32 = 15327;
pub const IDS_CRASH_UPLOAD_TIME_FORMAT: u32 = 15328;
pub const IDS_CRASH_CAPTURE_AND_UPLOAD_TIME_FORMAT: u32 = 15329;
pub const IDS_CRASH_CRASH_NOT_UPLOADED: u32 = 15330;
pub const IDS_CRASH_CRASH_PENDING: u32 = 15331;
pub const IDS_CRASH_CRASH_USER_REQUESTED: u32 = 15332;
pub const IDS_CRASH_BUG_LINK_LABEL: u32 = 15333;
pub const IDS_CRASH_NO_CRASHES_MESSAGE: u32 = 15334;
pub const IDS_CRASH_DISABLED_HEADER: u32 = 15335;
pub const IDS_CRASH_UPLOAD_MESSAGE: u32 = 15336;
pub const IDS_CRASH_UPLOAD_NOW_LINK_TEXT: u32 = 15337;
pub const IDS_CRASH_SIZE_MESSAGE: u32 = 15338;
pub const IDS_HTTP_POST_WARNING_TITLE: u32 = 15339;
pub const IDS_HTTP_POST_WARNING: u32 = 15340;
pub const IDS_HTTP_POST_WARNING_RESEND: u32 = 15341;
pub const IDS_DOM_DISTILLER_JAVASCRIPT_DISABLED_CONTENT: u32 = 15342;
pub const IDS_DOM_DISTILLER_WEBUI_ENTRY_URL: u32 = 15343;
pub const IDS_DOM_DISTILLER_WEBUI_ENTRY_ADD: u32 = 15344;
pub const IDS_DOM_DISTILLER_WEBUI_ENTRY_ADD_FAILED: u32 = 15345;
pub const IDS_DOM_DISTILLER_WEBUI_VIEW_URL: u32 = 15346;
pub const IDS_DOM_DISTILLER_WEBUI_VIEW_URL_FAILED: u32 = 15347;
pub const IDS_DOM_DISTILLER_WEBUI_REFRESH: u32 = 15348;
pub const IDS_DOM_DISTILLER_WEBUI_FETCHING_ENTRIES: u32 = 15349;
pub const IDS_DOM_DISTILLER_VIEWER_CLOSE_READER_VIEW: u32 = 15350;
pub const IDS_DOM_DISTILLER_VIEWER_FAILED_TO_FIND_ARTICLE_TITLE: u32 = 15351;
pub const IDS_DOM_DISTILLER_VIEWER_FAILED_TO_FIND_ARTICLE_CONTENT: u32 = 15352;
pub const IDS_DOM_DISTILLER_VIEWER_LOADING_TITLE: u32 = 15353;
pub const IDS_DOM_DISTILLER_VIEWER_NO_DATA_CONTENT: u32 = 15354;
pub const IDS_DOM_DISTILLER_QUALITY_QUESTION: u32 = 15355;
pub const IDS_DOM_DISTILLER_QUALITY_ANSWER_YES: u32 = 15356;
pub const IDS_DOM_DISTILLER_QUALITY_ANSWER_NO: u32 = 15357;
pub const IDS_DOM_DISTILLER_WEBUI_TITLE: u32 = 15358;
pub const IDS_ERRORPAGE_NET_BUTTON_DETAILS: u32 = 15359;
pub const IDS_ERRORPAGE_NET_BUTTON_HIDE_DETAILS: u32 = 15360;
pub const IDS_ERRORPAGES_BUTTON_RELOAD: u32 = 15361;
pub const IDS_ERRORPAGES_BUTTON_SHOW_SAVED_COPY: u32 = 15362;
pub const IDS_ERRORPAGE_FUN_DISABLED: u32 = 15363;
pub const IDS_ERRORPAGES_SUGGESTION_VISIT_GOOGLE_CACHE: u32 = 15373;
pub const IDS_ERRORPAGES_SUGGESTION_CORRECTED_URL: u32 = 15374;
pub const IDS_ERRORPAGES_SUGGESTION_ALTERNATE_URL: u32 = 15375;
pub const IDS_ERRORPAGES_SUGGESTION_RELOAD_REPOST_SUMMARY: u32 = 15376;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_CONNECTION_HEADER: u32 = 15377;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_CONNECTION_BODY: u32 = 15378;
pub const IDS_ERRORPAGES_SUGGESTION_DNS_CONFIG_HEADER: u32 = 15379;
pub const IDS_ERRORPAGES_SUGGESTION_DNS_CONFIG_BODY: u32 = 15380;
pub const IDS_ERRORPAGES_SUGGESTION_NETWORK_PREDICTION_HEADER: u32 = 15381;
pub const IDS_ERRORPAGES_SUGGESTION_FIREWALL_CONFIG_BODY: u32 = 15382;
pub const IDS_ERRORPAGES_SUGGESTION_PROXY_CONFIG_HEADER: u32 = 15383;
pub const IDS_ERRORPAGES_SUGGESTION_PROXY_CONFIG_BODY: u32 = 15384;
pub const IDS_ERRORPAGES_SUGGESTION_VIEW_POLICIES_HEADER: u32 = 15386;
pub const IDS_ERRORPAGES_SUGGESTION_VIEW_POLICIES_BODY: u32 = 15387;
pub const IDS_ERRORPAGES_SUGGESTION_UNSUPPORTED_CIPHER_HEADER: u32 = 15388;
pub const IDS_ERRORPAGES_SUGGESTION_UNSUPPORTED_CIPHER_BODY: u32 = 15389;
pub const IDS_ERRORPAGES_SUGGESTION_NAVIGATE_TO_ORIGIN: u32 = 15390;
pub const IDS_ERRORPAGES_HEADING_NOT_AVAILABLE: u32 = 15391;
pub const IDS_ERRORPAGES_HEADING_NETWORK_ACCESS_DENIED: u32 = 15392;
pub const IDS_ERRORPAGES_HEADING_INTERNET_DISCONNECTED: u32 = 15393;
pub const IDS_ERRORPAGES_HEADING_CACHE_READ_FAILURE: u32 = 15394;
pub const IDS_ERRORPAGES_HEADING_CONNECTION_INTERRUPTED: u32 = 15395;
pub const IDS_ERRORPAGES_HEADING_NOT_FOUND: u32 = 15396;
pub const IDS_ERRORPAGES_HEADING_FILE_NOT_FOUND: u32 = 15397;
pub const IDS_ERRORPAGES_HEADING_BLOCKED: u32 = 15398;
pub const IDS_ERRORPAGES_SUMMARY_NOT_AVAILABLE: u32 = 15399;
pub const IDS_ERRORPAGES_SUMMARY_TIMED_OUT: u32 = 15400;
pub const IDS_ERRORPAGES_SUMMARY_CONNECTION_RESET: u32 = 15401;
pub const IDS_ERRORPAGES_SUMMARY_CONNECTION_CLOSED: u32 = 15402;
pub const IDS_ERRORPAGES_SUMMARY_CONNECTION_FAILED: u32 = 15403;
pub const IDS_ERRORPAGES_SUMMARY_NETWORK_CHANGED: u32 = 15404;
pub const IDS_ERRORPAGES_SUMMARY_CONNECTION_REFUSED: u32 = 15405;
pub const IDS_ERRORPAGES_SUMMARY_NAME_NOT_RESOLVED: u32 = 15406;
pub const IDS_ERRORPAGES_SUMMARY_ICANN_NAME_COLLISION: u32 = 15407;
pub const IDS_ERRORPAGES_SUMMARY_ADDRESS_UNREACHABLE: u32 = 15408;
pub const IDS_ERRORPAGES_SUMMARY_FILE_ACCESS_DENIED: u32 = 15409;
pub const IDS_ERRORPAGES_SUMMARY_NETWORK_ACCESS_DENIED: u32 = 15410;
pub const IDS_ERRORPAGES_SUMMARY_PROXY_CONNECTION_FAILED: u32 = 15411;
pub const IDS_ERRORPAGES_SUMMARY_CACHE_READ_FAILURE: u32 = 15412;
pub const IDS_ERRORPAGES_SUMMARY_NETWORK_IO_SUSPENDED: u32 = 15413;
pub const IDS_ERRORPAGES_SUMMARY_NOT_FOUND: u32 = 15414;
pub const IDS_ERRORPAGES_SUMMARY_FILE_NOT_FOUND: u32 = 15415;
pub const IDS_ERRORPAGES_SUMMARY_TOO_MANY_REDIRECTS: u32 = 15416;
pub const IDS_ERRORPAGES_SUMMARY_EMPTY_RESPONSE: u32 = 15417;
pub const IDS_ERRORPAGES_SUMMARY_INVALID_RESPONSE: u32 = 15418;
pub const IDS_ERRORPAGES_SUMMARY_DNS_PROBE_RUNNING: u32 = 15419;
pub const IDS_ERRORPAGES_HEADING_ACCESS_DENIED: u32 = 15420;
pub const IDS_ERRORPAGES_HEADING_FILE_ACCESS_DENIED: u32 = 15421;
pub const IDS_ERRORPAGES_SUMMARY_FORBIDDEN: u32 = 15422;
pub const IDS_ERRORPAGES_SUMMARY_GONE: u32 = 15423;
pub const IDS_ERRORPAGES_HEADING_PAGE_NOT_WORKING: u32 = 15424;
pub const IDS_ERRORPAGES_SUMMARY_CONTACT_SITE_OWNER: u32 = 15425;
pub const IDS_ERRORPAGES_SUMMARY_WEBSITE_CANNOT_HANDLE_REQUEST: u32 = 15426;
pub const IDS_ERRORPAGES_SUMMARY_GATEWAY_TIMEOUT: u32 = 15427;
pub const IDS_ERRORPAGES_SUMMARY_SSL_SECURITY_ERROR: u32 = 15428;
pub const IDS_ERRORPAGES_SUMMARY_SSL_VERSION_OR_CIPHER_MISMATCH: u32 = 15429;
pub const IDS_ERRORPAGES_HEADING_INSECURE_CONNECTION: u32 = 15430;
pub const IDS_ERRORPAGES_SUMMARY_BAD_SSL_CLIENT_AUTH_CERT: u32 = 15431;
pub const IDS_ERRORPAGES_SUMMARY_BLOCKED_BY_EXTENSION: u32 = 15432;
pub const IDS_ERRORPAGES_SUMMARY_BLOCKED_BY_XSS_AUDITOR: u32 = 15433;
pub const IDS_ERRORPAGES_SUMMARY_BLOCKED_BY_ADMINISTRATOR: u32 = 15434;
pub const IDS_ERRORPAGES_HTTP_POST_WARNING: u32 = 15435;
pub const IDS_ERRORPAGES_SUGGESTION_LIST_HEADER: u32 = 15436;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_CONNECTION_SUMMARY: u32 = 15437;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_PROXY_FIREWALL_DNS_SUMMARY: u32 = 15438;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_FIREWALL_ANTIVIRUS_SUMMARY: u32 = 15439;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_PROXY_FIREWALL_SUMMARY: u32 = 15440;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_PROXY_ADDRESS_SUMMARY: u32 = 15441;
pub const IDS_ERRORPAGES_SUGGESTION_CONTACT_ADMIN_SUMMARY: u32 = 15442;
pub const IDS_ERRORPAGES_SUGGESTION_CONTACT_ADMIN_SUMMARY_STANDALONE: u32 = 15443;
pub const IDS_ERRORPAGES_SUGGESTION_LEARNMORE_SUMMARY: u32 = 15444;
pub const IDS_ERRORPAGES_SUGGESTION_LEARNMORE_SUMMARY_STANDALONE: u32 = 15445;
pub const IDS_ERRORPAGES_SUGGESTION_CLEAR_COOKIES_SUMMARY: u32 = 15446;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_HARDWARE_SUMMARY: u32 = 15450;
pub const IDS_ERRORPAGES_SUGGESTION_CHECK_WIFI_SUMMARY: u32 = 15451;
pub const IDS_ERRORPAGES_SUGGESTION_DIAGNOSE_CONNECTION_SUMMARY: u32 = 15452;
pub const IDS_ERRORPAGES_SUGGESTION_COMPLETE_SETUP_SUMMARY: u32 = 15453;
pub const IDS_ERRORPAGES_SUGGESTION_DISABLE_EXTENSION_SUMMARY: u32 = 15454;
pub const IDS_ERRORPAGES_SUGGESTION_GOOGLE_SEARCH_SUMMARY: u32 = 15455;
pub const IDS_ERRORPAGES_SUGGESTION_DIAGNOSE: u32 = 15456;
pub const IDS_ERRORPAGES_SUGGESTION_DIAGNOSE_STANDALONE: u32 = 15457;
pub const IDS_FIND_IN_PAGE_ACCESSIBLE_TITLE: u32 = 15458;
pub const IDS_FIND_IN_PAGE_COUNT: u32 = 15459;
pub const IDS_ACCESSIBLE_FIND_IN_PAGE_COUNT: u32 = 15460;
pub const IDS_ACCESSIBLE_FIND_IN_PAGE_NO_RESULTS: u32 = 15461;
pub const IDS_FIND_IN_PAGE_PREVIOUS_TOOLTIP: u32 = 15462;
pub const IDS_FIND_IN_PAGE_NEXT_TOOLTIP: u32 = 15463;
pub const IDS_FIND_IN_PAGE_CLOSE_TOOLTIP: u32 = 15464;
pub const IDS_HISTORY_ACTION_MENU_DESCRIPTION: u32 = 15465;
pub const IDS_HISTORY_CANCEL_EDITING_BUTTON: u32 = 15466;
pub const IDS_HISTORY_DATE_WITH_RELATIVE_TIME: u32 = 15467;
pub const IDS_HISTORY_DELETE_PRIOR_VISITS_CONFIRM_BUTTON: u32 = 15468;
pub const IDS_HISTORY_DELETE_PRIOR_VISITS_WARNING: u32 = 15469;
pub const IDS_HISTORY_DELETE_SELECTED_ENTRIES_BUTTON: u32 = 15470;
pub const IDS_HISTORY_ENTRY_ACCESSIBILITY_DELETE: u32 = 15471;
pub const IDS_HISTORY_ENTRY_ACCESSIBILITY_LABEL: u32 = 15472;
pub const IDS_HISTORY_ENTRY_BOOKMARKED: u32 = 15473;
pub const IDS_HISTORY_ENTRY_SUMMARY: u32 = 15474;
pub const IDS_HISTORY_FOUND_SEARCH_RESULTS: u32 = 15475;
pub const IDS_HISTORY_OTHER_FORMS_OF_HISTORY: u32 = 15476;
pub const IDS_HISTORY_LOADING: u32 = 15477;
pub const IDS_HISTORY_MORE_FROM_SITE: u32 = 15478;
pub const IDS_HISTORY_NO_RESULTS: u32 = 15479;
pub const IDS_HISTORY_NO_SEARCH_RESULTS: u32 = 15480;
pub const IDS_HISTORY_OPEN_CLEAR_BROWSING_DATA_DIALOG: u32 = 15481;
pub const IDS_HISTORY_OTHER_SESSIONS_COLLAPSE_SESSION: u32 = 15482;
pub const IDS_HISTORY_OTHER_SESSIONS_EXPAND_SESSION: u32 = 15483;
pub const IDS_HISTORY_OTHER_SESSIONS_HIDE_FOR_NOW: u32 = 15484;
pub const IDS_HISTORY_OTHER_SESSIONS_OPEN_ALL: u32 = 15485;
pub const IDS_HISTORY_REMOVE_BOOKMARK: u32 = 15486;
pub const IDS_HISTORY_REMOVE_PAGE: u32 = 15487;
pub const IDS_HISTORY_REMOVE_SELECTED_ITEMS: u32 = 15488;
pub const IDS_HISTORY_SEARCH_BUTTON: u32 = 15489;
pub const IDS_HISTORY_SEARCH_RESULT: u32 = 15490;
pub const IDS_HISTORY_SEARCH_RESULTS: u32 = 15491;
pub const IDS_HISTORY_SHOW_HISTORY: u32 = 15492;
pub const IDS_HISTORY_SHOWFULLHISTORY_LINK: u32 = 15493;
pub const IDS_HISTORY_START_EDITING_BUTTON: u32 = 15494;
pub const IDS_HISTORY_TITLE: u32 = 15495;
pub const IDS_HISTORY_UNKNOWN_DEVICE: u32 = 15496;
pub const IDS_LOGIN_DIALOG_TITLE: u32 = 15497;
pub const IDS_LOGIN_DIALOG_OK_BUTTON_LABEL: u32 = 15498;
pub const IDS_LOGIN_DIALOG_AUTHORITY: u32 = 15499;
pub const IDS_LOGIN_DIALOG_PROXY_AUTHORITY: u32 = 15500;
pub const IDS_LOGIN_DIALOG_NOT_PRIVATE: u32 = 15501;
pub const IDS_LOGIN_DIALOG_USERNAME_FIELD: u32 = 15502;
pub const IDS_LOGIN_DIALOG_PASSWORD_FIELD: u32 = 15503;
pub const IDS_DEFAULT_TAB_TITLE: u32 = 221;
pub const IDS_DOWNLOAD_TAB_TITLE: u32 = 15504;
pub const IDS_SAD_TAB_TITLE: u32 = 15505;
pub const IDS_SAD_TAB_MESSAGE: u32 = 15506;
pub const IDS_SAD_TAB_HELP_MESSAGE: u32 = 15507;
pub const IDS_SAD_TAB_HELP_LINK: u32 = 15508;
pub const IDS_SAD_TAB_RELOAD_LABEL: u32 = 15509;
pub const IDS_SAD_TAB_OOM_TITLE: u32 = 15511;
pub const IDS_SAD_TAB_RELOAD_TITLE: u32 = 15512;
pub const IDS_SAD_TAB_OOM_MESSAGE_TABS: u32 = 15513;
pub const IDS_SAD_TAB_OOM_MESSAGE_NOTABS: u32 = 15514;
pub const IDS_SAD_TAB_RELOAD_TRY: u32 = 15515;
pub const IDS_SAD_TAB_RELOAD_INCOGNITO: u32 = 15516;
pub const IDS_SAD_TAB_RELOAD_RESTART_BROWSER: u32 = 15520;
pub const IDS_SAD_TAB_RELOAD_RESTART_DEVICE: u32 = 15521;
pub const IDS_NEW_TAB_TITLE: u32 = 230;
pub const IDS_NEW_TAB_OTR_HEADING: u32 = 15523;
pub const IDS_NEW_TAB_OTR_DESCRIPTION: u32 = 15524;
pub const IDS_NEW_TAB_OTR_LEARN_MORE_LINK: u32 = 15525;
pub const IDS_NEW_TAB_OTR_MESSAGE_WARNING: u32 = 15526;
pub const IDS_NEW_TAB_UNDO_THUMBNAIL_REMOVE: u32 = 227;
pub const IDS_NEW_TAB_OTR_TITLE: u32 = 15527;
pub const IDS_NEW_TAB_PRIVATE_TITLE: u32 = 15528;
pub const IDS_NEW_TAB_OTR_SUBTITLE: u32 = 15529;
pub const IDS_NEW_TAB_OTR_NOT_SAVED: u32 = 15530;
pub const IDS_NEW_TAB_OTR_VISIBLE: u32 = 15531;
pub const IDS_NTP_ARTICLE_SUGGESTIONS_NOT_AVAILABLE: u32 = 15533;
pub const IDS_NTP_ARTICLE_SUGGESTIONS_SECTION_HEADER: u32 = 15534;
pub const IDS_NTP_ARTICLE_SUGGESTIONS_SECTION_EMPTY: u32 = 15535;
pub const IDS_NTP_PHYSICAL_WEB_PAGE_SUGGESTIONS_SECTION_HEADER: u32 = 15536;
pub const IDS_NTP_PHYSICAL_WEB_PAGE_SUGGESTIONS_SECTION_EMPTY: u32 = 15537;
pub const IDS_NTP_READING_LIST_SUGGESTIONS_SECTION_HEADER: u32 = 15538;
pub const IDS_NTP_READING_LIST_SUGGESTIONS_SECTION_EMPTY: u32 = 15539;
pub const IDS_NTP_RECENT_TAB_SUGGESTIONS_SECTION_HEADER: u32 = 15540;
pub const IDS_NTP_RECENT_TAB_SUGGESTIONS_SECTION_EMPTY: u32 = 15541;
pub const IDS_NTP_NOTIFICATIONS_READ_THIS_STORY_AND_MORE: u32 = 15542;
pub const IDS_NTP_DEFAULT_SEARCH_TITLE: u32 = 15543;
pub const IDS_NTP_DEFAULT_SEARCH_URL: u32 = 15544;
pub const IDS_AUTOCOMPLETE_SEARCH_DESCRIPTION: u32 = 15545;
pub const IDS_EMPTY_KEYWORD_VALUE: u32 = 220;
pub const IDS_LINK_FROM_CLIPBOARD: u32 = 15546;
pub const IDS_TEXT_FROM_CLIPBOARD: u32 = 15547;
pub const IDS_IMAGE_FROM_CLIPBOARD: u32 = 15548;
pub const IDS_COPIED_TEXT_FROM_CLIPBOARD: u32 = 15549;
pub const IDS_SECURE_CONNECTION_EV: u32 = 15550;
pub const IDS_SECURE_VERBOSE_STATE: u32 = 15551;
pub const IDS_NOT_SECURE_VERBOSE_STATE: u32 = 15552;
pub const IDS_DANGEROUS_VERBOSE_STATE: u32 = 15553;
pub const IDS_OFFLINE_VERBOSE_STATE: u32 = 15554;
pub const IDS_OMNIBOX_TAB_SUGGEST_HINT: u32 = 15556;
pub const IDS_OMNIBOX_TAB_SUGGEST_SHORT_HINT: u32 = 15557;
pub const IDS_PHYSICAL_WEB_OVERFLOW_DESCRIPTION: u32 = 15558;
pub const IDS_PHYSICAL_WEB_OVERFLOW: u32 = 15559;
pub const IDS_PHYSICAL_WEB_OVERFLOW_EMPTY_TITLE: u32 = 15560;
pub const IDS_OMNIBOX_FILE: u32 = 15561;
pub const IDS_DRIVE_SUGGESTION_DOCUMENT: u32 = 15562;
pub const IDS_DRIVE_SUGGESTION_FORM: u32 = 15563;
pub const IDS_DRIVE_SUGGESTION_SPREADSHEET: u32 = 15564;
pub const IDS_DRIVE_SUGGESTION_PRESENTATION: u32 = 15565;
pub const IDS_DRIVE_SUGGESTION_GENERAL: u32 = 15566;
pub const IDS_DRIVE_SUGGESTION_DESCRIPTION_TEMPLATE: u32 = 15567;
pub const IDS_OMNIBOX_PEDAL_CLEAR_BROWSING_DATA_HINT: u32 = 15568;
pub const IDS_OMNIBOX_PEDAL_CLEAR_BROWSING_DATA_HINT_SHORT: u32 = 15569;
pub const IDS_OMNIBOX_PEDAL_CLEAR_BROWSING_DATA_SUGGESTION_CONTENTS: u32 = 15570;
pub const IDS_OMNIBOX_PEDAL_CHANGE_SEARCH_ENGINE_HINT: u32 = 15571;
pub const IDS_OMNIBOX_PEDAL_CHANGE_SEARCH_ENGINE_HINT_SHORT: u32 = 15572;
pub const IDS_OMNIBOX_PEDAL_CHANGE_SEARCH_ENGINE_SUGGESTION_CONTENTS: u32 = 15573;
pub const IDS_OMNIBOX_PEDAL_MANAGE_PASSWORDS_HINT: u32 = 15574;
pub const IDS_OMNIBOX_PEDAL_MANAGE_PASSWORDS_HINT_SHORT: u32 = 15575;
pub const IDS_OMNIBOX_PEDAL_MANAGE_PASSWORDS_SUGGESTION_CONTENTS: u32 = 15576;
pub const IDS_OMNIBOX_PEDAL_CHANGE_HOME_PAGE_HINT: u32 = 15577;
pub const IDS_OMNIBOX_PEDAL_CHANGE_HOME_PAGE_HINT_SHORT: u32 = 15578;
pub const IDS_OMNIBOX_PEDAL_CHANGE_HOME_PAGE_SUGGESTION_CONTENTS: u32 = 15579;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CREDIT_CARD_HINT: u32 = 15580;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CREDIT_CARD_HINT_SHORT: u32 = 15581;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CREDIT_CARD_SUGGESTION_CONTENTS: u32 = 15582;
pub const IDS_OMNIBOX_PEDAL_LAUNCH_INCOGNITO_HINT: u32 = 15583;
pub const IDS_OMNIBOX_PEDAL_LAUNCH_INCOGNITO_HINT_SHORT: u32 = 15584;
pub const IDS_OMNIBOX_PEDAL_LAUNCH_INCOGNITO_SUGGESTION_CONTENTS: u32 = 15585;
pub const IDS_OMNIBOX_PEDAL_TRANSLATE_HINT: u32 = 15586;
pub const IDS_OMNIBOX_PEDAL_TRANSLATE_HINT_SHORT: u32 = 15587;
pub const IDS_OMNIBOX_PEDAL_TRANSLATE_SUGGESTION_CONTENTS: u32 = 15588;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CHROME_HINT: u32 = 15589;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CHROME_HINT_SHORT: u32 = 15590;
pub const IDS_OMNIBOX_PEDAL_UPDATE_CHROME_SUGGESTION_CONTENTS: u32 = 15591;
pub const IDS_ACC_AUTOCOMPLETE_HISTORY: u32 = 15592;
pub const IDS_ACC_AUTOCOMPLETE_SEARCH_HISTORY: u32 = 15593;
pub const IDS_ACC_AUTOCOMPLETE_SEARCH: u32 = 15594;
pub const IDS_ACC_AUTOCOMPLETE_SUGGESTED_SEARCH: u32 = 15595;
pub const IDS_ACC_AUTOCOMPLETE_SUGGESTED_SEARCH_ENTITY: u32 = 15596;
pub const IDS_ACC_AUTOCOMPLETE_QUICK_ANSWER: u32 = 15597;
pub const IDS_ACC_AUTOCOMPLETE_BOOKMARK: u32 = 15598;
pub const IDS_ACC_AUTOCOMPLETE_CLIPBOARD_IMAGE: u32 = 15599;
pub const IDS_ACC_AUTOCOMPLETE_CLIPBOARD_TEXT: u32 = 15600;
pub const IDS_ACC_AUTOCOMPLETE_CLIPBOARD_URL: u32 = 15601;
pub const IDS_ACC_SEARCH_ICON: u32 = 15602;
pub const IDS_ACC_AUTOCOMPLETE_N_OF_M: u32 = 15603;
pub const IDS_ACC_TAB_SWITCH_SUFFIX: u32 = 15604;
pub const IDS_ACC_TAB_SWITCH_BUTTON_FOCUSED_PREFIX: u32 = 15605;
pub const IDS_ACC_TAB_SWITCH_BUTTON: u32 = 15606;
pub const IDS_PAGE_INFO_SECURE_SUMMARY: u32 = 15607;
pub const IDS_PAGE_INFO_MIXED_CONTENT_SUMMARY: u32 = 15608;
pub const IDS_PAGE_INFO_NOT_SECURE_SUMMARY: u32 = 15609;
pub const IDS_PAGE_INFO_MALWARE_SUMMARY: u32 = 15610;
pub const IDS_PAGE_INFO_SOCIAL_ENGINEERING_SUMMARY: u32 = 15611;
pub const IDS_PAGE_INFO_UNWANTED_SOFTWARE_SUMMARY: u32 = 15612;
pub const IDS_PAGE_INFO_EXTENSION_PAGE: u32 = 15613;
pub const IDS_PAGE_INFO_VIEW_SOURCE_PAGE: u32 = 15614;
pub const IDS_PAGE_INFO_FILE_PAGE: u32 = 15615;
pub const IDS_PAGE_INFO_SECURE_DETAILS: u32 = 15616;
pub const IDS_PAGE_INFO_MIXED_CONTENT_DETAILS: u32 = 15617;
pub const IDS_PAGE_INFO_NOT_SECURE_DETAILS: u32 = 15618;
pub const IDS_PAGE_INFO_MALWARE_DETAILS: u32 = 15619;
pub const IDS_PAGE_INFO_SOCIAL_ENGINEERING_DETAILS: u32 = 15620;
pub const IDS_PAGE_INFO_UNWANTED_SOFTWARE_DETAILS: u32 = 15621;
pub const IDS_PAGE_INFO_SECURITY_TAB_INSECURE_IDENTITY: u32 = 15622;
pub const IDS_PAGE_INFO_INVALID_CERTIFICATE_DESCRIPTION: u32 = 15624;
pub const IDS_PAGE_INFO_RESET_INVALID_CERTIFICATE_DECISIONS_BUTTON: u32 = 15625;
pub const IDS_PAGE_INFO_HELP_CENTER_LINK: u32 = 15626;
pub const IDS_PAGE_INFO_SECURITY_TAB_DEPRECATED_SIGNATURE_ALGORITHM: u32 = 15627;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_CONNECTION_TEXT: u32 = 15628;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_INSECURE_CONTENT_ERROR: u32 = 15629;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_INSECURE_CONTENT_WARNING: u32 = 15630;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_INSECURE_FORM_WARNING: u32 = 15631;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTED_SENTENCE_LINK: u32 = 15632;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTION_DETAILS: u32 = 15633;
pub const IDS_PAGE_INFO_SECURITY_TAB_ENCRYPTION_DETAILS_AEAD: u32 = 15634;
pub const IDS_PAGE_INFO_SECURITY_TAB_NON_UNIQUE_NAME: u32 = 15635;
pub const IDS_PAGE_INFO_SECURITY_TAB_NOT_ENCRYPTED_CONNECTION_TEXT: u32 = 15636;
pub const IDS_PAGE_INFO_SECURITY_TAB_NO_REVOCATION_MECHANISM: u32 = 15637;
pub const IDS_PAGE_INFO_SECURITY_TAB_SSL_VERSION: u32 = 15638;
pub const IDS_PAGE_INFO_SECURITY_TAB_UNABLE_TO_CHECK_REVOCATION: u32 = 15639;
pub const IDS_PAGE_INFO_SECURITY_TAB_UNKNOWN_PARTY: u32 = 15640;
pub const IDS_PAGE_INFO_SECURITY_TAB_WEAK_ENCRYPTION_CONNECTION_TEXT: u32 = 15641;
pub const IDS_PAGE_INFO_CERT_INFO_BUTTON: u32 = 15642;
pub const IDS_PAGE_INFO_ADDRESS: u32 = 15643;
pub const IDS_PAGE_INFO_PARTIAL_ADDRESS: u32 = 15644;
pub const IDS_PAGE_INFO_SECURITY_TAB_SECURE_IDENTITY_EV_VERIFIED: u32 = 15645;
pub const IDS_PAGE_INFO_CERTIFICATE: u32 = 15646;
pub const IDS_PAGE_INFO_CERTIFICATE_VALID_LINK: u32 = 15647;
pub const IDS_PAGE_INFO_CERTIFICATE_INVALID_LINK: u32 = 15648;
pub const IDS_PAGE_INFO_CERTIFICATE_BUTTON_TEXT: u32 = 15649;
pub const IDS_PAGE_INFO_CERTIFICATE_VALID_PARENTHESIZED: u32 = 15650;
pub const IDS_PAGE_INFO_CERTIFICATE_INVALID_PARENTHESIZED: u32 = 15651;
pub const IDS_PAGE_INFO_CERTIFICATE_VALID_LINK_TOOLTIP: u32 = 15652;
pub const IDS_PAGE_INFO_CERTIFICATE_INVALID_LINK_TOOLTIP: u32 = 15653;
pub const IDS_PAGE_INFO_COOKIES: u32 = 15654;
pub const IDS_PAGE_INFO_COOKIES_BUTTON_TEXT: u32 = 15655;
pub const IDS_PAGE_INFO_NUM_COOKIES_PARENTHESIZED: u32 = 15656;
pub const IDS_PAGE_INFO_COOKIES_TOOLTIP: u32 = 15657;
pub const IDS_PAGE_INFO_TYPE_ADS: u32 = 15658;
pub const IDS_PAGE_INFO_TYPE_AUTOPLAY: u32 = 15659;
pub const IDS_PAGE_INFO_TYPE_BACKGROUND_SYNC: u32 = 15660;
pub const IDS_PAGE_INFO_TYPE_IMAGES: u32 = 15661;
pub const IDS_PAGE_INFO_TYPE_JAVASCRIPT: u32 = 15662;
pub const IDS_PAGE_INFO_TYPE_POPUPS_REDIRECTS: u32 = 15663;
pub const IDS_PAGE_INFO_TYPE_FLASH: u32 = 15664;
pub const IDS_PAGE_INFO_TYPE_LOCATION: u32 = 15665;
pub const IDS_PAGE_INFO_TYPE_NOTIFICATIONS: u32 = 15666;
pub const IDS_PAGE_INFO_TYPE_MIC: u32 = 15667;
pub const IDS_PAGE_INFO_TYPE_CAMERA: u32 = 15668;
pub const IDS_PAGE_INFO_TYPE_MIDI_SYSEX: u32 = 15669;
pub const IDS_PAGE_INFO_TYPE_SOUND: u32 = 15670;
pub const IDS_PAGE_INFO_TYPE_CLIPBOARD: u32 = 15671;
pub const IDS_PAGE_INFO_TYPE_SENSORS: u32 = 15672;
pub const IDS_PAGE_INFO_TYPE_MOTION_SENSORS: u32 = 15673;
pub const IDS_PAGE_INFO_TYPE_USB: u32 = 15674;
pub const IDS_PAGE_INFO_TYPE_SERIAL: u32 = 15675;
pub const IDS_PAGE_INFO_TYPE_BLUETOOTH_SCANNING: u32 = 15676;
pub const IDS_PAGE_INFO_BUTTON_TEXT_ALLOWED_BY_USER: u32 = 15677;
pub const IDS_PAGE_INFO_BUTTON_TEXT_BLOCKED_BY_USER: u32 = 15678;
pub const IDS_PAGE_INFO_BUTTON_TEXT_MUTED_BY_USER: u32 = 15679;
pub const IDS_PAGE_INFO_BUTTON_TEXT_ASK_BY_USER: u32 = 15680;
pub const IDS_PAGE_INFO_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_USER: u32 = 15681;
pub const IDS_PAGE_INFO_BUTTON_TEXT_ALLOWED_BY_DEFAULT: u32 = 15682;
pub const IDS_PAGE_INFO_BUTTON_TEXT_AUTOMATIC_BY_DEFAULT: u32 = 15683;
pub const IDS_PAGE_INFO_BUTTON_TEXT_BLOCKED_BY_DEFAULT: u32 = 15684;
pub const IDS_PAGE_INFO_BUTTON_TEXT_MUTED_BY_DEFAULT: u32 = 15685;
pub const IDS_PAGE_INFO_BUTTON_TEXT_ASK_BY_DEFAULT: u32 = 15686;
pub const IDS_PAGE_INFO_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_DEFAULT: u32 = 15687;
pub const IDS_PAGE_INFO_MENU_ITEM_DEFAULT_ALLOW: u32 = 15688;
pub const IDS_PAGE_INFO_MENU_ITEM_DEFAULT_BLOCK: u32 = 15689;
pub const IDS_PAGE_INFO_MENU_ITEM_DEFAULT_ASK: u32 = 15690;
pub const IDS_PAGE_INFO_MENU_ITEM_DEFAULT_DETECT_IMPORTANT_CONTENT: u32 = 15691;
pub const IDS_PAGE_INFO_MENU_ITEM_ALLOW: u32 = 15692;
pub const IDS_PAGE_INFO_MENU_ITEM_BLOCK: u32 = 15693;
pub const IDS_PAGE_INFO_MENU_ITEM_ASK: u32 = 15694;
pub const IDS_PAGE_INFO_MENU_ITEM_DETECT_IMPORTANT_CONTENT: u32 = 15695;
pub const IDS_PAGE_INFO_MENU_ITEM_ADS_BLOCK: u32 = 15696;
pub const IDS_PAGE_INFO_SELECTOR_TOOLTIP: u32 = 15697;
pub const IDS_PAGE_INFO_USB_DEVICE_SECONDARY_LABEL: u32 = 15698;
pub const IDS_PAGE_INFO_USB_DEVICE_ALLOWED_BY_POLICY_LABEL: u32 = 15699;
pub const IDS_PAGE_INFO_DELETE_USB_DEVICE: u32 = 15700;
pub const IDS_PAGE_INFO_SERIAL_PORT_SECONDARY_LABEL: u32 = 15701;
pub const IDS_PAGE_INFO_DELETE_SERIAL_PORT: u32 = 15702;
pub const IDS_PAGE_INFO_SITE_SETTINGS_LINK: u32 = 15703;
pub const IDS_PAGE_INFO_SITE_SETTINGS_TOOLTIP: u32 = 15704;
pub const IDS_PAGE_INFO_PERMISSION_ALLOWED_BY_POLICY: u32 = 15705;
pub const IDS_PAGE_INFO_PERMISSION_BLOCKED_BY_POLICY: u32 = 15706;
pub const IDS_PAGE_INFO_PERMISSION_ASK_BY_POLICY: u32 = 15707;
pub const IDS_PAGE_INFO_PERMISSION_ALLOWED_BY_EXTENSION: u32 = 15708;
pub const IDS_PAGE_INFO_PERMISSION_BLOCKED_BY_EXTENSION: u32 = 15709;
pub const IDS_PAGE_INFO_PERMISSION_ASK_BY_EXTENSION: u32 = 15710;
pub const IDS_PAGE_INFO_PERMISSION_AUTOMATICALLY_BLOCKED: u32 = 15711;
pub const IDS_PAGE_INFO_PERMISSION_ADS_SUBTITLE: u32 = 15712;
pub const IDS_PAGE_INFO_INFOBAR_TEXT: u32 = 15713;
pub const IDS_PAGE_INFO_INFOBAR_BUTTON: u32 = 15714;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_SUMMARY: u32 = 15715;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS: u32 = 15716;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS_SYNC: u32 = 15717;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS_SIGNED_IN_NON_SYNC: u32 = 15718;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS_ENTERPRISE: u32 = 15719;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS_ENTERPRISE_WITH_ORG_NAME: u32 = 15720;
pub const IDS_PAGE_INFO_CHANGE_PASSWORD_BUTTON: u32 = 15721;
pub const IDS_PAGE_INFO_PROTECT_ACCOUNT_BUTTON: u32 = 15722;
pub const IDS_PAGE_INFO_IGNORE_PASSWORD_WARNING_BUTTON: u32 = 15723;
pub const IDS_PAGE_INFO_WHITELIST_PASSWORD_REUSE_BUTTON: u32 = 15724;
pub const IDS_PAGE_INFO_BILLING_SUMMARY: u32 = 15725;
pub const IDS_PAGE_INFO_BILLING_DETAILS: u32 = 15726;
pub const IDS_PAGE_INFO_VR_PRESENTING_TEXT: u32 = 15727;
pub const IDS_PAGE_INFO_VR_TURN_OFF_BUTTON_TEXT: u32 = 15728;
pub const IDS_MANAGE_PASSWORDS_AUTO_SIGNIN_TITLE: u32 = 15729;
pub const IDS_PASSWORD_MANAGER_EMPTY_LOGIN: u32 = 15730;
pub const IDS_PASSWORD_MANAGER_MANAGE_PASSWORDS: u32 = 15731;
pub const IDS_PASSWORD_MANAGER_GENERATE_PASSWORD: u32 = 15732;
pub const IDS_PASSWORD_MANAGER_EXCEPTIONS_TAB_TITLE: u32 = 15733;
pub const IDS_PASSWORD_MANAGER_SHOW_PASSWORDS_TAB_TITLE: u32 = 15734;
pub const IDS_PASSWORD_MANAGER_SMART_LOCK: u32 = 15735;
pub const IDS_PASSWORD_MANAGER_DEFAULT_EXPORT_FILENAME: u32 = 15736;
pub const IDS_PAYMENTS_TITLE: u32 = 15737;
pub const IDS_PAYMENTS_ERROR_MESSAGE_DIALOG_TITLE: u32 = 15738;
pub const IDS_PAYMENTS_METHOD_OF_PAYMENT_LABEL: u32 = 15739;
pub const IDS_PAYMENTS_CONTACT_DETAILS_LABEL: u32 = 15740;
pub const IDS_PAYMENTS_ADD_CONTACT_DETAILS_LABEL: u32 = 15741;
pub const IDS_PAYMENTS_EDIT_CONTACT_DETAILS_LABEL: u32 = 15742;
pub const IDS_PAYMENTS_ADD_CARD_LABEL: u32 = 15743;
pub const IDS_PAYMENTS_ADD_BILLING_ADDRESS: u32 = 15744;
pub const IDS_PAYMENTS_ADD_NAME_ON_CARD: u32 = 15745;
pub const IDS_PAYMENTS_ADD_VALID_CARD_NUMBER: u32 = 15746;
pub const IDS_PAYMENTS_ADD_MORE_INFORMATION: u32 = 15747;
pub const IDS_PAYMENTS_EDIT_CARD: u32 = 15748;
pub const IDS_PAYMENTS_ADD_PHONE_NUMBER: u32 = 15749;
pub const IDS_PAYMENTS_ADD_RECIPIENT: u32 = 15750;
pub const IDS_PAYMENTS_ADD_VALID_ADDRESS: u32 = 15751;
pub const IDS_PAYMENTS_ADD_EMAIL: u32 = 15752;
pub const IDS_PAYMENTS_ADD_NAME: u32 = 15753;
pub const IDS_PAYMENTS_ORDER_SUMMARY_LABEL: u32 = 15754;
pub const IDS_PAYMENT_REQUEST_PAYMENT_METHOD_SECTION_NAME: u32 = 15755;
pub const IDS_PAYMENT_REQUEST_CONTACT_INFO_SECTION_NAME: u32 = 15756;
pub const IDS_PAYMENTS_SHIPPING_SUMMARY_LABEL: u32 = 15757;
pub const IDS_PAYMENTS_SHIPPING_ADDRESS_LABEL: u32 = 15758;
pub const IDS_PAYMENTS_SHIPPING_OPTION_LABEL: u32 = 15759;
pub const IDS_PAYMENTS_DELIVERY_SUMMARY_LABEL: u32 = 15760;
pub const IDS_PAYMENTS_DELIVERY_ADDRESS_LABEL: u32 = 15761;
pub const IDS_PAYMENTS_DELIVERY_OPTION_LABEL: u32 = 15762;
pub const IDS_PAYMENTS_PICKUP_SUMMARY_LABEL: u32 = 15763;
pub const IDS_PAYMENTS_PICKUP_ADDRESS_LABEL: u32 = 15764;
pub const IDS_PAYMENTS_PICKUP_OPTION_LABEL: u32 = 15765;
pub const IDS_PAYMENTS_EDIT_BUTTON: u32 = 15766;
pub const IDS_PAYMENTS_PAY_BUTTON: u32 = 15767;
pub const IDS_PAYMENTS_ADD_CONTACT: u32 = 15768;
pub const IDS_PAYMENTS_ADD_CARD: u32 = 15769;
pub const IDS_PAYMENTS_ADD_ADDRESS: u32 = 15770;
pub const IDS_PAYMENTS_EDIT_ADDRESS: u32 = 15771;
pub const IDS_PAYMENTS_CANCEL_PAYMENT: u32 = 15772;
pub const IDS_PAYMENTS_NAME_FIELD_IN_CONTACT_DETAILS: u32 = 15773;
pub const IDS_PAYMENTS_PHONE_FIELD_IN_CONTACT_DETAILS: u32 = 15774;
pub const IDS_PAYMENTS_EMAIL_FIELD_IN_CONTACT_DETAILS: u32 = 15775;
pub const IDS_PAYMENTS_SAVE_CARD_TO_DEVICE_CHECKBOX: u32 = 15776;
pub const IDS_PAYMENTS_ACCEPTED_CARDS_LABEL: u32 = 15777;
pub const IDS_PAYMENTS_ACCEPTED_CREDIT_CARDS_LABEL: u32 = 15778;
pub const IDS_PAYMENTS_ACCEPTED_DEBIT_CARDS_LABEL: u32 = 15779;
pub const IDS_PAYMENTS_ACCEPTED_PREPAID_CARDS_LABEL: u32 = 15780;
pub const IDS_PAYMENTS_ACCEPTED_CREDIT_DEBIT_CARDS_LABEL: u32 = 15781;
pub const IDS_PAYMENTS_ACCEPTED_CREDIT_PREPAID_CARDS_LABEL: u32 = 15782;
pub const IDS_PAYMENTS_ACCEPTED_DEBIT_PREPAID_CARDS_LABEL: u32 = 15783;
pub const IDS_PAYMENTS_CREDIT_CARD_EXPIRATION_DATE_ABBR: u32 = 15784;
pub const IDS_PAYMENTS_LOADING_MESSAGE: u32 = 15785;
pub const IDS_PAYMENTS_PROCESSING_MESSAGE: u32 = 15786;
pub const IDS_PAYMENTS_CHECKING_OPTION: u32 = 15787;
pub const IDS_PAYMENTS_UPDATED_LABEL: u32 = 15788;
pub const IDS_PAYMENTS_CREDIT_CARDS_ARE_ACCEPTED_LABEL: u32 = 15789;
pub const IDS_PAYMENTS_DEBIT_CARDS_ARE_ACCEPTED_LABEL: u32 = 15790;
pub const IDS_PAYMENTS_PREPAID_CARDS_ARE_ACCEPTED_LABEL: u32 = 15791;
pub const IDS_PAYMENTS_CREDIT_DEBIT_CARDS_ARE_ACCEPTED_LABEL: u32 = 15792;
pub const IDS_PAYMENTS_CREDIT_PREPAID_CARDS_ARE_ACCEPTED_LABEL: u32 = 15793;
pub const IDS_PAYMENTS_DEBIT_PREPAID_CARDS_ARE_ACCEPTED_LABEL: u32 = 15794;
pub const IDS_PAYMENTS_ERROR_MESSAGE: u32 = 15795;
pub const IDS_PAYMENTS_CARD_AND_ADDRESS_SETTINGS: u32 = 15796;
pub const IDS_PAYMENTS_CARD_AND_ADDRESS_SETTINGS_SIGNED_IN: u32 = 15797;
pub const IDS_PAYMENTS_CARD_AND_ADDRESS_SETTINGS_SIGNED_OUT: u32 = 15798;
pub const IDS_SETTINGS_CAN_MAKE_PAYMENT_TOGGLE_LABEL: u32 = 15799;
pub const IDS_PAYMENTS_REQUIRED_FIELD_MESSAGE: u32 = 15818;
pub const IDS_PAYMENTS_VALIDATION_INVALID_NAME: u32 = 15819;
pub const IDS_PAYMENTS_VALIDATION_INVALID_CREDIT_CARD_EXPIRATION_YEAR: u32 = 15820;
pub const IDS_PAYMENTS_VALIDATION_INVALID_CREDIT_CARD_EXPIRATION_MONTH: u32 = 15821;
pub const IDS_PAYMENTS_VALIDATION_INVALID_CREDIT_CARD_EXPIRED: u32 = 15822;
pub const IDS_PAYMENTS_VALIDATION_UNSUPPORTED_CREDIT_CARD_TYPE: u32 = 15823;
pub const IDS_PAYMENTS_PHONE_INVALID_VALIDATION_MESSAGE: u32 = 15824;
pub const IDS_PAYMENTS_EMAIL_INVALID_VALIDATION_MESSAGE: u32 = 15825;
pub const IDS_PAYMENTS_CARD_NUMBER_INVALID_VALIDATION_MESSAGE: u32 = 15826;
pub const IDS_PAYMENTS_CARD_EXPIRATION_INVALID_VALIDATION_MESSAGE: u32 = 15827;
pub const IDS_PAYMENTS_INVALID_ADDRESS: u32 = 15828;
pub const IDS_PAYMENTS_BILLING_ADDRESS_REQUIRED: u32 = 15829;
pub const IDS_PAYMENTS_NAME_ON_CARD_REQUIRED: u32 = 15830;
pub const IDS_PAYMENTS_CARD_BILLING_ADDRESS_REQUIRED: u32 = 15831;
pub const IDS_PAYMENTS_MORE_INFORMATION_REQUIRED: u32 = 15832;
pub const IDS_PAYMENTS_PHONE_NUMBER_REQUIRED: u32 = 15833;
pub const IDS_PAYMENTS_RECIPIENT_REQUIRED: u32 = 15834;
pub const IDS_PAYMENTS_EMAIL_REQUIRED: u32 = 15835;
pub const IDS_PAYMENTS_NAME_REQUIRED: u32 = 15836;
pub const IDS_PREF_EDIT_DIALOG_FIELD_REQUIRED_VALIDATION_MESSAGE: u32 = 15837;
pub const IDS_PAYMENT_REQUEST_ORDER_SUMMARY_SECTION_TOTAL_FORMAT: u32 = 15838;
pub const IDS_PAYMENT_REQUEST_ORDER_SUMMARY_SHEET_TOTAL_FORMAT: u32 = 15839;
pub const IDS_PAYMENT_REQUEST_ORDER_SUMMARY_MORE_ITEMS: u32 = 15840;
pub const IDS_PAYMENT_REQUEST_ORDER_SUMMARY_MULTIPLE_CURRENCY_INDICATOR: u32 = 15841;
pub const IDS_PAYMENTS_SELECT_SHIPPING_ADDRESS_FOR_SHIPPING_METHODS: u32 = 15842;
pub const IDS_PAYMENTS_UNSUPPORTED_SHIPPING_ADDRESS: u32 = 15843;
pub const IDS_PAYMENTS_UNSUPPORTED_SHIPPING_OPTION: u32 = 15844;
pub const IDS_PAYMENTS_SELECT_DELIVERY_ADDRESS_FOR_DELIVERY_METHODS: u32 = 15845;
pub const IDS_PAYMENTS_UNSUPPORTED_DELIVERY_ADDRESS: u32 = 15846;
pub const IDS_PAYMENTS_UNSUPPORTED_DELIVERY_OPTION: u32 = 15847;
pub const IDS_PAYMENTS_SELECT_PICKUP_ADDRESS_FOR_PICKUP_METHODS: u32 = 15848;
pub const IDS_PAYMENTS_UNSUPPORTED_PICKUP_ADDRESS: u32 = 15849;
pub const IDS_PAYMENTS_UNSUPPORTED_PICKUP_OPTION: u32 = 15850;
pub const IDS_PAYMENTS_ANDROID_APP_ERROR: u32 = 15851;
pub const IDS_UTILITY_PROCESS_PAYMENT_MANIFEST_PARSER_NAME: u32 = 15852;
pub const IDS_PAYMENT_REQUEST_PAYMENT_METHODS_PREVIEW: u32 = 15855;
pub const IDS_PAYMENT_REQUEST_SHIPPING_ADDRESSES_PREVIEW: u32 = 15856;
pub const IDS_PAYMENT_REQUEST_SHIPPING_OPTIONS_PREVIEW: u32 = 15857;
pub const IDS_PAYMENT_REQUEST_CONTACTS_PREVIEW: u32 = 15858;
pub const IDS_PAYMENTS_BACK: u32 = 15859;
pub const IDS_PAYMENTS_EDIT: u32 = 15860;
pub const IDS_PAYMENTS_ROW_ACCESSIBLE_NAME_FORMAT: u32 = 15861;
pub const IDS_PAYMENTS_ROW_ACCESSIBLE_NAME_SELECTED_FORMAT: u32 = 15862;
pub const IDS_PAYMENTS_PROFILE_LABELS_ACCESSIBLE_FORMAT: u32 = 15863;
pub const IDS_PAYMENTS_ACCESSIBLE_LABEL_WITH_ERROR: u32 = 15864;
pub const IDS_PAYMENTS_ORDER_SUMMARY_ACCESSIBLE_LABEL: u32 = 15865;
pub const IDS_PDF_NEED_PASSWORD: u32 = 15866;
pub const IDS_PDF_PASSWORD_DIALOG_TITLE: u32 = 15867;
pub const IDS_PDF_PASSWORD_SUBMIT: u32 = 15868;
pub const IDS_PDF_PASSWORD_INVALID: u32 = 15869;
pub const IDS_PDF_PAGE_LOADING: u32 = 15870;
pub const IDS_PDF_ERROR_DIALOG_TITLE: u32 = 15871;
pub const IDS_PDF_PAGE_LOAD_FAILED: u32 = 15872;
pub const IDS_PDF_PAGE_RELOAD_BUTTON: u32 = 15873;
pub const IDS_PDF_BOOKMARKS: u32 = 15874;
pub const IDS_PDF_TOOLTIP_ROTATE_CW: u32 = 15875;
pub const IDS_PDF_TOOLTIP_DOWNLOAD: u32 = 15876;
pub const IDS_PDF_TOOLTIP_PRINT: u32 = 15877;
pub const IDS_PDF_TOOLTIP_FIT_PAGE: u32 = 15878;
pub const IDS_PDF_TOOLTIP_FIT_WIDTH: u32 = 15879;
pub const IDS_PDF_TOOLTIP_ZOOM_IN: u32 = 15880;
pub const IDS_PDF_TOOLTIP_ZOOM_OUT: u32 = 15881;
pub const IDS_PDF_LABEL_PAGE_NUMBER: u32 = 15882;
pub const IDS_PDF_PAGE_INDEX: u32 = 15883;
pub const IDS_POLICY_DM_STATUS_SUCCESS: u32 = 15935;
pub const IDS_POLICY_DM_STATUS_REQUEST_INVALID: u32 = 15936;
pub const IDS_POLICY_DM_STATUS_REQUEST_FAILED: u32 = 15937;
pub const IDS_POLICY_DM_STATUS_TEMPORARY_UNAVAILABLE: u32 = 15938;
pub const IDS_POLICY_DM_STATUS_HTTP_STATUS_ERROR: u32 = 15939;
pub const IDS_POLICY_DM_STATUS_RESPONSE_DECODING_ERROR: u32 = 15940;
pub const IDS_POLICY_DM_STATUS_SERVICE_MANAGEMENT_NOT_SUPPORTED: u32 = 15941;
pub const IDS_POLICY_DM_STATUS_SERVICE_DEVICE_NOT_FOUND: u32 = 15942;
pub const IDS_POLICY_DM_STATUS_SERVICE_MANAGEMENT_TOKEN_INVALID: u32 = 15943;
pub const IDS_POLICY_DM_STATUS_SERVICE_ACTIVATION_PENDING: u32 = 15944;
pub const IDS_POLICY_DM_STATUS_SERVICE_INVALID_SERIAL_NUMBER: u32 = 15945;
pub const IDS_POLICY_DM_STATUS_SERVICE_DEVICE_ID_CONFLICT: u32 = 15946;
pub const IDS_POLICY_DM_STATUS_SERVICE_MISSING_LICENSES: u32 = 15947;
pub const IDS_POLICY_DM_STATUS_SERVICE_DEPROVISIONED: u32 = 15948;
pub const IDS_POLICY_DM_STATUS_SERVICE_POLICY_NOT_FOUND: u32 = 15949;
pub const IDS_POLICY_DM_STATUS_UNKNOWN_ERROR: u32 = 15950;
pub const IDS_POLICY_DM_STATUS_SERVICE_DOMAIN_MISMATCH: u32 = 15951;
pub const IDS_POLICY_DM_STATUS_CANNOT_SIGN_REQUEST: u32 = 15952;
pub const IDS_POLICY_DM_STATUS_CONSUMER_ACCOUNT_WITH_PACKAGED_LICENSE: u32 = 15953;
pub const IDS_POLICY_VALIDATION_OK: u32 = 15954;
pub const IDS_POLICY_VALIDATION_BAD_INITIAL_SIGNATURE: u32 = 15955;
pub const IDS_POLICY_VALIDATION_BAD_SIGNATURE: u32 = 15956;
pub const IDS_POLICY_VALIDATION_ERROR_CODE_PRESENT: u32 = 15957;
pub const IDS_POLICY_VALIDATION_PAYLOAD_PARSE_ERROR: u32 = 15958;
pub const IDS_POLICY_VALIDATION_WRONG_POLICY_TYPE: u32 = 15959;
pub const IDS_POLICY_VALIDATION_WRONG_SETTINGS_ENTITY_ID: u32 = 15960;
pub const IDS_POLICY_VALIDATION_BAD_TIMESTAMP: u32 = 15961;
pub const IDS_POLICY_VALIDATION_BAD_DM_TOKEN: u32 = 15962;
pub const IDS_POLICY_VALIDATION_BAD_DEVICE_ID: u32 = 15963;
pub const IDS_POLICY_VALIDATION_BAD_USER: u32 = 15964;
pub const IDS_POLICY_VALIDATION_POLICY_PARSE_ERROR: u32 = 15965;
pub const IDS_POLICY_VALIDATION_BAD_KEY_VERIFICATION_SIGNATURE: u32 = 15966;
pub const IDS_POLICY_VALIDATION_VALUE_WARNING: u32 = 15967;
pub const IDS_POLICY_VALIDATION_VALUE_ERROR: u32 = 15968;
pub const IDS_POLICY_VALIDATION_UNKNOWN_ERROR: u32 = 15969;
pub const IDS_POLICY_STORE_STATUS_OK: u32 = 15970;
pub const IDS_POLICY_STORE_STATUS_LOAD_ERROR: u32 = 15971;
pub const IDS_POLICY_STORE_STATUS_STORE_ERROR: u32 = 15972;
pub const IDS_POLICY_STORE_STATUS_PARSE_ERROR: u32 = 15973;
pub const IDS_POLICY_STORE_STATUS_SERIALIZE_ERROR: u32 = 15974;
pub const IDS_POLICY_STORE_STATUS_VALIDATION_ERROR: u32 = 15975;
pub const IDS_POLICY_STORE_STATUS_BAD_STATE: u32 = 15976;
pub const IDS_POLICY_STORE_STATUS_UNKNOWN_ERROR: u32 = 15977;
pub const IDS_POLICY_ASSOCIATION_STATE_ACTIVE: u32 = 15978;
pub const IDS_POLICY_ASSOCIATION_STATE_UNMANAGED: u32 = 15979;
pub const IDS_POLICY_ASSOCIATION_STATE_DEPROVISIONED: u32 = 15980;
pub const IDS_POLICY_TYPE_ERROR: u32 = 15981;
pub const IDS_POLICY_OUT_OF_RANGE_ERROR: u32 = 15982;
pub const IDS_POLICY_VALUE_FORMAT_ERROR: u32 = 15983;
pub const IDS_POLICY_DEFAULT_SEARCH_DISABLED: u32 = 15984;
pub const IDS_POLICY_NOT_SPECIFIED_ERROR: u32 = 15985;
pub const IDS_POLICY_SUBKEY_ERROR: u32 = 15986;
pub const IDS_POLICY_LIST_ENTRY_ERROR: u32 = 15987;
pub const IDS_POLICY_SCHEMA_VALIDATION_ERROR: u32 = 15988;
pub const IDS_POLICY_INVALID_JSON_ERROR: u32 = 15989;
pub const IDS_POLICY_INVALID_SEARCH_URL_ERROR: u32 = 15990;
pub const IDS_POLICY_INVALID_PROXY_MODE_ERROR: u32 = 15991;
pub const IDS_POLICY_INVALID_UPDATE_URL_ERROR: u32 = 15992;
pub const IDS_POLICY_OFF_CWS_URL_ERROR: u32 = 15993;
pub const IDS_POLICY_HOMEPAGE_LOCATION_ERROR: u32 = 15994;
pub const IDS_POLICY_PROXY_MODE_DISABLED_ERROR: u32 = 15995;
pub const IDS_POLICY_PROXY_MODE_AUTO_DETECT_ERROR: u32 = 15996;
pub const IDS_POLICY_PROXY_MODE_PAC_URL_ERROR: u32 = 15997;
pub const IDS_POLICY_PROXY_MODE_FIXED_SERVERS_ERROR: u32 = 15998;
pub const IDS_POLICY_PROXY_MODE_SYSTEM_ERROR: u32 = 15999;
pub const IDS_POLICY_PROXY_BOTH_SPECIFIED_ERROR: u32 = 16000;
pub const IDS_POLICY_PROXY_NEITHER_SPECIFIED_ERROR: u32 = 16001;
pub const IDS_POLICY_OVERRIDDEN: u32 = 16002;
pub const IDS_POLICY_DEPRECATED: u32 = 16003;
pub const IDS_POLICY_VALUE_DEPRECATED: u32 = 16004;
pub const IDS_POLICY_LEVEL_ERROR: u32 = 16009;
pub const IDS_POLICY_OK: u32 = 16010;
pub const IDS_POLICY_UNSET: u32 = 16011;
pub const IDS_POLICY_UNKNOWN: u32 = 16012;
pub const IDS_POLICY_TITLE: u32 = 16013;
pub const IDS_POLICY_FILTER_PLACEHOLDER: u32 = 16014;
pub const IDS_POLICY_RELOAD_POLICIES: u32 = 16015;
pub const IDS_EXPORT_POLICIES_JSON: u32 = 16016;
pub const IDS_POLICY_STATUS: u32 = 16017;
pub const IDS_POLICY_STATUS_DEVICE: u32 = 16018;
pub const IDS_POLICY_STATUS_USER: u32 = 16019;
pub const IDS_POLICY_STATUS_MACHINE: u32 = 16020;
pub const IDS_POLICY_LABEL_ENTERPRISE_ENROLLMENT_DOMAIN: u32 = 16021;
pub const IDS_POLICY_LABEL_ENTERPRISE_DISPLAY_DOMAIN: u32 = 16022;
pub const IDS_POLICY_LABEL_MACHINE_ENROLLMENT_DOMAIN: u32 = 16023;
pub const IDS_POLICY_LABEL_MACHINE_ENROLLMENT_TOKEN: u32 = 16024;
pub const IDS_POLICY_LABEL_MACHINE_ENROLLMENT_DEVICE_ID: u32 = 16025;
pub const IDS_POLICY_LABEL_MACHINE_ENROLLMENT_MACHINE_NAME: u32 = 16026;
pub const IDS_POLICY_LABEL_USERNAME: u32 = 16027;
pub const IDS_POLICY_LABEL_GAIA_ID: u32 = 16028;
pub const IDS_POLICY_LABEL_CLIENT_ID: u32 = 16029;
pub const IDS_POLICY_LABEL_ASSET_ID: u32 = 16030;
pub const IDS_POLICY_LABEL_LOCATION: u32 = 16031;
pub const IDS_POLICY_LABEL_DIRECTORY_API_ID: u32 = 16032;
pub const IDS_POLICY_LABEL_TIME_SINCE_LAST_REFRESH: u32 = 16033;
pub const IDS_POLICY_NOT_SPECIFIED: u32 = 16034;
pub const IDS_POLICY_LABEL_PUSH_POLICIES: u32 = 16035;
pub const IDS_POLICY_PUSH_POLICIES_ON: u32 = 16036;
pub const IDS_POLICY_PUSH_POLICIES_OFF: u32 = 16037;
pub const IDS_POLICY_NEVER_FETCHED: u32 = 16038;
pub const IDS_POLICY_LABEL_REFRESH_INTERVAL: u32 = 16039;
pub const IDS_POLICY_LABEL_CONFLICT: u32 = 16040;
pub const IDS_POLICY_LABEL_ERROR: u32 = 16041;
pub const IDS_POLICY_LABEL_IGNORED: u32 = 16042;
pub const IDS_POLICY_LABEL_VALUE: u32 = 16043;
pub const IDS_POLICY_LABEL_STATUS: u32 = 16044;
pub const IDS_POLICY_SHOW_UNSET: u32 = 16045;
pub const IDS_POLICY_NO_POLICIES_SET: u32 = 16046;
pub const IDS_POLICY_HEADER_SCOPE: u32 = 16047;
pub const IDS_POLICY_HEADER_LEVEL: u32 = 16048;
pub const IDS_POLICY_HEADER_NAME: u32 = 16049;
pub const IDS_POLICY_HEADER_VALUE: u32 = 16050;
pub const IDS_POLICY_HEADER_STATUS: u32 = 16051;
pub const IDS_POLICY_HEADER_SOURCE: u32 = 16052;
pub const IDS_POLICY_HEADER_WARNING: u32 = 16053;
pub const IDS_POLICY_SHOW_MORE: u32 = 16054;
pub const IDS_POLICY_SHOW_LESS: u32 = 16055;
pub const IDS_POLICY_LEARN_MORE: u32 = 16056;
pub const IDS_POLICY_SCOPE_USER: u32 = 16057;
pub const IDS_POLICY_SCOPE_DEVICE: u32 = 16058;
pub const IDS_POLICY_LEVEL_RECOMMENDED: u32 = 16059;
pub const IDS_POLICY_LEVEL_MANDATORY: u32 = 16060;
pub const IDS_POLICY_SOURCE_ENTERPRISE_DEFAULT: u32 = 16061;
pub const IDS_POLICY_SOURCE_CLOUD: u32 = 16062;
pub const IDS_POLICY_SOURCE_MERGED: u32 = 16063;
pub const IDS_POLICY_SOURCE_ACTIVE_DIRECTORY: u32 = 16064;
pub const IDS_POLICY_SOURCE_PLATFORM: u32 = 16065;
pub const IDS_POLICY_SOURCE_DEVICE_LOCAL_ACCOUNT_OVERRIDE: u32 = 16066;
pub const IDS_POLICY_RISK_TAG_FULL_ADMIN_ACCESS: u32 = 16067;
pub const IDS_POLICY_RISK_TAG_SYSTEM_SECURITY: u32 = 16068;
pub const IDS_POLICY_RISK_TAG_WEBSITE_SHARING: u32 = 16069;
pub const IDS_POLICY_RISK_TAG_ADMIN_SHARING: u32 = 16070;
pub const IDS_POLICY_RISK_TAG_FILTERING: u32 = 16071;
pub const IDS_POLICY_RISK_TAG_LOCAL_DATA_ACCESS: u32 = 16072;
pub const IDS_POLICY_RISK_TAG_GOOGLE_SHARING: u32 = 16073;
pub const IDS_POLICY_SHOW_EXPANDED_STATUS: u32 = 16074;
pub const IDS_POLICY_HIDE_EXPANDED_STATUS: u32 = 16075;
pub const IDS_POLICY_LIST_MERGING_WRONG_POLICY_TYPE_SPECIFIED: u32 = 16076;
pub const IDS_POLICY_DICTIONARY_MERGING_WRONG_POLICY_TYPE_SPECIFIED: u32 = 16077;
pub const IDS_POLICY_DICTIONARY_MERGING_POLICY_NOT_ALLOWED: u32 = 16078;
pub const IDS_POLICY_CONFLICT_SAME_VALUE: u32 = 16079;
pub const IDS_POLICY_CONFLICT_DIFF_VALUE: u32 = 16080;
pub const IDS_POLICY_MIGRATED_OLD_POLICY: u32 = 16081;
pub const IDS_POLICY_MIGRATED_NEW_POLICY: u32 = 16082;
pub const IDS_POLICY_BLOCKED: u32 = 16083;
pub const IDS_POLICY_IGNORED_BY_GROUP_MERGING: u32 = 16084;
pub const IDS_POLICY_INVALID_VALUE: u32 = 16085;
pub const IDS_POLICY_SPELLCHECK_UNKNOWN_LANGUAGE: u32 = 16086;
pub const IDS_POLICY_SPELLCHECK_BLACKLIST_IGNORE: u32 = 16087;
pub const IDS_PRINT_PREVIEW_FRIENDLY_WIN_NETWORK_PRINTER_NAME: u32 = 16211;
pub const IDS_PDF_COMPOSITOR_SERVICE_DISPLAY_NAME: u32 = 16212;
pub const IDS_RESET_PASSWORD_TITLE: u32 = 16213;
pub const IDS_RESET_PASSWORD_WARNING_HEADING: u32 = 16214;
pub const IDS_RESET_PASSWORD_HEADING: u32 = 16215;
pub const IDS_RESET_PASSWORD_WARNING_EXPLANATION_PARAGRAPH: u32 = 16216;
pub const IDS_RESET_PASSWORD_WARNING_EXPLANATION_PARAGRAPH_WITH_ORG_NAME: u32 = 16217;
pub const IDS_RESET_PASSWORD_BUTTON: u32 = 16218;
pub const IDS_RESET_PASSWORD_EXPLANATION_PARAGRAPH: u32 = 16219;
pub const IDS_RESET_PASSWORD_EXPLANATION_PARAGRAPH_WITH_ORG_NAME: u32 = 16220;
pub const IDS_SB_UNDER_CONSTRUCTION: u32 = 16221;
pub const IDS_SSL_OPEN_DETAILS_BUTTON: u32 = 16222;
pub const IDS_SSL_CLOSE_DETAILS_BUTTON: u32 = 16223;
pub const IDS_CAPTIVE_PORTAL_AUTHORIZATION_DIALOG_NAME: u32 = 16224;
pub const IDS_CAPTIVE_PORTAL_HEADING_WIRED: u32 = 16225;
pub const IDS_CAPTIVE_PORTAL_HEADING_WIFI: u32 = 16226;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_WIRED: u32 = 16227;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_WIFI: u32 = 16228;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_WIFI_SSID: u32 = 16229;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_NO_LOGIN_URL_WIRED: u32 = 16230;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_NO_LOGIN_URL_WIFI: u32 = 16231;
pub const IDS_CAPTIVE_PORTAL_PRIMARY_PARAGRAPH_NO_LOGIN_URL_WIFI_SSID: u32 = 16232;
pub const IDS_CAPTIVE_PORTAL_BUTTON_OPEN_LOGIN_PAGE: u32 = 16233;
pub const IDS_MITM_SOFTWARE_HEADING: u32 = 16234;
pub const IDS_MITM_SOFTWARE_PRIMARY_PARAGRAPH_ENTERPRISE: u32 = 16235;
pub const IDS_MITM_SOFTWARE_PRIMARY_PARAGRAPH_NONENTERPRISE: u32 = 16236;
pub const IDS_MITM_SOFTWARE_EXPLANATION_ENTERPRISE: u32 = 16237;
pub const IDS_MITM_SOFTWARE_EXPLANATION_NONENTERPRISE: u32 = 16238;
pub const IDS_MITM_SOFTWARE_EXPLANATION: u32 = 16239;
pub const IDS_LOOKALIKE_URL_TITLE: u32 = 16240;
pub const IDS_LOOKALIKE_URL_HEADING: u32 = 16241;
pub const IDS_LOOKALIKE_URL_IGNORE: u32 = 16242;
pub const IDS_LOOKALIKE_URL_CONTINUE: u32 = 16243;
pub const IDS_LOOKALIKE_URL_PRIMARY_PARAGRAPH: u32 = 16244;
pub const IDS_CLOCK_ERROR_TITLE: u32 = 16245;
pub const IDS_CLOCK_ERROR_AHEAD_HEADING: u32 = 16246;
pub const IDS_CLOCK_ERROR_BEHIND_HEADING: u32 = 16247;
pub const IDS_CLOCK_ERROR_UPDATE_DATE_AND_TIME: u32 = 16248;
pub const IDS_CLOCK_ERROR_PRIMARY_PARAGRAPH: u32 = 16249;
pub const IDS_CLOCK_ERROR_EXPLANATION: u32 = 16250;
pub const IDS_SSL_V2_TITLE: u32 = 16251;
pub const IDS_SSL_V2_HEADING: u32 = 16252;
pub const IDS_SSL_V2_PRIMARY_PARAGRAPH: u32 = 16253;
pub const IDS_SSL_V2_RECURRENT_ERROR_PARAGRAPH: u32 = 16254;
pub const IDS_SSL_OVERRIDABLE_SAFETY_BUTTON: u32 = 16255;
pub const IDS_SSL_OVERRIDABLE_PROCEED_PARAGRAPH: u32 = 16256;
pub const IDS_SSL_RELOAD: u32 = 16257;
pub const IDS_SSL_NONOVERRIDABLE_PINNED: u32 = 16258;
pub const IDS_SSL_NONOVERRIDABLE_HSTS: u32 = 16259;
pub const IDS_SSL_NONOVERRIDABLE_REVOKED: u32 = 16260;
pub const IDS_SSL_NONOVERRIDABLE_MORE: u32 = 16261;
pub const IDS_SSL_NONOVERRIDABLE_INVALID: u32 = 16262;
pub const IDS_SAFEBROWSING_V3_TITLE: u32 = 16263;
pub const IDS_SAFEBROWSING_V3_OPEN_DETAILS_BUTTON: u32 = 16264;
pub const IDS_SAFEBROWSING_V3_CLOSE_DETAILS_BUTTON: u32 = 16265;
pub const IDS_SAFEBROWSING_OVERRIDABLE_SAFETY_BUTTON: u32 = 16266;
pub const IDS_MALWARE_V3_HEADING: u32 = 16267;
pub const IDS_MALWARE_V3_PRIMARY_PARAGRAPH: u32 = 16268;
pub const IDS_MALWARE_V3_EXPLANATION_PARAGRAPH: u32 = 16269;
pub const IDS_MALWARE_V3_EXPLANATION_PARAGRAPH_SUBRESOURCE: u32 = 16270;
pub const IDS_MALWARE_V3_PROCEED_PARAGRAPH: u32 = 16271;
pub const IDS_SAFE_BROWSING_PRIVACY_POLICY_PAGE: u32 = 16272;
pub const IDS_SAFE_BROWSING_SCOUT_REPORTING_AGREE: u32 = 16273;
pub const IDS_HARMFUL_V3_HEADING: u32 = 16274;
pub const IDS_HARMFUL_V3_PRIMARY_PARAGRAPH: u32 = 16275;
pub const IDS_HARMFUL_V3_EXPLANATION_PARAGRAPH: u32 = 16276;
pub const IDS_HARMFUL_V3_PROCEED_PARAGRAPH: u32 = 16277;
pub const IDS_PHISHING_V4_HEADING: u32 = 16278;
pub const IDS_PHISHING_V4_PRIMARY_PARAGRAPH: u32 = 16279;
pub const IDS_PHISHING_V4_EXPLANATION_PARAGRAPH: u32 = 16280;
pub const IDS_PHISHING_V4_PROCEED_AND_REPORT_PARAGRAPH: u32 = 16281;
pub const IDS_MALWARE_WEBVIEW_HEADING: u32 = 16282;
pub const IDS_MALWARE_WEBVIEW_EXPLANATION_PARAGRAPH: u32 = 16283;
pub const IDS_PHISHING_WEBVIEW_HEADING: u32 = 16284;
pub const IDS_PHISHING_WEBVIEW_EXPLANATION_PARAGRAPH: u32 = 16285;
pub const IDS_HARMFUL_WEBVIEW_HEADING: u32 = 16286;
pub const IDS_HARMFUL_WEBVIEW_EXPLANATION_PARAGRAPH: u32 = 16287;
pub const IDS_BILLING_WEBVIEW_HEADING: u32 = 16288;
pub const IDS_BILLING_WEBVIEW_EXPLANATION_PARAGRAPH: u32 = 16289;
pub const IDS_CONNECTION_HELP_SHOW_MORE: u32 = 16290;
pub const IDS_CONNECTION_HELP_SHOW_LESS: u32 = 16291;
pub const IDS_CONNECTION_HELP_TITLE: u32 = 16292;
pub const IDS_CONNECTION_HELP_HEADING: u32 = 16293;
pub const IDS_CONNECTION_HELP_GENERAL_HELP: u32 = 16294;
pub const IDS_CONNECTION_HELP_SPECIFIC_ERROR_HEADING: u32 = 16295;
pub const IDS_CONNECTION_HELP_CONNECTION_NOT_PRIVATE_TITLE: u32 = 16296;
pub const IDS_CONNECTION_HELP_CONNECT_TO_NETWORK_TITLE: u32 = 16297;
pub const IDS_CONNECTION_HELP_INCORRECT_CLOCK_TITLE: u32 = 16298;
pub const IDS_CONNECTION_HELP_CONNECTION_NOT_PRIVATE_DETAILS: u32 = 16299;
pub const IDS_CONNECTION_HELP_CONNECT_TO_NETWORK_DETAILS: u32 = 16300;
pub const IDS_CONNECTION_HELP_INCORRECT_CLOCK_DETAILS: u32 = 16301;
pub const IDS_CONNECTION_HELP_MITM_SOFTWARE_TITLE: u32 = 16302;
pub const IDS_CONNECTION_HELP_MITM_SOFTWARE_DETAILS: u32 = 16303;
pub const IDS_BILLING_HEADING: u32 = 16304;
pub const IDS_BILLING_PRIMARY_PARAGRAPH: u32 = 16305;
pub const IDS_BILLING_PRIMARY_BUTTON: u32 = 16306;
pub const IDS_BILLING_PROCEED_BUTTON: u32 = 16307;
pub const IDS_ORIGIN_POLICY_TITLE: u32 = 16308;
pub const IDS_ORIGIN_POLICY_HEADING: u32 = 16309;
pub const IDS_ORIGIN_POLICY_INFO: u32 = 16310;
pub const IDS_ORIGIN_POLICY_INFO2: u32 = 16311;
pub const IDS_ORIGIN_POLICY_BUTTON: u32 = 16312;
pub const IDS_ORIGIN_POLICY_DETAILS: u32 = 16313;
pub const IDS_ORIGIN_POLICY_EXPLANATION_CANNOT_LOAD: u32 = 16314;
pub const IDS_ORIGIN_POLICY_EXPLANATION_SHOULD_NOT_REDIRECT: u32 = 16315;
pub const IDS_ORIGIN_POLICY_EXPLANATION_OTHER: u32 = 16316;
pub const IDS_ORIGIN_POLICY_FINAL_PARAGRAPH: u32 = 16317;
pub const IDS_ORIGIN_POLICY_CLOSE: u32 = 16318;
pub const IDS_ERROR_PAGE_SUMMARY: u32 = 16319;
pub const IDS_NON_CRYPTO_SECURE_SUMMARY: u32 = 16320;
pub const IDS_HTTP_NONSECURE_SUMMARY: u32 = 16321;
pub const IDS_EDITED_NONSECURE: u32 = 16322;
pub const IDS_EDITED_NONSECURE_DESCRIPTION: u32 = 16323;
pub const IDS_SAFEBROWSING_WARNING: u32 = 16324;
pub const IDS_SAFEBROWSING_WARNING_SUMMARY: u32 = 16325;
pub const IDS_SAFEBROWSING_WARNING_DESCRIPTION: u32 = 16326;
pub const IDS_SHA1: u32 = 16327;
pub const IDS_SHA1_DESCRIPTION: u32 = 16328;
pub const IDS_SUBJECT_ALT_NAME_MISSING: u32 = 16329;
pub const IDS_SUBJECT_ALT_NAME_MISSING_DESCRIPTION: u32 = 16330;
pub const IDS_CERTIFICATE_TITLE: u32 = 16331;
pub const IDS_CERTIFICATE_CHAIN_ERROR: u32 = 16332;
pub const IDS_CERTIFICATE_CHAIN_ERROR_DESCRIPTION_FORMAT: u32 = 16333;
pub const IDS_VALID_SERVER_CERTIFICATE: u32 = 16334;
pub const IDS_VALID_SERVER_CERTIFICATE_DESCRIPTION: u32 = 16335;
pub const IDS_CERTIFICATE_EXPIRING_SOON: u32 = 16336;
pub const IDS_CERTIFICATE_EXPIRING_SOON_DESCRIPTION: u32 = 16337;
pub const IDS_SSL_CONNECTION_TITLE: u32 = 16338;
pub const IDS_SECURE_SSL_SUMMARY: u32 = 16339;
pub const IDS_PRIVATE_KEY_PINNING_BYPASSED: u32 = 16340;
pub const IDS_PRIVATE_KEY_PINNING_BYPASSED_DESCRIPTION: u32 = 16341;
pub const IDS_SSL_DESCRIPTION: u32 = 16342;
pub const IDS_OBSOLETE_SSL_SUMMARY: u32 = 16343;
pub const IDS_CIPHER_WITH_MAC: u32 = 16344;
pub const IDS_SSL_KEY_EXCHANGE_WITH_GROUP: u32 = 16345;
pub const IDS_SSL_RECOMMEND_PROTOCOL: u32 = 16346;
pub const IDS_SSL_RECOMMEND_KEY_EXCHANGE: u32 = 16347;
pub const IDS_SSL_RECOMMEND_CIPHER: u32 = 16348;
pub const IDS_SSL_RECOMMEND_SIGNATURE: u32 = 16349;
pub const IDS_RESOURCE_SECURITY_TITLE: u32 = 16350;
pub const IDS_SECURE_RESOURCES_SUMMARY: u32 = 16351;
pub const IDS_SECURE_RESOURCES_DESCRIPTION: u32 = 16352;
pub const IDS_MIXED_PASSIVE_CONTENT_SUMMARY: u32 = 16353;
pub const IDS_MIXED_PASSIVE_CONTENT_DESCRIPTION: u32 = 16354;
pub const IDS_MIXED_ACTIVE_CONTENT_SUMMARY: u32 = 16355;
pub const IDS_MIXED_ACTIVE_CONTENT_DESCRIPTION: u32 = 16356;
pub const IDS_CERT_ERROR_PASSIVE_CONTENT_SUMMARY: u32 = 16357;
pub const IDS_CERT_ERROR_PASSIVE_CONTENT_DESCRIPTION: u32 = 16358;
pub const IDS_CERT_ERROR_ACTIVE_CONTENT_SUMMARY: u32 = 16359;
pub const IDS_CERT_ERROR_ACTIVE_CONTENT_DESCRIPTION: u32 = 16360;
pub const IDS_NON_SECURE_FORM_SUMMARY: u32 = 16361;
pub const IDS_NON_SECURE_FORM_DESCRIPTION: u32 = 16362;
pub const IDS_CERT_ERROR_NO_SUBJECT_ALTERNATIVE_NAMES_DETAILS: u32 = 16363;
pub const IDS_CERT_ERROR_COMMON_NAME_INVALID_DETAILS: u32 = 16364;
pub const IDS_CERT_ERROR_COMMON_NAME_INVALID_DESCRIPTION: u32 = 16365;
pub const IDS_CERT_ERROR_EXPIRED_DETAILS: u32 = 16366;
pub const IDS_CERT_ERROR_EXPIRED_DESCRIPTION: u32 = 16367;
pub const IDS_CERT_ERROR_NOT_YET_VALID_DETAILS: u32 = 16368;
pub const IDS_CERT_ERROR_NOT_YET_VALID_DESCRIPTION: u32 = 16369;
pub const IDS_CERT_ERROR_NOT_VALID_AT_THIS_TIME_DETAILS: u32 = 16370;
pub const IDS_CERT_ERROR_NOT_VALID_AT_THIS_TIME_DESCRIPTION: u32 = 16371;
pub const IDS_CERT_ERROR_AUTHORITY_INVALID_DESCRIPTION: u32 = 16372;
pub const IDS_CERT_ERROR_CONTAINS_ERRORS_DETAILS: u32 = 16373;
pub const IDS_CERT_ERROR_CONTAINS_ERRORS_DESCRIPTION: u32 = 16374;
pub const IDS_CERT_ERROR_UNABLE_TO_CHECK_REVOCATION_DETAILS: u32 = 16375;
pub const IDS_CERT_ERROR_UNABLE_TO_CHECK_REVOCATION_DESCRIPTION: u32 = 16376;
pub const IDS_CERT_ERROR_NO_REVOCATION_MECHANISM_DETAILS: u32 = 16377;
pub const IDS_CERT_ERROR_NO_REVOCATION_MECHANISM_DESCRIPTION: u32 = 16378;
pub const IDS_CERT_ERROR_REVOKED_CERT_DETAILS: u32 = 16379;
pub const IDS_CERT_ERROR_REVOKED_CERT_DESCRIPTION: u32 = 16380;
pub const IDS_CERT_ERROR_INVALID_CERT_DETAILS: u32 = 16381;
pub const IDS_CERT_ERROR_INVALID_CERT_DESCRIPTION: u32 = 16382;
pub const IDS_CERT_ERROR_WEAK_SIGNATURE_ALGORITHM_DETAILS: u32 = 16383;
pub const IDS_CERT_ERROR_WEAK_SIGNATURE_ALGORITHM_DESCRIPTION: u32 = 16384;
pub const IDS_CERT_ERROR_WEAK_KEY_DETAILS: u32 = 16385;
pub const IDS_CERT_ERROR_WEAK_KEY_DESCRIPTION: u32 = 16386;
pub const IDS_CERT_ERROR_NAME_CONSTRAINT_VIOLATION_DETAILS: u32 = 16387;
pub const IDS_CERT_ERROR_NAME_CONSTRAINT_VIOLATION_DESCRIPTION: u32 = 16388;
pub const IDS_CERT_ERROR_VALIDITY_TOO_LONG_DETAILS: u32 = 16389;
pub const IDS_CERT_ERROR_VALIDITY_TOO_LONG_DESCRIPTION: u32 = 16390;
pub const IDS_CERT_ERROR_UNKNOWN_ERROR_DETAILS: u32 = 16391;
pub const IDS_CERT_ERROR_UNKNOWN_ERROR_DESCRIPTION: u32 = 16392;
pub const IDS_CERT_ERROR_SUMMARY_PINNING_FAILURE_DETAILS: u32 = 16393;
pub const IDS_CERT_ERROR_SUMMARY_PINNING_FAILURE_DESCRIPTION: u32 = 16394;
pub const IDS_CERT_ERROR_CERTIFICATE_TRANSPARENCY_REQUIRED_DETAILS: u32 = 16395;
pub const IDS_CERT_ERROR_CERTIFICATE_TRANSPARENCY_REQUIRED_DESCRIPTION: u32 = 16396;
pub const IDS_CERT_ERROR_AUTHORITY_INVALID_DETAILS: u32 = 16397;
pub const IDS_BLOCK_INTERSTITIAL_TITLE: u32 = 16398;
pub const IDS_BLOCK_INTERSTITIAL_HEADER: u32 = 16399;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_HEADER: u32 = 16400;
pub const IDS_BLOCK_INTERSTITIAL_HEADER_ACCESS_REQUESTS_DISABLED: u32 = 16401;
pub const IDS_BLOCK_INTERSTITIAL_HEADER_NOT_SIGNED_IN: u32 = 16402;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_MESSAGE: u32 = 16403;
pub const IDS_BLOCK_INTERSTITIAL_MESSAGE_SUPERVISED_USERS_DEPRECATED: u32 = 16404;
pub const IDS_BACK_BUTTON: u32 = 16405;
pub const IDS_BLOCK_INTERSTITIAL_REQUEST_ACCESS_BUTTON: u32 = 16406;
pub const IDS_BLOCK_INTERSTITIAL_REQUEST_SENT_MESSAGE: u32 = 16407;
pub const IDS_BLOCK_INTERSTITIAL_REQUEST_FAILED_MESSAGE: u32 = 16408;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_REQUEST_SENT_MESSAGE_SINGLE_PARENT: u32 = 16409;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_REQUEST_SENT_MESSAGE_MULTI_PARENT: u32 = 16410;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_REQUEST_FAILED_MESSAGE_SINGLE_PARENT: u32 = 16411;
pub const IDS_CHILD_BLOCK_INTERSTITIAL_REQUEST_FAILED_MESSAGE_MULTI_PARENT: u32 = 16412;
pub const IDS_BLOCK_INTERSTITIAL_SEND_FEEDBACK: u32 = 16413;
pub const IDS_BLOCK_INTERSTITIAL_SHOW_DETAILS: u32 = 16414;
pub const IDS_BLOCK_INTERSTITIAL_HIDE_DETAILS: u32 = 16415;
pub const IDS_SUPERVISED_USER_BLOCK_HEADER: u32 = 16416;
pub const IDS_CHILD_BLOCK_MESSAGE_DEFAULT_SINGLE_PARENT: u32 = 16417;
pub const IDS_CHILD_BLOCK_MESSAGE_DEFAULT_MULTI_PARENT: u32 = 16418;
pub const IDS_SUPERVISED_USER_BLOCK_MESSAGE_DEFAULT: u32 = 16419;
pub const IDS_SUPERVISED_USER_BLOCK_MESSAGE_SAFE_SITES: u32 = 16420;
pub const IDS_CHILD_BLOCK_MESSAGE_MANUAL_SINGLE_PARENT: u32 = 16421;
pub const IDS_CHILD_BLOCK_MESSAGE_MANUAL_MULTI_PARENT: u32 = 16422;
pub const IDS_SUPERVISED_USER_BLOCK_MESSAGE_MANUAL: u32 = 16423;
pub const IDS_SUPERVISED_USER_NOT_SIGNED_IN: u32 = 16424;
pub const IDS_SYNC_BASIC_ENCRYPTION_DATA: u32 = 16425;
pub const IDS_SYNC_CONFIGURE_ENCRYPTION: u32 = 16426;
pub const IDS_SYNC_DATATYPE_AUTOFILL: u32 = 16427;
pub const IDS_SYNC_DATATYPE_BOOKMARKS: u32 = 16428;
pub const IDS_SYNC_DATATYPE_PASSWORDS: u32 = 16429;
pub const IDS_SYNC_DATATYPE_PREFERENCES: u32 = 16430;
pub const IDS_SYNC_DATATYPE_TABS: u32 = 16431;
pub const IDS_SYNC_DATATYPE_TYPED_URLS: u32 = 16432;
pub const IDS_SYNC_DATATYPE_READING_LIST: u32 = 16433;
pub const IDS_SYNC_EMPTY_PASSPHRASE_ERROR: u32 = 16434;
pub const IDS_SYNC_ENCRYPTION_SECTION_TITLE: u32 = 16435;
pub const IDS_SYNC_ENTER_GOOGLE_PASSPHRASE_BODY: u32 = 16436;
pub const IDS_SYNC_FULL_ENCRYPTION_DATA: u32 = 16437;
pub const IDS_SYNC_LOGIN_SETTING_UP: u32 = 16438;
pub const IDS_SYNC_PASSPHRASE_LABEL: u32 = 16439;
pub const IDS_SYNC_PASSPHRASE_MISMATCH_ERROR: u32 = 16440;
pub const IDS_SYNC_SERVICE_UNAVAILABLE: u32 = 16441;
pub const IDS_SYNC_ENTER_PASSPHRASE_BODY_WITH_DATE: u32 = 16442;
pub const IDS_SYNC_ENTER_GOOGLE_PASSPHRASE_BODY_WITH_DATE: u32 = 16443;
pub const IDS_SYNC_ENTER_PASSPHRASE_BODY: u32 = 16446;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_MORE_LANGUAGE: u32 = 16447;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_NOT_SOURCE_LANGUAGE: u32 = 16448;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_NEVER_TRANSLATE_LANG: u32 = 16449;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_NEVER_TRANSLATE_SITE: u32 = 16450;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_ALWAYS: u32 = 16451;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_REPORT_ERROR: u32 = 16452;
pub const IDS_TRANSLATE_INFOBAR_OPTIONS_ABOUT: u32 = 16453;
pub const IDS_TRANSLATE_INFOBAR_ACCEPT: u32 = 16455;
pub const IDS_TRANSLATE_INFOBAR_DENY: u32 = 16456;
pub const IDS_TRANSLATE_INFOBAR_NEVER_TRANSLATE: u32 = 16457;
pub const IDS_TRANSLATE_INFOBAR_ALWAYS_TRANSLATE: u32 = 16458;
pub const IDS_TRANSLATE_INFOBAR_TRANSLATING_TO: u32 = 16459;
pub const IDS_TRANSLATE_INFOBAR_AFTER_MESSAGE: u32 = 16460;
pub const IDS_TRANSLATE_INFOBAR_AFTER_MESSAGE_AUTODETERMINED_SOURCE_LANGUAGE: u32 = 16461;
pub const IDS_TRANSLATE_INFOBAR_REVERT: u32 = 16462;
pub const IDS_TRANSLATE_INFOBAR_RETRY: u32 = 16463;
pub const IDS_TRANSLATE_INFOBAR_ERROR_CANT_CONNECT: u32 = 16464;
pub const IDS_TRANSLATE_INFOBAR_ERROR_CANT_TRANSLATE: u32 = 16465;
pub const IDS_TRANSLATE_INFOBAR_UNKNOWN_PAGE_LANGUAGE: u32 = 16466;
pub const IDS_TRANSLATE_INFOBAR_ERROR_SAME_LANGUAGE: u32 = 16467;
pub const IDS_TRANSLATE_INFOBAR_UNSUPPORTED_PAGE_LANGUAGE: u32 = 16468;
pub const IDS_TRANSLATE_NOTIFICATION_ERROR: u32 = 16469;
pub const IDS_TRANSLATE_NOTIFICATION_ALWAYS_TRANSLATE: u32 = 16470;
pub const IDS_TRANSLATE_NOTIFICATION_LANGUAGE_NEVER: u32 = 16471;
pub const IDS_TRANSLATE_NOTIFICATION_SITE_NEVER: u32 = 16472;
pub const IDS_TRANSLATE_NOTIFICATION_UNDO: u32 = 16473;
pub const IDS_TRANSLATE_UNKNOWN_SOURCE_LANGUAGE: u32 = 16474;
pub const IDS_BOOKMARK_BAR_UNDO_DESCRIPTION: u32 = 16475;
pub const IDS_BOOKMARK_BAR_UNDO: u32 = 16476;
pub const IDS_BOOKMARK_BAR_REDO: u32 = 16477;
pub const IDS_BOOKMARK_BAR_UNDO_ADD: u32 = 16478;
pub const IDS_BOOKMARK_BAR_REDO_ADD: u32 = 16479;
pub const IDS_BOOKMARK_BAR_UNDO_DELETE: u32 = 16480;
pub const IDS_BOOKMARK_BAR_REDO_DELETE: u32 = 16481;
pub const IDS_BOOKMARK_BAR_UNDO_EDIT: u32 = 16482;
pub const IDS_BOOKMARK_BAR_REDO_EDIT: u32 = 16483;
pub const IDS_BOOKMARK_BAR_UNDO_MOVE: u32 = 16484;
pub const IDS_BOOKMARK_BAR_REDO_MOVE: u32 = 16485;
pub const IDS_BOOKMARK_BAR_UNDO_REORDER: u32 = 16486;
pub const IDS_BOOKMARK_BAR_REDO_REORDER: u32 = 16487;
pub const IDS_VERSION_UI_TITLE: u32 = 16488;
pub const IDS_VERSION_UI_OFFICIAL: u32 = 16489;
pub const IDS_VERSION_UI_UNOFFICIAL: u32 = 177;
pub const IDS_VERSION_UI_32BIT: u32 = 16490;
pub const IDS_VERSION_UI_64BIT: u32 = 16491;
pub const IDS_VERSION_UI_REVISION: u32 = 16492;
pub const IDS_VERSION_UI_OS: u32 = 16493;
pub const IDS_VERSION_UI_USER_AGENT: u32 = 16495;
pub const IDS_VERSION_UI_COMMAND_LINE: u32 = 16496;
pub const IDS_VERSION_UI_EXECUTABLE_PATH: u32 = 16500;
pub const IDS_VERSION_UI_PROFILE_PATH: u32 = 16501;
pub const IDS_VERSION_UI_PATH_NOTFOUND: u32 = 16502;
pub const IDS_VERSION_UI_VARIATIONS: u32 = 16503;
pub const IDS_VERSION_UI_VARIATIONS_CMD: u32 = 16504;
pub const IDS_VERSION_UI_COHORT_NAME: u32 = 16505;
pub const IDS_MANAGEMENT_TITLE: u32 = 16506;
pub const IDS_MANAGEMENT_TOOLBAR_TITLE: u32 = 16507;
pub const IDS_MANAGEMENT_SUBTITLE: u32 = 16511;
pub const IDS_MANAGEMENT_SUBTITLE_MANAGED_BY: u32 = 16509;
pub const IDS_MANAGEMENT_NOT_MANAGED_SUBTITLE: u32 = 16510;
pub const IDS_MANAGEMENT_BROWSER_NOTICE: u32 = 16512;
pub const IDS_MANAGEMENT_NOT_MANAGED_NOTICE: u32 = 16513;
pub const IDS_MANAGEMENT_EXTENSION_REPORTING: u32 = 16528;
pub const IDS_MANAGEMENT_EXTENSIONS_INSTALLED: u32 = 16529;
pub const IDS_MANAGEMENT_EXTENSIONS_INSTALLED_BY: u32 = 16530;
pub const IDS_MANAGEMENT_EXTENSIONS_NAME: u32 = 16531;
pub const IDS_MANAGEMENT_EXTENSIONS_PERMISSIONS: u32 = 16532;
pub const IDS_MANAGEMENT_BROWSER_REPORTING: u32 = 16533;
pub const IDS_MANAGEMENT_BROWSER_REPORTING_EXPLANATION: u32 = 16534;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_MACHINE_NAME: u32 = 16535;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_MACHINE_NAME_ADDRESS: u32 = 16536;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_USERNAME: u32 = 16537;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_VERSION: u32 = 16538;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_EXTENSIONS_PLUGINS: u32 = 16539;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_SAFE_BROWSING_WARNINGS: u32 = 16540;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_USER_BROWSING_DATA: u32 = 16541;
pub const IDS_MANAGEMENT_EXTENSION_REPORT_PERF_CRASH: u32 = 16542;
pub const IDS_CANCEL: u32 = 16543;
pub const IDS_CLOSE: u32 = 16544;
pub const IDS_CLEAR: u32 = 16545;
pub const IDS_DONE: u32 = 16546;
pub const IDS_LEARN_MORE: u32 = 206;
pub const IDS_OK: u32 = 16547;
pub const IDS_ADD: u32 = 16548;
pub const IDS_REMOVE: u32 = 16549;
pub const IDS_SAVE: u32 = 16550;
pub const IDS_NO_THANKS: u32 = 16553;
pub const IDS_NOT_NOW: u32 = 16554;
pub const IDS_TURN_OFF: u32 = 16555;
pub const IDS_PLUGIN_NOT_SUPPORTED: u32 = 16556;
pub const IDS_PRINT: u32 = 16557;
pub const IDS_RECENTLY_CLOSED: u32 = 16558;
pub const IDS_CHOOSE: u32 = 16559;
pub const IDS_ACCNAME_BACK: u32 = 194;
pub const IDS_ACCNAME_FORWARD: u32 = 197;
pub const IDS_ACCNAME_OK: u32 = 16560;
pub const IDS_ACCNAME_CANCEL: u32 = 16561;
pub const IDS_ACCNAME_DONE: u32 = 16562;
pub const IDS_ACCNAME_SAVE: u32 = 16563;
pub const IDS_ACCNAME_CLOSE: u32 = 281;
pub const IDS_ACCNAME_OPEN: u32 = 16564;
pub const IDS_ACCNAME_PREVIOUS: u32 = 16565;
pub const IDS_ACCNAME_NEXT: u32 = 16566;
pub const IDS_ACCNAME_LOCATION: u32 = 16567;
pub const IDS_ACCNAME_PARTICLE_DISC: u32 = 16568;
pub const IDS_UTILITY_PROCESS_JSON_PARSER_NAME: u32 = 16569;
pub const IDS_SESSION_CRASHED_VIEW_RESTORE_BUTTON: u32 = 16570;
pub const IDS_SESSION_CRASHED_VIEW_STARTUP_PAGES_BUTTON: u32 = 16571;
pub const IDS_OPTIONS_ADVANCED_SECTION_TITLE_PRIVACY: u32 = 16572;
pub const IDS_PATCH_SERVICE_DISPLAY_NAME: u32 = 16573;
pub const IDS_UNZIP_SERVICE_DISPLAY_NAME: u32 = 16574;
pub const IDS_DETAILS_WITHOUT_SUMMARY_LABEL: u32 = 20100;
pub const IDS_FORM_CALENDAR_CLEAR: u32 = 20101;
pub const IDS_FORM_CALENDAR_TODAY: u32 = 20102;
pub const IDS_FORM_SUBMIT_LABEL: u32 = 20103;
pub const IDS_FORM_INPUT_ALT: u32 = 20104;
pub const IDS_FORM_RESET_LABEL: u32 = 20105;
pub const IDS_FORM_FILE_BUTTON_LABEL: u32 = 20106;
pub const IDS_FORM_MULTIPLE_FILES_BUTTON_LABEL: u32 = 20107;
pub const IDS_FORM_FILE_NO_FILE_LABEL: u32 = 20108;
pub const IDS_FORM_FILE_MULTIPLE_UPLOAD: u32 = 20109;
pub const IDS_FORM_OTHER_COLOR_LABEL: u32 = 20110;
pub const IDS_FORM_OTHER_DATE_LABEL: u32 = 20111;
pub const IDS_FORM_OTHER_MONTH_LABEL: u32 = 20112;
pub const IDS_FORM_OTHER_WEEK_LABEL: u32 = 20113;
pub const IDS_FORM_PLACEHOLDER_FOR_DAY_OF_MONTH_FIELD: u32 = 20114;
pub const IDS_FORM_PLACEHOLDER_FOR_MONTH_FIELD: u32 = 20115;
pub const IDS_FORM_PLACEHOLDER_FOR_YEAR_FIELD: u32 = 20116;
pub const IDS_FORM_SELECT_MENU_LIST_TEXT: u32 = 20117;
pub const IDS_FORM_THIS_MONTH_LABEL: u32 = 20118;
pub const IDS_FORM_THIS_WEEK_LABEL: u32 = 20119;
pub const IDS_FORM_WEEK_NUMBER_LABEL: u32 = 20120;
pub const IDS_AX_CALENDAR_SHOW_DATE_PICKER: u32 = 20121;
pub const IDS_AX_CALENDAR_SHOW_MONTH_SELECTOR: u32 = 20122;
pub const IDS_AX_CALENDAR_SHOW_NEXT_MONTH: u32 = 20123;
pub const IDS_AX_CALENDAR_SHOW_PREVIOUS_MONTH: u32 = 20124;
pub const IDS_AX_CALENDAR_WEEK_DESCRIPTION: u32 = 20125;
pub const IDS_AX_ROLE_ARTICLE: u32 = 20126;
pub const IDS_AX_ROLE_BANNER: u32 = 20127;
pub const IDS_AX_ROLE_COMPLEMENTARY: u32 = 20128;
pub const IDS_AX_ROLE_CONTENT_DELETION: u32 = 20129;
pub const IDS_AX_ROLE_CONTENT_INSERTION: u32 = 20130;
pub const IDS_AX_ROLE_CHECK_BOX: u32 = 20131;
pub const IDS_AX_ROLE_CONTENT_INFO: u32 = 20132;
pub const IDS_AX_ROLE_DEFINITION: u32 = 20133;
pub const IDS_AX_ROLE_DESCRIPTION_LIST: u32 = 20134;
pub const IDS_AX_ROLE_DESCRIPTION_TERM: u32 = 20135;
pub const IDS_AX_ROLE_DISCLOSURE_TRIANGLE: u32 = 20136;
pub const IDS_AX_ROLE_DOC_ABSTRACT: u32 = 20137;
pub const IDS_AX_ROLE_DOC_ACKNOWLEDGMENTS: u32 = 20138;
pub const IDS_AX_ROLE_DOC_AFTERWORD: u32 = 20139;
pub const IDS_AX_ROLE_DOC_APPENDIX: u32 = 20140;
pub const IDS_AX_ROLE_DOC_BACKLINK: u32 = 20141;
pub const IDS_AX_ROLE_DOC_BIBLIO_ENTRY: u32 = 20142;
pub const IDS_AX_ROLE_DOC_BIBLIOGRAPHY: u32 = 20143;
pub const IDS_AX_ROLE_DOC_BIBLIO_REF: u32 = 20144;
pub const IDS_AX_ROLE_DOC_CHAPTER: u32 = 20145;
pub const IDS_AX_ROLE_DOC_COLOPHON: u32 = 20146;
pub const IDS_AX_ROLE_DOC_CONCLUSION: u32 = 20147;
pub const IDS_AX_ROLE_DOC_COVER: u32 = 20148;
pub const IDS_AX_ROLE_DOC_CREDIT: u32 = 20149;
pub const IDS_AX_ROLE_DOC_CREDITS: u32 = 20150;
pub const IDS_AX_ROLE_DOC_DEDICATION: u32 = 20151;
pub const IDS_AX_ROLE_DOC_ENDNOTE: u32 = 20152;
pub const IDS_AX_ROLE_DOC_ENDNOTES: u32 = 20153;
pub const IDS_AX_ROLE_DOC_EPIGRAPH: u32 = 20154;
pub const IDS_AX_ROLE_DOC_EPILOGUE: u32 = 20155;
pub const IDS_AX_ROLE_DOC_ERRATA: u32 = 20156;
pub const IDS_AX_ROLE_DOC_EXAMPLE: u32 = 20157;
pub const IDS_AX_ROLE_DOC_FOOTNOTE: u32 = 20158;
pub const IDS_AX_ROLE_DOC_FOREWORD: u32 = 20159;
pub const IDS_AX_ROLE_DOC_GLOSSARY: u32 = 20160;
pub const IDS_AX_ROLE_DOC_GLOSS_REF: u32 = 20161;
pub const IDS_AX_ROLE_DOC_INDEX: u32 = 20162;
pub const IDS_AX_ROLE_DOC_INTRODUCTION: u32 = 20163;
pub const IDS_AX_ROLE_DOC_NOTE_REF: u32 = 20164;
pub const IDS_AX_ROLE_DOC_NOTICE: u32 = 20165;
pub const IDS_AX_ROLE_DOC_PAGE_BREAK: u32 = 20166;
pub const IDS_AX_ROLE_DOC_PAGE_LIST: u32 = 20167;
pub const IDS_AX_ROLE_DOC_PART: u32 = 20168;
pub const IDS_AX_ROLE_DOC_PREFACE: u32 = 20169;
pub const IDS_AX_ROLE_DOC_PROLOGUE: u32 = 20170;
pub const IDS_AX_ROLE_DOC_PULLQUOTE: u32 = 20171;
pub const IDS_AX_ROLE_DOC_QNA: u32 = 20172;
pub const IDS_AX_ROLE_DOC_SUBTITLE: u32 = 20173;
pub const IDS_AX_ROLE_DOC_TIP: u32 = 20174;
pub const IDS_AX_ROLE_DOC_TOC: u32 = 20175;
pub const IDS_AX_ROLE_FEED: u32 = 20176;
pub const IDS_AX_ROLE_FIGURE: u32 = 20177;
pub const IDS_AX_ROLE_FORM: u32 = 20178;
pub const IDS_AX_ROLE_FOOTER: u32 = 20179;
pub const IDS_AX_ROLE_GRAPHICS_DOCUMENT: u32 = 20180;
pub const IDS_AX_ROLE_GRAPHICS_OBJECT: u32 = 20181;
pub const IDS_AX_ROLE_GRAPHICS_SYMBOL: u32 = 20182;
pub const IDS_AX_AUTOFILL_POPUP_ACCESSIBLE_NODE_DATA: u32 = 20183;
pub const IDS_AX_ROLE_TOGGLE_BUTTON: u32 = 20185;
pub const IDS_AX_ROLE_HEADING: u32 = 20186;
pub const IDS_AX_ROLE_LINK: u32 = 20187;
pub const IDS_AX_ROLE_MAIN_CONTENT: u32 = 20188;
pub const IDS_AX_ROLE_MARK: u32 = 20189;
pub const IDS_AX_ROLE_MATH: u32 = 20190;
pub const IDS_AX_ROLE_NAVIGATIONAL_LINK: u32 = 20191;
pub const IDS_AX_ROLE_REGION: u32 = 20192;
pub const IDS_AX_ROLE_SEARCH_BOX: u32 = 20193;
pub const IDS_AX_ROLE_STATUS: u32 = 20194;
pub const IDS_AX_ROLE_SWITCH: u32 = 20195;
pub const IDS_AX_ROLE_WEB_AREA: u32 = 20196;
pub const IDS_AX_UNLABELED_IMAGE_ROLE_DESCRIPTION: u32 = 20244;
pub const IDS_AX_IMAGE_ELIGIBLE_FOR_ANNOTATION: u32 = 20245;
pub const IDS_AX_IMAGE_ANNOTATION_PENDING: u32 = 20246;
pub const IDS_AX_IMAGE_ANNOTATION_ADULT: u32 = 20247;
pub const IDS_AX_IMAGE_ANNOTATION_NO_DESCRIPTION: u32 = 20248;
pub const IDS_AX_IMAGE_ANNOTATION_OCR_CONTEXT: u32 = 20249;
pub const IDS_AX_IMAGE_ANNOTATION_DESCRIPTION_CONTEXT: u32 = 20250;
pub const IDS_AX_AM_PM_FIELD_TEXT: u32 = 20251;
pub const IDS_AX_DAY_OF_MONTH_FIELD_TEXT: u32 = 20252;
pub const IDS_AX_HOUR_FIELD_TEXT: u32 = 20253;
pub const IDS_AX_MEDIA_DEFAULT: u32 = 20254;
pub const IDS_AX_MEDIA_AUDIO_ELEMENT: u32 = 20255;
pub const IDS_AX_MEDIA_VIDEO_ELEMENT: u32 = 20256;
pub const IDS_AX_MEDIA_MUTE_BUTTON: u32 = 20257;
pub const IDS_AX_MEDIA_UNMUTE_BUTTON: u32 = 20258;
pub const IDS_AX_MEDIA_PLAY_BUTTON: u32 = 20259;
pub const IDS_AX_MEDIA_PAUSE_BUTTON: u32 = 20260;
pub const IDS_AX_MEDIA_CURRENT_TIME_DISPLAY: u32 = 20261;
pub const IDS_AX_MEDIA_TIME_REMAINING_DISPLAY: u32 = 20262;
pub const IDS_AX_MEDIA_ENTER_FULL_SCREEN_BUTTON: u32 = 20263;
pub const IDS_AX_MEDIA_EXIT_FULL_SCREEN_BUTTON: u32 = 20264;
pub const IDS_AX_MEDIA_DISPLAY_CUT_OUT_FULL_SCREEN_BUTTON: u32 = 20265;
pub const IDS_AX_MEDIA_ENTER_PICTURE_IN_PICTURE_BUTTON: u32 = 20266;
pub const IDS_AX_MEDIA_EXIT_PICTURE_IN_PICTURE_BUTTON: u32 = 20267;
pub const IDS_AX_MEDIA_LOADING_PANEL: u32 = 20268;
pub const IDS_AX_MEDIA_SHOW_CLOSED_CAPTIONS_MENU_BUTTON: u32 = 20269;
pub const IDS_AX_MEDIA_HIDE_CLOSED_CAPTIONS_MENU_BUTTON: u32 = 20270;
pub const IDS_AX_MEDIA_CAST_OFF_BUTTON: u32 = 20271;
pub const IDS_AX_MEDIA_CAST_ON_BUTTON: u32 = 20272;
pub const IDS_AX_MEDIA_DOWNLOAD_BUTTON: u32 = 20273;
pub const IDS_AX_MEDIA_OVERFLOW_BUTTON: u32 = 20274;
pub const IDS_AX_MEDIA_AUDIO_ELEMENT_HELP: u32 = 20275;
pub const IDS_AX_MEDIA_VIDEO_ELEMENT_HELP: u32 = 20276;
pub const IDS_AX_MEDIA_AUDIO_SLIDER_HELP: u32 = 20277;
pub const IDS_AX_MEDIA_VIDEO_SLIDER_HELP: u32 = 20278;
pub const IDS_AX_MEDIA_VOLUME_SLIDER_HELP: u32 = 20279;
pub const IDS_AX_MEDIA_CURRENT_TIME_DISPLAY_HELP: u32 = 20280;
pub const IDS_AX_MEDIA_TIME_REMAINING_DISPLAY_HELP: u32 = 20281;
pub const IDS_AX_MEDIA_OVERFLOW_BUTTON_HELP: u32 = 20282;
pub const IDS_AX_MEDIA_TOUCHLESS_SEEK_ACTION: u32 = 20283;
pub const IDS_AX_MEDIA_TOUCHLESS_VOLUME_ACTION: u32 = 20284;
pub const IDS_AX_MILLISECOND_FIELD_TEXT: u32 = 20285;
pub const IDS_AX_MINUTE_FIELD_TEXT: u32 = 20286;
pub const IDS_AX_MONTH_FIELD_TEXT: u32 = 20287;
pub const IDS_AX_SECOND_FIELD_TEXT: u32 = 20288;
pub const IDS_AX_WEEK_OF_YEAR_FIELD_TEXT: u32 = 20289;
pub const IDS_AX_YEAR_FIELD_TEXT: u32 = 20290;
pub const IDS_FORM_INPUT_WEEK_TEMPLATE: u32 = 20291;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_MULTIPLE_FILE: u32 = 20292;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH: u32 = 20293;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_EMPTY: u32 = 20294;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_EMPTY_DOMAIN: u32 = 20295;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_EMPTY_LOCAL: u32 = 20296;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_INVALID_DOMAIN: u32 = 20297;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_INVALID_DOTS: u32 = 20298;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_INVALID_LOCAL: u32 = 20299;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL_NO_AT_SIGN: u32 = 20300;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_MULTIPLE_EMAIL: u32 = 20301;
pub const IDS_FORM_VALIDATION_RANGE_UNDERFLOW: u32 = 20302;
pub const IDS_FORM_VALIDATION_RANGE_UNDERFLOW_DATETIME: u32 = 20303;
pub const IDS_FORM_VALIDATION_RANGE_OVERFLOW: u32 = 20304;
pub const IDS_FORM_VALIDATION_RANGE_OVERFLOW_DATETIME: u32 = 20305;
pub const IDS_FORM_VALIDATION_BAD_INPUT_DATETIME: u32 = 20306;
pub const IDS_FORM_VALIDATION_BAD_INPUT_NUMBER: u32 = 20307;
pub const IDS_FORM_VALIDATION_VALUE_MISSING: u32 = 20308;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_CHECKBOX: u32 = 20309;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_FILE: u32 = 20310;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_RADIO: u32 = 20311;
pub const IDS_FORM_VALIDATION_VALUE_MISSING_SELECT: u32 = 20312;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_EMAIL: u32 = 20313;
pub const IDS_FORM_VALIDATION_TYPE_MISMATCH_URL: u32 = 20314;
pub const IDS_FORM_VALIDATION_PATTERN_MISMATCH: u32 = 20315;
pub const IDS_FORM_VALIDATION_STEP_MISMATCH: u32 = 20316;
pub const IDS_FORM_VALIDATION_STEP_MISMATCH_CLOSE_TO_LIMIT: u32 = 20317;
pub const IDS_FORM_VALIDATION_TOO_LONG: u32 = 20318;
pub const IDS_FORM_VALIDATION_TOO_SHORT: u32 = 20319;
pub const IDS_FORM_VALIDATION_TOO_SHORT_PLURAL: u32 = 20320;
pub const IDS_MEDIA_SESSION_FILE_SOURCE: u32 = 20321;
pub const IDS_MEDIA_OVERFLOW_MENU_CLOSED_CAPTIONS: u32 = 20322;
pub const IDS_MEDIA_OVERFLOW_MENU_CLOSED_CAPTIONS_SUBMENU_TITLE: u32 = 20323;
pub const IDS_MEDIA_OVERFLOW_MENU_CAST: u32 = 20324;
pub const IDS_MEDIA_OVERFLOW_MENU_ENTER_FULLSCREEN: u32 = 20325;
pub const IDS_MEDIA_OVERFLOW_MENU_EXIT_FULLSCREEN: u32 = 20326;
pub const IDS_MEDIA_OVERFLOW_MENU_MUTE: u32 = 20327;
pub const IDS_MEDIA_OVERFLOW_MENU_UNMUTE: u32 = 20328;
pub const IDS_MEDIA_OVERFLOW_MENU_PLAY: u32 = 20329;
pub const IDS_MEDIA_OVERFLOW_MENU_PAUSE: u32 = 20330;
pub const IDS_MEDIA_OVERFLOW_MENU_DOWNLOAD: u32 = 20331;
pub const IDS_MEDIA_OVERFLOW_MENU_ENTER_PICTURE_IN_PICTURE: u32 = 20332;
pub const IDS_MEDIA_OVERFLOW_MENU_EXIT_PICTURE_IN_PICTURE: u32 = 20333;
pub const IDS_MEDIA_PICTURE_IN_PICTURE_INTERSTITIAL_TEXT: u32 = 20334;
pub const IDS_MEDIA_REMOTING_CAST_TEXT: u32 = 20335;
pub const IDS_MEDIA_REMOTING_CAST_TO_UNKNOWN_DEVICE_TEXT: u32 = 20336;
pub const IDS_MEDIA_REMOTING_STOP_TEXT: u32 = 20337;
pub const IDS_MEDIA_REMOTING_STOP_BY_PLAYBACK_QUALITY_TEXT: u32 = 20338;
pub const IDS_MEDIA_REMOTING_STOP_BY_ERROR_TEXT: u32 = 20339;
pub const IDS_MEDIA_SCRUBBING_MESSAGE_TEXT: u32 = 20340;
pub const IDS_MEDIA_TRACKS_NO_LABEL: u32 = 20341;
pub const IDS_MEDIA_TRACKS_OFF: u32 = 20342;
pub const IDS_PLUGIN_INITIALIZATION_ERROR: u32 = 20343;
pub const IDS_MEDIA_PLAYBACK_ERROR: u32 = 20344;
pub const IDS_UNITS_KIBIBYTES: u32 = 20345;
pub const IDS_UNITS_MEBIBYTES: u32 = 20346;
pub const IDS_UNITS_GIBIBYTES: u32 = 20347;
pub const IDS_UNITS_TEBIBYTES: u32 = 20348;
pub const IDS_UNITS_PEBIBYTES: u32 = 20349;
pub const CONTENT_INVALID_TRUE: u32 = 20350;
pub const CONTENT_INVALID_SPELLING: u32 = 20351;
pub const CONTENT_INVALID_GRAMMAR: u32 = 20352;
pub const IDS_EXTENSION_BAD_FILE_ENCODING: u32 = 24720;
pub const IDS_EXTENSION_CANT_GET_ABSOLUTE_PATH: u32 = 24721;
pub const IDS_EXTENSION_CONTAINS_PRIVATE_KEY: u32 = 24722;
pub const IDS_EXTENSION_CRX_EXISTS: u32 = 24723;
pub const IDS_EXTENSION_DIRECTORY_NO_EXISTS: u32 = 24724;
pub const IDS_EXTENSION_ERROR_WHILE_SIGNING: u32 = 24725;
pub const IDS_EXTENSION_FAILED_DURING_PACKAGING: u32 = 24726;
pub const IDS_EXTENSION_LOAD_ABOUT_PAGE_FAILED: u32 = 24727;
pub const IDS_EXTENSION_LOAD_BACKGROUND_SCRIPT_FAILED: u32 = 24728;
pub const IDS_EXTENSION_LOAD_BACKGROUND_PAGE_FAILED: u32 = 24729;
pub const IDS_EXTENSION_LOAD_CSS_FAILED: u32 = 24730;
pub const IDS_EXTENSION_LOAD_ICON_FAILED: u32 = 24731;
pub const IDS_EXTENSION_LOAD_ICON_NOT_SUFFICIENTLY_VISIBLE: u32 = 24732;
pub const IDS_EXTENSION_LOAD_JAVASCRIPT_FAILED: u32 = 24733;
pub const IDS_EXTENSION_LOAD_OPTIONS_PAGE_FAILED: u32 = 24734;
pub const IDS_EXTENSION_LOCALES_NO_DEFAULT_LOCALE_SPECIFIED: u32 = 24735;
pub const IDS_EXTENSION_MANIFEST_UNREADABLE: u32 = 24736;
pub const IDS_EXTENSION_MANIFEST_INVALID: u32 = 24737;
pub const IDS_EXTENSION_PACKAGE_DIRECTORY_ERROR: u32 = 24738;
pub const IDS_EXTENSION_PACKAGE_IMAGE_PATH_ERROR: u32 = 24739;
pub const IDS_EXTENSION_PACKAGE_IMAGE_ERROR: u32 = 24740;
pub const IDS_EXTENSION_PACKAGE_UNZIP_ERROR: u32 = 24741;
pub const IDS_EXTENSION_PRIVATE_KEY_EXISTS: u32 = 24742;
pub const IDS_EXTENSION_PRIVATE_KEY_FAILED_TO_READ: u32 = 24743;
pub const IDS_EXTENSION_PRIVATE_KEY_FAILED_TO_EXPORT: u32 = 24744;
pub const IDS_EXTENSION_PRIVATE_KEY_FAILED_TO_GENERATE: u32 = 24745;
pub const IDS_EXTENSION_PRIVATE_KEY_FAILED_TO_OUTPUT: u32 = 24746;
pub const IDS_EXTENSION_PRIVATE_KEY_INVALID: u32 = 24747;
pub const IDS_EXTENSION_PRIVATE_KEY_NO_EXISTS: u32 = 24748;
pub const IDS_EXTENSION_PRIVATE_KEY_INVALID_PATH: u32 = 24749;
pub const IDS_EXTENSION_PRIVATE_KEY_INVALID_FORMAT: u32 = 24750;
pub const IDS_EXTENSION_PUBLIC_KEY_FAILED_TO_EXPORT: u32 = 24751;
pub const IDS_LOAD_STATE_PARAMETER_EXTENSION: u32 = 24752;
pub const IDS_EXTENSION_SHARING_VIOLATION: u32 = 24753;
pub const IDS_EXTENSION_CANT_INSTALL_POLICY_BLOCKED: u32 = 24754;
pub const IDS_EXTENSION_CANT_MODIFY_POLICY_REQUIRED: u32 = 24755;
pub const IDS_EXTENSION_CANT_UNINSTALL_POLICY_REQUIRED: u32 = 24756;
pub const IDS_EXTENSION_DISABLED_UPDATE_REQUIRED_BY_POLICY: u32 = 24757;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_SERIAL: u32 = 24758;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_UNKNOWN_VENDOR: u32 = 24759;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_UNKNOWN_VENDOR_SERIAL: u32 = 24760;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_VENDOR: u32 = 24761;
pub const IDS_DEVICE_NAME_WITH_PRODUCT_VENDOR_SERIAL: u32 = 24762;
pub const IDS_DEVICE_NAME_WITH_UNKNOWN_PRODUCT_UNKNOWN_VENDOR: u32 = 24763;
pub const IDS_DEVICE_NAME_WITH_UNKNOWN_PRODUCT_UNKNOWN_VENDOR_SERIAL: u32 = 24764;
pub const IDS_DEVICE_NAME_WITH_UNKNOWN_PRODUCT_VENDOR: u32 = 24765;
pub const IDS_DEVICE_NAME_WITH_UNKNOWN_PRODUCT_VENDOR_SERIAL: u32 = 24766;
pub const IDS_DEVICE_PERMISSIONS_PROMPT_SINGLE_SELECTION: u32 = 24767;
pub const IDS_DEVICE_PERMISSIONS_PROMPT_MULTIPLE_SELECTION: u32 = 24768;
pub const IDS_CAMERA_FACING_USER: u32 = 24769;
pub const IDS_CAMERA_FACING_ENVIRONMENT: u32 = 24770;
pub const IDS_EXTENSION_USB_DEVICE_PRODUCT_NAME_AND_VENDOR: u32 = 24771;
pub const IDS_EXTENSION_TASK_MANAGER_APPVIEW_TAG_PREFIX: u32 = 24772;
pub const IDS_EXTENSION_TASK_MANAGER_EXTENSIONOPTIONS_TAG_PREFIX: u32 = 24773;
pub const IDS_EXTENSION_TASK_MANAGER_EXTENSIONVIEW_TAG_PREFIX: u32 = 24774;
pub const IDS_EXTENSION_TASK_MANAGER_MIMEHANDLERVIEW_TAG_PREFIX: u32 = 24775;
pub const IDS_EXTENSION_TASK_MANAGER_WEBVIEW_TAG_PREFIX: u32 = 24776;
pub const IDS_EXTENSION_WARNINGS_NETWORK_DELAY: u32 = 24777;
pub const IDS_EXTENSION_WARNINGS_DOWNLOAD_FILENAME_CONFLICT: u32 = 24778;
pub const IDS_EXTENSION_WARNING_RELOAD_TOO_FREQUENT: u32 = 24779;
pub const IDS_EXTENSION_WARNING_RULESET_FAILED_TO_LOAD: u32 = 24780;
pub const IDS_EXTENSION_INSTALL_PROCESS_CRASHED: u32 = 24781;
pub const IDS_EXTENSION_PACKAGE_ERROR_CODE: u32 = 24782;
pub const IDS_EXTENSION_PACKAGE_ERROR_MESSAGE: u32 = 24783;
pub const IDS_EXTENSION_PACKAGE_INSTALL_ERROR: u32 = 24784;
pub const IDS_EXTENSION_UNPACK_FAILED: u32 = 24785;
pub const IDS_EXTENSION_WEBGL_NOT_SUPPORTED: u32 = 24786;
pub const IDS_BOOKMARK_GROUP_FROM_IE: u32 = 800;
pub const IDS_BOOKMARK_GROUP_FROM_EDGE: u32 = 801;
pub const IDS_BOOKMARK_GROUP_FROM_FIREFOX: u32 = 802;
pub const IDS_BOOKMARK_GROUP_FROM_SAFARI: u32 = 803;
pub const IDS_BOOKMARK_GROUP: u32 = 804;
pub const IDS_BOOKMARK_BAR_SHOW_APPS_SHORTCUT: u32 = 805;
pub const IDS_BOOKMARK_BAR_SHOW_MANAGED_BOOKMARKS_DEFAULT_NAME: u32 = 806;
pub const IDS_BOOKMARK_BAR_SHOW_MANAGED_BOOKMARKS: u32 = 807;
pub const IDS_BOOKMARK_BAR_APPS_SHORTCUT_NAME: u32 = 282;
pub const IDS_BOOKMARK_BAR_APPS_SHORTCUT_TOOLTIP: u32 = 283;
pub const IDS_BOOKMARK_BAR_OPEN_ALL: u32 = 808;
pub const IDS_BOOKMARK_BAR_OPEN_ALL_COUNT: u32 = 809;
pub const IDS_BOOKMARK_BAR_OPEN_ALL_COUNT_NEW_WINDOW: u32 = 810;
pub const IDS_BOOKMARK_BAR_OPEN_ALL_COUNT_INCOGNITO: u32 = 811;
pub const IDS_BOOKMARK_BAR_OPEN_IN_NEW_TAB: u32 = 812;
pub const IDS_BOOKMARK_BAR_OPEN_IN_NEW_WINDOW: u32 = 813;
pub const IDS_BOOKMARK_BAR_OPEN_INCOGNITO: u32 = 814;
pub const IDS_BOOKMARK_BAR_EDIT: u32 = 815;
pub const IDS_BOOKMARK_BAR_RENAME_FOLDER: u32 = 816;
pub const IDS_BOOKMARK_BAR_REMOVE: u32 = 817;
pub const IDS_BOOKMARK_BAR_ADD_NEW_BOOKMARK: u32 = 818;
pub const IDS_BOOKMARK_BAR_NEW_FOLDER: u32 = 819;
pub const IDS_SHOW_BOOKMARK_BAR: u32 = 820;
pub const IDS_BOOKMARK_BAR_SHOULD_OPEN_ALL: u32 = 821;
pub const IDS_BOOKMARK_BUBBLE_PAGE_BOOKMARKED: u32 = 822;
pub const IDS_BOOKMARK_BUBBLE_PAGE_BOOKMARK: u32 = 823;
pub const IDS_BOOKMARK_BUBBLE_NAME_LABEL: u32 = 824;
pub const IDS_BOOKMARK_AX_BUBBLE_NAME_LABEL: u32 = 825;
pub const IDS_BOOKMARK_BUBBLE_FOLDER_LABEL: u32 = 826;
pub const IDS_BOOKMARK_AX_BUBBLE_FOLDER_LABEL: u32 = 827;
pub const IDS_BOOKMARK_BUBBLE_OPTIONS: u32 = 828;
pub const IDS_BOOKMARK_BUBBLE_CHOOSER_ANOTHER_FOLDER: u32 = 829;
pub const IDS_BOOKMARK_SYNC_PROMO_MESSAGE: u32 = 830;
pub const IDS_BOOKMARK_DICE_PROMO_SIGNIN_MESSAGE: u32 = 831;
pub const IDS_BOOKMARK_DICE_PROMO_SYNC_MESSAGE: u32 = 832;
pub const IDS_BOOKMARK_BUBBLE_DESKTOP_TO_IOS_PROMO_TITLE: u32 = 833;
pub const IDS_BOOKMARK_BUBBLE_DESKTOP_TO_IOS_PROMO_TITLE_V2: u32 = 834;
pub const IDS_BOOKMARK_BUBBLE_DESKTOP_TO_IOS_PROMO_TITLE_V3: u32 = 835;
pub const IDS_BOOKMARK_FOOTNOTE_DESKTOP_TO_IOS_PROMO_MESSAGE: u32 = 836;
pub const IDS_BOOKMARK_EDITOR_NAME_LABEL: u32 = 837;
pub const IDS_BOOKMARK_AX_EDITOR_NAME_LABEL: u32 = 838;
pub const IDS_BOOKMARK_AX_EDITOR_URL_LABEL: u32 = 840;
pub const IDS_BOOKMARK_EDITOR_URL_LABEL: u32 = 841;
pub const IDS_BOOKMARK_EDITOR_CONFIRM_DELETE: u32 = 842;
pub const IDS_BOOKMARK_EDITOR_NEW_FOLDER_BUTTON: u32 = 843;
pub const IDS_BOOKMARK_EDITOR_NEW_FOLDER_MENU_ITEM: u32 = 844;
pub const IDS_BOOKMARK_FOLDER_EDITOR_WINDOW_TITLE: u32 = 845;
pub const IDS_BOOKMARK_FOLDER_EDITOR_WINDOW_TITLE_NEW: u32 = 846;
pub const IDS_BOOKMARK_ALL_TABS_DIALOG_TITLE: u32 = 847;
pub const IDS_BOOKMARK_MANAGER_TITLE: u32 = 848;
pub const IDS_BOOKMARK_MANAGER_SEARCH_BUTTON: u32 = 849;
pub const IDS_BOOKMARK_MANAGER: u32 = 850;
pub const IDS_BOOKMARK_MANAGER_ORGANIZE_MENU: u32 = 851;
pub const IDS_BOOKMARK_MANAGER_INVALID_URL: u32 = 852;
pub const IDS_EXPORT_BOOKMARKS_DEFAULT_FILENAME: u32 = 853;
pub const IDS_BOOKMARK_MANAGER_ADD_BOOKMARK_TITLE: u32 = 854;
pub const IDS_BOOKMARK_MANAGER_ADD_FOLDER_TITLE: u32 = 855;
pub const IDS_BOOKMARK_MANAGER_CLEAR_SEARCH: u32 = 856;
pub const IDS_BOOKMARK_MANAGER_EMPTY_LIST: u32 = 857;
pub const IDS_BOOKMARK_MANAGER_EMPTY_UNMODIFIABLE_LIST: u32 = 858;
pub const IDS_BOOKMARK_MANAGER_FOLDER_LABEL: u32 = 859;
pub const IDS_BOOKMARK_MANAGER_FOLDER_RENAME_TITLE: u32 = 860;
pub const IDS_BOOKMARK_MANAGER_FOLDER_LIST_CHANGED: u32 = 861;
pub const IDS_BOOKMARK_MANAGER_LIST_AX_LABEL: u32 = 862;
pub const IDS_BOOKMARK_MANAGER_MENU_ADD_BOOKMARK: u32 = 863;
pub const IDS_BOOKMARK_MANAGER_MENU_ADD_FOLDER: u32 = 864;
pub const IDS_BOOKMARK_MANAGER_MENU_COPY_URL: u32 = 865;
pub const IDS_BOOKMARK_MANAGER_MENU_EXPORT: u32 = 866;
pub const IDS_BOOKMARK_MANAGER_MENU_HELP_CENTER: u32 = 867;
pub const IDS_BOOKMARK_MANAGER_MENU_IMPORT: u32 = 868;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_ALL: u32 = 869;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_ALL_NEW_WINDOW: u32 = 870;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_ALL_INCOGNITO: u32 = 871;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_IN_NEW_TAB: u32 = 872;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_IN_NEW_WINDOW: u32 = 873;
pub const IDS_BOOKMARK_MANAGER_MENU_OPEN_INCOGNITO: u32 = 874;
pub const IDS_BOOKMARK_MANAGER_MENU_RENAME: u32 = 875;
pub const IDS_BOOKMARK_MANAGER_MENU_SHOW_IN_FOLDER: u32 = 876;
pub const IDS_BOOKMARK_MANAGER_MENU_SORT: u32 = 877;
pub const IDS_BOOKMARK_MANAGER_MORE_ACTIONS: u32 = 878;
pub const IDS_BOOKMARK_MANAGER_MORE_ACTIONS_AX_LABEL: u32 = 879;
pub const IDS_BOOKMARK_MANAGER_OPEN_DIALOG_TITLE: u32 = 880;
pub const IDS_BOOKMARK_MANAGER_OPEN_DIALOG_CONFIRM: u32 = 881;
pub const IDS_BOOKMARK_MANAGER_ITEMS_SELECTED: u32 = 882;
pub const IDS_BOOKMARK_MANAGER_SIDEBAR_AX_LABEL: u32 = 883;
pub const IDS_BOOKMARK_MANAGER_TOAST_FOLDER_SORTED: u32 = 884;
pub const IDS_BOOKMARK_MANAGER_TOAST_ITEM_DELETED: u32 = 885;
pub const IDS_BOOKMARK_MANAGER_TOAST_ITEMS_DELETED: u32 = 886;
pub const IDS_BOOKMARK_MANAGER_TOAST_URL_COPIED: u32 = 887;
pub const IDS_BOOKMARK_MANAGER_TOAST_ITEM_COPIED: u32 = 888;
pub const IDS_BOOKMARK_MANAGER_TOAST_ITEMS_COPIED: u32 = 889;
pub const IDS_BOOKMARKS_MENU: u32 = 890;
pub const IDS_BOOKMARK_THIS_PAGE: u32 = 891;
pub const IDS_BOOKMARK_OPEN_PAGES: u32 = 892;
pub const IDS_TOOLTIP_STARRED: u32 = 310;
pub const IDS_APP_MANAGEMENT_ANDROID_SETTINGS: u32 = 893;
pub const IDS_APP_MANAGEMENT_APP_LIST_PREVIEW: u32 = 894;
pub const IDS_APP_MANAGEMENT_APP_LIST_TITLE: u32 = 895;
pub const IDS_APP_MANAGEMENT_BACK: u32 = 896;
pub const IDS_APP_MANAGEMENT_CAMERA: u32 = 897;
pub const IDS_APP_MANAGEMENT_EXTENSIONS_SETTINGS: u32 = 898;
pub const IDS_APP_MANAGEMENT_LESS_APPS: u32 = 899;
pub const IDS_APP_MANAGEMENT_LOCATION: u32 = 900;
pub const IDS_APP_MANAGEMENT_MICROPHONE: u32 = 901;
pub const IDS_APP_MANAGEMENT_MORE_APPS: u32 = 902;
pub const IDS_APP_MANAGEMENT_NO_RESULTS: u32 = 903;
pub const IDS_APP_MANAGEMENT_NOTIFICATIONS: u32 = 904;
pub const IDS_APP_MANAGEMENT_NOTIFICATIONS_SUBLABEL: u32 = 905;
pub const IDS_APP_MANAGEMENT_PERMISSIONS: u32 = 906;
pub const IDS_APP_MANAGEMENT_MORE_PERMISSIONS: u32 = 907;
pub const IDS_APP_MANAGEMENT_THIS_APP_CAN: u32 = 908;
pub const IDS_APP_MANAGEMENT_PIN_TO_SHELF: u32 = 909;
pub const IDS_APP_MANAGEMENT_SEARCH_PROMPT: u32 = 910;
pub const IDS_APP_MANAGEMENT_SITE_SETTING: u32 = 911;
pub const IDS_APP_MANAGEMENT_TITLE: u32 = 912;
pub const IDS_APP_MANAGEMENT_SIZE: u32 = 913;
pub const IDS_APP_MANAGEMENT_UNINSTALL: u32 = 914;
pub const IDS_APP_MANAGEMENT_VERSION: u32 = 915;
pub const IDS_MEDIA_ROUTER_TITLE: u32 = 916;
pub const IDS_MEDIA_ROUTER_ICON_TOOLTIP_TEXT: u32 = 212;
pub const IDS_MEDIA_ROUTER_MENU_ITEM_TITLE: u32 = 917;
pub const IDS_MEDIA_ROUTER_CAST_DIALOG_TITLE: u32 = 918;
pub const IDS_MEDIA_ROUTER_BACK_BUTTON_TITLE: u32 = 919;
pub const IDS_MEDIA_ROUTER_CLOSE_BUTTON_TITLE: u32 = 920;
pub const IDS_MEDIA_ROUTER_SEARCH_BUTTON_TITLE: u32 = 921;
pub const IDS_MEDIA_ROUTER_VIEW_CAST_MODE_LIST_BUTTON_TITLE: u32 = 922;
pub const IDS_MEDIA_ROUTER_VIEW_DEVICE_LIST_BUTTON_TITLE: u32 = 923;
pub const IDS_MEDIA_ROUTER_STOP_CASTING_BUTTON_ACCESSIBLE_NAME: u32 = 924;
pub const IDS_MEDIA_ROUTER_AUTO_CAST_MODE: u32 = 925;
pub const IDS_MEDIA_ROUTER_PRESENTATION_CAST_MODE: u32 = 926;
pub const IDS_MEDIA_ROUTER_DESKTOP_MIRROR_CAST_MODE: u32 = 927;
pub const IDS_MEDIA_ROUTER_TAB_MIRROR_CAST_MODE: u32 = 928;
pub const IDS_MEDIA_ROUTER_LOCAL_FILE_CAST_MODE: u32 = 929;
pub const IDS_MEDIA_ROUTER_SELECT_CAST_MODE_HEADER: u32 = 930;
pub const IDS_MEDIA_ROUTER_SHARE_YOUR_SCREEN_SUBHEADING: u32 = 931;
pub const IDS_MEDIA_ROUTER_CAST_LOCAL_MEDIA_SUBHEADING: u32 = 932;
pub const IDS_MEDIA_ROUTER_CAST_LOCAL_MEDIA_TITLE: u32 = 933;
pub const IDS_MEDIA_ROUTER_ALTERNATIVE_SOURCES_BUTTON: u32 = 934;
pub const IDS_MEDIA_ROUTER_ABOUT: u32 = 205;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_TOGGLE: u32 = 210;
pub const IDS_MEDIA_ROUTER_HELP: u32 = 207;
pub const IDS_MEDIA_ROUTER_ALWAYS_SHOW_TOOLBAR_ACTION: u32 = 208;
pub const IDS_MEDIA_ROUTER_REPORT_ISSUE: u32 = 211;
pub const IDS_MEDIA_ROUTER_SHOWN_BY_POLICY: u32 = 935;
pub const IDS_MEDIA_ROUTER_TOGGLE_MEDIA_REMOTING: u32 = 209;
pub const IDS_MEDIA_ROUTER_FIRST_RUN_FLOW_CLOUD_PREF_TEXT: u32 = 936;
pub const IDS_MEDIA_ROUTER_FIRST_RUN_FLOW_TITLE: u32 = 937;
pub const IDS_MEDIA_ROUTER_FIRST_RUN_FLOW_TEXT: u32 = 938;
pub const IDS_MEDIA_ROUTER_FIRST_RUN_FLOW_BUTTON: u32 = 939;
pub const IDS_MEDIA_ROUTER_DISMISS_BUTTON: u32 = 940;
pub const IDS_MEDIA_ROUTER_ISSUE_HEADER: u32 = 941;
pub const IDS_MEDIA_ROUTER_ISSUE_CREATE_ROUTE_TIMEOUT: u32 = 942;
pub const IDS_MEDIA_ROUTER_ISSUE_CREATE_ROUTE_TIMEOUT_FOR_DESKTOP: u32 = 943;
pub const IDS_MEDIA_ROUTER_ISSUE_CREATE_ROUTE_TIMEOUT_FOR_TAB: u32 = 944;
pub const IDS_MEDIA_ROUTER_ISSUE_PENDING_ROUTE: u32 = 945;
pub const IDS_MEDIA_ROUTER_ISSUE_UNABLE_TO_CAST_DESKTOP: u32 = 946;
pub const IDS_MEDIA_ROUTER_ISSUE_FILE_CAST_GENERIC_ERROR: u32 = 947;
pub const IDS_MEDIA_ROUTER_ISSUE_FILE_CAST_ERROR: u32 = 948;
pub const IDS_MEDIA_ROUTER_CASTING_ACTIVITY_STATUS: u32 = 949;
pub const IDS_MEDIA_ROUTER_START_CASTING_BUTTON: u32 = 950;
pub const IDS_MEDIA_ROUTER_STOP_CASTING_BUTTON: u32 = 951;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_PLAY_TITLE: u32 = 952;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_PAUSE_TITLE: u32 = 953;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_MUTE_TITLE: u32 = 954;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_UNMUTE_TITLE: u32 = 955;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_SEEK_TITLE: u32 = 956;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_VOLUME_TITLE: u32 = 957;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_CURRENT_TIME_LABEL: u32 = 958;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_DURATION_LABEL: u32 = 959;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_HANGOUTS_LOCAL_PRESENT_TITLE: u32 = 960;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_HANGOUTS_LOCAL_PRESENT_SUBTITLE: u32 = 961;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_ALWAYS_USE_MIRRORING_TITLE: u32 = 962;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_FULLSCREEN_VIDEOS_DROPDOWN_TITLE: u32 = 963;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_FULLSCREEN_VIDEOS_BOTH_SCREENS: u32 = 964;
pub const IDS_MEDIA_ROUTER_ROUTE_DETAILS_FULLSCREEN_VIDEOS_REMOTE_SCREEN: u32 = 965;
pub const IDS_MEDIA_ROUTER_STATUS_LOOKING_FOR_DEVICES: u32 = 966;
pub const IDS_MEDIA_ROUTER_STATUS_NO_DEVICES_FOUND: u32 = 967;
pub const IDS_MEDIA_ROUTER_NO_DEVICES_FOUND_BUTTON: u32 = 968;
pub const IDS_MEDIA_ROUTER_DESTINATION_MISSING: u32 = 969;
pub const IDS_MEDIA_ROUTER_SINK_AVAILABLE: u32 = 970;
pub const IDS_MEDIA_ROUTER_SINK_CONNECTING: u32 = 971;
pub const IDS_MEDIA_ROUTER_SINK_DISCONNECTING: u32 = 972;
pub const IDS_MEDIA_ROUTER_STOP_CASTING: u32 = 973;
pub const IDS_MEDIA_ROUTER_SOURCE_NOT_SUPPORTED: u32 = 974;
pub const IDS_MEDIA_ROUTER_SEARCH_LABEL: u32 = 975;
pub const IDS_MEDIA_ROUTER_SEARCH_NO_MATCHES: u32 = 976;
pub const IDS_MEDIA_ROUTER_FILE_DIALOG_AUDIO_VIDEO_FILTER: u32 = 977;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_TITLE: u32 = 978;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_BODY_TEXT: u32 = 979;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_CHECKBOX: u32 = 980;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_OPTIMIZE_BUTTON: u32 = 981;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_CANCEL_BUTTON: u32 = 982;
pub const IDS_MEDIA_ROUTER_REMOTING_DIALOG_CANCEL_BUTTON_MACOS: u32 = 983;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_DIALOG_TITLE: u32 = 984;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_DIALOG_BODY: u32 = 985;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_DIALOG_ENABLE: u32 = 986;
pub const IDS_MEDIA_ROUTER_CLOUD_SERVICES_DIALOG_CANCEL: u32 = 987;
pub const IDS_MEDIA_ROUTER_WIRED_DISPLAY_ROUTE_DESCRIPTION: u32 = 988;
pub const IDS_MEDIA_ROUTER_WIRED_DISPLAY_SINK_NAME: u32 = 989;
pub const IDS_LEGACY_SUPERVISED_USER_INFO: u32 = 990;
pub const IDS_CHILD_INFO_ONE_CUSTODIAN: u32 = 991;
pub const IDS_CHILD_INFO_TWO_CUSTODIANS: u32 = 992;
pub const IDS_LEGACY_SUPERVISED_USER_AVATAR_LABEL: u32 = 993;
pub const IDS_GENERIC_USER_AVATAR_LABEL: u32 = 213;
pub const IDS_INCOGNITO_BUBBLE_ACCESSIBLE_TITLE: u32 = 994;
pub const IDS_AVATAR_BUTTON_INCOGNITO: u32 = 995;
pub const IDS_AVATAR_BUTTON_INCOGNITO_TOOLTIP: u32 = 996;
pub const IDS_AVATAR_BUTTON_SYNC_ERROR: u32 = 997;
pub const IDS_AVATAR_BUTTON_SYNC_ERROR_TOOLTIP: u32 = 998;
pub const IDS_AVATAR_BUTTON_SYNC_PAUSED: u32 = 999;
pub const IDS_AVATAR_BUTTON_SYNC_PAUSED_TOOLTIP: u32 = 1000;
pub const IDS_LEGACY_SUPERVISED_USER_NEW_AVATAR_LABEL: u32 = 1001;
pub const IDS_CHILD_AVATAR_LABEL: u32 = 1002;
pub const IDS_BLOCK_INTERSTITIAL_DEFAULT_FEEDBACK_TEXT: u32 = 1003;
pub const IDS_PROFILES_OPTIONS_GROUP_NAME: u32 = 1004;
pub const IDS_PROFILES_PROFILE_BUBBLE_ACCESSIBLE_TITLE: u32 = 1006;
pub const IDS_PROFILES_PROFILE_SIGNOUT_BUTTON: u32 = 1007;
pub const IDS_PROFILES_EXIT_PROFILE_BUTTON: u32 = 1008;
pub const IDS_PROFILES_GAIA_SIGNIN_TITLE: u32 = 1009;
pub const IDS_PROFILES_ACCOUNT_REMOVAL_TITLE: u32 = 1010;
pub const IDS_PROFILES_SYNC_COMPLETE_TITLE: u32 = 1011;
pub const IDS_PROFILES_DICE_SIGNIN_BUTTON: u32 = 1012;
pub const IDS_PROFILES_DICE_NOT_SYNCING_TITLE: u32 = 1013;
pub const IDS_PROFILES_DICE_SIGNIN_FIRST_ACCOUNT_BUTTON: u32 = 1014;
pub const IDS_PROFILES_DICE_SIGNIN_FIRST_ACCOUNT_BUTTON_NO_NAME: u32 = 1015;
pub const IDS_PROFILES_DICE_SYNC_DISABLED_TITLE: u32 = 1016;
pub const IDS_PROFILES_DICE_SYNC_PAUSED_TITLE: u32 = 1017;
pub const IDS_PROFILES_EXIT_GUEST: u32 = 1018;
pub const IDS_PROFILES_SIGNIN_PROMO: u32 = 1019;
pub const IDS_PROFILES_PASSWORDS_LINK: u32 = 1020;
pub const IDS_PROFILES_CREDIT_CARDS_LINK: u32 = 1021;
pub const IDS_PROFILES_ADDRESSES_LINK: u32 = 1022;
pub const IDS_PROFILES_DICE_SIGNIN_WITH_ANOTHER_ACCOUNT_BUTTON: u32 = 1023;
pub const IDS_PROFILES_DICE_USE_ANOTHER_ACCOUNT_BUTTON: u32 = 1024;
pub const IDS_PROFILES_PROFILE_MANAGE_ACCOUNTS_BUTTON: u32 = 1025;
pub const IDS_PROFILES_PROFILE_HIDE_MANAGE_ACCOUNTS_BUTTON: u32 = 1026;
pub const IDS_PROFILES_MANAGE_USERS_BUTTON: u32 = 1027;
pub const IDS_PROFILES_OPEN_GUEST_PROFILE_BUTTON: u32 = 1028;
pub const IDS_PROFILES_CLOSE_ALL_WINDOWS_BUTTON: u32 = 1029;
pub const IDS_PROFILES_EDIT_PROFILE_ACCESSIBLE_NAME: u32 = 1030;
pub const IDS_PROFILES_EDIT_SIGNED_IN_PROFILE_ACCESSIBLE_NAME: u32 = 1031;
pub const IDS_PROFILES_GUEST_PROFILE_NAME: u32 = 1032;
pub const IDS_DEFAULT_PROFILE_NAME: u32 = 101;
pub const IDS_LEGACY_DEFAULT_PROFILE_NAME: u32 = 102;
pub const IDS_NUMBERED_PROFILE_NAME: u32 = 1033;
pub const IDS_NEW_NUMBERED_PROFILE_NAME: u32 = 1034;
pub const IDS_SINGLE_PROFILE_DISPLAY_NAME: u32 = 1035;
pub const IDS_GUEST_PROFILE_NAME: u32 = 1036;
pub const IDS_DEFAULT_AVATAR_NAME_8: u32 = 1037;
pub const IDS_DEFAULT_AVATAR_NAME_9: u32 = 1038;
pub const IDS_DEFAULT_AVATAR_NAME_10: u32 = 1039;
pub const IDS_DEFAULT_AVATAR_NAME_11: u32 = 1040;
pub const IDS_DEFAULT_AVATAR_NAME_12: u32 = 1041;
pub const IDS_DEFAULT_AVATAR_NAME_13: u32 = 1042;
pub const IDS_DEFAULT_AVATAR_NAME_14: u32 = 1043;
pub const IDS_DEFAULT_AVATAR_NAME_15: u32 = 1044;
pub const IDS_DEFAULT_AVATAR_NAME_16: u32 = 1045;
pub const IDS_DEFAULT_AVATAR_NAME_17: u32 = 1046;
pub const IDS_DEFAULT_AVATAR_NAME_18: u32 = 1047;
pub const IDS_DEFAULT_AVATAR_NAME_19: u32 = 1048;
pub const IDS_DEFAULT_AVATAR_NAME_20: u32 = 1049;
pub const IDS_DEFAULT_AVATAR_NAME_21: u32 = 1050;
pub const IDS_DEFAULT_AVATAR_NAME_22: u32 = 1051;
pub const IDS_DEFAULT_AVATAR_NAME_23: u32 = 1052;
pub const IDS_DEFAULT_AVATAR_NAME_24: u32 = 1053;
pub const IDS_DEFAULT_AVATAR_NAME_25: u32 = 1054;
pub const IDS_DEFAULT_AVATAR_NAME_26: u32 = 1055;
pub const IDS_DEFAULT_AVATAR_LABEL_0: u32 = 1056;
pub const IDS_DEFAULT_AVATAR_LABEL_1: u32 = 1057;
pub const IDS_DEFAULT_AVATAR_LABEL_2: u32 = 1058;
pub const IDS_DEFAULT_AVATAR_LABEL_3: u32 = 1059;
pub const IDS_DEFAULT_AVATAR_LABEL_4: u32 = 1060;
pub const IDS_DEFAULT_AVATAR_LABEL_5: u32 = 1061;
pub const IDS_DEFAULT_AVATAR_LABEL_6: u32 = 1062;
pub const IDS_DEFAULT_AVATAR_LABEL_7: u32 = 1063;
pub const IDS_DEFAULT_AVATAR_LABEL_8: u32 = 1064;
pub const IDS_DEFAULT_AVATAR_LABEL_9: u32 = 1065;
pub const IDS_DEFAULT_AVATAR_LABEL_10: u32 = 1066;
pub const IDS_DEFAULT_AVATAR_LABEL_11: u32 = 1067;
pub const IDS_DEFAULT_AVATAR_LABEL_12: u32 = 1068;
pub const IDS_DEFAULT_AVATAR_LABEL_13: u32 = 1069;
pub const IDS_DEFAULT_AVATAR_LABEL_14: u32 = 1070;
pub const IDS_DEFAULT_AVATAR_LABEL_15: u32 = 1071;
pub const IDS_DEFAULT_AVATAR_LABEL_16: u32 = 1072;
pub const IDS_DEFAULT_AVATAR_LABEL_17: u32 = 1073;
pub const IDS_DEFAULT_AVATAR_LABEL_18: u32 = 1074;
pub const IDS_DEFAULT_AVATAR_LABEL_19: u32 = 1075;
pub const IDS_DEFAULT_AVATAR_LABEL_20: u32 = 1076;
pub const IDS_DEFAULT_AVATAR_LABEL_21: u32 = 1077;
pub const IDS_DEFAULT_AVATAR_LABEL_22: u32 = 1078;
pub const IDS_DEFAULT_AVATAR_LABEL_23: u32 = 1079;
pub const IDS_DEFAULT_AVATAR_LABEL_24: u32 = 1080;
pub const IDS_DEFAULT_AVATAR_LABEL_25: u32 = 1081;
pub const IDS_DEFAULT_AVATAR_LABEL_27: u32 = 1082;
pub const IDS_DEFAULT_AVATAR_LABEL_28: u32 = 1083;
pub const IDS_DEFAULT_AVATAR_LABEL_29: u32 = 1084;
pub const IDS_DEFAULT_AVATAR_LABEL_30: u32 = 1085;
pub const IDS_DEFAULT_AVATAR_LABEL_31: u32 = 1086;
pub const IDS_DEFAULT_AVATAR_LABEL_32: u32 = 1087;
pub const IDS_DEFAULT_AVATAR_LABEL_33: u32 = 1088;
pub const IDS_DEFAULT_AVATAR_LABEL_34: u32 = 1089;
pub const IDS_DEFAULT_AVATAR_LABEL_35: u32 = 1090;
pub const IDS_DEFAULT_AVATAR_LABEL_36: u32 = 1091;
pub const IDS_DEFAULT_AVATAR_LABEL_37: u32 = 1092;
pub const IDS_DEFAULT_AVATAR_LABEL_38: u32 = 1093;
pub const IDS_DEFAULT_AVATAR_LABEL_39: u32 = 1094;
pub const IDS_DEFAULT_AVATAR_LABEL_40: u32 = 1095;
pub const IDS_DEFAULT_AVATAR_LABEL_41: u32 = 1096;
pub const IDS_DEFAULT_AVATAR_LABEL_42: u32 = 1097;
pub const IDS_DEFAULT_AVATAR_LABEL_43: u32 = 1098;
pub const IDS_DEFAULT_AVATAR_LABEL_44: u32 = 1099;
pub const IDS_DEFAULT_AVATAR_LABEL_45: u32 = 1100;
pub const IDS_DEFAULT_AVATAR_LABEL_46: u32 = 1101;
pub const IDS_DEFAULT_AVATAR_LABEL_47: u32 = 1102;
pub const IDS_DEFAULT_AVATAR_LABEL_48: u32 = 1103;
pub const IDS_DEFAULT_AVATAR_LABEL_49: u32 = 1104;
pub const IDS_DEFAULT_AVATAR_LABEL_50: u32 = 1105;
pub const IDS_DEFAULT_AVATAR_LABEL_51: u32 = 1106;
pub const IDS_DEFAULT_AVATAR_LABEL_52: u32 = 1107;
pub const IDS_DEFAULT_AVATAR_LABEL_53: u32 = 1108;
pub const IDS_DEFAULT_AVATAR_LABEL_54: u32 = 1109;
pub const IDS_DEFAULT_AVATAR_LABEL_55: u32 = 1110;
pub const IDS_PROFILES_LOCAL_PROFILE_STATE: u32 = 1111;
pub const IDS_PROFILES_CREATE_BUTTON_LABEL: u32 = 1112;
pub const IDS_PROFILES_MANAGE_BUTTON_LABEL: u32 = 1113;
pub const IDS_PROFILES_DEFAULT_NAME: u32 = 170;
pub const IDS_SYNC_LOGIN_NAME_PROHIBITED: u32 = 1114;
pub const IDS_SUPERVISED_USER_NOT_ALLOWED_BY_POLICY: u32 = 1115;
pub const IDS_OLD_PROFILES_DISABLED_TITLE: u32 = 1116;
pub const IDS_OLD_PROFILES_DISABLED_MESSAGE: u32 = 1117;
pub const IDS_OLD_PROFILES_DISABLED_ADD_PERSON_SUGGESTION: u32 = 1118;
pub const IDS_OLD_PROFILES_DISABLED_ADD_PERSON_SUGGESTION_WITH_DOMAIN: u32 = 1119;
pub const IDS_OLD_PROFILES_DISABLED_REMOVED_OLD_PROFILE: u32 = 1120;
pub const IDS_SYNC_USER_NAME_IN_USE_ERROR: u32 = 1121;
pub const IDS_SYNC_USER_NAME_IN_USE_BY_ERROR: u32 = 1122;
pub const IDS_PROFILES_CREATE_TITLE: u32 = 1123;
pub const IDS_PROFILES_CREATE_LOCAL_ERROR: u32 = 1124;
pub const IDS_PROFILES_CREATE_DESKTOP_SHORTCUT_LABEL: u32 = 1125;
pub const IDS_PROFILES_CREATE_SUPERVISED_JUST_SIGNED_IN: u32 = 1126;
pub const IDS_IMPORT_EXISTING_LEGACY_SUPERVISED_USER_TITLE: u32 = 1127;
pub const IDS_IMPORT_EXISTING_LEGACY_SUPERVISED_USER_TEXT: u32 = 1128;
pub const IDS_CREATE_NEW_LEGACY_SUPERVISED_USER_LINK: u32 = 1129;
pub const IDS_IMPORT_EXISTING_LEGACY_SUPERVISED_USER_OK: u32 = 1130;
pub const IDS_ADD_USER_BUTTON: u32 = 1131;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_BUTTON: u32 = 1132;
pub const IDS_CREATE_LEGACY_SUPERVISED_USER_MENU_LABEL: u32 = 1133;
pub const IDS_SCREEN_LOCK_SIGN_OUT: u32 = 1134;
pub const IDS_BROWSE_AS_GUEST_BUTTON: u32 = 1136;
pub const IDS_MORE_OPTIONS_BUTTON: u32 = 1137;
pub const IDS_SCREEN_LOCK_ACTIVE_USER: u32 = 1138;
pub const IDS_LOGIN_ERROR_AUTHENTICATING: u32 = 1147;
pub const IDS_LOGIN_ERROR_AUTHENTICATING_OFFLINE: u32 = 1148;
pub const IDS_LOGIN_POD_EMPTY_PASSWORD_TEXT: u32 = 1149;
pub const IDS_LOGIN_POD_SIGNING_IN: u32 = 1150;
pub const IDS_LOGIN_POD_PASSWORD_FIELD_ACCESSIBLE_NAME: u32 = 1151;
pub const IDS_LOGIN_POD_SUBMIT_BUTTON_ACCESSIBLE_NAME: u32 = 1152;
pub const IDS_LOGIN_POD_MENU_BUTTON_ACCESSIBLE_NAME: u32 = 1153;
pub const IDS_LOGIN_POD_MENU_REMOVE_ITEM_ACCESSIBLE_NAME: u32 = 1154;
pub const IDS_LOGIN_POD_LEGACY_SUPERVISED_USER_REMOVE_WARNING: u32 = 1155;
pub const IDS_LOGIN_POD_NON_OWNER_USER_REMOVE_WARNING: u32 = 1156;
pub const IDS_USER_MANAGER_GO_GUEST_PROFILES_LOCKED_ERROR: u32 = 1157;
pub const IDS_USER_MANAGER_REMOVE_PROFILE_PROFILES_LOCKED_ERROR: u32 = 1158;
pub const IDS_USER_MANAGER_ADD_PROFILE_PROFILES_LOCKED_ERROR: u32 = 1159;
pub const IDS_USER_MANAGER_PROMPT_MESSAGE: u32 = 1160;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_NONSYNC: u32 = 1161;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_HISTORY: u32 = 1162;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_PASSWORDS: u32 = 1163;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_BOOKMARKS: u32 = 1164;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_AUTOFILL: u32 = 1165;
pub const IDS_LOGIN_POD_USER_REMOVE_WARNING_CALCULATING: u32 = 1166;
pub const IDS_USER_MANAGER_TUTORIAL_NEXT: u32 = 1167;
pub const IDS_USER_MANAGER_TUTORIAL_DONE: u32 = 1168;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_GUEST_TITLE: u32 = 1169;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_FRIENDS_TITLE: u32 = 1170;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_TITLE: u32 = 1171;
pub const IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_USER_NOT_FOUND: u32 = 1172;
pub const IDS_SETTINGS_EMPTY_STRING: u32 = 2447;
pub const IDS_SETTINGS_MORE_ACTIONS: u32 = 2449;
pub const IDS_SETTINGS_TURN_ON: u32 = 2450;
pub const IDS_SETTINGS_ABOUT_PAGE_BROWSER_VERSION: u32 = 2451;
pub const IDS_SETTINGS_ABOUT_PAGE_RELAUNCH: u32 = 2463;
pub const IDS_SETTINGS_ABOUT_UPGRADE_CHECK_STARTED: u32 = 2490;
pub const IDS_SETTINGS_ACCESSIBILITY: u32 = 2493;
pub const IDS_SETTINGS_ACCESSIBILITY_WEB_STORE: u32 = 2494;
pub const IDS_SETTINGS_MORE_FEATURES_LINK: u32 = 2495;
pub const IDS_SETTINGS_MORE_FEATURES_LINK_DESCRIPTION: u32 = 2496;
pub const IDS_SETTINGS_ACCESSIBLE_IMAGE_LABELS_TITLE: u32 = 2497;
pub const IDS_SETTINGS_ACCESSIBLE_IMAGE_LABELS_SUBTITLE: u32 = 2498;
pub const IDS_SETTINGS_APPEARANCE: u32 = 2642;
pub const IDS_SETTINGS_CUSTOM_WEB_ADDRESS: u32 = 2643;
pub const IDS_SETTINGS_ENTER_CUSTOM_WEB_ADDRESS: u32 = 2644;
pub const IDS_SETTINGS_HOME_BUTTON_DISABLED: u32 = 2645;
pub const IDS_SETTINGS_THEMES: u32 = 2646;
pub const IDS_SETTINGS_RESET_TO_DEFAULT_THEME: u32 = 2651;
pub const IDS_SETTINGS_CHROME_COLORS: u32 = 2652;
pub const IDS_SETTINGS_SHOW_HOME_BUTTON: u32 = 2653;
pub const IDS_SETTINGS_SHOW_BOOKMARKS_BAR: u32 = 2654;
pub const IDS_SETTINGS_HOME_PAGE_NTP: u32 = 2655;
pub const IDS_SETTINGS_CHANGE_HOME_PAGE: u32 = 2656;
pub const IDS_SETTINGS_WEB_STORE: u32 = 2657;
pub const IDS_SETTINGS_ADVANCED: u32 = 2660;
pub const IDS_SETTINGS_BASIC: u32 = 2661;
pub const IDS_SETTINGS_MENU_BUTTON_LABEL: u32 = 2662;
pub const IDS_SETTINGS_MENU_EXTENSIONS_LINK_TOOLTIP: u32 = 2663;
pub const IDS_SETTINGS_SEARCH_PROMPT: u32 = 2664;
pub const IDS_SETTINGS_SEARCH_NO_RESULTS_HELP: u32 = 2665;
pub const IDS_SETTINGS_SETTINGS: u32 = 2666;
pub const IDS_SETTINGS_ALT_PAGE_TITLE: u32 = 2667;
pub const IDS_SETTINGS_RESTART: u32 = 2668;
pub const IDS_SETTINGS_CONTROLLED_BY_EXTENSION: u32 = 2671;
pub const IDS_SETTINGS_CLEAR: u32 = 2672;
pub const IDS_SETTINGS_EDIT: u32 = 2673;
pub const IDS_SETTINGS_TOGGLE_ON: u32 = 2674;
pub const IDS_SETTINGS_TOGGLE_OFF: u32 = 2675;
pub const IDS_SETTINGS_NOT_VALID: u32 = 2676;
pub const IDS_SETTINGS_NOT_VALID_WEB_ADDRESS: u32 = 2677;
pub const IDS_SETTINGS_NOT_VALID_WEB_ADDRESS_FOR_CONTENT_TYPE: u32 = 2678;
pub const IDS_SETTINGS_RETRY: u32 = 2679;
pub const IDS_SETTINGS_AUTOFILL: u32 = 2680;
pub const IDS_SETTINGS_GOOGLE_PAYMENTS: u32 = 2681;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_ADD_TITLE: u32 = 2682;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_EDIT_TITLE: u32 = 2683;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_COUNTRY: u32 = 2684;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_PHONE: u32 = 2685;
pub const IDS_SETTINGS_AUTOFILL_ADDRESSES_EMAIL: u32 = 2686;
pub const IDS_SETTINGS_AUTOFILL_CREDIT_CARD_TYPE_COLUMN_LABEL: u32 = 2687;
pub const IDS_SETTINGS_AUTOFILL_DETAIL: u32 = 2688;
pub const IDS_SETTINGS_ADDRESS_REMOVE: u32 = 2689;
pub const IDS_SETTINGS_CREDIT_CARD_REMOVE: u32 = 2690;
pub const IDS_SETTINGS_CREDIT_CARD_CLEAR: u32 = 2691;
pub const IDS_SETTINGS_EDIT_CREDIT_CARD_TITLE: u32 = 2692;
pub const IDS_SETTINGS_PAYMENTS_MANAGE_CREDIT_CARDS: u32 = 2693;
pub const IDS_SETTINGS_PAYMENTS_SAVED_TO_THIS_DEVICE_ONLY: u32 = 2694;
pub const IDS_SETTINGS_ADD_CREDIT_CARD_TITLE: u32 = 2695;
pub const IDS_SETTINGS_MIGRATABLE_CARDS_LABEL: u32 = 2696;
pub const IDS_SETTINGS_SINGLE_MIGRATABLE_CARD_INFO: u32 = 2697;
pub const IDS_SETTINGS_MULTIPLE_MIGRATABLE_CARDS_INFO: u32 = 2698;
pub const IDS_SETTINGS_NAME_ON_CREDIT_CARD: u32 = 2699;
pub const IDS_SETTINGS_CREDIT_CARD_NUMBER: u32 = 2700;
pub const IDS_SETTINGS_CREDIT_CARD_EXPIRATION_DATE: u32 = 2701;
pub const IDS_SETTINGS_CREDIT_CARD_EXPIRATION_MONTH: u32 = 2702;
pub const IDS_SETTINGS_CREDIT_CARD_EXPIRATION_YEAR: u32 = 2703;
pub const IDS_SETTINGS_CREDIT_CARD_EXPIRED: u32 = 2704;
pub const IDS_SETTINGS_PASSWORDS: u32 = 2705;
pub const IDS_SETTINGS_PASSWORDS_SAVE_PASSWORDS_TOGGLE_LABEL: u32 = 2706;
pub const IDS_SETTINGS_PASSWORDS_AUTOSIGNIN_CHECKBOX_LABEL: u32 = 2707;
pub const IDS_SETTINGS_PASSWORDS_AUTOSIGNIN_CHECKBOX_DESC: u32 = 2708;
pub const IDS_SETTINGS_PASSWORDS_SAVED_HEADING: u32 = 2709;
pub const IDS_SETTINGS_PASSWORDS_EXCEPTIONS_HEADING: u32 = 2710;
pub const IDS_SETTINGS_PASSWORDS_DELETE_EXCEPTION: u32 = 2711;
pub const IDS_SETTINGS_PASSWORD_REMOVE: u32 = 2712;
pub const IDS_SETTINGS_PASSWORD_SEARCH: u32 = 2713;
pub const IDS_SETTINGS_PASSWORD_SHOW: u32 = 2714;
pub const IDS_SETTINGS_PASSWORD_HIDE: u32 = 2715;
pub const IDS_SETTINGS_PASSWORDS_VIEW_DETAILS_TITLE: u32 = 2716;
pub const IDS_SETTINGS_PASSWORD_DETAILS: u32 = 2717;
pub const IDS_SETTINGS_PASSWORDS_WEBSITE: u32 = 2718;
pub const IDS_SETTINGS_PASSWORDS_USERNAME: u32 = 2719;
pub const IDS_SETTINGS_PASSWORDS_PASSWORD: u32 = 2720;
pub const IDS_SETTINGS_ADDRESS_NONE: u32 = 2721;
pub const IDS_SETTINGS_PAYMENT_METHODS_NONE: u32 = 2722;
pub const IDS_SETTINGS_PASSWORDS_NONE: u32 = 2723;
pub const IDS_SETTINGS_PASSWORDS_EXCEPTIONS_NONE: u32 = 2724;
pub const IDS_SETTINGS_PASSWORD_UNDO: u32 = 2725;
pub const IDS_SETTINGS_PASSWORD_DELETED_PASSWORD: u32 = 2726;
pub const IDS_SETTINGS_PASSWORDS_MANAGE_PASSWORDS: u32 = 2727;
pub const IDS_SETTINGS_PASSWORDS_EXPORT_MENU_ITEM: u32 = 2728;
pub const IDS_SETTINGS_PASSWORDS_EXPORT_TITLE: u32 = 2729;
pub const IDS_SETTINGS_PASSWORDS_EXPORT_DESCRIPTION: u32 = 2730;
pub const IDS_SETTINGS_PASSWORDS_EXPORT: u32 = 2731;
pub const IDS_SETTINGS_PASSWORDS_EXPORT_TRY_AGAIN: u32 = 2732;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_TITLE: u32 = 2733;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_FAILURE_TITLE: u32 = 2734;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_FAILURE_TIPS: u32 = 2735;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_FAILURE_TIP_ENOUGH_SPACE: u32 = 2736;
pub const IDS_SETTINGS_PASSWORDS_EXPORTING_FAILURE_TIP_ANOTHER_FOLDER: u32 = 2737;
pub const IDS_SETTINGS_PASSWORD_ROW_MORE_ACTIONS: u32 = 2738;
pub const IDS_SETTINGS_PASSWORD_ROW_FEDERATED_MORE_ACTIONS: u32 = 2739;
pub const IDS_SETTINGS_DEFAULT_BROWSER: u32 = 2740;
pub const IDS_SETTINGS_DEFAULT_BROWSER_MAKE_DEFAULT_BUTTON: u32 = 2741;
pub const IDS_SETTINGS_CLEAR_PERIOD_TITLE: u32 = 2838;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA_WITH_SYNC: u32 = 2839;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA_WITH_SYNC_ERROR: u32 = 2840;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA_WITH_SYNC_PASSPHRASE_ERROR: u32 = 2841;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA_WITH_SYNC_PAUSED: u32 = 2842;
pub const IDS_SETTINGS_CLEAR_BROWSING_HISTORY: u32 = 2843;
pub const IDS_SETTINGS_CLEAR_COOKIES_AND_SITE_DATA_SUMMARY_BASIC: u32 = 2844;
pub const IDS_SETTINGS_CLEAR_COOKIES_AND_SITE_DATA_SUMMARY_BASIC_WITH_EXCEPTION: u32 = 2845;
pub const IDS_SETTINGS_CLEAR_BROWSING_HISTORY_SUMMARY: u32 = 2846;
pub const IDS_SETTINGS_CLEAR_BROWSING_HISTORY_SUMMARY_SIGNED_IN: u32 = 2847;
pub const IDS_SETTINGS_CLEAR_BROWSING_HISTORY_SUMMARY_SYNCED: u32 = 2848;
pub const IDS_SETTINGS_CLEAR_DOWNLOAD_HISTORY: u32 = 2849;
pub const IDS_SETTINGS_CLEAR_CACHE: u32 = 2850;
pub const IDS_SETTINGS_CLEAR_COOKIES: u32 = 2851;
pub const IDS_SETTINGS_CLEAR_COOKIES_FLASH: u32 = 2852;
pub const IDS_SETTINGS_CLEAR_PASSWORDS: u32 = 2853;
pub const IDS_SETTINGS_CLEAR_FORM_DATA: u32 = 2854;
pub const IDS_SETTINGS_CLEAR_HOSTED_APP_DATA: u32 = 2855;
pub const IDS_SETTINGS_CLEAR_PERIOD_HOUR: u32 = 2856;
pub const IDS_SETTINGS_CLEAR_PERIOD_24_HOURS: u32 = 2857;
pub const IDS_SETTINGS_CLEAR_PERIOD_7_DAYS: u32 = 2858;
pub const IDS_SETTINGS_CLEAR_PERIOD_FOUR_WEEKS: u32 = 2859;
pub const IDS_SETTINGS_CLEAR_PERIOD_EVERYTHING: u32 = 2860;
pub const IDS_SETTINGS_NOTIFICATION_WARNING: u32 = 2861;
pub const IDS_SETTINGS_PRINTING: u32 = 2862;
pub const IDS_SETTINGS_PRINTING_CLOUD_PRINT_LEARN_MORE_LABEL: u32 = 2863;
pub const IDS_SETTINGS_PRINTING_NOTIFICATIONS_LABEL: u32 = 2864;
pub const IDS_SETTINGS_PRINTING_MANAGE_CLOUD_PRINT_DEVICES: u32 = 2865;
pub const IDS_SETTINGS_PRINTING_LOCAL_PRINTERS_TITLE: u32 = 2919;
pub const IDS_SETTINGS_PRINTING_CLOUD_PRINTERS: u32 = 2920;
pub const IDS_SETTINGS_DOWNLOADS: u32 = 2921;
pub const IDS_SETTINGS_DOWNLOAD_LOCATION: u32 = 2922;
pub const IDS_SETTINGS_CHANGE_DOWNLOAD_LOCATION: u32 = 2923;
pub const IDS_SETTINGS_PROMPT_FOR_DOWNLOAD: u32 = 2924;
pub const IDS_SETTINGS_DISCONNECT_GOOGLE_DRIVE: u32 = 2925;
pub const IDS_SETTINGS_OPEN_FILE_TYPES_AUTOMATICALLY: u32 = 2926;
pub const IDS_SETTINGS_ON_STARTUP: u32 = 3223;
pub const IDS_SETTINGS_ON_STARTUP_OPEN_NEW_TAB: u32 = 3224;
pub const IDS_SETTINGS_ON_STARTUP_CONTINUE: u32 = 3225;
pub const IDS_SETTINGS_ON_STARTUP_OPEN_SPECIFIC: u32 = 3226;
pub const IDS_SETTINGS_ON_STARTUP_USE_CURRENT: u32 = 3227;
pub const IDS_SETTINGS_ON_STARTUP_ADD_NEW_PAGE: u32 = 3228;
pub const IDS_SETTINGS_ON_STARTUP_EDIT_PAGE: u32 = 3229;
pub const IDS_SETTINGS_ON_STARTUP_SITE_URL: u32 = 3230;
pub const IDS_SETTINGS_ON_STARTUP_REMOVE: u32 = 3231;
pub const IDS_SETTINGS_ON_STARTUP_PAGE_TOOLTIP: u32 = 3232;
pub const IDS_SETTINGS_INVALID_URL: u32 = 3233;
pub const IDS_SETTINGS_URL_TOOL_LONG: u32 = 3234;
pub const IDS_SETTINGS_LANGUAGES_PAGE_TITLE: u32 = 3235;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_TITLE: u32 = 3236;
pub const IDS_SETTINGS_LANGUAGE_SEARCH: u32 = 3237;
pub const IDS_SETTINGS_LANGUAGES_EXPAND_ACCESSIBILITY_LABEL: u32 = 3238;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_ORDERING_INSTRUCTIONS: u32 = 3239;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_MOVE_TO_TOP: u32 = 3240;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_MOVE_UP: u32 = 3241;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_MOVE_DOWN: u32 = 3242;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_LIST_REMOVE: u32 = 3243;
pub const IDS_SETTINGS_LANGUAGES_LANGUAGES_ADD: u32 = 3244;
pub const IDS_SETTINGS_LANGUAGES_OFFER_TO_TRANSLATE_IN_THIS_LANGUAGE: u32 = 3245;
pub const IDS_SETTINGS_LANGUAGES_OFFER_TO_ENABLE_TRANSLATE: u32 = 3246;
pub const IDS_SETTINGS_LANGUAGES_TRANSLATE_TARGET: u32 = 3247;
pub const IDS_SETTINGS_LANGUAGES_MANAGE_LANGUAGES_TITLE: u32 = 3256;
pub const IDS_SETTINGS_LANGUAGES_ALL_LANGUAGES: u32 = 3257;
pub const IDS_SETTINGS_LANGUAGES_ENABLED_LANGUAGES: u32 = 3258;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_TITLE: u32 = 3259;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_BASIC_LABEL: u32 = 3260;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_ENHANCED_LABEL: u32 = 3261;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_ENHANCED_DESCRIPTION: u32 = 3262;
pub const IDS_SETTING_LANGUAGES_SPELL_CHECK_DISABLED_REASON: u32 = 3263;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_LANGUAGES_LIST_TITLE: u32 = 3264;
pub const IDS_SETTINGS_LANGUAGES_SPELL_CHECK_MANAGE: u32 = 3265;
pub const IDS_SETTINGS_LANGUAGES_EDIT_DICTIONARY_TITLE: u32 = 3266;
pub const IDS_SETTINGS_LANGUAGES_ADD_DICTIONARY_WORD: u32 = 3267;
pub const IDS_SETTINGS_LANGUAGES_ADD_DICTIONARY_WORD_BUTTON: u32 = 3268;
pub const IDS_SETTINGS_LANGUAGES_ADD_DICTIONARY_WORD_DUPLICATE_ERROR: u32 = 3269;
pub const IDS_SETTINGS_LANGUAGES_ADD_DICTIONARY_WORD_LENGTH_ERROR: u32 = 3270;
pub const IDS_SETTINGS_LANGUAGES_DICTIONARY_WORDS: u32 = 3271;
pub const IDS_SETTINGS_LANGUAGES_DICTIONARY_WORDS_NONE: u32 = 3272;
pub const IDS_SETTINGS_LANGUAGES_DICTIONARY_DOWNLOAD_FAILED: u32 = 3273;
pub const IDS_SETTINGS_LANGUAGES_DICTIONARY_DOWNLOAD_FAILED_HELP: u32 = 3274;
pub const IDS_SETTINGS_PRIVACY: u32 = 3275;
pub const IDS_SETTINGS_LINKDOCTOR_PREF: u32 = 3276;
pub const IDS_SETTINGS_LINKDOCTOR_PREF_UNIFIED_CONSENT: u32 = 3277;
pub const IDS_SETTINGS_LINKDOCTOR_PREF_DESC_UNIFIED_CONSENT: u32 = 3278;
pub const IDS_SETTINGS_SUGGEST_PREF: u32 = 3279;
pub const IDS_SETTINGS_SUGGEST_PREF_UNIFIED_CONSENT: u32 = 3280;
pub const IDS_SETTINGS_SUGGEST_PREF_DESC_UNIFIED_CONSENT: u32 = 3281;
pub const IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_LABEL: u32 = 3282;
pub const IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_LABEL_UNIFIED_CONSENT: u32 = 3283;
pub const IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_DESC_UNIFIED_CONSENT: u32 = 3284;
pub const IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION: u32 = 3285;
pub const IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC: u32 = 3286;
pub const IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING: u32 = 3287;
pub const IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING_DESC: u32 = 3288;
pub const IDS_SETTINGS_SPELLING_PREF: u32 = 3289;
pub const IDS_SETTINGS_SPELLING_DESCRIPTION: u32 = 3290;
pub const IDS_SETTINGS_SPELLING_PREF_UNIFIED_CONSENT: u32 = 3291;
pub const IDS_SETTINGS_ENABLE_LOGGING: u32 = 3292;
pub const IDS_SETTINGS_ENABLE_LOGGING_DIAGNOSTIC_AND_USAGE_DATA: u32 = 3293;
pub const IDS_SETTINGS_ENABLE_LOGGING_UNIFIED_CONSENT: u32 = 3294;
pub const IDS_SETTINGS_ENABLE_LOGGING_DESC_UNIFIED_CONSENT: u32 = 3295;
pub const IDS_SETTINGS_ENABLE_URL_KEYED_ANONYMIZED_DATA_COLLECTION: u32 = 3296;
pub const IDS_SETTINGS_ENABLE_URL_KEYED_ANONYMIZED_DATA_COLLECTION_DESC: u32 = 3297;
pub const IDS_SETTINGS_ENABLE_DO_NOT_TRACK: u32 = 3298;
pub const IDS_SETTINGS_ENABLE_DO_NOT_TRACK_DIALOG_TITLE: u32 = 3299;
pub const IDS_SETTINGS_ENABLE_DO_NOT_TRACK_DIALOG_TEXT: u32 = 3300;
pub const IDS_SETTINGS_ENABLE_CONTENT_PROTECTION_ATTESTATION: u32 = 3301;
pub const IDS_SETTINGS_WAKE_ON_WIFI_DESCRIPTION: u32 = 3302;
pub const IDS_SETTINGS_MANAGE_CERTIFICATES: u32 = 3303;
pub const IDS_SETTINGS_MANAGE_CERTIFICATES_DESCRIPTION: u32 = 3304;
pub const IDS_SETTINGS_CONTENT_SETTINGS: u32 = 3305;
pub const IDS_SETTINGS_SITE_SETTINGS: u32 = 3306;
pub const IDS_SETTINGS_SITE_SETTINGS_DESCRIPTION: u32 = 3307;
pub const IDS_SETTINGS_CLEAR_DATA: u32 = 3308;
pub const IDS_SETTINGS_CLEAR_BROWSING_DATA: u32 = 3309;
pub const IDS_SETTINGS_CLEAR_DATA_DESCRIPTION: u32 = 3310;
pub const IDS_SETTINGS_TITLE_AND_COUNT: u32 = 3311;
pub const IDS_SETTINGS_SYNC_AND_GOOGLE_SERVICES_PRIVACY_DESC_UNIFIED_CONSENT: u32 = 3312;
pub const IDS_SETTINGS_RESET: u32 = 3313;
pub const IDS_SETTINGS_RESET_SETTINGS_TRIGGER: u32 = 3314;
pub const IDS_SETTINGS_RESET_AUTOMATED_DIALOG_TITLE: u32 = 3315;
pub const IDS_SETTINGS_RESET_BANNER_TEXT: u32 = 3316;
pub const IDS_SETTINGS_RESET_BANNER_RESET_BUTTON_TEXT: u32 = 3317;
pub const IDS_SETTINGS_SEARCH: u32 = 3324;
pub const IDS_SETTINGS_SEARCH_EXPLANATION: u32 = 3326;
pub const IDS_SETTINGS_SEARCH_MANAGE_SEARCH_ENGINES: u32 = 3327;
pub const IDS_SETTINGS_SEARCH_ENGINES: u32 = 3331;
pub const IDS_SETTINGS_SEARCH_ENGINES_SEARCH: u32 = 3332;
pub const IDS_SETTINGS_SEARCH_ENGINES_ADD_SEARCH_ENGINE: u32 = 3333;
pub const IDS_SETTINGS_SEARCH_ENGINES_EDIT_SEARCH_ENGINE: u32 = 3334;
pub const IDS_SETTINGS_SEARCH_ENGINES_DEFAULT_ENGINES: u32 = 3335;
pub const IDS_SETTINGS_SEARCH_ENGINES_OTHER_ENGINES: u32 = 3336;
pub const IDS_SETTINGS_SEARCH_ENGINES_NO_OTHER_ENGINES: u32 = 3337;
pub const IDS_SETTINGS_SEARCH_ENGINES_EXTENSION_ENGINES: u32 = 3338;
pub const IDS_SETTINGS_SEARCH_ENGINES_SEARCH_ENGINE: u32 = 3339;
pub const IDS_SETTINGS_SEARCH_ENGINES_KEYWORD: u32 = 3340;
pub const IDS_SETTINGS_SEARCH_ENGINES_QUERY_URL: u32 = 3341;
pub const IDS_SETTINGS_SEARCH_ENGINES_QUERY_URL_EXPLANATION: u32 = 3342;
pub const IDS_SETTINGS_SEARCH_ENGINES_MAKE_DEFAULT: u32 = 3343;
pub const IDS_SETTINGS_SEARCH_ENGINES_REMOVE_FROM_LIST: u32 = 3344;
pub const IDS_SETTINGS_SEARCH_ENGINES_MANAGE_EXTENSION: u32 = 3345;
pub const IDS_SETTINGS_EXCEPTIONS_EMBEDDED_ON_HOST: u32 = 3363;
pub const IDS_SETTINGS_EXCEPTIONS_EMBEDDED_ON_ANY_HOST: u32 = 3364;
pub const IDS_SETTINGS_SITE_SETTINGS_CATEGORY: u32 = 3365;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES: u32 = 3366;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_DESCRIPTION: u32 = 3367;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SEARCH: u32 = 3368;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SORT: u32 = 3369;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SORT_METHOD_MOST_VISITED: u32 = 3370;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SORT_METHOD_STORAGE: u32 = 3371;
pub const IDS_SETTINGS_SITE_SETTINGS_ALL_SITES_SORT_METHOD_NAME: u32 = 3372;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_REPRESENTATION_SEPARATOR: u32 = 3373;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS: u32 = 3374;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DOWNLOADS: u32 = 3375;
pub const IDS_SETTINGS_SITE_SETTINGS_BACKGROUND_SYNC: u32 = 3376;
pub const IDS_SETTINGS_SITE_SETTINGS_CAMERA: u32 = 3377;
pub const IDS_SETTINGS_SITE_SETTINGS_CAMERA_LABEL: u32 = 3378;
pub const IDS_SETTINGS_SITE_SETTINGS_CLIPBOARD: u32 = 3379;
pub const IDS_SETTINGS_SITE_SETTINGS_CLIPBOARD_ASK: u32 = 3380;
pub const IDS_SETTINGS_SITE_SETTINGS_CLIPBOARD_ASK_RECOMMENDED: u32 = 3381;
pub const IDS_SETTINGS_SITE_SETTINGS_CLIPBOARD_BLOCK: u32 = 3382;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIES: u32 = 3383;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLERS: u32 = 3384;
pub const IDS_SETTINGS_SITE_SETTINGS_LOCATION: u32 = 3385;
pub const IDS_SETTINGS_SITE_SETTINGS_MIC: u32 = 3386;
pub const IDS_SETTINGS_SITE_SETTINGS_MIC_LABEL: u32 = 3387;
pub const IDS_SETTINGS_SITE_SETTINGS_NOTIFICATIONS: u32 = 3388;
pub const IDS_SETTINGS_SITE_SETTINGS_IMAGES: u32 = 3389;
pub const IDS_SETTINGS_SITE_SETTINGS_JAVASCRIPT: u32 = 3390;
pub const IDS_SETTINGS_SITE_SETTINGS_FLASH: u32 = 3391;
pub const IDS_SETTINGS_SITE_SETTINGS_PAYMENT_HANDLER: u32 = 3392;
pub const IDS_SETTINGS_SITE_SETTINGS_PAYMENT_HANDLER_ALLOW: u32 = 3393;
pub const IDS_SETTINGS_SITE_SETTINGS_PAYMENT_HANDLER_ALLOW_RECOMMENDED: u32 = 3394;
pub const IDS_SETTINGS_SITE_SETTINGS_PAYMENT_HANDLER_BLOCK: u32 = 3395;
pub const IDS_SETTINGS_SITE_SETTINGS_PDF_DOCUMENTS: u32 = 3396;
pub const IDS_SETTINGS_SITE_SETTINGS_PDF_DOWNLOAD_PDFS: u32 = 3397;
pub const IDS_SETTINGS_SITE_SETTINGS_POPUPS: u32 = 3398;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT: u32 = 3399;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT_IDENTIFIERS: u32 = 3400;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT_ENABLE: u32 = 3401;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT_IDENTIFIERS_EXPLANATION: u32 = 3402;
pub const IDS_SETTINGS_SITE_SETTINGS_PROTECTED_CONTENT_ENABLE_IDENTIFIERS: u32 = 3403;
pub const IDS_SETTINGS_SITE_SETTINGS_UNSANDBOXED_PLUGINS: u32 = 3404;
pub const IDS_SETTINGS_SITE_SETTINGS_MIDI_DEVICES: u32 = 3405;
pub const IDS_SETTINGS_SITE_SETTINGS_MIDI_DEVICES_ASK: u32 = 3406;
pub const IDS_SETTINGS_SITE_SETTINGS_MIDI_DEVICES_ASK_RECOMMENDED: u32 = 3407;
pub const IDS_SETTINGS_SITE_SETTINGS_MIDI_DEVICES_BLOCK: u32 = 3408;
pub const IDS_SETTINGS_SITE_SETTINGS_SOUND: u32 = 3409;
pub const IDS_SETTINGS_SITE_SETTINGS_SENSORS: u32 = 3410;
pub const IDS_SETTINGS_SITE_SETTINGS_MOTION_SENSORS: u32 = 3411;
pub const IDS_SETTINGS_SITE_SETTINGS_USB_DEVICES: u32 = 3412;
pub const IDS_SETTINGS_SITE_SETTINGS_USB_DEVICES_ASK: u32 = 3413;
pub const IDS_SETTINGS_SITE_SETTINGS_USB_DEVICES_ASK_RECOMMENDED: u32 = 3414;
pub const IDS_SETTINGS_SITE_SETTINGS_USB_DEVICES_BLOCK: u32 = 3415;
pub const IDS_SETTINGS_SITE_SETTINGS_SERIAL_PORTS: u32 = 3416;
pub const IDS_SETTINGS_SITE_SETTINGS_SERIAL_PORTS_ASK: u32 = 3417;
pub const IDS_SETTINGS_SITE_SETTINGS_SERIAL_PORTS_ASK_RECOMMENDED: u32 = 3418;
pub const IDS_SETTINGS_SITE_SETTINGS_SERIAL_PORTS_BLOCK: u32 = 3419;
pub const IDS_SETTINGS_SITE_SETTINGS_REMOVE_ZOOM_LEVEL: u32 = 3420;
pub const IDS_SETTINGS_SITE_SETTINGS_ZOOM_LEVELS: u32 = 3421;
pub const IDS_SETTINGS_SITE_SETTINGS_MAY_SAVE_COOKIES: u32 = 3422;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_FIRST: u32 = 3423;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_FIRST_RECOMMENDED: u32 = 3424;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_BEFORE_ACCESSING: u32 = 3425;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_BEFORE_ACCESSING_RECOMMENDED: u32 = 3426;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_BEFORE_SENDING: u32 = 3427;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_BEFORE_SENDING_RECOMMENDED: u32 = 3428;
pub const IDS_SETTINGS_SITE_SETTINGS_DONT_SHOW_IMAGES: u32 = 3429;
pub const IDS_SETTINGS_SITE_SETTINGS_SHOW_ALL: u32 = 3430;
pub const IDS_SETTINGS_SITE_SETTINGS_SHOW_ALL_RECOMMENDED: u32 = 3431;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIES_ALLOW_SITES: u32 = 3432;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIES_ALLOW_SITES_RECOMMENDED: u32 = 3433;
pub const IDS_SETTINGS_SITE_SETTINGS_FLASH_BLOCK: u32 = 3434;
pub const IDS_SETTINGS_SITE_SETTINGS_FLASH_BLOCK_RECOMMENDED: u32 = 3435;
pub const IDS_SETTINGS_SITE_SETTINGS_FLASH_PERMISSIONS_ARE_EPHEMERAL: u32 = 3436;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW_RECENTLY_CLOSED_SITES: u32 = 3437;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW_RECENTLY_CLOSED_SITES_RECOMMENDED: u32 = 3438;
pub const IDS_SETTINGS_SITE_SETTINGS_BACKGROUND_SYNC_BLOCKED: u32 = 3439;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLERS_ASK: u32 = 3440;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLERS_ASK_RECOMMENDED: u32 = 3441;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLERS_BLOCKED: u32 = 3442;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS_BLOCK: u32 = 3443;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS_BLOCK_RECOMMENDED: u32 = 3444;
pub const IDS_SETTINGS_SITE_SETTINGS_SOUND_ALLOW: u32 = 3445;
pub const IDS_SETTINGS_SITE_SETTINGS_SOUND_ALLOW_RECOMMENDED: u32 = 3446;
pub const IDS_SETTINGS_SITE_SETTINGS_SOUND_BLOCK: u32 = 3447;
pub const IDS_SETTINGS_SITE_SETTINGS_SENSORS_ALLOW: u32 = 3448;
pub const IDS_SETTINGS_SITE_SETTINGS_MOTION_SENSORS_ALLOW: u32 = 3449;
pub const IDS_SETTINGS_SITE_SETTINGS_SENSORS_BLOCK: u32 = 3450;
pub const IDS_SETTINGS_SITE_SETTINGS_MOTION_SENSORS_BLOCK: u32 = 3451;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DOWNLOAD_ASK: u32 = 3452;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DOWNLOAD_ASK_RECOMMENDED: u32 = 3453;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DOWNLOAD_BLOCK: u32 = 3454;
pub const IDS_SETTINGS_SITE_SETTINGS_UNSANDBOXED_PLUGINS_ASK: u32 = 3455;
pub const IDS_SETTINGS_SITE_SETTINGS_UNSANDBOXED_PLUGINS_ASK_RECOMMENDED: u32 = 3456;
pub const IDS_SETTINGS_SITE_SETTINGS_UNSANDBOXED_PLUGINS_BLOCK: u32 = 3457;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOWED: u32 = 3458;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOWED_RECOMMENDED: u32 = 3459;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCKED: u32 = 3460;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCKED_RECOMMENDED: u32 = 3461;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW: u32 = 3462;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK: u32 = 3463;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK_SOUND: u32 = 3464;
pub const IDS_SETTINGS_SITE_SETTINGS_SESSION_ONLY: u32 = 3465;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_URL: u32 = 3466;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_DEFAULT_MENU: u32 = 3467;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW_DEFAULT_MENU: u32 = 3468;
pub const IDS_SETTINGS_SITE_SETTINGS_AUTOMATIC_DEFAULT_MENU: u32 = 3469;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK_DEFAULT_MENU: u32 = 3470;
pub const IDS_SETTINGS_SITE_SETTINGS_MUTE_DEFAULT_MENU: u32 = 3471;
pub const IDS_SETTINGS_SITE_SETTINGS_ALLOW_MENU: u32 = 3472;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK_MENU: u32 = 3473;
pub const IDS_SETTINGS_SITE_SETTINGS_ASK_MENU: u32 = 3474;
pub const IDS_SETTINGS_SITE_SETTINGS_MUTE_MENU: u32 = 3475;
pub const IDS_SETTINGS_SITE_SETTINGS_RESET_MENU: u32 = 3476;
pub const IDS_SETTINGS_SITE_SETTINGS_SESSION_ONLY_MENU: u32 = 3477;
pub const IDS_SETTINGS_SITE_SETTINGS_USAGE: u32 = 3478;
pub const IDS_SETTINGS_SITE_SETTINGS_USAGE_NONE: u32 = 3479;
pub const IDS_SETTINGS_SITE_SETTINGS_PERMISSIONS: u32 = 3480;
pub const IDS_SETTINGS_SITE_SETTINGS_SOURCE_DRM_DISABLED: u32 = 3481;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS_BLOCK_BLACKLISTED_SINGULAR: u32 = 3482;
pub const IDS_SETTINGS_SITE_SETTINGS_ADS_BLOCK_NOT_BLACKLISTED_SINGULAR: u32 = 3483;
pub const IDS_SETTINGS_SITE_SETTINGS_SOURCE_KILL_SWITCH: u32 = 3484;
pub const IDS_SETTINGS_SITE_SETTINGS_SOURCE_INSECURE_ORIGIN: u32 = 3485;
pub const IDS_SETTINGS_SITE_SETTINGS_RESET_BUTTON: u32 = 3486;
pub const IDS_SETTINGS_SITE_SETTINGS_DELETE: u32 = 3487;
pub const IDS_SETTINGS_SITE_SETTINGS_GROUP_RESET: u32 = 3488;
pub const IDS_SETTINGS_SITE_SETTINGS_GROUP_DELETE: u32 = 3489;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_HEADER: u32 = 3490;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_LINK: u32 = 3491;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE: u32 = 3492;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_ALL: u32 = 3493;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_ALL_SHOWN: u32 = 3494;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_DIALOG_TITLE: u32 = 3495;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_SUBPAGE: u32 = 3496;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_RESET_CONFIRMATION: u32 = 3497;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_CLEAR_STORAGE_DIALOG_TITLE: u32 = 3498;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_CLEAR_STORAGE_CONFIRMATION: u32 = 3499;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_GROUP_RESET_DIALOG_TITLE: u32 = 3500;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_GROUP_RESET_CONFIRMATION: u32 = 3501;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_GROUP_DELETE_DIALOG_TITLE: u32 = 3502;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_GROUP_DELETE_CONFIRMATION: u32 = 3503;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_MULTIPLE: u32 = 3504;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_REMOVE_SITE: u32 = 3505;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIES_CLEAR_ALL: u32 = 3506;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_RESET_ALL: u32 = 3507;
pub const IDS_SETTINGS_SITE_SETTINGS_SITE_CLEAR_STORAGE: u32 = 3508;
pub const IDS_SETTINGS_SITE_SETTINGS_COOKIE_SEARCH: u32 = 3509;
pub const IDS_SETTINGS_SITE_SETTINGS_THIRD_PARTY_COOKIE: u32 = 3510;
pub const IDS_SETTINGS_SITE_SETTINGS_THIRD_PARTY_COOKIE_SUBLABEL: u32 = 3511;
pub const IDS_SETTINGS_SITE_SETTINGS_DELETE_DATA_POST_SESSION: u32 = 3512;
pub const IDS_SETTINGS_SITE_SETTINGS_ADOBE_FLASH_SETTINGS: u32 = 3513;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLER_IS_DEFAULT: u32 = 3514;
pub const IDS_SETTINGS_SITE_SETTINGS_HANDLER_SET_DEFAULT: u32 = 3515;
pub const IDS_SETTINGS_SITE_SETTINGS_REMOVE: u32 = 3516;
pub const IDS_SETTINGS_SITE_SETTINGS_INCOGNITO_ONLY: u32 = 3517;
pub const IDS_SETTINGS_SITE_SETTINGS_INCOGNITO: u32 = 3518;
pub const IDS_SETTINGS_SITE_SETTINGS_INCOGNITO_EMBEDDED: u32 = 3519;
pub const IDS_SETTINGS_SITE_SETTINGS_NO_ZOOMED_SITES: u32 = 3520;
pub const IDS_SETTINGS_SITE_NO_SITES_ADDED: u32 = 3521;
pub const IDS_SETTINGS_SITE_SETTINGS_BLOCK_AUTOPLAY: u32 = 3522;
pub const IDS_SETTINGS_SITE_SETTINGS_EMPTY_ALL_SITES_PAGE: u32 = 3523;
pub const IDS_SETTINGS_SITE_SETTINGS_NO_SITES_FOUND: u32 = 3524;
pub const IDS_SETTINGS_SITE_SETTINGS_BLUETOOTH_SCANNING: u32 = 3525;
pub const IDS_SETTINGS_SITE_SETTINGS_BLUETOOTH_SCANNING_ASK: u32 = 3526;
pub const IDS_SETTINGS_SITE_SETTINGS_BLUETOOTH_SCANNING_ASK_RECOMMENDED: u32 = 3527;
pub const IDS_SETTINGS_SITE_SETTINGS_BLUETOOTH_SCANNING_BLOCK: u32 = 3528;
pub const IDS_SETTINGS_NO_USB_DEVICES_FOUND: u32 = 3529;
pub const IDS_SETTINGS_NO_SERIAL_PORTS_FOUND: u32 = 3530;
pub const IDS_SETTINGS_ADD_SITE_EXCEPTION_PLACEHOLDER: u32 = 3531;
pub const IDS_SETTINGS_ADD_SITE_TITLE: u32 = 3532;
pub const IDS_SETTINGS_EDIT_SITE_TITLE: u32 = 3533;
pub const IDS_SETTINGS_ADD_SITE: u32 = 3534;
pub const IDS_SETTINGS_COOKIES_COOKIE_NAME_LABEL: u32 = 3536;
pub const IDS_SETTINGS_COOKIES_COOKIE_CONTENT_LABEL: u32 = 3537;
pub const IDS_SETTINGS_COOKIES_COOKIE_DOMAIN_LABEL: u32 = 3538;
pub const IDS_SETTINGS_COOKIES_COOKIE_PATH_LABEL: u32 = 3539;
pub const IDS_SETTINGS_COOKIES_COOKIE_SENDFOR_LABEL: u32 = 3540;
pub const IDS_SETTINGS_COOKIES_COOKIE_ACCESSIBLE_TO_SCRIPT_LABEL: u32 = 3541;
pub const IDS_SETTINGS_COOKIES_COOKIE_CREATED_LABEL: u32 = 3542;
pub const IDS_SETTINGS_COOKIES_COOKIE_EXPIRES_LABEL: u32 = 3543;
pub const IDS_SETTINGS_COOKIES_APPLICATION_CACHE: u32 = 3544;
pub const IDS_SETTINGS_COOKIES_FLASH_LSO: u32 = 3545;
pub const IDS_SETTINGS_COOKIES_APPLICATION_CACHE_MANIFEST_LABEL: u32 = 3546;
pub const IDS_SETTINGS_SITE_SETTINGS_NUM_COOKIES: u32 = 3547;
pub const IDS_SETTINGS_COOKIES_LOCAL_STORAGE_ORIGIN_LABEL: u32 = 3548;
pub const IDS_SETTINGS_COOKIES_LOCAL_STORAGE_SIZE_ON_DISK_LABEL: u32 = 3549;
pub const IDS_SETTINGS_COOKIES_LOCAL_STORAGE_LAST_MODIFIED_LABEL: u32 = 3550;
pub const IDS_SETTINGS_COOKIES_DATABASE_STORAGE: u32 = 3551;
pub const IDS_SETTINGS_COOKIES_LOCAL_STORAGE: u32 = 3552;
pub const IDS_SETTINGS_COOKIES_MEDIA_LICENSE: u32 = 3553;
pub const IDS_SETTINGS_COOKIES_FILE_SYSTEM: u32 = 3554;
pub const IDS_SETTINGS_COOKIES_FILE_SYSTEM_TEMPORARY_USAGE_LABEL: u32 = 3555;
pub const IDS_SETTINGS_COOKIES_FILE_SYSTEM_PERSISTENT_USAGE_LABEL: u32 = 3556;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID: u32 = 3557;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID_ORIGIN_LABEL: u32 = 3558;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID_TYPE_LABEL: u32 = 3559;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID_CREATED_LABEL: u32 = 3560;
pub const IDS_SETTINGS_COOKIES_CHANNEL_ID_EXPIRES_LABEL: u32 = 3561;
pub const IDS_SETTINGS_COOKIES_SERVICE_WORKER: u32 = 3562;
pub const IDS_SETTINGS_COOKIES_SHARED_WORKER: u32 = 3563;
pub const IDS_SETTINGS_COOKIES_SHARED_WORKER_WORKER_LABEL: u32 = 3564;
pub const IDS_SETTINGS_COOKIES_CACHE_STORAGE: u32 = 3565;
pub const IDS_SETTINGS_PEOPLE: u32 = 3566;
pub const IDS_SETTINGS_PEOPLE_MANAGE_OTHER_PEOPLE: u32 = 3567;
pub const IDS_SETTINGS_CHANGE_PICTURE_PROFILE_PHOTO: u32 = 3568;
pub const IDS_SETTINGS_PEOPLE_SIGN_OUT: u32 = 3569;
pub const IDS_SETTINGS_PEOPLE_DOMAIN_MANAGED_PROFILE: u32 = 3637;
pub const IDS_SETTINGS_PEOPLE_SIGN_IN: u32 = 3638;
pub const IDS_SETTINGS_PEOPLE_SIGN_IN_PROMPT: u32 = 3639;
pub const IDS_SETTINGS_PEOPLE_SYNC_ANOTHER_ACCOUNT: u32 = 3640;
pub const IDS_SETTINGS_PEOPLE_SYNCING_TO_ACCOUNT: u32 = 3641;
pub const IDS_SETTINGS_PEOPLE_SYNC_TURN_OFF: u32 = 3642;
pub const IDS_SETTINGS_PEOPLE_SYNC_NOT_WORKING: u32 = 3643;
pub const IDS_SETTINGS_PEOPLE_SYNC_PAUSED: u32 = 3644;
pub const IDS_SETTINGS_SYNC_DISCONNECT_MANAGED_PROFILE_EXPLANATION: u32 = 3645;
pub const IDS_SETTINGS_EDIT_PERSON: u32 = 3646;
pub const IDS_SETTINGS_PROFILE_SHORTCUT_TOGGLE_LABEL: u32 = 3647;
pub const IDS_SETTINGS_TURN_OFF_SYNC_AND_SIGN_OUT_DIALOG_TITLE: u32 = 3648;
pub const IDS_SETTINGS_TURN_OFF_SYNC_AND_SIGN_OUT_DIALOG_TITLE_UNIFIED_CONSENT: u32 = 3649;
pub const IDS_SETTINGS_TURN_OFF_SYNC_DIALOG_MANAGED_CONFIRM: u32 = 3650;
pub const IDS_SETTINGS_TURN_OFF_SYNC_DIALOG_CHECKBOX: u32 = 3651;
pub const IDS_SETTINGS_SYNC_SETTINGS_SAVED_TOAST_LABEL: u32 = 3652;
pub const IDS_SETTINGS_SYNC_OVERVIEW: u32 = 3653;
pub const IDS_SETTINGS_SYNC_DISCONNECT_EXPLANATION: u32 = 3654;
pub const IDS_SETTINGS_SYNC_DISCONNECT_AND_SIGN_OUT_EXPLANATION: u32 = 3655;
pub const IDS_SETTINGS_SYNC_DISCONNECT_AND_SIGN_OUT_EXPLANATION_UNIFIED_CONSENT: u32 = 3656;
pub const IDS_SETTINGS_SYNC_DISCONNECT_EXPAND_ACCESSIBILITY_LABEL: u32 = 3657;
pub const IDS_SETTINGS_SYNC_DISCONNECT_DELETE_PROFILE: u32 = 3658;
pub const IDS_SETTINGS_SYNC_DISCONNECT_CONFIRM: u32 = 3659;
pub const IDS_SETTINGS_SYNC: u32 = 3660;
pub const IDS_SETTINGS_NON_PERSONALIZED_SERVICES_SECTION_LABEL: u32 = 3661;
pub const IDS_SETTINGS_SYNC_SYNC_AND_NON_PERSONALIZED_SERVICES: u32 = 3662;
pub const IDS_SETTINGS_SYNC_PAGE_TITLE: u32 = 3663;
pub const IDS_SETTINGS_SYNC_ADVANCED_PAGE_TITLE: u32 = 3664;
pub const IDS_SETTINGS_SYNC_LOADING: u32 = 3665;
pub const IDS_SETTINGS_SYNC_WILL_START: u32 = 3666;
pub const IDS_SETTINGS_SYNC_WILL_START_UNITY: u32 = 3667;
pub const IDS_SETTINGS_SYNC_SETTINGS_CANCEL_SYNC: u32 = 3668;
pub const IDS_SETTINGS_SYNC_SETUP_CANCEL_DIALOG_TITLE: u32 = 3669;
pub const IDS_SETTINGS_SYNC_SETUP_CANCEL_DIALOG_BODY: u32 = 3670;
pub const IDS_SETTINGS_SYNC_TIMEOUT: u32 = 3671;
pub const IDS_SETTINGS_SYNC_EVERYTHING_CHECKBOX_LABEL: u32 = 3672;
pub const IDS_SETTINGS_MANAGE_GOOGLE_ACCOUNT: u32 = 3673;
pub const IDS_SETTINGS_APPS_CHECKBOX_LABEL: u32 = 3674;
pub const IDS_SETTINGS_EXTENSIONS_CHECKBOX_LABEL: u32 = 3675;
pub const IDS_SETTINGS_SETTINGS_CHECKBOX_LABEL: u32 = 3676;
pub const IDS_SETTINGS_AUTOFILL_CHECKBOX_LABEL: u32 = 3677;
pub const IDS_SETTINGS_HISTORY_CHECKBOX_LABEL: u32 = 3678;
pub const IDS_SETTINGS_THEMES_AND_WALLPAPERS_CHECKBOX_LABEL: u32 = 3679;
pub const IDS_SETTINGS_BOOKMARKS_CHECKBOX_LABEL: u32 = 3680;
pub const IDS_SETTINGS_PASSWORDS_CHECKBOX_LABEL: u32 = 3681;
pub const IDS_SETTINGS_OPEN_TABS_CHECKBOX_LABEL: u32 = 3682;
pub const IDS_DRIVE_SUGGEST_PREF: u32 = 3683;
pub const IDS_SETTINGS_USER_EVENTS_CHECKBOX_LABEL: u32 = 3684;
pub const IDS_SETTINGS_USER_EVENTS_CHECKBOX_TEXT: u32 = 3685;
pub const IDS_SETTINGS_MANAGE_SYNCED_DATA_TITLE: u32 = 3686;
pub const IDS_SETTINGS_MANAGE_SYNCED_DATA_TITLE_UNIFIED_CONSENT: u32 = 3687;
pub const IDS_SETTINGS_EXISTING_PASSPHRASE_TITLE: u32 = 3688;
pub const IDS_SETTINGS_ENCRYPTION_OPTIONS: u32 = 3689;
pub const IDS_SETTINGS_ENCRYPT_WITH_GOOGLE_CREDENTIALS_LABEL: u32 = 3690;
pub const IDS_SETTINGS_ENCRYPT_WITH_SYNC_PASSPHRASE_LABEL: u32 = 3691;
pub const IDS_SETTINGS_PASSPHRASE_EXPLANATION_TEXT: u32 = 3692;
pub const IDS_SETTINGS_PASSPHRASE_RESET_HINT_ENCRYPTION: u32 = 3693;
pub const IDS_SETTINGS_PASSPHRASE_RESET_HINT_TOGGLE: u32 = 3694;
pub const IDS_SETTINGS_EMPTY_PASSPHRASE_ERROR: u32 = 3695;
pub const IDS_SETTINGS_MISMATCHED_PASSPHRASE_ERROR: u32 = 3696;
pub const IDS_SETTINGS_INCORRECT_PASSPHRASE_ERROR: u32 = 3697;
pub const IDS_SETTINGS_PASSPHRASE_RECOVER: u32 = 3698;
pub const IDS_SETTINGS_PASSPHRASE_PLACEHOLDER: u32 = 3699;
pub const IDS_SETTINGS_PASSPHRASE_CONFIRMATION_PLACEHOLDER: u32 = 3700;
pub const IDS_SETTINGS_SUBMIT_PASSPHRASE: u32 = 3701;
pub const IDS_SETTINGS_USE_DEFAULT_SETTINGS: u32 = 3702;
pub const IDS_SETTINGS_PERSONALIZE_GOOGLE_SERVICES_TITLE: u32 = 3703;
pub const IDS_SETTINGS_IMPORT_SETTINGS_TITLE: u32 = 3704;
pub const IDS_SETTINGS_IMPORT_FROM_LABEL: u32 = 3705;
pub const IDS_SETTINGS_IMPORT_ITEMS_LABEL: u32 = 3706;
pub const IDS_SETTINGS_IMPORT_LOADING_PROFILES: u32 = 3707;
pub const IDS_SETTINGS_IMPORT_HISTORY_CHECKBOX: u32 = 3708;
pub const IDS_SETTINGS_IMPORT_FAVORITES_CHECKBOX: u32 = 3709;
pub const IDS_SETTINGS_IMPORT_PASSWORDS_CHECKBOX: u32 = 3710;
pub const IDS_SETTINGS_IMPORT_SEARCH_ENGINES_CHECKBOX: u32 = 3711;
pub const IDS_SETTINGS_IMPORT_AUTOFILL_FORM_DATA_CHECKBOX: u32 = 3712;
pub const IDS_SETTINGS_IMPORT_CHOOSE_FILE: u32 = 3713;
pub const IDS_SETTINGS_IMPORT_COMMIT: u32 = 3714;
pub const IDS_SETTINGS_IMPORT_SUCCESS: u32 = 3715;
pub const IDS_SETTINGS_IMPORT_NO_PROFILE_FOUND: u32 = 3716;
pub const IDS_SETTINGS_WEB_CONTENT: u32 = 3735;
pub const IDS_SETTINGS_PAGE_ZOOM_LABEL: u32 = 3736;
pub const IDS_SETTINGS_FONT_SIZE_LABEL: u32 = 3737;
pub const IDS_SETTINGS_VERY_SMALL_FONT: u32 = 3738;
pub const IDS_SETTINGS_SMALL_FONT: u32 = 3739;
pub const IDS_SETTINGS_MEDIUM_FONT: u32 = 3740;
pub const IDS_SETTINGS_LARGE_FONT: u32 = 3741;
pub const IDS_SETTINGS_VERY_LARGE_FONT: u32 = 3742;
pub const IDS_SETTINGS_CUSTOM: u32 = 3743;
pub const IDS_SETTINGS_CUSTOMIZE_FONTS: u32 = 3744;
pub const IDS_SETTINGS_FONTS: u32 = 3745;
pub const IDS_SETTINGS_STANDARD_FONT_LABEL: u32 = 3746;
pub const IDS_SETTINGS_SERIF_FONT_LABEL: u32 = 3747;
pub const IDS_SETTINGS_SANS_SERIF_FONT_LABEL: u32 = 3748;
pub const IDS_SETTINGS_FIXED_WIDTH_FONT_LABEL: u32 = 3749;
pub const IDS_SETTINGS_MINIMUM_FONT_SIZE_LABEL: u32 = 3750;
pub const IDS_SETTINGS_TINY_FONT_SIZE: u32 = 3751;
pub const IDS_SETTINGS_HUGE_FONT_SIZE: u32 = 3752;
pub const IDS_SETTINGS_LOREM_IPSUM: u32 = 3753;
pub const IDS_SETTINGS_LOADING: u32 = 3754;
pub const IDS_SETTINGS_ADVANCED_FONT_SETTINGS: u32 = 3755;
pub const IDS_SETTINGS_OPEN_ADVANCED_FONT_SETTINGS: u32 = 3756;
pub const IDS_SETTINGS_QUICK_BROWN_FOX: u32 = 3757;
pub const IDS_SETTINGS_REQUIRES_WEB_STORE_EXTENSION: u32 = 3758;
pub const IDS_SETTINGS_SYSTEM: u32 = 3899;
pub const IDS_SETTINGS_SYSTEM_HARDWARE_ACCELERATION_LABEL: u32 = 3900;
pub const IDS_SETTINGS_SYSTEM_PROXY_SETTINGS_LABEL: u32 = 3901;
pub const IDS_SETTINGS_CHANGE_PASSWORD_TITLE: u32 = 3919;
pub const IDS_SETTINGS_CHANGE_PASSWORD_BUTTON: u32 = 3920;
pub const IDS_PAGE_NOT_AVAILABLE_FOR_GUEST_HEADING: u32 = 3964;
pub const IDS_SETTINGS_SECURITY_KEYS_TITLE: u32 = 3969;
pub const IDS_SETTINGS_SECURITY_KEYS_DESC: u32 = 3970;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN: u32 = 3971;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_DESC: u32 = 3972;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_INITIAL_TITLE: u32 = 3973;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_CREATE_TITLE: u32 = 3974;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_CHANGE_TITLE: u32 = 3975;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET: u32 = 3976;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_DESC: u32 = 3977;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_TITLE: u32 = 3978;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_CONFIRM_TITLE: u32 = 3979;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_STEP1: u32 = 3980;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_STEP2: u32 = 3981;
pub const IDS_SETTINGS_SECURITY_KEYS_NO_RESET: u32 = 3982;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_ERROR: u32 = 3983;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_SUCCESS: u32 = 3984;
pub const IDS_SETTINGS_SECURITY_KEYS_RESET_NOTALLOWED: u32 = 3985;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_TOUCH: u32 = 3986;
pub const IDS_SETTINGS_SECURITY_KEYS_NO_PIN: u32 = 3987;
pub const IDS_SETTINGS_SECURITY_KEYS_CURRENT_PIN_INTRO: u32 = 3988;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_INCORRECT: u32 = 3989;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_INCORRECT_RETRIES_SIN: u32 = 3990;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_INCORRECT_RETRIES_PL: u32 = 3991;
pub const IDS_SETTINGS_SECURITY_KEYS_NEW_PIN: u32 = 3992;
pub const IDS_SETTINGS_SECURITY_KEYS_SET_PIN_CONFIRM: u32 = 3993;
pub const IDS_SETTINGS_SECURITY_KEYS_CURRENT_PIN: u32 = 3994;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN: u32 = 3995;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_TOO_SHORT: u32 = 3996;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_TOO_LONG: u32 = 3997;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_INVALID: u32 = 3998;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR_MISMATCH: u32 = 3999;
pub const IDS_SETTINGS_SECURITY_KEYS_CONFIRM_PIN: u32 = 4000;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_SUCCESS: u32 = 4001;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_ERROR: u32 = 4002;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_HARD_LOCK: u32 = 4003;
pub const IDS_SETTINGS_SECURITY_KEYS_PIN_SOFT_LOCK: u32 = 4004;
pub const IDS_EXTENSIONS_ALLOW_FILE_ACCESS: u32 = 4005;
pub const IDS_EXTENSIONS_ALLOW_ON_ALL_URLS: u32 = 4006;
pub const IDS_EXTENSIONS_ALLOW_ON_FOLLOWING_SITES: u32 = 4007;
pub const IDS_EXTENSIONS_VIEW_ACTIVITY_LOG: u32 = 4008;
pub const IDS_EXTENSIONS_BACKGROUND_PAGE: u32 = 4009;
pub const IDS_EXTENSIONS_CORRUPTED_EXTENSION: u32 = 4010;
pub const IDS_EXTENSIONS_ENABLE_ERROR_COLLECTION: u32 = 4011;
pub const IDS_EXTENSIONS_ERROR_NO_ERRORS_CODE_MESSAGE: u32 = 4012;
pub const IDS_EXTENSIONS_INSTALL_DROP_TARGET: u32 = 4013;
pub const IDS_EXTENSIONS_INSTALL_WARNINGS: u32 = 4014;
pub const IDS_EXTENSIONS_LOG_LEVEL_ERROR: u32 = 4015;
pub const IDS_EXTENSIONS_LOG_LEVEL_INFO: u32 = 4016;
pub const IDS_EXTENSIONS_LOG_LEVEL_WARN: u32 = 4017;
pub const IDS_EXTENSIONS_PATH: u32 = 4018;
pub const IDS_EXTENSIONS_RELOAD_TERMINATED: u32 = 4019;
pub const IDS_EXTENSIONS_REPAIR_CORRUPTED: u32 = 4020;
pub const IDS_EXTENSIONS_VIEW_IFRAME: u32 = 4021;
pub const IDS_EXTENSIONS_VIEW_INACTIVE: u32 = 4022;
pub const IDS_EXTENSIONS_VIEW_INCOGNITO: u32 = 4023;
pub const IDS_EXTENSIONS_DEVELOPER_MODE: u32 = 4024;
pub const IDS_EXTENSIONS_DISABLED_UPDATE_REQUIRED_BY_POLICY: u32 = 4025;
pub const IDS_EXTENSIONS_MENU_BUTTON_LABEL: u32 = 4026;
pub const IDS_EXTENSIONS_ERROR_PAGE_HEADING: u32 = 4027;
pub const IDS_EXTENSIONS_ERROR_ANONYMOUS_FUNCTION: u32 = 4028;
pub const IDS_EXTENSIONS_ERROR_CONTEXT: u32 = 4029;
pub const IDS_EXTENSIONS_ERROR_CONTEXT_UNKNOWN: u32 = 4030;
pub const IDS_EXTENSIONS_CLEAR_ACTIVITIES: u32 = 4031;
pub const IDS_EXTENSIONS_ERROR_CLEAR_ALL: u32 = 4032;
pub const IDS_EXTENSIONS_A11Y_CLEAR_ENTRY: u32 = 4033;
pub const IDS_EXTENSIONS_ERROR_STACK_TRACE: u32 = 4034;
pub const IDS_EXTENSIONS_ERROR_LINES_NOT_SHOWN: u32 = 4035;
pub const IDS_EXTENSIONS_HOST_PERMISSIONS_DESCRIPTION: u32 = 4036;
pub const IDS_EXTENSIONS_HOST_PERMISSIONS_EDIT: u32 = 4037;
pub const IDS_EXTENSIONS_ITEM_ERRORS: u32 = 4038;
pub const IDS_EXTENSIONS_ITEM_HOST_PERMISSIONS_HEADING: u32 = 4039;
pub const IDS_EXTENSIONS_HOST_ACCESS_ON_CLICK: u32 = 4040;
pub const IDS_EXTENSIONS_HOST_ACCESS_ON_SPECIFIC_SITES: u32 = 4041;
pub const IDS_EXTENSIONS_HOST_ACCESS_ON_ALL_SITES: u32 = 4042;
pub const IDS_EXTENSIONS_ITEM_ALLOWED_HOSTS: u32 = 4043;
pub const IDS_EXTENSIONS_ACCESSIBILITY_ERROR_LINE: u32 = 4044;
pub const IDS_EXTENSIONS_ACCESSIBILITY_ERROR_MULTI_LINE: u32 = 4045;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_PAGE_HEADING: u32 = 4046;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_SEARCH_LABEL: u32 = 4047;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_TYPE_COLUMN: u32 = 4048;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_NAME_COLUMN: u32 = 4049;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_COUNT_COLUMN: u32 = 4050;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_TIME_COLUMN: u32 = 4051;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_HISTORY_TAB_HEADING: u32 = 4052;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_STREAM_TAB_HEADING: u32 = 4053;
pub const IDS_EXTENSIONS_START_ACTIVITY_STREAM: u32 = 4054;
pub const IDS_EXTENSIONS_STOP_ACTIVITY_STREAM: u32 = 4055;
pub const IDS_EXTENSIONS_EMPTY_STREAM_STARTED: u32 = 4056;
pub const IDS_EXTENSIONS_EMPTY_STREAM_STOPPED: u32 = 4057;
pub const IDS_EXTENSIONS_ACTIVITY_ARGUMENTS_HEADING: u32 = 4058;
pub const IDS_EXTENSIONS_WEB_REQUEST_INFO_HEADING: u32 = 4059;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_MORE_ACTIONS_LABEL: u32 = 4060;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_EXPAND_ALL: u32 = 4061;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_COLLAPSE_ALL: u32 = 4062;
pub const IDS_EXTENSIONS_ACTIVITY_LOG_EXPORT_HISTORY: u32 = 4063;
pub const IDS_EXTENSIONS_ITEM_ID: u32 = 4064;
pub const IDS_EXTENSIONS_ITEM_INSPECT_VIEWS: u32 = 4065;
pub const IDS_EXTENSIONS_ITEM_INSPECT_VIEWS_EXTRA: u32 = 4066;
pub const IDS_EXTENSIONS_ITEM_NO_ACTIVE_VIEWS: u32 = 4067;
pub const IDS_EXTENSIONS_ITEM_ALLOW_INCOGNITO: u32 = 4068;
pub const IDS_EXTENSIONS_ITEM_DEPENDENCIES: u32 = 4069;
pub const IDS_EXTENSIONS_DEPENDENT_ENTRY: u32 = 4070;
pub const IDS_EXTENSIONS_ITEM_DESCRIPTION: u32 = 4071;
pub const IDS_EXTENSIONS_ITEM_DETAILS: u32 = 4072;
pub const IDS_EXTENSIONS_EXTENSION_A11Y_ASSOCIATION: u32 = 4073;
pub const IDS_EXTENSIONS_APP_ICON: u32 = 4074;
pub const IDS_EXTENSIONS_EXTENSION_ICON: u32 = 4075;
pub const IDS_EXTENSIONS_ITEM_ID_HEADING: u32 = 4076;
pub const IDS_EXTENSIONS_EXTENSION_ENABLED: u32 = 4077;
pub const IDS_EXTENSIONS_APP_ENABLED: u32 = 4078;
pub const IDS_EXTENSIONS_ITEM_OFF: u32 = 4079;
pub const IDS_EXTENSIONS_ITEM_ON: u32 = 4080;
pub const IDS_EXTENSIONS_ITEM_EXTENSION_WEBSITE: u32 = 4081;
pub const IDS_EXTENSIONS_ITEM_CHROME_WEB_STORE: u32 = 4082;
pub const IDS_EXTENSIONS_ITEM_OPTIONS: u32 = 4083;
pub const IDS_EXTENSIONS_ITEM_PERMISSIONS: u32 = 4084;
pub const IDS_EXTENSIONS_ITEM_PERMISSIONS_EMPTY: u32 = 4085;
pub const IDS_EXTENSIONS_ITEM_REMOVE_EXTENSION: u32 = 4086;
pub const IDS_EXTENSIONS_ITEM_SITE_ACCESS: u32 = 4087;
pub const IDS_EXTENSIONS_ITEM_SITE_ACCESS_ADD_HOST: u32 = 4088;
pub const IDS_EXTENSIONS_ITEM_SITE_ACCESS_EMPTY: u32 = 4089;
pub const IDS_EXTENSIONS_ITEM_SOURCE: u32 = 4090;
pub const IDS_EXTENSIONS_ITEM_SOURCE_POLICY: u32 = 4091;
pub const IDS_EXTENSIONS_ITEM_SOURCE_SIDELOADED: u32 = 4092;
pub const IDS_EXTENSIONS_ITEM_SOURCE_UNPACKED: u32 = 4093;
pub const IDS_EXTENSIONS_ITEM_SOURCE_WEBSTORE: u32 = 4094;
pub const IDS_EXTENSIONS_ITEM_VERSION: u32 = 4095;
pub const IDS_EXTENSIONS_LOAD_ERROR_HEADING: u32 = 4096;
pub const IDS_EXTENSIONS_LOAD_ERROR_ERROR_LABEL: u32 = 4097;
pub const IDS_EXTENSIONS_LOAD_ERROR_FILE_LABEL: u32 = 4098;
pub const IDS_EXTENSIONS_LOAD_ERROR_COULD_NOT_LOAD_MANIFEST: u32 = 4099;
pub const IDS_EXTENSIONS_LOAD_ERROR_RETRY: u32 = 4100;
pub const IDS_EXTENSIONS_LOADING_ACTIVITIES: u32 = 4101;
pub const IDS_MISSING_OR_UNINSTALLED_EXTENSION: u32 = 4102;
pub const IDS_EXTENSIONS_NO_ACTIVITIES: u32 = 4103;
pub const IDS_EXTENSIONS_NO_INSTALLED_ITEMS: u32 = 4104;
pub const IDS_EXTENSIONS_NO_DESCRIPTION: u32 = 4105;
pub const IDS_EXTENSIONS_PACK_DIALOG_TITLE: u32 = 4106;
pub const IDS_EXTENSIONS_PACK_DIALOG_WARNING_TITLE: u32 = 4107;
pub const IDS_EXTENSIONS_PACK_DIALOG_ERROR_TITLE: u32 = 4108;
pub const IDS_EXTENSIONS_PACK_DIALOG_PROCEED_ANYWAY: u32 = 4109;
pub const IDS_EXTENSIONS_PACK_DIALOG_BROWSE_BUTTON: u32 = 4110;
pub const IDS_EXTENSIONS_PACK_DIALOG_EXTENSION_ROOT_LABEL: u32 = 4111;
pub const IDS_EXTENSIONS_PACK_DIALOG_KEY_FILE_LABEL: u32 = 4112;
pub const IDS_EXTENSIONS_PACK_DIALOG_CONFIRM_BUTTON: u32 = 4113;
pub const IDS_EXTENSIONS_TOOLBAR_TITLE: u32 = 4114;
pub const IDS_EXTENSIONS_SEARCH: u32 = 4115;
pub const IDS_EXTENSIONS_SHORTCUT_NOT_SET: u32 = 4116;
pub const IDS_EXTENSIONS_SHORTCUT_SCOPE_LABEL: u32 = 4117;
pub const IDS_EXTENSIONS_SHORTCUT_SCOPE_GLOBAL: u32 = 4118;
pub const IDS_EXTENSIONS_APPS_TITLE: u32 = 4119;
pub const IDS_EXTENSIONS_REMOVE: u32 = 4120;
pub const IDS_EXTENSIONS_RUNTIME_HOSTS_DIALOG_TITLE: u32 = 4121;
pub const IDS_EXTENSIONS_RUNTIME_HOSTS_DIALOG_INPUT_ERROR: u32 = 4122;
pub const IDS_EXTENSIONS_RUNTIME_HOSTS_DIALOG_INPUT_LABEL: u32 = 4123;
pub const IDS_EXTENSIONS_SIDEBAR_EXTENSIONS: u32 = 4124;
pub const IDS_EXTENSIONS_SIDEBAR_OPEN_CHROME_WEB_STORE: u32 = 4125;
pub const IDS_EXTENSIONS_SIDEBAR_KEYBOARD_SHORTCUTS: u32 = 4126;
pub const IDS_EXTENSIONS_TOOLBAR_LOAD_UNPACKED: u32 = 4127;
pub const IDS_EXTENSIONS_TOOLBAR_PACK: u32 = 4128;
pub const IDS_EXTENSIONS_TOOLBAR_UPDATE_NOW: u32 = 4129;
pub const IDS_EXTENSIONS_TOOLBAR_UPDATE_NOW_TOOLTIP: u32 = 4130;
pub const IDS_EXTENSIONS_TOOLBAR_UPDATE_DONE: u32 = 4131;
pub const IDS_EXTENSIONS_TOOLBAR_UPDATING_TOAST: u32 = 4132;
pub const IDS_EXTENSIONS_TYPE_A_SHORTCUT: u32 = 4133;
pub const IDS_EXTENSIONS_INCLUDE_START_MODIFIER: u32 = 4134;
pub const IDS_EXTENSIONS_TOO_MANY_MODIFIERS: u32 = 4135;
pub const IDS_EXTENSIONS_NEED_CHARACTER: u32 = 4136;
pub const IDS_ONBOARDING_WELCOME_GET_STARTED: u32 = 4147;
pub const IDS_ONBOARDING_WELCOME_NEXT: u32 = 4148;
pub const IDS_ONBOARDING_WELCOME_SKIP: u32 = 4149;
pub const IDS_ONBOARDING_WELCOME_BOOKMARK_ADDED: u32 = 4150;
pub const IDS_ONBOARDING_WELCOME_BOOKMARKS_ADDED: u32 = 4151;
pub const IDS_ONBOARDING_WELCOME_BOOKMARK_REMOVED: u32 = 4152;
pub const IDS_ONBOARDING_WELCOME_BOOKMARKS_REMOVED: u32 = 4153;
pub const IDS_ONBOARDING_DEFAULT_BROWSER_CHANGED: u32 = 4154;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_DESCRIPTION: u32 = 4155;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_GMAIL: u32 = 4157;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_MAPS: u32 = 4158;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_NEWS: u32 = 4159;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_TRANSLATE: u32 = 4160;
pub const IDS_ONBOARDING_WELCOME_NUX_GOOGLE_APPS_YOUTUBE: u32 = 4161;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_DESCRIPTION: u32 = 4162;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_DEFAULT_TITLE: u32 = 4163;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_ART_TITLE: u32 = 4164;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_LANDSCAPE_TITLE: u32 = 4165;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_CITYSCAPE_TITLE: u32 = 4166;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_EARTH_TITLE: u32 = 4167;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_GEOMETRIC_SHAPES_TITLE: u32 = 4168;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_PHOTO_BY_LABEL: u32 = 4169;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_PREVIEW_UPDATED: u32 = 4170;
pub const IDS_ONBOARDING_WELCOME_NTP_BACKGROUND_RESET: u32 = 4171;
pub const IDS_ONBOARDING_WELCOME_NUX_SET_AS_DEFAULT_HEADER: u32 = 4172;
pub const IDS_ONBOARDING_WELCOME_NUX_SET_AS_DEFAULT_SUB_HEADER: u32 = 4173;
pub const IDS_ONBOARDING_WELCOME_NUX_SET_AS_DEFAULT_SKIP: u32 = 4174;
pub const IDS_ONBOARDING_WELCOME_NUX_SET_AS_DEFAULT_SET_AS_DEFAULT: u32 = 4175;
pub const IDS_ONBOARDING_WELCOME_LANDING_TITLE: u32 = 4176;
pub const IDS_ONBOARDING_WELCOME_LANDING_DESCRIPTION: u32 = 4177;
pub const IDS_ONBOARDING_WELCOME_LANDING_NEW_USER: u32 = 4178;
pub const IDS_ONBOARDING_WELCOME_LANDING_EXISTING_USER: u32 = 4179;
pub const IDS_ONBOARDING_WELCOME_SIGNIN_VIEW_HEADER: u32 = 4180;
pub const IDS_ONBOARDING_WELCOME_SIGNIN_VIEW_SUB_HEADER: u32 = 4181;
pub const IDS_ONBOARDING_WELCOME_SIGNIN_VIEW_SIGNIN: u32 = 4182;
pub const IDS_UTILITY_PROCESS_PRINTING_SERVICE_NAME: u32 = 4183;
pub const IDS_PRINT_INVALID_PRINTER_SETTINGS: u32 = 4184;
pub const IDS_DEFAULT_PRINT_DOCUMENT_TITLE: u32 = 4290;
pub const IDS_PRINT_SPOOL_FAILED_TITLE_TEXT: u32 = 4291;
pub const IDS_PRINT_SPOOL_FAILED_ERROR_TEXT: u32 = 4292;
pub const IDS_CLOUD_PRINT_REGISTER_PRINTER_FAILED: u32 = 4293;
pub const IDS_CLOUD_PRINT_ZOMBIE_PRINTER: u32 = 4294;
pub const IDS_CLOUD_PRINT_ENUM_FAILED: u32 = 4295;
pub const IDS_SERVICE_CRASH_RECOVERY_CONTENT: u32 = 4296;
pub const IDS_PRESS_APP_TO_EXIT: u32 = 4297;
pub const IDS_ISOLATED_XR_PROCESS_NAME: u32 = 4298;
pub const IDS_VR_SHELL_SITE_IS_TRACKING_LOCATION: u32 = 4299;
pub const IDS_VR_SHELL_SITE_IS_USING_MICROPHONE: u32 = 4300;
pub const IDS_VR_SHELL_SITE_IS_USING_CAMERA: u32 = 4301;
pub const IDS_VR_SHELL_SITE_IS_SHARING_SCREEN: u32 = 4302;
pub const IDS_VR_SHELL_BG_IS_USING_MICROPHONE: u32 = 4303;
pub const IDS_VR_SHELL_BG_IS_USING_CAMERA: u32 = 4304;
pub const IDS_VR_SHELL_BG_IS_SHARING_SCREEN: u32 = 4305;
pub const IDS_VR_SHELL_SITE_CAN_TRACK_LOCATION: u32 = 4306;
pub const IDS_VR_SHELL_SITE_CAN_USE_MICROPHONE: u32 = 4307;
pub const IDS_VR_SHELL_SITE_CAN_USE_CAMERA: u32 = 4308;
pub const IDS_VR_SHELL_SITE_CAN_SHARE_SCREEN: u32 = 4309;
pub const IDS_VR_SHELL_SITE_IS_USING_BLUETOOTH: u32 = 4310;
pub const IDS_VR_SHELL_SITE_CAN_USE_BLUETOOTH: u32 = 4312;
pub const IDS_DESKTOP_PROMPT_DOFF_HEADSET: u32 = 4313;
pub const IDS_VR_DESKTOP_GENERIC_PERMISSION_PROMPT: u32 = 4314;
pub const IDS_VR_SHELL_SITE_IS_USING_USB: u32 = 4315;
pub const IDS_VR_SHELL_SITE_IS_USING_MIDI: u32 = 4316;
pub const IDS_VR_SHELL_SITE_CAN_USE_MIDI: u32 = 4317;
pub const IDS_VR_UPDATE_KEYBOARD_PROMPT: u32 = 4318;
pub const IDS_VR_SHELL_EXIT_PROMPT_DESCRIPTION: u32 = 4319;
pub const IDS_VR_SHELL_EXIT_PROMPT_DESCRIPTION_SITE_INFO: u32 = 4320;
pub const IDS_VR_SHELL_AUDIO_PERMISSION_PROMPT_DESCRIPTION: u32 = 4321;
pub const IDS_VR_SHELL_AUDIO_PERMISSION_PROMPT_ABORT_BUTTON: u32 = 4322;
pub const IDS_VR_SHELL_AUDIO_PERMISSION_PROMPT_CONTINUE_BUTTON: u32 = 4323;
pub const IDS_VR_SHELL_EXIT_PROMPT_EXIT_VR_BUTTON: u32 = 4324;
pub const IDS_VR_BROWSER_UNSUPPORTED_PAGE: u32 = 4325;
pub const IDS_VR_WEB_VR_TIMEOUT_MESSAGE: u32 = 4326;
pub const IDS_VR_WEB_VR_EXIT_BUTTON_LABEL: u32 = 4327;
pub const IDS_VR_NO_SPEECH_RECOGNITION_RESULT: u32 = 4328;
pub const IDS_VR_BUTTON_TRACKPAD: u32 = 4329;
pub const IDS_VR_BUTTON_EXIT: u32 = 4330;
pub const IDS_VR_BUTTON_BACK: u32 = 4331;
pub const IDS_VR_BUTTON_TRACKPAD_REPOSITION: u32 = 4332;
pub const IDS_VR_BUTTON_APP_REPOSITION: u32 = 4333;
pub const IDS_VR_MENU_NEW_INCOGNITO_TAB: u32 = 4334;
pub const IDS_VR_MENU_NEW_PRIVATE_TAB: u32 = 4335;
pub const IDS_VR_MENU_PREFERENCES: u32 = 4336;
pub const IDS_VR_MENU_CLOSE_INCOGNITO_TABS: u32 = 4337;
pub const IDS_VR_MENU_CLOSE_PRIVATE_TABS: u32 = 4338;
pub const IDS_VR_TABS_BUTTON_REGULAR: u32 = 4339;
pub const IDS_VR_TABS_BUTTON_INCOGNITO: u32 = 4340;
pub const IDS_XR_CONSENT_DIALOG_TITLE: u32 = 4341;
pub const IDS_XR_CONSENT_DIALOG_DESCRIPTION: u32 = 4342;
pub const IDS_XR_CONSENT_DIALOG_BUTTON_DENY_VR: u32 = 4343;
pub const IDS_XR_CONSENT_DIALOG_BUTTON_ALLOW_AND_ENTER_VR: u32 = 4344;
pub const IDS_BACKGROUND_APP_INSTALLED_BALLOON_TITLE: u32 = 4345;
pub const IDS_BACKGROUND_APP_INSTALLED_BALLOON_BODY: u32 = 4346;
pub const IDS_BACKGROUND_CRASHED_APP_BALLOON_MESSAGE: u32 = 4347;
pub const IDS_BACKGROUND_CRASHED_EXTENSION_BALLOON_MESSAGE: u32 = 4348;
pub const IDS_BACKGROUND_APP_NOT_INSTALLED: u32 = 4349;
pub const IDS_PERMISSIONS_BUBBLE_PROMPT: u32 = 4350;
pub const IDS_PERMISSION_ALLOW: u32 = 4351;
pub const IDS_PERMISSION_DENY: u32 = 4352;
pub const IDS_PERMISSION_CUSTOMIZE: u32 = 4353;
pub const IDS_ALTERNATE_NAV_URL_VIEW_LABEL: u32 = 4355;
pub const IDS_DOWNLOAD_TITLE: u32 = 4356;
pub const IDS_TAB_LOADING_TITLE: u32 = 4357;
pub const IDS_HISTORY_SEARCH_PROMPT: u32 = 4358;
pub const IDS_HISTORY_CLEAR_SEARCH: u32 = 4359;
pub const IDS_HISTORY_DELETE: u32 = 4360;
pub const IDS_HISTORY_ITEMS_SELECTED: u32 = 4361;
pub const IDS_HISTORY_HISTORY_MENU_DESCRIPTION: u32 = 4362;
pub const IDS_HISTORY_HISTORY_MENU_ITEM: u32 = 4363;
pub const IDS_HISTORY_NO_SYNCED_RESULTS: u32 = 4364;
pub const IDS_HISTORY_OPEN_TABS_MENU_ITEM: u32 = 4365;
pub const IDS_HISTORY_SIGN_IN_BUTTON: u32 = 4366;
pub const IDS_HISTORY_SIGN_IN_PROMO: u32 = 4367;
pub const IDS_HISTORY_SIGN_IN_PROMO_DESC: u32 = 4368;
pub const IDS_HISTORY_MENU_PROMO: u32 = 4369;
pub const IDS_HISTORY_CLOSE_MENU_PROMO: u32 = 4370;
pub const IDS_EDIT: u32 = 4371;
pub const IDS_CONFIRM: u32 = 4372;
pub const IDS_DISABLE: u32 = 4373;
pub const IDS_SEARCH_CLEARED: u32 = 4374;
pub const IDS_SEARCH_RESULTS: u32 = 4375;
pub const IDS_SEARCH_RESULTS_SINGULAR: u32 = 4376;
pub const IDS_SEARCH_RESULTS_PLURAL: u32 = 4377;
pub const IDS_SEARCH_NO_RESULTS: u32 = 4378;
pub const IDS_SHOW_BUBBLE_INACTIVE_DESCRIPTION: u32 = 4379;
pub const IDS_CONTENT_CONTEXT_INSPECTELEMENT: u32 = 4380;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_DIALOG_TITLE: u32 = 4381;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_BUBBLE_ENABLE: u32 = 4382;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_BUBBLE_DISABLE: u32 = 4383;
pub const IDS_CONTENT_CONTEXT_BACK: u32 = 4384;
pub const IDS_CONTENT_CONTEXT_FORWARD: u32 = 4385;
pub const IDS_CONTENT_CONTEXT_SAVEPAGEAS: u32 = 4386;
pub const IDS_CONTENT_CONTEXT_PRINT: u32 = 4387;
pub const IDS_CONTENT_CONTEXT_VIEWPAGESOURCE: u32 = 4388;
pub const IDS_CONTENT_CONTEXT_OPENLINKWITH: u32 = 4389;
pub const IDS_CONTENT_CONTEXT_OPENLINKWITH_CONFIGURE: u32 = 4390;
pub const IDS_CONTENT_CONTEXT_INSPECTBACKGROUNDPAGE: u32 = 4391;
pub const IDS_CONTENT_CONTEXT_RELOAD: u32 = 4392;
pub const IDS_CONTENT_CONTEXT_RESTART_APP: u32 = 4393;
pub const IDS_CONTENT_CONTEXT_RELOAD_PACKAGED_APP: u32 = 4394;
pub const IDS_CONTENT_CONTEXT_TRANSLATE: u32 = 4395;
pub const IDS_CONTENT_CONTEXT_EXIT_FULLSCREEN: u32 = 4396;
pub const IDS_CONTENT_CONTEXT_RELOADFRAME: u32 = 4397;
pub const IDS_CONTENT_CONTEXT_VIEWFRAMESOURCE: u32 = 4398;
pub const IDS_CONTENT_CONTEXT_OPENLINKNEWTAB: u32 = 4399;
pub const IDS_CONTENT_CONTEXT_OPENLINKNEWWINDOW: u32 = 4400;
pub const IDS_CONTENT_CONTEXT_OPENLINKOFFTHERECORD: u32 = 4401;
pub const IDS_CONTENT_CONTEXT_OPENLINKINPROFILES: u32 = 4402;
pub const IDS_CONTENT_CONTEXT_OPENLINKINPROFILE: u32 = 4403;
pub const IDS_CONTENT_CONTEXT_OPENLINKBOOKMARKAPP: u32 = 4404;
pub const IDS_CONTENT_CONTEXT_OPENLINKBOOKMARKAPP_SAMEAPP: u32 = 4405;
pub const IDS_CONTENT_CONTEXT_SAVELINKAS: u32 = 4406;
pub const IDS_CONTENT_CONTEXT_COPYLINKLOCATION: u32 = 4407;
pub const IDS_CONTENT_CONTEXT_COPYEMAILADDRESS: u32 = 4408;
pub const IDS_CONTENT_CONTEXT_COPYLINKTEXT: u32 = 4409;
pub const IDS_CONTENT_CONTEXT_SAVEIMAGEAS: u32 = 4410;
pub const IDS_CONTENT_CONTEXT_COPYIMAGELOCATION: u32 = 4411;
pub const IDS_CONTENT_CONTEXT_COPYIMAGE: u32 = 4412;
pub const IDS_CONTENT_CONTEXT_OPENIMAGENEWTAB: u32 = 4413;
pub const IDS_CONTENT_CONTEXT_OPEN_ORIGINAL_IMAGE_NEW_TAB: u32 = 4414;
pub const IDS_CONTENT_CONTEXT_LOAD_IMAGE: u32 = 4415;
pub const IDS_CONTENT_CONTEXT_LOOP: u32 = 4416;
pub const IDS_CONTENT_CONTEXT_CONTROLS: u32 = 4417;
pub const IDS_CONTENT_CONTEXT_ROTATECW: u32 = 4418;
pub const IDS_CONTENT_CONTEXT_ROTATECCW: u32 = 4419;
pub const IDS_CONTENT_CONTEXT_SAVEVIDEOAS: u32 = 4420;
pub const IDS_CONTENT_CONTEXT_COPYVIDEOLOCATION: u32 = 4421;
pub const IDS_CONTENT_CONTEXT_OPENVIDEONEWTAB: u32 = 4422;
pub const IDS_CONTENT_CONTEXT_SAVEAUDIOAS: u32 = 4423;
pub const IDS_CONTENT_CONTEXT_COPYAUDIOLOCATION: u32 = 4424;
pub const IDS_CONTENT_CONTEXT_OPENAUDIONEWTAB: u32 = 4425;
pub const IDS_CONTENT_CONTEXT_PICTUREINPICTURE: u32 = 4426;
pub const IDS_CONTENT_CONTEXT_UNDO: u32 = 4427;
pub const IDS_CONTENT_CONTEXT_REDO: u32 = 4428;
pub const IDS_CONTENT_CONTEXT_CUT: u32 = 4429;
pub const IDS_CONTENT_CONTEXT_COPY: u32 = 4430;
pub const IDS_CONTENT_CONTEXT_PASTE: u32 = 4431;
pub const IDS_CONTENT_CONTEXT_PASTE_AND_MATCH_STYLE: u32 = 4432;
pub const IDS_CONTENT_CONTEXT_ADD_TO_DICTIONARY: u32 = 4433;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_MENU_OPTION: u32 = 4434;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_SEND: u32 = 4435;
pub const IDS_CONTENT_CONTEXT_ACCESSIBILITY_LABELS_SEND_ONCE: u32 = 4436;
pub const IDS_CONTENT_CONTEXT_SPELLING_ASK_GOOGLE: u32 = 4437;
pub const IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_TITLE: u32 = 4438;
pub const IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_ENABLE: u32 = 4439;
pub const IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_DISABLE: u32 = 4440;
pub const IDS_CONTENT_CONTEXT_SPELLING_CHECKING: u32 = 4441;
pub const IDS_CONTENT_CONTEXT_SPELLING_NO_SUGGESTIONS_FROM_GOOGLE: u32 = 4442;
pub const IDS_CONTENT_CONTEXT_SELECTALL: u32 = 4443;
pub const IDS_CONTENT_CONTEXT_SEARCHWEBFOR: u32 = 4444;
pub const IDS_CONTENT_CONTEXT_SEARCHWEBFORIMAGE: u32 = 4445;
pub const IDS_CONTENT_CONTEXT_GOTOURL: u32 = 4446;
pub const IDS_CONTENT_CONTEXT_GENERATEPASSWORD: u32 = 4447;
pub const IDS_CONTENT_CONTEXT_MORE_APPS: u32 = 4448;
pub const IDS_CONTENT_CONTEXT_OPEN_WITH_APP: u32 = 4449;
pub const IDS_CONTENT_CONTEXT_PLUGIN_RUN: u32 = 4450;
pub const IDS_CONTENT_CONTEXT_PLUGIN_HIDE: u32 = 4451;
pub const IDS_CONTENT_CONTEXT_ENABLE_FLASH: u32 = 4452;
pub const IDS_CONTENT_CONTEXT_SPELLCHECK_MENU: u32 = 4454;
pub const IDS_CONTENT_CONTEXT_LANGUAGE_SETTINGS: u32 = 4453;
pub const IDS_CONTENT_CONTEXT_SPELLCHECK_MULTI_LINGUAL: u32 = 4455;
pub const IDS_CONTENT_CONTEXT_CHECK_SPELLING_WHILE_TYPING: u32 = 4456;
pub const IDS_NEW_TAB: u32 = 4457;
pub const IDS_SHOW_AS_TAB: u32 = 4458;
pub const IDS_NEW_WINDOW: u32 = 4459;
pub const IDS_NEW_INCOGNITO_WINDOW: u32 = 4460;
pub const IDS_PIN_TO_START_SCREEN: u32 = 4461;
pub const IDS_EDIT2: u32 = 4462;
pub const IDS_CUT: u32 = 4463;
pub const IDS_COPY: u32 = 4464;
pub const IDS_PASTE: u32 = 4465;
pub const IDS_DELETE: u32 = 4466;
pub const IDS_FIND: u32 = 4467;
pub const IDS_SAVE_PAGE: u32 = 4468;
pub const IDS_DISTILL_PAGE: u32 = 4469;
pub const IDS_MORE_TOOLS_MENU: u32 = 4470;
pub const IDS_ZOOM_MENU: u32 = 4471;
pub const IDS_ZOOM_MENU2: u32 = 4472;
pub const IDS_ZOOM_PLUS: u32 = 4473;
pub const IDS_ZOOM_PLUS2: u32 = 4474;
pub const IDS_ZOOM_NORMAL: u32 = 4475;
pub const IDS_ZOOM_MINUS: u32 = 4476;
pub const IDS_ZOOM_MINUS2: u32 = 4477;
pub const IDS_COPY_URL: u32 = 4478;
pub const IDS_OPEN_IN_APP_WINDOW: u32 = 4479;
pub const IDS_ACCNAME_ZOOM_PLUS2: u32 = 4481;
pub const IDS_ACCNAME_ZOOM_MINUS2: u32 = 4482;
pub const IDS_VIEW_SOURCE: u32 = 4483;
pub const IDS_FEEDBACK: u32 = 4484;
pub const IDS_DEV_TOOLS: u32 = 4485;
pub const IDS_DEV_TOOLS_ELEMENTS: u32 = 4486;
pub const IDS_DEV_TOOLS_CONSOLE: u32 = 4487;
pub const IDS_DEV_TOOLS_DEVICES: u32 = 4488;
pub const IDS_TASK_MANAGER: u32 = 4489;
pub const IDS_TAKE_SCREENSHOT: u32 = 4490;
pub const IDS_RESTORE_TAB: u32 = 4491;
pub const IDS_RESTORE_WINDOW: u32 = 4492;
pub const IDS_HELP_MENU: u32 = 4495;
pub const IDS_MANAGED: u32 = 4496;
pub const IDS_MANAGED_BY: u32 = 4497;
pub const IDS_IMPORT_SETTINGS_MENU_LABEL: u32 = 4498;
pub const IDS_PROFILING_ENABLED: u32 = 4499;
pub const IDS_FULLSCREEN: u32 = 4500;
pub const IDS_CLEAR_BROWSING_DATA: u32 = 4501;
pub const IDS_SHOW_DOWNLOADS: u32 = 4502;
pub const IDS_SHOW_EXTENSIONS: u32 = 4503;
pub const IDS_SETTINGS: u32 = 4504;
pub const IDS_OPTIONS: u32 = 4505;
pub const IDS_HELP_PAGE: u32 = 4506;
pub const IDS_BETA_FORUM: u32 = 4507;
pub const IDS_GET_HELP: u32 = 4508;
pub const IDS_EXIT: u32 = 4509;
pub const IDS_AUTOCOMPLETE_MATCH_DESCRIPTION_SEPARATOR: u32 = 217;
pub const IDS_AUTOCOMPLETE_MATCH_DESCRIPTION_SEPARATOR_ALTERNATE: u32 = 4510;
pub const IDS_EDIT_SEARCH_ENGINES: u32 = 4511;
pub const IDS_SEARCH_ENGINES_EDITOR_KEYWORD_COLUMN: u32 = 4512;
pub const IDS_SEARCH_ENGINES_EDITOR_DESCRIPTION_COLUMN: u32 = 4513;
pub const IDS_SEARCH_ENGINES_EDITOR_DEFAULT_ENGINE: u32 = 4514;
pub const IDS_ACCNAME_DOWNLOADS_BAR: u32 = 4515;
pub const IDS_HIDE_DOWNLOADS: u32 = 4516;
pub const IDS_SHOW_ALL_DOWNLOADS: u32 = 4517;
pub const IDS_DOWNLOAD_STARTED: u32 = 4518;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS: u32 = 4519;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_ACCESS_DENIED: u32 = 4520;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_ACCESS_DENIED: u32 = 4521;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_PATH_TOO_LONG: u32 = 4522;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_PATH_TOO_LONG: u32 = 4523;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_DISK_FULL: u32 = 4524;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_DISK_FULL: u32 = 4525;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_FILE_TOO_LARGE: u32 = 4526;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_FILE_TOO_LARGE: u32 = 4527;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_TEMPORARY_PROBLEM: u32 = 4528;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_TEMPORARY_PROBLEM: u32 = 4529;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_VIRUS: u32 = 4530;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_VIRUS: u32 = 4531;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_BLOCKED: u32 = 4532;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_BLOCKED: u32 = 4533;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_CONTENT_LENGTH_MISMATCH: u32 = 4534;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_CONTENT_LENGTH_MISMATCH: u32 = 4535;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SECURITY_CHECK_FAILED: u32 = 4536;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SECURITY_CHECK_FAILED: u32 = 4537;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_FILE_TOO_SHORT: u32 = 4538;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_FILE_TOO_SHORT: u32 = 4539;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_FILE_SAME_AS_SOURCE: u32 = 4540;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_FILE_SAME_AS_SOURCE: u32 = 4541;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_NETWORK_TIMEOUT: u32 = 4542;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_NETWORK_TIMEOUT: u32 = 4543;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_NETWORK_DISCONNECTED: u32 = 4544;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_NETWORK_DISCONNECTED: u32 = 4545;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SERVER_DOWN: u32 = 4546;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SERVER_DOWN: u32 = 4547;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_NETWORK_ERROR: u32 = 4548;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_NETWORK_ERROR: u32 = 4549;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_NO_FILE: u32 = 4550;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_NO_FILE: u32 = 4551;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SERVER_PROBLEM: u32 = 4552;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SERVER_PROBLEM: u32 = 4553;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SHUTDOWN: u32 = 4554;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SHUTDOWN: u32 = 4555;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_CRASH: u32 = 4556;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_CRASH: u32 = 4557;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_UNAUTHORIZED: u32 = 4558;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_UNAUTHORIZED: u32 = 4559;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_SERVER_CERT_PROBLEM: u32 = 4560;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_SERVER_CERT_PROBLEM: u32 = 4561;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_FORBIDDEN: u32 = 4562;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_FORBIDDEN: u32 = 4563;
pub const IDS_DOWNLOAD_INTERRUPTED_STATUS_UNREACHABLE: u32 = 4564;
pub const IDS_DOWNLOAD_INTERRUPTED_DESCRIPTION_UNREACHABLE: u32 = 4565;
pub const IDS_DOWNLOAD_NOTIFICATION_LABEL_OPEN_WHEN_COMPLETE: u32 = 4566;
pub const IDS_DOWNLOAD_NOTIFICATION_LABEL_OPEN: u32 = 4567;
pub const IDS_DOWNLOAD_STATUS_STARTING: u32 = 4568;
pub const IDS_DOWNLOAD_STATUS_IN_PROGRESS: u32 = 4577;
pub const IDS_DOWNLOAD_STATUS_SIZES: u32 = 4578;
pub const IDS_DOWNLOAD_STATUS_OPEN_IN: u32 = 4579;
pub const IDS_DOWNLOAD_STATUS_OPEN_WHEN_COMPLETE: u32 = 4580;
pub const IDS_DOWNLOAD_STATUS_OPENING: u32 = 4581;
pub const IDS_DOWNLOAD_STATUS_IN_PROGRESS_SHORT: u32 = 4582;
pub const IDS_DOWNLOAD_STATUS_CANCELLED: u32 = 4583;
pub const IDS_DOWNLOAD_STATUS_REMOVED: u32 = 4584;
pub const IDS_DOWNLOAD_STATUS_INTERRUPTED: u32 = 4585;
pub const IDS_DOWNLOAD_UNCONFIRMED_PREFIX: u32 = 4586;
pub const IDS_PROMPT_DANGEROUS_DOWNLOAD: u32 = 4587;
pub const IDS_PROMPT_DANGEROUS_DOWNLOAD_EXTENSION: u32 = 4588;
pub const IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT: u32 = 4589;
pub const IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION: u32 = 4590;
pub const IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD: u32 = 4591;
pub const IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD_IN_ADVANCED_PROTECTION: u32 = 4592;
pub const IDS_BLOCK_REASON_GENERIC_DOWNLOAD: u32 = 4593;
pub const IDS_CONFIRM_KEEP_DANGEROUS_DOWNLOAD_TITLE: u32 = 4595;
pub const IDS_KEEP_DANGEROUS_DOWNLOAD_TITLE: u32 = 4596;
pub const IDS_KEEP_UNCOMMON_DOWNLOAD_TITLE: u32 = 4597;
pub const IDS_PROMPT_CONFIRM_KEEP_DANGEROUS_DOWNLOAD: u32 = 4598;
pub const IDS_PROMPT_CONFIRM_KEEP_MALICIOUS_DOWNLOAD_BODY: u32 = 4599;
pub const IDS_CONFIRM_DOWNLOAD_AGAIN: u32 = 4600;
pub const IDS_CONFIRM_DOWNLOAD: u32 = 4601;
pub const IDS_CONFIRM_DOWNLOAD_RESTORE: u32 = 4602;
pub const IDS_CONTINUE_EXTENSION_DOWNLOAD: u32 = 4603;
pub const IDS_DISCARD_DOWNLOAD: u32 = 4604;
pub const IDS_DOWNLOAD_LINK_PAUSE: u32 = 4605;
pub const IDS_DOWNLOAD_SEARCH: u32 = 4606;
pub const IDS_DOWNLOAD_CLEAR_SEARCH: u32 = 4607;
pub const IDS_DOWNLOAD_NO_DOWNLOADS: u32 = 4608;
pub const IDS_DOWNLOAD_ITEM_DROPDOWN_BUTTON_ACCESSIBLE_TEXT: u32 = 4609;
pub const IDS_DOWNLOAD_LINK_RESUME: u32 = 4610;
pub const IDS_DOWNLOAD_LINK_REMOVE: u32 = 4611;
pub const IDS_DOWNLOAD_LINK_REMOVE_ARIA_LABEL: u32 = 4612;
pub const IDS_DOWNLOAD_LINK_CANCEL: u32 = 4613;
pub const IDS_DOWNLOAD_LINK_RETRY: u32 = 4614;
pub const IDS_DOWNLOAD_LINK_SHOW: u32 = 4615;
pub const IDS_DOWNLOAD_TAB_CANCELLED: u32 = 4616;
pub const IDS_DOWNLOAD_FILE_REMOVED: u32 = 4617;
pub const IDS_DOWNLOAD_TAB_PROGRESS_STATUS_TIME_UNKNOWN: u32 = 4618;
pub const IDS_DOWNLOAD_TAB_PROGRESS_STATUS: u32 = 4619;
pub const IDS_DOWNLOAD_TAB_PROGRESS_SIZE: u32 = 4620;
pub const IDS_DOWNLOAD_PROGRESS_PAUSED: u32 = 4621;
pub const IDS_DOWNLOAD_LINK_CLEAR_ALL: u32 = 4622;
pub const IDS_DOWNLOAD_LINK_OPEN_DOWNLOADS_FOLDER: u32 = 4623;
pub const IDS_DOWNLOAD_MORE_ACTIONS: u32 = 4624;
pub const IDS_DOWNLOAD_ACTION_MENU_DESCRIPTION: u32 = 4625;
pub const IDS_DOWNLOAD_BY_EXTENSION_URL: u32 = 4626;
pub const IDS_DOWNLOAD_IN_INCOGNITO: u32 = 4627;
pub const IDS_DOWNLOAD_UNDO_DESCRIPTION: u32 = 4628;
pub const IDS_DOWNLOAD_UNDO: u32 = 4629;
pub const IDS_DOWNLOAD_TOAST_REMOVED_FROM_LIST: u32 = 4630;
pub const IDS_DOWNLOAD_TOAST_CLEARED_ALL: u32 = 4631;
pub const IDS_DOWNLOAD_STATUS_IN_PROGRESS_ACCESSIBLE_ALERT: u32 = 4632;
pub const IDS_DOWNLOAD_STATUS_PERCENT_COMPLETE_ACCESSIBLE_ALERT: u32 = 4633;
pub const IDS_DOWNLOAD_STATUS_TIME_REMAINING_ACCESSIBLE_ALERT: u32 = 4634;
pub const IDS_DOWNLOAD_FAILED_ACCESSIBLE_ALERT: u32 = 4635;
pub const IDS_DOWNLOAD_CANCELLED_ACCESSIBLE_ALERT: u32 = 4636;
pub const IDS_DOWNLOAD_COMPLETE_ACCESSIBLE_ALERT: u32 = 4637;
pub const IDS_DOWNLOAD_NOTIFICATION_COPY_TO_CLIPBOARD: u32 = 4638;
pub const IDS_DOWNLOAD_NOTIFICATION_ANNOTATE: u32 = 4639;
pub const IDS_DOWNLOAD_MENU_SHOW: u32 = 4640;
pub const IDS_DOWNLOAD_MENU_OPEN_WHEN_COMPLETE: u32 = 4641;
pub const IDS_DOWNLOAD_MENU_OPEN: u32 = 4642;
pub const IDS_DOWNLOAD_MENU_ALWAYS_OPEN_TYPE: u32 = 4643;
pub const IDS_DOWNLOAD_MENU_PLATFORM_OPEN: u32 = 4644;
pub const IDS_DOWNLOAD_MENU_PLATFORM_OPEN_ALWAYS: u32 = 4645;
pub const IDS_DOWNLOAD_MENU_CANCEL: u32 = 4646;
pub const IDS_DOWNLOAD_MENU_PAUSE_ITEM: u32 = 4647;
pub const IDS_DOWNLOAD_MENU_RESUME_ITEM: u32 = 4648;
pub const IDS_DOWNLOAD_MENU_DISCARD: u32 = 4649;
pub const IDS_DOWNLOAD_MENU_KEEP: u32 = 4650;
pub const IDS_DOWNLOAD_MENU_LEARN_MORE_SCANNING: u32 = 4651;
pub const IDS_DOWNLOAD_MENU_LEARN_MORE_INTERRUPTED: u32 = 4652;
pub const IDS_DOWNLOAD_MENU_ALWAYS_OPEN_PDF_IN_READER: u32 = 4653;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_TITLE: u32 = 4662;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_CONTINUE_BUTTON: u32 = 4663;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_INCOGNITO_MESSAGE: u32 = 4664;
pub const IDS_ABANDON_DOWNLOAD_DIALOG_EXIT_BUTTON: u32 = 4665;
pub const IDS_FEEDBACK_SERVICE_DIALOG_EXPLANATION_SCOUT: u32 = 4666;
pub const IDS_FEEDBACK_SERVICE_DIALOG_OK_BUTTON_LABEL: u32 = 4667;
pub const IDS_FEEDBACK_SERVICE_DIALOG_CANCEL_BUTTON_LABEL: u32 = 4668;
pub const IDS_OMNIBOX_PWA_INSTALL_ICON_LABEL: u32 = 4672;
pub const IDS_OMNIBOX_PWA_INSTALL_ICON_TOOLTIP: u32 = 4673;
pub const IDS_ADD_TO_OS_LAUNCH_SURFACE_BUBBLE_TITLE: u32 = 4674;
pub const IDS_CREATE_SHORTCUTS_BUTTON_LABEL: u32 = 4675;
pub const IDS_INSTALL_TO_OS_LAUNCH_SURFACE_BUBBLE_TITLE: u32 = 4676;
pub const IDS_INSTALL_PWA_BUTTON_LABEL: u32 = 4677;
pub const IDS_BOOKMARK_APP_AX_BUBBLE_NAME_LABEL: u32 = 4678;
pub const IDS_BOOKMARK_APP_BUBBLE_OPEN_AS_WINDOW: u32 = 4679;
pub const IDS_FINISH_POLICY_WEB_APP_INSTALLATION: u32 = 4680;
pub const IDS_FINISH_POLICY_WEB_APP_INSTALATION_RESTART: u32 = 4681;
pub const IDS_FINISH_POLICY_WEB_APP_INSTALLATION_NOT_NOW: u32 = 4682;
pub const IDS_ADD_TO_OS_LAUNCH_SURFACE: u32 = 4687;
pub const IDS_INSTALL_TO_OS_LAUNCH_SURFACE: u32 = 4688;
pub const IDS_UNINSTALL_FROM_OS_LAUNCH_SURFACE: u32 = 4689;
pub const IDS_APPLICATION_INFO_WEB_STORE_LINK: u32 = 4690;
pub const IDS_APPLICATION_INFO_HOMEPAGE_LINK: u32 = 4691;
pub const IDS_ARC_APPLICATION_INFO_MANAGE_LINK: u32 = 4692;
pub const IDS_APPLICATION_INFO_APP_OVERVIEW_TITLE: u32 = 4693;
pub const IDS_APPLICATION_INFO_APP_PERMISSIONS_TITLE: u32 = 4694;
pub const IDS_APPLICATION_INFO_UNINSTALL_BUTTON_TEXT: u32 = 4695;
pub const IDS_APPLICATION_INFO_LICENSES_BUTTON_TEXT: u32 = 4696;
pub const IDS_APPLICATION_INFO_SIZE_LABEL: u32 = 4697;
pub const IDS_APPLICATION_INFO_VERSION_LABEL: u32 = 4698;
pub const IDS_APPLICATION_INFO_CREATE_SHORTCUTS_BUTTON_TEXT: u32 = 4699;
pub const IDS_APPLICATION_INFO_LAUNCH_OPTIONS_ACCNAME: u32 = 4700;
pub const IDS_APPLICATION_INFO_SIZE_LOADING_LABEL: u32 = 4701;
pub const IDS_APPLICATION_INFO_SIZE_SMALL_LABEL: u32 = 4702;
pub const IDS_APPLICATION_INFO_REVOKE_PERMISSION_ALT_TEXT: u32 = 4703;
pub const IDS_APPLICATION_INFO_APP_NO_PERMISSIONS_TEXT: u32 = 4704;
pub const IDS_APPLICATION_INFO_EXTENSION_NO_PERMISSIONS_TEXT: u32 = 4705;
pub const IDS_APPLICATION_INFO_RETAINED_FILES: u32 = 4706;
pub const IDS_APPLICATION_INFO_RETAINED_DEVICES: u32 = 4707;
pub const IDS_CREATE_SHORTCUTS_TITLE: u32 = 4708;
pub const IDS_CREATE_SHORTCUTS_LABEL: u32 = 4709;
pub const IDS_CREATE_SHORTCUTS_DESKTOP_CHKBOX: u32 = 4710;
pub const IDS_CREATE_SHORTCUTS_MENU_CHKBOX: u32 = 4711;
pub const IDS_CREATE_SHORTCUTS_COMMIT: u32 = 4712;
pub const IDS_CREATE_SHORTCUTS_START_MENU_CHKBOX: u32 = 4713;
pub const IDS_CREATE_SHORTCUTS_QUICK_LAUNCH_BAR_CHKBOX: u32 = 4714;
pub const IDS_PIN_TO_TASKBAR_CHKBOX: u32 = 4715;
pub const IDS_WEBSHARE_TARGET_PICKER_TITLE: u32 = 4716;
pub const IDS_WEBSHARE_TARGET_PICKER_LABEL: u32 = 4717;
pub const IDS_WEBSHARE_TARGET_PICKER_COMMIT: u32 = 4718;
pub const IDS_WEBSHARE_TARGET_DIALOG_ITEM_TEXT: u32 = 4719;
pub const IDS_MANAGE: u32 = 4720;
pub const IDS_LIST_BULLET: u32 = 4721;
pub const IDS_AUTOMATIC_DOWNLOADS_TAB_LABEL: u32 = 4722;
pub const IDS_BLOCKED_DOWNLOAD_NO_ACTION: u32 = 4723;
pub const IDS_BLOCKED_DOWNLOAD_UNBLOCK: u32 = 4724;
pub const IDS_BLOCKED_DOWNLOADS_LINK: u32 = 4725;
pub const IDS_ALLOWED_DOWNLOAD_TITLE: u32 = 4726;
pub const IDS_BLOCKED_DOWNLOAD_TITLE: u32 = 4727;
pub const IDS_BLOCKED_DOWNLOADS_EXPLANATION: u32 = 4728;
pub const IDS_ALLOWED_DOWNLOAD_NO_ACTION: u32 = 4729;
pub const IDS_ALLOWED_DOWNLOAD_BLOCK: u32 = 4730;
pub const IDS_BLOCKED_COOKIES_TITLE: u32 = 4731;
pub const IDS_ACCESSED_COOKIES_TITLE: u32 = 4732;
pub const IDS_BLOCKED_COOKIES_MESSAGE: u32 = 4733;
pub const IDS_ACCESSED_COOKIES_MESSAGE: u32 = 4734;
pub const IDS_BLOCKED_COOKIES_LINK: u32 = 4735;
pub const IDS_BLOCKED_COOKIES_INFO: u32 = 4736;
pub const IDS_BLOCKED_IMAGES_TITLE: u32 = 4737;
pub const IDS_BLOCKED_IMAGES_MESSAGE: u32 = 4738;
pub const IDS_BLOCKED_COOKIES_UNBLOCK: u32 = 4739;
pub const IDS_BLOCKED_IMAGES_UNBLOCK: u32 = 4740;
pub const IDS_BLOCKED_COOKIES_NO_ACTION: u32 = 4741;
pub const IDS_ALLOWED_COOKIES_NO_ACTION: u32 = 4742;
pub const IDS_ALLOWED_COOKIES_BLOCK: u32 = 4743;
pub const IDS_BLOCKED_IMAGES_NO_ACTION: u32 = 4744;
pub const IDS_BLOCKED_POPUPS_TOOLTIP: u32 = 4745;
pub const IDS_BLOCKED_POPUPS_TITLE: u32 = 4746;
pub const IDS_BLOCKED_POPUPS_REDIRECTS_UNBLOCK: u32 = 4747;
pub const IDS_BLOCKED_POPUPS_REDIRECTS_NO_ACTION: u32 = 4748;
pub const IDS_BLOCKED_POPUPS_LINK: u32 = 4749;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_AND_CAMERA_ALLOW: u32 = 4750;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_ALLOW: u32 = 4751;
pub const IDS_BLOCKED_MEDIASTREAM_CAMERA_ALLOW: u32 = 4752;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_AND_CAMERA_ASK: u32 = 4753;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_ASK: u32 = 4754;
pub const IDS_BLOCKED_MEDIASTREAM_CAMERA_ASK: u32 = 4755;
pub const IDS_ALLOWED_MEDIASTREAM_MIC_AND_CAMERA_BLOCK: u32 = 4756;
pub const IDS_ALLOWED_MEDIASTREAM_MIC_BLOCK: u32 = 4757;
pub const IDS_ALLOWED_MEDIASTREAM_CAMERA_BLOCK: u32 = 4758;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_AND_CAMERA_NO_ACTION: u32 = 4759;
pub const IDS_BLOCKED_MEDIASTREAM_MIC_NO_ACTION: u32 = 4760;
pub const IDS_BLOCKED_MEDIASTREAM_CAMERA_NO_ACTION: u32 = 4761;
pub const IDS_ALLOWED_MEDIASTREAM_MIC_AND_CAMERA_NO_ACTION: u32 = 4762;
pub const IDS_ALLOWED_MEDIASTREAM_MIC_NO_ACTION: u32 = 4763;
pub const IDS_ALLOWED_MEDIASTREAM_CAMERA_NO_ACTION: u32 = 4764;
pub const IDS_BLOCKED_POPUPS_EXPLANATORY_TEXT: u32 = 4765;
pub const IDS_BLOCKED_PLUGIN_EXPLANATORY_TEXT: u32 = 4766;
pub const IDS_BLOCKED_JAVASCRIPT_TITLE: u32 = 4767;
pub const IDS_BLOCKED_JAVASCRIPT_MESSAGE: u32 = 4768;
pub const IDS_BLOCKED_JAVASCRIPT_UNBLOCK: u32 = 4769;
pub const IDS_BLOCKED_JAVASCRIPT_NO_ACTION: u32 = 4770;
pub const IDS_BLOCKED_PLUGINS_TITLE: u32 = 4771;
pub const IDS_BLOCKED_PLUGINS_MESSAGE: u32 = 4772;
pub const IDS_BLOCKED_PLUGINS_LOAD_ALL: u32 = 4773;
pub const IDS_BLOCKED_SOUND_TITLE: u32 = 4774;
pub const IDS_BLOCKED_SOUND_UNBLOCK: u32 = 4775;
pub const IDS_BLOCKED_SOUND_NO_ACTION: u32 = 4776;
pub const IDS_CERT_SELECTOR_SUBJECT_COLUMN: u32 = 4777;
pub const IDS_CERT_SELECTOR_ISSUER_COLUMN: u32 = 4778;
pub const IDS_CERT_SELECTOR_PROVIDER_COLUMN: u32 = 4779;
pub const IDS_CERT_SELECTOR_SERIAL_COLUMN: u32 = 4780;
pub const IDS_CERT_INFO_SUBJECT_GROUP: u32 = 4781;
pub const IDS_CERT_INFO_ISSUER_GROUP: u32 = 4782;
pub const IDS_CERT_INFO_COMMON_NAME_LABEL: u32 = 4783;
pub const IDS_CERT_INFO_ORGANIZATION_LABEL: u32 = 4784;
pub const IDS_CERT_INFO_ORGANIZATIONAL_UNIT_LABEL: u32 = 4785;
pub const IDS_CERT_INFO_SERIAL_NUMBER_LABEL: u32 = 4786;
pub const IDS_CERT_INFO_VALIDITY_GROUP: u32 = 4787;
pub const IDS_CERT_INFO_ISSUED_ON_LABEL: u32 = 4788;
pub const IDS_CERT_INFO_EXPIRES_ON_LABEL: u32 = 4789;
pub const IDS_CERT_INFO_FINGERPRINTS_GROUP: u32 = 4790;
pub const IDS_CERT_INFO_SHA256_FINGERPRINT_LABEL: u32 = 4791;
pub const IDS_CERT_INFO_SHA1_FINGERPRINT_LABEL: u32 = 4792;
pub const IDS_CERT_DETAILS_EXTENSIONS: u32 = 4793;
pub const IDS_CERT_X509_SUBJECT_ALT_NAME: u32 = 4794;
pub const IDS_CERT_EXPORT_TYPE_BASE64: u32 = 4795;
pub const IDS_CERT_EXPORT_TYPE_BASE64_CHAIN: u32 = 4796;
pub const IDS_CERT_EXPORT_TYPE_DER: u32 = 4797;
pub const IDS_CERT_EXPORT_TYPE_PKCS7: u32 = 4798;
pub const IDS_CERT_EXPORT_TYPE_PKCS7_CHAIN: u32 = 4799;
pub const IDS_CERT_INFO_DIALOG_TITLE: u32 = 4800;
pub const IDS_CERT_INFO_GENERAL_TAB_LABEL: u32 = 4801;
pub const IDS_CERT_INFO_DETAILS_TAB_LABEL: u32 = 4802;
pub const IDS_CERT_INFO_VERIFIED_USAGES_GROUP: u32 = 4803;
pub const IDS_CERT_USAGE_SSL_CLIENT: u32 = 4804;
pub const IDS_CERT_USAGE_SSL_SERVER: u32 = 4805;
pub const IDS_CERT_USAGE_SSL_SERVER_WITH_STEPUP: u32 = 4806;
pub const IDS_CERT_USAGE_EMAIL_SIGNER: u32 = 4807;
pub const IDS_CERT_USAGE_EMAIL_RECEIVER: u32 = 4808;
pub const IDS_CERT_USAGE_OBJECT_SIGNER: u32 = 4809;
pub const IDS_CERT_USAGE_SSL_CA: u32 = 4810;
pub const IDS_CERT_USAGE_STATUS_RESPONDER: u32 = 4811;
pub const IDS_CERT_INFO_IDN_VALUE_FORMAT: u32 = 4812;
pub const IDS_CERT_INFO_FIELD_NOT_PRESENT: u32 = 4813;
pub const IDS_CERT_DETAILS_CERTIFICATE_HIERARCHY_LABEL: u32 = 4814;
pub const IDS_CERT_DETAILS_CERTIFICATE_FIELDS_LABEL: u32 = 4815;
pub const IDS_CERT_DETAILS_CERTIFICATE_FIELD_VALUE_LABEL: u32 = 4816;
pub const IDS_CERT_DETAILS_CERTIFICATE: u32 = 4817;
pub const IDS_CERT_DETAILS_VERSION: u32 = 4818;
pub const IDS_CERT_DETAILS_VERSION_FORMAT: u32 = 4819;
pub const IDS_CERT_DETAILS_SERIAL_NUMBER: u32 = 4820;
pub const IDS_CERT_DETAILS_CERTIFICATE_SIG_ALG: u32 = 4821;
pub const IDS_CERT_DETAILS_ISSUER: u32 = 4822;
pub const IDS_CERT_DETAILS_VALIDITY: u32 = 4823;
pub const IDS_CERT_DETAILS_NOT_BEFORE: u32 = 4824;
pub const IDS_CERT_DETAILS_NOT_AFTER: u32 = 4825;
pub const IDS_CERT_DETAILS_SUBJECT: u32 = 4826;
pub const IDS_CERT_DETAILS_SUBJECT_KEY_INFO: u32 = 4827;
pub const IDS_CERT_DETAILS_SUBJECT_KEY_ALG: u32 = 4828;
pub const IDS_CERT_DETAILS_SUBJECT_KEY: u32 = 4829;
pub const IDS_CERT_RSA_PUBLIC_KEY_DUMP_FORMAT: u32 = 4830;
pub const IDS_CERT_DETAILS_CERTIFICATE_SIG_VALUE: u32 = 4831;
pub const IDS_CERT_DETAILS_EXPORT_CERTIFICATE: u32 = 4832;
pub const IDS_CERT_OID_AVA_COMMON_NAME: u32 = 4833;
pub const IDS_CERT_OID_AVA_STATE_OR_PROVINCE: u32 = 4834;
pub const IDS_CERT_OID_AVA_ORGANIZATION_NAME: u32 = 4835;
pub const IDS_CERT_OID_AVA_ORGANIZATIONAL_UNIT_NAME: u32 = 4836;
pub const IDS_CERT_OID_AVA_DN_QUALIFIER: u32 = 4837;
pub const IDS_CERT_OID_AVA_COUNTRY_NAME: u32 = 4838;
pub const IDS_CERT_OID_AVA_SERIAL_NUMBER: u32 = 4839;
pub const IDS_CERT_OID_AVA_LOCALITY: u32 = 4840;
pub const IDS_CERT_OID_AVA_DC: u32 = 4841;
pub const IDS_CERT_OID_RFC1274_MAIL: u32 = 4842;
pub const IDS_CERT_OID_RFC1274_UID: u32 = 4843;
pub const IDS_CERT_OID_PKCS9_EMAIL_ADDRESS: u32 = 4844;
pub const IDS_CERT_OID_BUSINESS_CATEGORY: u32 = 4845;
pub const IDS_CERT_OID_EV_INCORPORATION_LOCALITY: u32 = 4846;
pub const IDS_CERT_OID_EV_INCORPORATION_STATE: u32 = 4847;
pub const IDS_CERT_OID_EV_INCORPORATION_COUNTRY: u32 = 4848;
pub const IDS_CERT_OID_AVA_STREET_ADDRESS: u32 = 4849;
pub const IDS_CERT_OID_AVA_POSTAL_CODE: u32 = 4850;
pub const IDS_CERT_OID_PKCS1_RSA_ENCRYPTION: u32 = 4851;
pub const IDS_CERT_OID_PKCS1_MD2_WITH_RSA_ENCRYPTION: u32 = 4852;
pub const IDS_CERT_OID_PKCS1_MD4_WITH_RSA_ENCRYPTION: u32 = 4853;
pub const IDS_CERT_OID_PKCS1_MD5_WITH_RSA_ENCRYPTION: u32 = 4854;
pub const IDS_CERT_OID_PKCS1_SHA1_WITH_RSA_ENCRYPTION: u32 = 4855;
pub const IDS_CERT_OID_PKCS1_SHA256_WITH_RSA_ENCRYPTION: u32 = 4856;
pub const IDS_CERT_OID_PKCS1_SHA384_WITH_RSA_ENCRYPTION: u32 = 4857;
pub const IDS_CERT_OID_PKCS1_SHA512_WITH_RSA_ENCRYPTION: u32 = 4858;
pub const IDS_CERT_OID_ANSIX962_ECDSA_SHA1_SIGNATURE: u32 = 4859;
pub const IDS_CERT_OID_ANSIX962_ECDSA_SHA256_SIGNATURE: u32 = 4860;
pub const IDS_CERT_OID_ANSIX962_ECDSA_SHA384_SIGNATURE: u32 = 4861;
pub const IDS_CERT_OID_ANSIX962_ECDSA_SHA512_SIGNATURE: u32 = 4862;
pub const IDS_CERT_OID_ANSIX962_EC_PUBLIC_KEY: u32 = 4863;
pub const IDS_CERT_OID_SECG_EC_SECP256R1: u32 = 4864;
pub const IDS_CERT_OID_SECG_EC_SECP384R1: u32 = 4865;
pub const IDS_CERT_OID_SECG_EC_SECP521R1: u32 = 4866;
pub const IDS_CERT_EXT_NS_CERT_TYPE: u32 = 4867;
pub const IDS_CERT_EXT_NS_CERT_TYPE_EMAIL: u32 = 4868;
pub const IDS_CERT_EXT_NS_CERT_TYPE_EMAIL_CA: u32 = 4869;
pub const IDS_CERT_EXT_NS_CERT_BASE_URL: u32 = 4870;
pub const IDS_CERT_EXT_NS_CERT_REVOCATION_URL: u32 = 4871;
pub const IDS_CERT_EXT_NS_CA_REVOCATION_URL: u32 = 4872;
pub const IDS_CERT_EXT_NS_CERT_RENEWAL_URL: u32 = 4873;
pub const IDS_CERT_EXT_NS_CA_POLICY_URL: u32 = 4874;
pub const IDS_CERT_EXT_NS_SSL_SERVER_NAME: u32 = 4875;
pub const IDS_CERT_EXT_NS_COMMENT: u32 = 4876;
pub const IDS_CERT_EXT_NS_LOST_PASSWORD_URL: u32 = 4877;
pub const IDS_CERT_EXT_NS_CERT_RENEWAL_TIME: u32 = 4878;
pub const IDS_CERT_X509_SUBJECT_DIRECTORY_ATTR: u32 = 4879;
pub const IDS_CERT_X509_SUBJECT_KEYID: u32 = 4880;
pub const IDS_CERT_KEYID_FORMAT: u32 = 4881;
pub const IDS_CERT_ISSUER_FORMAT: u32 = 4882;
pub const IDS_CERT_SERIAL_NUMBER_FORMAT: u32 = 4883;
pub const IDS_CERT_X509_KEY_USAGE: u32 = 4884;
pub const IDS_CERT_X509_ISSUER_ALT_NAME: u32 = 4885;
pub const IDS_CERT_X509_BASIC_CONSTRAINTS: u32 = 4886;
pub const IDS_CERT_X509_NAME_CONSTRAINTS: u32 = 4887;
pub const IDS_CERT_X509_CRL_DIST_POINTS: u32 = 4888;
pub const IDS_CERT_X509_CERT_POLICIES: u32 = 4889;
pub const IDS_CERT_X509_POLICY_MAPPINGS: u32 = 4890;
pub const IDS_CERT_X509_POLICY_CONSTRAINTS: u32 = 4891;
pub const IDS_CERT_X509_AUTH_KEYID: u32 = 4892;
pub const IDS_CERT_X509_EXT_KEY_USAGE: u32 = 4893;
pub const IDS_CERT_X509_AUTH_INFO_ACCESS: u32 = 4894;
pub const IDS_CERT_X509_KEY_USAGE_SIGNING: u32 = 4895;
pub const IDS_CERT_X509_KEY_USAGE_NONREP: u32 = 4896;
pub const IDS_CERT_X509_KEY_USAGE_ENCIPHERMENT: u32 = 4897;
pub const IDS_CERT_X509_KEY_USAGE_DATA_ENCIPHERMENT: u32 = 4898;
pub const IDS_CERT_X509_KEY_USAGE_KEY_AGREEMENT: u32 = 4899;
pub const IDS_CERT_X509_KEY_USAGE_CERT_SIGNER: u32 = 4900;
pub const IDS_CERT_X509_KEY_USAGE_CRL_SIGNER: u32 = 4901;
pub const IDS_CERT_X509_KEY_USAGE_ENCIPHER_ONLY: u32 = 4902;
pub const IDS_CERT_X509_BASIC_CONSTRAINT_IS_CA: u32 = 4903;
pub const IDS_CERT_X509_BASIC_CONSTRAINT_IS_NOT_CA: u32 = 4904;
pub const IDS_CERT_X509_BASIC_CONSTRAINT_PATH_LEN: u32 = 4905;
pub const IDS_CERT_X509_BASIC_CONSTRAINT_PATH_LEN_UNLIMITED: u32 = 4906;
pub const IDS_CERT_PKIX_CPS_POINTER_QUALIFIER: u32 = 4907;
pub const IDS_CERT_PKIX_USER_NOTICE_QUALIFIER: u32 = 4908;
pub const IDS_CERT_REVOCATION_REASON_UNUSED: u32 = 4909;
pub const IDS_CERT_REVOCATION_REASON_KEY_COMPROMISE: u32 = 4910;
pub const IDS_CERT_REVOCATION_REASON_CA_COMPROMISE: u32 = 4911;
pub const IDS_CERT_REVOCATION_REASON_AFFILIATION_CHANGED: u32 = 4912;
pub const IDS_CERT_REVOCATION_REASON_SUPERSEDED: u32 = 4913;
pub const IDS_CERT_REVOCATION_REASON_CESSATION_OF_OPERATION: u32 = 4914;
pub const IDS_CERT_REVOCATION_REASON_CERTIFICATE_HOLD: u32 = 4915;
pub const IDS_CERT_OCSP_RESPONDER_FORMAT: u32 = 4916;
pub const IDS_CERT_CA_ISSUERS_FORMAT: u32 = 4917;
pub const IDS_CERT_UNKNOWN_OID_INFO_FORMAT: u32 = 4918;
pub const IDS_CERT_EXT_KEY_USAGE_FORMAT: u32 = 4919;
pub const IDS_CERT_MULTILINE_INFO_START_FORMAT: u32 = 4920;
pub const IDS_CERT_GENERAL_NAME_RFC822_NAME: u32 = 4921;
pub const IDS_CERT_GENERAL_NAME_DNS_NAME: u32 = 4922;
pub const IDS_CERT_GENERAL_NAME_X400_ADDRESS: u32 = 4923;
pub const IDS_CERT_GENERAL_NAME_DIRECTORY_NAME: u32 = 4924;
pub const IDS_CERT_GENERAL_NAME_EDI_PARTY_NAME: u32 = 4925;
pub const IDS_CERT_GENERAL_NAME_URI: u32 = 4926;
pub const IDS_CERT_GENERAL_NAME_IP_ADDRESS: u32 = 4927;
pub const IDS_CERT_GENERAL_NAME_REGISTERED_ID: u32 = 4928;
pub const IDS_CERT_EXT_MS_CERT_TYPE: u32 = 4929;
pub const IDS_CERT_EXT_MS_CA_VERSION: u32 = 4930;
pub const IDS_CERT_EXT_MS_NT_PRINCIPAL_NAME: u32 = 4931;
pub const IDS_CERT_EXT_MS_NTDS_REPLICATION: u32 = 4932;
pub const IDS_CERT_EKU_TLS_WEB_SERVER_AUTHENTICATION: u32 = 4933;
pub const IDS_CERT_EKU_TLS_WEB_CLIENT_AUTHENTICATION: u32 = 4934;
pub const IDS_CERT_EKU_CODE_SIGNING: u32 = 4935;
pub const IDS_CERT_EKU_EMAIL_PROTECTION: u32 = 4936;
pub const IDS_CERT_EKU_TIME_STAMPING: u32 = 4937;
pub const IDS_CERT_EKU_OCSP_SIGNING: u32 = 4938;
pub const IDS_CERT_EKU_MS_INDIVIDUAL_CODE_SIGNING: u32 = 4939;
pub const IDS_CERT_EKU_MS_COMMERCIAL_CODE_SIGNING: u32 = 4940;
pub const IDS_CERT_EKU_MS_TRUST_LIST_SIGNING: u32 = 4941;
pub const IDS_CERT_EKU_MS_TIME_STAMPING: u32 = 4942;
pub const IDS_CERT_EKU_MS_SERVER_GATED_CRYPTO: u32 = 4943;
pub const IDS_CERT_EKU_MS_ENCRYPTING_FILE_SYSTEM: u32 = 4944;
pub const IDS_CERT_EKU_MS_FILE_RECOVERY: u32 = 4945;
pub const IDS_CERT_EKU_MS_WINDOWS_HARDWARE_DRIVER_VERIFICATION: u32 = 4946;
pub const IDS_CERT_EKU_MS_QUALIFIED_SUBORDINATION: u32 = 4947;
pub const IDS_CERT_EKU_MS_KEY_RECOVERY: u32 = 4948;
pub const IDS_CERT_EKU_MS_DOCUMENT_SIGNING: u32 = 4949;
pub const IDS_CERT_EKU_MS_LIFETIME_SIGNING: u32 = 4950;
pub const IDS_CERT_EKU_MS_SMART_CARD_LOGON: u32 = 4951;
pub const IDS_CERT_EKU_MS_KEY_RECOVERY_AGENT: u32 = 4952;
pub const IDS_CERT_EKU_NETSCAPE_INTERNATIONAL_STEP_UP: u32 = 4953;
pub const IDS_CERT_EXTENSION_CRITICAL: u32 = 4954;
pub const IDS_CERT_EXTENSION_NON_CRITICAL: u32 = 4955;
pub const IDS_CERT_EXTENSION_DUMP_ERROR: u32 = 4956;
pub const IDS_CERTIFICATE_MANAGER_TITLE: u32 = 4957;
pub const IDS_CERT_MANAGER_HARDWARE_BACKED_KEY_FORMAT: u32 = 4958;
pub const IDS_CERT_MANAGER_HARDWARE_BACKED: u32 = 4959;
pub const IDS_CERT_MANAGER_EXTENSION_PROVIDED_FORMAT: u32 = 4960;
pub const IDS_DEV_TOOLS_INFOBAR_LABEL: u32 = 4961;
pub const IDS_DEV_TOOLS_CONFIRM_ADD_FILE_SYSTEM_MESSAGE: u32 = 4962;
pub const IDS_DEV_TOOLS_CONFIRM_ALLOW_BUTTON: u32 = 4963;
pub const IDS_DEV_TOOLS_CONFIRM_DENY_BUTTON: u32 = 4964;
pub const IDS_RELOAD_MENU_NORMAL_RELOAD_ITEM: u32 = 199;
pub const IDS_RELOAD_MENU_HARD_RELOAD_ITEM: u32 = 200;
pub const IDS_RELOAD_MENU_EMPTY_AND_HARD_RELOAD_ITEM: u32 = 201;
pub const IDS_EXIT_FULLSCREEN_MODE: u32 = 4965;
pub const IDS_TAB_SHARING_INFOBAR_SHARING_CURRENT_TAB_LABEL: u32 = 4966;
pub const IDS_TAB_SHARING_INFOBAR_SHARING_ANOTHER_TAB_LABEL: u32 = 4967;
pub const IDS_TAB_SHARING_INFOBAR_SHARE_BUTTON: u32 = 4968;
pub const IDS_TAB_SHARING_INFOBAR_STOP_BUTTON: u32 = 4969;
pub const IDS_TASK_MANAGER_KILL: u32 = 4970;
pub const IDS_TASK_MANAGER_PROCESS_ID_COLUMN: u32 = 4971;
pub const IDS_TASK_MANAGER_GDI_HANDLES_COLUMN: u32 = 4972;
pub const IDS_TASK_MANAGER_USER_HANDLES_COLUMN: u32 = 4973;
pub const IDS_TASK_MANAGER_TASK_COLUMN: u32 = 4974;
pub const IDS_TASK_MANAGER_NACL_DEBUG_STUB_PORT_COLUMN: u32 = 4975;
pub const IDS_TASK_MANAGER_NET_COLUMN: u32 = 4976;
pub const IDS_TASK_MANAGER_CPU_COLUMN: u32 = 4977;
pub const IDS_TASK_MANAGER_START_TIME_COLUMN: u32 = 4978;
pub const IDS_TASK_MANAGER_CPU_TIME_COLUMN: u32 = 4979;
pub const IDS_TASK_MANAGER_MEM_FOOTPRINT_COLUMN: u32 = 4980;
pub const IDS_TASK_MANAGER_SWAPPED_MEM_COLUMN: u32 = 4981;
pub const IDS_TASK_MANAGER_PROFILE_NAME_COLUMN: u32 = 4982;
pub const IDS_TASK_MANAGER_IDLE_WAKEUPS_COLUMN: u32 = 4983;
pub const IDS_TASK_MANAGER_HARD_FAULTS_COLUMN: u32 = 4984;
pub const IDS_TASK_MANAGER_OPEN_FD_COUNT_COLUMN: u32 = 4985;
pub const IDS_TASK_MANAGER_PROCESS_PRIORITY_COLUMN: u32 = 4986;
pub const IDS_TASK_MANAGER_WEBCORE_IMAGE_CACHE_COLUMN: u32 = 4987;
pub const IDS_TASK_MANAGER_WEBCORE_SCRIPTS_CACHE_COLUMN: u32 = 4988;
pub const IDS_TASK_MANAGER_WEBCORE_CSS_CACHE_COLUMN: u32 = 4989;
pub const IDS_TASK_MANAGER_VIDEO_MEMORY_COLUMN: u32 = 4990;
pub const IDS_TASK_MANAGER_SQLITE_MEMORY_USED_COLUMN: u32 = 4991;
pub const IDS_TASK_MANAGER_JAVASCRIPT_MEMORY_ALLOCATED_COLUMN: u32 = 4992;
pub const IDS_TASK_MANAGER_KEEPALIVE_COUNT_COLUMN: u32 = 4993;
pub const IDS_TASK_MANAGER_MEM_CELL_TEXT: u32 = 4994;
pub const IDS_TASK_MANAGER_CACHE_SIZE_CELL_TEXT: u32 = 4995;
pub const IDS_TASK_MANAGER_NA_CELL_TEXT: u32 = 4996;
pub const IDS_TASK_MANAGER_BACKGROUNDED_TEXT: u32 = 4997;
pub const IDS_TASK_MANAGER_FOREGROUNDED_TEXT: u32 = 4998;
pub const IDS_TASK_MANAGER_UNKNOWN_VALUE_TEXT: u32 = 4999;
pub const IDS_TASK_MANAGER_DISABLED_NACL_DBG_TEXT: u32 = 5000;
pub const IDS_TASK_MANAGER_HANDLES_CELL_TEXT: u32 = 5001;
pub const IDS_TASK_MANAGER_WEB_BROWSER_CELL_TEXT: u32 = 5002;
pub const IDS_TASK_MANAGER_EXTENSION_PREFIX: u32 = 5003;
pub const IDS_TASK_MANAGER_EXTENSION_INCOGNITO_PREFIX: u32 = 5004;
pub const IDS_TASK_MANAGER_APP_PREFIX: u32 = 5005;
pub const IDS_TASK_MANAGER_APP_INCOGNITO_PREFIX: u32 = 5006;
pub const IDS_TASK_MANAGER_TAB_PREFIX: u32 = 5007;
pub const IDS_TASK_MANAGER_TAB_INCOGNITO_PREFIX: u32 = 5008;
pub const IDS_TASK_MANAGER_BACKGROUND_APP_PREFIX: u32 = 5009;
pub const IDS_TASK_MANAGER_BACKGROUND_PREFIX: u32 = 5010;
pub const IDS_TASK_MANAGER_PLUGIN_PREFIX: u32 = 5011;
pub const IDS_TASK_MANAGER_PLUGIN_BROKER_PREFIX: u32 = 5012;
pub const IDS_TASK_MANAGER_PRERENDER_PREFIX: u32 = 5013;
pub const IDS_TASK_MANAGER_RENDERER_PREFIX: u32 = 5014;
pub const IDS_TASK_MANAGER_SERVICE_WORKER_PREFIX: u32 = 5015;
pub const IDS_TASK_MANAGER_UNKNOWN_PLUGIN_NAME: u32 = 5016;
pub const IDS_TASK_MANAGER_UTILITY_PREFIX: u32 = 5017;
pub const IDS_TASK_MANAGER_NACL_PREFIX: u32 = 5018;
pub const IDS_TASK_MANAGER_NACL_BROKER_PREFIX: u32 = 5019;
pub const IDS_TASK_MANAGER_GPU_PREFIX: u32 = 5020;
pub const IDS_TASK_MANAGER_PRINT_PREFIX: u32 = 5021;
pub const IDS_TASK_MANAGER_SUBFRAME_PREFIX: u32 = 5022;
pub const IDS_TASK_MANAGER_SUBFRAME_INCOGNITO_PREFIX: u32 = 5023;
pub const IDS_TASK_MANAGER_ARC_PREFIX: u32 = 5024;
pub const IDS_TASK_MANAGER_ARC_PREFIX_BACKGROUND_SERVICE: u32 = 5025;
pub const IDS_TASK_MANAGER_ARC_PREFIX_RECEIVER: u32 = 5026;
pub const IDS_TASK_MANAGER_ARC_SYSTEM: u32 = 5027;
pub const IDS_TASK_MANAGER_LINUX_VM_PREFIX: u32 = 5028;
pub const IDS_UTILITY_PROCESS_FILE_UTILITY_NAME: u32 = 5030;
pub const IDS_UTILITY_PROCESS_PROFILE_IMPORTER_NAME: u32 = 5031;
pub const IDS_UTILITY_PROCESS_WIFI_CREDENTIALS_GETTER_NAME: u32 = 5032;
pub const IDS_UTILITY_PROCESS_IMAGE_WRITER_NAME: u32 = 5033;
pub const IDS_UTILITY_PROCESS_MEDIA_GALLERY_UTILITY_NAME: u32 = 5034;
pub const IDS_UTILITY_PROCESS_NOOP_SERVICE_NAME: u32 = 5035;
pub const IDS_THEME_INSTALL_INFOBAR_LABEL: u32 = 5036;
pub const IDS_THEME_INSTALL_INFOBAR_UNDO_BUTTON: u32 = 5037;
pub const IDS_CRITICAL_NOTIFICATION_RESTART: u32 = 5038;
pub const IDS_EXTENSION_DISABLED_ERROR_LABEL: u32 = 5039;
pub const IDS_EXTENSION_IS_BLACKLISTED: u32 = 5040;
pub const IDS_EXTENSION_DISABLED_REMOTE_INSTALL_ERROR_TITLE: u32 = 5041;
pub const IDS_EXTENSION_DISABLED_ERROR_TITLE: u32 = 5042;
pub const IDS_EXTENSION_BLOCKED_ACTION_BUBBLE_HEADING: u32 = 5043;
pub const IDS_EXTENSION_BLOCKED_ACTION_BUBBLE_OK_BUTTON: u32 = 5044;
pub const IDS_APP_UNINSTALL_PROMPT_TITLE: u32 = 5045;
pub const IDS_NON_PLATFORM_APP_UNINSTALL_PROMPT_HEADING: u32 = 5046;
pub const IDS_ARC_APP_UNINSTALL_PROMPT_DATA_REMOVAL_WARNING: u32 = 5047;
pub const IDS_EXTENSION_UNINSTALL_PROMPT_TITLE: u32 = 5048;
pub const IDS_EXTENSION_CONFIRM_PERMISSIONS: u32 = 5049;
pub const IDS_EXTENSION_DELEGATED_INSTALL_PROMPT_TITLE: u32 = 5050;
pub const IDS_EXTENSION_INSTALL_PROMPT_TITLE: u32 = 5051;
pub const IDS_EXTENSION_UNINSTALL_PROMPT_HEADING: u32 = 5052;
pub const IDS_EXTENSION_PROGRAMMATIC_UNINSTALL_PROMPT_HEADING: u32 = 5053;
pub const IDS_EXTENSION_RE_ENABLE_PROMPT_TITLE: u32 = 5054;
pub const IDS_EXTENSION_PERMISSIONS_PROMPT_TITLE: u32 = 5055;
pub const IDS_EXTENSION_POST_INSTALL_PERMISSIONS_PROMPT_TITLE: u32 = 5056;
pub const IDS_EXTENSION_REMOTE_INSTALL_PROMPT_TITLE: u32 = 5057;
pub const IDS_EXTENSION_REPAIR_PROMPT_TITLE: u32 = 5058;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_TITLE_APP: u32 = 5059;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_TITLE_EXTENSION: u32 = 5060;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_TITLE_THEME: u32 = 5061;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_ACCEPT_BUTTON_EXTENSION: u32 = 5062;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_ACCEPT_BUTTON_APP: u32 = 5063;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_ACCEPT_BUTTON_THEME: u32 = 5064;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_PROMPT_ABORT_BUTTON: u32 = 5065;
pub const IDS_EXTENSION_ALERT_TITLE: u32 = 5066;
pub const IDS_EXTENSION_ALERT_ITEM_EXTERNAL: u32 = 5067;
pub const IDS_EXTENSION_ALERT_ITEM_BLACKLISTED: u32 = 5068;
pub const IDS_APP_ALERT_ITEM_EXTERNAL: u32 = 5069;
pub const IDS_APP_ALERT_ITEM_BLACKLISTED: u32 = 5070;
pub const IDS_EXTENSION_ALERT_ITEM_OK: u32 = 5071;
pub const IDS_EXTENSION_ALERT_ITEM_DETAILS: u32 = 5072;
pub const IDS_EXTENSION_PROMPT_APP_CONNECT_FROM_INCOGNITO: u32 = 5073;
pub const IDS_EXTENSION_PROMPT_EXTENSION_CONNECT_FROM_INCOGNITO: u32 = 5074;
pub const IDS_EXTENSION_PROMPT_WILL_HAVE_ACCESS_TO: u32 = 5075;
pub const IDS_EXTENSION_PROMPT_WILL_NOW_HAVE_ACCESS_TO: u32 = 5076;
pub const IDS_EXTENSION_PROMPT_WANTS_ACCESS_TO: u32 = 5077;
pub const IDS_EXTENSION_PROMPT_CAN_ACCESS: u32 = 5078;
pub const IDS_EXTENSION_NO_SPECIAL_PERMISSIONS: u32 = 5079;
pub const IDS_EXTENSION_PERMISSION_LINE: u32 = 5080;
pub const IDS_EXTENSION_RATING_COUNT: u32 = 5081;
pub const IDS_EXTENSION_PROMPT_RATING_ACCESSIBLE_TEXT: u32 = 5082;
pub const IDS_EXTENSION_PROMPT_NO_RATINGS_ACCESSIBLE_TEXT: u32 = 5083;
pub const IDS_EXTENSION_USER_COUNT: u32 = 5084;
pub const IDS_EXTENSION_PROMPT_STORE_LINK: u32 = 5085;
pub const IDS_EXTENSION_PROMPT_RETAINED_FILES: u32 = 5086;
pub const IDS_EXTENSION_PROMPT_RETAINED_DEVICES: u32 = 5087;
pub const IDS_EXTENSION_PROMPT_WARNING_FULL_ACCESS: u32 = 5088;
pub const IDS_EXTENSION_PROMPT_WARNING_ALL_HOSTS: u32 = 5089;
pub const IDS_EXTENSION_PROMPT_WARNING_CURRENT_HOST: u32 = 5090;
pub const IDS_EXTENSION_PROMPT_WARNING_ALL_HOSTS_READ_ONLY: u32 = 5091;
pub const IDS_EXTENSION_PROMPT_WARNING_AUDIO_CAPTURE: u32 = 5092;
pub const IDS_EXTENSION_PROMPT_WARNING_VIDEO_CAPTURE: u32 = 5093;
pub const IDS_EXTENSION_PROMPT_WARNING_AUDIO_AND_VIDEO_CAPTURE: u32 = 5094;
pub const IDS_EXTENSION_PROMPT_WARNING_BLUETOOTH: u32 = 5095;
pub const IDS_EXTENSION_PROMPT_WARNING_BLUETOOTH_DEVICES: u32 = 5096;
pub const IDS_EXTENSION_PROMPT_WARNING_BLUETOOTH_PRIVATE: u32 = 5097;
pub const IDS_EXTENSION_PROMPT_WARNING_BLUETOOTH_SERIAL: u32 = 5098;
pub const IDS_EXTENSION_PROMPT_WARNING_BOOKMARKS: u32 = 5099;
pub const IDS_EXTENSION_PROMPT_WARNING_CLIPBOARD: u32 = 5100;
pub const IDS_EXTENSION_PROMPT_WARNING_CLIPBOARD_READWRITE: u32 = 5101;
pub const IDS_EXTENSION_PROMPT_WARNING_CLIPBOARD_WRITE: u32 = 5102;
pub const IDS_EXTENSION_PROMPT_WARNING_DEBUGGER: u32 = 5103;
pub const IDS_EXTENSION_PROMPT_WARNING_DECLARATIVE_WEB_REQUEST: u32 = 5104;
pub const IDS_EXTENSION_PROMPT_WARNING_DECLARATIVE_NET_REQUEST: u32 = 5105;
pub const IDS_EXTENSION_PROMPT_WARNING_DOCUMENT_SCAN: u32 = 5106;
pub const IDS_EXTENSION_PROMPT_WARNING_ENTERPRISE_HARDWARE_PLATFORM: u32 = 5107;
pub const IDS_EXTENSION_PROMPT_WARNING_FAVICON: u32 = 5108;
pub const IDS_EXTENSION_PROMPT_WARNING_GEOLOCATION: u32 = 5109;
pub const IDS_EXTENSION_PROMPT_WARNING_HISTORY_READ: u32 = 5110;
pub const IDS_EXTENSION_PROMPT_WARNING_HISTORY_READ_AND_SESSIONS: u32 = 5111;
pub const IDS_EXTENSION_PROMPT_WARNING_HISTORY_WRITE: u32 = 5112;
pub const IDS_EXTENSION_PROMPT_WARNING_HISTORY_WRITE_AND_SESSIONS: u32 = 5113;
pub const IDS_EXTENSION_PROMPT_WARNING_HOME_PAGE_SETTING_OVERRIDE: u32 = 5114;
pub const IDS_EXTENSION_PROMPT_WARNING_1_HOST: u32 = 5115;
pub const IDS_EXTENSION_PROMPT_WARNING_1_HOST_READ_ONLY: u32 = 5116;
pub const IDS_EXTENSION_PROMPT_WARNING_2_HOSTS: u32 = 5117;
pub const IDS_EXTENSION_PROMPT_WARNING_2_HOSTS_READ_ONLY: u32 = 5118;
pub const IDS_EXTENSION_PROMPT_WARNING_3_HOSTS: u32 = 5119;
pub const IDS_EXTENSION_PROMPT_WARNING_3_HOSTS_READ_ONLY: u32 = 5120;
pub const IDS_EXTENSION_PROMPT_WARNING_HOSTS_LIST: u32 = 5121;
pub const IDS_EXTENSION_PROMPT_WARNING_HOSTS_LIST_READ_ONLY: u32 = 5122;
pub const IDS_EXTENSION_PROMPT_WARNING_HOST_AND_SUBDOMAIN: u32 = 5123;
pub const IDS_EXTENSION_PROMPT_WARNING_HOST_AND_SUBDOMAIN_LIST: u32 = 5124;
pub const IDS_EXTENSION_PROMPT_WARNING_INPUT: u32 = 5125;
pub const IDS_EXTENSION_PROMPT_WARNING_LOGIN_SCREEN_UI: u32 = 5126;
pub const IDS_EXTENSION_PROMPT_WARNING_MANAGEMENT: u32 = 5127;
pub const IDS_EXTENSION_PROMPT_WARNING_MDNS: u32 = 5128;
pub const IDS_EXTENSION_PROMPT_WARNING_NETWORK_STATE: u32 = 5129;
pub const IDS_EXTENSION_PROMPT_WARNING_NETWORKING_CONFIG: u32 = 5130;
pub const IDS_EXTENSION_PROMPT_WARNING_NETWORKING_PRIVATE: u32 = 5131;
pub const IDS_EXTENSION_PROMPT_WARNING_SEARCH_SETTINGS_OVERRIDE: u32 = 5132;
pub const IDS_EXTENSION_PROMPT_WARNING_SERIAL: u32 = 5133;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_ANY_HOST: u32 = 5134;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_HOSTS_IN_DOMAIN: u32 = 5135;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_HOSTS_IN_DOMAINS: u32 = 5136;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_SPECIFIC_HOST: u32 = 5137;
pub const IDS_EXTENSION_PROMPT_WARNING_SOCKET_SPECIFIC_HOSTS: u32 = 5138;
pub const IDS_EXTENSION_PROMPT_WARNING_START_PAGE_SETTING_OVERRIDE: u32 = 5139;
pub const IDS_EXTENSION_PROMPT_WARNING_SYSTEM_STORAGE: u32 = 5140;
pub const IDS_EXTENSION_PROMPT_WARNING_TOPSITES: u32 = 5141;
pub const IDS_EXTENSION_PROMPT_WARNING_TTS_ENGINE: u32 = 5142;
pub const IDS_EXTENSION_PROMPT_WARNING_U2F_DEVICES: u32 = 5143;
pub const IDS_EXTENSION_PROMPT_WARNING_NOTIFICATIONS: u32 = 5144;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE: u32 = 5145;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_LIST: u32 = 5146;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_LIST_ITEM_UNKNOWN_PRODUCT: u32 = 5147;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_LIST_ITEM_UNKNOWN_VENDOR: u32 = 5148;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_UNKNOWN_PRODUCT: u32 = 5149;
pub const IDS_EXTENSION_PROMPT_WARNING_USB_DEVICE_UNKNOWN_VENDOR: u32 = 5150;
pub const IDS_EXTENSION_PROMPT_WARNING_VPN: u32 = 5151;
pub const IDS_EXTENSION_PROMPT_WARNING_WEB_CONNECTABLE: u32 = 5152;
pub const IDS_EXTENSION_PROMPT_WARNING_CONTENT_SETTINGS: u32 = 5153;
pub const IDS_EXTENSION_PROMPT_WARNING_PRIVACY: u32 = 5154;
pub const IDS_EXTENSION_PROMPT_WARNING_SIGNED_IN_DEVICES: u32 = 5155;
pub const IDS_EXTENSION_PROMPT_WARNING_DOWNLOADS: u32 = 5156;
pub const IDS_EXTENSION_PROMPT_WARNING_DOWNLOADS_OPEN: u32 = 5157;
pub const IDS_EXTENSION_PROMPT_WARNING_IDENTITY_EMAIL: u32 = 5158;
pub const IDS_EXTENSION_PROMPT_WARNING_WALLPAPER: u32 = 5159;
pub const IDS_EXTENSION_PROMPT_WARNING_FILE_SYSTEM_DIRECTORY: u32 = 5160;
pub const IDS_EXTENSION_PROMPT_WARNING_FILE_SYSTEM_WRITE_DIRECTORY: u32 = 5161;
pub const IDS_EXTENSION_PROMPT_WARNING_MEDIA_GALLERIES_READ: u32 = 5162;
pub const IDS_EXTENSION_PROMPT_WARNING_MEDIA_GALLERIES_READ_WRITE: u32 = 5163;
pub const IDS_EXTENSION_PROMPT_WARNING_MEDIA_GALLERIES_READ_DELETE: u32 = 5164;
pub const IDS_EXTENSION_PROMPT_WARNING_MEDIA_GALLERIES_READ_WRITE_DELETE: u32 = 5165;
pub const IDS_EXTENSION_PROMPT_WARNING_SYNCFILESYSTEM: u32 = 5166;
pub const IDS_EXTENSION_PROMPT_WARNING_MUSIC_MANAGER_PRIVATE: u32 = 5167;
pub const IDS_EXTENSION_PROMPT_WARNING_NATIVE_MESSAGING: u32 = 5168;
pub const IDS_EXTENSION_PROMPT_WARNING_SCREENLOCK_PRIVATE: u32 = 5169;
pub const IDS_EXTENSION_PROMPT_WARNING_OVERRIDE_BOOKMARKS_UI: u32 = 5170;
pub const IDS_EXTENSION_PROMPT_WARNING_ACTIVITY_LOG_PRIVATE: u32 = 5171;
pub const IDS_EXTENSION_PROMPT_WARNING_DESKTOP_CAPTURE: u32 = 5172;
pub const IDS_EXTENSION_PROMPT_WARNING_ACCESSIBILITY_FEATURES_MODIFY: u32 = 5173;
pub const IDS_EXTENSION_PROMPT_WARNING_ACCESSIBILITY_FEATURES_READ: u32 = 5174;
pub const IDS_EXTENSION_PROMPT_WARNING_ACCESSIBILITY_FEATURES_READ_MODIFY: u32 = 5175;
pub const IDS_EXTENSION_PROMPT_WARNING_PLATFORMKEYS: u32 = 5176;
pub const IDS_EXTENSION_PROMPT_WARNING_CERTIFICATEPROVIDER: u32 = 5177;
pub const IDS_EXTENSION_PROMPT_WARNING_SETTINGS_PRIVATE: u32 = 5178;
pub const IDS_EXTENSION_PROMPT_WARNING_AUTOFILL_PRIVATE: u32 = 5179;
pub const IDS_EXTENSION_PROMPT_WARNING_PASSWORDS_PRIVATE: u32 = 5180;
pub const IDS_EXTENSION_PROMPT_WARNING_USERS_PRIVATE: u32 = 5181;
pub const IDS_EXTENSION_PROMPT_WARNING_DISPLAY_SOURCE: u32 = 5182;
pub const IDS_EXTENSION_PROMPT_WARNING_NEW_TAB_PAGE_OVERRIDE: u32 = 5183;
pub const IDS_EXTENSION_CANT_DOWNGRADE_VERSION: u32 = 5184;
pub const IDS_APP_CANT_DOWNGRADE_VERSION: u32 = 5185;
pub const IDS_EXTENSION_MOVE_DIRECTORY_TO_PROFILE_FAILED: u32 = 5188;
pub const IDS_EXTENSION_INSTALL_NOT_ENABLED: u32 = 5189;
pub const IDS_EXTENSION_INSTALL_INCORRECT_APP_CONTENT_TYPE: u32 = 5190;
pub const IDS_EXTENSION_INSTALL_INCORRECT_INSTALL_HOST: u32 = 5191;
pub const IDS_EXTENSION_INSTALL_UNEXPECTED_ID: u32 = 5192;
pub const IDS_EXTENSION_INSTALL_DISALLOWED_ON_SITE: u32 = 5193;
pub const IDS_EXTENSION_INSTALL_UNEXPECTED_VERSION: u32 = 5194;
pub const IDS_EXTENSION_INSTALL_DEPENDENCY_OLD_VERSION: u32 = 5195;
pub const IDS_EXTENSION_INSTALL_DEPENDENCY_NOT_SHARED_MODULE: u32 = 5196;
pub const IDS_EXTENSION_INSTALL_DEPENDENCY_NOT_WHITELISTED: u32 = 5197;
pub const IDS_EXTENSION_INSTALL_GALLERY_ONLY: u32 = 5198;
pub const IDS_EXTENSION_INSTALL_KIOSK_MODE_ONLY: u32 = 5199;
pub const IDS_EXTENSION_OVERLAPPING_WEB_EXTENT: u32 = 5200;
pub const IDS_EXTENSION_INVALID_IMAGE_PATH: u32 = 5201;
pub const IDS_EXTENSION_LOAD_ICON_FOR_PAGE_ACTION_FAILED: u32 = 5202;
pub const IDS_EXTENSION_LOAD_ICON_FOR_BROWSER_ACTION_FAILED: u32 = 5203;
pub const IDS_EXTENSION_INSTALLED_PAGE_ACTION_INFO: u32 = 5207;
pub const IDS_EXTENSION_INSTALLED_PAGE_ACTION_INFO_WITH_SHORTCUT: u32 = 5208;
pub const IDS_EXTENSION_INSTALLED_BROWSER_ACTION_INFO: u32 = 5209;
pub const IDS_EXTENSION_INSTALLED_BROWSER_ACTION_INFO_WITH_SHORTCUT: u32 = 5210;
pub const IDS_EXTENSION_INSTALLED_OMNIBOX_KEYWORD_INFO: u32 = 5211;
pub const IDS_EXTENSION_INSTALLED_MANAGE_INFO: u32 = 5212;
pub const IDS_EXTENSION_INSTALLED_MANAGE_SHORTCUTS: u32 = 5213;
pub const IDS_EXTENSION_INSTALLED_SYNC_PROMO_NEW: u32 = 5214;
pub const IDS_EXTENSION_INSTALLED_DICE_PROMO_SIGNIN_MESSAGE: u32 = 5215;
pub const IDS_EXTENSION_INSTALLED_DICE_PROMO_SYNC_MESSAGE: u32 = 5216;
pub const IDS_EXTENSIONS_DIRECTORY_CONFIRMATION_DIALOG_TITLE: u32 = 5217;
pub const IDS_EXTENSIONS_DIRECTORY_CONFIRMATION_DIALOG_MESSAGE_READ_ONLY: u32 = 5218;
pub const IDS_EXTENSIONS_DIRECTORY_CONFIRMATION_DIALOG_MESSAGE_WRITABLE: u32 = 5219;
pub const IDS_EXTENSIONS_LOAD_ERROR_ALERT_HEADING: u32 = 5220;
pub const IDS_EXTENSIONS_LOAD_ERROR_MESSAGE: u32 = 5221;
pub const IDS_EXTENSIONS_WANTS_ACCESS_TO_SITE: u32 = 5222;
pub const IDS_EXTENSIONS_HAS_ACCESS_TO_SITE: u32 = 5223;
pub const IDS_EXTENSIONS_CONTEXT_MENU_CANT_ACCESS_PAGE: u32 = 5224;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS: u32 = 5225;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS_RUN_ON_CLICK: u32 = 5226;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS_RUN_ON_SITE: u32 = 5227;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS_RUN_ON_ALL_SITES: u32 = 5228;
pub const IDS_EXTENSIONS_CONTEXT_MENU_PAGE_ACCESS_LEARN_MORE: u32 = 5229;
pub const IDS_EXTENSIONS_OPTIONS_MENU_ITEM: u32 = 5230;
pub const IDS_EXTENSIONS_INSTALLED_BY_ADMIN: u32 = 5231;
pub const IDS_EXTENSIONS_DISABLE: u32 = 5232;
pub const IDS_EXTENSIONS_HIDE_BUTTON: u32 = 5233;
pub const IDS_EXTENSIONS_KEEP_BUTTON_IN_TOOLBAR: u32 = 5234;
pub const IDS_EXTENSIONS_SHOW_BUTTON_IN_TOOLBAR: u32 = 5235;
pub const IDS_EXTENSIONS_PIN_TO_TOOLBAR: u32 = 5236;
pub const IDS_EXTENSIONS_UNPIN_FROM_TOOLBAR: u32 = 5237;
pub const IDS_MANAGE_EXTENSION: u32 = 5238;
pub const IDS_EXTENSION_ACTION_INSPECT_POPUP: u32 = 5239;
pub const IDS_EXTENSIONS_LOCKED_SUPERVISED_USER: u32 = 5240;
pub const IDS_EXTENSIONS_INSTALLED_BY_CHILD_CUSTODIAN: u32 = 5241;
pub const IDS_EXTENSIONS_INSTALLED_BY_SUPERVISED_USER_CUSTODIAN: u32 = 5242;
pub const IDS_EXTENSION_LOAD_FROM_DIRECTORY: u32 = 5243;
pub const IDS_EXTENSION_COMMANDS_GENERIC_ACTIVATE: u32 = 5244;
pub const IDS_EXTENSION_PACK_DIALOG_HEADING: u32 = 5245;
pub const IDS_EXTENSION_PACK_DIALOG_SELECT_KEY: u32 = 5246;
pub const IDS_EXTENSION_PACK_DIALOG_KEY_FILE_TYPE_DESCRIPTION: u32 = 5247;
pub const IDS_EXTENSION_PACK_DIALOG_ERROR_ROOT_REQUIRED: u32 = 5248;
pub const IDS_EXTENSION_PACK_DIALOG_ERROR_ROOT_INVALID: u32 = 5249;
pub const IDS_EXTENSION_PACK_DIALOG_ERROR_KEY_INVALID: u32 = 5250;
pub const IDS_EXTENSION_PACK_DIALOG_SUCCESS_BODY_NEW: u32 = 5251;
pub const IDS_EXTENSION_PACK_DIALOG_SUCCESS_BODY_UPDATE: u32 = 5252;
pub const IDS_EXTENSION_PROMPT_INSTALL_BUTTON: u32 = 5253;
pub const IDS_EXTENSION_INSTALL_PROMPT_ACCEPT_BUTTON_EXTENSION: u32 = 5254;
pub const IDS_EXTENSION_INSTALL_PROMPT_ACCEPT_BUTTON_APP: u32 = 5255;
pub const IDS_EXTENSION_INSTALL_PROMPT_ACCEPT_BUTTON_THEME: u32 = 5256;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_BUTTON: u32 = 5257;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_REPORT_ABUSE: u32 = 5258;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_REPORT_ABUSE_FROM_EXTENSION: u32 = 5259;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_TITLE: u32 = 5260;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_APP_BUTTON: u32 = 5261;
pub const IDS_EXTENSION_PROMPT_UNINSTALL_TRIGGERED_BY_EXTENSION: u32 = 5262;
pub const IDS_EXTENSION_PROMPT_RE_ENABLE_BUTTON: u32 = 5263;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_BUTTON: u32 = 5264;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_ACCEPT_BUTTON: u32 = 5265;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_ABORT_BUTTON: u32 = 5266;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_CLEAR_RETAINED_FILES_BUTTON: u32 = 5267;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_CLEAR_RETAINED_DEVICES_BUTTON: u32 = 5268;
pub const IDS_EXTENSION_PROMPT_PERMISSIONS_CLEAR_RETAINED_FILES_AND_DEVICES_BUTTON: u32 = 5269;
pub const IDS_EXTENSION_PROMPT_REMOTE_INSTALL_BUTTON_EXTENSION: u32 = 5270;
pub const IDS_EXTENSION_PROMPT_REMOTE_INSTALL_BUTTON_APP: u32 = 5271;
pub const IDS_EXTENSION_PROMPT_REPAIR_BUTTON_EXTENSION: u32 = 5272;
pub const IDS_EXTENSION_PROMPT_REPAIR_BUTTON_APP: u32 = 5273;
pub const IDS_EXTENSION_WEB_STORE_TITLE: u32 = 5274;
pub const IDS_EXTENSION_WEB_STORE_TITLE_SHORT: u32 = 223;
pub const IDS_EXTENSIONS_SHOW_DETAILS: u32 = 5275;
pub const IDS_EXTENSIONS_HIDE_DETAILS: u32 = 5276;
pub const IDS_WEBSTORE_DOWNLOAD_ACCESS_DENIED: u32 = 5277;
pub const IDS_EXTENSION_WARNINGS_WRENCH_MENU_ITEM: u32 = 5278;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_EXTENSION: u32 = 5279;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_APP: u32 = 5280;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_THEME: u32 = 5281;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_BUBBLE_TITLE: u32 = 5282;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_BUBBLE_HEADING_APP: u32 = 5283;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_BUBBLE_HEADING_EXTENSION: u32 = 5284;
pub const IDS_EXTENSION_EXTERNAL_INSTALL_ALERT_BUBBLE_HEADING_THEME: u32 = 5285;
pub const IDS_EXTENSIONS_UNSUPPORTED_DISABLED_TITLE: u32 = 5286;
pub const IDS_EXTENSIONS_DISABLED_AND_N_MORE: u32 = 5287;
pub const IDS_EXTENSIONS_UNSUPPORTED_DISABLED_BUTTON: u32 = 5288;
pub const IDS_EXTENSIONS_ADDED_WITHOUT_KNOWLEDGE: u32 = 5289;
pub const IDS_EXTENSIONS_DISABLE_DEVELOPER_MODE_TITLE: u32 = 5290;
pub const IDS_EXTENSIONS_DISABLE_DEVELOPER_MODE_BODY: u32 = 5291;
pub const IDS_EXTENSIONS_MENU_TITLE: u32 = 5292;
pub const IDS_EXTENSIONS_MENU_CONTEXT_MENU_TOOLTIP: u32 = 5293;
pub const IDS_EXTENSIONS_MENU_ACCESSING_SITE_DATA: u32 = 5294;
pub const IDS_EXTENSIONS_MENU_WANTS_TO_ACCESS_SITE_DATA: u32 = 5295;
pub const IDS_EXTENSIONS_MENU_CANT_ACCESS_SITE_DATA: u32 = 5296;
pub const IDS_EXTENSIONS_SETTINGS_API_TITLE_HOME_PAGE_BUBBLE: u32 = 5297;
pub const IDS_EXTENSIONS_SETTINGS_API_TITLE_STARTUP_PAGES_BUBBLE: u32 = 5298;
pub const IDS_EXTENSIONS_SETTINGS_API_TITLE_SEARCH_ENGINE_BUBBLE: u32 = 5299;
pub const IDS_EXTENSIONS_NTP_CONTROLLED_TITLE_HOME_PAGE_BUBBLE: u32 = 5300;
pub const IDS_EXTENSIONS_PROXY_CONTROLLED_TITLE_HOME_PAGE_BUBBLE: u32 = 5301;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_SEARCH_ENGINE_SPECIFIC: u32 = 5302;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_SEARCH_ENGINE: u32 = 5303;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_HOME_PAGE_SPECIFIC: u32 = 5304;
pub const IDS_EXTENSIONS_SETTINGS_API_FIRST_LINE_HOME_PAGE: u32 = 5305;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_SEARCH_ENGINE: u32 = 5306;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_HOME_PAGE: u32 = 5307;
pub const IDS_EXTENSIONS_SETTINGS_API_SECOND_LINE_HOME_AND_SEARCH: u32 = 5308;
pub const IDS_EXTENSIONS_NTP_CONTROLLED_FIRST_LINE: u32 = 5309;
pub const IDS_EXTENSIONS_PROXY_CONTROLLED_FIRST_LINE: u32 = 5310;
pub const IDS_EXTENSIONS_PROXY_CONTROLLED_FIRST_LINE_EXTENSION_SPECIFIC: u32 = 5311;
pub const IDS_EXTENSIONS_SETTINGS_API_THIRD_LINE_CONFIRMATION: u32 = 5312;
pub const IDS_EXTENSION_CONTROLLED_RESTORE_SETTINGS: u32 = 5313;
pub const IDS_EXTENSION_CONTROLLED_KEEP_CHANGES: u32 = 5314;
pub const IDS_HOSTED_APPMENU_TOOLTIP: u32 = 5315;
pub const IDS_COMPONENTS_TITLE: u32 = 5316;
pub const IDS_COMPONENTS_VERSION: u32 = 5317;
pub const IDS_COMPONENTS_NONE_INSTALLED: u32 = 5318;
pub const IDS_COMPONENTS_NO_COMPONENTS: u32 = 5319;
pub const IDS_COMPONENTS_CHECK_FOR_UPDATE: u32 = 5320;
pub const IDS_COMPONENTS_STATUS_LABEL: u32 = 5321;
pub const IDS_COMPONENTS_CHECKING_LABEL: u32 = 5322;
pub const IDS_COMPONENTS_SVC_STATUS_NEW: u32 = 5323;
pub const IDS_COMPONENTS_SVC_STATUS_CHECKING: u32 = 5324;
pub const IDS_COMPONENTS_SVC_STATUS_UPDATE: u32 = 5325;
pub const IDS_COMPONENTS_SVC_STATUS_DNL_DIFF: u32 = 5326;
pub const IDS_COMPONENTS_SVC_STATUS_DNL: u32 = 5327;
pub const IDS_COMPONENTS_SVC_STATUS_DOWNLOADED: u32 = 5328;
pub const IDS_COMPONENTS_SVC_STATUS_UPDT_DIFF: u32 = 5329;
pub const IDS_COMPONENTS_SVC_STATUS_UPDATING: u32 = 5330;
pub const IDS_COMPONENTS_SVC_STATUS_UPDATED: u32 = 5331;
pub const IDS_COMPONENTS_SVC_STATUS_UPTODATE: u32 = 5332;
pub const IDS_COMPONENTS_SVC_STATUS_UPDATE_ERROR: u32 = 5333;
pub const IDS_COMPONENTS_UNKNOWN: u32 = 5334;
pub const IDS_COMPONENTS_EVT_STATUS_STARTED: u32 = 5335;
pub const IDS_COMPONENTS_EVT_STATUS_SLEEPING: u32 = 5336;
pub const IDS_COMPONENTS_EVT_STATUS_FOUND: u32 = 5337;
pub const IDS_COMPONENTS_EVT_STATUS_READY: u32 = 5338;
pub const IDS_COMPONENTS_EVT_STATUS_UPDATED: u32 = 5339;
pub const IDS_COMPONENTS_EVT_STATUS_NOTUPDATED: u32 = 5340;
pub const IDS_COMPONENTS_EVT_STATUS_UPDATE_ERROR: u32 = 5341;
pub const IDS_COMPONENTS_EVT_STATUS_DOWNLOADING: u32 = 5342;
pub const IDS_PLUGINS_DISABLED_PLUGIN: u32 = 5343;
pub const IDS_PASSWORD_MANAGER_ACCOUNT_CHOOSER_TITLE: u32 = 5344;
pub const IDS_PASSWORD_MANAGER_CONFIRM_SAVED_TITLE: u32 = 5345;
pub const IDS_PASSWORD_GENERATION_SUGGESTION: u32 = 5346;
pub const IDS_PASSWORD_GENERATION_EDITING_SUGGESTION: u32 = 5347;
pub const IDS_SAVE_PASSWORD: u32 = 5348;
pub const IDS_SAVE_ACCOUNT: u32 = 5349;
pub const IDS_UPDATE_PASSWORD: u32 = 5350;
pub const IDS_SAVE_PASSWORD_DIFFERENT_DOMAINS_TITLE: u32 = 5351;
pub const IDS_UPDATE_PASSWORD_DIFFERENT_DOMAINS_TITLE: u32 = 5352;
pub const IDS_SAVE_PASSWORD_FOOTER: u32 = 5353;
pub const IDS_PASSWORD_MANAGER_ACCOUNT_CHOOSER_SIGN_IN: u32 = 5354;
pub const IDS_PASSWORD_MANAGER_MANAGE_PASSWORDS_BUTTON: u32 = 5355;
pub const IDS_PASSWORD_MANAGER_SIGNIN_PROMO_SIGN_IN: u32 = 5356;
pub const IDS_PASSWORD_MANAGER_SIGNIN_PROMO_LABEL: u32 = 5357;
pub const IDS_PASSWORD_MANAGER_DICE_PROMO_SIGNIN_MESSAGE: u32 = 5358;
pub const IDS_PASSWORD_MANAGER_DICE_PROMO_SYNC_MESSAGE: u32 = 5359;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TITLE: u32 = 5360;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TITLE_V2: u32 = 5361;
pub const IDS_PASSWORD_MANAGER_DESKTOP_TO_IOS_PROMO_TITLE_V3: u32 = 5362;
pub const IDS_DESKTOP_TO_IOS_PROMO_SEND_TO_PHONE: u32 = 5363;
pub const IDS_DESKTOP_TO_IOS_PROMO_NO_THANKS: u32 = 5364;
pub const IDS_PREVIEWS_INFOBAR_TIMESTAMP_MINUTES: u32 = 5365;
pub const IDS_PREVIEWS_INFOBAR_TIMESTAMP_ONE_HOUR: u32 = 5366;
pub const IDS_PREVIEWS_INFOBAR_TIMESTAMP_HOURS: u32 = 5367;
pub const IDS_PREVIEWS_INFOBAR_TIMESTAMP_UPDATED_NOW: u32 = 5368;
pub const IDS_PAGE_CAPPING_TITLE: u32 = 5369;
pub const IDS_PAGE_CAPPING_STOPPED_TITLE: u32 = 5370;
pub const IDS_PAGE_CAPPING_CONTINUE_MESSAGE: u32 = 5371;
pub const IDS_PAGE_CAPPING_STOP_MESSAGE: u32 = 5372;
pub const IDS_LITE_PAGE_PREVIEWS_MESSAGE: u32 = 5373;
pub const IDS_LITE_PAGE_PREVIEWS_SETTINGS_LINK: u32 = 5374;
pub const IDS_WEBRTC_LOGS_TITLE: u32 = 5375;
pub const IDS_WEBRTC_TEXT_LOGS_LOG_COUNT_BANNER_FORMAT: u32 = 5376;
pub const IDS_WEBRTC_EVENT_LOGS_LOG_COUNT_BANNER_FORMAT: u32 = 5377;
pub const IDS_WEBRTC_LOGS_LOG_HEADER_FORMAT: u32 = 5378;
pub const IDS_WEBRTC_LOGS_LOG_LOCAL_FILE_LABEL_FORMAT: u32 = 5379;
pub const IDS_WEBRTC_LOGS_NO_LOCAL_LOG_FILE_MESSAGE: u32 = 5380;
pub const IDS_WEBRTC_LOGS_LOG_UPLOAD_TIME_FORMAT: u32 = 5381;
pub const IDS_WEBRTC_LOGS_LOG_FAILED_UPLOAD_TIME_FORMAT: u32 = 5382;
pub const IDS_WEBRTC_LOGS_LOG_REPORT_ID_FORMAT: u32 = 5383;
pub const IDS_WEBRTC_LOGS_BUG_LINK_LABEL: u32 = 5384;
pub const IDS_WEBRTC_LOGS_LOG_PENDING_MESSAGE: u32 = 5385;
pub const IDS_WEBRTC_LOGS_LOG_ACTIVELY_UPLOADED_MESSAGE: u32 = 5386;
pub const IDS_WEBRTC_LOGS_LOG_NOT_UPLOADED_MESSAGE: u32 = 5387;
pub const IDS_WEBRTC_LOGS_EVENT_LOG_LOCAL_LOG_ID: u32 = 5388;
pub const IDS_WEBRTC_LOGS_NO_TEXT_LOGS_MESSAGE: u32 = 5389;
pub const IDS_WEBRTC_LOGS_NO_EVENT_LOGS_MESSAGE: u32 = 5390;
pub const IDS_PLUGIN_HIDE: u32 = 5391;
pub const IDS_PLUGIN_UPDATE: u32 = 5392;
pub const IDS_PLUGIN_BLOCKED: u32 = 5393;
pub const IDS_PLUGIN_BLOCKED_BY_POLICY: u32 = 5394;
pub const IDS_PLUGIN_BLOCKED_NO_LOADING: u32 = 5395;
pub const IDS_PLUGIN_OUTDATED: u32 = 5397;
pub const IDS_PLUGIN_NOT_AUTHORIZED: u32 = 5398;
pub const IDS_PLUGIN_DOWNLOADING: u32 = 5399;
pub const IDS_PLUGIN_DOWNLOAD_ERROR: u32 = 5400;
pub const IDS_PLUGIN_DOWNLOAD_ERROR_SHORT: u32 = 5401;
pub const IDS_PLUGIN_UPDATING: u32 = 5402;
pub const IDS_PLUGIN_DISABLED: u32 = 5403;
pub const IDS_PLUGIN_PREFER_HTML_BY_DEFAULT: u32 = 5404;
pub const IDS_SESSION_CRASHED_BUBBLE_TITLE: u32 = 5405;
pub const IDS_SESSION_CRASHED_BUBBLE_UMA_LINK_TEXT: u32 = 5406;
pub const IDS_BAD_FLAGS_WARNING_MESSAGE: u32 = 5407;
pub const IDS_BAD_FEATURES_WARNING_MESSAGE: u32 = 5408;
pub const IDS_PEPPER_BROKER_MESSAGE: u32 = 5409;
pub const IDS_PEPPER_BROKER_ALLOW_BUTTON: u32 = 5410;
pub const IDS_PEPPER_BROKER_DENY_BUTTON: u32 = 5411;
pub const IDS_BLOCKED_PPAPI_BROKER_TITLE: u32 = 5412;
pub const IDS_ALLOWED_PPAPI_BROKER_TITLE: u32 = 5413;
pub const IDS_BLOCKED_PPAPI_BROKER_MESSAGE: u32 = 5414;
pub const IDS_ALLOWED_PPAPI_BROKER_MESSAGE: u32 = 5415;
pub const IDS_BLOCKED_PPAPI_BROKER_UNBLOCK: u32 = 5416;
pub const IDS_BLOCKED_PPAPI_BROKER_NO_ACTION: u32 = 5417;
pub const IDS_ALLOWED_PPAPI_BROKER_NO_ACTION: u32 = 5418;
pub const IDS_ALLOWED_PPAPI_BROKER_BLOCK: u32 = 5419;
pub const IDS_BLOCKED_DISPLAYING_INSECURE_CONTENT_TITLE: u32 = 5420;
pub const IDS_BLOCKED_DISPLAYING_INSECURE_CONTENT: u32 = 5421;
pub const IDS_ALLOW_INSECURE_CONTENT_BUTTON: u32 = 5422;
pub const IDS_ADD_TO_SHELF_INFOBAR_TITLE: u32 = 5423;
pub const IDS_ADD_TO_SHELF_INFOBAR_ADD_BUTTON: u32 = 5424;
pub const IDS_ABOUT_SYS_TITLE: u32 = 5425;
pub const IDS_ABOUT_SYS_DESC: u32 = 5426;
pub const IDS_ABOUT_SYS_TABLE_TITLE: u32 = 5427;
pub const IDS_ABOUT_SYS_LOG_FILE_TABLE_TITLE: u32 = 5428;
pub const IDS_ABOUT_SYS_EXPAND_ALL: u32 = 5429;
pub const IDS_ABOUT_SYS_COLLAPSE_ALL: u32 = 5430;
pub const IDS_ABOUT_SYS_EXPAND: u32 = 5431;
pub const IDS_ABOUT_SYS_COLLAPSE: u32 = 5432;
pub const IDS_ABOUT_SYS_PARSE_ERROR: u32 = 5433;
pub const IDS_ABOUT_BROWSER_SWITCH_TITLE: u32 = 5434;
pub const IDS_ABOUT_BROWSER_SWITCH_OPENING_TITLE_UNKNOWN_BROWSER: u32 = 5435;
pub const IDS_ABOUT_BROWSER_SWITCH_OPENING_TITLE_KNOWN_BROWSER: u32 = 5436;
pub const IDS_ABOUT_BROWSER_SWITCH_ERROR_TITLE_UNKNOWN_BROWSER: u32 = 5437;
pub const IDS_ABOUT_BROWSER_SWITCH_ERROR_TITLE_KNOWN_BROWSER: u32 = 5438;
pub const IDS_ABOUT_BROWSER_SWITCH_COUNTDOWN_TITLE_UNKNOWN_BROWSER: u32 = 5439;
pub const IDS_ABOUT_BROWSER_SWITCH_COUNTDOWN_TITLE_KNOWN_BROWSER: u32 = 5440;
pub const IDS_ABOUT_BROWSER_SWITCH_GENERIC_ERROR_UNKNOWN_BROWSER: u32 = 5441;
pub const IDS_ABOUT_BROWSER_SWITCH_GENERIC_ERROR_KNOWN_BROWSER: u32 = 5442;
pub const IDS_ABOUT_BROWSER_SWITCH_PROTOCOL_ERROR: u32 = 5443;
pub const IDS_NACL_APP_MISSING_ARCH_MESSAGE: u32 = 5444;
pub const IDS_ABOUT_BOX_ERROR_DURING_UPDATE_CHECK: u32 = 5445;
pub const IDS_ABOUT_BOX_ERROR_UPDATE_CHECK_FAILED: u32 = 5446;
pub const IDS_ABOUT_BOX_EXTERNAL_UPDATE_IS_RUNNING: u32 = 5447;
pub const IDS_ABOUT_BOX_GOOGLE_UPDATE_ERROR: u32 = 5448;
pub const IDS_OMNIBOX_PLACEHOLDER_TEXT: u32 = 216;
pub const IDS_PASTE_AND_GO: u32 = 5449;
pub const IDS_PASTE_AND_SEARCH: u32 = 5450;
pub const IDS_SHOW_URL: u32 = 5451;
pub const IDS_OMNIBOX_KEYWORD_HINT: u32 = 5452;
pub const IDS_OMNIBOX_EXTENSION_KEYWORD_HINT: u32 = 5453;
pub const IDS_OMNIBOX_KEYWORD_HINT_KEY_ACCNAME: u32 = 5454;
pub const IDS_OMNIBOX_KEYWORD_HINT_TOUCH: u32 = 5455;
pub const IDS_OMNIBOX_EXTENSION_KEYWORD_HINT_TOUCH: u32 = 5456;
pub const IDS_OMNIBOX_KEYWORD_TEXT: u32 = 5457;
pub const IDS_OMNIBOX_KEYWORD_TEXT_MD: u32 = 5458;
pub const IDS_CLICK_TO_VIEW_DOODLE: u32 = 268;
pub const IDS_OMNIBOX_CLEAR_ALL: u32 = 219;
pub const IDS_SEARCH_OR_TYPE_WEB_ADDRESS: u32 = 5459;
pub const IDS_OMNIBOX_WHY_THIS_SUGGESTION: u32 = 5460;
pub const IDS_OMNIBOX_REMOVE_SUGGESTION: u32 = 5461;
pub const IDS_OMNIBOX_REMOVE_SUGGESTION_BUBBLE_TITLE: u32 = 5462;
pub const IDS_OMNIBOX_REMOVE_SUGGESTION_BUBBLE_DESCRIPTION: u32 = 5463;
pub const IDS_GOOGLE_SEARCH_BOX_EMPTY_HINT: u32 = 5464;
pub const IDS_GOOGLE_SEARCH_BOX_EMPTY_HINT_MD: u32 = 232;
pub const IDS_GOOGLE_SEARCH_BOX_EMPTY_HINT_SHORT: u32 = 5465;
pub const IDS_NTP_CUSTOM_LINKS_ADD_SHORTCUT_TOOLTIP: u32 = 252;
pub const IDS_NTP_CUSTOM_LINKS_ADD_SHORTCUT_TITLE: u32 = 251;
pub const IDS_NTP_CUSTOM_LINKS_EDIT_SHORTCUT_TOOLTIP: u32 = 254;
pub const IDS_NTP_CUSTOM_LINKS_EDIT_SHORTCUT: u32 = 253;
pub const IDS_UPLOAD_IMAGE_FORMAT: u32 = 5466;
pub const IDS_NTP_CUSTOM_LINKS_NAME: u32 = 255;
pub const IDS_NTP_CUSTOM_LINKS_URL: u32 = 256;
pub const IDS_NTP_CUSTOM_LINKS_REMOVE: u32 = 257;
pub const IDS_NTP_CUSTOM_LINKS_CANCEL: u32 = 258;
pub const IDS_NTP_CUSTOM_LINKS_DONE: u32 = 240;
pub const IDS_NTP_CUSTOM_LINKS_INVALID_URL: u32 = 259;
pub const IDS_NTP_CUSTOM_LINKS_SHORTCUT_EXISTS: u32 = 5467;
pub const IDS_NTP_CUSTOM_LINKS_CANT_CREATE: u32 = 263;
pub const IDS_NTP_CUSTOM_LINKS_CANT_EDIT: u32 = 264;
pub const IDS_NTP_CUSTOM_LINKS_CANT_REMOVE: u32 = 265;
pub const IDS_NTP_CONFIRM_MSG_SHORTCUT_REMOVED: u32 = 225;
pub const IDS_NTP_CONFIRM_MSG_SHORTCUT_EDITED: u32 = 260;
pub const IDS_NTP_CONFIRM_MSG_SHORTCUT_ADDED: u32 = 261;
pub const IDS_NTP_CONFIRM_MSG_RESTORE_DEFAULTS: u32 = 262;
pub const IDS_NTP_CUSTOM_BG_CUSTOMIZE_BACKGROUND: u32 = 233;
pub const IDS_NTP_CUSTOM_BG_CHROME_WALLPAPERS: u32 = 235;
pub const IDS_NTP_CUSTOM_BG_UPLOAD_AN_IMAGE: u32 = 236;
pub const IDS_NTP_CUSTOM_BG_SELECT_A_COLLECTION: u32 = 238;
pub const IDS_NTP_CUSTOM_BG_DAILY_REFRESH: u32 = 239;
pub const IDS_NTP_CUSTOM_BG_SURPRISE_ME: u32 = 5468;
pub const IDS_NTP_CUSTOM_BG_RESTORE_DEFAULT: u32 = 237;
pub const IDS_NTP_CUSTOM_BG_CANCEL: u32 = 241;
pub const IDS_NTP_CONNECTION_ERROR_NO_PERIOD: u32 = 243;
pub const IDS_NTP_CONNECTION_ERROR: u32 = 244;
pub const IDS_NTP_ERROR_MORE_INFO: u32 = 245;
pub const IDS_NTP_CUSTOM_BG_BACKGROUNDS_UNAVAILABLE: u32 = 246;
pub const IDS_NTP_CUSTOM_BG_IMAGE_UNAVAILABLE: u32 = 5469;
pub const IDS_NTP_CUSTOM_BG_IMAGE_NOT_USABLE: u32 = 5470;
pub const IDS_NTP_CUSTOM_BG_BACK_LABEL: u32 = 248;
pub const IDS_NTP_CUSTOM_BG_IMAGE_SELECTED: u32 = 5471;
pub const IDS_NTP_CUSTOM_BG_CUSTOMIZE_NTP_LABEL: u32 = 247;
pub const IDS_NTP_DOODLE_SHARE_LABEL: u32 = 5472;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_CLOSE_LABEL: u32 = 5473;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_FACEBOOK_LABEL: u32 = 5474;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_TWITTER_LABEL: u32 = 5475;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_MAIL_LABEL: u32 = 5476;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_COPY_LABEL: u32 = 5477;
pub const IDS_NTP_DOODLE_SHARE_DIALOG_LINK_LABEL: u32 = 5478;
pub const IDS_NTP_CUSTOMIZE_BUTTON_LABEL: u32 = 5479;
pub const IDS_NTP_CUSTOMIZE_MENU_BACKGROUND_LABEL: u32 = 5480;
pub const IDS_NTP_CUSTOMIZE_MENU_SHORTCUTS_LABEL: u32 = 5481;
pub const IDS_NTP_CUSTOMIZE_MENU_COLOR_LABEL: u32 = 5482;
pub const IDS_NTP_CUSTOMIZE_NO_BACKGROUND_LABEL: u32 = 5483;
pub const IDS_NTP_CUSTOMIZE_UPLOAD_FROM_DEVICE_LABEL: u32 = 5484;
pub const IDS_NTP_CUSTOMIZE_HIDE_SHORTCUTS_LABEL: u32 = 5485;
pub const IDS_NTP_CUSTOMIZE_HIDE_SHORTCUTS_DESC: u32 = 5486;
pub const IDS_NTP_CUSTOMIZE_MY_SHORTCUTS_LABEL: u32 = 5487;
pub const IDS_NTP_CUSTOMIZE_MOST_VISITED_LABEL: u32 = 5488;
pub const IDS_NTP_CUSTOMIZE_MY_SHORTCUTS_DESC: u32 = 5489;
pub const IDS_NTP_CUSTOMIZE_MOST_VISITED_DESC: u32 = 5490;
pub const IDS_TOOLTIP_BACK: u32 = 193;
pub const IDS_ACCDESCRIPTION_BACK: u32 = 195;
pub const IDS_TOOLTIP_FORWARD: u32 = 196;
pub const IDS_ACCDESCRIPTION_FORWARD: u32 = 198;
pub const IDS_TOOLTIP_HOME: u32 = 203;
pub const IDS_TOOLTIP_RELOAD: u32 = 5492;
pub const IDS_TOOLTIP_RELOAD_WITH_MENU: u32 = 5493;
pub const IDS_TOOLTIP_STOP: u32 = 5494;
pub const IDS_TOOLTIP_EXTENSIONS_BUTTON: u32 = 5495;
pub const IDS_TOOLTIP_LOCATION_ICON: u32 = 5497;
pub const IDS_TOOLTIP_NEW_TAB: u32 = 185;
pub const IDS_TOOLTIP_MIC_SEARCH: u32 = 269;
pub const IDS_TOOLTIP_SAVE_CREDIT_CARD: u32 = 5498;
pub const IDS_TOOLTIP_MIGRATE_LOCAL_CARD: u32 = 5499;
pub const IDS_TOOLTIP_TRANSLATE: u32 = 5500;
pub const IDS_TOOLTIP_ZOOM: u32 = 5501;
pub const IDS_TOOLTIP_ZOOM_EXTENSION_ICON: u32 = 5502;
pub const IDS_ZOOM_SET_DEFAULT: u32 = 5503;
pub const IDS_TOOLTIP_FIND: u32 = 5504;
pub const IDS_TOOLTIP_INTENT_PICKER_ICON: u32 = 5505;
pub const IDS_INTENT_PICKER_BUBBLE_VIEW_OPEN_WITH: u32 = 5506;
pub const IDS_INTENT_PICKER_BUBBLE_VIEW_REMEMBER_SELECTION: u32 = 5507;
pub const IDS_INTENT_PICKER_BUBBLE_VIEW_USE_APP: u32 = 5508;
pub const IDS_INTENT_PICKER_BUBBLE_VIEW_STAY_IN_CHROME: u32 = 5509;
pub const IDS_ACCESSIBLE_INCOGNITO_WINDOW_TITLE_FORMAT: u32 = 5510;
pub const IDS_ACCESSIBLE_GUEST_WINDOW_TITLE_FORMAT: u32 = 5511;
pub const IDS_ACCESSIBLE_WINDOW_TITLE_WITH_PROFILE_FORMAT: u32 = 5512;
pub const IDS_ACCNAME_APP_UPGRADE_RECOMMENDED: u32 = 5513;
pub const IDS_ACCNAME_FULLSCREEN: u32 = 5514;
pub const IDS_ACCNAME_HOME: u32 = 204;
pub const IDS_ACCNAME_RELOAD: u32 = 202;
pub const IDS_ACCNAME_FIND: u32 = 5515;
pub const IDS_ACCNAME_BOOKMARKS: u32 = 5516;
pub const IDS_ACCNAME_BOOKMARKS_CHEVRON: u32 = 285;
pub const IDS_ACCNAME_BOOKMARKS_MENU: u32 = 5517;
pub const IDS_ACCNAME_SEPARATOR: u32 = 5518;
pub const IDS_ACCNAME_EXTENSIONS: u32 = 5519;
pub const IDS_ACCNAME_NEWTAB: u32 = 186;
pub const IDS_ACCNAME_MINIMIZE: u32 = 5520;
pub const IDS_ACCNAME_MAXIMIZE: u32 = 5521;
pub const IDS_ACCNAME_RESTORE: u32 = 5522;
pub const IDS_ACCNAME_CLOSE_TAB: u32 = 5523;
pub const IDS_ACCNAME_ZOOM_SET_DEFAULT: u32 = 5524;
pub const IDS_ACCESSIBILITY_EVENTS_PERMISSION_FRAGMENT: u32 = 5525;
pub const IDS_CLIPBOARD_PERMISSION_FRAGMENT: u32 = 5528;
pub const IDS_ALLOWED_CLIPBOARD_TITLE: u32 = 5531;
pub const IDS_BLOCKED_CLIPBOARD_TITLE: u32 = 5532;
pub const IDS_ALLOWED_CLIPBOARD_MESSAGE: u32 = 5533;
pub const IDS_ALLOWED_CLIPBOARD_BLOCK: u32 = 5534;
pub const IDS_ALLOWED_CLIPBOARD_NO_ACTION: u32 = 5535;
pub const IDS_BLOCKED_CLIPBOARD_MESSAGE: u32 = 5536;
pub const IDS_BLOCKED_CLIPBOARD_UNBLOCK: u32 = 5537;
pub const IDS_BLOCKED_CLIPBOARD_NO_ACTION: u32 = 5538;
pub const IDS_BOOKMARK_PROMO_0: u32 = 5539;
pub const IDS_BOOKMARK_PROMO_1: u32 = 5540;
pub const IDS_BOOKMARK_PROMO_2: u32 = 5541;
pub const IDS_INCOGNITOWINDOW_PROMO_0: u32 = 5542;
pub const IDS_INCOGNITOWINDOW_PROMO_1: u32 = 5543;
pub const IDS_INCOGNITOWINDOW_PROMO_2: u32 = 5544;
pub const IDS_INCOGNITOWINDOW_PROMO_3: u32 = 5545;
pub const IDS_NEWTAB_PROMO_0: u32 = 5546;
pub const IDS_NEWTAB_PROMO_1: u32 = 5547;
pub const IDS_NEWTAB_PROMO_2: u32 = 5548;
pub const IDS_REOPEN_TAB_PROMO: u32 = 5549;
pub const IDS_REOPEN_TAB_PROMO_SCREENREADER: u32 = 5550;
pub const IDS_BROWSER_HANGMONITOR: u32 = 5551;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_TITLE: u32 = 5552;
pub const IDS_BROWSER_HANGMONITOR_RENDERER: u32 = 5553;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_INFOBAR: u32 = 5554;
pub const IDS_BROWSER_HANGMONITOR_IFRAME_TITLE: u32 = 5555;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_INFOBAR_END: u32 = 5556;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_WAIT: u32 = 5557;
pub const IDS_BROWSER_HANGMONITOR_RENDERER_END: u32 = 5558;
pub const IDS_BROWSER_HANGMONITOR_PLUGIN_INFOBAR: u32 = 5559;
pub const IDS_BROWSER_HANGMONITOR_PLUGIN_INFOBAR_KILLBUTTON: u32 = 5560;
pub const IDS_PASSWORDS_AUTO_SIGNIN_TITLE: u32 = 5561;
pub const IDS_PASSWORDS_AUTO_SIGNIN_DESCRIPTION: u32 = 5562;
pub const IDS_PASSWORDS_VIA_FEDERATION: u32 = 5563;
pub const IDS_PASSWORDS_PAGE_VIEW_HIDE_BUTTON: u32 = 5564;
pub const IDS_CONFIRM_MESSAGEBOX_YES_BUTTON_LABEL: u32 = 5565;
pub const IDS_CONFIRM_MESSAGEBOX_NO_BUTTON_LABEL: u32 = 5566;
pub const IDS_PASSWORD_MANAGER_CANCEL_BUTTON: u32 = 5567;
pub const IDS_PASSWORD_MANAGER_SAVE_BUTTON: u32 = 5568;
pub const IDS_PASSWORD_MANAGER_UPDATE_BUTTON: u32 = 5569;
pub const IDS_PASSWORD_MANAGER_BUBBLE_BLACKLIST_BUTTON: u32 = 5570;
pub const IDS_PASSWORD_MANAGER_TOOLTIP_SAVE: u32 = 5571;
pub const IDS_PASSWORD_MANAGER_TOOLTIP_MANAGE: u32 = 5572;
pub const IDS_PASSWORD_MANAGER_IMPORT_BUTTON: u32 = 5573;
pub const IDS_PASSWORD_MANAGER_IMPORT_DIALOG_TITLE: u32 = 5574;
pub const IDS_PASSWORD_MANAGER_EXPORT_DIALOG_TITLE: u32 = 5575;
pub const IDS_PASSWORD_MANAGER_USERNAME_LABEL: u32 = 5576;
pub const IDS_PASSWORD_MANAGER_PASSWORD_LABEL: u32 = 5577;
pub const IDS_IMPORT_FROM_IE: u32 = 5584;
pub const IDS_IMPORT_FROM_EDGE: u32 = 5585;
pub const IDS_IMPORT_FROM_FIREFOX: u32 = 5586;
pub const IDS_IMPORT_FROM_ICEWEASEL: u32 = 5587;
pub const IDS_IMPORT_FROM_SAFARI: u32 = 5588;
pub const IDS_IMPORT_FROM_BOOKMARKS_HTML_FILE: u32 = 5589;
pub const IDS_IMPORTER_LOCK_TITLE: u32 = 5593;
pub const IDS_IMPORTER_LOCK_TEXT: u32 = 5594;
pub const IDS_IMPORTER_LOCK_OK: u32 = 5595;
pub const IDS_FEEDBACK_REPORT_PAGE_TITLE: u32 = 5596;
pub const IDS_FEEDBACK_REPORT_PAGE_TITLE_SAD_TAB_FLOW: u32 = 5597;
pub const IDS_FEEDBACK_MINIMIZE_BUTTON_LABEL: u32 = 5598;
pub const IDS_FEEDBACK_CLOSE_BUTTON_LABEL: u32 = 5599;
pub const IDS_FEEDBACK_REPORT_URL_LABEL: u32 = 5600;
pub const IDS_FEEDBACK_USER_EMAIL_LABEL: u32 = 5601;
pub const IDS_FEEDBACK_ANONYMOUS_EMAIL_OPTION: u32 = 5602;
pub const IDS_FEEDBACK_SCREENSHOT_LABEL: u32 = 5603;
pub const IDS_FEEDBACK_INCLUDE_PERFORMANCE_TRACE_CHECKBOX: u32 = 5604;
pub const IDS_FEEDBACK_BLUETOOTH_LOGS_CHECKBOX: u32 = 5605;
pub const IDS_FEEDBACK_ASSISTANT_LOGS_MESSAGE: u32 = 5606;
pub const IDS_FEEDBACK_BLUETOOTH_LOGS_MESSAGE: u32 = 5607;
pub const IDS_FEEDBACK_OFFLINE_DIALOG_TITLE: u32 = 5608;
pub const IDS_FEEDBACK_OFFLINE_DIALOG_TEXT: u32 = 5609;
pub const IDS_FEEDBACK_INCLUDE_SYSTEM_INFORMATION_CHKBOX: u32 = 5610;
pub const IDS_FEEDBACK_INCLUDE_ASSISTANT_INFORMATION_CHKBOX: u32 = 5613;
pub const IDS_FEEDBACK_ATTACH_FILE_NOTE: u32 = 5614;
pub const IDS_FEEDBACK_ATTACH_FILE_LABEL: u32 = 5615;
pub const IDS_FEEDBACK_READING_FILE: u32 = 5616;
pub const IDS_FEEDBACK_ATTACH_FILE_TO_BIG: u32 = 5617;
pub const IDS_FEEDBACK_IWLWIFI_DEBUG_DUMP_EXPLAINER: u32 = 5618;
pub const IDS_FEEDBACK_PRIVACY_NOTE: u32 = 5619;
pub const IDS_FEEDBACK_NO_DESCRIPTION: u32 = 5620;
pub const IDS_FEEDBACK_SEND_REPORT: u32 = 5621;
pub const IDS_FEEDBACK_SYSINFO_PAGE_TITLE: u32 = 5622;
pub const IDS_FEEDBACK_SYSINFO_PAGE_LOADING: u32 = 5623;
pub const IDS_FEEDBACK_ADDITIONAL_INFO_LABEL: u32 = 5624;
pub const IDS_CLEAR_BROWSING_DATA_TITLE: u32 = 5625;
pub const IDS_FLASH_PERMISSION_FRAGMENT: u32 = 5626;
pub const IDS_CLEAR_BROWSING_DATA_HISTORY_NOTICE: u32 = 5627;
pub const IDS_CLEAR_BROWSING_DATA_HISTORY_NOTICE_TITLE: u32 = 5628;
pub const IDS_CLEAR_BROWSING_DATA_HISTORY_NOTICE_OK: u32 = 5629;
pub const IDS_MEDIA_SELECTED_MIC_LABEL: u32 = 5630;
pub const IDS_MEDIA_SELECTED_CAMERA_LABEL: u32 = 5631;
pub const IDS_MEDIA_MENU_NO_DEVICE_TITLE: u32 = 5632;
pub const IDS_HANDLERS_BUBBLE_MANAGE_LINK: u32 = 5635;
pub const IDS_ZOOMLEVELS_CHROME_ERROR_PAGES_LABEL: u32 = 5636;
pub const IDS_UPGRADE_ERROR: u32 = 5643;
pub const IDS_UPGRADE_ERROR_DETAILS: u32 = 5644;
pub const IDS_UPGRADE_DISABLED_BY_POLICY: u32 = 5645;
pub const IDS_UPGRADE_DISABLED_BY_POLICY_MANUAL: u32 = 5646;
pub const IDS_REPORT_AN_ISSUE: u32 = 5647;
pub const IDS_CHROME_CLEANUP_PROMPT_DETAILS_BUTTON_LABEL: u32 = 5648;
pub const IDS_CHROME_CLEANUP_PROMPT_REMOVE_BUTTON_LABEL: u32 = 5649;
pub const IDS_CHROME_CLEANUP_PROMPT_TITLE: u32 = 5650;
pub const IDS_CHROME_CLEANUP_REBOOT_PROMPT_TITLE: u32 = 5651;
pub const IDS_CHROME_CLEANUP_REBOOT_PROMPT_RESTART_BUTTON_LABEL: u32 = 5652;
pub const IDS_CHROME_CLEANUP_LOGS_PERMISSION: u32 = 5653;
pub const IDS_SETTINGS_RESET_PROMPT_TITLE_SEARCH_ENGINE: u32 = 5654;
pub const IDS_SETTINGS_RESET_PROMPT_TITLE_STARTUP_PAGE: u32 = 5655;
pub const IDS_SETTINGS_RESET_PROMPT_TITLE_HOMEPAGE: u32 = 5656;
pub const IDS_SETTINGS_RESET_PROMPT_ACCEPT_BUTTON_LABEL: u32 = 5657;
pub const IDS_SETTINGS_RESET_PROMPT_EXPLANATION_FOR_SEARCH_ENGINE_NO_EXTENSIONS: u32 = 5658;
pub const IDS_SETTINGS_RESET_PROMPT_EXPLANATION_FOR_STARTUP_PAGE_SINGLE_NO_EXTENSIONS: u32 = 5659;
pub const IDS_SETTINGS_RESET_PROMPT_EXPLANATION_FOR_STARTUP_PAGE_MULTIPLE_NO_EXTENSIONS: u32 = 5660;
pub const IDS_SETTINGS_RESET_PROMPT_EXPLANATION_FOR_HOMEPAGE_NO_EXTENSIONS: u32 = 5661;
pub const IDS_REENABLE_UPDATES: u32 = 5662;
pub const IDS_PICTURE_IN_PICTURE_TITLE_TEXT: u32 = 5663;
pub const IDS_PICTURE_IN_PICTURE_PAUSE_CONTROL_TEXT: u32 = 5664;
pub const IDS_PICTURE_IN_PICTURE_PLAY_CONTROL_TEXT: u32 = 5665;
pub const IDS_PICTURE_IN_PICTURE_REPLAY_CONTROL_TEXT: u32 = 5666;
pub const IDS_PICTURE_IN_PICTURE_BACK_TO_TAB_CONTROL_TEXT: u32 = 5667;
pub const IDS_PICTURE_IN_PICTURE_MUTE_CONTROL_TEXT: u32 = 5668;
pub const IDS_PICTURE_IN_PICTURE_UNMUTE_CONTROL_TEXT: u32 = 5669;
pub const IDS_PICTURE_IN_PICTURE_SKIP_AD_CONTROL_TEXT: u32 = 5670;
pub const IDS_PICTURE_IN_PICTURE_CLOSE_CONTROL_TEXT: u32 = 5671;
pub const IDS_PICTURE_IN_PICTURE_RESIZE_HANDLE_TEXT: u32 = 5672;
pub const IDS_PICTURE_IN_PICTURE_PLAY_PAUSE_CONTROL_ACCESSIBLE_TEXT: u32 = 5673;
pub const IDS_PICTURE_IN_PICTURE_MUTE_CONTROL_ACCESSIBLE_TEXT: u32 = 5674;
pub const IDS_PICTURE_IN_PICTURE_NEXT_TRACK_CONTROL_ACCESSIBLE_TEXT: u32 = 5675;
pub const IDS_PICTURE_IN_PICTURE_PREVIOUS_TRACK_CONTROL_ACCESSIBLE_TEXT: u32 = 5676;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_CLOSE_TITLE: u32 = 5677;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_LEAVE_TITLE: u32 = 5678;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_DESCRIPTION: u32 = 5679;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_CLOSE_TEXT: u32 = 5680;
pub const IDS_PICTURE_IN_PICTURE_CONFIRM_LEAVE_TEXT: u32 = 5681;
pub const IDS_PICTURE_IN_PICTURE_CANCEL_TEXT: u32 = 5682;
pub const IDS_LOAD_STATE_WAITING_FOR_SOCKET_SLOT: u32 = 5683;
pub const IDS_LOAD_STATE_WAITING_FOR_DELEGATE: u32 = 5684;
pub const IDS_LOAD_STATE_WAITING_FOR_DELEGATE_GENERIC: u32 = 292;
pub const IDS_LOAD_STATE_WAITING_FOR_CACHE: u32 = 5685;
pub const IDS_LOAD_STATE_WAITING_FOR_APPCACHE: u32 = 5686;
pub const IDS_LOAD_STATE_ESTABLISHING_PROXY_TUNNEL: u32 = 5687;
pub const IDS_LOAD_STATE_RESOLVING_PROXY_FOR_URL: u32 = 5688;
pub const IDS_LOAD_STATE_RESOLVING_HOST_IN_PAC_FILE: u32 = 5689;
pub const IDS_LOAD_STATE_DOWNLOADING_PAC_FILE: u32 = 5690;
pub const IDS_LOAD_STATE_RESOLVING_HOST: u32 = 5691;
pub const IDS_LOAD_STATE_CONNECTING: u32 = 5692;
pub const IDS_LOAD_STATE_SSL_HANDSHAKE: u32 = 5693;
pub const IDS_LOAD_STATE_SENDING_REQUEST: u32 = 5694;
pub const IDS_LOAD_STATE_SENDING_REQUEST_WITH_PROGRESS: u32 = 5695;
pub const IDS_LOAD_STATE_WAITING_FOR_RESPONSE: u32 = 5696;
pub const IDS_TAB_CXMENU_NEWTAB: u32 = 5697;
pub const IDS_TAB_CXMENU_RELOAD: u32 = 5698;
pub const IDS_TAB_CXMENU_DUPLICATE: u32 = 5699;
pub const IDS_TAB_CXMENU_CLOSETAB: u32 = 5700;
pub const IDS_TAB_CXMENU_CLOSEOTHERTABS: u32 = 5701;
pub const IDS_TAB_CXMENU_CLOSETABSTORIGHT: u32 = 5702;
pub const IDS_TAB_CXMENU_FOCUS_THIS_TAB: u32 = 5703;
pub const IDS_TAB_CXMENU_PIN_TAB: u32 = 5704;
pub const IDS_TAB_CXMENU_UNPIN_TAB: u32 = 5705;
pub const IDS_TAB_CXMENU_AUDIO_MUTE_TAB: u32 = 5706;
pub const IDS_TAB_CXMENU_AUDIO_UNMUTE_TAB: u32 = 5707;
pub const IDS_TAB_CXMENU_SOUND_MUTE_SITE: u32 = 5708;
pub const IDS_TAB_CXMENU_SOUND_UNMUTE_SITE: u32 = 5709;
pub const IDS_TAB_CXMENU_BOOKMARK_ALL_TABS: u32 = 5710;
pub const IDS_TAB_CXMENU_ADD_TAB_TO_NEW_GROUP: u32 = 5711;
pub const IDS_TAB_CXMENU_ADD_TAB_TO_EXISTING_GROUP: u32 = 5712;
pub const IDS_TAB_CXMENU_REMOVE_TAB_FROM_GROUP: u32 = 5713;
pub const IDS_APP_MENU_RELOAD: u32 = 5714;
pub const IDS_APP_MENU_NEW_WEB_PAGE: u32 = 5715;
pub const IDS_MEDIA_SCREEN_CAPTURE_CONFIRMATION_TITLE: u32 = 5716;
pub const IDS_MEDIA_SCREEN_CAPTURE_CONFIRMATION_TEXT: u32 = 5717;
pub const IDS_MEDIA_SCREEN_AND_AUDIO_CAPTURE_CONFIRMATION_TEXT: u32 = 5718;
pub const IDS_MEDIA_SCREEN_CAPTURE_NOTIFICATION_TEXT: u32 = 5719;
pub const IDS_MEDIA_SCREEN_CAPTURE_NOTIFICATION_TEXT_DELEGATED: u32 = 5720;
pub const IDS_MEDIA_SCREEN_CAPTURE_WITH_AUDIO_NOTIFICATION_TEXT: u32 = 5721;
pub const IDS_MEDIA_SCREEN_CAPTURE_WITH_AUDIO_NOTIFICATION_TEXT_DELEGATED: u32 = 5722;
pub const IDS_MEDIA_WINDOW_CAPTURE_NOTIFICATION_TEXT: u32 = 5723;
pub const IDS_MEDIA_WINDOW_CAPTURE_NOTIFICATION_TEXT_DELEGATED: u32 = 5724;
pub const IDS_MEDIA_TAB_CAPTURE_NOTIFICATION_TEXT: u32 = 5725;
pub const IDS_MEDIA_TAB_CAPTURE_NOTIFICATION_TEXT_DELEGATED: u32 = 5726;
pub const IDS_MEDIA_TAB_CAPTURE_WITH_AUDIO_NOTIFICATION_TEXT: u32 = 5727;
pub const IDS_MEDIA_TAB_CAPTURE_WITH_AUDIO_NOTIFICATION_TEXT_DELEGATED: u32 = 5728;
pub const IDS_MEDIA_SCREEN_CAPTURE_NOTIFICATION_SOURCE: u32 = 5729;
pub const IDS_MEDIA_SCREEN_CAPTURE_NOTIFICATION_STOP: u32 = 5730;
pub const IDS_PLATFORM_KEYS_SELECT_CERT_DIALOG_TEXT: u32 = 5731;
pub const IDS_UNSAFE_FRAME_MESSAGE: u32 = 5732;
pub const IDS_CLIENT_CERT_DIALOG_TITLE: u32 = 5733;
pub const IDS_CLIENT_CERT_DIALOG_TEXT: u32 = 5734;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TITLE: u32 = 5735;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_CERT_ENROLLMENT: u32 = 5736;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_CLIENT_AUTH: u32 = 5737;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_LIST_CERTS: u32 = 5738;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_CERT_IMPORT: u32 = 5739;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_TEXT_CERT_EXPORT: u32 = 5740;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_PASSWORD_FIELD: u32 = 5741;
pub const IDS_CRYPTO_MODULE_AUTH_DIALOG_OK_BUTTON_LABEL: u32 = 5742;
pub const IDS_CRASHED_TAB_FEEDBACK_MESSAGE: u32 = 5748;
pub const IDS_CRASHED_TAB_FEEDBACK_LINK: u32 = 5749;
pub const IDS_KILLED_TAB_FEEDBACK_MESSAGE: u32 = 5751;
pub const IDS_HIDE_ICONS_NOT_SUPPORTED: u32 = 5752;
pub const IDS_RELAUNCH_BUTTON: u32 = 5753;
pub const IDS_TOOLBAR_INFORM_SET_HOME_PAGE: u32 = 5756;
pub const IDS_MANAGE_EXTENSIONS_SETTING_WINDOWS_TITLE: u32 = 5757;
pub const IDS_GOOGLE_CLOUD_PRINT: u32 = 5758;
pub const IDS_CLOUD_PRINT_CONNECTOR_DISABLED_BUTTON: u32 = 5759;
pub const IDS_CLOUD_PRINT_CONNECTOR_ENABLED_LABEL: u32 = 5760;
pub const IDS_CLOUD_PRINT_CONNECTOR_ENABLED_BUTTON: u32 = 5761;
pub const IDS_CLOUD_PRINT_CONNECTOR_ENABLING_BUTTON: u32 = 5762;
pub const IDS_CONTROLLED_SETTING_POLICY: u32 = 5763;
pub const IDS_CONTROLLED_SETTING_EXTENSION: u32 = 5764;
pub const IDS_CONTROLLED_SETTING_EXTENSION_WITHOUT_NAME: u32 = 5765;
pub const IDS_CONTROLLED_SETTING_RECOMMENDED: u32 = 5766;
pub const IDS_CONTROLLED_SETTING_HAS_RECOMMENDATION: u32 = 5767;
pub const IDS_EXTENSIONS_INSTALL_LOCATION_UNKNOWN: u32 = 5768;
pub const IDS_EXTENSIONS_INSTALL_LOCATION_3RD_PARTY: u32 = 5769;
pub const IDS_EXTENSIONS_INSTALL_LOCATION_ENTERPRISE: u32 = 5770;
pub const IDS_EXTENSIONS_INSTALL_LOCATION_SHARED_MODULE: u32 = 5771;
pub const IDS_EXTENSIONS_BLACKLISTED_MALWARE: u32 = 5772;
pub const IDS_EXTENSIONS_BLACKLISTED_SECURITY_VULNERABILITY: u32 = 5773;
pub const IDS_EXTENSIONS_BLACKLISTED_CWS_POLICY_VIOLATION: u32 = 5774;
pub const IDS_EXTENSIONS_BLACKLISTED_POTENTIALLY_UNWANTED: u32 = 5775;
pub const IDS_RESET_PROFILE_SETTINGS_EXPLANATION: u32 = 5776;
pub const IDS_TRIGGERED_RESET_PROFILE_SETTINGS_TITLE: u32 = 5777;
pub const IDS_TRIGGERED_RESET_PROFILE_SETTINGS_EXPLANATION: u32 = 5778;
pub const IDS_TRIGGERED_RESET_PROFILE_SETTINGS_DEFAULT_TOOL_NAME: u32 = 5779;
pub const IDS_RESET_PROFILE_SETTINGS_LOCALE: u32 = 5780;
pub const IDS_RESET_PROFILE_SETTINGS_STARTUP_URLS: u32 = 5781;
pub const IDS_RESET_PROFILE_SETTINGS_STARTUP_TYPE: u32 = 5782;
pub const IDS_RESET_PROFILE_SETTINGS_HOMEPAGE: u32 = 5783;
pub const IDS_RESET_PROFILE_SETTINGS_HOMEPAGE_IS_NTP: u32 = 5784;
pub const IDS_RESET_PROFILE_SETTINGS_YES: u32 = 5785;
pub const IDS_RESET_PROFILE_SETTINGS_NO: u32 = 5786;
pub const IDS_RESET_PROFILE_SETTINGS_SHOW_HOME_BUTTON: u32 = 5787;
pub const IDS_RESET_PROFILE_SETTINGS_DSE: u32 = 5788;
pub const IDS_RESET_PROFILE_SETTINGS_EXTENSIONS: u32 = 5789;
pub const IDS_RESET_PROFILE_SETTINGS_SHORTCUTS: u32 = 5790;
pub const IDS_RESET_PROFILE_SETTINGS_PROCESSING_SHORTCUTS: u32 = 5791;
pub const IDS_AUTOFILL_DIALOG_PLACEHOLDER_EXPIRY_MONTH: u32 = 5793;
pub const IDS_AUTOFILL_DIALOG_PLACEHOLDER_EXPIRY_YEAR: u32 = 5794;
pub const IDS_AUTOFILL_FROM_GOOGLE_ACCOUNT: u32 = 5795;
pub const IDS_OMNIBOX_ICON_SEND_TAB_TO_SELF: u32 = 5797;
pub const IDS_OMNIBOX_TOOLTIP_SEND_TAB_TO_SELF: u32 = 5798;
pub const IDS_OMNIBOX_BUBBLE_ITEM_SUBTITLE_TODAY_SEND_TAB_TO_SELF: u32 = 5799;
pub const IDS_OMNIBOX_BUBBLE_ITEM_SUBTITLE_DAY_SEND_TAB_TO_SELF: u32 = 5800;
pub const IDS_OMNIBOX_BUBBLE_ITEM_SUBTITLE_DAYS_SEND_TAB_TO_SELF: u32 = 5801;
pub const IDS_CONTEXT_MENU_SEND_TAB_TO_SELF_SINGLE_TARGET: u32 = 5802;
pub const IDS_CONTEXT_MENU_SEND_TAB_TO_SELF: u32 = 5803;
pub const IDS_LINK_MENU_SEND_TAB_TO_SELF: u32 = 5804;
pub const IDS_LINK_MENU_SEND_TAB_TO_SELF_SINGLE_TARGET: u32 = 5805;
pub const IDS_COLLECTED_COOKIES_DIALOG_TITLE: u32 = 5806;
pub const IDS_COLLECTED_COOKIES_ALLOWED_COOKIES_LABEL: u32 = 5807;
pub const IDS_COLLECTED_COOKIES_BLOCKED_COOKIES_LABEL: u32 = 5808;
pub const IDS_COLLECTED_COOKIES_BLOCKED_THIRD_PARTY_BLOCKING_ENABLED: u32 = 5809;
pub const IDS_COLLECTED_COOKIES_ALLOW_BUTTON: u32 = 5810;
pub const IDS_COLLECTED_COOKIES_SESSION_ONLY_BUTTON: u32 = 5811;
pub const IDS_COLLECTED_COOKIES_BLOCK_BUTTON: u32 = 5812;
pub const IDS_COLLECTED_COOKIES_ALLOW_RULE_CREATED: u32 = 5813;
pub const IDS_COLLECTED_COOKIES_BLOCK_RULE_CREATED: u32 = 5814;
pub const IDS_COLLECTED_COOKIES_SESSION_RULE_CREATED: u32 = 5815;
pub const IDS_COLLECTED_COOKIES_ALLOWED_COOKIES_TAB_LABEL: u32 = 5819;
pub const IDS_COLLECTED_COOKIES_BLOCKED_COOKIES_TAB_LABEL: u32 = 5820;
pub const IDS_COLLECTED_COOKIES_ALLOWED_AUX_TEXT: u32 = 5821;
pub const IDS_COLLECTED_COOKIES_BLOCKED_AUX_TEXT: u32 = 5822;
pub const IDS_COLLECTED_COOKIES_CLEAR_ON_EXIT_AUX_TEXT: u32 = 5823;
pub const IDS_COLLECTED_COOKIES_INFOBAR_MESSAGE: u32 = 5824;
pub const IDS_COLLECTED_COOKIES_INFOBAR_BUTTON: u32 = 5825;
pub const IDS_ACCNAME_INFOBAR_CONTAINER: u32 = 5826;
pub const IDS_ACCNAME_INFOBAR: u32 = 5827;
pub const IDS_ONE_CLICK_BUBBLE_UNDO: u32 = 5828;
pub const IDS_ONE_CLICK_SIGNIN_BUBBLE_MESSAGE: u32 = 5829;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_OK_BUTTON: u32 = 5830;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_UNDO_BUTTON: u32 = 5831;
pub const IDS_ONE_CLICK_SIGNIN_DIALOG_ADVANCED: u32 = 5832;
pub const IDS_ENTERPRISE_SIGNIN_CANCEL: u32 = 5833;
pub const IDS_ENTERPRISE_SIGNIN_CREATE_NEW_PROFILE: u32 = 5834;
pub const IDS_ENTERPRISE_SIGNIN_CONTINUE: u32 = 5835;
pub const IDS_ENTERPRISE_SIGNIN_ALERT: u32 = 5836;
pub const IDS_PROFILE_WILL_BE_DELETED_DIALOG_TITLE: u32 = 5837;
pub const IDS_PROFILE_WILL_BE_DELETED_DIALOG_DESCRIPTION: u32 = 5838;
pub const IDS_MANAGED_WITH_HYPERLINK: u32 = 5839;
pub const IDS_MANAGED_BY_WITH_HYPERLINK: u32 = 5840;
pub const IDS_COOKIES_REMOVE_LABEL: u32 = 5841;
pub const IDS_COOKIES_COOKIE_NAME_LABEL: u32 = 5842;
pub const IDS_COOKIES_COOKIE_CONTENT_LABEL: u32 = 5843;
pub const IDS_COOKIES_COOKIE_DOMAIN_LABEL: u32 = 5844;
pub const IDS_COOKIES_COOKIE_PATH_LABEL: u32 = 5845;
pub const IDS_COOKIES_COOKIE_SENDFOR_LABEL: u32 = 5846;
pub const IDS_COOKIES_COOKIE_CREATED_LABEL: u32 = 5847;
pub const IDS_COOKIES_COOKIE_EXPIRES_LABEL: u32 = 5848;
pub const IDS_COOKIES_COOKIE_EXPIRES_SESSION: u32 = 5849;
pub const IDS_COOKIES_COOKIE_SENDFOR_ANY: u32 = 5850;
pub const IDS_COOKIES_COOKIE_SENDFOR_SECURE: u32 = 5851;
pub const IDS_COOKIES_COOKIE_SENDFOR_SAME_SITE: u32 = 5852;
pub const IDS_COOKIES_COOKIE_SENDFOR_SECURE_SAME_SITE: u32 = 5853;
pub const IDS_COOKIES_COOKIE_ACCESSIBLE_TO_SCRIPT_YES: u32 = 5854;
pub const IDS_COOKIES_COOKIE_ACCESSIBLE_TO_SCRIPT_NO: u32 = 5855;
pub const IDS_COOKIES_COOKIE_NONESELECTED: u32 = 5856;
pub const IDS_COOKIES_LOCAL_STORAGE_ORIGIN_LABEL: u32 = 5859;
pub const IDS_COOKIES_LOCAL_STORAGE_SIZE_ON_DISK_LABEL: u32 = 5860;
pub const IDS_COOKIES_LOCAL_STORAGE_LAST_MODIFIED_LABEL: u32 = 5861;
pub const IDS_COOKIES_COOKIES: u32 = 5862;
pub const IDS_COOKIES_APPLICATION_CACHES: u32 = 5863;
pub const IDS_COOKIES_APPLICATION_CACHE: u32 = 5864;
pub const IDS_COOKIES_APPLICATION_CACHE_MANIFEST_LABEL: u32 = 5865;
pub const IDS_COOKIES_WEB_DATABASES: u32 = 5867;
pub const IDS_COOKIES_LOCAL_STORAGE: u32 = 5868;
pub const IDS_COOKIES_SESSION_STORAGE: u32 = 5869;
pub const IDS_COOKIES_INDEXED_DBS: u32 = 5870;
pub const IDS_COOKIES_MEDIA_LICENSE: u32 = 5871;
pub const IDS_COOKIES_MEDIA_LICENSES: u32 = 5872;
pub const IDS_COOKIES_FILE_SYSTEM: u32 = 5873;
pub const IDS_COOKIES_FILE_SYSTEMS: u32 = 5874;
pub const IDS_COOKIES_FILE_SYSTEM_USAGE_NONE: u32 = 5875;
pub const IDS_COOKIES_LAST_ACCESSED_LABEL: u32 = 5876;
pub const IDS_COOKIES_CHANNEL_ID: u32 = 5877;
pub const IDS_COOKIES_CHANNEL_IDS: u32 = 5878;
pub const IDS_COOKIES_SERVICE_WORKER: u32 = 5879;
pub const IDS_COOKIES_SERVICE_WORKERS: u32 = 5880;
pub const IDS_COOKIES_SHARED_WORKERS: u32 = 5881;
pub const IDS_COOKIES_CACHE_STORAGE: u32 = 5882;
pub const IDS_CLIENT_CERT_ECDSA_SIGN: u32 = 5883;
pub const IDS_APP_DEFAULT_PAGE_NAME: u32 = 5884;
pub const IDS_APP_LAUNCHER_TAB_TITLE: u32 = 5885;
pub const IDS_NEW_TAB_GUEST_SESSION_HEADING: u32 = 5886;
pub const IDS_NEW_TAB_GUEST_SESSION_DESCRIPTION: u32 = 5887;
pub const IDS_NEW_TAB_TILE_GRID_ACCESSIBLE_DESCRIPTION: u32 = 5888;
pub const IDS_NEW_TAB_APP_INSTALL_HINT_LABEL: u32 = 5889;
pub const IDS_NEW_TAB_MOST_VISITED: u32 = 231;
pub const IDS_NEW_TAB_RESTORE_THUMBNAILS_SHORT_LINK: u32 = 228;
pub const IDS_NEW_TAB_ATTRIBUTION_INTRO: u32 = 229;
pub const IDS_NEW_TAB_THUMBNAIL_REMOVED_NOTIFICATION: u32 = 5890;
pub const IDS_NEW_TAB_REMOVE_THUMBNAIL_TOOLTIP: u32 = 226;
pub const IDS_NEW_TAB_PAGE_SWITCHER_CHANGE_TITLE: u32 = 5891;
pub const IDS_NEW_TAB_PAGE_SWITCHER_SAME_TITLE: u32 = 5892;
pub const IDS_NEW_TAB_VOICE_AUDIO_ERROR: u32 = 266;
pub const IDS_NEW_TAB_VOICE_CLOSE_TOOLTIP: u32 = 5893;
pub const IDS_NEW_TAB_VOICE_DETAILS: u32 = 267;
pub const IDS_NEW_TAB_VOICE_LANGUAGE_ERROR: u32 = 270;
pub const IDS_NEW_TAB_VOICE_LISTENING: u32 = 271;
pub const IDS_NEW_TAB_VOICE_NETWORK_ERROR: u32 = 272;
pub const IDS_NEW_TAB_VOICE_NO_TRANSLATION: u32 = 273;
pub const IDS_NEW_TAB_VOICE_NO_VOICE: u32 = 274;
pub const IDS_NEW_TAB_VOICE_OTHER_ERROR: u32 = 279;
pub const IDS_NEW_TAB_VOICE_PERMISSION_ERROR: u32 = 275;
pub const IDS_NEW_TAB_VOICE_READY: u32 = 276;
pub const IDS_NEW_TAB_VOICE_TRY_AGAIN: u32 = 277;
pub const IDS_NEW_TAB_VOICE_WAITING: u32 = 278;
pub const IDS_NEW_TAB_APP_OPTIONS: u32 = 5894;
pub const IDS_NEW_TAB_APP_DETAILS: u32 = 5895;
pub const IDS_NEW_TAB_APP_CREATE_SHORTCUT: u32 = 5896;
pub const IDS_NEW_TAB_APP_INSTALL_LOCALLY: u32 = 5897;
pub const IDS_APP_CONTEXT_MENU_SHOW_INFO: u32 = 5898;
pub const IDS_APP_CONTEXT_MENU_OPEN_PINNED: u32 = 5899;
pub const IDS_APP_CONTEXT_MENU_OPEN_REGULAR: u32 = 5900;
pub const IDS_APP_CONTEXT_MENU_OPEN_WINDOW: u32 = 5901;
pub const IDS_APP_CONTEXT_MENU_OPEN_FULLSCREEN: u32 = 5902;
pub const IDS_APP_CONTEXT_MENU_OPEN_MAXIMIZED: u32 = 5903;
pub const IDS_APP_CONTEXT_MENU_OPEN_TAB: u32 = 5904;
pub const IDS_SYNC_CONFIRMATION_TITLE: u32 = 5907;
pub const IDS_SYNC_CONFIRMATION_DICE_TITLE: u32 = 5908;
pub const IDS_SYNC_CONFIRMATION_UNITY_SYNC_INFO_TITLE: u32 = 5909;
pub const IDS_SYNC_CONFIRMATION_UNITY_SYNC_INFO_DESC: u32 = 5910;
pub const IDS_SYNC_CONFIRMATION_UNITY_SETTINGS_INFO: u32 = 5911;
pub const IDS_SYNC_CONFIRMATION_CHROME_SYNC_TITLE: u32 = 5912;
pub const IDS_SYNC_CONFIRMATION_CHROME_SYNC_MESSAGE: u32 = 5913;
pub const IDS_SYNC_CONFIRMATION_PERSONALIZE_SERVICES_TITLE: u32 = 5914;
pub const IDS_SYNC_CONFIRMATION_PERSONALIZE_SERVICES_BODY: u32 = 5915;
pub const IDS_SYNC_CONFIRMATION_PERSONALIZE_SERVICES_BODY_CHILD_ACCOUNT: u32 = 5916;
pub const IDS_SYNC_CONFIRMATION_SYNC_SETTINGS_LINK_BODY: u32 = 5917;
pub const IDS_SYNC_CONFIRMATION_DICE_CONFIRM_BUTTON_LABEL: u32 = 5918;
pub const IDS_SYNC_CONFIRMATION_DICE_SETTINGS_BUTTON_LABEL: u32 = 5919;
pub const IDS_SYNC_DISABLED_CONFIRMATION_CHROME_SYNC_TITLE: u32 = 5920;
pub const IDS_SYNC_DISABLED_CONFIRMATION_DETAILS: u32 = 5921;
pub const IDS_SYNC_DISABLED_CONFIRMATION_CONFIRM_BUTTON_LABEL: u32 = 5922;
pub const IDS_SYNC_DISABLED_CONFIRMATION_UNDO_BUTTON_LABEL: u32 = 5923;
pub const IDS_SIGNIN_ERROR_TITLE: u32 = 5924;
pub const IDS_SIGNIN_ERROR_EMAIL_TITLE: u32 = 5925;
pub const IDS_SIGNIN_ERROR_DICE_EMAIL_TITLE: u32 = 5926;
pub const IDS_SIGNIN_ERROR_CLOSE_BUTTON_LABEL: u32 = 5927;
pub const IDS_SIGNIN_ERROR_OK_BUTTON_LABEL: u32 = 5928;
pub const IDS_SIGNIN_ERROR_SWITCH_BUTTON_LABEL: u32 = 5929;
pub const IDS_SIGNIN_ACCESSIBLE_CLOSE_BUTTON: u32 = 5930;
pub const IDS_SIGNIN_ACCESSIBLE_BACK_BUTTON: u32 = 5931;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_CREATE_PROFILE_RADIO_BUTTON_TITLE: u32 = 5932;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_CREATE_PROFILE_RADIO_BUTTON_SUBTITLE: u32 = 5933;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_START_SYNC_RADIO_BUTTON_TITLE: u32 = 5934;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_START_SYNC_RADIO_BUTTON_SUBTITLE: u32 = 5935;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_CLOSE_BUTTON_LABEL: u32 = 5936;
pub const IDS_SIGNIN_EMAIL_CONFIRMATION_CONFIRM_BUTTON_LABEL: u32 = 5937;
pub const IDS_PLUGIN_OUTDATED_PROMPT: u32 = 5938;
pub const IDS_PLUGIN_DEPRECATED_PROMPT: u32 = 5939;
pub const IDS_PLUGIN_ENABLE_TEMPORARILY: u32 = 5940;
pub const IDS_PLUGIN_CRASHED_PROMPT: u32 = 5941;
pub const IDS_PLUGIN_DISCONNECTED_PROMPT: u32 = 5942;
pub const IDS_RELOAD_PAGE_WITH_PLUGIN: u32 = 5943;
pub const IDS_PLUGIN_INITIALIZATION_ERROR_PROMPT: u32 = 5944;
pub const IDS_PLUGIN_FLASH_DEPRECATION_PROMPT: u32 = 5945;
pub const IDS_EXTERNAL_PROTOCOL_TITLE: u32 = 5946;
pub const IDS_EXTERNAL_PROTOCOL_OK_BUTTON_TEXT: u32 = 5947;
pub const IDS_EXTERNAL_PROTOCOL_CANCEL_BUTTON_TEXT: u32 = 5948;
pub const IDS_EXTERNAL_PROTOCOL_CHECKBOX_TEXT: u32 = 5949;
pub const IDS_DIRECTORY_LISTING_HEADER: u32 = 5950;
pub const IDS_DIRECTORY_LISTING_PARENT: u32 = 5951;
pub const IDS_DIRECTORY_LISTING_NAME: u32 = 5952;
pub const IDS_DIRECTORY_LISTING_SIZE: u32 = 5953;
pub const IDS_DIRECTORY_LISTING_DATE_MODIFIED: u32 = 5954;
pub const IDS_DIRECTORY_LISTING_PARSING_ERROR_BOX_TEXT: u32 = 5955;
pub const IDS_SAVE_PAGE_DESC_HTML_ONLY: u32 = 5956;
pub const IDS_SAVE_PAGE_DESC_SINGLE_FILE: u32 = 5957;
pub const IDS_SAVE_PAGE_DESC_COMPLETE: u32 = 5958;
pub const IDS_PROFILE_ERROR_DIALOG_TITLE: u32 = 5959;
pub const IDS_COULDNT_OPEN_PROFILE_ERROR: u32 = 5960;
pub const IDS_OPEN_PROFILE_DATA_LOSS: u32 = 5961;
pub const IDS_PROFILE_ERROR_DIALOG_CHECKBOX: u32 = 5962;
pub const IDS_PROFILE_ERROR_FEEDBACK_DESCRIPTION: u32 = 5963;
pub const IDS_COULDNT_STARTUP_PROFILE_ERROR: u32 = 5964;
pub const IDS_REFUSE_TO_RUN_AS_ROOT: u32 = 5965;
pub const IDS_REFUSE_TO_RUN_AS_ROOT_2: u32 = 5966;
pub const IDS_PROFILE_ON_NETWORK_WARNING: u32 = 5967;
pub const IDS_CANT_WRITE_USER_DIRECTORY_TITLE: u32 = 5968;
pub const IDS_MULTI_DOWNLOAD_WARNING: u32 = 5969;
pub const IDS_MULTI_DOWNLOAD_PERMISSION_FRAGMENT: u32 = 5971;
pub const IDS_RECENT_TABS_MENU: u32 = 5972;
pub const IDS_RECENTLY_CLOSED_WINDOW: u32 = 5973;
pub const IDS_RECENT_TABS_NO_DEVICE_TABS: u32 = 5974;
pub const IDS_HISTORY_MENU: u32 = 5975;
pub const IDS_DEFAULT_DOWNLOAD_FILENAME: u32 = 5976;
pub const IDS_DEFAULT_BROWSER_INFOBAR_OK_BUTTON_LABEL: u32 = 5978;
pub const IDS_USED_EXISTING_BROWSER: u32 = 5984;
pub const IDS_DECLINE_RECOVERY: u32 = 5985;
pub const IDS_SYNC_ACCOUNT_INFO: u32 = 5986;
pub const IDS_SYNC_ACCOUNT_SYNCING: u32 = 5987;
pub const IDS_SYNC_ACCOUNT_SYNCING_CUSTOM_DATA_TYPES: u32 = 5988;
pub const IDS_SIGNIN_ERROR_DISPLAY_SOURCE: u32 = 5989;
pub const IDS_SIGNIN_ERROR_BUBBLE_VIEW_TITLE: u32 = 5990;
pub const IDS_SYNC_ERROR_BUBBLE_VIEW_TITLE: u32 = 5991;
pub const IDS_SYNC_ERROR_USER_MENU_TITLE: u32 = 5992;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNIN_MESSAGE: u32 = 5993;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNIN_BUTTON: u32 = 5994;
pub const IDS_SYNC_ERROR_USER_MENU_PASSPHRASE_MESSAGE: u32 = 5995;
pub const IDS_SYNC_ERROR_USER_MENU_PASSPHRASE_BUTTON: u32 = 5996;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNIN_AGAIN_MESSAGE: u32 = 5997;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNIN_AGAIN_BUTTON: u32 = 5998;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNOUT_MESSAGE: u32 = 5999;
pub const IDS_SYNC_ERROR_USER_MENU_SIGNOUT_BUTTON: u32 = 6000;
pub const IDS_SYNC_ERROR_USER_MENU_CONFIRM_SYNC_SETTINGS_BUTTON: u32 = 6001;
pub const IDS_SYNC_UNAVAILABLE_ERROR_BUBBLE_VIEW_ACCEPT: u32 = 6002;
pub const IDS_SYNC_SIGN_IN_ERROR_BUBBLE_VIEW_ACCEPT: u32 = 6003;
pub const IDS_SYNC_SIGN_IN_ERROR_WRENCH_MENU_ITEM: u32 = 6004;
pub const IDS_SYNC_OVERVIEW: u32 = 6005;
pub const IDS_SYNC_START_SYNC_BUTTON_LABEL: u32 = 6006;
pub const IDS_SIGNED_IN_WITH_SYNC_DISABLED: u32 = 6007;
pub const IDS_SIGNED_IN_WITH_SYNC_SUPPRESSED: u32 = 6008;
pub const IDS_SYNC_SETTINGS_NOT_CONFIRMED: u32 = 6009;
pub const IDS_SYNC_ERROR_SIGNING_IN: u32 = 6010;
pub const IDS_SYNC_UNRECOVERABLE_ERROR: u32 = 6011;
pub const IDS_SYNC_STATUS_UNRECOVERABLE_ERROR: u32 = 6012;
pub const IDS_SYNC_STATUS_UNRECOVERABLE_ERROR_NEEDS_SIGNOUT: u32 = 6013;
pub const IDS_SYNC_STATUS_NEEDS_PASSWORD: u32 = 6014;
pub const IDS_SYNC_STATUS_NEEDS_PASSWORD_LINK_LABEL: u32 = 6015;
pub const IDS_SYNC_SERVER_IS_UNREACHABLE: u32 = 6016;
pub const IDS_SYNC_RELOGIN_ERROR: u32 = 6017;
pub const IDS_SYNC_RELOGIN_LINK_LABEL: u32 = 6018;
pub const IDS_SYNC_ADVANCED_OPTIONS: u32 = 6022;
pub const IDS_SYNC_NTP_SETUP_IN_PROGRESS: u32 = 6023;
pub const IDS_SYNC_SETUP_SPINNER_TITLE: u32 = 6024;
pub const IDS_SYNC_EVERYTHING: u32 = 6025;
pub const IDS_SYNC_FULL_ENCRYPTION_BODY_CUSTOM: u32 = 6026;
pub const IDS_SYNC_FULL_ENCRYPTION_BODY_CUSTOM_WITH_DATE: u32 = 6027;
pub const IDS_SYNC_FULL_ENCRYPTION_BODY_GOOGLE_WITH_DATE: u32 = 6028;
pub const IDS_SYNC_PROMO_NOT_SIGNED_IN_STATUS_HEADER: u32 = 6029;
pub const IDS_SYNC_PROMO_NOT_SIGNED_IN_STATUS_SUB_HEADER: u32 = 6030;
pub const IDS_SYNC_PROMO_NOT_SIGNED_IN_STATUS_LINK: u32 = 6031;
pub const IDS_TRANSLATE_BUBBLE_BEFORE_TRANSLATE_TITLE: u32 = 6032;
pub const IDS_TRANSLATE_BUBBLE_BEFORE_TRANSLATE_NEW: u32 = 6033;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_TITLE: u32 = 6034;
pub const IDS_TRANSLATE_BUBBLE_TRANSLATED_TITLE: u32 = 6035;
pub const IDS_TRANSLATE_BUBBLE_COULD_NOT_TRANSLATE_TITLE: u32 = 6036;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_LINK: u32 = 6037;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_BUTTON: u32 = 6038;
pub const IDS_TRANSLATE_BUBBLE_ADVANCED_MENU_BUTTON: u32 = 6039;
pub const IDS_TRANSLATE_BUBBLE_ACCEPT: u32 = 6040;
pub const IDS_TRANSLATE_BUBBLE_DENY: u32 = 6041;
pub const IDS_TRANSLATE_BUBBLE_ALWAYS_TRANSLATE_LANG: u32 = 6042;
pub const IDS_TRANSLATE_BUBBLE_NEVER_TRANSLATE_LANG: u32 = 6043;
pub const IDS_TRANSLATE_BUBBLE_NEVER_TRANSLATE_SITE: u32 = 6044;
pub const IDS_TRANSLATE_BUBBLE_TRANSLATING: u32 = 6045;
pub const IDS_TRANSLATE_BUBBLE_TRANSLATED: u32 = 6046;
pub const IDS_TRANSLATE_BUBBLE_REVERT: u32 = 6047;
pub const IDS_TRANSLATE_BUBBLE_TRY_AGAIN: u32 = 6048;
pub const IDS_TRANSLATE_BUBBLE_ALWAYS: u32 = 6049;
pub const IDS_TRANSLATE_BUBBLE_ALWAYS_DO_THIS: u32 = 6050;
pub const IDS_TRANSLATE_BUBBLE_OPTIONS_MENU_BUTTON: u32 = 6051;
pub const IDS_TRANSLATE_BUBBLE_COULD_NOT_TRANSLATE: u32 = 6052;
pub const IDS_TRANSLATE_BUBBLE_PAGE_LANGUAGE: u32 = 6053;
pub const IDS_TRANSLATE_BUBBLE_TRANSLATION_LANGUAGE: u32 = 6054;
pub const IDS_TRANSLATE_BUBBLE_LANGUAGE_SETTINGS: u32 = 6055;
pub const IDS_TRANSLATE_BUBBLE_UNKNOWN_LANGUAGE: u32 = 6056;
pub const IDS_NOTIFICATIONS_INFOBAR_TEXT: u32 = 6057;
pub const IDS_NOTIFICATION_PERMISSIONS_FRAGMENT: u32 = 6059;
pub const IDS_NOTIFICATION_BUTTON_SETTINGS: u32 = 6060;
pub const IDS_NOTIFICATION_BUTTON_CLOSE: u32 = 6061;
pub const IDS_NOTIFICATION_BUTTON_MORE: u32 = 6062;
pub const IDS_NOTIFICATION_REPLY_PLACEHOLDER: u32 = 6063;
pub const IDS_GEOLOCATION_INFOBAR_TEXT: u32 = 6183;
pub const IDS_GEOLOCATION_INFOBAR_PERMISSION_FRAGMENT: u32 = 6185;
pub const IDS_GEOLOCATION_BUBBLE_SECTION_ALLOWED: u32 = 6186;
pub const IDS_GEOLOCATION_BUBBLE_SECTION_DENIED: u32 = 6187;
pub const IDS_GEOLOCATION_BUBBLE_REQUIRE_RELOAD_TO_CLEAR: u32 = 6188;
pub const IDS_GEOLOCATION_BUBBLE_CLEAR_LINK: u32 = 6189;
pub const IDS_GEOLOCATION_BUBBLE_MANAGE_LINK: u32 = 6190;
pub const IDS_GEOLOCATION_ALLOWED_TOOLTIP: u32 = 6191;
pub const IDS_GEOLOCATION_BLOCKED_TOOLTIP: u32 = 6192;
pub const IDS_MIDI_SYSEX_INFOBAR_TEXT: u32 = 6193;
pub const IDS_MIDI_SYSEX_PERMISSION_FRAGMENT: u32 = 6195;
pub const IDS_MIDI_SYSEX_ALLOWED_TOOLTIP: u32 = 6196;
pub const IDS_MIDI_SYSEX_BLOCKED_TOOLTIP: u32 = 6197;
pub const IDS_MIDI_SYSEX_BUBBLE_ALLOWED: u32 = 6198;
pub const IDS_MIDI_SYSEX_BUBBLE_DENIED: u32 = 6199;
pub const IDS_MIDI_SYSEX_BUBBLE_REQUIRE_RELOAD_TO_CLEAR: u32 = 6200;
pub const IDS_MIDI_SYSEX_BUBBLE_CLEAR_LINK: u32 = 6201;
pub const IDS_MIDI_SYSEX_BUBBLE_MANAGE_LINK: u32 = 6202;
pub const IDS_REGISTER_PROTOCOL_HANDLER_TOOLTIP: u32 = 218;
pub const IDS_MEDIASTREAM_BUBBLE_MANAGE_LINK: u32 = 6203;
pub const IDS_MICROPHONE_CAMERA_ALLOWED: u32 = 6204;
pub const IDS_MICROPHONE_CAMERA_BLOCKED: u32 = 6205;
pub const IDS_MICROPHONE_ACCESSED: u32 = 6206;
pub const IDS_CAMERA_ACCESSED: u32 = 6207;
pub const IDS_MICROPHONE_BLOCKED: u32 = 6208;
pub const IDS_CAMERA_BLOCKED: u32 = 6209;
pub const IDS_MICROPHONE_CAMERA_ALLOWED_TITLE: u32 = 6210;
pub const IDS_MICROPHONE_CAMERA_BLOCKED_TITLE: u32 = 6211;
pub const IDS_MICROPHONE_ACCESSED_TITLE: u32 = 6212;
pub const IDS_CAMERA_ACCESSED_TITLE: u32 = 6213;
pub const IDS_MICROPHONE_BLOCKED_TITLE: u32 = 6214;
pub const IDS_CAMERA_BLOCKED_TITLE: u32 = 6215;
pub const IDS_MEDIASTREAM_SETTING_CHANGED_MESSAGE: u32 = 6216;
pub const IDS_MANAGE_PASSWORDS_CONFIRM_GENERATED_TEXT: u32 = 6230;
pub const IDS_PASSWORDS_WEB_LINK: u32 = 6231;
pub const IDS_MANAGE_PASSWORDS_LINK: u32 = 6233;
pub const IDS_MANAGE_PASSWORDS_TITLE: u32 = 6234;
pub const IDS_MANAGE_PASSWORDS_NO_PASSWORDS_TITLE: u32 = 6235;
pub const IDS_MANAGE_PASSWORDS_DIFFERENT_DOMAIN_TITLE: u32 = 6236;
pub const IDS_MANAGE_PASSWORDS_DIFFERENT_DOMAIN_NO_PASSWORDS_TITLE: u32 = 6237;
pub const IDS_MANAGE_PASSWORDS_DELETED: u32 = 6238;
pub const IDS_MANAGE_PASSWORDS_UNDO: u32 = 6239;
pub const IDS_MANAGE_PASSWORDS_UNDO_TOOLTIP: u32 = 6240;
pub const IDS_MANAGE_PASSWORDS_DELETE: u32 = 6241;
pub const IDS_MANAGE_PASSWORDS_SHOW_PASSWORD: u32 = 6242;
pub const IDS_MANAGE_PASSWORDS_HIDE_PASSWORD: u32 = 6243;
pub const IDS_MANAGE_PASSWORDS_AUTO_SIGNIN_TITLE_MD: u32 = 6244;
pub const IDS_AUTO_SIGNIN_FIRST_RUN_TITLE_MANY_DEVICES: u32 = 6245;
pub const IDS_AUTO_SIGNIN_FIRST_RUN_TITLE_LOCAL_DEVICE: u32 = 6246;
pub const IDS_AUTO_SIGNIN_FIRST_RUN_TEXT: u32 = 6247;
pub const IDS_AUTO_SIGNIN_FIRST_RUN_OK: u32 = 6248;
pub const IDS_FILE_SELECTION_DIALOG_INFOBAR: u32 = 6257;
pub const IDS_IMAGE_FILES: u32 = 6260;
pub const IDS_AUDIO_FILES: u32 = 6261;
pub const IDS_VIDEO_FILES: u32 = 6262;
pub const IDS_CUSTOM_FILES: u32 = 6263;
pub const IDS_FULLSCREEN_USER_ENTERED_FULLSCREEN: u32 = 6264;
pub const IDS_FULLSCREEN_EXTENSION_TRIGGERED_FULLSCREEN: u32 = 6265;
pub const IDS_FULLSCREEN_UNKNOWN_EXTENSION_TRIGGERED_FULLSCREEN: u32 = 6266;
pub const IDS_FULLSCREEN_SITE_ENTERED_FULLSCREEN: u32 = 6267;
pub const IDS_FULLSCREEN_ENTERED_FULLSCREEN: u32 = 6268;
pub const IDS_FULLSCREEN_SITE_ENTERED_FULLSCREEN_MOUSELOCK: u32 = 6269;
pub const IDS_FULLSCREEN_ENTERED_FULLSCREEN_MOUSELOCK: u32 = 6270;
pub const IDS_FULLSCREEN_SITE_ENTERED_MOUSELOCK: u32 = 6271;
pub const IDS_FULLSCREEN_ENTERED_MOUSELOCK: u32 = 6272;
pub const IDS_FULLSCREEN_PRESS_ESC_TO_EXIT_FULLSCREEN: u32 = 6273;
pub const IDS_FULLSCREEN_PRESS_ESC_TO_EXIT_MOUSELOCK: u32 = 6274;
pub const IDS_FULLSCREEN_HOLD_ESC_TO_EXIT_FULLSCREEN: u32 = 6275;
pub const IDS_REGISTER_PROTOCOL_HANDLER_MAILTO_NAME: u32 = 6276;
pub const IDS_REGISTER_PROTOCOL_HANDLER_WEBCAL_NAME: u32 = 6277;
pub const IDS_REGISTER_PROTOCOL_HANDLER_CONFIRM: u32 = 6278;
pub const IDS_REGISTER_PROTOCOL_HANDLER_CONFIRM_REPLACE: u32 = 6279;
pub const IDS_REGISTER_PROTOCOL_HANDLER_CONFIRM_FRAGMENT: u32 = 6280;
pub const IDS_REGISTER_PROTOCOL_HANDLER_CONFIRM_REPLACE_FRAGMENT: u32 = 6281;
pub const IDS_REGISTER_PROTOCOL_HANDLER_ACCEPT: u32 = 6282;
pub const IDS_REGISTER_PROTOCOL_HANDLER_DENY: u32 = 6283;
pub const IDS_REGISTER_PROTOCOL_HANDLER_IGNORE: u32 = 6284;
pub const IDS_MEDIA_CAPTURE_AUDIO_AND_VIDEO_INFOBAR_TEXT: u32 = 6285;
pub const IDS_MEDIA_CAPTURE_AUDIO_ONLY_INFOBAR_TEXT: u32 = 6286;
pub const IDS_MEDIA_CAPTURE_VIDEO_ONLY_INFOBAR_TEXT: u32 = 6287;
pub const IDS_MEDIA_CAPTURE_SCREEN_INFOBAR_TEXT: u32 = 6288;
pub const IDS_MEDIA_CAPTURE_AUDIO_ONLY_PERMISSION_FRAGMENT: u32 = 6289;
pub const IDS_MEDIA_CAPTURE_VIDEO_ONLY_PERMISSION_FRAGMENT: u32 = 6290;
pub const IDS_SENSORS_ALLOWED_TOOLTIP: u32 = 6294;
pub const IDS_MOTION_SENSORS_ALLOWED_TOOLTIP: u32 = 6295;
pub const IDS_SENSORS_BLOCKED_TOOLTIP: u32 = 6296;
pub const IDS_MOTION_SENSORS_BLOCKED_TOOLTIP: u32 = 6297;
pub const IDS_BLOCKED_SENSORS_UNBLOCK: u32 = 6298;
pub const IDS_BLOCKED_SENSORS_NO_ACTION: u32 = 6299;
pub const IDS_ALLOWED_SENSORS_TITLE: u32 = 6300;
pub const IDS_BLOCKED_SENSORS_TITLE: u32 = 6301;
pub const IDS_ALLOWED_SENSORS_MESSAGE: u32 = 6302;
pub const IDS_ALLOWED_MOTION_SENSORS_MESSAGE: u32 = 6303;
pub const IDS_BLOCKED_SENSORS_MESSAGE: u32 = 6304;
pub const IDS_BLOCKED_MOTION_SENSORS_MESSAGE: u32 = 6305;
pub const IDS_ALLOWED_SENSORS_NO_ACTION: u32 = 6306;
pub const IDS_ALLOWED_SENSORS_BLOCK: u32 = 6307;
pub const IDS_REQUEST_QUOTA_INFOBAR_TEXT: u32 = 6308;
pub const IDS_REQUEST_LARGE_QUOTA_INFOBAR_TEXT: u32 = 6309;
pub const IDS_REQUEST_QUOTA_PERMISSION_FRAGMENT: u32 = 6311;
pub const IDS_HIGH_CONTRAST_TITLE: u32 = 6316;
pub const IDS_HIGH_CONTRAST_HEADER: u32 = 6317;
pub const IDS_HIGH_CONTRAST_EXT: u32 = 6318;
pub const IDS_DARK_THEME: u32 = 6319;
pub const IDS_METRO_FLOW_DESCRIPTION: u32 = 6320;
pub const IDS_METRO_FLOW_SET_DEFAULT: u32 = 6321;
pub const IDS_MEDIA_GALLERIES_DIALOG_HEADER: u32 = 6322;
pub const IDS_MEDIA_GALLERIES_DIALOG_SUBTEXT_READ_WRITE: u32 = 6323;
pub const IDS_MEDIA_GALLERIES_DIALOG_SUBTEXT_READ_DELETE: u32 = 6324;
pub const IDS_MEDIA_GALLERIES_DIALOG_SUBTEXT_READ_ONLY: u32 = 6325;
pub const IDS_MEDIA_GALLERIES_PERMISSION_SUGGESTIONS: u32 = 6326;
pub const IDS_MEDIA_GALLERIES_LAST_ATTACHED: u32 = 6327;
pub const IDS_MEDIA_GALLERIES_DIALOG_ADD_GALLERY: u32 = 6328;
pub const IDS_MEDIA_GALLERIES_DIALOG_CANCEL: u32 = 6329;
pub const IDS_MEDIA_GALLERIES_DIALOG_CONFIRM: u32 = 6330;
pub const IDS_MEDIA_GALLERIES_DIALOG_ADD_GALLERY_TITLE: u32 = 6331;
pub const IDS_MEDIA_GALLERIES_DIALOG_DEVICE_ATTACHED: u32 = 6332;
pub const IDS_MEDIA_GALLERIES_DIALOG_DEVICE_NOT_ATTACHED: u32 = 6333;
pub const IDS_MEDIA_GALLERIES_DIALOG_DELETE: u32 = 6334;
pub const IDS_IDENTITY_INTERNALS_TOKEN_CACHE_TEXT: u32 = 6352;
pub const IDS_IDENTITY_INTERNALS_ACCESS_TOKEN: u32 = 6353;
pub const IDS_IDENTITY_INTERNALS_EXTENSION_NAME: u32 = 6354;
pub const IDS_IDENTITY_INTERNALS_EXTENSION_ID: u32 = 6355;
pub const IDS_IDENTITY_INTERNALS_TOKEN_STATUS: u32 = 6356;
pub const IDS_IDENTITY_INTERNALS_TOKEN_NOT_FOUND: u32 = 6357;
pub const IDS_IDENTITY_INTERNALS_TOKEN_PRESENT: u32 = 6358;
pub const IDS_IDENTITY_INTERNALS_EXPIRATION_TIME: u32 = 6359;
pub const IDS_IDENTITY_INTERNALS_SCOPES: u32 = 6360;
pub const IDS_IDENTITY_INTERNALS_REVOKE: u32 = 6361;
pub const IDS_CHROME_SHORTCUT_DESCRIPTION: u32 = 6362;
pub const IDS_WEBSTORE_NAME_STORE: u32 = 173;
pub const IDS_DESKTOP_MEDIA_PICKER_TITLE: u32 = 6363;
pub const IDS_DESKTOP_MEDIA_PICKER_TITLE_SCREEN_ONLY: u32 = 6364;
pub const IDS_DESKTOP_MEDIA_PICKER_TITLE_WINDOW_ONLY: u32 = 6365;
pub const IDS_DESKTOP_MEDIA_PICKER_TEXT: u32 = 6366;
pub const IDS_DESKTOP_MEDIA_PICKER_TEXT_DELEGATED: u32 = 6367;
pub const IDS_DESKTOP_MEDIA_PICKER_AUDIO_SHARE: u32 = 6368;
pub const IDS_DESKTOP_MEDIA_PICKER_SOURCE_TYPE_SCREEN: u32 = 6369;
pub const IDS_DESKTOP_MEDIA_PICKER_SOURCE_TYPE_WINDOW: u32 = 6370;
pub const IDS_DESKTOP_MEDIA_PICKER_SINGLE_SCREEN_NAME: u32 = 6371;
pub const IDS_DESKTOP_MEDIA_PICKER_MULTIPLE_SCREEN_NAME: u32 = 6372;
pub const IDS_LOCAL_DISCOVERY_SERVICE_REGISTER: u32 = 6373;
pub const IDS_LOCAL_DISCOVERY_MANAGE_DEVICE: u32 = 6374;
pub const IDS_LOCAL_DISCOVERY_NOTIFICATION_TITLE_PRINTER: u32 = 6375;
pub const IDS_LOCAL_DISCOVERY_NOTIFICATION_CONTENTS_PRINTER: u32 = 6376;
pub const IDS_LOCAL_DISCOVERY_SERVICE_NAME_PRINTER: u32 = 6377;
pub const IDS_LOCAL_DISCOVERY_NOTIFICATION_BUTTON_PRINTER: u32 = 6378;
pub const IDS_LOCAL_DISCOVERY_DEVICES_PAGE_TITLE: u32 = 6379;
pub const IDS_LOCAL_DISCOVERY_REGISTER_USER: u32 = 6380;
pub const IDS_LOCAL_DISCOVERY_CONFIRM_REGISTRATION: u32 = 6381;
pub const IDS_LOCAL_DISCOVERY_ADDING_PRINTER: u32 = 6382;
pub const IDS_LOCAL_DISCOVERY_ERROR_OCURRED: u32 = 6383;
pub const IDS_LOCAL_DISCOVERY_ADDING_PRINTER_MESSAGE1: u32 = 6384;
pub const IDS_LOCAL_DISCOVERY_ADDING_PRINTER_MESSAGE2: u32 = 6385;
pub const IDS_LOCAL_DISCOVERY_ERROR_OCURRED_MESSAGE: u32 = 6386;
pub const IDS_LOCAL_DISCOVERY_NO_DESCRIPTION_PRINTER: u32 = 6387;
pub const IDS_LOCAL_DISCOVERY_NO_DESCRIPTION_DEVICE: u32 = 6388;
pub const IDS_LOCAL_DISCOVERY_PRINTERS_ON_NETWORK_ZERO: u32 = 6389;
pub const IDS_LOCAL_DISCOVERY_PRINTERS_ON_NETWORK_ONE: u32 = 6390;
pub const IDS_LOCAL_DISCOVERY_PRINTERS_ON_NETWORK_MULTIPLE: u32 = 6391;
pub const IDS_LOCAL_DISCOVERY_LOADING: u32 = 6392;
pub const IDS_LOCAL_DISCOVERY_ADD_PRINTERS: u32 = 6393;
pub const IDS_LOCAL_DISCOVERY_NO_PRINTERS_ON_NETWORK_EXPLANATION: u32 = 6394;
pub const IDS_LOCAL_DISCOVERY_CLOUD_DEVICES_UNAVAILABLE: u32 = 6395;
pub const IDS_LOCAL_DISCOVERY_RETRY_LOAD_CLOUD_DEVICES: u32 = 6396;
pub const IDS_LOCAL_DISCOVERY_CLOUD_DEVICES_NEED_LOGIN: u32 = 6397;
pub const IDS_LOCAL_DISCOVERY_REGISTER_NEED_LOGIN: u32 = 6398;
pub const IDS_LOCAL_DISCOVERY_CLOUD_DEVICES_LOGIN: u32 = 6399;
pub const IDS_LOCAL_DISCOVERY_AVAILABLE_DEVICES: u32 = 6400;
pub const IDS_LOCAL_DISCOVERY_MY_DEVICES: u32 = 6401;
pub const IDS_LOCAL_DISCOVERY_CLOUD_PRINT_CONNECTOR_DISABLED_LABEL: u32 = 6402;
pub const IDS_LOCAL_DISCOVERY_CONNECTOR_SECTION: u32 = 6403;
pub const IDS_LOCAL_DISCOVERY_NOTIFICATIONS_DISABLE_BUTTON_LABEL: u32 = 6404;
pub const IDS_LOCAL_DISCOVERY_REGISTER_CANCELED_ON_PRINTER: u32 = 6405;
pub const IDS_LOCAL_DISCOVERY_REGISTER_TIMEOUT_ON_PRINTER: u32 = 6406;
pub const IDS_CLOUD_PRINT_REGISTER_PRINTER_INFORMATION: u32 = 6407;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_MEDIA_RECORDING: u32 = 6408;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_TAB_CAPTURING: u32 = 6409;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_AUDIO_PLAYING: u32 = 6410;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_AUDIO_MUTING: u32 = 6411;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_BLUETOOTH_CONNECTED: u32 = 6412;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_USB_CONNECTED: u32 = 6413;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_SERIAL_CONNECTED: u32 = 6414;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_PIP_PLAYING: u32 = 6415;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_DESKTOP_CAPTURING: u32 = 6416;
pub const IDS_TOOLTIP_TAB_ALERT_STATE_VR_PRESENTING: u32 = 6417;
pub const IDS_TAB_AX_LABEL_MEDIA_RECORDING_FORMAT: u32 = 6418;
pub const IDS_TAB_AX_LABEL_TAB_CAPTURING_FORMAT: u32 = 6419;
pub const IDS_TAB_AX_LABEL_PIP_PLAYING_FORMAT: u32 = 6420;
pub const IDS_TAB_AX_LABEL_AUDIO_PLAYING_FORMAT: u32 = 6421;
pub const IDS_TAB_AX_LABEL_AUDIO_MUTING_FORMAT: u32 = 6422;
pub const IDS_TAB_AX_LABEL_BLUETOOTH_CONNECTED_FORMAT: u32 = 6423;
pub const IDS_TAB_AX_LABEL_USB_CONNECTED_FORMAT: u32 = 6424;
pub const IDS_TAB_AX_LABEL_SERIAL_CONNECTED_FORMAT: u32 = 6425;
pub const IDS_TAB_AX_LABEL_NETWORK_ERROR_FORMAT: u32 = 6426;
pub const IDS_TAB_AX_LABEL_CRASHED_FORMAT: u32 = 6427;
pub const IDS_TAB_AX_LABEL_DESKTOP_CAPTURING_FORMAT: u32 = 6428;
pub const IDS_TAB_AX_LABEL_VR_PRESENTING: u32 = 6429;
pub const IDS_PROFILE_IN_USE_LINUX_QUIT: u32 = 6430;
pub const IDS_PROFILE_IN_USE_LINUX_RELAUNCH: u32 = 6431;
pub const IDS_DESKTOP_MEDIA_PICKER_SHARE: u32 = 6441;
pub const IDS_PUSH_MESSAGING_GENERIC_NOTIFICATION_BODY: u32 = 6442;
pub const IDS_DEVICE_PERMISSIONS_DIALOG_SELECT: u32 = 6443;
pub const IDS_DEVICE_LOG_TITLE: u32 = 6444;
pub const IDS_DEVICE_AUTO_REFRESH: u32 = 6445;
pub const IDS_DEVICE_LOG_REFRESH: u32 = 6446;
pub const IDS_DEVICE_LOG_LEVEL_SHOW: u32 = 6447;
pub const IDS_DEVICE_LOG_LEVEL_ERROR: u32 = 6448;
pub const IDS_DEVICE_LOG_LEVEL_USER: u32 = 6449;
pub const IDS_DEVICE_LOG_LEVEL_EVENT: u32 = 6450;
pub const IDS_DEVICE_LOG_LEVEL_DEBUG: u32 = 6451;
pub const IDS_DEVICE_LOG_TYPE_LOGIN: u32 = 6452;
pub const IDS_DEVICE_LOG_TYPE_NETWORK: u32 = 6453;
pub const IDS_DEVICE_LOG_TYPE_POWER: u32 = 6454;
pub const IDS_DEVICE_LOG_TYPE_BLUETOOTH: u32 = 6455;
pub const IDS_DEVICE_LOG_TYPE_USB: u32 = 6456;
pub const IDS_DEVICE_LOG_TYPE_HID: u32 = 6457;
pub const IDS_DEVICE_LOG_TYPE_PRINTER: u32 = 6458;
pub const IDS_DEVICE_LOG_TYPE_FIDO: u32 = 6459;
pub const IDS_DEVICE_LOG_FILEINFO: u32 = 6460;
pub const IDS_DEVICE_LOG_TIME_DETAIL: u32 = 6461;
pub const IDS_DEVICE_LOG_ENTRY: u32 = 6462;
pub const IDS_WEBUSB_DEVICE_DETECTED_NOTIFICATION: u32 = 6468;
pub const IDS_WEBUSB_DEVICE_DETECTED_NOTIFICATION_TITLE: u32 = 6469;
pub const IDS_DEFAULT_AUDIO_DEVICE_NAME: u32 = 6475;
pub const IDS_COMMUNICATIONS_AUDIO_DEVICE_NAME: u32 = 6476;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_PROMPT_ORIGIN: u32 = 6477;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_PROMPT_EXTENSION_NAME: u32 = 6478;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_NO_DEVICES_FOUND_PROMPT: u32 = 6479;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_TURN_ADAPTER_OFF: u32 = 6480;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_TURN_ON_BLUETOOTH_LINK_TEXT: u32 = 6481;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_SCANNING: u32 = 6482;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_RE_SCAN: u32 = 6483;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_RE_SCAN_TOOLTIP: u32 = 6484;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_SCANNING_LABEL: u32 = 6485;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_SCANNING_LABEL_TOOLTIP: u32 = 6486;
pub const IDS_BLUETOOTH_DEVICE_CHOOSER_PAIR_BUTTON_TEXT: u32 = 6487;
pub const IDS_DEVICE_CHOOSER_GET_HELP_LINK_WITH_SCANNING_STATUS: u32 = 6488;
pub const IDS_DEVICE_CHOOSER_GET_HELP_LINK_WITH_RE_SCAN_LINK: u32 = 6489;
pub const IDS_DEVICE_CHOOSER_PAIRED_STATUS_TEXT: u32 = 6490;
pub const IDS_DEVICE_CHOOSER_DEVICE_NAME_AND_PAIRED_STATUS_TEXT: u32 = 6491;
pub const IDS_USB_DEVICE_CHOOSER_PROMPT_ORIGIN: u32 = 6492;
pub const IDS_USB_DEVICE_CHOOSER_PROMPT_EXTENSION_NAME: u32 = 6493;
pub const IDS_DEVICE_CHOOSER_DEVICE_NAME_WITH_ID: u32 = 6494;
pub const IDS_DEVICE_CHOOSER_NO_DEVICES_FOUND_PROMPT: u32 = 6495;
pub const IDS_USB_DEVICE_CHOOSER_CONNECT_BUTTON_TEXT: u32 = 6496;
pub const IDS_DEVICE_CHOOSER_CANCEL_BUTTON_TEXT: u32 = 6497;
pub const IDS_DEVICE_CHOOSER_DEVICE_NAME_UNKNOWN_DEVICE_WITH_VENDOR_NAME: u32 = 6498;
pub const IDS_DEVICE_CHOOSER_DEVICE_NAME_UNKNOWN_DEVICE_WITH_VENDOR_ID_AND_PRODUCT_ID: u32 = 6499;
pub const IDS_BLUETOOTH_SCANNING_PROMPT_NO_DEVICES_FOUND_PROMPT: u32 = 6500;
pub const IDS_BLUETOOTH_SCANNING_PROMPT_ORIGIN: u32 = 6501;
pub const IDS_BLUETOOTH_SCANNING_PROMPT_ALLOW_BUTTON_TEXT: u32 = 6502;
pub const IDS_BLUETOOTH_SCANNING_PROMPT_BLOCK_BUTTON_TEXT: u32 = 6503;
pub const IDS_BLUETOOTH_SCANNING_DEVICE_UNKNOWN: u32 = 6504;
pub const IDS_DEVICE_DESCRIPTION_FOR_PRODUCT_ID_AND_VENDOR_NAME: u32 = 6505;
pub const IDS_DEVICE_DESCRIPTION_FOR_PRODUCT_ID_AND_VENDOR_ID: u32 = 6506;
pub const IDS_DEVICE_DESCRIPTION_FOR_VENDOR_ID: u32 = 6507;
pub const IDS_DEVICE_DESCRIPTION_FOR_VENDOR_NAME: u32 = 6508;
pub const IDS_DEVICE_DESCRIPTION_FOR_ANY_VENDOR: u32 = 6509;
pub const IDS_SERIAL_PORT_CHOOSER_PROMPT_ORIGIN: u32 = 6510;
pub const IDS_SERIAL_PORT_CHOOSER_PROMPT_EXTENSION_NAME: u32 = 6511;
pub const IDS_SERIAL_PORT_CHOOSER_NAME_WITH_PATH: u32 = 6512;
pub const IDS_SERIAL_PORT_CHOOSER_PATH_ONLY: u32 = 6513;
pub const IDS_SERIAL_PORT_CHOOSER_CONNECT_BUTTON_TEXT: u32 = 6514;
pub const IDS_HID_CHOOSER_PROMPT_ORIGIN: u32 = 6515;
pub const IDS_HID_CHOOSER_PROMPT_EXTENSION_NAME: u32 = 6516;
pub const IDS_HID_CHOOSER_ITEM_WITHOUT_NAME: u32 = 6517;
pub const IDS_HID_CHOOSER_ITEM_WITH_NAME: u32 = 6518;
pub const IDS_IME_API_ACTIVATED_WARNING: u32 = 6519;
pub const IDS_IME_API_NEVER_SHOW: u32 = 6520;
pub const IDS_ALWAYS_ALLOW_ADS: u32 = 6521;
pub const IDS_BLOCKED_ADS_INFOBAR_MESSAGE: u32 = 6522;
pub const IDS_BLOCKED_ADS_PROMPT_TITLE: u32 = 6523;
pub const IDS_BLOCKED_ADS_PROMPT_EXPLANATION: u32 = 6524;
pub const IDS_BLOCKED_ADS_PROMPT_TOOLTIP: u32 = 6525;
pub const IDS_UTILITY_PROCESS_UTILITY_WIN_NAME: u32 = 6526;
pub const IDS_UTILITY_PROCESS_QUARANTINE_SERVICE_NAME: u32 = 6527;
pub const IDS_REDIRECT_BLOCKED_MESSAGE: u32 = 6528;
pub const IDS_REDIRECT_BLOCKED_TITLE: u32 = 6529;
pub const IDS_REDIRECT_BLOCKED_TOOLTIP: u32 = 6530;
pub const IDS_WELCOME_SUBHEADER: u32 = 6531;
pub const IDS_WELCOME_DESCRIPTION: u32 = 6532;
pub const IDS_WELCOME_ACCEPT_BUTTON: u32 = 6533;
pub const IDS_WELCOME_DECLINE_BUTTON: u32 = 6534;
pub const IDS_WIN10_TOAST_BROWSE_FAST: u32 = 6535;
pub const IDS_WIN10_TOAST_BROWSE_SAFELY: u32 = 6536;
pub const IDS_WIN10_TOAST_BROWSE_SMART: u32 = 6537;
pub const IDS_WIN10_TOAST_SWITCH_FAST: u32 = 6538;
pub const IDS_WIN10_TOAST_SWITCH_SMART: u32 = 6539;
pub const IDS_WIN10_TOAST_SWITCH_SECURE: u32 = 6540;
pub const IDS_WIN10_TOAST_SWITCH_SMART_AND_SECURE: u32 = 6541;
pub const IDS_WIN10_TOAST_RECOMMENDATION: u32 = 6542;
pub const IDS_WIN10_TOAST_OPEN_CHROME: u32 = 6543;
pub const IDS_WIN10_TOAST_NO_THANKS: u32 = 6544;
pub const IDS_WIN10_WELCOME_OPEN_SETTINGS: u32 = 6545;
pub const IDS_WIN10_WELCOME_CLICK_EDGE: u32 = 6546;
pub const IDS_WIN10_WELCOME_SWITCH_ANYWAY_LABEL: u32 = 6547;
pub const IDS_WIN10_WELCOME_RIGHT_CLICK_TASKBAR: u32 = 6548;
pub const IDS_WIN10_WELCOME_PIN_INSTRUCTION: u32 = 6549;
pub const IDS_WIN10_WELCOME_PIN_LABEL: u32 = 6550;
pub const IDS_WIN10_WELCOME_CONTINUE: u32 = 6551;
pub const IDS_NTP_DOWNLOAD_SUGGESTIONS_SECTION_HEADER: u32 = 6554;
pub const IDS_NTP_DOWNLOADS_SUGGESTIONS_SECTION_EMPTY: u32 = 6555;
pub const IDS_CONTROLLED_BY_AUTOMATION: u32 = 6556;
pub const IDS_SECURITY_KEY_ATTESTATION_PERMISSION_FRAGMENT: u32 = 6557;
pub const IDS_VIDEO_CALL_NOTIFICATION_TEXT_2: u32 = 6559;
pub const IDS_AUDIO_CALL_NOTIFICATION_TEXT_2: u32 = 6560;
pub const IDS_VIDEO_AUDIO_CALL_NOTIFICATION_TEXT_2: u32 = 6561;
pub const IDS_VIDEO_CALL_INCOGNITO_NOTIFICATION_TEXT_2: u32 = 6562;
pub const IDS_AUDIO_CALL_INCOGNITO_NOTIFICATION_TEXT_2: u32 = 6563;
pub const IDS_VIDEO_AUDIO_CALL_INCOGNITO_NOTIFICATION_TEXT_2: u32 = 6564;
pub const IDS_DOWNLOAD_OPEN_CONFIRMATION_DIALOG_TITLE: u32 = 6565;
pub const IDS_DOWNLOAD_OPEN_CONFIRMATION_DIALOG_MESSAGE: u32 = 6566;
pub const IDS_CONFIRM_FILE_UPLOAD_TITLE: u32 = 6567;
pub const IDS_CONFIRM_FILE_UPLOAD_TEXT: u32 = 6568;
pub const IDS_CONFIRM_FILE_UPLOAD_OK_BUTTON: u32 = 6569;
pub const IDS_RELAUNCH_ACCEPT_BUTTON: u32 = 6570;
pub const IDS_RELAUNCH_REQUIRED_CANCEL_BUTTON: u32 = 6571;
pub const IDS_WEBAUTHN_GENERIC_TITLE: u32 = 6572;
pub const IDS_WEBAUTHN_WELCOME_SCREEN_TITLE: u32 = 6573;
pub const IDS_WEBAUTHN_WELCOME_SCREEN_DESCRIPTION: u32 = 6574;
pub const IDS_WEBAUTHN_WELCOME_SCREEN_NEXT: u32 = 6575;
pub const IDS_WEBAUTHN_TRANSPORT_SELECTION_TITLE: u32 = 6576;
pub const IDS_WEBAUTHN_TRANSPORT_SELECTION_DESCRIPTION: u32 = 6577;
pub const IDS_WEBAUTHN_TRANSPORT_BLE: u32 = 6578;
pub const IDS_WEBAUTHN_TRANSPORT_USB: u32 = 6579;
pub const IDS_WEBAUTHN_TRANSPORT_NFC: u32 = 6580;
pub const IDS_WEBAUTHN_TRANSPORT_INTERNAL: u32 = 6581;
pub const IDS_WEBAUTHN_TRANSPORT_CABLE: u32 = 6582;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_DIFFERENT_AUTHENTICATOR_WIN: u32 = 6583;
pub const IDS_WEBAUTHN_USB_ACTIVATE_DESCRIPTION: u32 = 6584;
pub const IDS_WEBAUTHN_ERROR_GENERIC_TITLE: u32 = 6585;
pub const IDS_WEBAUTHN_ERROR_WRONG_KEY_TITLE: u32 = 6586;
pub const IDS_WEBAUTHN_ERROR_WRONG_KEY_REGISTER_DESCRIPTION: u32 = 6587;
pub const IDS_WEBAUTHN_ERROR_WRONG_KEY_SIGN_DESCRIPTION: u32 = 6588;
pub const IDS_WEBAUTHN_ERROR_TIMEOUT_DESCRIPTION: u32 = 6589;
pub const IDS_WEBAUTHN_ERROR_INTERNAL_UNRECOGNIZED_TITLE: u32 = 6590;
pub const IDS_WEBAUTHN_ERROR_INTERNAL_UNRECOGNIZED_DESCRIPTION: u32 = 6591;
pub const IDS_WEBAUTHN_ERROR_NO_TRANSPORTS_TITLE: u32 = 6592;
pub const IDS_WEBAUTHN_ERROR_NO_TRANSPORTS_DESCRIPTION: u32 = 6593;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_AUTO_TITLE: u32 = 6594;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_AUTO_DESCRIPTION: u32 = 6595;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_AUTO_NEXT: u32 = 6596;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_MANUAL_TITLE: u32 = 6597;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_MANUAL_DESCRIPTION: u32 = 6598;
pub const IDS_WEBAUTHN_BLUETOOTH_POWER_ON_MANUAL_NEXT: u32 = 6599;
pub const IDS_WEBAUTHN_BLE_PAIRING_BEGIN_TITLE: u32 = 6600;
pub const IDS_WEBAUTHN_BLE_PAIRING_BEGIN_DESCRIPTION: u32 = 6601;
pub const IDS_WEBAUTHN_BLE_PAIRING_BEGIN_NEXT: u32 = 6602;
pub const IDS_WEBAUTHN_BLE_ENTER_PAIRING_MODE_TITLE: u32 = 6603;
pub const IDS_WEBAUTHN_BLE_ENTER_PAIRING_MODE_DESCRIPTION: u32 = 6604;
pub const IDS_WEBAUTHN_BLE_DEVICE_SELECTION_TITLE: u32 = 6605;
pub const IDS_WEBAUTHN_BLE_DEVICE_SELECTION_DESCRIPTION: u32 = 6606;
pub const IDS_WEBAUTHN_BLE_DEVICE_SELECTION_SEARCHING_LABEL: u32 = 6607;
pub const IDS_WEBAUTHN_BLE_DEVICE_SELECTION_REMINDER_LABEL: u32 = 6608;
pub const IDS_WEBAUTHN_BLE_PIN_ENTRY_TITLE: u32 = 6609;
pub const IDS_WEBAUTHN_BLE_PIN_ENTRY_DESCRIPTION: u32 = 6610;
pub const IDS_WEBAUTHN_BLE_PIN_ENTRY_PIN_LABEL: u32 = 6611;
pub const IDS_WEBAUTHN_BLE_PIN_ENTRY_NEXT: u32 = 6612;
pub const IDS_WEBAUTHN_BLE_VERIFYING_TITLE: u32 = 6613;
pub const IDS_WEBAUTHN_BLE_ACTIVATE_DESCRIPTION: u32 = 6614;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_LABEL: u32 = 6615;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_USB: u32 = 6616;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_BLE: u32 = 6617;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_ANOTHER_BLE: u32 = 6618;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_NFC: u32 = 6619;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_INTERNAL: u32 = 6620;
pub const IDS_WEBAUTHN_TRANSPORT_POPUP_CABLE: u32 = 6621;
pub const IDS_WEBAUTHN_CABLE_ACTIVATE_TITLE: u32 = 6622;
pub const IDS_WEBAUTHN_CABLE_ACTIVATE_DESCRIPTION: u32 = 6623;
pub const IDS_WEBAUTHN_PIN_ENTRY_TITLE: u32 = 6624;
pub const IDS_WEBAUTHN_PIN_ENTRY_DESCRIPTION: u32 = 6625;
pub const IDS_WEBAUTHN_PIN_ENTRY_PIN_LABEL: u32 = 6626;
pub const IDS_WEBAUTHN_PIN_ENTRY_NEXT: u32 = 6627;
pub const IDS_WEBAUTHN_PIN_SETUP_DESCRIPTION: u32 = 6628;
pub const IDS_WEBAUTHN_PIN_SETUP_CONFIRMATION_LABEL: u32 = 6629;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_INVALID_CHARACTERS: u32 = 6630;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_TOO_SHORT: u32 = 6631;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_FAILED_RETRIES: u32 = 6632;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_FAILED: u32 = 6633;
pub const IDS_WEBAUTHN_PIN_SETUP_ERROR_FAILED: u32 = 6634;
pub const IDS_WEBAUTHN_PIN_TAP_AGAIN_DESCRIPTION: u32 = 6635;
pub const IDS_WEBAUTHN_PIN_ENTRY_ERROR_MISMATCH: u32 = 6636;
pub const IDS_WEBAUTHN_CLIENT_PIN_SOFT_BLOCK_DESCRIPTION: u32 = 6637;
pub const IDS_WEBAUTHN_CLIENT_PIN_HARD_BLOCK_DESCRIPTION: u32 = 6638;
pub const IDS_WEBAUTHN_CLIENT_PIN_AUTHENTICATOR_REMOVED_DESCRIPTION: u32 = 6639;
pub const IDS_WEBAUTHN_ACCOUNT_COLUMN: u32 = 6640;
pub const IDS_WEBAUTHN_NAME_COLUMN: u32 = 6641;
pub const IDS_WEBAUTHN_SELECT_ACCOUNT: u32 = 6642;
pub const IDS_WEBAUTHN_UNKNOWN_ACCOUNT: u32 = 6643;
pub const IDS_WEBAUTHN_RESIDENT_KEY_PRIVACY: u32 = 6644;
pub const IDS_WEBAUTHN_ERROR_MISSING_CAPABILITY_TITLE: u32 = 6645;
pub const IDS_WEBAUTHN_ERROR_MISSING_CAPABILITY_DESC: u32 = 6646;
pub const IDS_WEBAUTHN_STORAGE_FULL_DESC: u32 = 6647;
pub const IDS_WEBAUTHN_REQUEST_ATTESTATION_PERMISSION_TITLE: u32 = 6648;
pub const IDS_WEBAUTHN_REQUEST_ATTESTATION_PERMISSION_DESC: u32 = 6649;
pub const IDS_WEBAUTHN_ALLOW_ATTESTATION: u32 = 6650;
pub const IDS_INCOGNITO_PROFILE_MENU_TITLE: u32 = 6654;
pub const IDS_INCOGNITO_WINDOW_COUNT_MESSAGE: u32 = 6655;
pub const IDS_INCOGNITO_PROFILE_MENU_CLOSE_BUTTON: u32 = 6656;
pub const IDS_SPELLCHECK_DICTIONARY: u32 = 165;
pub const IDS_EXTENSION_WIPEOUT_BUBBLE_WIDTH_CHARS: u32 = 10000;
pub const IDS_EXTENSION_TOOLBAR_REDESIGN_NOTIFICATION_BUBBLE_WIDTH_CHARS: u32 = 10001;
pub const IDS_EDITBOOKMARK_DIALOG_WIDTH_CHARS: u32 = 10006;
pub const IDS_EDITBOOKMARK_DIALOG_HEIGHT_LINES: u32 = 10007;
pub const IDS_DOWNLOAD_BIG_PROGRESS_SIZE: u32 = 10008;
pub const IDS_THEMES_GALLERY_URL: u32 = 10009;
pub const IDS_WEBSTORE_URL: u32 = 224;
pub const IDS_FLASH_STORAGE_URL: u32 = 10010;
pub const IDS_FLASH_GLOBAL_PRIVACY_URL: u32 = 10011;
pub const IDS_FLASH_WEBSITE_PRIVACY_URL: u32 = 10012;
pub const IDS_SYNC_UNRECOVERABLE_ERROR_HELP_URL: u32 = 10013;
pub const IDS_CREATE_SHORTCUTS_DIALOG_WIDTH_CHARS: u32 = 10014;
pub const IDS_METRO_FLOW_WIDTH_CHARS: u32 = 10015;
pub const IDS_METRO_FLOW_HEIGHT_LINES: u32 = 10016;
pub const IDS_MEDIA_GALLERIES_DIALOG_CONTENT_WIDTH_CHARS: u32 = 10017;
pub const IDS_SETTINGS_CLEAR_DATA_MYACTIVITY_URL_IN_DIALOG: u32 = 10021;
pub const IDS_SETTINGS_CLEAR_DATA_MYACTIVITY_URL_IN_HISTORY: u32 = 10022;
pub const IDS_STANDARD_FONT_FAMILY: u32 = 124;
pub const IDS_FIXED_FONT_FAMILY: u32 = 125;
pub const IDS_FIXED_FONT_FAMILY_ALT_WIN: u32 = 126;
pub const IDS_SERIF_FONT_FAMILY: u32 = 127;
pub const IDS_SANS_SERIF_FONT_FAMILY: u32 = 128;
pub const IDS_NTP_FONT_FAMILY: u32 = 307;
pub const IDS_CURSIVE_FONT_FAMILY: u32 = 129;
pub const IDS_FANTASY_FONT_FAMILY: u32 = 130;
pub const IDS_PICTOGRAPH_FONT_FAMILY: u32 = 131;
pub const IDS_STANDARD_FONT_FAMILY_CYRILLIC: u32 = 149;
pub const IDS_FIXED_FONT_FAMILY_ARABIC: u32 = 147;
pub const IDS_FIXED_FONT_FAMILY_CYRILLIC: u32 = 150;
pub const IDS_SANS_SERIF_FONT_FAMILY_ARABIC: u32 = 148;
pub const IDS_SERIF_FONT_FAMILY_CYRILLIC: u32 = 151;
pub const IDS_SANS_SERIF_FONT_FAMILY_CYRILLIC: u32 = 152;
pub const IDS_STANDARD_FONT_FAMILY_GREEK: u32 = 153;
pub const IDS_FIXED_FONT_FAMILY_GREEK: u32 = 154;
pub const IDS_SERIF_FONT_FAMILY_GREEK: u32 = 155;
pub const IDS_SANS_SERIF_FONT_FAMILY_GREEK: u32 = 156;
pub const IDS_STANDARD_FONT_FAMILY_JAPANESE: u32 = 132;
pub const IDS_FIXED_FONT_FAMILY_JAPANESE: u32 = 133;
pub const IDS_SERIF_FONT_FAMILY_JAPANESE: u32 = 134;
pub const IDS_SANS_SERIF_FONT_FAMILY_JAPANESE: u32 = 135;
pub const IDS_STANDARD_FONT_FAMILY_KOREAN: u32 = 136;
pub const IDS_FIXED_FONT_FAMILY_KOREAN: u32 = 157;
pub const IDS_SERIF_FONT_FAMILY_KOREAN: u32 = 137;
pub const IDS_SANS_SERIF_FONT_FAMILY_KOREAN: u32 = 138;
pub const IDS_CURSIVE_FONT_FAMILY_KOREAN: u32 = 158;
pub const IDS_STANDARD_FONT_FAMILY_SIMPLIFIED_HAN: u32 = 139;
pub const IDS_FIXED_FONT_FAMILY_SIMPLIFIED_HAN: u32 = 159;
pub const IDS_SERIF_FONT_FAMILY_SIMPLIFIED_HAN: u32 = 140;
pub const IDS_SANS_SERIF_FONT_FAMILY_SIMPLIFIED_HAN: u32 = 141;
pub const IDS_CURSIVE_FONT_FAMILY_SIMPLIFIED_HAN: u32 = 145;
pub const IDS_STANDARD_FONT_FAMILY_TRADITIONAL_HAN: u32 = 142;
pub const IDS_FIXED_FONT_FAMILY_TRADITIONAL_HAN: u32 = 160;
pub const IDS_SERIF_FONT_FAMILY_TRADITIONAL_HAN: u32 = 143;
pub const IDS_SANS_SERIF_FONT_FAMILY_TRADITIONAL_HAN: u32 = 144;
pub const IDS_CURSIVE_FONT_FAMILY_TRADITIONAL_HAN: u32 = 146;
pub const IDS_MINIMUM_FONT_SIZE: u32 = 163;
pub const IDS_MINIMUM_LOGICAL_FONT_SIZE: u32 = 164;
pub const IDS_TIME_SECS: u32 = 27350;
pub const IDS_TIME_LONG_SECS: u32 = 27351;
pub const IDS_TIME_LONG_SECS_2ND: u32 = 27352;
pub const IDS_TIME_MINS: u32 = 27353;
pub const IDS_TIME_LONG_MINS: u32 = 27354;
pub const IDS_TIME_LONG_MINS_1ST: u32 = 27355;
pub const IDS_TIME_LONG_MINS_2ND: u32 = 27356;
pub const IDS_TIME_HOURS: u32 = 27357;
pub const IDS_TIME_HOURS_1ST: u32 = 27358;
pub const IDS_TIME_HOURS_2ND: u32 = 27359;
pub const IDS_TIME_DAYS: u32 = 27360;
pub const IDS_TIME_DAYS_1ST: u32 = 27361;
pub const IDS_TIME_MONTHS: u32 = 27362;
pub const IDS_TIME_YEARS: u32 = 27363;
pub const IDS_TIME_REMAINING_SECS: u32 = 27364;
pub const IDS_TIME_REMAINING_LONG_SECS: u32 = 27365;
pub const IDS_TIME_REMAINING_MINS: u32 = 27366;
pub const IDS_TIME_REMAINING_LONG_MINS: u32 = 27367;
pub const IDS_TIME_REMAINING_HOURS: u32 = 27368;
pub const IDS_TIME_REMAINING_DAYS: u32 = 27369;
pub const IDS_TIME_REMAINING_MONTHS: u32 = 27370;
pub const IDS_TIME_REMAINING_YEARS: u32 = 27371;
pub const IDS_TIME_ELAPSED_SECS: u32 = 27372;
pub const IDS_TIME_ELAPSED_LONG_SECS: u32 = 27373;
pub const IDS_TIME_ELAPSED_MINS: u32 = 27374;
pub const IDS_TIME_ELAPSED_LONG_MINS: u32 = 27375;
pub const IDS_TIME_ELAPSED_HOURS: u32 = 27376;
pub const IDS_TIME_ELAPSED_DAYS: u32 = 27377;
pub const IDS_TIME_ELAPSED_MONTHS: u32 = 27378;
pub const IDS_TIME_ELAPSED_YEARS: u32 = 27379;
pub const IDS_PAST_TIME_TODAY: u32 = 27380;
pub const IDS_PAST_TIME_YESTERDAY: u32 = 27381;
pub const IDS_APP_MENU_EMPTY_SUBMENU: u32 = 27382;
pub const IDS_APP_UNTITLED_SHORTCUT_FILE_NAME: u32 = 27383;
pub const IDS_APP_SAVEAS_ALL_FILES: u32 = 27384;
pub const IDS_APP_SAVEAS_EXTENSION_FORMAT: u32 = 27385;
pub const IDS_SELECT_UPLOAD_FOLDER_DIALOG_TITLE: u32 = 27386;
pub const IDS_CONTENT_CONTEXT_WRITING_DIRECTION_MENU: u32 = 27394;
pub const IDS_CONTENT_CONTEXT_WRITING_DIRECTION_DEFAULT: u32 = 27395;
pub const IDS_CONTENT_CONTEXT_WRITING_DIRECTION_LTR: u32 = 27396;
pub const IDS_CONTENT_CONTEXT_WRITING_DIRECTION_RTL: u32 = 27397;
pub const IDS_SELECT_FOLDER_DIALOG_TITLE: u32 = 27398;
pub const IDS_SAVE_AS_DIALOG_TITLE: u32 = 27399;
pub const IDS_OPEN_FILE_DIALOG_TITLE: u32 = 27400;
pub const IDS_OPEN_FILES_DIALOG_TITLE: u32 = 27401;
pub const IDS_SAVEAS_ALL_FILES: u32 = 27402;
pub const IDS_SELECT_UPLOAD_FOLDER_DIALOG_UPLOAD_BUTTON: u32 = 27403;
pub const IDS_AX_ACTIVATE_ACTION_VERB: u32 = 27404;
pub const IDS_AX_CHECK_ACTION_VERB: u32 = 27405;
pub const IDS_AX_CLICK_ACTION_VERB: u32 = 27406;
pub const IDS_AX_CLICK_ANCESTOR_ACTION_VERB: u32 = 27407;
pub const IDS_AX_JUMP_ACTION_VERB: u32 = 27408;
pub const IDS_AX_OPEN_ACTION_VERB: u32 = 27409;
pub const IDS_AX_PRESS_ACTION_VERB: u32 = 27410;
pub const IDS_AX_SELECT_ACTION_VERB: u32 = 27411;
pub const IDS_AX_UNCHECK_ACTION_VERB: u32 = 27412;
pub const IDS_APP_ACCNAME_BACK: u32 = 27417;
pub const IDS_APP_ACCNAME_CLOSE: u32 = 184;
pub const IDS_APP_ACCNAME_MINIMIZE: u32 = 181;
pub const IDS_APP_ACCNAME_MAXIMIZE: u32 = 182;
pub const IDS_APP_ACCNAME_RESTORE: u32 = 183;
pub const IDS_APP_ACCNAME_MENU: u32 = 27418;
pub const IDS_APP_ACCNAME_COLOR_CHOOSER_HEX_INPUT: u32 = 27419;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLHERE: u32 = 27420;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLLEFTEDGE: u32 = 27421;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLRIGHTEDGE: u32 = 27422;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLHOME: u32 = 27423;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLEND: u32 = 27424;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLPAGEUP: u32 = 27425;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLPAGEDOWN: u32 = 27426;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLLEFT: u32 = 27427;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLRIGHT: u32 = 27428;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLUP: u32 = 27429;
pub const IDS_APP_SCROLLBAR_CXMENU_SCROLLDOWN: u32 = 27430;
pub const IDS_APP_UNDO: u32 = 27431;
pub const IDS_APP_CUT: u32 = 27432;
pub const IDS_APP_COPY: u32 = 191;
pub const IDS_APP_PASTE: u32 = 27433;
pub const IDS_APP_DELETE: u32 = 27434;
pub const IDS_APP_SELECT_ALL: u32 = 192;
pub const IDS_CONTENT_CONTEXT_EMOJI: u32 = 27435;
pub const IDS_APP_OK: u32 = 27436;
pub const IDS_APP_CANCEL: u32 = 27437;
pub const IDS_APP_CLOSE: u32 = 27438;
pub const IDS_APP_ESC_KEY: u32 = 27439;
pub const IDS_APP_TAB_KEY: u32 = 27440;
pub const IDS_APP_INSERT_KEY: u32 = 27441;
pub const IDS_APP_HOME_KEY: u32 = 27442;
pub const IDS_APP_DELETE_KEY: u32 = 27443;
pub const IDS_APP_END_KEY: u32 = 27444;
pub const IDS_APP_PAGEUP_KEY: u32 = 27445;
pub const IDS_APP_PAGEDOWN_KEY: u32 = 27446;
pub const IDS_APP_LEFT_ARROW_KEY: u32 = 27447;
pub const IDS_APP_RIGHT_ARROW_KEY: u32 = 27448;
pub const IDS_APP_UP_ARROW_KEY: u32 = 27449;
pub const IDS_APP_DOWN_ARROW_KEY: u32 = 27450;
pub const IDS_APP_ENTER_KEY: u32 = 27451;
pub const IDS_APP_SPACE_KEY: u32 = 27452;
pub const IDS_APP_F1_KEY: u32 = 27453;
pub const IDS_APP_F11_KEY: u32 = 27454;
pub const IDS_APP_BACKSPACE_KEY: u32 = 27455;
pub const IDS_APP_COMMA_KEY: u32 = 27456;
pub const IDS_APP_PERIOD_KEY: u32 = 27457;
pub const IDS_APP_MEDIA_NEXT_TRACK_KEY: u32 = 27458;
pub const IDS_APP_MEDIA_PLAY_PAUSE_KEY: u32 = 27459;
pub const IDS_APP_MEDIA_PREV_TRACK_KEY: u32 = 27460;
pub const IDS_APP_MEDIA_STOP_KEY: u32 = 27461;
pub const IDS_APP_ALT_KEY: u32 = 27462;
pub const IDS_APP_COMMAND_KEY: u32 = 27463;
pub const IDS_APP_CTRL_KEY: u32 = 27464;
pub const IDS_APP_SEARCH_KEY: u32 = 27465;
pub const IDS_APP_SHIFT_KEY: u32 = 27466;
pub const IDS_APP_WINDOWS_KEY: u32 = 27467;
pub const IDS_APP_ACCELERATOR_WITH_MODIFIER: u32 = 27468;
pub const IDS_APP_BYTES: u32 = 27469;
pub const IDS_APP_KIBIBYTES: u32 = 27470;
pub const IDS_APP_MEBIBYTES: u32 = 27471;
pub const IDS_APP_GIBIBYTES: u32 = 27472;
pub const IDS_APP_TEBIBYTES: u32 = 27473;
pub const IDS_APP_PEBIBYTES: u32 = 27474;
pub const IDS_APP_BYTES_PER_SECOND: u32 = 27475;
pub const IDS_APP_KIBIBYTES_PER_SECOND: u32 = 27476;
pub const IDS_APP_MEBIBYTES_PER_SECOND: u32 = 27477;
pub const IDS_APP_GIBIBYTES_PER_SECOND: u32 = 27478;
pub const IDS_APP_TEBIBYTES_PER_SECOND: u32 = 27479;
pub const IDS_APP_PEBIBYTES_PER_SECOND: u32 = 27480;
pub const IDS_MESSAGE_CENTER_ACCESSIBLE_NAME: u32 = 27481;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_ACCESSIBLE_NAME: u32 = 27482;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_ACCESSIBLE_NAME_PLURAL: u32 = 27483;
pub const IDS_MESSAGE_CENTER_EXPAND_NOTIFICATION: u32 = 27484;
pub const IDS_MESSAGE_CENTER_COLLAPSE_NOTIFICATION: u32 = 27485;
pub const IDS_MESSAGE_CENTER_LIST_NOTIFICATION_MESSAGE_WITH_DIVIDER: u32 = 27486;
pub const IDS_MESSAGE_CENTER_LIST_NOTIFICATION_HEADER_OVERFLOW_INDICATOR: u32 = 27487;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_PROGRESS_PERCENTAGE: u32 = 27488;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_CHROMEOS_SYSTEM: u32 = 27489;
pub const IDS_MESSAGE_CENTER_NOTIFICATION_INLINE_REPLY_PLACEHOLDER: u32 = 27490;
pub const IDS_MESSAGE_NOTIFICATION_NOW_STRING_SHORTEST: u32 = 27491;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_MINUTES_SHORTEST: u32 = 27492;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_HOURS_SHORTEST: u32 = 27493;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_DAYS_SHORTEST: u32 = 27494;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_YEARS_SHORTEST: u32 = 27495;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_MINUTES_SHORTEST_FUTURE: u32 = 27496;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_HOURS_SHORTEST_FUTURE: u32 = 27497;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_DAYS_SHORTEST_FUTURE: u32 = 27498;
pub const IDS_MESSAGE_NOTIFICATION_DURATION_YEARS_SHORTEST_FUTURE: u32 = 27499;
pub const IDS_MESSAGE_CENTER_BLOCK_ALL_NOTIFICATIONS_SITE: u32 = 27500;
pub const IDS_MESSAGE_CENTER_BLOCK_ALL_NOTIFICATIONS_APP: u32 = 27501;
pub const IDS_MESSAGE_CENTER_BLOCK_ALL_NOTIFICATIONS: u32 = 27502;
pub const IDS_MESSAGE_CENTER_DONT_BLOCK_NOTIFICATIONS: u32 = 27503;
pub const IDS_MESSAGE_CENTER_SETTINGS_DONE: u32 = 27504;
pub const IDS_MESSAGE_CENTER_CLOSE_NOTIFICATION_BUTTON_ACCESSIBLE_NAME: u32 = 27505;
pub const IDS_MESSAGE_CENTER_CLOSE_NOTIFICATION_BUTTON_TOOLTIP: u32 = 27506;
pub const IDS_MESSAGE_NOTIFICATION_SETTINGS_BUTTON_ACCESSIBLE_NAME: u32 = 27507;
pub const IDS_MESSAGE_NOTIFICATION_SEND_TAB_TO_SELF_DEVICE_INFO: u32 = 27508;
pub const IDS_MESSAGE_NOTIFICATION_SEND_TAB_TO_SELF_CONFIRMATION_SUCCESS: u32 = 27509;
pub const IDS_MESSAGE_NOTIFICATION_SEND_TAB_TO_SELF_CONFIRMATION_FAILURE_TITLE: u32 = 27510;
pub const IDS_MESSAGE_NOTIFICATION_SEND_TAB_TO_SELF_CONFIRMATION_FAILURE_MESSAGE: u32 = 27511;
pub const IDS_SUGGESTED_APPS_INDICATOR: u32 = 27516;
pub const IDS_FREQUENTLY_USED_INDICATOR: u32 = 27517;
pub const IDS_RECOMMENDED_APPS_INDICATOR: u32 = 27518;
pub const IDS_MOST_LIKELY_INDICATOR: u32 = 27519;
pub const IDS_APP_SUGGESTIONS_INDICATOR: u32 = 27520;
pub const IDS_ALL_APPS_INDICATOR: u32 = 27521;
pub const IDS_APP_LIST_APP_DRAG_LOCATION_ACCESSIBILE_NAME: u32 = 27522;
pub const IDS_APP_LIST_APP_DRAG_CREATE_FOLDER_ACCESSIBILE_NAME: u32 = 27523;
pub const IDS_APP_LIST_APP_DRAG_MOVE_TO_FOLDER_ACCESSIBILE_NAME: u32 = 27524;
pub const IDS_APP_LIST_BACK: u32 = 27525;
pub const IDS_APP_LIST_FOLDER_NAME_PLACEHOLDER: u32 = 27526;
pub const IDS_APP_LIST_SEARCH_BOX_AUTOCOMPLETE: u32 = 27527;
pub const IDS_APP_LIST_FOLDER_BUTTON_ACCESSIBILE_NAME: u32 = 27528;
pub const IDS_APP_LIST_FOLDER_OPEN_FOLDER_ACCESSIBILE_NAME: u32 = 27529;
pub const IDS_APP_LIST_FOLDER_CLOSE_FOLDER_ACCESSIBILE_NAME: u32 = 27530;
pub const IDS_APP_LIST_EXPAND_BUTTON: u32 = 27531;
pub const IDS_APP_LIST_ALL_APPS_ACCESSIBILITY_ANNOUNCEMENT: u32 = 27532;
pub const IDS_APP_LIST_SUGGESTED_APPS_ACCESSIBILITY_ANNOUNCEMENT: u32 = 27533;
pub const IDS_APP_LIST_CLEAR_SEARCHBOX: u32 = 27534;
pub const IDS_SHELF_ALIGNMENT_BOTTOM: u32 = 27535;
pub const IDS_SHELF_ALIGNMENT_LEFT: u32 = 27536;
pub const IDS_SHELF_ALIGNMENT_RIGHT: u32 = 27537;
pub const IDS_SHELF_STATE_ALWAYS_SHOWN: u32 = 27538;
pub const IDS_SHELF_STATE_ALWAYS_HIDDEN: u32 = 27539;
pub const IDS_SHELF_STATE_AUTO_HIDE: u32 = 27540;
pub const IDS_REMOVE_ZERO_STATE_SUGGESTION_TITLE: u32 = 27541;
pub const IDS_REMOVE_ZERO_STATE_SUGGESTION_DETAILS: u32 = 27542;
pub const IDS_REMOVE_SUGGESTION_BUTTON_LABEL: u32 = 27543;
pub const IDS_APP_LIST_START_ASSISTANT: u32 = 27544;
pub const IDS_APP_LIST_START_ASSISTANT_VOICE_QUERY: u32 = 27545;
pub const IDS_APP_LIST_PAGE_SWITCHER: u32 = 27546;
pub const IDS_APP_LIST_CONTINUE_READING_ACCESSIBILE_NAME: u32 = 27547;
pub const IDS_APP_LIST_LEARN_MORE: u32 = 27548;
pub const IDS_APP_LIST_ASSISTANT_PRIVACY_INFO: u32 = 27549;
pub const IDS_APP_LIST_ASSISTANT_PRIVACY_INFO_CLOSE: u32 = 27550;
pub const IDS_APP_ACCESSIBILITY_STAR_RATING_ARC: u32 = 27551;
pub const IDS_APP_ACCESSIBILITY_APP_RECOMMENDATION_ARC: u32 = 27552;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_EXIT_LABEL: u32 = 27553;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_HINT_LABEL_TEXT: u32 = 27554;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_HINT_SUBLABEL_TEXT: u32 = 27555;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_TAP_HERE_LABEL: u32 = 27556;
pub const IDS_DISPLAY_TOUCH_CALIBRATION_FINISH_LABEL: u32 = 27557;
pub const IDS_DISPLAY_NAME_UNKNOWN: u32 = 27558;
pub const IDS_DISPLAY_NAME_INTERNAL: u32 = 27559;
pub const IDS_CROSTINI_USE_LOW_DENSITY: u32 = 27560;
pub const IDS_CROSTINI_USE_HIGH_DENSITY: u32 = 27561;
pub const IDS_CROSTINI_APP_RESTART_BODY: u32 = 27562;
pub const IDS_CROSTINI_APP_RESTART_BUTTON: u32 = 27563;
pub const IDS_CROSTINI_NOT_NOW_BUTTON: u32 = 27564;
pub const IDS_SATURATED_BADGE_CONTENT: u32 = 27565;
pub const IDS_BADGE_UNREAD_NOTIFICATIONS_SATURATED: u32 = 27566;
pub const IDS_BADGE_UNREAD_NOTIFICATIONS_UNSPECIFIED: u32 = 27567;
pub const IDS_BADGE_UNREAD_NOTIFICATIONS: u32 = 27568;
pub const IDS_SEND_TAB_TO_SELF_INFOBAR_MESSAGE: u32 = 27569;
pub const IDS_SEND_TAB_TO_SELF_INFOBAR_MESSAGE_URL: u32 = 27570;
extern "C" {
    pub static mut __security_cookie: usize;
}
#[repr(C)]
#[derive(Default)]
pub struct std_nothrow_t {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_nothrow_t() {
    assert_eq!(
        ::std::mem::size_of::<std_nothrow_t>(),
        1usize,
        concat!("Size of: ", stringify!(std_nothrow_t))
    );
    assert_eq!(
        ::std::mem::align_of::<std_nothrow_t>(),
        1usize,
        concat!("Alignment of ", stringify!(std_nothrow_t))
    );
}
extern "C" {
    #[link_name = "\u{1}?nothrow@std@@3Unothrow_t@1@B"]
    pub static std_nothrow: std_nothrow_t;
}
pub const std__FNV_offset_basis: usize = 14695981039346656037;
pub const std__FNV_prime: usize = 1099511628211;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_float_denorm_style {
    denorm_indeterminate = -1,
    denorm_absent = 0,
    denorm_present = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_float_round_style {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3,
}
extern "C" {
    #[link_name = "\u{1}?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B"]
    pub static std__Num_base_has_denorm: std_float_denorm_style;
}
pub const std__Num_base_has_denorm_loss: bool = false;
pub const std__Num_base_has_infinity: bool = false;
pub const std__Num_base_has_quiet_NaN: bool = false;
pub const std__Num_base_has_signaling_NaN: bool = false;
pub const std__Num_base_is_bounded: bool = false;
pub const std__Num_base_is_exact: bool = false;
pub const std__Num_base_is_iec559: bool = false;
pub const std__Num_base_is_integer: bool = false;
pub const std__Num_base_is_modulo: bool = false;
pub const std__Num_base_is_signed: bool = false;
pub const std__Num_base_is_specialized: bool = false;
pub const std__Num_base_tinyness_before: bool = false;
pub const std__Num_base_traps: bool = false;
extern "C" {
    #[link_name = "\u{1}?round_style@_Num_base@std@@2W4float_round_style@2@B"]
    pub static std__Num_base_round_style: std_float_round_style;
}
pub const std__Num_base_digits: ::std::os::raw::c_int = 0;
pub const std__Num_base_digits10: ::std::os::raw::c_int = 0;
pub const std__Num_base_max_digits10: ::std::os::raw::c_int = 0;
pub const std__Num_base_max_exponent: ::std::os::raw::c_int = 0;
pub const std__Num_base_max_exponent10: ::std::os::raw::c_int = 0;
pub const std__Num_base_min_exponent: ::std::os::raw::c_int = 0;
pub const std__Num_base_min_exponent10: ::std::os::raw::c_int = 0;
pub const std__Num_base_radix: ::std::os::raw::c_int = 0;
pub const std__Num_int_base_is_bounded: bool = true;
pub const std__Num_int_base_is_exact: bool = true;
pub const std__Num_int_base_is_integer: bool = true;
pub const std__Num_int_base_is_specialized: bool = true;
pub const std__Num_int_base_radix: ::std::os::raw::c_int = 2;
extern "C" {
    #[link_name = "\u{1}?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B"]
    pub static std__Num_float_base_has_denorm: std_float_denorm_style;
}
pub const std__Num_float_base_has_infinity: bool = true;
pub const std__Num_float_base_has_quiet_NaN: bool = true;
pub const std__Num_float_base_has_signaling_NaN: bool = true;
pub const std__Num_float_base_is_bounded: bool = true;
pub const std__Num_float_base_is_iec559: bool = true;
pub const std__Num_float_base_is_signed: bool = true;
pub const std__Num_float_base_is_specialized: bool = true;
extern "C" {
    #[link_name = "\u{1}?round_style@_Num_float_base@std@@2W4float_round_style@2@B"]
    pub static std__Num_float_base_round_style: std_float_round_style;
}
pub const std__Num_float_base_radix: ::std::os::raw::c_int = 2;
#[repr(C)]
#[derive(Default)]
pub struct std_piecewise_construct_t {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_piecewise_construct_t() {
    assert_eq!(
        ::std::mem::size_of::<std_piecewise_construct_t>(),
        1usize,
        concat!("Size of: ", stringify!(std_piecewise_construct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<std_piecewise_construct_t>(),
        1usize,
        concat!("Alignment of ", stringify!(std_piecewise_construct_t))
    );
}
extern "C" {
    #[link_name = "\u{1}?piecewise_construct@std@@3Upiecewise_construct_t@1@B"]
    pub static std_piecewise_construct: std_piecewise_construct_t;
}
pub const std__Iterator_base0__Unwrap_when_unverified: bool = true;
pub const std__Iterator_base12__Unwrap_when_unverified: bool = true;
#[repr(C)]
pub struct std__Yarn<_Elem> {
    pub _Myptr: *mut _Elem,
    pub _Nul: _Elem,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
}
impl<_Elem> Default for std__Yarn<_Elem> {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct std_allocator_arg_t {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_allocator_arg_t() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator_arg_t>(),
        1usize,
        concat!("Size of: ", stringify!(std_allocator_arg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator_arg_t>(),
        1usize,
        concat!("Alignment of ", stringify!(std_allocator_arg_t))
    );
}
extern "C" {
    #[link_name = "\u{1}?allocator_arg@std@@3Uallocator_arg_t@1@B"]
    pub static std_allocator_arg: std_allocator_arg_t;
}
pub const std__Big_allocation_threshold: usize = 4096;
pub const std__Big_allocation_alignment: usize = 32;
pub const std__Non_user_size: usize = 39;
pub const std__Big_allocation_sentinel: usize = 18085043209519168250;
pub type std__Uint4_t = ::std::os::raw::c_ulong;
pub type std__Atomic_integral_t = std__Uint4_t;
pub type std__Atomic_counter_t = std__Atomic_integral_t;
pub const std__Small_object_num_ptrs: ::std::os::raw::c_int = 8;
#[repr(C)]
pub struct std__Facet_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct std__Facet_base {
    pub vtable_: *const std__Facet_base__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_std__Facet_base() {
    assert_eq!(
        ::std::mem::size_of::<std__Facet_base>(),
        8usize,
        concat!("Size of: ", stringify!(std__Facet_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Facet_base>(),
        8usize,
        concat!("Alignment of ", stringify!(std__Facet_base))
    );
}
impl Default for std__Facet_base {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}collate"]
    pub static std_collate: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}ctype"]
    pub static std_ctype: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}monetary"]
    pub static std_monetary: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}numeric"]
    pub static std_numeric: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}time"]
    pub static std_time: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}messages"]
    pub static std_messages: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}all"]
    pub static std_all: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}none"]
    pub static std_none: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Default)]
pub struct std__Crt_new_delete {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std__Crt_new_delete() {
    assert_eq!(
        ::std::mem::size_of::<std__Crt_new_delete>(),
        1usize,
        concat!("Size of: ", stringify!(std__Crt_new_delete))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Crt_new_delete>(),
        1usize,
        concat!("Alignment of ", stringify!(std__Crt_new_delete))
    );
}
pub type std_locale_category = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default)]
pub struct std_locale_id {
    pub _Id: usize,
}
extern "C" {
    #[link_name = "\u{1}?_Id_cnt@id@locale@std@@0HA"]
    pub static mut std_locale_id__Id_cnt: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_std_locale_id() {
    assert_eq!(
        ::std::mem::size_of::<std_locale_id>(),
        8usize,
        concat!("Size of: ", stringify!(std_locale_id))
    );
    assert_eq!(
        ::std::mem::align_of::<std_locale_id>(),
        8usize,
        concat!("Alignment of ", stringify!(std_locale_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale_id>()))._Id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale_id),
            "::",
            stringify!(_Id)
        )
    );
}
#[repr(C)]
pub struct std_locale_facet {
    pub _base: std__Facet_base,
    pub _Myrefs: std__Atomic_counter_t,
}
#[test]
fn bindgen_test_layout_std_locale_facet() {
    assert_eq!(
        ::std::mem::size_of::<std_locale_facet>(),
        16usize,
        concat!("Size of: ", stringify!(std_locale_facet))
    );
    assert_eq!(
        ::std::mem::align_of::<std_locale_facet>(),
        8usize,
        concat!("Alignment of ", stringify!(std_locale_facet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale_facet>()))._Myrefs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale_facet),
            "::",
            stringify!(_Myrefs)
        )
    );
}
impl Default for std_locale_facet {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct std_locale__Locimp {
    pub _base: std_locale_facet,
    pub _Facetvec: *mut *mut std_locale_facet,
    pub _Facetcount: usize,
    pub _Catmask: std_locale_category,
    pub _Xparent: bool,
    pub _Name: std__Yarn<::std::os::raw::c_char>,
}
extern "C" {
    #[link_name = "\u{1}?_Clocptr@_Locimp@locale@std@@0PEAV123@EA"]
    pub static mut std_locale__Locimp__Clocptr: *mut std_locale__Locimp;
}
#[test]
fn bindgen_test_layout_std_locale__Locimp() {
    assert_eq!(
        ::std::mem::size_of::<std_locale__Locimp>(),
        56usize,
        concat!("Size of: ", stringify!(std_locale__Locimp))
    );
    assert_eq!(
        ::std::mem::align_of::<std_locale__Locimp>(),
        8usize,
        concat!("Alignment of ", stringify!(std_locale__Locimp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale__Locimp>()))._Facetvec as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale__Locimp),
            "::",
            stringify!(_Facetvec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale__Locimp>()))._Facetcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale__Locimp),
            "::",
            stringify!(_Facetcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale__Locimp>()))._Catmask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale__Locimp),
            "::",
            stringify!(_Catmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale__Locimp>()))._Xparent as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale__Locimp),
            "::",
            stringify!(_Xparent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_locale__Locimp>()))._Name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(std_locale__Locimp),
            "::",
            stringify!(_Name)
        )
    );
}
impl Default for std_locale__Locimp {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_Psave"]
    pub static mut std__Psave: *const std_locale_facet;
}
extern "C" {
    #[link_name = "\u{1}id"]
    pub static mut std_id: std_locale_id;
}
impl std__Iosb__Fmtflags {
    pub const _Fmtzero: std__Iosb__Fmtflags = std__Iosb__Fmtflags::_Fmtmask;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Iosb__Fmtflags {
    _Fmtmask = 0,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Iosb__Iostate {
    _Statmask = 0,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Iosb__Openmode {
    _Openmask = 0,
}
impl std__Iosb__Seekdir {
    pub const _Seekcur: std__Iosb__Seekdir = std__Iosb__Seekdir::_Seekbeg;
}
impl std__Iosb__Seekdir {
    pub const _Seekend: std__Iosb__Seekdir = std__Iosb__Seekdir::_Seekbeg;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Iosb__Seekdir {
    _Seekbeg = 0,
}
extern "C" {
    #[link_name = "\u{1}skipws"]
    pub static std_skipws: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}unitbuf"]
    pub static std_unitbuf: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}uppercase"]
    pub static std_uppercase: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}showbase"]
    pub static std_showbase: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}showpoint"]
    pub static std_showpoint: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}showpos"]
    pub static std_showpos: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}left"]
    pub static std_left: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}right"]
    pub static std_right: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}internal"]
    pub static std_internal: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}dec"]
    pub static std_dec: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}oct"]
    pub static std_oct: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}hex"]
    pub static std_hex: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}scientific"]
    pub static std_scientific: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}fixed"]
    pub static std_fixed: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}hexfloat"]
    pub static std_hexfloat: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}boolalpha"]
    pub static std_boolalpha: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}_Stdio"]
    pub static std__Stdio: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}adjustfield"]
    pub static std_adjustfield: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}basefield"]
    pub static std_basefield: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}floatfield"]
    pub static std_floatfield: std__Iosb__Fmtflags;
}
extern "C" {
    #[link_name = "\u{1}goodbit"]
    pub static std_goodbit: std__Iosb__Iostate;
}
extern "C" {
    #[link_name = "\u{1}eofbit"]
    pub static std_eofbit: std__Iosb__Iostate;
}
extern "C" {
    #[link_name = "\u{1}failbit"]
    pub static std_failbit: std__Iosb__Iostate;
}
extern "C" {
    #[link_name = "\u{1}badbit"]
    pub static std_badbit: std__Iosb__Iostate;
}
extern "C" {
    #[link_name = "\u{1}in"]
    pub static std_in: std__Iosb__Openmode;
}
extern "C" {
    #[link_name = "\u{1}out"]
    pub static std_out: std__Iosb__Openmode;
}
extern "C" {
    #[link_name = "\u{1}ate"]
    pub static std_ate: std__Iosb__Openmode;
}
extern "C" {
    #[link_name = "\u{1}app"]
    pub static std_app: std__Iosb__Openmode;
}
extern "C" {
    #[link_name = "\u{1}trunc"]
    pub static std_trunc: std__Iosb__Openmode;
}
extern "C" {
    #[link_name = "\u{1}_Nocreate"]
    pub static std__Nocreate: std__Iosb__Openmode;
}
extern "C" {
    #[link_name = "\u{1}_Noreplace"]
    pub static std__Noreplace: std__Iosb__Openmode;
}
extern "C" {
    #[link_name = "\u{1}binary"]
    pub static std_binary: std__Iosb__Openmode;
}
extern "C" {
    #[link_name = "\u{1}beg"]
    pub static std_beg: std__Iosb__Seekdir;
}
extern "C" {
    #[link_name = "\u{1}cur"]
    pub static std_cur: std__Iosb__Seekdir;
}
extern "C" {
    #[link_name = "\u{1}end"]
    pub static std_end: std__Iosb__Seekdir;
}
extern "C" {
    #[link_name = "\u{1}?_Init_cnt@Init@ios_base@std@@0HA"]
    pub static mut std_ios_base_Init__Init_cnt: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?_Index@ios_base@std@@0HA"]
    pub static mut std_ios_base__Index: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}?_Sync@ios_base@std@@0_NA"]
    pub static mut std_ios_base__Sync: bool;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Iostate {
    _Statmask = 23,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Fmtflags {
    _Fmtmask = 65535,
    _Fmtzero = 0,
}
pub type int64 = ::std::os::raw::c_longlong;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub type int32 = ::std::os::raw::c_int;
pub type uint32 = ::std::os::raw::c_uint;
pub type char16 = u16;
#[repr(C)]
pub struct _cef_string_utf8_t {
    pub str: *mut ::std::os::raw::c_char,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut ::std::os::raw::c_char)>,
}
#[test]
fn bindgen_test_layout__cef_string_utf8_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_utf8_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_string_utf8_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_utf8_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_string_utf8_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).dtor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(dtor)
        )
    );
}
impl Default for _cef_string_utf8_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cef_string_utf8_t = _cef_string_utf8_t;
#[repr(C)]
pub struct _cef_string_utf16_t {
    pub str: *mut char16,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut char16)>,
}
#[test]
fn bindgen_test_layout__cef_string_utf16_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_utf16_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_string_utf16_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_utf16_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_string_utf16_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).dtor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(dtor)
        )
    );
}
impl Default for _cef_string_utf16_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
extern "C" {
    pub fn cef_string_utf16_set(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_clear(str: *mut cef_string_utf16_t);
}
extern "C" {
    pub fn cef_string_utf16_cmp(
        str1: *const cef_string_utf16_t,
        str2: *const cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_utf16(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_utf8(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
extern "C" {
    pub fn cef_string_userfree_utf16_alloc() -> cef_string_userfree_utf16_t;
}
extern "C" {
    pub fn cef_string_userfree_utf16_free(str: cef_string_userfree_utf16_t);
}
extern "C" {
    pub fn cef_string_utf16_to_lower(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_upper(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _HUGE: f64;
}
#[repr(C)]
pub struct _float_const {
    pub _Word: __BindgenUnionField<[::std::os::raw::c_ushort; 4usize]>,
    pub _Float: __BindgenUnionField<f32>,
    pub _Double: __BindgenUnionField<f64>,
    pub _Long_double: __BindgenUnionField<f64>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout__float_const() {
    assert_eq!(
        ::std::mem::size_of::<_float_const>(),
        8usize,
        concat!("Size of: ", stringify!(_float_const))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_const>(),
        8usize,
        concat!("Alignment of ", stringify!(_float_const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Float as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Long_double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Long_double)
        )
    );
}
impl Default for _float_const {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static _Denorm_C: _float_const;
}
extern "C" {
    pub static _Inf_C: _float_const;
}
extern "C" {
    pub static _Nan_C: _float_const;
}
extern "C" {
    pub static _Snan_C: _float_const;
}
extern "C" {
    pub static _Hugeval_C: _float_const;
}
extern "C" {
    pub static _FDenorm_C: _float_const;
}
extern "C" {
    pub static _FInf_C: _float_const;
}
extern "C" {
    pub static _FNan_C: _float_const;
}
extern "C" {
    pub static _FSnan_C: _float_const;
}
extern "C" {
    pub static _LDenorm_C: _float_const;
}
extern "C" {
    pub static _LInf_C: _float_const;
}
extern "C" {
    pub static _LNan_C: _float_const;
}
extern "C" {
    pub static _LSnan_C: _float_const;
}
extern "C" {
    pub static _Eps_C: _float_const;
}
extern "C" {
    pub static _Rteps_C: _float_const;
}
extern "C" {
    pub static _FEps_C: _float_const;
}
extern "C" {
    pub static _FRteps_C: _float_const;
}
extern "C" {
    pub static _LEps_C: _float_const;
}
extern "C" {
    pub static _LRteps_C: _float_const;
}
extern "C" {
    pub static _Zero_C: f64;
}
extern "C" {
    pub static _Xbig_C: f64;
}
extern "C" {
    pub static _FZero_C: f32;
}
extern "C" {
    pub static _FXbig_C: f32;
}
extern "C" {
    pub static _LZero_C: f64;
}
extern "C" {
    pub static _LXbig_C: f64;
}
extern "C" {
    pub static mut HUGE: f64;
}
#[repr(C)]
pub struct _Dconst {
    pub _Word: __BindgenUnionField<[::std::os::raw::c_ushort; 8usize]>,
    pub _Float: __BindgenUnionField<f32>,
    pub _Double: __BindgenUnionField<f64>,
    pub _Long_double: __BindgenUnionField<f64>,
    pub bindgen_union_field: [u64; 2usize],
}
#[test]
fn bindgen_test_layout__Dconst() {
    assert_eq!(
        ::std::mem::size_of::<_Dconst>(),
        16usize,
        concat!("Size of: ", stringify!(_Dconst))
    );
    assert_eq!(
        ::std::mem::align_of::<_Dconst>(),
        8usize,
        concat!("Alignment of ", stringify!(_Dconst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Dconst>()))._Word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Dconst),
            "::",
            stringify!(_Word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Dconst>()))._Float as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Dconst),
            "::",
            stringify!(_Float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Dconst>()))._Double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Dconst),
            "::",
            stringify!(_Double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Dconst>()))._Long_double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Dconst),
            "::",
            stringify!(_Long_double)
        )
    );
}
impl Default for _Dconst {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static mut _Denorm: _Dconst;
}
extern "C" {
    pub static mut _Hugeval: _Dconst;
}
extern "C" {
    pub static mut _Inf: _Dconst;
}
extern "C" {
    pub static mut _Nan: _Dconst;
}
extern "C" {
    pub static mut _Snan: _Dconst;
}
extern "C" {
    pub static mut _FDenorm: _Dconst;
}
extern "C" {
    pub static mut _FInf: _Dconst;
}
extern "C" {
    pub static mut _FNan: _Dconst;
}
extern "C" {
    pub static mut _FSnan: _Dconst;
}
extern "C" {
    pub static mut _LDenorm: _Dconst;
}
extern "C" {
    pub static mut _LInf: _Dconst;
}
extern "C" {
    pub static mut _LNan: _Dconst;
}
extern "C" {
    pub static mut _LSnan: _Dconst;
}
#[repr(C)]
pub struct __type_info_node {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}?__type_info_root_node@@3U__type_info_node@@A"]
    pub static mut __type_info_root_node: __type_info_node;
}
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
pub type cef_string_list_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn cef_string_list_alloc() -> cef_string_list_t;
}
extern "C" {
    pub fn cef_string_list_size(list: cef_string_list_t) -> usize;
}
extern "C" {
    pub fn cef_string_list_value(
        list: cef_string_list_t,
        index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_list_append(list: cef_string_list_t, value: *const cef_string_t);
}
extern "C" {
    pub fn cef_string_list_clear(list: cef_string_list_t);
}
extern "C" {
    pub fn cef_string_list_free(list: cef_string_list_t);
}
extern "C" {
    pub fn cef_string_list_copy(list: cef_string_list_t) -> cef_string_list_t;
}
pub type cef_string_map_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn cef_string_map_alloc() -> cef_string_map_t;
}
extern "C" {
    pub fn cef_string_map_size(map: cef_string_map_t) -> usize;
}
extern "C" {
    pub fn cef_string_map_find(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_key(
        map: cef_string_map_t,
        index: usize,
        key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_value(
        map: cef_string_map_t,
        index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_append(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_map_clear(map: cef_string_map_t);
}
extern "C" {
    pub fn cef_string_map_free(map: cef_string_map_t);
}
pub type cef_string_multimap_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Default)]
pub struct _cef_time_t {
    pub year: ::std::os::raw::c_int,
    pub month: ::std::os::raw::c_int,
    pub day_of_week: ::std::os::raw::c_int,
    pub day_of_month: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub minute: ::std::os::raw::c_int,
    pub second: ::std::os::raw::c_int,
    pub millisecond: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_time_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_time_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_time_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_time_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).month as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).day_of_week as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(day_of_week)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).day_of_month as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(day_of_month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).hour as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).minute as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).second as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).millisecond as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(millisecond)
        )
    );
}
pub type cef_time_t = _cef_time_t;
pub type DWORD = ::std::os::raw::c_ulong;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type LONG = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Default)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
    assert_eq!(
        ::std::mem::size_of::<_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(_GUID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
pub type GUID = _GUID;
pub type IID = GUID;
pub type CLSID = GUID;
pub type FMTID = GUID;
extern "C" {
    pub static GUID_MAX_POWER_SAVINGS: GUID;
}
extern "C" {
    pub static GUID_MIN_POWER_SAVINGS: GUID;
}
extern "C" {
    pub static GUID_TYPICAL_POWER_SAVINGS: GUID;
}
extern "C" {
    pub static NO_SUBGROUP_GUID: GUID;
}
extern "C" {
    pub static ALL_POWERSCHEMES_GUID: GUID;
}
extern "C" {
    pub static GUID_POWERSCHEME_PERSONALITY: GUID;
}
extern "C" {
    pub static GUID_ACTIVE_POWERSCHEME: GUID;
}
extern "C" {
    pub static GUID_IDLE_RESILIENCY_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_IDLE_RESILIENCY_PERIOD: GUID;
}
extern "C" {
    pub static GUID_DEEP_SLEEP_ENABLED: GUID;
}
extern "C" {
    pub static GUID_DEEP_SLEEP_PLATFORM_STATE: GUID;
}
extern "C" {
    pub static GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_VIDEO_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_VIDEO_POWERDOWN_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_VIDEO_ANNOYANCE_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: GUID;
}
extern "C" {
    pub static GUID_VIDEO_DIM_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_VIDEO_ADAPTIVE_POWERDOWN: GUID;
}
extern "C" {
    pub static GUID_MONITOR_POWER_ON: GUID;
}
extern "C" {
    pub static GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: GUID;
}
extern "C" {
    pub static GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: GUID;
}
extern "C" {
    pub static GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: GUID;
}
extern "C" {
    pub static GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: GUID;
}
extern "C" {
    pub static GUID_CONSOLE_DISPLAY_STATE: GUID;
}
extern "C" {
    pub static GUID_ALLOW_DISPLAY_REQUIRED: GUID;
}
extern "C" {
    pub static GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_ADVANCED_COLOR_QUALITY_BIAS: GUID;
}
extern "C" {
    pub static GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_NON_ADAPTIVE_INPUT_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_ADAPTIVE_INPUT_CONTROLLER_STATE: GUID;
}
extern "C" {
    pub static GUID_DISK_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_DISK_MAX_POWER: GUID;
}
extern "C" {
    pub static GUID_DISK_POWERDOWN_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_DISK_IDLE_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_DISK_BURST_IGNORE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_DISK_ADAPTIVE_POWERDOWN: GUID;
}
extern "C" {
    pub static GUID_SLEEP_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_SLEEP_IDLE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_STANDBY_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_UNATTEND_SLEEP_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_HIBERNATE_TIMEOUT: GUID;
}
extern "C" {
    pub static GUID_HIBERNATE_FASTS4_POLICY: GUID;
}
extern "C" {
    pub static GUID_CRITICAL_POWER_TRANSITION: GUID;
}
extern "C" {
    pub static GUID_SYSTEM_AWAYMODE: GUID;
}
extern "C" {
    pub static GUID_ALLOW_AWAYMODE: GUID;
}
extern "C" {
    pub static GUID_USER_PRESENCE_PREDICTION: GUID;
}
extern "C" {
    pub static GUID_STANDBY_BUDGET_GRACE_PERIOD: GUID;
}
extern "C" {
    pub static GUID_STANDBY_BUDGET_PERCENT: GUID;
}
extern "C" {
    pub static GUID_STANDBY_RESERVE_GRACE_PERIOD: GUID;
}
extern "C" {
    pub static GUID_STANDBY_RESERVE_TIME: GUID;
}
extern "C" {
    pub static GUID_STANDBY_RESET_PERCENT: GUID;
}
extern "C" {
    pub static GUID_ALLOW_STANDBY_STATES: GUID;
}
extern "C" {
    pub static GUID_ALLOW_RTC_WAKE: GUID;
}
extern "C" {
    pub static GUID_LEGACY_RTC_MITIGATION: GUID;
}
extern "C" {
    pub static GUID_ALLOW_SYSTEM_REQUIRED: GUID;
}
extern "C" {
    pub static GUID_POWER_SAVING_STATUS: GUID;
}
extern "C" {
    pub static GUID_ENERGY_SAVER_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_ENERGY_SAVER_BATTERY_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_ENERGY_SAVER_BRIGHTNESS: GUID;
}
extern "C" {
    pub static GUID_ENERGY_SAVER_POLICY: GUID;
}
extern "C" {
    pub static GUID_SYSTEM_BUTTON_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_POWERBUTTON_ACTION: GUID;
}
extern "C" {
    pub static GUID_SLEEPBUTTON_ACTION: GUID;
}
extern "C" {
    pub static GUID_USERINTERFACEBUTTON_ACTION: GUID;
}
extern "C" {
    pub static GUID_LIDCLOSE_ACTION: GUID;
}
extern "C" {
    pub static GUID_LIDOPEN_POWERSTATE: GUID;
}
extern "C" {
    pub static GUID_BATTERY_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_ACTION_0: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_LEVEL_0: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_FLAGS_0: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_ACTION_1: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_LEVEL_1: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_FLAGS_1: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_ACTION_2: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_LEVEL_2: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_FLAGS_2: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_ACTION_3: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_LEVEL_3: GUID;
}
extern "C" {
    pub static GUID_BATTERY_DISCHARGE_FLAGS_3: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_SETTINGS_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MAXIMUM: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MAXIMUM_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MINIMUM: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MINIMUM_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_FREQUENCY_LIMIT: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_FREQUENCY_LIMIT_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_ALLOW_THROTTLING: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_IDLESTATE_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERFSTATE_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_POLICY_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_POLICY_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_TIME: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_TIME_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_TIME: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_TIME_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_TIME_CHECK: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_BOOST_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_BOOST_MODE: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_AUTONOMOUS_MODE: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_DUTY_CYCLING: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_IDLE_ALLOW_SCALING: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_IDLE_DISABLE: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_IDLE_STATE_MAXIMUM: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_IDLE_TIME_CHECK: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_MAX_CORES: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_MIN_CORES: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PARKING_CORE_OVERRIDE: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PARKING_PERF_STATE: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PARKING_PERF_STATE_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_HISTORY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_HISTORY_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_HISTORY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_HISTORY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_DISTRIBUTE_UTILITY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_HETEROGENEOUS_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_HETERO_DECREASE_TIME: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_HETERO_INCREASE_TIME: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CLASS0_FLOOR_PERF: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_CLASS1_INITIAL_PERF: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_THREAD_SCHEDULING_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY: GUID;
}
extern "C" {
    pub static GUID_SYSTEM_COOLING_POLICY: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR: GUID;
}
extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1: GUID;
}
extern "C" {
    pub static GUID_LOCK_CONSOLE_ON_WAKE: GUID;
}
extern "C" {
    pub static GUID_DEVICE_IDLE_POLICY: GUID;
}
extern "C" {
    pub static GUID_CONNECTIVITY_IN_STANDBY: GUID;
}
extern "C" {
    pub static GUID_DISCONNECTED_STANDBY_MODE: GUID;
}
extern "C" {
    pub static GUID_ACDC_POWER_SOURCE: GUID;
}
extern "C" {
    pub static GUID_LIDSWITCH_STATE_CHANGE: GUID;
}
extern "C" {
    pub static GUID_BATTERY_PERCENTAGE_REMAINING: GUID;
}
extern "C" {
    pub static GUID_BATTERY_COUNT: GUID;
}
extern "C" {
    pub static GUID_GLOBAL_USER_PRESENCE: GUID;
}
extern "C" {
    pub static GUID_SESSION_DISPLAY_STATUS: GUID;
}
extern "C" {
    pub static GUID_SESSION_USER_PRESENCE: GUID;
}
extern "C" {
    pub static GUID_IDLE_BACKGROUND_TASK: GUID;
}
extern "C" {
    pub static GUID_BACKGROUND_TASK_NOTIFICATION: GUID;
}
extern "C" {
    pub static GUID_APPLAUNCH_BUTTON: GUID;
}
extern "C" {
    pub static GUID_PCIEXPRESS_SETTINGS_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_PCIEXPRESS_ASPM_POLICY: GUID;
}
extern "C" {
    pub static GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: GUID;
}
extern "C" {
    pub static GUID_INTSTEER_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_INTSTEER_MODE: GUID;
}
extern "C" {
    pub static GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: GUID;
}
extern "C" {
    pub static GUID_INTSTEER_TIME_UNPARK_TRIGGER: GUID;
}
extern "C" {
    pub static GUID_GRAPHICS_SUBGROUP: GUID;
}
extern "C" {
    pub static GUID_GPU_PREFERENCE_POLICY: GUID;
}
extern "C" {
    pub static GUID_MIXED_REALITY_MODE: GUID;
}
extern "C" {
    pub static GUID_SPR_ACTIVE_SESSION_CHANGE: GUID;
}
extern "C" {
    pub static PPM_PERFSTATE_CHANGE_GUID: GUID;
}
extern "C" {
    pub static PPM_PERFSTATE_DOMAIN_CHANGE_GUID: GUID;
}
extern "C" {
    pub static PPM_IDLESTATE_CHANGE_GUID: GUID;
}
extern "C" {
    pub static PPM_PERFSTATES_DATA_GUID: GUID;
}
extern "C" {
    pub static PPM_IDLESTATES_DATA_GUID: GUID;
}
extern "C" {
    pub static PPM_IDLE_ACCOUNTING_GUID: GUID;
}
extern "C" {
    pub static PPM_IDLE_ACCOUNTING_EX_GUID: GUID;
}
extern "C" {
    pub static PPM_THERMALCONSTRAINT_GUID: GUID;
}
extern "C" {
    pub static PPM_PERFMON_PERFSTATE_GUID: GUID;
}
extern "C" {
    pub static PPM_THERMAL_POLICY_CHANGE_GUID: GUID;
}
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
#[repr(C)]
#[derive(Default)]
pub struct HINSTANCE__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HINSTANCE__() {
    assert_eq!(
        ::std::mem::size_of::<HINSTANCE__>(),
        4usize,
        concat!("Size of: ", stringify!(HINSTANCE__))
    );
    assert_eq!(
        ::std::mem::align_of::<HINSTANCE__>(),
        4usize,
        concat!("Alignment of ", stringify!(HINSTANCE__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HINSTANCE__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HINSTANCE__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HINSTANCE = *mut HINSTANCE__;
#[repr(C)]
#[derive(Default)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HWND__() {
    assert_eq!(
        ::std::mem::size_of::<HWND__>(),
        4usize,
        concat!("Size of: ", stringify!(HWND__))
    );
    assert_eq!(
        ::std::mem::align_of::<HWND__>(),
        4usize,
        concat!("Alignment of ", stringify!(HWND__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HWND__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HWND__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Default)]
pub struct HICON__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HICON__() {
    assert_eq!(
        ::std::mem::size_of::<HICON__>(),
        4usize,
        concat!("Size of: ", stringify!(HICON__))
    );
    assert_eq!(
        ::std::mem::align_of::<HICON__>(),
        4usize,
        concat!("Alignment of ", stringify!(HICON__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HICON__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HICON__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HICON = *mut HICON__;
#[repr(C)]
#[derive(Default)]
pub struct HMENU__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HMENU__() {
    assert_eq!(
        ::std::mem::size_of::<HMENU__>(),
        4usize,
        concat!("Size of: ", stringify!(HMENU__))
    );
    assert_eq!(
        ::std::mem::align_of::<HMENU__>(),
        4usize,
        concat!("Alignment of ", stringify!(HMENU__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HMENU__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HMENU__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HMENU = *mut HMENU__;
pub type HCURSOR = HICON;
#[repr(C)]
#[derive(Default)]
pub struct tagPOINT {
    pub x: LONG,
    pub y: LONG,
}
#[test]
fn bindgen_test_layout_tagPOINT() {
    assert_eq!(
        ::std::mem::size_of::<tagPOINT>(),
        8usize,
        concat!("Size of: ", stringify!(tagPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagPOINT>(),
        4usize,
        concat!("Alignment of ", stringify!(tagPOINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(y)
        )
    );
}
pub type POINT = tagPOINT;
#[repr(C)]
pub struct tagMSG {
    pub hwnd: HWND,
    pub message: UINT,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
    pub time: DWORD,
    pub pt: POINT,
}
#[test]
fn bindgen_test_layout_tagMSG() {
    assert_eq!(
        ::std::mem::size_of::<tagMSG>(),
        48usize,
        concat!("Size of: ", stringify!(tagMSG))
    );
    assert_eq!(
        ::std::mem::align_of::<tagMSG>(),
        8usize,
        concat!("Alignment of ", stringify!(tagMSG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).hwnd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).wParam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(wParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).lParam as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(lParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).time as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).pt as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(pt)
        )
    );
}
impl Default for tagMSG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type MSG = tagMSG;
pub type RPC_IF_HANDLE = *mut ::std::os::raw::c_void;
pub const MidlInterceptionInfoVersionOne: _bindgen_ty_15 =
    _bindgen_ty_15::MidlInterceptionInfoVersionOne;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_15 {
    MidlInterceptionInfoVersionOne = 1,
}
pub const MidlWinrtTypeSerializationInfoVersionOne: _bindgen_ty_16 =
    _bindgen_ty_16::MidlWinrtTypeSerializationInfoVersionOne;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_16 {
    MidlWinrtTypeSerializationInfoVersionOne = 1,
}
extern "C" {
    pub static mut __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut IWinTypesBase_v0_1_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut IWinTypesBase_v0_1_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut IWinTypes_v0_1_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut IWinTypes_v0_1_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static GUID_DEVINTERFACE_DISK: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_CDROM: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_PARTITION: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_TAPE: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_WRITEONCEDISK: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_VOLUME: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_MEDIUMCHANGER: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_FLOPPY: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_CDCHANGER: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_STORAGEPORT: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_VMLUN: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_SES: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_SERVICE_VOLUME: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_HIDDEN_VOLUME: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE: GUID;
}
extern "C" {
    pub static GUID_SCM_PD_HEALTH_NOTIFICATION: GUID;
}
extern "C" {
    pub static GUID_SCM_PD_PASSTHROUGH_INVDIMM: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_COMPORT: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR: GUID;
}
extern "C" {
    pub static FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE: GUID;
}
extern "C" {
    pub static FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE: GUID;
}
extern "C" {
    pub static FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE: GUID;
}
extern "C" {
    pub static GUID_DEVINTERFACE_SMARTCARD_READER: GUID;
}
#[repr(C)]
#[derive(Default)]
pub struct _SCARD_IO_REQUEST {
    pub dwProtocol: DWORD,
    pub cbPciLength: DWORD,
}
#[test]
fn bindgen_test_layout__SCARD_IO_REQUEST() {
    assert_eq!(
        ::std::mem::size_of::<_SCARD_IO_REQUEST>(),
        8usize,
        concat!("Size of: ", stringify!(_SCARD_IO_REQUEST))
    );
    assert_eq!(
        ::std::mem::align_of::<_SCARD_IO_REQUEST>(),
        4usize,
        concat!("Alignment of ", stringify!(_SCARD_IO_REQUEST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCARD_IO_REQUEST>())).dwProtocol as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCARD_IO_REQUEST),
            "::",
            stringify!(dwProtocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCARD_IO_REQUEST>())).cbPciLength as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCARD_IO_REQUEST),
            "::",
            stringify!(cbPciLength)
        )
    );
}
pub type SCARD_IO_REQUEST = _SCARD_IO_REQUEST;
extern "C" {
    pub static g_rgSCardT0Pci: SCARD_IO_REQUEST;
}
extern "C" {
    pub static g_rgSCardT1Pci: SCARD_IO_REQUEST;
}
extern "C" {
    pub static g_rgSCardRawPci: SCARD_IO_REQUEST;
}
extern "C" {
    pub static mut __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IUnknown: IID;
}
extern "C" {
    pub static mut __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_AsyncIUnknown: IID;
}
extern "C" {
    pub static mut __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IClassFactory: IID;
}
extern "C" {
    pub static mut __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IMarshal: IID;
}
extern "C" {
    pub static IID_INoMarshal: IID;
}
extern "C" {
    pub static IID_IAgileObject: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IActivationFilter: IID;
}
extern "C" {
    pub static IID_IMarshal2: IID;
}
extern "C" {
    pub static IID_IMalloc: IID;
}
extern "C" {
    pub static IID_IStdMarshalInfo: IID;
}
extern "C" {
    pub static IID_IExternalConnection: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IMultiQI: IID;
}
extern "C" {
    pub static IID_AsyncIMultiQI: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternalUnknown: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IEnumUnknown: IID;
}
extern "C" {
    pub static IID_IEnumString: IID;
}
extern "C" {
    pub static IID_ISequentialStream: IID;
}
extern "C" {
    pub static IID_IStream: IID;
}
extern "C" {
    pub static IID_IRpcChannelBuffer: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IRpcChannelBuffer2: IID;
}
extern "C" {
    pub static IID_IAsyncRpcChannelBuffer: IID;
}
extern "C" {
    pub static IID_IRpcChannelBuffer3: IID;
}
extern "C" {
    pub static IID_IRpcSyntaxNegotiate: IID;
}
extern "C" {
    pub static IID_IRpcProxyBuffer: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IRpcStubBuffer: IID;
}
extern "C" {
    pub static IID_IPSFactoryBuffer: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IChannelHook: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IClientSecurity: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IServerSecurity: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IRpcOptions: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IGlobalOptions: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ISurrogate: IID;
}
extern "C" {
    pub static IID_IGlobalInterfaceTable: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ISynchronize: IID;
}
extern "C" {
    pub static IID_ISynchronizeHandle: IID;
}
extern "C" {
    pub static IID_ISynchronizeEvent: IID;
}
extern "C" {
    pub static IID_ISynchronizeContainer: IID;
}
extern "C" {
    pub static IID_ISynchronizeMutex: IID;
}
extern "C" {
    pub static IID_ICancelMethodCalls: IID;
}
extern "C" {
    pub static IID_IAsyncManager: IID;
}
extern "C" {
    pub static IID_ICallFactory: IID;
}
extern "C" {
    pub static IID_IRpcHelper: IID;
}
extern "C" {
    pub static IID_IReleaseMarshalBuffers: IID;
}
extern "C" {
    pub static IID_IWaitMultiple: IID;
}
extern "C" {
    pub static IID_IAddrTrackingControl: IID;
}
extern "C" {
    pub static IID_IAddrExclusionControl: IID;
}
extern "C" {
    pub static IID_IPipeByte: IID;
}
extern "C" {
    pub static IID_AsyncIPipeByte: IID;
}
extern "C" {
    pub static IID_IPipeLong: IID;
}
extern "C" {
    pub static IID_AsyncIPipeLong: IID;
}
extern "C" {
    pub static IID_IPipeDouble: IID;
}
extern "C" {
    pub static IID_AsyncIPipeDouble: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IComThreadingInfo: IID;
}
extern "C" {
    pub static IID_IProcessInitControl: IID;
}
extern "C" {
    pub static IID_IFastRundown: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IMarshalingStream: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IAgileReference: IID;
}
extern "C" {
    pub static IID_ICallbackWithNoReentrancyToApplicationSTA: GUID;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static GUID_NULL: IID;
}
extern "C" {
    pub static CATID_MARSHALER: IID;
}
extern "C" {
    pub static IID_IRpcChannel: IID;
}
extern "C" {
    pub static IID_IRpcStub: IID;
}
extern "C" {
    pub static IID_IStubManager: IID;
}
extern "C" {
    pub static IID_IRpcProxy: IID;
}
extern "C" {
    pub static IID_IProxyManager: IID;
}
extern "C" {
    pub static IID_IPSFactory: IID;
}
extern "C" {
    pub static IID_IInternalMoniker: IID;
}
extern "C" {
    pub static IID_IDfReserved1: IID;
}
extern "C" {
    pub static IID_IDfReserved2: IID;
}
extern "C" {
    pub static IID_IDfReserved3: IID;
}
extern "C" {
    pub static CLSID_StdMarshal: CLSID;
}
extern "C" {
    pub static CLSID_AggStdMarshal: CLSID;
}
extern "C" {
    pub static CLSID_StdAsyncActManager: CLSID;
}
extern "C" {
    pub static IID_IStub: IID;
}
extern "C" {
    pub static IID_IProxy: IID;
}
extern "C" {
    pub static IID_IEnumGeneric: IID;
}
extern "C" {
    pub static IID_IEnumHolder: IID;
}
extern "C" {
    pub static IID_IEnumCallback: IID;
}
extern "C" {
    pub static IID_IOleManager: IID;
}
extern "C" {
    pub static IID_IOlePresObj: IID;
}
extern "C" {
    pub static IID_IDebug: IID;
}
extern "C" {
    pub static IID_IDebugStream: IID;
}
extern "C" {
    pub static CLSID_PSGenObject: CLSID;
}
extern "C" {
    pub static CLSID_PSClientSite: CLSID;
}
extern "C" {
    pub static CLSID_PSClassObject: CLSID;
}
extern "C" {
    pub static CLSID_PSInPlaceActive: CLSID;
}
extern "C" {
    pub static CLSID_PSInPlaceFrame: CLSID;
}
extern "C" {
    pub static CLSID_PSDragDrop: CLSID;
}
extern "C" {
    pub static CLSID_PSBindCtx: CLSID;
}
extern "C" {
    pub static CLSID_PSEnumerators: CLSID;
}
extern "C" {
    pub static CLSID_StaticMetafile: CLSID;
}
extern "C" {
    pub static CLSID_StaticDib: CLSID;
}
extern "C" {
    pub static CID_CDfsVolume: CLSID;
}
extern "C" {
    pub static CLSID_DCOMAccessControl: CLSID;
}
extern "C" {
    pub static CLSID_GlobalOptions: CLSID;
}
extern "C" {
    pub static CLSID_StdGlobalInterfaceTable: CLSID;
}
extern "C" {
    pub static CLSID_ComBinding: CLSID;
}
extern "C" {
    pub static CLSID_StdEvent: CLSID;
}
extern "C" {
    pub static CLSID_ManualResetEvent: CLSID;
}
extern "C" {
    pub static CLSID_SynchronizeContainer: CLSID;
}
extern "C" {
    pub static CLSID_AddrControl: CLSID;
}
extern "C" {
    pub static CLSID_ContextSwitcher: CLSID;
}
extern "C" {
    pub static CLSID_CCDFormKrnl: CLSID;
}
extern "C" {
    pub static CLSID_CCDPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDFormDialog: CLSID;
}
extern "C" {
    pub static CLSID_CCDCommandButton: CLSID;
}
extern "C" {
    pub static CLSID_CCDComboBox: CLSID;
}
extern "C" {
    pub static CLSID_CCDTextBox: CLSID;
}
extern "C" {
    pub static CLSID_CCDCheckBox: CLSID;
}
extern "C" {
    pub static CLSID_CCDLabel: CLSID;
}
extern "C" {
    pub static CLSID_CCDOptionButton: CLSID;
}
extern "C" {
    pub static CLSID_CCDListBox: CLSID;
}
extern "C" {
    pub static CLSID_CCDScrollBar: CLSID;
}
extern "C" {
    pub static CLSID_CCDGroupBox: CLSID;
}
extern "C" {
    pub static CLSID_CCDGeneralPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDGenericPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDFontPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDColorPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDLabelPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDCheckBoxPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDTextBoxPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDOptionButtonPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDListBoxPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDCommandButtonPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDComboBoxPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDScrollBarPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDGroupBoxPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CCDXObjectPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CStdPropertyFrame: CLSID;
}
extern "C" {
    pub static CLSID_CFormPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CGridPropertyPage: CLSID;
}
extern "C" {
    pub static CLSID_CWSJArticlePage: CLSID;
}
extern "C" {
    pub static CLSID_CSystemPage: CLSID;
}
extern "C" {
    pub static CLSID_IdentityUnmarshal: CLSID;
}
extern "C" {
    pub static CLSID_InProcFreeMarshaler: CLSID;
}
extern "C" {
    pub static CLSID_Picture_Metafile: CLSID;
}
extern "C" {
    pub static CLSID_Picture_EnhMetafile: CLSID;
}
extern "C" {
    pub static CLSID_Picture_Dib: CLSID;
}
extern "C" {
    pub static GUID_TRISTATE: GUID;
}
extern "C" {
    pub static mut __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IMallocSpy: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBindCtx: IID;
}
extern "C" {
    pub static IID_IEnumMoniker: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IRunnableObject: IID;
}
extern "C" {
    pub static IID_IRunningObjectTable: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IPersist: IID;
}
extern "C" {
    pub static IID_IPersistStream: IID;
}
extern "C" {
    pub static IID_IMoniker: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IROTData: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IEnumSTATSTG: IID;
}
extern "C" {
    pub static IID_IStorage: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IPersistFile: IID;
}
extern "C" {
    pub static IID_IPersistStorage: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ILockBytes: IID;
}
extern "C" {
    pub static IID_IEnumFORMATETC: IID;
}
extern "C" {
    pub static IID_IEnumSTATDATA: IID;
}
extern "C" {
    pub static IID_IRootStorage: IID;
}
extern "C" {
    pub static IID_IAdviseSink: IID;
}
extern "C" {
    pub static IID_AsyncIAdviseSink: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IAdviseSink2: IID;
}
extern "C" {
    pub static IID_AsyncIAdviseSink2: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IDataObject: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IDataAdviseHolder: IID;
}
extern "C" {
    pub static IID_IMessageFilter: IID;
}
extern "C" {
    pub static FMTID_SummaryInformation: FMTID;
}
extern "C" {
    pub static FMTID_DocSummaryInformation: FMTID;
}
extern "C" {
    pub static FMTID_UserDefinedProperties: FMTID;
}
extern "C" {
    pub static FMTID_DiscardableInformation: FMTID;
}
extern "C" {
    pub static FMTID_ImageSummaryInformation: FMTID;
}
extern "C" {
    pub static FMTID_AudioSummaryInformation: FMTID;
}
extern "C" {
    pub static FMTID_VideoSummaryInformation: FMTID;
}
extern "C" {
    pub static FMTID_MediaFileSummaryInformation: FMTID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IClassActivator: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IFillLockBytes: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IProgressNotify: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ILayoutStorage: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBlockingLock: IID;
}
extern "C" {
    pub static IID_ITimeAndNoticeControl: IID;
}
extern "C" {
    pub static IID_IOplockStorage: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IDirectWriterLock: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IUrlMon: IID;
}
extern "C" {
    pub static IID_IForegroundTransfer: IID;
}
extern "C" {
    pub static IID_IThumbnailExtractor: IID;
}
extern "C" {
    pub static IID_IDummyHICONIncluder: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IProcessLock: IID;
}
extern "C" {
    pub static IID_ISurrogateService: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInitializeSpy: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IApartmentShutdown: IID;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut IOleAutomationTypes_v1_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut IOleAutomationTypes_v1_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ICreateTypeInfo: IID;
}
extern "C" {
    pub static IID_ICreateTypeInfo2: IID;
}
extern "C" {
    pub static IID_ICreateTypeLib: IID;
}
extern "C" {
    pub static IID_ICreateTypeLib2: IID;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IDispatch: IID;
}
extern "C" {
    pub static IID_IEnumVARIANT: IID;
}
extern "C" {
    pub static IID_ITypeComp: IID;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ITypeInfo: IID;
}
extern "C" {
    pub static IID_ITypeInfo2: IID;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ITypeLib: IID;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ITypeLib2: IID;
}
extern "C" {
    pub static IID_ITypeChangeEvents: IID;
}
extern "C" {
    pub static IID_IErrorInfo: IID;
}
extern "C" {
    pub static IID_ICreateErrorInfo: IID;
}
extern "C" {
    pub static IID_ISupportErrorInfo: IID;
}
extern "C" {
    pub static IID_ITypeFactory: IID;
}
extern "C" {
    pub static IID_ITypeMarshal: IID;
}
extern "C" {
    pub static IID_IRecordInfo: IID;
}
extern "C" {
    pub static IID_IErrorLog: IID;
}
extern "C" {
    pub static IID_IPropertyBag: IID;
}
extern "C" {
    pub static IID_ITypeLibRegistrationReader: IID;
}
extern "C" {
    pub static IID_ITypeLibRegistration: IID;
}
extern "C" {
    pub static CLSID_TypeLibRegistrationReader: CLSID;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IPropertyStorage: IID;
}
extern "C" {
    pub static IID_IPropertySetStorage: IID;
}
extern "C" {
    pub static IID_IEnumSTATPROPSTG: IID;
}
extern "C" {
    pub static IID_IEnumSTATPROPSETSTG: IID;
}
extern "C" {
    pub static mut __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IOleAdviseHolder: IID;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IOleCache: IID;
}
extern "C" {
    pub static IID_IOleCache2: IID;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IOleCacheControl: IID;
}
extern "C" {
    pub static IID_IParseDisplayName: IID;
}
extern "C" {
    pub static IID_IOleContainer: IID;
}
extern "C" {
    pub static IID_IOleClientSite: IID;
}
extern "C" {
    pub static IID_IOleObject: IID;
}
extern "C" {
    pub static mut IOLETypes_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut IOLETypes_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IOleWindow: IID;
}
extern "C" {
    pub static IID_IOleLink: IID;
}
extern "C" {
    pub static IID_IOleItemContainer: IID;
}
extern "C" {
    pub static IID_IOleInPlaceUIWindow: IID;
}
extern "C" {
    pub static IID_IOleInPlaceActiveObject: IID;
}
extern "C" {
    pub static IID_IOleInPlaceFrame: IID;
}
extern "C" {
    pub static IID_IOleInPlaceObject: IID;
}
extern "C" {
    pub static IID_IOleInPlaceSite: IID;
}
extern "C" {
    pub static IID_IContinue: IID;
}
extern "C" {
    pub static IID_IViewObject: IID;
}
extern "C" {
    pub static IID_IViewObject2: IID;
}
extern "C" {
    pub static IID_IDropSource: IID;
}
extern "C" {
    pub static IID_IDropTarget: IID;
}
extern "C" {
    pub static IID_IDropSourceNotify: IID;
}
extern "C" {
    pub static IID_IEnterpriseDropTarget: IID;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IEnumOLEVERB: IID;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IServiceProvider: IID;
}
extern "C" {
    pub static mut __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static LIBID_MSXML: IID;
}
extern "C" {
    pub static IID_IXMLDOMImplementation: IID;
}
extern "C" {
    pub static IID_IXMLDOMNode: IID;
}
extern "C" {
    pub static IID_IXMLDOMDocumentFragment: IID;
}
extern "C" {
    pub static IID_IXMLDOMDocument: IID;
}
extern "C" {
    pub static IID_IXMLDOMNodeList: IID;
}
extern "C" {
    pub static IID_IXMLDOMNamedNodeMap: IID;
}
extern "C" {
    pub static IID_IXMLDOMCharacterData: IID;
}
extern "C" {
    pub static IID_IXMLDOMAttribute: IID;
}
extern "C" {
    pub static IID_IXMLDOMElement: IID;
}
extern "C" {
    pub static IID_IXMLDOMText: IID;
}
extern "C" {
    pub static IID_IXMLDOMComment: IID;
}
extern "C" {
    pub static IID_IXMLDOMProcessingInstruction: IID;
}
extern "C" {
    pub static IID_IXMLDOMCDATASection: IID;
}
extern "C" {
    pub static IID_IXMLDOMDocumentType: IID;
}
extern "C" {
    pub static IID_IXMLDOMNotation: IID;
}
extern "C" {
    pub static IID_IXMLDOMEntity: IID;
}
extern "C" {
    pub static IID_IXMLDOMEntityReference: IID;
}
extern "C" {
    pub static IID_IXMLDOMParseError: IID;
}
extern "C" {
    pub static IID_IXTLRuntime: IID;
}
extern "C" {
    pub static DIID_XMLDOMDocumentEvents: IID;
}
extern "C" {
    pub static CLSID_DOMDocument: CLSID;
}
extern "C" {
    pub static CLSID_DOMFreeThreadedDocument: CLSID;
}
extern "C" {
    pub static IID_IXMLHttpRequest: IID;
}
extern "C" {
    pub static CLSID_XMLHTTPRequest: CLSID;
}
extern "C" {
    pub static IID_IXMLDSOControl: IID;
}
extern "C" {
    pub static CLSID_XMLDSOControl: CLSID;
}
extern "C" {
    pub static IID_IXMLElementCollection: IID;
}
extern "C" {
    pub static IID_IXMLDocument: IID;
}
extern "C" {
    pub static IID_IXMLDocument2: IID;
}
extern "C" {
    pub static IID_IXMLElement: IID;
}
extern "C" {
    pub static IID_IXMLElement2: IID;
}
extern "C" {
    pub static IID_IXMLAttribute: IID;
}
extern "C" {
    pub static IID_IXMLError: IID;
}
extern "C" {
    pub static CLSID_XMLDocument: CLSID;
}
extern "C" {
    pub static mut __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static CLSID_SBS_StdURLMoniker: IID;
}
extern "C" {
    pub static CLSID_SBS_HttpProtocol: IID;
}
extern "C" {
    pub static CLSID_SBS_FtpProtocol: IID;
}
extern "C" {
    pub static CLSID_SBS_GopherProtocol: IID;
}
extern "C" {
    pub static CLSID_SBS_HttpSProtocol: IID;
}
extern "C" {
    pub static CLSID_SBS_FileProtocol: IID;
}
extern "C" {
    pub static CLSID_SBS_MkProtocol: IID;
}
extern "C" {
    pub static CLSID_SBS_UrlMkBindCtx: IID;
}
extern "C" {
    pub static CLSID_SBS_SoftDistExt: IID;
}
extern "C" {
    pub static CLSID_SBS_CdlProtocol: IID;
}
extern "C" {
    pub static CLSID_SBS_ClassInstallFilter: IID;
}
extern "C" {
    pub static CLSID_SBS_InternetSecurityManager: IID;
}
extern "C" {
    pub static CLSID_SBS_InternetZoneManager: IID;
}
extern "C" {
    pub static IID_IAsyncMoniker: IID;
}
extern "C" {
    pub static CLSID_StdURLMoniker: IID;
}
extern "C" {
    pub static CLSID_HttpProtocol: IID;
}
extern "C" {
    pub static CLSID_FtpProtocol: IID;
}
extern "C" {
    pub static CLSID_GopherProtocol: IID;
}
extern "C" {
    pub static CLSID_HttpSProtocol: IID;
}
extern "C" {
    pub static CLSID_FileProtocol: IID;
}
extern "C" {
    pub static CLSID_ResProtocol: IID;
}
extern "C" {
    pub static CLSID_AboutProtocol: IID;
}
extern "C" {
    pub static CLSID_JSProtocol: IID;
}
extern "C" {
    pub static CLSID_MailtoProtocol: IID;
}
extern "C" {
    pub static CLSID_IE4_PROTOCOLS: IID;
}
extern "C" {
    pub static CLSID_MkProtocol: IID;
}
extern "C" {
    pub static CLSID_StdURLProtocol: IID;
}
extern "C" {
    pub static CLSID_TBAuthProtocol: IID;
}
extern "C" {
    pub static CLSID_UrlMkBindCtx: IID;
}
extern "C" {
    pub static CLSID_CdlProtocol: IID;
}
extern "C" {
    pub static CLSID_ClassInstallFilter: IID;
}
extern "C" {
    pub static IID_IAsyncBindCtx: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IPersistMoniker: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IMonikerProp: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBindProtocol: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBinding: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBindStatusCallback: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBindStatusCallbackEx: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IAuthenticate: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IAuthenticateEx: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IHttpNegotiate: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IHttpNegotiate2: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IHttpNegotiate3: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IWinInetFileStream: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IWindowForBindingUI: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ICodeInstall: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IUri: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IUriContainer: IID;
}
extern "C" {
    pub static IID_IUriBuilder: IID;
}
extern "C" {
    pub static IID_IUriBuilderFactory: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IWinInetInfo: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IHttpSecurity: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IWinInetHttpInfo: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IWinInetHttpTimeouts: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IWinInetCacheHints: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IWinInetCacheHints2: IID;
}
extern "C" {
    pub static SID_BindHost: GUID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBindHost: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternet: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetBindInfo: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetBindInfoEx: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetProtocolRoot: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetProtocol: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetProtocolEx: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetProtocolSink: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetProtocolSinkStackable: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetSession: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetThreadSwitch: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetPriority: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetProtocolInfo: IID;
}
extern "C" {
    pub static CLSID_InternetSecurityManager: IID;
}
extern "C" {
    pub static CLSID_InternetZoneManager: IID;
}
extern "C" {
    pub static CLSID_PersistentZoneIdentifier: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetSecurityMgrSite: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetSecurityManager: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetSecurityManagerEx: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetSecurityManagerEx2: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IZoneIdentifier: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IZoneIdentifier2: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetHostSecurityManager: IID;
}
extern "C" {
    pub static GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED: GUID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetZoneManager: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetZoneManagerEx: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IInternetZoneManagerEx2: IID;
}
extern "C" {
    pub static CLSID_SoftDistExt: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ISoftDistExt: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_ICatalogFileInfo: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IDataFilter: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IEncodingFilterFactory: IID;
}
extern "C" {
    pub static GUID_CUSTOM_CONFIRMOBJECTSAFETY: GUID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IWrappedProtocol: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IGetBindHandle: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBindCallbackRedirect: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_IBindHttpSecurity: IID;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static mut __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec: RPC_IF_HANDLE;
}
extern "C" {
    pub static IID_StdOle: IID;
}
extern "C" {
    pub static IID_IPrintDialogCallback: GUID;
}
extern "C" {
    pub static IID_IPrintDialogServices: GUID;
}
extern "C" {
    pub static NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID: GUID;
}
extern "C" {
    pub static NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID: GUID;
}
extern "C" {
    pub static DOMAIN_JOIN_GUID: GUID;
}
extern "C" {
    pub static DOMAIN_LEAVE_GUID: GUID;
}
extern "C" {
    pub static FIREWALL_PORT_OPEN_GUID: GUID;
}
extern "C" {
    pub static FIREWALL_PORT_CLOSE_GUID: GUID;
}
extern "C" {
    pub static MACHINE_POLICY_PRESENT_GUID: GUID;
}
extern "C" {
    pub static USER_POLICY_PRESENT_GUID: GUID;
}
extern "C" {
    pub static RPC_INTERFACE_EVENT_GUID: GUID;
}
extern "C" {
    pub static NAMED_PIPE_EVENT_GUID: GUID;
}
extern "C" {
    pub static CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID: GUID;
}
#[repr(C)]
pub struct _cef_main_args_t {
    pub instance: HINSTANCE,
}
#[test]
fn bindgen_test_layout__cef_main_args_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_main_args_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_main_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_main_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_main_args_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_main_args_t>())).instance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_main_args_t),
            "::",
            stringify!(instance)
        )
    );
}
impl Default for _cef_main_args_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cef_main_args_t = _cef_main_args_t;
#[repr(C)]
pub struct _cef_window_info_t {
    pub ex_style: DWORD,
    pub window_name: cef_string_t,
    pub style: DWORD,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub parent_window: HWND,
    pub menu: HMENU,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub shared_texture_enabled: ::std::os::raw::c_int,
    pub external_begin_frame_enabled: ::std::os::raw::c_int,
    pub window: HWND,
}
#[test]
fn bindgen_test_layout__cef_window_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_window_info_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_window_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_window_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_window_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).ex_style as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(ex_style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).window_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(window_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).style as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).x as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).y as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).width as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).height as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).parent_window as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(parent_window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).menu as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).windowless_rendering_enabled as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(windowless_rendering_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).shared_texture_enabled as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(shared_texture_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).external_begin_frame_enabled as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(external_begin_frame_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).window as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(window)
        )
    );
}
impl Default for _cef_window_info_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cef_window_info_t = _cef_window_info_t;
pub type cef_color_t = uint32;
impl cef_log_severity_t {
    pub const LOGSEVERITY_DEBUG: cef_log_severity_t = cef_log_severity_t::LOGSEVERITY_VERBOSE;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_log_severity_t {
    LOGSEVERITY_DEFAULT = 0,
    LOGSEVERITY_VERBOSE = 1,
    LOGSEVERITY_INFO = 2,
    LOGSEVERITY_WARNING = 3,
    LOGSEVERITY_ERROR = 4,
    LOGSEVERITY_FATAL = 5,
    LOGSEVERITY_DISABLE = 99,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_state_t {
    STATE_DEFAULT = 0,
    STATE_ENABLED = 1,
    STATE_DISABLED = 2,
}
#[repr(C)]
pub struct _cef_settings_t {
    pub size: usize,
    pub no_sandbox: ::std::os::raw::c_int,
    pub browser_subprocess_path: cef_string_t,
    pub framework_dir_path: cef_string_t,
    pub main_bundle_path: cef_string_t,
    pub multi_threaded_message_loop: ::std::os::raw::c_int,
    pub external_message_pump: ::std::os::raw::c_int,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub command_line_args_disabled: ::std::os::raw::c_int,
    pub cache_path: cef_string_t,
    pub root_cache_path: cef_string_t,
    pub user_data_path: cef_string_t,
    pub persist_session_cookies: ::std::os::raw::c_int,
    pub persist_user_preferences: ::std::os::raw::c_int,
    pub user_agent: cef_string_t,
    pub product_version: cef_string_t,
    pub locale: cef_string_t,
    pub log_file: cef_string_t,
    pub log_severity: cef_log_severity_t,
    pub javascript_flags: cef_string_t,
    pub resources_dir_path: cef_string_t,
    pub locales_dir_path: cef_string_t,
    pub pack_loading_disabled: ::std::os::raw::c_int,
    pub remote_debugging_port: ::std::os::raw::c_int,
    pub uncaught_exception_stack_size: ::std::os::raw::c_int,
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    pub enable_net_security_expiration: ::std::os::raw::c_int,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
    pub application_client_id_for_file_scanning: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_settings_t>(),
        432usize,
        concat!("Size of: ", stringify!(_cef_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).no_sandbox as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(no_sandbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).browser_subprocess_path as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(browser_subprocess_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).framework_dir_path as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(framework_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).main_bundle_path as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(main_bundle_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).multi_threaded_message_loop as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(multi_threaded_message_loop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).external_message_pump as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(external_message_pump)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).windowless_rendering_enabled as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(windowless_rendering_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).command_line_args_disabled as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(command_line_args_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).cache_path as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(cache_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).root_cache_path as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(root_cache_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).user_data_path as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(user_data_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).persist_session_cookies as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(persist_session_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).persist_user_preferences as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(persist_user_preferences)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).user_agent as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(user_agent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).product_version as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(product_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).locale as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).log_file as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(log_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).log_severity as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(log_severity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).javascript_flags as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(javascript_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).resources_dir_path as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(resources_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).locales_dir_path as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(locales_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).pack_loading_disabled as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(pack_loading_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).remote_debugging_port as *const _ as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(remote_debugging_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).uncaught_exception_stack_size as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(uncaught_exception_stack_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).ignore_certificate_errors as *const _
                as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(ignore_certificate_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).enable_net_security_expiration as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(enable_net_security_expiration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).background_color as *const _ as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).accept_language_list as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(accept_language_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).application_client_id_for_file_scanning
                as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(application_client_id_for_file_scanning)
        )
    );
}
impl Default for _cef_settings_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cef_settings_t = _cef_settings_t;
#[repr(C)]
pub struct _cef_browser_settings_t {
    pub size: usize,
    pub windowless_frame_rate: ::std::os::raw::c_int,
    pub standard_font_family: cef_string_t,
    pub fixed_font_family: cef_string_t,
    pub serif_font_family: cef_string_t,
    pub sans_serif_font_family: cef_string_t,
    pub cursive_font_family: cef_string_t,
    pub fantasy_font_family: cef_string_t,
    pub default_font_size: ::std::os::raw::c_int,
    pub default_fixed_font_size: ::std::os::raw::c_int,
    pub minimum_font_size: ::std::os::raw::c_int,
    pub minimum_logical_font_size: ::std::os::raw::c_int,
    pub default_encoding: cef_string_t,
    pub remote_fonts: cef_state_t,
    pub javascript: cef_state_t,
    pub javascript_close_windows: cef_state_t,
    pub javascript_access_clipboard: cef_state_t,
    pub javascript_dom_paste: cef_state_t,
    pub plugins: cef_state_t,
    pub universal_access_from_file_urls: cef_state_t,
    pub file_access_from_file_urls: cef_state_t,
    pub web_security: cef_state_t,
    pub image_loading: cef_state_t,
    pub image_shrink_standalone_to_fit: cef_state_t,
    pub text_area_resize: cef_state_t,
    pub tab_to_links: cef_state_t,
    pub local_storage: cef_state_t,
    pub databases: cef_state_t,
    pub application_cache: cef_state_t,
    pub webgl: cef_state_t,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_browser_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_settings_t>(),
        296usize,
        concat!("Size of: ", stringify!(_cef_browser_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_browser_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).windowless_frame_rate as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).standard_font_family as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(standard_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).fixed_font_family as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(fixed_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).serif_font_family as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(serif_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).sans_serif_font_family as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(sans_serif_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).cursive_font_family as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(cursive_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).fantasy_font_family as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(fantasy_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_font_size as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_fixed_font_size as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_fixed_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).minimum_font_size as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(minimum_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).minimum_logical_font_size
                as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(minimum_logical_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_encoding as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_encoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).remote_fonts as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(remote_fonts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_close_windows as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_close_windows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_access_clipboard
                as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_access_clipboard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_dom_paste as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_dom_paste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).plugins as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).universal_access_from_file_urls
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(universal_access_from_file_urls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).file_access_from_file_urls
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(file_access_from_file_urls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).web_security as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(web_security)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).image_loading as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(image_loading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).image_shrink_standalone_to_fit
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(image_shrink_standalone_to_fit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).text_area_resize as *const _
                as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(text_area_resize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).tab_to_links as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(tab_to_links)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).local_storage as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(local_storage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).databases as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(databases)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).application_cache as *const _
                as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(application_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).webgl as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(webgl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).background_color as *const _
                as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).accept_language_list as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(accept_language_list)
        )
    );
}
impl Default for _cef_browser_settings_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cef_browser_settings_t = _cef_browser_settings_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_return_value_t {
    RV_CANCEL = 0,
    RV_CONTINUE = 1,
    RV_CONTINUE_ASYNC = 2,
}
#[repr(C)]
pub struct _cef_cookie_t {
    pub name: cef_string_t,
    pub value: cef_string_t,
    pub domain: cef_string_t,
    pub path: cef_string_t,
    pub secure: ::std::os::raw::c_int,
    pub httponly: ::std::os::raw::c_int,
    pub creation: cef_time_t,
    pub last_access: cef_time_t,
    pub has_expires: ::std::os::raw::c_int,
    pub expires: cef_time_t,
}
#[test]
fn bindgen_test_layout__cef_cookie_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_t>(),
        208usize,
        concat!("Size of: ", stringify!(_cef_cookie_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cookie_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).domain as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).path as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).secure as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(secure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).httponly as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(httponly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).creation as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(creation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).last_access as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(last_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).has_expires as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(has_expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).expires as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(expires)
        )
    );
}
impl Default for _cef_cookie_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_termination_status_t {
    TS_ABNORMAL_TERMINATION = 0,
    TS_PROCESS_WAS_KILLED = 1,
    TS_PROCESS_CRASHED = 2,
    TS_PROCESS_OOM = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_errorcode_t {
    ERR_NONE = 0,
    ERR_IO_PENDING = -1,
    ERR_FAILED = -2,
    ERR_ABORTED = -3,
    ERR_INVALID_ARGUMENT = -4,
    ERR_INVALID_HANDLE = -5,
    ERR_FILE_NOT_FOUND = -6,
    ERR_TIMED_OUT = -7,
    ERR_FILE_TOO_BIG = -8,
    ERR_UNEXPECTED = -9,
    ERR_ACCESS_DENIED = -10,
    ERR_NOT_IMPLEMENTED = -11,
    ERR_INSUFFICIENT_RESOURCES = -12,
    ERR_OUT_OF_MEMORY = -13,
    ERR_UPLOAD_FILE_CHANGED = -14,
    ERR_SOCKET_NOT_CONNECTED = -15,
    ERR_FILE_EXISTS = -16,
    ERR_FILE_PATH_TOO_LONG = -17,
    ERR_FILE_NO_SPACE = -18,
    ERR_FILE_VIRUS_INFECTED = -19,
    ERR_BLOCKED_BY_CLIENT = -20,
    ERR_NETWORK_CHANGED = -21,
    ERR_BLOCKED_BY_ADMINISTRATOR = -22,
    ERR_SOCKET_IS_CONNECTED = -23,
    ERR_BLOCKED_ENROLLMENT_CHECK_PENDING = -24,
    ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED = -25,
    ERR_CONTEXT_SHUT_DOWN = -26,
    ERR_BLOCKED_BY_RESPONSE = -27,
    ERR_BLOCKED_BY_XSS_AUDITOR = -28,
    ERR_CLEARTEXT_NOT_PERMITTED = -29,
    ERR_CONNECTION_CLOSED = -100,
    ERR_CONNECTION_RESET = -101,
    ERR_CONNECTION_REFUSED = -102,
    ERR_CONNECTION_ABORTED = -103,
    ERR_CONNECTION_FAILED = -104,
    ERR_NAME_NOT_RESOLVED = -105,
    ERR_INTERNET_DISCONNECTED = -106,
    ERR_SSL_PROTOCOL_ERROR = -107,
    ERR_ADDRESS_INVALID = -108,
    ERR_ADDRESS_UNREACHABLE = -109,
    ERR_SSL_CLIENT_AUTH_CERT_NEEDED = -110,
    ERR_TUNNEL_CONNECTION_FAILED = -111,
    ERR_NO_SSL_VERSIONS_ENABLED = -112,
    ERR_SSL_VERSION_OR_CIPHER_MISMATCH = -113,
    ERR_SSL_RENEGOTIATION_REQUESTED = -114,
    ERR_PROXY_AUTH_UNSUPPORTED = -115,
    ERR_CERT_ERROR_IN_SSL_RENEGOTIATION = -116,
    ERR_BAD_SSL_CLIENT_AUTH_CERT = -117,
    ERR_CONNECTION_TIMED_OUT = -118,
    ERR_HOST_RESOLVER_QUEUE_TOO_LARGE = -119,
    ERR_SOCKS_CONNECTION_FAILED = -120,
    ERR_SOCKS_CONNECTION_HOST_UNREACHABLE = -121,
    ERR_ALPN_NEGOTIATION_FAILED = -122,
    ERR_SSL_NO_RENEGOTIATION = -123,
    ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES = -124,
    ERR_SSL_DECOMPRESSION_FAILURE_ALERT = -125,
    ERR_SSL_BAD_RECORD_MAC_ALERT = -126,
    ERR_PROXY_AUTH_REQUESTED = -127,
    ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY = -129,
    ERR_PROXY_CONNECTION_FAILED = -130,
    ERR_MANDATORY_PROXY_CONFIGURATION_FAILED = -131,
    ERR_PRECONNECT_MAX_SOCKET_LIMIT = -133,
    ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED = -134,
    ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY = -135,
    ERR_PROXY_CERTIFICATE_INVALID = -136,
    ERR_NAME_RESOLUTION_FAILED = -137,
    ERR_NETWORK_ACCESS_DENIED = -138,
    ERR_TEMPORARILY_THROTTLED = -139,
    ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT = -140,
    ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED = -141,
    ERR_MSG_TOO_BIG = -142,
    ERR_WS_PROTOCOL_ERROR = -145,
    ERR_ADDRESS_IN_USE = -147,
    ERR_SSL_HANDSHAKE_NOT_COMPLETED = -148,
    ERR_SSL_BAD_PEER_PUBLIC_KEY = -149,
    ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN = -150,
    ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED = -151,
    ERR_ORIGIN_BOUND_CERT_GENERATION_TYPE_MISMATCH = -152,
    ERR_SSL_DECRYPT_ERROR_ALERT = -153,
    ERR_WS_THROTTLE_QUEUE_TOO_LARGE = -154,
    ERR_SSL_SERVER_CERT_CHANGED = -156,
    ERR_SSL_UNRECOGNIZED_NAME_ALERT = -159,
    ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR = -160,
    ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR = -161,
    ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE = -162,
    ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE = -163,
    ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT = -164,
    ERR_ICANN_NAME_COLLISION = -166,
    ERR_SSL_SERVER_CERT_BAD_FORMAT = -167,
    ERR_CT_STH_PARSING_FAILED = -168,
    ERR_CT_STH_INCOMPLETE = -169,
    ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH = -170,
    ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED = -171,
    ERR_SSL_OBSOLETE_CIPHER = -172,
    ERR_WS_UPGRADE = -173,
    ERR_READ_IF_READY_NOT_IMPLEMENTED = -174,
    ERR_NO_BUFFER_SPACE = -176,
    ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS = -177,
    ERR_EARLY_DATA_REJECTED = -178,
    ERR_WRONG_VERSION_ON_EARLY_DATA = -179,
    ERR_TLS13_DOWNGRADE_DETECTED = -180,
    ERR_SSL_KEY_USAGE_INCOMPATIBLE = -181,
    ERR_CERT_COMMON_NAME_INVALID = -200,
    ERR_CERT_DATE_INVALID = -201,
    ERR_CERT_AUTHORITY_INVALID = -202,
    ERR_CERT_CONTAINS_ERRORS = -203,
    ERR_CERT_NO_REVOCATION_MECHANISM = -204,
    ERR_CERT_UNABLE_TO_CHECK_REVOCATION = -205,
    ERR_CERT_REVOKED = -206,
    ERR_CERT_INVALID = -207,
    ERR_CERT_WEAK_SIGNATURE_ALGORITHM = -208,
    ERR_CERT_NON_UNIQUE_NAME = -210,
    ERR_CERT_WEAK_KEY = -211,
    ERR_CERT_NAME_CONSTRAINT_VIOLATION = -212,
    ERR_CERT_VALIDITY_TOO_LONG = -213,
    ERR_CERTIFICATE_TRANSPARENCY_REQUIRED = -214,
    ERR_CERT_SYMANTEC_LEGACY = -215,
    ERR_CERT_END = -216,
    ERR_INVALID_URL = -300,
    ERR_DISALLOWED_URL_SCHEME = -301,
    ERR_UNKNOWN_URL_SCHEME = -302,
    ERR_INVALID_REDIRECT = -303,
    ERR_TOO_MANY_REDIRECTS = -310,
    ERR_UNSAFE_REDIRECT = -311,
    ERR_UNSAFE_PORT = -312,
    ERR_INVALID_RESPONSE = -320,
    ERR_INVALID_CHUNKED_ENCODING = -321,
    ERR_METHOD_NOT_SUPPORTED = -322,
    ERR_UNEXPECTED_PROXY_AUTH = -323,
    ERR_EMPTY_RESPONSE = -324,
    ERR_RESPONSE_HEADERS_TOO_BIG = -325,
    ERR_PAC_STATUS_NOT_OK = -326,
    ERR_PAC_SCRIPT_FAILED = -327,
    ERR_REQUEST_RANGE_NOT_SATISFIABLE = -328,
    ERR_MALFORMED_IDENTITY = -329,
    ERR_CONTENT_DECODING_FAILED = -330,
    ERR_NETWORK_IO_SUSPENDED = -331,
    ERR_SYN_REPLY_NOT_RECEIVED = -332,
    ERR_ENCODING_CONVERSION_FAILED = -333,
    ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT = -334,
    ERR_NO_SUPPORTED_PROXIES = -336,
    ERR_SPDY_PROTOCOL_ERROR = -337,
    ERR_INVALID_AUTH_CREDENTIALS = -338,
    ERR_UNSUPPORTED_AUTH_SCHEME = -339,
    ERR_ENCODING_DETECTION_FAILED = -340,
    ERR_MISSING_AUTH_CREDENTIALS = -341,
    ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS = -342,
    ERR_MISCONFIGURED_AUTH_ENVIRONMENT = -343,
    ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS = -344,
    ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN = -345,
    ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH = -346,
    ERR_INCOMPLETE_SPDY_HEADERS = -347,
    ERR_PAC_NOT_IN_DHCP = -348,
    ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION = -349,
    ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION = -350,
    ERR_SPDY_SERVER_REFUSED_STREAM = -351,
    ERR_SPDY_PING_FAILED = -352,
    ERR_CONTENT_LENGTH_MISMATCH = -354,
    ERR_INCOMPLETE_CHUNKED_ENCODING = -355,
    ERR_QUIC_PROTOCOL_ERROR = -356,
    ERR_RESPONSE_HEADERS_TRUNCATED = -357,
    ERR_QUIC_HANDSHAKE_FAILED = -358,
    ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY = -360,
    ERR_SPDY_FLOW_CONTROL_ERROR = -361,
    ERR_SPDY_FRAME_SIZE_ERROR = -362,
    ERR_SPDY_COMPRESSION_ERROR = -363,
    ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION = -364,
    ERR_HTTP_1_1_REQUIRED = -365,
    ERR_PROXY_HTTP_1_1_REQUIRED = -366,
    ERR_PAC_SCRIPT_TERMINATED = -367,
    ERR_INVALID_HTTP_RESPONSE = -370,
    ERR_CONTENT_DECODING_INIT_FAILED = -371,
    ERR_SPDY_RST_STREAM_NO_ERROR_RECEIVED = -372,
    ERR_SPDY_PUSHED_STREAM_NOT_AVAILABLE = -373,
    ERR_SPDY_CLAIMED_PUSHED_STREAM_RESET_BY_SERVER = -374,
    ERR_TOO_MANY_RETRIES = -375,
    ERR_SPDY_STREAM_CLOSED = -376,
    ERR_SPDY_CLIENT_REFUSED_STREAM = -377,
    ERR_SPDY_PUSHED_RESPONSE_DOES_NOT_MATCH = -378,
    ERR_CACHE_MISS = -400,
    ERR_CACHE_READ_FAILURE = -401,
    ERR_CACHE_WRITE_FAILURE = -402,
    ERR_CACHE_OPERATION_NOT_SUPPORTED = -403,
    ERR_CACHE_OPEN_FAILURE = -404,
    ERR_CACHE_CREATE_FAILURE = -405,
    ERR_CACHE_RACE = -406,
    ERR_CACHE_CHECKSUM_READ_FAILURE = -407,
    ERR_CACHE_CHECKSUM_MISMATCH = -408,
    ERR_CACHE_LOCK_TIMEOUT = -409,
    ERR_CACHE_AUTH_FAILURE_AFTER_READ = -410,
    ERR_CACHE_ENTRY_NOT_SUITABLE = -411,
    ERR_CACHE_DOOM_FAILURE = -412,
    ERR_CACHE_OPEN_OR_CREATE_FAILURE = -413,
    ERR_INSECURE_RESPONSE = -501,
    ERR_NO_PRIVATE_KEY_FOR_CERT = -502,
    ERR_ADD_USER_CERT_FAILED = -503,
    ERR_INVALID_SIGNED_EXCHANGE = -504,
    ERR_FTP_FAILED = -601,
    ERR_FTP_SERVICE_UNAVAILABLE = -602,
    ERR_FTP_TRANSFER_ABORTED = -603,
    ERR_FTP_FILE_BUSY = -604,
    ERR_FTP_SYNTAX_ERROR = -605,
    ERR_FTP_COMMAND_NOT_SUPPORTED = -606,
    ERR_FTP_BAD_COMMAND_SEQUENCE = -607,
    ERR_PKCS12_IMPORT_BAD_PASSWORD = -701,
    ERR_PKCS12_IMPORT_FAILED = -702,
    ERR_IMPORT_CA_CERT_NOT_CA = -703,
    ERR_IMPORT_CERT_ALREADY_EXISTS = -704,
    ERR_IMPORT_CA_CERT_FAILED = -705,
    ERR_IMPORT_SERVER_CERT_FAILED = -706,
    ERR_PKCS12_IMPORT_INVALID_MAC = -707,
    ERR_PKCS12_IMPORT_INVALID_FILE = -708,
    ERR_PKCS12_IMPORT_UNSUPPORTED = -709,
    ERR_KEY_GENERATION_FAILED = -710,
    ERR_PRIVATE_KEY_EXPORT_FAILED = -712,
    ERR_SELF_SIGNED_CERT_GENERATION_FAILED = -713,
    ERR_CERT_DATABASE_CHANGED = -714,
    ERR_DNS_MALFORMED_RESPONSE = -800,
    ERR_DNS_SERVER_REQUIRES_TCP = -801,
    ERR_DNS_SERVER_FAILED = -802,
    ERR_DNS_TIMED_OUT = -803,
    ERR_DNS_CACHE_MISS = -804,
    ERR_DNS_SEARCH_EMPTY = -805,
    ERR_DNS_SORT_ERROR = -806,
    ERR_DNS_HTTP_FAILED = -807,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_cert_status_t {
    CERT_STATUS_NONE = 0,
    CERT_STATUS_COMMON_NAME_INVALID = 1,
    CERT_STATUS_DATE_INVALID = 2,
    CERT_STATUS_AUTHORITY_INVALID = 4,
    CERT_STATUS_NO_REVOCATION_MECHANISM = 16,
    CERT_STATUS_UNABLE_TO_CHECK_REVOCATION = 32,
    CERT_STATUS_REVOKED = 64,
    CERT_STATUS_INVALID = 128,
    CERT_STATUS_WEAK_SIGNATURE_ALGORITHM = 256,
    CERT_STATUS_NON_UNIQUE_NAME = 1024,
    CERT_STATUS_WEAK_KEY = 2048,
    CERT_STATUS_PINNED_KEY_MISSING = 8192,
    CERT_STATUS_NAME_CONSTRAINT_VIOLATION = 16384,
    CERT_STATUS_VALIDITY_TOO_LONG = 32768,
    CERT_STATUS_IS_EV = 65536,
    CERT_STATUS_REV_CHECKING_ENABLED = 131072,
    CERT_STATUS_SHA1_SIGNATURE_PRESENT = 524288,
    CERT_STATUS_CT_COMPLIANCE_FAILED = 1048576,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_window_open_disposition_t {
    WOD_UNKNOWN = 0,
    WOD_CURRENT_TAB = 1,
    WOD_SINGLETON_TAB = 2,
    WOD_NEW_FOREGROUND_TAB = 3,
    WOD_NEW_BACKGROUND_TAB = 4,
    WOD_NEW_POPUP = 5,
    WOD_NEW_WINDOW = 6,
    WOD_SAVE_TO_DISK = 7,
    WOD_OFF_THE_RECORD = 8,
    WOD_IGNORE_ACTION = 9,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_drag_operations_mask_t {
    DRAG_OPERATION_NONE = 0,
    DRAG_OPERATION_COPY = 1,
    DRAG_OPERATION_LINK = 2,
    DRAG_OPERATION_GENERIC = 4,
    DRAG_OPERATION_PRIVATE = 8,
    DRAG_OPERATION_MOVE = 16,
    DRAG_OPERATION_DELETE = 32,
    DRAG_OPERATION_EVERY = -1,
}
impl cef_text_input_mode_t {
    pub const CEF_TEXT_INPUT_MODE_MAX: cef_text_input_mode_t =
        cef_text_input_mode_t::CEF_TEXT_INPUT_MODE_SEARCH;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_text_input_mode_t {
    CEF_TEXT_INPUT_MODE_DEFAULT = 0,
    CEF_TEXT_INPUT_MODE_NONE = 1,
    CEF_TEXT_INPUT_MODE_TEXT = 2,
    CEF_TEXT_INPUT_MODE_TEL = 3,
    CEF_TEXT_INPUT_MODE_URL = 4,
    CEF_TEXT_INPUT_MODE_EMAIL = 5,
    CEF_TEXT_INPUT_MODE_NUMERIC = 6,
    CEF_TEXT_INPUT_MODE_DECIMAL = 7,
    CEF_TEXT_INPUT_MODE_SEARCH = 8,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_v8_accesscontrol_t {
    V8_ACCESS_CONTROL_DEFAULT = 0,
    V8_ACCESS_CONTROL_ALL_CAN_READ = 1,
    V8_ACCESS_CONTROL_ALL_CAN_WRITE = 2,
    V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_v8_propertyattribute_t {
    V8_PROPERTY_ATTRIBUTE_NONE = 0,
    V8_PROPERTY_ATTRIBUTE_READONLY = 1,
    V8_PROPERTY_ATTRIBUTE_DONTENUM = 2,
    V8_PROPERTY_ATTRIBUTE_DONTDELETE = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_postdataelement_type_t {
    PDE_TYPE_EMPTY = 0,
    PDE_TYPE_BYTES = 1,
    PDE_TYPE_FILE = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_resource_type_t {
    RT_MAIN_FRAME = 0,
    RT_SUB_FRAME = 1,
    RT_STYLESHEET = 2,
    RT_SCRIPT = 3,
    RT_IMAGE = 4,
    RT_FONT_RESOURCE = 5,
    RT_SUB_RESOURCE = 6,
    RT_OBJECT = 7,
    RT_MEDIA = 8,
    RT_WORKER = 9,
    RT_SHARED_WORKER = 10,
    RT_PREFETCH = 11,
    RT_FAVICON = 12,
    RT_XHR = 13,
    RT_PING = 14,
    RT_SERVICE_WORKER = 15,
    RT_CSP_REPORT = 16,
    RT_PLUGIN_RESOURCE = 17,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_transition_type_t {
    TT_LINK = 0,
    TT_EXPLICIT = 1,
    TT_AUTO_SUBFRAME = 3,
    TT_MANUAL_SUBFRAME = 4,
    TT_FORM_SUBMIT = 7,
    TT_RELOAD = 8,
    TT_SOURCE_MASK = 255,
    TT_BLOCKED_FLAG = 8388608,
    TT_FORWARD_BACK_FLAG = 16777216,
    TT_CHAIN_START_FLAG = 268435456,
    TT_CHAIN_END_FLAG = 536870912,
    TT_CLIENT_REDIRECT_FLAG = 1073741824,
    TT_SERVER_REDIRECT_FLAG = -2147483648,
    TT_IS_REDIRECT_MASK = -1073741824,
    TT_QUALIFIER_MASK = -256,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_urlrequest_status_t {
    UR_UNKNOWN = 0,
    UR_SUCCESS = 1,
    UR_IO_PENDING = 2,
    UR_CANCELED = 3,
    UR_FAILED = 4,
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_point_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_point_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_point_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_point_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_point_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_point_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_point_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_point_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_point_t),
            "::",
            stringify!(y)
        )
    );
}
pub type cef_point_t = _cef_point_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_rect_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_rect_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_rect_t>(),
        16usize,
        concat!("Size of: ", stringify!(_cef_rect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_rect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_rect_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(height)
        )
    );
}
pub type cef_rect_t = _cef_rect_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_size_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_size_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_size_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_size_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_size_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_size_t>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_size_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_size_t>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_size_t),
            "::",
            stringify!(height)
        )
    );
}
pub type cef_size_t = _cef_size_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_range_t {
    pub from: ::std::os::raw::c_int,
    pub to: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_range_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_range_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_range_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_range_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_range_t>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_range_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_range_t>())).to as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_range_t),
            "::",
            stringify!(to)
        )
    );
}
pub type cef_range_t = _cef_range_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_insets_t {
    pub top: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_insets_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_insets_t>(),
        16usize,
        concat!("Size of: ", stringify!(_cef_insets_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_insets_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_insets_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).left as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).bottom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).right as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(right)
        )
    );
}
pub type cef_insets_t = _cef_insets_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_draggable_region_t {
    pub bounds: cef_rect_t,
    pub draggable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_draggable_region_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_draggable_region_t>(),
        20usize,
        concat!("Size of: ", stringify!(_cef_draggable_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_draggable_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_draggable_region_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_draggable_region_t>())).bounds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_draggable_region_t),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_draggable_region_t>())).draggable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_draggable_region_t),
            "::",
            stringify!(draggable)
        )
    );
}
pub type cef_draggable_region_t = _cef_draggable_region_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_process_id_t {
    PID_BROWSER = 0,
    PID_RENDERER = 1,
}
impl cef_thread_id_t {
    pub const TID_FILE: cef_thread_id_t = cef_thread_id_t::TID_FILE_BACKGROUND;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_thread_id_t {
    TID_UI = 0,
    TID_FILE_BACKGROUND = 1,
    TID_FILE_USER_VISIBLE = 2,
    TID_FILE_USER_BLOCKING = 3,
    TID_PROCESS_LAUNCHER = 4,
    TID_IO = 5,
    TID_RENDERER = 6,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_value_type_t {
    VTYPE_INVALID = 0,
    VTYPE_NULL = 1,
    VTYPE_BOOL = 2,
    VTYPE_INT = 3,
    VTYPE_DOUBLE = 4,
    VTYPE_STRING = 5,
    VTYPE_BINARY = 6,
    VTYPE_DICTIONARY = 7,
    VTYPE_LIST = 8,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_jsdialog_type_t {
    JSDIALOGTYPE_ALERT = 0,
    JSDIALOGTYPE_CONFIRM = 1,
    JSDIALOGTYPE_PROMPT = 2,
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_screen_info_t {
    pub device_scale_factor: f32,
    pub depth: ::std::os::raw::c_int,
    pub depth_per_component: ::std::os::raw::c_int,
    pub is_monochrome: ::std::os::raw::c_int,
    pub rect: cef_rect_t,
    pub available_rect: cef_rect_t,
}
#[test]
fn bindgen_test_layout__cef_screen_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_screen_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_screen_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_screen_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_screen_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).device_scale_factor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(device_scale_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_screen_info_t>())).depth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).depth_per_component as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(depth_per_component)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).is_monochrome as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(is_monochrome)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_screen_info_t>())).rect as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).available_rect as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(available_rect)
        )
    );
}
pub type cef_screen_info_t = _cef_screen_info_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_mouse_button_type_t {
    MBT_LEFT = 0,
    MBT_MIDDLE = 1,
    MBT_RIGHT = 2,
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_mouse_event_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub modifiers: uint32,
}
#[test]
fn bindgen_test_layout__cef_mouse_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_mouse_event_t>(),
        12usize,
        concat!("Size of: ", stringify!(_cef_mouse_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_mouse_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_mouse_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).modifiers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(modifiers)
        )
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_touch_event_type_t {
    CEF_TET_RELEASED = 0,
    CEF_TET_PRESSED = 1,
    CEF_TET_MOVED = 2,
    CEF_TET_CANCELLED = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_pointer_type_t {
    CEF_POINTER_TYPE_TOUCH = 0,
    CEF_POINTER_TYPE_MOUSE = 1,
    CEF_POINTER_TYPE_PEN = 2,
    CEF_POINTER_TYPE_ERASER = 3,
    CEF_POINTER_TYPE_UNKNOWN = 4,
}
#[repr(C)]
pub struct _cef_touch_event_t {
    pub id: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub radius_x: f32,
    pub radius_y: f32,
    pub rotation_angle: f32,
    pub pressure: f32,
    pub type_: cef_touch_event_type_t,
    pub modifiers: uint32,
    pub pointer_type: cef_pointer_type_t,
}
#[test]
fn bindgen_test_layout__cef_touch_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_touch_event_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_touch_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_touch_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_touch_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).radius_x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(radius_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).radius_y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(radius_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_touch_event_t>())).rotation_angle as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(rotation_angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).pressure as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).type_ as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).modifiers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).pointer_type as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(pointer_type)
        )
    );
}
impl Default for _cef_touch_event_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_paint_element_type_t {
    PET_VIEW = 0,
    PET_POPUP = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_event_flags_t {
    EVENTFLAG_NONE = 0,
    EVENTFLAG_CAPS_LOCK_ON = 1,
    EVENTFLAG_SHIFT_DOWN = 2,
    EVENTFLAG_CONTROL_DOWN = 4,
    EVENTFLAG_ALT_DOWN = 8,
    EVENTFLAG_LEFT_MOUSE_BUTTON = 16,
    EVENTFLAG_MIDDLE_MOUSE_BUTTON = 32,
    EVENTFLAG_RIGHT_MOUSE_BUTTON = 64,
    EVENTFLAG_COMMAND_DOWN = 128,
    EVENTFLAG_NUM_LOCK_ON = 256,
    EVENTFLAG_IS_KEY_PAD = 512,
    EVENTFLAG_IS_LEFT = 1024,
    EVENTFLAG_IS_RIGHT = 2048,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_menu_item_type_t {
    MENUITEMTYPE_NONE = 0,
    MENUITEMTYPE_COMMAND = 1,
    MENUITEMTYPE_CHECK = 2,
    MENUITEMTYPE_RADIO = 3,
    MENUITEMTYPE_SEPARATOR = 4,
    MENUITEMTYPE_SUBMENU = 5,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_context_menu_type_flags_t {
    CM_TYPEFLAG_NONE = 0,
    CM_TYPEFLAG_PAGE = 1,
    CM_TYPEFLAG_FRAME = 2,
    CM_TYPEFLAG_LINK = 4,
    CM_TYPEFLAG_MEDIA = 8,
    CM_TYPEFLAG_SELECTION = 16,
    CM_TYPEFLAG_EDITABLE = 32,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_context_menu_media_type_t {
    CM_MEDIATYPE_NONE = 0,
    CM_MEDIATYPE_IMAGE = 1,
    CM_MEDIATYPE_VIDEO = 2,
    CM_MEDIATYPE_AUDIO = 3,
    CM_MEDIATYPE_FILE = 4,
    CM_MEDIATYPE_PLUGIN = 5,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_context_menu_media_state_flags_t {
    CM_MEDIAFLAG_NONE = 0,
    CM_MEDIAFLAG_ERROR = 1,
    CM_MEDIAFLAG_PAUSED = 2,
    CM_MEDIAFLAG_MUTED = 4,
    CM_MEDIAFLAG_LOOP = 8,
    CM_MEDIAFLAG_CAN_SAVE = 16,
    CM_MEDIAFLAG_HAS_AUDIO = 32,
    CM_MEDIAFLAG_HAS_VIDEO = 64,
    CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT = 128,
    CM_MEDIAFLAG_CAN_PRINT = 256,
    CM_MEDIAFLAG_CAN_ROTATE = 512,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_context_menu_edit_state_flags_t {
    CM_EDITFLAG_NONE = 0,
    CM_EDITFLAG_CAN_UNDO = 1,
    CM_EDITFLAG_CAN_REDO = 2,
    CM_EDITFLAG_CAN_CUT = 4,
    CM_EDITFLAG_CAN_COPY = 8,
    CM_EDITFLAG_CAN_PASTE = 16,
    CM_EDITFLAG_CAN_DELETE = 32,
    CM_EDITFLAG_CAN_SELECT_ALL = 64,
    CM_EDITFLAG_CAN_TRANSLATE = 128,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_key_event_type_t {
    KEYEVENT_RAWKEYDOWN = 0,
    KEYEVENT_KEYDOWN = 1,
    KEYEVENT_KEYUP = 2,
    KEYEVENT_CHAR = 3,
}
#[repr(C)]
pub struct _cef_key_event_t {
    pub type_: cef_key_event_type_t,
    pub modifiers: uint32,
    pub windows_key_code: ::std::os::raw::c_int,
    pub native_key_code: ::std::os::raw::c_int,
    pub is_system_key: ::std::os::raw::c_int,
    pub character: char16,
    pub unmodified_character: char16,
    pub focus_on_editable_field: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_key_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_key_event_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_key_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_key_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_key_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).modifiers as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).windows_key_code as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(windows_key_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).native_key_code as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(native_key_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).is_system_key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(is_system_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).character as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(character)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).unmodified_character as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(unmodified_character)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).focus_on_editable_field as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(focus_on_editable_field)
        )
    );
}
impl Default for _cef_key_event_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_focus_source_t {
    FOCUS_SOURCE_NAVIGATION = 0,
    FOCUS_SOURCE_SYSTEM = 1,
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_popup_features_t {
    pub x: ::std::os::raw::c_int,
    pub xSet: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub ySet: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub widthSet: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub heightSet: ::std::os::raw::c_int,
    pub menuBarVisible: ::std::os::raw::c_int,
    pub statusBarVisible: ::std::os::raw::c_int,
    pub toolBarVisible: ::std::os::raw::c_int,
    pub scrollbarsVisible: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_popup_features_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_popup_features_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_popup_features_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_popup_features_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_popup_features_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).xSet as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(xSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).ySet as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(ySet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).widthSet as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(widthSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).height as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).heightSet as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(heightSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).menuBarVisible as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(menuBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).statusBarVisible as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(statusBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).toolBarVisible as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(toolBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).scrollbarsVisible as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(scrollbarsVisible)
        )
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_dom_document_type_t {
    DOM_DOCUMENT_TYPE_UNKNOWN = 0,
    DOM_DOCUMENT_TYPE_HTML = 1,
    DOM_DOCUMENT_TYPE_XHTML = 2,
    DOM_DOCUMENT_TYPE_PLUGIN = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_dom_node_type_t {
    DOM_NODE_TYPE_UNSUPPORTED = 0,
    DOM_NODE_TYPE_ELEMENT = 1,
    DOM_NODE_TYPE_ATTRIBUTE = 2,
    DOM_NODE_TYPE_TEXT = 3,
    DOM_NODE_TYPE_CDATA_SECTION = 4,
    DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS = 5,
    DOM_NODE_TYPE_COMMENT = 6,
    DOM_NODE_TYPE_DOCUMENT = 7,
    DOM_NODE_TYPE_DOCUMENT_TYPE = 8,
    DOM_NODE_TYPE_DOCUMENT_FRAGMENT = 9,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_file_dialog_mode_t {
    FILE_DIALOG_OPEN = 0,
    FILE_DIALOG_OPEN_MULTIPLE = 1,
    FILE_DIALOG_OPEN_FOLDER = 2,
    FILE_DIALOG_SAVE = 3,
    FILE_DIALOG_TYPE_MASK = 255,
    FILE_DIALOG_OVERWRITEPROMPT_FLAG = 16777216,
    FILE_DIALOG_HIDEREADONLY_FLAG = 33554432,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_color_model_t {
    COLOR_MODEL_UNKNOWN = 0,
    COLOR_MODEL_GRAY = 1,
    COLOR_MODEL_COLOR = 2,
    COLOR_MODEL_CMYK = 3,
    COLOR_MODEL_CMY = 4,
    COLOR_MODEL_KCMY = 5,
    COLOR_MODEL_CMY_K = 6,
    COLOR_MODEL_BLACK = 7,
    COLOR_MODEL_GRAYSCALE = 8,
    COLOR_MODEL_RGB = 9,
    COLOR_MODEL_RGB16 = 10,
    COLOR_MODEL_RGBA = 11,
    COLOR_MODEL_COLORMODE_COLOR = 12,
    COLOR_MODEL_COLORMODE_MONOCHROME = 13,
    COLOR_MODEL_HP_COLOR_COLOR = 14,
    COLOR_MODEL_HP_COLOR_BLACK = 15,
    COLOR_MODEL_PRINTOUTMODE_NORMAL = 16,
    COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY = 17,
    COLOR_MODEL_PROCESSCOLORMODEL_CMYK = 18,
    COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE = 19,
    COLOR_MODEL_PROCESSCOLORMODEL_RGB = 20,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_duplex_mode_t {
    DUPLEX_MODE_UNKNOWN = -1,
    DUPLEX_MODE_SIMPLEX = 0,
    DUPLEX_MODE_LONG_EDGE = 1,
    DUPLEX_MODE_SHORT_EDGE = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_cursor_type_t {
    CT_POINTER = 0,
    CT_CROSS = 1,
    CT_HAND = 2,
    CT_IBEAM = 3,
    CT_WAIT = 4,
    CT_HELP = 5,
    CT_EASTRESIZE = 6,
    CT_NORTHRESIZE = 7,
    CT_NORTHEASTRESIZE = 8,
    CT_NORTHWESTRESIZE = 9,
    CT_SOUTHRESIZE = 10,
    CT_SOUTHEASTRESIZE = 11,
    CT_SOUTHWESTRESIZE = 12,
    CT_WESTRESIZE = 13,
    CT_NORTHSOUTHRESIZE = 14,
    CT_EASTWESTRESIZE = 15,
    CT_NORTHEASTSOUTHWESTRESIZE = 16,
    CT_NORTHWESTSOUTHEASTRESIZE = 17,
    CT_COLUMNRESIZE = 18,
    CT_ROWRESIZE = 19,
    CT_MIDDLEPANNING = 20,
    CT_EASTPANNING = 21,
    CT_NORTHPANNING = 22,
    CT_NORTHEASTPANNING = 23,
    CT_NORTHWESTPANNING = 24,
    CT_SOUTHPANNING = 25,
    CT_SOUTHEASTPANNING = 26,
    CT_SOUTHWESTPANNING = 27,
    CT_WESTPANNING = 28,
    CT_MOVE = 29,
    CT_VERTICALTEXT = 30,
    CT_CELL = 31,
    CT_CONTEXTMENU = 32,
    CT_ALIAS = 33,
    CT_PROGRESS = 34,
    CT_NODROP = 35,
    CT_COPY = 36,
    CT_NONE = 37,
    CT_NOTALLOWED = 38,
    CT_ZOOMIN = 39,
    CT_ZOOMOUT = 40,
    CT_GRAB = 41,
    CT_GRABBING = 42,
    CT_CUSTOM = 43,
}
#[repr(C)]
pub struct _cef_cursor_info_t {
    pub hotspot: cef_point_t,
    pub image_scale_factor: f32,
    pub buffer: *mut ::std::os::raw::c_void,
    pub size: cef_size_t,
}
#[test]
fn bindgen_test_layout__cef_cursor_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cursor_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_cursor_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cursor_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cursor_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).hotspot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(hotspot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cursor_info_t>())).image_scale_factor as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(image_scale_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(size)
        )
    );
}
impl Default for _cef_cursor_info_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type cef_cursor_info_t = _cef_cursor_info_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_pdf_print_margin_type_t {
    PDF_PRINT_MARGIN_DEFAULT = 0,
    PDF_PRINT_MARGIN_NONE = 1,
    PDF_PRINT_MARGIN_MINIMUM = 2,
    PDF_PRINT_MARGIN_CUSTOM = 3,
}
#[repr(C)]
pub struct _cef_pdf_print_settings_t {
    pub header_footer_title: cef_string_t,
    pub header_footer_url: cef_string_t,
    pub page_width: ::std::os::raw::c_int,
    pub page_height: ::std::os::raw::c_int,
    pub scale_factor: ::std::os::raw::c_int,
    pub margin_top: f64,
    pub margin_right: f64,
    pub margin_bottom: f64,
    pub margin_left: f64,
    pub margin_type: cef_pdf_print_margin_type_t,
    pub header_footer_enabled: ::std::os::raw::c_int,
    pub selection_only: ::std::os::raw::c_int,
    pub landscape: ::std::os::raw::c_int,
    pub backgrounds_enabled: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_pdf_print_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_pdf_print_settings_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_pdf_print_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_pdf_print_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_pdf_print_settings_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_title as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_url as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).page_width as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(page_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).page_height as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(page_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).scale_factor as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_top as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_right as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_bottom as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_bottom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_left as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_type as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_enabled as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).selection_only as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).landscape as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(landscape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).backgrounds_enabled as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(backgrounds_enabled)
        )
    );
}
impl Default for _cef_pdf_print_settings_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_scale_factor_t {
    SCALE_FACTOR_NONE = 0,
    SCALE_FACTOR_100P = 1,
    SCALE_FACTOR_125P = 2,
    SCALE_FACTOR_133P = 3,
    SCALE_FACTOR_140P = 4,
    SCALE_FACTOR_150P = 5,
    SCALE_FACTOR_180P = 6,
    SCALE_FACTOR_200P = 7,
    SCALE_FACTOR_250P = 8,
    SCALE_FACTOR_300P = 9,
}
impl cef_referrer_policy_t {
    pub const REFERRER_POLICY_DEFAULT: cef_referrer_policy_t =
        cef_referrer_policy_t::REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE;
}
impl cef_referrer_policy_t {
    pub const REFERRER_POLICY_LAST_VALUE: cef_referrer_policy_t =
        cef_referrer_policy_t::REFERRER_POLICY_NO_REFERRER;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_referrer_policy_t {
    REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE = 0,
    REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN = 1,
    REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN = 2,
    REFERRER_POLICY_NEVER_CLEAR_REFERRER = 3,
    REFERRER_POLICY_ORIGIN = 4,
    REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN = 5,
    REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE = 6,
    REFERRER_POLICY_NO_REFERRER = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_response_filter_status_t {
    RESPONSE_FILTER_NEED_MORE_DATA = 0,
    RESPONSE_FILTER_DONE = 1,
    RESPONSE_FILTER_ERROR = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_color_type_t {
    CEF_COLOR_TYPE_RGBA_8888 = 0,
    CEF_COLOR_TYPE_BGRA_8888 = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_alpha_type_t {
    CEF_ALPHA_TYPE_OPAQUE = 0,
    CEF_ALPHA_TYPE_PREMULTIPLIED = 1,
    CEF_ALPHA_TYPE_POSTMULTIPLIED = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_menu_color_type_t {
    CEF_MENU_COLOR_TEXT = 0,
    CEF_MENU_COLOR_TEXT_HOVERED = 1,
    CEF_MENU_COLOR_TEXT_ACCELERATOR = 2,
    CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED = 3,
    CEF_MENU_COLOR_BACKGROUND = 4,
    CEF_MENU_COLOR_BACKGROUND_HOVERED = 5,
    CEF_MENU_COLOR_COUNT = 6,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_ssl_version_t {
    SSL_CONNECTION_VERSION_UNKNOWN = 0,
    SSL_CONNECTION_VERSION_SSL2 = 1,
    SSL_CONNECTION_VERSION_SSL3 = 2,
    SSL_CONNECTION_VERSION_TLS1 = 3,
    SSL_CONNECTION_VERSION_TLS1_1 = 4,
    SSL_CONNECTION_VERSION_TLS1_2 = 5,
    SSL_CONNECTION_VERSION_TLS1_3 = 6,
    SSL_CONNECTION_VERSION_QUIC = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_ssl_content_status_t {
    SSL_CONTENT_NORMAL_CONTENT = 0,
    SSL_CONTENT_DISPLAYED_INSECURE_CONTENT = 1,
    SSL_CONTENT_RAN_INSECURE_CONTENT = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_scheme_options_t {
    CEF_SCHEME_OPTION_NONE = 0,
    CEF_SCHEME_OPTION_STANDARD = 1,
    CEF_SCHEME_OPTION_LOCAL = 2,
    CEF_SCHEME_OPTION_DISPLAY_ISOLATED = 4,
    CEF_SCHEME_OPTION_SECURE = 8,
    CEF_SCHEME_OPTION_CORS_ENABLED = 16,
    CEF_SCHEME_OPTION_CSP_BYPASSING = 32,
    CEF_SCHEME_OPTION_FETCH_ENABLED = 64,
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_composition_underline_t {
    pub range: cef_range_t,
    pub color: cef_color_t,
    pub background_color: cef_color_t,
    pub thick: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_composition_underline_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_composition_underline_t>(),
        20usize,
        concat!("Size of: ", stringify!(_cef_composition_underline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_composition_underline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_composition_underline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).range as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).color as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).background_color as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).thick as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(thick)
        )
    );
}
pub type cef_composition_underline_t = _cef_composition_underline_t;
impl cef_channel_layout_t {
    pub const CEF_CHANNEL_LAYOUT_MAX: cef_channel_layout_t =
        cef_channel_layout_t::CEF_CHANNEL_LAYOUT_BITSTREAM;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum cef_channel_layout_t {
    CEF_CHANNEL_LAYOUT_NONE = 0,
    CEF_CHANNEL_LAYOUT_UNSUPPORTED = 1,
    CEF_CHANNEL_LAYOUT_MONO = 2,
    CEF_CHANNEL_LAYOUT_STEREO = 3,
    CEF_CHANNEL_LAYOUT_2_1 = 4,
    CEF_CHANNEL_LAYOUT_SURROUND = 5,
    CEF_CHANNEL_LAYOUT_4_0 = 6,
    CEF_CHANNEL_LAYOUT_2_2 = 7,
    CEF_CHANNEL_LAYOUT_QUAD = 8,
    CEF_CHANNEL_LAYOUT_5_0 = 9,
    CEF_CHANNEL_LAYOUT_5_1 = 10,
    CEF_CHANNEL_LAYOUT_5_0_BACK = 11,
    CEF_CHANNEL_LAYOUT_5_1_BACK = 12,
    CEF_CHANNEL_LAYOUT_7_0 = 13,
    CEF_CHANNEL_LAYOUT_7_1 = 14,
    CEF_CHANNEL_LAYOUT_7_1_WIDE = 15,
    CEF_CHANNEL_LAYOUT_STEREO_DOWNMIX = 16,
    CEF_CHANNEL_LAYOUT_2POINT1 = 17,
    CEF_CHANNEL_LAYOUT_3_1 = 18,
    CEF_CHANNEL_LAYOUT_4_1 = 19,
    CEF_CHANNEL_LAYOUT_6_0 = 20,
    CEF_CHANNEL_LAYOUT_6_0_FRONT = 21,
    CEF_CHANNEL_LAYOUT_HEXAGONAL = 22,
    CEF_CHANNEL_LAYOUT_6_1 = 23,
    CEF_CHANNEL_LAYOUT_6_1_BACK = 24,
    CEF_CHANNEL_LAYOUT_6_1_FRONT = 25,
    CEF_CHANNEL_LAYOUT_7_0_FRONT = 26,
    CEF_CHANNEL_LAYOUT_7_1_WIDE_BACK = 27,
    CEF_CHANNEL_LAYOUT_OCTAGONAL = 28,
    CEF_CHANNEL_LAYOUT_DISCRETE = 29,
    CEF_CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC = 30,
    CEF_CHANNEL_LAYOUT_4_1_QUAD_SIDE = 31,
    CEF_CHANNEL_LAYOUT_BITSTREAM = 32,
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_base_ref_counted_t {
    pub size: usize,
    pub add_ref: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t)>,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    pub has_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    pub has_at_least_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_base_ref_counted_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_base_ref_counted_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_base_ref_counted_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_base_ref_counted_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_base_ref_counted_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).add_ref as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(add_ref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).release as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).has_one_ref as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(has_one_ref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).has_at_least_one_ref as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(has_at_least_one_ref)
        )
    );
}
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_base_scoped_t {
    pub size: usize,
    pub del: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_scoped_t)>,
}
#[test]
fn bindgen_test_layout__cef_base_scoped_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_base_scoped_t>(),
        16usize,
        concat!("Size of: ", stringify!(_cef_base_scoped_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_base_scoped_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_base_scoped_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_scoped_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_scoped_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_scoped_t>())).del as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_scoped_t),
            "::",
            stringify!(del)
        )
    );
}
pub type cef_base_scoped_t = _cef_base_scoped_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_command_line_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> *mut _cef_command_line_t,
    >,
    pub init_from_argv: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ),
    >,
    pub init_from_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, command_line: *const cef_string_t),
    >,
    pub reset: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_command_line_t)>,
    pub get_argv: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argv: cef_string_list_t),
    >,
    pub get_command_line_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    pub get_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    pub set_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, program: *const cef_string_t),
    >,
    pub has_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub has_switch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_switch_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, switches: cef_string_map_t),
    >,
    pub append_switch: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, name: *const cef_string_t),
    >,
    pub append_switch_with_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
        ),
    >,
    pub has_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub get_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, arguments: cef_string_list_t),
    >,
    pub append_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argument: *const cef_string_t),
    >,
    pub prepend_wrapper: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, wrapper: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_command_line_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_command_line_t>(),
        200usize,
        concat!("Size of: ", stringify!(_cef_command_line_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_command_line_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_command_line_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).is_read_only as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).copy as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).init_from_argv as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(init_from_argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).init_from_string as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(init_from_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).reset as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).get_argv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_command_line_string as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_command_line_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).get_program as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_program)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).set_program as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(set_program)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).has_switches as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_switches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).has_switch as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_switch_value as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_switch_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_switches as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_switch as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_switch_with_value as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_switch_with_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).has_arguments as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_arguments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_arguments as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_arguments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_argument as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_argument)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).prepend_wrapper as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(prepend_wrapper)
        )
    );
}
pub type cef_command_line_t = _cef_command_line_t;
extern "C" {
    pub fn cef_command_line_create() -> *mut cef_command_line_t;
}
extern "C" {
    pub fn cef_command_line_get_global() -> *mut cef_command_line_t;
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t>,
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_value_type_t>,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> f64>,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_value_t>(),
        216usize,
        concat!("Size of: ", stringify!(_cef_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_owned as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_read_only as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_same as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_equal as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).copy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_type as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_bool as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_int as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_double as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_string as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_binary as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_dictionary as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_list as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_null as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_bool as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_int as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_double as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_string as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_binary as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_dictionary as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_list as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_binary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> usize>,
    pub get_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout__cef_binary_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_binary_value_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_binary_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_binary_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_binary_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_owned as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_same as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_equal as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).copy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).get_size as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).get_data as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(get_data)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_dictionary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub has_key: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_value_type_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_dictionary_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_dictionary_value_t>(),
        272usize,
        concat!("Size of: ", stringify!(_cef_dictionary_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_dictionary_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_dictionary_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_valid as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_owned as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_read_only as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_same as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_equal as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).copy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_size as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).clear as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).has_key as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(has_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_keys as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).remove as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_type as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_value as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_bool as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_int as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_double as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_string as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_binary as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_dictionary as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_list as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_value as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_null as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_bool as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_int as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_double as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_string as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_binary as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_dictionary as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_list as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_list_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t,
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, size: usize) -> ::std::os::raw::c_int,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_value_type_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_list_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_list_value_t>(),
        264usize,
        concat!("Size of: ", stringify!(_cef_list_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_list_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_list_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_owned as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_read_only as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_same as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_equal as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).copy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_size as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).clear as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).remove as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_type as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_value as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_bool as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_int as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_double as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_string as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_binary as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_list_value_t>())).get_dictionary as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_list as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_value as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_null as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_bool as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_int as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_double as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_string as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_binary as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_list_value_t>())).set_dictionary as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_list as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_image_t {
    pub base: cef_base_ref_counted_t,
    pub is_empty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            that: *mut _cef_image_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            pixel_width: ::std::os::raw::c_int,
            pixel_height: ::std::os::raw::c_int,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_data: *const ::std::os::raw::c_void,
            pixel_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            png_data: *const ::std::os::raw::c_void,
            png_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            jpeg_data: *const ::std::os::raw::c_void,
            jpeg_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_width: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub get_height: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub has_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int,
    >,
    pub remove_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int,
    >,
    pub get_representation_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            actual_scale_factor: *mut f32,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            with_transparency: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            quality: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_image_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_image_t>(),
        144usize,
        concat!("Size of: ", stringify!(_cef_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_image_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_image_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).is_empty as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(is_empty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).is_same as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_bitmap as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_png as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_png)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_jpeg as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_jpeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_width as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_height as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).has_representation as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(has_representation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_image_t>())).remove_representation as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(remove_representation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_image_t>())).get_representation_info as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_representation_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_bitmap as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_png as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_png)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_jpeg as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_jpeg)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_stream_reader_t {
    pub base: cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> int64>,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_stream_reader_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_stream_reader_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_stream_reader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_stream_reader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_stream_reader_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).seek as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).tell as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).eof as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).may_block as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(may_block)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_stream_writer_t {
    pub base: cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> int64>,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_stream_writer_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_stream_writer_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_stream_writer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_stream_writer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_stream_writer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).write as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).seek as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).tell as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).flush as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).may_block as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(may_block)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_drag_data_t {
    pub base: cef_base_ref_counted_t,
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_drag_data_t,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_link: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_fragment: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_file_contents: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            writer: *mut _cef_stream_writer_t,
        ) -> usize,
    >,
    pub get_file_names: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            names: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, url: *const cef_string_t),
    >,
    pub set_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, title: *const cef_string_t),
    >,
    pub set_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, data: *const cef_string_t),
    >,
    pub set_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, text: *const cef_string_t),
    >,
    pub set_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, html: *const cef_string_t),
    >,
    pub set_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, base_url: *const cef_string_t),
    >,
    pub reset_file_contents:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    pub add_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            path: *const cef_string_t,
            display_name: *const cef_string_t,
        ),
    >,
    pub get_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_image_t,
    >,
    pub get_image_hotspot:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_point_t>,
    pub has_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_drag_data_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_drag_data_t>(),
        240usize,
        concat!("Size of: ", stringify!(_cef_drag_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_drag_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_drag_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).clone as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_read_only as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_link as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_fragment as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_file as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_url as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_title as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_metadata as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_text as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_html as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_html)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_base_url as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_base_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_contents as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_names as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_url as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_title as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_metadata as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_text as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_html as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_html)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_base_url as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_base_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).reset_file_contents as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(reset_file_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).add_file as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(add_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_image as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_image_hotspot as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_image_hotspot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).has_image as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(has_image)
        )
    );
}
pub type cef_drag_data_t = _cef_drag_data_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_domvisitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domvisitor_t, document: *mut _cef_domdocument_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_domvisitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domvisitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_domvisitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domvisitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_domvisitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domvisitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domvisitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domvisitor_t>())).visit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domvisitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_domdocument_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_dom_document_type_t,
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_head: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_element_by_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            id: *const cef_string_t,
        ) -> *mut _cef_domnode_t,
    >,
    pub get_focused_node: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub has_selection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_start_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_end_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_selection_as_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_complete_url: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            partialURL: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_domdocument_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domdocument_t>(),
        152usize,
        concat!("Size of: ", stringify!(_cef_domdocument_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domdocument_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_domdocument_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_type as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_document as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_body as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_head as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_title as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_element_by_id as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_element_by_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_focused_node as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_focused_node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).has_selection as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(has_selection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_start_offset as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_start_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_end_offset as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_end_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_as_markup as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_as_markup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_as_text as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_as_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_base_url as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_base_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_complete_url as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_complete_url)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_domnode_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_dom_node_type_t,
    >,
    pub is_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_form_control_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_form_control_element_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            that: *mut _cef_domnode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domdocument_t,
    >,
    pub get_parent: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_previous_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_next_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub has_children: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_first_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_last_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_element_tag_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub has_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub has_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, attrMap: cef_string_map_t),
    >,
    pub set_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_inner_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_element_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_rect_t>,
}
#[test]
fn bindgen_test_layout__cef_domnode_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domnode_t>(),
        248usize,
        concat!("Size of: ", stringify!(_cef_domnode_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domnode_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_domnode_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_type as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_text as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_element as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_editable as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_editable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).is_form_control_element as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_form_control_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_form_control_element_type as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_form_control_element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_same as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_name as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_value as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).set_value as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_as_markup as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_as_markup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_document as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_parent as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_previous_sibling as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_previous_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_next_sibling as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_next_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).has_children as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_first_child as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_first_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_last_child as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_last_child)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_tag_name as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_tag_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).has_element_attributes as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_element_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).has_element_attribute as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_attribute as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_attributes as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).set_element_attribute as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(set_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_inner_text as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_inner_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_bounds as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_bounds)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_process_message_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_process_message_t,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> cef_string_userfree_t,
    >,
    pub get_argument_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_list_value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_process_message_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_process_message_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_process_message_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_process_message_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_process_message_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_process_message_t>())).is_read_only as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).copy as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).get_name as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_process_message_t>())).get_argument_list as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(get_argument_list)
        )
    );
}
pub type cef_process_message_t = _cef_process_message_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_request_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    pub get_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, method: *const cef_string_t),
    >,
    pub set_referrer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t,
        ),
    >,
    pub get_referrer_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub get_referrer_policy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t,
    >,
    pub get_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t,
    >,
    pub set_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t),
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t,
        ),
    >,
    pub get_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    pub set_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int),
    >,
    pub get_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    pub get_resource_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_resource_type_t,
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_transition_type_t,
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> uint64>,
}
#[test]
fn bindgen_test_layout__cef_request_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_t>(),
        216usize,
        concat!("Size of: ", stringify!(_cef_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).is_read_only as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_url as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_url as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_method as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_method as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_referrer as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_referrer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_referrer_url as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_referrer_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_referrer_policy as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_referrer_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_post_data as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_post_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_post_data as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_post_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_header_map as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_header_map as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_header_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_header_by_name as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_header_by_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).set_header_by_name as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_header_by_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_flags as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_flags as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_first_party_for_cookies as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_first_party_for_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).set_first_party_for_cookies as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_first_party_for_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_resource_type as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_resource_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_transition_type as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_transition_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_identifier as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_identifier)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_post_data_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    pub has_excluded_elements: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    pub get_element_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> usize>,
    pub get_elements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t,
        ),
    >,
    pub remove_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_elements: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t)>,
}
#[test]
fn bindgen_test_layout__cef_post_data_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_post_data_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_post_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_post_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_post_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).is_read_only as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).has_excluded_elements as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(has_excluded_elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).get_element_count as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(get_element_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).get_elements as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(get_elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).remove_element as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(remove_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).add_element as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(add_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).remove_elements as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(remove_elements)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_post_data_element_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int,
    >,
    pub set_to_empty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t)>,
    pub set_to_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, fileName: *const cef_string_t),
    >,
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *const ::std::os::raw::c_void,
        ),
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_postdataelement_type_t,
    >,
    pub get_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t,
    >,
    pub get_bytes_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> usize>,
    pub get_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout__cef_post_data_element_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_post_data_element_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_post_data_element_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_post_data_element_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_post_data_element_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_element_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).is_read_only as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_empty as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_empty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_file as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_bytes as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_type as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_file as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_bytes_count as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_bytes_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_bytes as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_bytes)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_string_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_string_visitor_t, string: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_string_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_string_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_string_visitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_visitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_visitor_t>())).visit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[repr(C)]
pub struct _cef_urlrequest_client_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_urlrequest_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub undo: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub redo: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub cut: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub paste: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub del: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub select_all: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub view_source: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    pub load_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, request: *mut _cef_request_t),
    >,
    pub load_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, url: *const cef_string_t),
    >,
    pub load_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            string_val: *const cef_string_t,
            url: *const cef_string_t,
        ),
    >,
    pub execute_java_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
        ),
    >,
    pub is_main: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_focused: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> int64>,
    pub get_parent:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_frame_t>,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_browser_t,
    >,
    pub get_v8context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_v8context_t,
    >,
    pub visit_dom: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_domvisitor_t),
    >,
    pub create_urlrequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            client: *mut _cef_urlrequest_client_t,
        ) -> *mut _cef_urlrequest_t,
    >,
    pub send_process_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            target_process: cef_process_id_t,
            message: *mut _cef_process_message_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_frame_t>(),
        248usize,
        concat!("Size of: ", stringify!(_cef_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).undo as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(undo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).redo as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(redo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).cut as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(cut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).copy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).paste as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(paste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).del as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).select_all as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(select_all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).view_source as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(view_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_source as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_text as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).load_request as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(load_request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).load_url as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(load_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).load_string as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(load_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_frame_t>())).execute_java_script as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(execute_java_script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_main as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_focused as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_focused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_name as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_identifier as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_parent as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_url as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_browser as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_v8context as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_v8context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).visit_dom as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(visit_dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).create_urlrequest as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(create_urlrequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_frame_t>())).send_process_message as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(send_process_message)
        )
    );
}
pub type cef_frame_t = _cef_frame_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_x509cert_principal_t {
    pub base: cef_base_ref_counted_t,
    pub get_display_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_common_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_locality_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_state_or_province_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_country_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_street_addresses: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, addresses: cef_string_list_t),
    >,
    pub get_organization_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    pub get_organization_unit_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    pub get_domain_components: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, components: cef_string_list_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_x509cert_principal_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_x509cert_principal_t>(),
        112usize,
        concat!("Size of: ", stringify!(_cef_x509cert_principal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_x509cert_principal_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_x509cert_principal_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_display_name as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_display_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_common_name as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_common_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_locality_name as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_locality_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_state_or_province_name
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_state_or_province_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_country_name as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_country_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_street_addresses as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_street_addresses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_organization_names as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_organization_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_organization_unit_names
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_organization_unit_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_domain_components as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_domain_components)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_x509certificate_t {
    pub base: cef_base_ref_counted_t,
    pub get_subject: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_issuer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_serial_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_valid_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    pub get_valid_expiry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    pub get_derencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_pemencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_issuer_chain_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> usize>,
    pub get_derencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
    pub get_pemencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_x509certificate_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_x509certificate_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_x509certificate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_x509certificate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_x509certificate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_x509certificate_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_subject as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_subject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_issuer as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_issuer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_serial_number as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_serial_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_valid_start as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_valid_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_valid_expiry as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_valid_expiry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_derencoded as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_derencoded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_pemencoded as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_pemencoded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_issuer_chain_size as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_issuer_chain_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_derencoded_issuer_chain
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_derencoded_issuer_chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_pemencoded_issuer_chain
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_pemencoded_issuer_chain)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_sslstatus_t {
    pub base: cef_base_ref_counted_t,
    pub is_secure_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> ::std::os::raw::c_int,
    >,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_cert_status_t,
    >,
    pub get_sslversion: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_version_t,
    >,
    pub get_content_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_content_status_t,
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> *mut _cef_x509certificate_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_sslstatus_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_sslstatus_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_sslstatus_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_sslstatus_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_sslstatus_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslstatus_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).is_secure_connection as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(is_secure_connection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_cert_status as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_cert_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_sslversion as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_sslversion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_content_status as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_content_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_x509certificate as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_x509certificate)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_navigation_entry_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_display_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_transition_type_t,
    >,
    pub has_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_completion_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_time_t,
    >,
    pub get_http_status_code: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_sslstatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> *mut _cef_sslstatus_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_navigation_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_navigation_entry_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_navigation_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_navigation_entry_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_navigation_entry_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_navigation_entry_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).is_valid as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_url as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_display_url as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_display_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_original_url as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_original_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_title as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_transition_type as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_transition_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).has_post_data as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(has_post_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_completion_time as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_completion_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_http_status_code as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_http_status_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_sslstatus as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_sslstatus)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).cancel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_completion_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_completion_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_completion_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_completion_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_completion_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_completion_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_completion_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_completion_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_completion_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_completion_callback_t>())).on_complete as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_completion_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_cookie_manager_t {
    pub base: cef_base_ref_counted_t,
    pub set_supported_schemes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            schemes: cef_string_list_t,
            include_defaults: ::std::os::raw::c_int,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush_store: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_manager_t>(),
        88usize,
        concat!("Size of: ", stringify!(_cef_cookie_manager_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_manager_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cookie_manager_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_manager_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).set_supported_schemes as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(set_supported_schemes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).visit_all_cookies as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(visit_all_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).visit_url_cookies as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(visit_url_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).set_cookie as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(set_cookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).delete_cookies as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(delete_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).flush_store as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(flush_store)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_cookie_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_cookie_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cookie_visitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_visitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_visitor_t>())).visit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_set_cookie_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_set_cookie_callback_t,
            success: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_set_cookie_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_set_cookie_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_set_cookie_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_set_cookie_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_set_cookie_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_set_cookie_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_set_cookie_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_set_cookie_callback_t>())).on_complete as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_set_cookie_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_delete_cookies_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_delete_cookies_callback_t,
            num_deleted: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_delete_cookies_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_delete_cookies_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_delete_cookies_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_delete_cookies_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_delete_cookies_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_delete_cookies_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_delete_cookies_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_delete_cookies_callback_t>())).on_complete as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_delete_cookies_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_extension_t {
    pub base: cef_base_ref_counted_t,
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    pub get_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    pub get_manifest: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_dictionary_value_t,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_t,
            that: *mut _cef_extension_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_extension_handler_t,
    >,
    pub get_loader_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_request_context_t,
    >,
    pub is_loaded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> ::std::os::raw::c_int,
    >,
    pub unload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t)>,
}
#[test]
fn bindgen_test_layout__cef_extension_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_extension_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_extension_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_extension_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_extension_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_identifier as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_path as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_manifest as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_manifest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).is_same as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_handler as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_t>())).get_loader_context as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_loader_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).is_loaded as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(is_loaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).unload as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(unload)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_get_extension_resource_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_get_extension_resource_callback_t,
            stream: *mut _cef_stream_reader_t,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_get_extension_resource_callback_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_get_extension_resource_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_get_extension_resource_callback_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_cef_get_extension_resource_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_get_extension_resource_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_get_extension_resource_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).cont as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).cancel as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_extension_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_extension_load_failed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_handler_t, result: cef_errorcode_t),
    >,
    pub on_extension_loaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    pub on_extension_unloaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    pub on_before_background_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            url: *const cef_string_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            active_browser: *mut _cef_browser_t,
            index: ::std::os::raw::c_int,
            url: *const cef_string_t,
            active: ::std::os::raw::c_int,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_active_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
        ) -> *mut _cef_browser_t,
    >,
    pub can_access_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
            target_browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            file: *const cef_string_t,
            callback: *mut _cef_get_extension_resource_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_extension_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_extension_handler_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_extension_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_extension_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_extension_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_load_failed
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_load_failed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_loaded as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_loaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_unloaded as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_unloaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_before_background_browser
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_before_background_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_before_browser as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_before_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).get_active_browser as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(get_active_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).can_access_browser as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(can_access_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).get_extension_resource as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(get_extension_resource)
        )
    );
}
#[repr(C)]
pub struct _cef_request_context_handler_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_resolve_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t,
            resolved_ips: cef_string_list_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resolve_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resolve_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_resolve_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resolve_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resolve_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resolve_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resolve_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resolve_callback_t>())).on_resolve_completed as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resolve_callback_t),
            "::",
            stringify!(on_resolve_completed)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_request_context_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
        ) -> *mut _cef_request_context_handler_t,
    >,
    pub get_cache_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t,
    >,
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_cookie_manager_t,
    >,
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_scheme_handler_factories: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    pub purge_plugin_list_cache: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            reload_pages: ::std::os::raw::c_int,
        ),
    >,
    pub has_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            include_defaults: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub can_set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub close_all_connections: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub resolve_host: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t,
        ),
    >,
    pub load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            root_directory: *const cef_string_t,
            manifest: *mut _cef_dictionary_value_t,
            handler: *mut _cef_extension_handler_t,
        ),
    >,
    pub did_load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extensions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_ids: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> *mut _cef_extension_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_request_context_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_context_t>(),
        224usize,
        concat!("Size of: ", stringify!(_cef_request_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_context_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_context_t>())).is_same as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).is_sharing_with as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_sharing_with)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).is_global as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_global)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_handler as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_cache_path as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_cache_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_cookie_manager as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_cookie_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).register_scheme_handler_factory
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(register_scheme_handler_factory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_scheme_handler_factories
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_scheme_handler_factories)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).purge_plugin_list_cache as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(purge_plugin_list_cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).has_preference as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(has_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_preference as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_all_preferences as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_all_preferences)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).can_set_preference as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(can_set_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).set_preference as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(set_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_certificate_exceptions
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_certificate_exceptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_http_auth_credentials
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_http_auth_credentials)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).close_all_connections as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(close_all_connections)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).resolve_host as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(resolve_host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).load_extension as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(load_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).did_load_extension as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(did_load_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).has_extension as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(has_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_extensions as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_extensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_extension as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_extension)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_browser_t {
    pub base: cef_base_ref_counted_t,
    pub get_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_browser_host_t,
    >,
    pub can_go_back: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub go_back: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub can_go_forward: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub go_forward: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub is_loading: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub reload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub reload_ignore_cache:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub stop_load: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            that: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_popup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub has_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub get_main_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    pub get_focused_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    pub get_frame_byident: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, identifier: int64) -> *mut _cef_frame_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            name: *const cef_string_t,
        ) -> *mut _cef_frame_t,
    >,
    pub get_frame_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> usize>,
    pub get_frame_identifiers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            identifiersCount: *mut usize,
            identifiers: *mut int64,
        ),
    >,
    pub get_frame_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, names: cef_string_list_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_t>(),
        200usize,
        concat!("Size of: ", stringify!(_cef_browser_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_browser_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_host as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).can_go_back as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(can_go_back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).go_back as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(go_back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).can_go_forward as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(can_go_forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).go_forward as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(go_forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_loading as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_loading)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).reload as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(reload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).reload_ignore_cache as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(reload_ignore_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).stop_load as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(stop_load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_identifier as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_same as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_popup as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_popup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).has_document as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(has_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_main_frame as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_main_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_focused_frame as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_focused_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_byident as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_byident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_count as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_identifiers as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_identifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_names as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_names)
        )
    );
}
pub type cef_browser_t = _cef_browser_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_run_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_run_file_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_run_file_dialog_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_run_file_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_run_file_dialog_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_run_file_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_file_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_file_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_file_dialog_callback_t>())).on_file_dialog_dismissed
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_file_dialog_callback_t),
            "::",
            stringify!(on_file_dialog_dismissed)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_navigation_entry_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_navigation_entry_visitor_t,
            entry: *mut _cef_navigation_entry_t,
            current: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_navigation_entry_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_navigation_entry_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_navigation_entry_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_navigation_entry_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_navigation_entry_visitor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_visitor_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_visitor_t>())).visit as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_pdf_print_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_pdf_print_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_pdf_print_callback_t,
            path: *const cef_string_t,
            ok: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_pdf_print_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_pdf_print_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_pdf_print_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_pdf_print_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_pdf_print_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_pdf_print_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_callback_t>())).on_pdf_print_finished as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_callback_t),
            "::",
            stringify!(on_pdf_print_finished)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_download_image_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_download_image_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_image_callback_t,
            image_url: *const cef_string_t,
            http_status_code: ::std::os::raw::c_int,
            image: *mut _cef_image_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_download_image_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_image_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_download_image_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_image_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_download_image_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_image_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_image_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_image_callback_t>())).on_download_image_finished
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_image_callback_t),
            "::",
            stringify!(on_download_image_finished)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_browser_host_t {
    pub base: cef_base_ref_counted_t,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_browser_t,
    >,
    pub close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, force_close: ::std::os::raw::c_int),
    >,
    pub try_close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, focus: ::std::os::raw::c_int),
    >,
    pub get_window_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> HWND>,
    pub get_opener_window_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> HWND>,
    pub has_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_client_t,
    >,
    pub get_request_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_request_context_t,
    >,
    pub get_zoom_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> f64>,
    pub set_zoom_level: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, zoomLevel: f64),
    >,
    pub run_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_run_file_dialog_callback_t,
        ),
    >,
    pub start_download: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, url: *const cef_string_t),
    >,
    pub download_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            image_url: *const cef_string_t,
            is_favicon: ::std::os::raw::c_int,
            max_image_size: uint32,
            bypass_cache: ::std::os::raw::c_int,
            callback: *mut _cef_download_image_callback_t,
        ),
    >,
    pub print: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub print_to_pdf: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            path: *const cef_string_t,
            settings: *const _cef_pdf_print_settings_t,
            callback: *mut _cef_pdf_print_callback_t,
        ),
    >,
    pub find: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            identifier: ::std::os::raw::c_int,
            searchText: *const cef_string_t,
            forward: ::std::os::raw::c_int,
            matchCase: ::std::os::raw::c_int,
            findNext: ::std::os::raw::c_int,
        ),
    >,
    pub stop_finding: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            clearSelection: ::std::os::raw::c_int,
        ),
    >,
    pub show_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            windowInfo: *const _cef_window_info_t,
            client: *mut _cef_client_t,
            settings: *const _cef_browser_settings_t,
            inspect_element_at: *const cef_point_t,
        ),
    >,
    pub close_dev_tools:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub has_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub get_navigation_entries: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            visitor: *mut _cef_navigation_entry_visitor_t,
            current_only: ::std::os::raw::c_int,
        ),
    >,
    pub set_mouse_cursor_change_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, disabled: ::std::os::raw::c_int),
    >,
    pub is_mouse_cursor_change_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub replace_misspelling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    pub add_word_to_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    pub is_window_rendering_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub was_resized: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub was_hidden: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, hidden: ::std::os::raw::c_int),
    >,
    pub notify_screen_info_changed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, type_: cef_paint_element_type_t),
    >,
    pub send_external_begin_frame:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub send_key_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_key_event_t),
    >,
    pub send_mouse_click_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            type_: cef_mouse_button_type_t,
            mouseUp: ::std::os::raw::c_int,
            clickCount: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_move_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            mouseLeave: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_wheel_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            deltaX: ::std::os::raw::c_int,
            deltaY: ::std::os::raw::c_int,
        ),
    >,
    pub send_touch_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_touch_event_t),
    >,
    pub send_focus_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, setFocus: ::std::os::raw::c_int),
    >,
    pub send_capture_lost_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub notify_move_or_resize_started:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, frame_rate: ::std::os::raw::c_int),
    >,
    pub ime_set_composition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            underlinesCount: usize,
            underlines: *const cef_composition_underline_t,
            replacement_range: *const cef_range_t,
            selection_range: *const cef_range_t,
        ),
    >,
    pub ime_commit_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            replacement_range: *const cef_range_t,
            relative_cursor_pos: ::std::os::raw::c_int,
        ),
    >,
    pub ime_finish_composing_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            keep_selection: ::std::os::raw::c_int,
        ),
    >,
    pub ime_cancel_composition:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            drag_data: *mut _cef_drag_data_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_target_drag_over: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_target_drag_leave:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drop: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_mouse_event_t),
    >,
    pub drag_source_ended_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_source_system_drag_ended:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_visible_navigation_entry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_navigation_entry_t,
    >,
    pub set_accessibility_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, accessibility_state: cef_state_t),
    >,
    pub set_auto_resize_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            enabled: ::std::os::raw::c_int,
            min_size: *const cef_size_t,
            max_size: *const cef_size_t,
        ),
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_extension_t,
    >,
    pub is_background_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, mute: ::std::os::raw::c_int),
    >,
    pub is_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_host_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_host_t>(),
        512usize,
        concat!("Size of: ", stringify!(_cef_browser_host_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_host_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_browser_host_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).get_browser as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).close_browser as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(close_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).try_close_browser as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(try_close_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).set_focus as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_window_handle as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_window_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_opener_window_handle as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_opener_window_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).has_view as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(has_view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).get_client as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_client)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_request_context as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_request_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_zoom_level as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_zoom_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_zoom_level as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_zoom_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).run_file_dialog as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(run_file_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).start_download as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(start_download)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).download_image as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(download_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).print as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(print)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).print_to_pdf as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(print_to_pdf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).find as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(find)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).stop_finding as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(stop_finding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).show_dev_tools as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(show_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).close_dev_tools as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(close_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).has_dev_tools as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(has_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_navigation_entries as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_navigation_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_mouse_cursor_change_disabled
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_mouse_cursor_change_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_mouse_cursor_change_disabled
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_mouse_cursor_change_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).replace_misspelling as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(replace_misspelling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).add_word_to_dictionary as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(add_word_to_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_window_rendering_disabled as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_window_rendering_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).was_resized as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(was_resized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).was_hidden as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(was_hidden)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).notify_screen_info_changed as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(notify_screen_info_changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).invalidate as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_external_begin_frame as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_external_begin_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_key_event as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_key_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_click_event as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_click_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_move_event as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_move_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_wheel_event as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_wheel_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_touch_event as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_touch_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_focus_event as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_focus_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_capture_lost_event as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_capture_lost_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).notify_move_or_resize_started
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(notify_move_or_resize_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_windowless_frame_rate as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_windowless_frame_rate as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_set_composition as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_set_composition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_commit_text as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_commit_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_finish_composing_text as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_finish_composing_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_cancel_composition as *const _
                as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_cancel_composition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_enter as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_enter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_over as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_over)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_leave as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_leave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drop as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_source_ended_at as *const _
                as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_source_ended_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_source_system_drag_ended
                as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_source_system_drag_ended)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_visible_navigation_entry as *const _
                as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_visible_navigation_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_accessibility_state as *const _
                as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_accessibility_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_auto_resize_enabled as *const _
                as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_auto_resize_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_extension as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_background_host as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_background_host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_audio_muted as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_audio_muted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_audio_muted as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_audio_muted)
        )
    );
}
pub type cef_browser_host_t = _cef_browser_host_t;
extern "C" {
    pub fn cef_browser_host_create_browser(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_browser_host_create_browser_sync(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_browser_t;
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_print_settings_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> *mut _cef_print_settings_t,
    >,
    pub set_orientation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, landscape: ::std::os::raw::c_int),
    >,
    pub is_landscape: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_printer_printable_area: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            physical_size_device_units: *const cef_size_t,
            printable_area_device_units: *const cef_rect_t,
            landscape_needs_flip: ::std::os::raw::c_int,
        ),
    >,
    pub set_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, name: *const cef_string_t),
    >,
    pub get_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_string_userfree_t,
    >,
    pub set_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, dpi: ::std::os::raw::c_int),
    >,
    pub get_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: usize,
            ranges: *const cef_range_t,
        ),
    >,
    pub get_page_ranges_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> usize>,
    pub get_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: *mut usize,
            ranges: *mut cef_range_t,
        ),
    >,
    pub set_selection_only: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            selection_only: ::std::os::raw::c_int,
        ),
    >,
    pub is_selection_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, collate: ::std::os::raw::c_int),
    >,
    pub will_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, model: cef_color_model_t),
    >,
    pub get_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_color_model_t,
    >,
    pub set_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, copies: ::std::os::raw::c_int),
    >,
    pub get_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, mode: cef_duplex_mode_t),
    >,
    pub get_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_duplex_mode_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_print_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_settings_t>(),
        224usize,
        concat!("Size of: ", stringify!(_cef_print_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_settings_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_print_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_read_only as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).copy as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_orientation as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_landscape as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_landscape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_printer_printable_area as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_printer_printable_area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_device_name as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_device_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_device_name as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_device_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).set_dpi as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_dpi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).get_dpi as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_dpi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_page_ranges as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_page_ranges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_page_ranges_count as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_page_ranges_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_page_ranges as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_page_ranges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_selection_only as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_selection_only as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_collate as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_collate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).will_collate as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(will_collate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_color_model as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_color_model)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_color_model as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_color_model)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_copies as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_copies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_copies as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_copies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_duplex_mode as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_duplex_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_duplex_mode as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_duplex_mode)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_print_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_dialog_callback_t,
            settings: *mut _cef_print_settings_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_dialog_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_print_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_dialog_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_print_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_dialog_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_print_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).cancel as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_print_job_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_job_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_print_job_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_job_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_print_job_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_job_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_print_job_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_job_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_job_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_job_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_job_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_print_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_print_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_print_settings: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            settings: *mut _cef_print_settings_t,
            get_defaults: ::std::os::raw::c_int,
        ),
    >,
    pub on_print_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            has_selection: ::std::os::raw::c_int,
            callback: *mut _cef_print_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_print_job: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            document_name: *const cef_string_t,
            pdf_file_path: *const cef_string_t,
            callback: *mut _cef_print_job_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_print_reset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    pub get_pdf_paper_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            device_units_per_inch: ::std::os::raw::c_int,
        ) -> cef_size_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_print_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_handler_t>(),
        88usize,
        concat!("Size of: ", stringify!(_cef_print_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_print_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_start as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_settings as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_settings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_dialog as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_job as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_job)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_reset as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_reset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).get_pdf_paper_size as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(get_pdf_paper_size)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_browser_process_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_context_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t)>,
    pub on_before_child_process_launch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    pub on_render_process_thread_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            extra_info: *mut _cef_list_value_t,
        ),
    >,
    pub get_print_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
        ) -> *mut _cef_print_handler_t,
    >,
    pub on_schedule_message_pump_work: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t, delay_ms: int64),
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_process_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_process_handler_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_browser_process_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_process_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_browser_process_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).on_context_initialized
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_context_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>()))
                .on_before_child_process_launch as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_before_child_process_launch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>()))
                .on_render_process_thread_created as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_render_process_thread_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).get_print_handler as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(get_print_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).on_schedule_message_pump_work
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_schedule_message_pump_work)
        )
    );
}
pub type cef_browser_process_handler_t = _cef_browser_process_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_load_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_loading_state_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            isLoading: ::std::os::raw::c_int,
            canGoBack: ::std::os::raw::c_int,
            canGoForward: ::std::os::raw::c_int,
        ),
    >,
    pub on_load_start: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            transition_type: cef_transition_type_t,
        ),
    >,
    pub on_load_end: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            httpStatusCode: ::std::os::raw::c_int,
        ),
    >,
    pub on_load_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            errorCode: cef_errorcode_t,
            errorText: *const cef_string_t,
            failedUrl: *const cef_string_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_load_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_load_handler_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_load_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_load_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_load_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_load_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_loading_state_change as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_loading_state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_start as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_end as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_error as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_error)
        )
    );
}
pub type cef_load_handler_t = _cef_load_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_task_t {
    pub base: cef_base_ref_counted_t,
    pub execute: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_task_t)>,
}
#[test]
fn bindgen_test_layout__cef_task_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_task_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_task_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_task_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_task_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_t>())).execute as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_t),
            "::",
            stringify!(execute)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_task_runner_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            that: *mut _cef_task_runner_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub belongs_to_current_thread: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_task_runner_t) -> ::std::os::raw::c_int,
    >,
    pub belongs_to_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            threadId: cef_thread_id_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_delayed_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
            delay_ms: int64,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_task_runner_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_task_runner_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_task_runner_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_task_runner_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_task_runner_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).is_same as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).belongs_to_current_thread as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(belongs_to_current_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).belongs_to_thread as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(belongs_to_thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).post_task as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(post_task)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).post_delayed_task as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(post_delayed_task)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8context_t {
    pub base: cef_base_ref_counted_t,
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_task_runner_t,
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_browser_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_frame_t,
    >,
    pub get_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_v8value_t,
    >,
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub exit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            that: *mut _cef_v8context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub eval: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut *mut _cef_v8exception_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8context_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8context_t>(),
        112usize,
        concat!("Size of: ", stringify!(_cef_v8context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8context_t>())).get_task_runner as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_task_runner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).is_valid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_browser as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_frame as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_global as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_global)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).enter as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).exit as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).is_same as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).eval as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(eval)
        )
    );
}
pub type cef_v8context_t = _cef_v8context_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8handler_t {
    pub base: cef_base_ref_counted_t,
    pub execute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8handler_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8handler_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_v8handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8handler_t>())).execute as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8handler_t),
            "::",
            stringify!(execute)
        )
    );
}
pub type cef_v8handler_t = _cef_v8handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8accessor_t {
    pub base: cef_base_ref_counted_t,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8accessor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8accessor_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_v8accessor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8accessor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8accessor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).get as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).set as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(set)
        )
    );
}
pub type cef_v8accessor_t = _cef_v8accessor_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8interceptor_t {
    pub base: cef_base_ref_counted_t,
    pub get_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8interceptor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8interceptor_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_v8interceptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8interceptor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8interceptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).get_byname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(get_byname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8interceptor_t>())).get_byindex as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(get_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).set_byname as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(set_byname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8interceptor_t>())).set_byindex as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(set_byindex)
        )
    );
}
pub type cef_v8interceptor_t = _cef_v8interceptor_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8exception_t {
    pub base: cef_base_ref_counted_t,
    pub get_message: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_source_line: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_script_resource_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_start_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_end_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_start_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_end_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8exception_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8exception_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_v8exception_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8exception_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8exception_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8exception_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8exception_t>())).get_message as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_source_line as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_source_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_script_resource_name as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_script_resource_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_line_number as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_line_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_start_position as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_start_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_end_position as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_end_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_start_column as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_start_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_end_column as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_end_column)
        )
    );
}
pub type cef_v8exception_t = _cef_v8exception_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8array_buffer_release_callback_t {
    pub base: cef_base_ref_counted_t,
    pub release_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8array_buffer_release_callback_t,
            buffer: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_v8array_buffer_release_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8array_buffer_release_callback_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_cef_v8array_buffer_release_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8array_buffer_release_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_v8array_buffer_release_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8array_buffer_release_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8array_buffer_release_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8array_buffer_release_callback_t>())).release_buffer
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8array_buffer_release_callback_t),
            "::",
            stringify!(release_buffer)
        )
    );
}
pub type cef_v8array_buffer_release_callback_t = _cef_v8array_buffer_release_callback_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_undefined: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_uint: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_date: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_object: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_function: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            that: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_bool_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_int_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> int32>,
    pub get_uint_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> uint32>,
    pub get_double_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> f64>,
    pub get_date_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_time_t>,
    pub get_string_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    pub is_user_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub has_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8exception_t,
    >,
    pub clear_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub will_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub set_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            rethrow: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_v8value_t,
    >,
    pub get_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8value_t,
    >,
    pub set_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            value: *mut _cef_v8value_t,
            attribute: cef_v8_propertyattribute_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
            value: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_value_byaccessor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            settings: cef_v8_accesscontrol_t,
            attribute: cef_v8_propertyattribute_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_user_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            user_data: *mut _cef_base_ref_counted_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_user_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_base_ref_counted_t,
    >,
    pub get_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub adjust_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            change_in_bytes: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_array_length: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_array_buffer_release_callback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
        ) -> *mut _cef_v8array_buffer_release_callback_t,
    >,
    pub neuter_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    pub get_function_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8handler_t,
    >,
    pub execute_function: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
    pub execute_function_with_context: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            context: *mut _cef_v8context_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8value_t>(),
        416usize,
        concat!("Size of: ", stringify!(_cef_v8value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_undefined as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_undefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_null as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_bool as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_int as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_uint as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_uint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_double as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_date as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_string as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_object as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_array as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_array_buffer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_array_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_function as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_same as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_bool_value as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_bool_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_int_value as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_int_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_uint_value as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_uint_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_double_value as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_double_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_date_value as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_date_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_string_value as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_string_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_user_created as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_user_created)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).has_exception as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_exception as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).clear_exception as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(clear_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).will_rethrow_exceptions as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(will_rethrow_exceptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_rethrow_exceptions as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_rethrow_exceptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).has_value_bykey as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).has_value_byindex as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_value_byindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).delete_value_bykey as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(delete_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).delete_value_byindex as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(delete_value_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_value_bykey as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_value_byindex as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_value_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_bykey as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_byindex as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_byindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_byaccessor as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_byaccessor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_keys as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).set_user_data as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_user_data as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_externally_allocated_memory as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_externally_allocated_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).adjust_externally_allocated_memory
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(adjust_externally_allocated_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_array_length as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_array_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_array_buffer_release_callback as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_array_buffer_release_callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).neuter_array_buffer as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(neuter_array_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_function_name as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_function_handler as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_function_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).execute_function as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(execute_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).execute_function_with_context as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(execute_function_with_context)
        )
    );
}
pub type cef_v8value_t = _cef_v8value_t;
extern "C" {
    pub fn cef_v8value_create_undefined() -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_null() -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_bool(value: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_int(value: int32) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_uint(value: uint32) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_double(value: f64) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_date(date: *const cef_time_t) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_string(value: *const cef_string_t) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_object(
        accessor: *mut cef_v8accessor_t,
        interceptor: *mut cef_v8interceptor_t,
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_array(length: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_array_buffer(
        buffer: *mut ::std::os::raw::c_void,
        length: usize,
        release_callback: *mut cef_v8array_buffer_release_callback_t,
    ) -> *mut cef_v8value_t;
}
extern "C" {
    pub fn cef_v8value_create_function(
        name: *const cef_string_t,
        handler: *mut cef_v8handler_t,
    ) -> *mut cef_v8value_t;
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8stack_trace_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    pub get_frame_count: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8stack_trace_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8stack_frame_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8stack_trace_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8stack_trace_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_v8stack_trace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8stack_trace_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8stack_trace_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).get_frame_count as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(get_frame_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).get_frame as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(get_frame)
        )
    );
}
pub type cef_v8stack_trace_t = _cef_v8stack_trace_t;
extern "C" {
    pub fn cef_v8stack_trace_get_current(
        frame_limit: ::std::os::raw::c_int,
    ) -> *mut cef_v8stack_trace_t;
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_v8stack_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_script_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_script_name_or_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_eval: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_constructor: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8stack_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8stack_frame_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_v8stack_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8stack_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_v8stack_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_script_name as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_script_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_script_name_or_source_url
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_script_name_or_source_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_function_name as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_line_number as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_line_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_column as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_eval as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_eval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_constructor as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_constructor)
        )
    );
}
pub type cef_v8stack_frame_t = _cef_v8stack_frame_t;
extern "C" {
    pub fn cef_register_extension(
        extension_name: *const cef_string_t,
        javascript_code: *const cef_string_t,
        handler: *mut cef_v8handler_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_render_process_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_render_thread_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            extra_info: *mut _cef_list_value_t,
        ),
    >,
    pub on_web_kit_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t)>,
    pub on_browser_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            extra_info: *mut _cef_dictionary_value_t,
        ),
    >,
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t) -> *mut _cef_load_handler_t,
    >,
    pub on_context_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    pub on_context_released: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    pub on_uncaught_exception: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
            exception: *mut _cef_v8exception_t,
            stackTrace: *mut _cef_v8stack_trace_t,
        ),
    >,
    pub on_focused_node_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            node: *mut _cef_domnode_t,
        ),
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_render_process_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_render_process_handler_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_render_process_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_render_process_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_render_process_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_render_thread_created
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_render_thread_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_web_kit_initialized
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_web_kit_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_browser_created as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_browser_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_browser_destroyed
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_browser_destroyed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).get_load_handler as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(get_load_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_context_created as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_context_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_context_released
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_context_released)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_uncaught_exception
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_uncaught_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_focused_node_changed
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_focused_node_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_process_message_received
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_process_message_received)
        )
    );
}
pub type cef_render_process_handler_t = _cef_render_process_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_resource_bundle_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_localized_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            string_id: ::std::os::raw::c_int,
            string: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_data_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_bundle_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_bundle_handler_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_resource_bundle_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_bundle_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_bundle_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_localized_string
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_localized_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_data_resource as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_data_resource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_data_resource_for_scale
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_data_resource_for_scale)
        )
    );
}
pub type cef_resource_bundle_handler_t = _cef_resource_bundle_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_response_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    pub get_error:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_errorcode_t>,
    pub set_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, error: cef_errorcode_t),
    >,
    pub get_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    pub set_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int),
    >,
    pub get_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t),
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t),
    >,
    pub get_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, charset: *const cef_string_t),
    >,
    pub get_header: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, url: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_response_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_response_t>(),
        168usize,
        concat!("Size of: ", stringify!(_cef_response_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_response_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_response_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).is_read_only as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_error as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_error as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_status as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_status as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_status_text as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_status_text as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_mime_type as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_mime_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_mime_type as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_mime_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_charset as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_charset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_charset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_charset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_header as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_header_map as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_header_map as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_url as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_url as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_url)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_resource_skip_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_resource_skip_callback_t, bytes_skipped: int64),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_skip_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_skip_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_resource_skip_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_skip_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_skip_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_skip_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_skip_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_skip_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_skip_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_resource_read_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_read_callback_t,
            bytes_read: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_read_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_read_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_resource_read_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_read_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_read_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_read_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_read_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_read_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_read_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_resource_handler_t {
    pub base: cef_base_ref_counted_t,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            handle_request: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub process_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_response_headers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            response: *mut _cef_response_t,
            response_length: *mut int64,
            redirectUrl: *mut cef_string_t,
        ),
    >,
    pub skip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            bytes_to_skip: int64,
            bytes_skipped: *mut int64,
            callback: *mut _cef_resource_skip_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_resource_read_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_resource_handler_t)>,
}
#[test]
fn bindgen_test_layout__cef_resource_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_handler_t>(),
        96usize,
        concat!("Size of: ", stringify!(_cef_resource_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).open as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).process_request as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(process_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).get_response_headers as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(get_response_headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).skip as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).read as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).read_response as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(read_response)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).cancel as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_scheme_registrar_t {
    pub base: cef_base_scoped_t,
    pub add_custom_scheme: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_registrar_t,
            scheme_name: *const cef_string_t,
            options: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_scheme_registrar_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_scheme_registrar_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_scheme_registrar_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_scheme_registrar_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_scheme_registrar_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_scheme_registrar_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_registrar_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_registrar_t>())).add_custom_scheme as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_registrar_t),
            "::",
            stringify!(add_custom_scheme)
        )
    );
}
pub type cef_scheme_registrar_t = _cef_scheme_registrar_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_scheme_handler_factory_t {
    pub base: cef_base_ref_counted_t,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_handler_factory_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            scheme_name: *const cef_string_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_scheme_handler_factory_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_scheme_handler_factory_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_scheme_handler_factory_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_scheme_handler_factory_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_scheme_handler_factory_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_handler_factory_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_handler_factory_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_handler_factory_t>())).create as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_handler_factory_t),
            "::",
            stringify!(create)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_app_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_command_line_processing: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_app_t,
            process_type: *const cef_string_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    pub on_register_custom_schemes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t, registrar: *mut _cef_scheme_registrar_t),
    >,
    pub get_resource_bundle_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_resource_bundle_handler_t,
    >,
    pub get_browser_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_browser_process_handler_t,
    >,
    pub get_render_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_render_process_handler_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_app_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_app_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_app_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_app_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_app_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_app_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).on_before_command_line_processing as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(on_before_command_line_processing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).on_register_custom_schemes as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(on_register_custom_schemes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_resource_bundle_handler as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_resource_bundle_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_browser_process_handler as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_browser_process_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_render_process_handler as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_render_process_handler)
        )
    );
}
pub type cef_app_t = _cef_app_t;
extern "C" {
    pub fn cef_execute_process(
        args: *const _cef_main_args_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_initialize(
        args: *const _cef_main_args_t,
        settings: *const _cef_settings_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_shutdown();
}
extern "C" {
    pub fn cef_do_message_loop_work();
}
extern "C" {
    pub fn cef_run_message_loop();
}
extern "C" {
    pub fn cef_quit_message_loop();
}
extern "C" {
    pub fn cef_enable_highdpi_support();
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_audio_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_audio_stream_started: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            audio_stream_id: ::std::os::raw::c_int,
            channels: ::std::os::raw::c_int,
            channel_layout: cef_channel_layout_t,
            sample_rate: ::std::os::raw::c_int,
            frames_per_buffer: ::std::os::raw::c_int,
        ),
    >,
    pub on_audio_stream_packet: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            audio_stream_id: ::std::os::raw::c_int,
            data: *mut *const f32,
            frames: ::std::os::raw::c_int,
            pts: int64,
        ),
    >,
    pub on_audio_stream_stopped: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            audio_stream_id: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_audio_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_audio_handler_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_audio_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_audio_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_audio_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_audio_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_handler_t>())).on_audio_stream_started as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(on_audio_stream_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_handler_t>())).on_audio_stream_packet as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(on_audio_stream_packet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_handler_t>())).on_audio_stream_stopped as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(on_audio_stream_stopped)
        )
    );
}
pub type cef_audio_handler_t = _cef_audio_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_menu_model_t {
    pub base: cef_base_ref_counted_t,
    pub is_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub get_count: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub add_separator: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub add_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_check_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_radio_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    pub insert_separator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_check_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_radio_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_index_of: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub get_label_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub set_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_label_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t,
    >,
    pub get_type_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t,
    >,
    pub get_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    pub get_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_visible_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_visible_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_checked_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_checked_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_list_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_menu_model_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_menu_model_t>(),
        488usize,
        concat!("Size of: ", stringify!(_cef_menu_model_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_menu_model_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_menu_model_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_sub_menu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_sub_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).clear as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_separator as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_separator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_item as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).add_check_item as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_check_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).add_radio_item as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_radio_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_sub_menu as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_sub_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_separator_at as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_separator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_item_at as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_check_item_at as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_check_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_radio_item_at as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_radio_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_sub_menu_at as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_sub_menu_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).remove as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_at as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_index_of as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_index_of)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_command_id_at as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_command_id_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_command_id_at as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_command_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_label as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_label_at as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_label_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_label as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_label_at as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_label_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_type as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_type_at as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_type_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_group_id as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_group_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_group_id_at as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_group_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_group_id as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_group_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_group_id_at as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_group_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_sub_menu as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_sub_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_sub_menu_at as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_sub_menu_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_visible as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_visible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_visible_at as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_visible_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_visible as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_visible_at as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_visible_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_enabled as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_enabled_at as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_enabled_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_enabled as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_enabled_at as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_enabled_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_checked as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_checked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_checked_at as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_checked_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_checked as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_checked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_checked_at as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_checked_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).has_accelerator as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(has_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).has_accelerator_at as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(has_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_accelerator as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_accelerator_at as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_accelerator as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_accelerator_at as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_accelerator as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_accelerator_at as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_accelerator_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_color as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_color_at as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_color_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_color as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_color_at as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_color_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_font_list as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_font_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_font_list_at as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_font_list_at)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_run_context_menu_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_context_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_run_context_menu_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_run_context_menu_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_run_context_menu_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_run_context_menu_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_run_context_menu_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_run_context_menu_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).cancel as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_context_menu_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
        ),
    >,
    pub run_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
            callback: *mut _cef_run_context_menu_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_context_menu_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_context_menu_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_context_menu_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_context_menu_handler_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_context_menu_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_context_menu_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_context_menu_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_before_context_menu
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_before_context_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).run_context_menu as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(run_context_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_context_menu_command
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_context_menu_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_context_menu_dismissed
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_context_menu_dismissed)
        )
    );
}
pub type cef_context_menu_handler_t = _cef_context_menu_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_context_menu_params_t {
    pub base: cef_base_ref_counted_t,
    pub get_xcoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_ycoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_type_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_type_flags_t,
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_unfiltered_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub has_image_contents: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_title_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_page_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_frame_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_frame_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_media_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_type_t,
    >,
    pub get_media_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_state_flags_t,
    >,
    pub get_selection_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_misspelled_word: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_dictionary_suggestions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
            suggestions: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub is_spell_check_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_edit_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_edit_state_flags_t,
    >,
    pub is_custom_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub is_pepper_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_context_menu_params_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_context_menu_params_t>(),
        208usize,
        concat!("Size of: ", stringify!(_cef_context_menu_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_context_menu_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_context_menu_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_context_menu_params_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_xcoord as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_xcoord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_ycoord as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_ycoord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_type_flags as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_type_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_link_url as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_link_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_unfiltered_link_url
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_unfiltered_link_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_source_url as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_source_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).has_image_contents as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(has_image_contents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_title_text as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_title_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_page_url as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_page_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_frame_url as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_frame_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_frame_charset as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_frame_charset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_media_type as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_media_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_media_state_flags as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_media_state_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_selection_text as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_selection_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_misspelled_word as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_misspelled_word)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_dictionary_suggestions
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_dictionary_suggestions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_editable as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_editable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_spell_check_enabled
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_spell_check_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_edit_state_flags as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_edit_state_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_custom_menu as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_custom_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_pepper_menu as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_pepper_menu)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_file_dialog_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_file_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_file_dialog_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_file_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_file_dialog_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_file_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).cancel as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_dialog_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dialog_handler_t,
            browser: *mut _cef_browser_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_file_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_dialog_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_dialog_handler_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_dialog_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_dialog_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_dialog_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dialog_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dialog_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dialog_handler_t>())).on_file_dialog as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dialog_handler_t),
            "::",
            stringify!(on_file_dialog)
        )
    );
}
pub type cef_dialog_handler_t = _cef_dialog_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_display_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_address_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            url: *const cef_string_t,
        ),
    >,
    pub on_title_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            title: *const cef_string_t,
        ),
    >,
    pub on_favicon_urlchange: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            icon_urls: cef_string_list_t,
        ),
    >,
    pub on_fullscreen_mode_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            fullscreen: ::std::os::raw::c_int,
        ),
    >,
    pub on_tooltip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            text: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_status_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            value: *const cef_string_t,
        ),
    >,
    pub on_console_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            level: cef_log_severity_t,
            message: *const cef_string_t,
            source: *const cef_string_t,
            line: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_auto_resize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            new_size: *const cef_size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_loading_progress_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            progress: f64,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_display_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_display_handler_t>(),
        112usize,
        concat!("Size of: ", stringify!(_cef_display_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_display_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_display_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_display_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_address_change as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_address_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_title_change as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_title_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_favicon_urlchange as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_favicon_urlchange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_fullscreen_mode_change as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_fullscreen_mode_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_tooltip as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_tooltip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_status_message as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_status_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_console_message as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_console_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_auto_resize as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_auto_resize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_loading_progress_change
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_loading_progress_change)
        )
    );
}
pub type cef_display_handler_t = _cef_display_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_download_item_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_in_progress: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_canceled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub get_current_speed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_percent_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub get_total_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_received_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_start_time:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_time_t>,
    pub get_end_time:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_time_t>,
    pub get_full_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_id:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> uint32>,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_suggested_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_content_disposition: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_download_item_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_item_t>(),
        176usize,
        concat!("Size of: ", stringify!(_cef_download_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_download_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).is_valid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_in_progress as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_in_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_complete as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_canceled as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_canceled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_current_speed as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_current_speed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_percent_complete as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_percent_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_total_bytes as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_total_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_received_bytes as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_received_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_start_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_start_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_end_time as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_end_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_full_path as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_full_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).get_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).get_url as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_original_url as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_original_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_suggested_file_name as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_suggested_file_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_content_disposition as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_content_disposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_mime_type as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_mime_type)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_before_download_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_before_download_callback_t,
            download_path: *const cef_string_t,
            show_dialog: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_before_download_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_before_download_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_before_download_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_before_download_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_before_download_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_before_download_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_before_download_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_before_download_callback_t>())).cont as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_before_download_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_download_item_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    pub pause:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    pub resume:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_download_item_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_item_callback_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_download_item_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_item_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_download_item_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).cancel as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).pause as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(pause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).resume as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(resume)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_download_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_download: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            suggested_name: *const cef_string_t,
            callback: *mut _cef_before_download_callback_t,
        ),
    >,
    pub on_download_updated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            callback: *mut _cef_download_item_callback_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_download_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_download_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_download_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_handler_t>())).on_before_download as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(on_before_download)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_handler_t>())).on_download_updated as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(on_download_updated)
        )
    );
}
pub type cef_download_handler_t = _cef_download_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_drag_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            dragData: *mut _cef_drag_data_t,
            mask: cef_drag_operations_mask_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_draggable_regions_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_drag_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_drag_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_drag_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_drag_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_drag_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_handler_t>())).on_drag_enter as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(on_drag_enter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_handler_t>())).on_draggable_regions_changed as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(on_draggable_regions_changed)
        )
    );
}
pub type cef_drag_handler_t = _cef_drag_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_find_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_find_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_find_handler_t,
            browser: *mut _cef_browser_t,
            identifier: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            selectionRect: *const cef_rect_t,
            activeMatchOrdinal: ::std::os::raw::c_int,
            finalUpdate: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_find_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_find_handler_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_find_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_find_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_find_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_find_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_find_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_find_handler_t>())).on_find_result as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_find_handler_t),
            "::",
            stringify!(on_find_result)
        )
    );
}
pub type cef_find_handler_t = _cef_find_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_focus_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_take_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            next: ::std::os::raw::c_int,
        ),
    >,
    pub on_set_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            source: cef_focus_source_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_got_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_focus_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_focus_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_focus_handler_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_focus_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_focus_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_focus_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_focus_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_take_focus as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_take_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_set_focus as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_set_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_got_focus as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_got_focus)
        )
    );
}
pub type cef_focus_handler_t = _cef_focus_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_jsdialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_callback_t,
            success: ::std::os::raw::c_int,
            user_input: *const cef_string_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_jsdialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_jsdialog_callback_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_jsdialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_jsdialog_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_jsdialog_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_jsdialog_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_jsdialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            dialog_type: cef_jsdialog_type_t,
            message_text: *const cef_string_t,
            default_prompt_text: *const cef_string_t,
            callback: *mut _cef_jsdialog_callback_t,
            suppress_message: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_unload_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            message_text: *const cef_string_t,
            is_reload: ::std::os::raw::c_int,
            callback: *mut _cef_jsdialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_reset_dialog_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_dialog_closed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_jsdialog_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_jsdialog_handler_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_jsdialog_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_jsdialog_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_jsdialog_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_jsdialog as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_jsdialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_before_unload_dialog as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_before_unload_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_reset_dialog_state as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_reset_dialog_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_dialog_closed as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_dialog_closed)
        )
    );
}
pub type cef_jsdialog_handler_t = _cef_jsdialog_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_keyboard_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_pre_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut MSG,
            is_keyboard_shortcut: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut MSG,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_keyboard_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_keyboard_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_keyboard_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_keyboard_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_keyboard_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).on_pre_key_event as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(on_pre_key_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).on_key_event as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(on_key_event)
        )
    );
}
pub type cef_keyboard_handler_t = _cef_keyboard_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_life_span_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_popup: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_frame_name: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t,
            user_gesture: ::std::os::raw::c_int,
            popupFeatures: *const _cef_popup_features_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            no_javascript_access: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_after_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t),
    >,
    pub do_close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_life_span_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_life_span_handler_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_life_span_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_life_span_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_life_span_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_life_span_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_before_popup as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_before_popup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_after_created as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_after_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).do_close as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(do_close)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_before_close as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_before_close)
        )
    );
}
pub type cef_life_span_handler_t = _cef_life_span_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_accessibility_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_accessibility_tree_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t),
    >,
    pub on_accessibility_location_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_accessibility_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_accessibility_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_accessibility_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_accessibility_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_accessibility_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>())).on_accessibility_tree_change
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(on_accessibility_tree_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>()))
                .on_accessibility_location_change as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(on_accessibility_location_change)
        )
    );
}
pub type cef_accessibility_handler_t = _cef_accessibility_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_render_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_accessibility_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
        ) -> *mut _cef_accessibility_handler_t,
    >,
    pub get_root_screen_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_view_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ),
    >,
    pub get_screen_point: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            viewX: ::std::os::raw::c_int,
            viewY: ::std::os::raw::c_int,
            screenX: *mut ::std::os::raw::c_int,
            screenY: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_screen_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            screen_info: *mut _cef_screen_info_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_popup_show: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            show: ::std::os::raw::c_int,
        ),
    >,
    pub on_popup_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *const cef_rect_t,
        ),
    >,
    pub on_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            buffer: *const ::std::os::raw::c_void,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub on_accelerated_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            shared_handle: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_cursor_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            cursor: HCURSOR,
            type_: cef_cursor_type_t,
            custom_cursor_info: *const _cef_cursor_info_t,
        ),
    >,
    pub start_dragging: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            drag_data: *mut _cef_drag_data_t,
            allowed_ops: cef_drag_operations_mask_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub update_drag_cursor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            operation: cef_drag_operations_mask_t,
        ),
    >,
    pub on_scroll_offset_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            x: f64,
            y: f64,
        ),
    >,
    pub on_ime_composition_range_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_range: *const cef_range_t,
            character_boundsCount: usize,
            character_bounds: *const cef_rect_t,
        ),
    >,
    pub on_text_selection_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_text: *const cef_string_t,
            selected_range: *const cef_range_t,
        ),
    >,
    pub on_virtual_keyboard_requested: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            input_mode: cef_text_input_mode_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_render_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_render_handler_t>(),
        168usize,
        concat!("Size of: ", stringify!(_cef_render_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_render_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_render_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_render_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_accessibility_handler as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_accessibility_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_root_screen_rect as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_root_screen_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_view_rect as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_view_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_screen_point as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_screen_point)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_screen_info as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_screen_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_popup_show as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_popup_show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_popup_size as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_popup_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_render_handler_t>())).on_paint as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_accelerated_paint as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_accelerated_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_cursor_change as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_cursor_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).start_dragging as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(start_dragging)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).update_drag_cursor as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(update_drag_cursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_scroll_offset_changed as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_scroll_offset_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_ime_composition_range_changed
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_ime_composition_range_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_text_selection_changed as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_text_selection_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_virtual_keyboard_requested
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_virtual_keyboard_requested)
        )
    );
}
pub type cef_render_handler_t = _cef_render_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_auth_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t,
        ),
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_auth_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_auth_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_auth_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_auth_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_auth_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_auth_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).cancel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_request_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_callback_t, allow: ::std::os::raw::c_int),
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_request_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_callback_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_request_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_callback_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).cont as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).cancel as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_response_filter_t {
    pub base: cef_base_ref_counted_t,
    pub init_filter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_filter_t) -> ::std::os::raw::c_int,
    >,
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_filter_t,
            data_in: *mut ::std::os::raw::c_void,
            data_in_size: usize,
            data_in_read: *mut usize,
            data_out: *mut ::std::os::raw::c_void,
            data_out_size: usize,
            data_out_written: *mut usize,
        ) -> cef_response_filter_status_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_response_filter_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_response_filter_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_response_filter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_response_filter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_response_filter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_filter_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_response_filter_t>())).init_filter as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(init_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_filter_t>())).filter as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(filter)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_resource_request_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_cookie_access_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_cookie_access_filter_t,
    >,
    pub on_before_resource_load: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_request_callback_t,
        ) -> cef_return_value_t,
    >,
    pub get_resource_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
    pub on_resource_redirect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            new_url: *mut cef_string_t,
        ),
    >,
    pub on_resource_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_response_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> *mut _cef_response_filter_t,
    >,
    pub on_resource_load_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            status: cef_urlrequest_status_t,
            received_content_length: int64,
        ),
    >,
    pub on_protocol_execution: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            allow_os_execution: *mut ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_request_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_request_handler_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_resource_request_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_request_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_resource_request_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_cookie_access_filter
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_cookie_access_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_before_resource_load
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_before_resource_load)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_resource_handler
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_resource_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_redirect
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_redirect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_response
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_response)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_resource_response_filter
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_resource_response_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_load_complete
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_load_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_protocol_execution
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_protocol_execution)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_cookie_access_filter_t {
    pub base: cef_base_ref_counted_t,
    pub can_send_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub can_save_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_access_filter_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_access_filter_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_cookie_access_filter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_access_filter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_cookie_access_filter_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).can_send_cookie as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(can_send_cookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).can_save_cookie as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(can_save_cookie)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_sslinfo_t {
    pub base: cef_base_ref_counted_t,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> cef_cert_status_t,
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> *mut _cef_x509certificate_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_sslinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_sslinfo_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_sslinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_sslinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_sslinfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslinfo_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslinfo_t>())).get_cert_status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(get_cert_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslinfo_t>())).get_x509certificate as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(get_x509certificate)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_select_client_certificate_callback_t {
    pub base: cef_base_ref_counted_t,
    pub select: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_select_client_certificate_callback_t,
            cert: *mut _cef_x509certificate_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_select_client_certificate_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_select_client_certificate_callback_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_cef_select_client_certificate_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_select_client_certificate_callback_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_select_client_certificate_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_select_client_certificate_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_select_client_certificate_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_select_client_certificate_callback_t>())).select as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_select_client_certificate_callback_t),
            "::",
            stringify!(select)
        )
    );
}
#[repr(C)]
#[derive(Default)]
pub struct _cef_request_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_browse: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            user_gesture: ::std::os::raw::c_int,
            is_redirect: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_open_urlfrom_tab: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t,
            user_gesture: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_resource_request_handler_t,
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_quota_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            new_size: int64,
            callback: *mut _cef_request_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_certificate_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            cert_error: cef_errorcode_t,
            request_url: *const cef_string_t,
            ssl_info: *mut _cef_sslinfo_t,
            callback: *mut _cef_request_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_select_client_certificate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            certificatesCount: usize,
            certificates: *const *mut _cef_x509certificate_t,
            callback: *mut _cef_select_client_certificate_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_plugin_crashed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            plugin_path: *const cef_string_t,
        ),
    >,
    pub on_render_view_ready: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_render_process_terminated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            status: cef_termination_status_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_request_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_handler_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_request_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_request_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_before_browse as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_before_browse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_open_urlfrom_tab as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_open_urlfrom_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).get_resource_request_handler
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(get_resource_request_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).get_auth_credentials as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(get_auth_credentials)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_quota_request as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_quota_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_certificate_error as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_certificate_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_select_client_certificate
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_select_client_certificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_plugin_crashed as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_plugin_crashed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_render_view_ready as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_render_view_ready)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_render_process_terminated
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_render_process_terminated)
        )
    );
}
pub type cef_request_handler_t = _cef_request_handler_t;
#[repr(C)]
#[derive(Default)]
pub struct _cef_client_t {
    pub base: cef_base_ref_counted_t,
    pub get_audio_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_audio_handler_t,
    >,
    pub get_context_menu_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_context_menu_handler_t,
    >,
    pub get_dialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_dialog_handler_t,
    >,
    pub get_display_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_display_handler_t,
    >,
    pub get_download_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_download_handler_t,
    >,
    pub get_drag_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_drag_handler_t,
    >,
    pub get_find_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_find_handler_t,
    >,
    pub get_focus_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_focus_handler_t,
    >,
    pub get_jsdialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_jsdialog_handler_t,
    >,
    pub get_keyboard_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_keyboard_handler_t,
    >,
    pub get_life_span_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_life_span_handler_t,
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_load_handler_t,
    >,
    pub get_render_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_render_handler_t,
    >,
    pub get_request_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_request_handler_t,
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_client_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_client_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_client_t>(),
        160usize,
        concat!("Size of: ", stringify!(_cef_client_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_client_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_cef_client_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_audio_handler as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_audio_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_context_menu_handler as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_context_menu_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_dialog_handler as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_dialog_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_display_handler as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_display_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_download_handler as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_download_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_drag_handler as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_drag_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_find_handler as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_find_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_focus_handler as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_focus_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_jsdialog_handler as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_jsdialog_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_keyboard_handler as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_keyboard_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_life_span_handler as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_life_span_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_load_handler as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_load_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_render_handler as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_render_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_request_handler as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_request_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).on_process_message_received as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(on_process_message_received)
        )
    );
}
pub type cef_client_t = _cef_client_t;
#[test]
fn __bindgen_test_layout_std__Yarn_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std__Yarn<::std::os::raw::c_char>>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std__Yarn<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std__Yarn<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std__Yarn<::std::os::raw::c_char>)
        )
    );
}
